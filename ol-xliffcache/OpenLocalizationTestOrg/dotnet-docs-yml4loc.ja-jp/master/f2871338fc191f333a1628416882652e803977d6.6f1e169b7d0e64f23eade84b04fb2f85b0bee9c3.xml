{"nodes":[{"content":"Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.","nodes":[{"pos":[0,223],"content":"Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.","nodes":[{"content":"Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.","pos":[0,223]}]}],"pos":[15894,16118],"yaml":true},{"content":"The `static` methods defined on the <xref:System.Runtime.InteropServices.Marshal> class are essential to working with unmanaged code. Most methods defined in this class are typically used by developers who want to provide a bridge between the managed and unmanaged programming models. For example, the <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> method copies ANSI characters from a specified string (in the managed heap) to a buffer in the unmanaged heap. It also allocates the target heap of the right size.  \n  \n The common language runtime provides specific marshaling capabilities. For details on marshaling behavior, see [Interop Marshaling](~/docs/framework/interop/interop-marshaling.md).  \n  \n The `Read` and `Write` methods in the <xref:System.Runtime.InteropServices.Marshal> class support both aligned and unaligned access.","nodes":[{"pos":[0,534],"content":"The `static` methods defined on the <xref:System.Runtime.InteropServices.Marshal> class are essential to working with unmanaged code. Most methods defined in this class are typically used by developers who want to provide a bridge between the managed and unmanaged programming models. For example, the <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> method copies ANSI characters from a specified string (in the managed heap) to a buffer in the unmanaged heap. It also allocates the target heap of the right size.","nodes":[{"content":"The <ph id=\"ph1\">`static`</ph> methods defined on the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class are essential to working with unmanaged code.","pos":[0,133],"source":"The `static` methods defined on the <xref:System.Runtime.InteropServices.Marshal> class are essential to working with unmanaged code."},{"content":"Most methods defined in this class are typically used by developers who want to provide a bridge between the managed and unmanaged programming models.","pos":[134,284]},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A&gt;</ph> method copies ANSI characters from a specified string (in the managed heap) to a buffer in the unmanaged heap.","pos":[285,481],"source":" For example, the <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> method copies ANSI characters from a specified string (in the managed heap) to a buffer in the unmanaged heap."},{"content":"It also allocates the target heap of the right size.","pos":[482,534]}]},{"pos":[541,721],"content":"The common language runtime provides specific marshaling capabilities. For details on marshaling behavior, see [Interop Marshaling](~/docs/framework/interop/interop-marshaling.md).","nodes":[{"content":"The common language runtime provides specific marshaling capabilities.","pos":[0,70]},{"content":"For details on marshaling behavior, see <bpt id=\"p1\">[</bpt>Interop Marshaling<ept id=\"p1\">](~/docs/framework/interop/interop-marshaling.md)</ept>.","pos":[71,180],"source":" For details on marshaling behavior, see [Interop Marshaling](~/docs/framework/interop/interop-marshaling.md)."}]},{"pos":[728,860],"content":"The <ph id=\"ph1\">`Read`</ph> and <ph id=\"ph2\">`Write`</ph> methods in the <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class support both aligned and unaligned access.","source":"The `Read` and `Write` methods in the <xref:System.Runtime.InteropServices.Marshal> class support both aligned and unaligned access."}],"pos":[16129,16996],"yaml":true,"extradata":"MT"},{"content":"Increments the reference count on the specified interface.","nodes":[{"pos":[0,58],"content":"Increments the reference count on the specified interface.","nodes":[{"content":"Increments the reference count on the specified interface.","pos":[0,58]}]}],"pos":[19344,19403],"yaml":true},{"content":"The common language runtime manages the reference count of a COM object for you, making it unnecessary to use this method directly. In rare cases, such as testing a custom marshaler, you might find it necessary to manipulate an object's lifetime manually. After calling <xref:System.Runtime.InteropServices.Marshal.AddRef%2A>, you must decrement the reference count by using a method such as <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName>. Do not rely on the return value of <xref:System.Runtime.InteropServices.Marshal.AddRef%2A>, as it can sometimes be unstable.  \n  \n You can call <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=fullName>, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName> to obtain an <xref:System.IntPtr> value that represents an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface pointer. You can also use these methods and the <xref:System.Runtime.InteropServices.Marshal.AddRef%2A> method on managed objects to obtain the COM interfaces represented by the managed object's COM callable wrapper. If you are not familiar with the details of this wrapper type, see [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md).","nodes":[{"pos":[0,599],"content":"The common language runtime manages the reference count of a COM object for you, making it unnecessary to use this method directly. In rare cases, such as testing a custom marshaler, you might find it necessary to manipulate an object's lifetime manually. After calling <xref:System.Runtime.InteropServices.Marshal.AddRef%2A>, you must decrement the reference count by using a method such as <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName>. Do not rely on the return value of <xref:System.Runtime.InteropServices.Marshal.AddRef%2A>, as it can sometimes be unstable.","nodes":[{"content":"The common language runtime manages the reference count of a COM object for you, making it unnecessary to use this method directly. In rare cases, such as testing a custom marshaler, you might find it necessary to manipulate an object's lifetime manually. After calling <xref:System.Runtime.InteropServices.Marshal.AddRef%2A>, you must decrement the reference count by using a method such as <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName>. Do not rely on the return value of <xref:System.Runtime.InteropServices.Marshal.AddRef%2A>, as it can sometimes be unstable.","pos":[0,599],"nodes":[{"content":"The common language runtime manages the reference count of a COM object for you, making it unnecessary to use this method directly.","pos":[0,131]},{"content":"In rare cases, such as testing a custom marshaler, you might find it necessary to manipulate an object's lifetime manually.","pos":[132,255]},{"content":"After calling <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.AddRef%2A&gt;</ph>, you must decrement the reference count by using a method such as <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName&gt;</ph>.","pos":[256,474],"source":" After calling <xref:System.Runtime.InteropServices.Marshal.AddRef%2A>, you must decrement the reference count by using a method such as <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName>."},{"content":"Do not rely on the return value of <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.AddRef%2A&gt;</ph>, as it can sometimes be unstable.","pos":[475,599],"source":" Do not rely on the return value of <xref:System.Runtime.InteropServices.Marshal.AddRef%2A>, as it can sometimes be unstable."}]}]},{"pos":[606,1398],"content":"You can call <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=fullName>, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName> to obtain an <xref:System.IntPtr> value that represents an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface pointer. You can also use these methods and the <xref:System.Runtime.InteropServices.Marshal.AddRef%2A> method on managed objects to obtain the COM interfaces represented by the managed object's COM callable wrapper. If you are not familiar with the details of this wrapper type, see [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md).","nodes":[{"content":"You can call <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=fullName&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName&gt;</ph> to obtain an <ph id=\"ph4\">&lt;xref:System.IntPtr&gt;</ph> value that represents an <bpt id=\"p1\">[</bpt>IUnknown<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148003)</ept> interface pointer.","pos":[0,443],"source":"You can call <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=fullName>, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName> to obtain an <xref:System.IntPtr> value that represents an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface pointer."},{"content":"You can also use these methods and the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.AddRef%2A&gt;</ph> method on managed objects to obtain the COM interfaces represented by the managed object's COM callable wrapper.","pos":[444,651],"source":" You can also use these methods and the <xref:System.Runtime.InteropServices.Marshal.AddRef%2A> method on managed objects to obtain the COM interfaces represented by the managed object's COM callable wrapper."},{"content":"If you are not familiar with the details of this wrapper type, see <bpt id=\"p1\">[</bpt>COM Callable Wrapper<ept id=\"p1\">](~/docs/framework/interop/com-callable-wrapper.md)</ept>.","pos":[652,792],"source":" If you are not familiar with the details of this wrapper type, see [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md)."}]}],"pos":[19414,20817],"yaml":true,"extradata":"MT"},{"content":"The interface reference count to increment.","nodes":[{"pos":[0,43],"content":"The interface reference count to increment.","nodes":[{"content":"The interface reference count to increment.","pos":[0,43]}]}],"pos":[20956,21000],"yaml":true},{"content":"The new value of the reference count on the <code>pUnk</code> parameter.","nodes":[{"pos":[0,72],"content":"The new value of the reference count on the <ph id=\"ph1\">&lt;code&gt;pUnk&lt;/code&gt;</ph> parameter.","source":"The new value of the reference count on the <code>pUnk</code> parameter."}],"pos":[21056,21129],"yaml":true},{"content":"Allocates a block of memory of specified size from the COM task memory allocator.","nodes":[{"pos":[0,81],"content":"Allocates a block of memory of specified size from the COM task memory allocator.","nodes":[{"content":"Allocates a block of memory of specified size from the COM task memory allocator.","pos":[0,81]}]}],"pos":[22772,22854],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A> is one of two memory allocation API methods in the <xref:System.Runtime.InteropServices.Marshal> class. (<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=fullName> is the other.) The initial memory content returned is undefined, and the allocated memory can be larger than the requested number of bytes. This method exposes the COM [CoTaskMemAlloc](http://go.microsoft.com/fwlink/?LinkId=148626) function, which is referred to as the COM task memory allocator.","nodes":[{"pos":[0,552],"content":"<xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A> is one of two memory allocation API methods in the <xref:System.Runtime.InteropServices.Marshal> class. (<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=fullName> is the other.) The initial memory content returned is undefined, and the allocated memory can be larger than the requested number of bytes. This method exposes the COM [CoTaskMemAlloc](http://go.microsoft.com/fwlink/?LinkId=148626) function, which is referred to as the COM task memory allocator.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A&gt;</ph> is one of two memory allocation API methods in the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.","pos":[0,167],"source":"<xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A> is one of two memory allocation API methods in the <xref:System.Runtime.InteropServices.Marshal> class."},{"content":"(<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=fullName&gt;</ph> is the other.) The initial memory content returned is undefined, and the allocated memory can be larger than the requested number of bytes.","pos":[168,395],"source":" (<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=fullName> is the other.) The initial memory content returned is undefined, and the allocated memory can be larger than the requested number of bytes."},{"content":"This method exposes the COM <bpt id=\"p1\">[</bpt>CoTaskMemAlloc<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148626)</ept> function, which is referred to as the COM task memory allocator.","pos":[396,552],"source":" This method exposes the COM [CoTaskMemAlloc](http://go.microsoft.com/fwlink/?LinkId=148626) function, which is referred to as the COM task memory allocator."}]}],"pos":[22865,23418],"yaml":true,"extradata":"MT"},{"content":"The size of the block of memory to be allocated.","nodes":[{"pos":[0,48],"content":"The size of the block of memory to be allocated.","nodes":[{"content":"The size of the block of memory to be allocated.","pos":[0,48]}]}],"pos":[23560,23609],"yaml":true},{"content":"An integer representing the address of the block of memory allocated. This memory must be released with <xref href=\"System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\"></xref>.","nodes":[{"pos":[0,193],"content":"An integer representing the address of the block of memory allocated. This memory must be released with <xref href=\"System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\"></xref>.","nodes":[{"content":"An integer representing the address of the block of memory allocated.","pos":[0,69]},{"content":"This memory must be released with <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\"&gt;&lt;/xref&gt;</ph>.","pos":[70,193],"source":" This memory must be released with <xref href=\"System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\"></xref>."}]}],"pos":[23666,23860],"yaml":true},{"content":"There is insufficient memory to satisfy the request.","nodes":[{"pos":[0,52],"content":"There is insufficient memory to satisfy the request.","nodes":[{"content":"There is insufficient memory to satisfy the request.","pos":[0,52]}]}],"pos":[24041,24094],"yaml":true},{"content":"Allocates memory from the unmanaged memory of the process by using the specified number of bytes.","nodes":[{"pos":[0,97],"content":"Allocates memory from the unmanaged memory of the process by using the specified number of bytes.","nodes":[{"content":"Allocates memory from the unmanaged memory of the process by using the specified number of bytes.","pos":[0,97]}]}],"pos":[25649,25747],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> is one of two memory allocation methods in the <xref:System.Runtime.InteropServices.Marshal> class. (<xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A?displayProperty=fullName> is the other.) This method exposes the Win32 [LocalAlloc](http://go.microsoft.com/fwlink/?LinkId=148628) function from Kernel32.dll.  \n  \n When <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> calls `LocalAlloc`, it passes a `LMEM_FIXED` flag, which causes the allocated memory to be locked in place. Also, the allocated memory is not zero-filled.","nodes":[{"pos":[0,384],"content":"<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> is one of two memory allocation methods in the <xref:System.Runtime.InteropServices.Marshal> class. (<xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A?displayProperty=fullName> is the other.) This method exposes the Win32 [LocalAlloc](http://go.microsoft.com/fwlink/?LinkId=148628) function from Kernel32.dll.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A&gt;</ph> is one of two memory allocation methods in the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.","pos":[0,161],"source":"<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> is one of two memory allocation methods in the <xref:System.Runtime.InteropServices.Marshal> class."},{"content":"(<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A?displayProperty=fullName&gt;</ph> is the other.) This method exposes the Win32 <bpt id=\"p1\">[</bpt>LocalAlloc<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148628)</ept> function from Kernel32.dll.","pos":[162,384],"source":" (<xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A?displayProperty=fullName> is the other.) This method exposes the Win32 [LocalAlloc](http://go.microsoft.com/fwlink/?LinkId=148628) function from Kernel32.dll."}]},{"pos":[391,612],"content":"When <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> calls `LocalAlloc`, it passes a `LMEM_FIXED` flag, which causes the allocated memory to be locked in place. Also, the allocated memory is not zero-filled.","nodes":[{"content":"When <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A&gt;</ph> calls <ph id=\"ph2\">`LocalAlloc`</ph>, it passes a <ph id=\"ph3\">`LMEM_FIXED`</ph> flag, which causes the allocated memory to be locked in place.","pos":[0,174],"source":"When <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> calls `LocalAlloc`, it passes a `LMEM_FIXED` flag, which causes the allocated memory to be locked in place."},{"content":"Also, the allocated memory is not zero-filled.","pos":[175,221]}]}],"pos":[25758,26375],"yaml":true,"extradata":"MT"},{"content":"The required number of bytes in memory.","nodes":[{"pos":[0,39],"content":"The required number of bytes in memory.","nodes":[{"content":"The required number of bytes in memory.","pos":[0,39]}]}],"pos":[27052,27092],"yaml":true},{"content":"A pointer to the newly allocated memory. This memory must be released using the <xref href=\"System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\"></xref> method.","nodes":[{"pos":[0,174],"content":"A pointer to the newly allocated memory. This memory must be released using the <xref href=\"System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\"></xref> method.","nodes":[{"content":"A pointer to the newly allocated memory.","pos":[0,40]},{"content":"This memory must be released using the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\"&gt;&lt;/xref&gt;</ph> method.","pos":[41,174],"source":" This memory must be released using the <xref href=\"System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\"></xref> method."}]}],"pos":[27149,27324],"yaml":true},{"content":"There is insufficient memory to satisfy the request.","nodes":[{"pos":[0,52],"content":"There is insufficient memory to satisfy the request.","nodes":[{"content":"There is insufficient memory to satisfy the request.","pos":[0,52]}]}],"pos":[27503,27556],"yaml":true},{"content":"Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.","nodes":[{"pos":[0,112],"content":"Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.","nodes":[{"content":"Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.","pos":[0,112]}]}],"pos":[29134,29247],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> is one of two memory allocation methods in the <xref:System.Runtime.InteropServices.Marshal> class. (<xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A?displayProperty=fullName> is the other.) This method exposes the Win32 [LocalAlloc](http://go.microsoft.com/fwlink/?LinkID=148628) function from Kernel32.dll.  \n  \n When <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> calls `LocalAlloc`, it passes a `LMEM_FIXED` flag, which causes the allocated memory to be locked in place. Also, the allocated memory is not zero-filled.  \n  \n For example code, see <xref:System.Runtime.InteropServices.Marshal> and <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>.","nodes":[{"pos":[0,384],"content":"<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> is one of two memory allocation methods in the <xref:System.Runtime.InteropServices.Marshal> class. (<xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A?displayProperty=fullName> is the other.) This method exposes the Win32 [LocalAlloc](http://go.microsoft.com/fwlink/?LinkID=148628) function from Kernel32.dll.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A&gt;</ph> is one of two memory allocation methods in the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.","pos":[0,161],"source":"<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> is one of two memory allocation methods in the <xref:System.Runtime.InteropServices.Marshal> class."},{"content":"(<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A?displayProperty=fullName&gt;</ph> is the other.) This method exposes the Win32 <bpt id=\"p1\">[</bpt>LocalAlloc<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=148628)</ept> function from Kernel32.dll.","pos":[162,384],"source":" (<xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A?displayProperty=fullName> is the other.) This method exposes the Win32 [LocalAlloc](http://go.microsoft.com/fwlink/?LinkID=148628) function from Kernel32.dll."}]},{"pos":[391,612],"content":"When <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> calls `LocalAlloc`, it passes a `LMEM_FIXED` flag, which causes the allocated memory to be locked in place. Also, the allocated memory is not zero-filled.","nodes":[{"content":"When <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A&gt;</ph> calls <ph id=\"ph2\">`LocalAlloc`</ph>, it passes a <ph id=\"ph3\">`LMEM_FIXED`</ph> flag, which causes the allocated memory to be locked in place.","pos":[0,174],"source":"When <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> calls `LocalAlloc`, it passes a `LMEM_FIXED` flag, which causes the allocated memory to be locked in place."},{"content":"Also, the allocated memory is not zero-filled.","pos":[175,221]}]},{"pos":[619,753],"content":"For example code, see <xref:System.Runtime.InteropServices.Marshal> and <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>.","nodes":[{"content":"For example code, see <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A&gt;</ph>.","pos":[0,134],"source":"For example code, see <xref:System.Runtime.InteropServices.Marshal> and <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>."}]}],"pos":[29258,30018],"yaml":true,"extradata":"MT"},{"content":"The required number of bytes in memory.","nodes":[{"pos":[0,39],"content":"The required number of bytes in memory.","nodes":[{"content":"The required number of bytes in memory.","pos":[0,39]}]}],"pos":[30162,30202],"yaml":true},{"content":"A pointer to the newly allocated memory. This memory must be released using the <xref href=\"System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\"></xref> method.","nodes":[{"pos":[0,174],"content":"A pointer to the newly allocated memory. This memory must be released using the <xref href=\"System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\"></xref> method.","nodes":[{"content":"A pointer to the newly allocated memory.","pos":[0,40]},{"content":"This memory must be released using the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\"&gt;&lt;/xref&gt;</ph> method.","pos":[41,174],"source":" This memory must be released using the <xref href=\"System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\"></xref> method."}]}],"pos":[30259,30434],"yaml":true},{"content":"There is insufficient memory to satisfy the request.","nodes":[{"pos":[0,52],"content":"There is insufficient memory to satisfy the request.","nodes":[{"content":"There is insufficient memory to satisfy the request.","pos":[0,52]}]}],"pos":[30613,30666],"yaml":true},{"content":"Indicates whether runtime callable wrappers (RCWs) from any context are available for cleanup.","nodes":[{"pos":[0,94],"content":"Indicates whether runtime callable wrappers (RCWs) from any context are available for cleanup.","nodes":[{"content":"Indicates whether runtime callable wrappers (RCWs) from any context are available for cleanup.","pos":[0,94]}]}],"pos":[32301,32396],"yaml":true},{"content":"If there are a lot of references between managed and native code with deep dependency graphs it can take a long time for all the objects to clean up. Each time a GC runs it will free up some number of RCWs, which will in turn release the underlying COM objects. Those COM objects will then release their managed references and make more objects available for cleanup the next time a GC runs, which starts the process over again.  \n  \n The <xref:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup%2A> method provides a way for the application to determine how many cycles of GC.Collect and GC.WaitForPendingFinalizers need to happen in order to clean everything up.","nodes":[{"pos":[0,428],"content":"If there are a lot of references between managed and native code with deep dependency graphs it can take a long time for all the objects to clean up. Each time a GC runs it will free up some number of RCWs, which will in turn release the underlying COM objects. Those COM objects will then release their managed references and make more objects available for cleanup the next time a GC runs, which starts the process over again.","nodes":[{"content":"If there are a lot of references between managed and native code with deep dependency graphs it can take a long time for all the objects to clean up. Each time a GC runs it will free up some number of RCWs, which will in turn release the underlying COM objects. Those COM objects will then release their managed references and make more objects available for cleanup the next time a GC runs, which starts the process over again.","pos":[0,428],"nodes":[{"content":"If there are a lot of references between managed and native code with deep dependency graphs it can take a long time for all the objects to clean up.","pos":[0,149]},{"content":"Each time a GC runs it will free up some number of RCWs, which will in turn release the underlying COM objects.","pos":[150,261]},{"content":"Those COM objects will then release their managed references and make more objects available for cleanup the next time a GC runs, which starts the process over again.","pos":[262,428]}]}]},{"pos":[435,685],"content":"The <xref:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup%2A> method provides a way for the application to determine how many cycles of GC.Collect and GC.WaitForPendingFinalizers need to happen in order to clean everything up.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup%2A&gt;</ph> method provides a way for the application to determine how many cycles of GC.Collect and GC.WaitForPendingFinalizers need to happen in order to clean everything up.","pos":[0,250],"source":"The <xref:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup%2A> method provides a way for the application to determine how many cycles of GC.Collect and GC.WaitForPendingFinalizers need to happen in order to clean everything up."}]}],"pos":[32407,33097],"yaml":true,"extradata":"MT"},{"content":"`true` if there are any RCWs available for cleanup; otherwise, `false`.","nodes":[{"pos":[0,71],"content":"<ph id=\"ph1\">`true`</ph> if there are any RCWs available for cleanup; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if there are any RCWs available for cleanup; otherwise, `false`."}],"pos":[33253,33327],"yaml":true},{"content":"Gets an interface pointer identified by the specified moniker.","nodes":[{"pos":[0,62],"content":"Gets an interface pointer identified by the specified moniker.","nodes":[{"content":"Gets an interface pointer identified by the specified moniker.","pos":[0,62]}]}],"pos":[34996,35059],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.BindToMoniker%2A> exposes the COM `BindToMoniker` method, which produces an object that you can cast to any COM interface you require. This method provides the same functionality as the `GetObject` method in Visual Basic 6.0 and [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)].","nodes":[{"pos":[0,326],"content":"<xref:System.Runtime.InteropServices.Marshal.BindToMoniker%2A> exposes the COM `BindToMoniker` method, which produces an object that you can cast to any COM interface you require. This method provides the same functionality as the `GetObject` method in Visual Basic 6.0 and [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)].","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.BindToMoniker%2A&gt;</ph> exposes the COM <ph id=\"ph2\">`BindToMoniker`</ph> method, which produces an object that you can cast to any COM interface you require.","pos":[0,179],"source":"<xref:System.Runtime.InteropServices.Marshal.BindToMoniker%2A> exposes the COM `BindToMoniker` method, which produces an object that you can cast to any COM interface you require."},{"content":"This method provides the same functionality as the <ph id=\"ph1\">`GetObject`</ph> method in Visual Basic 6.0 and <ph id=\"ph2\">[!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]</ph>.","pos":[180,326],"source":" This method provides the same functionality as the `GetObject` method in Visual Basic 6.0 and [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]."}]}],"pos":[35070,35397],"yaml":true,"extradata":"MT"},{"content":"The moniker corresponding to the desired interface pointer.","nodes":[{"pos":[0,59],"content":"The moniker corresponding to the desired interface pointer.","nodes":[{"content":"The moniker corresponding to the desired interface pointer.","pos":[0,59]}]}],"pos":[35560,35620],"yaml":true},{"content":"An object containing a reference to the interface pointer identified by the <code>monikerName</code> parameter. A moniker is a name, and in this case, the moniker is defined by an interface.","nodes":[{"pos":[0,190],"content":"An object containing a reference to the interface pointer identified by the <code>monikerName</code> parameter. A moniker is a name, and in this case, the moniker is defined by an interface.","nodes":[{"content":"An object containing a reference to the interface pointer identified by the <ph id=\"ph1\">&lt;code&gt;monikerName&lt;/code&gt;</ph> parameter.","pos":[0,111],"source":"An object containing a reference to the interface pointer identified by the <code>monikerName</code> parameter."},{"content":"A moniker is a name, and in this case, the moniker is defined by an interface.","pos":[112,190]}]}],"pos":[35677,35868],"yaml":true},{"content":"An unrecognized HRESULT was returned by the unmanaged `BindToMoniker` method.","nodes":[{"pos":[0,77],"content":"An unrecognized HRESULT was returned by the unmanaged <ph id=\"ph1\">`BindToMoniker`</ph> method.","source":"An unrecognized HRESULT was returned by the unmanaged `BindToMoniker` method."}],"pos":[36080,36158],"yaml":true},{"content":"Changes the strength of an object's [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md) (CCW) handle.","nodes":[{"pos":[0,122],"content":"Changes the strength of an object's <bpt id=\"p1\">[</bpt>COM Callable Wrapper<ept id=\"p1\">](~/docs/framework/interop/com-callable-wrapper.md)</ept> (CCW) handle.","source":"Changes the strength of an object's [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md) (CCW) handle."}],"pos":[38708,38831],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength%2A> is used for object pooling functionality and should never be called by user code directly.","nodes":[{"pos":[0,167],"content":"<xref:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength%2A> is used for object pooling functionality and should never be called by user code directly.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength%2A&gt;</ph> is used for object pooling functionality and should never be called by user code directly.","pos":[0,167],"source":"<xref:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength%2A> is used for object pooling functionality and should never be called by user code directly."}]}],"pos":[38842,39010],"yaml":true,"extradata":"MT"},{"content":"The object whose CCW holds a reference counted handle. The handle is strong if the reference count on the CCW is greater than zero; otherwise, it is weak.","nodes":[{"pos":[0,154],"content":"The object whose CCW holds a reference counted handle. The handle is strong if the reference count on the CCW is greater than zero; otherwise, it is weak.","nodes":[{"content":"The object whose CCW holds a reference counted handle. The handle is strong if the reference count on the CCW is greater than zero; otherwise, it is weak.","pos":[0,154],"nodes":[{"content":"The object whose CCW holds a reference counted handle.","pos":[0,54]},{"content":"The handle is strong if the reference count on the CCW is greater than zero; otherwise, it is weak.","pos":[55,154]}]}]}],"pos":[39183,39338],"yaml":true},{"content":"`true` to change the strength of the handle on the <code>otp</code> parameter to weak, regardless of its reference count; `false` to reset the handle strength on <code>otp</code> to be reference counted.","nodes":[{"pos":[0,203],"content":"<ph id=\"ph1\">`true`</ph> to change the strength of the handle on the <ph id=\"ph2\">&lt;code&gt;otp&lt;/code&gt;</ph> parameter to weak, regardless of its reference count; <ph id=\"ph3\">`false`</ph> to reset the handle strength on <ph id=\"ph4\">&lt;code&gt;otp&lt;/code&gt;</ph> to be reference counted.","source":"`true` to change the strength of the handle on the <code>otp</code> parameter to weak, regardless of its reference count; `false` to reset the handle strength on <code>otp</code> to be reference counted."}],"pos":[39402,39608],"yaml":true},{"content":"Notifies the runtime to clean up all [Runtime Callable Wrappers](~/docs/framework/interop/runtime-callable-wrapper.md) (RCWs) allocated in the current context.","nodes":[{"pos":[0,159],"content":"Notifies the runtime to clean up all <bpt id=\"p1\">[</bpt>Runtime Callable Wrappers<ept id=\"p1\">](~/docs/framework/interop/runtime-callable-wrapper.md)</ept> (RCWs) allocated in the current context.","source":"Notifies the runtime to clean up all [Runtime Callable Wrappers](~/docs/framework/interop/runtime-callable-wrapper.md) (RCWs) allocated in the current context."}],"pos":[41043,41203],"yaml":true},{"content":"The interop system pumps messages while it attempts to clean up RCWs. This ensures that cleanup for single-threaded apartment (STA) RCWs happens in all applications, including applications that do not pump often enough. However, some applications that do pump appropriately are very sensitive to where pumping occurs. When the interop system pumps messages in these applications, in places that are unexpected, , the application can encounter reentrancy issues that are difficult to diagnose. Therefore, applications need to be able to control their own pumping for a particular STA and to control the clean-up of RCWs.  \n  \n However, developers often only control a subset of the threads in their application and thus cannot ensure that all threads are pumping appropriately.  \n  \n To solve this problem:  \n  \n1.  Use the <xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A?displayProperty=fullName> method to turn off automatic cleanup of RCWs, and the message pumping that occurs, on a per-thread basis. This allows developers to opt out of automatic clean-up, and the corresponding message pumping.  \n  \n2.  Use the <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A> method to notify the runtime to clean up all RCWs that are allocated in the current context. This companion method allows developers to precisely control when the runtime performs cleanup in the current context.","nodes":[{"pos":[0,619],"content":"The interop system pumps messages while it attempts to clean up RCWs. This ensures that cleanup for single-threaded apartment (STA) RCWs happens in all applications, including applications that do not pump often enough. However, some applications that do pump appropriately are very sensitive to where pumping occurs. When the interop system pumps messages in these applications, in places that are unexpected, , the application can encounter reentrancy issues that are difficult to diagnose. Therefore, applications need to be able to control their own pumping for a particular STA and to control the clean-up of RCWs.","nodes":[{"content":"The interop system pumps messages while it attempts to clean up RCWs. This ensures that cleanup for single-threaded apartment (STA) RCWs happens in all applications, including applications that do not pump often enough. However, some applications that do pump appropriately are very sensitive to where pumping occurs. When the interop system pumps messages in these applications, in places that are unexpected, , the application can encounter reentrancy issues that are difficult to diagnose. Therefore, applications need to be able to control their own pumping for a particular STA and to control the clean-up of RCWs.","pos":[0,619],"nodes":[{"content":"The interop system pumps messages while it attempts to clean up RCWs.","pos":[0,69]},{"content":"This ensures that cleanup for single-threaded apartment (STA) RCWs happens in all applications, including applications that do not pump often enough.","pos":[70,219]},{"content":"However, some applications that do pump appropriately are very sensitive to where pumping occurs.","pos":[220,317]},{"content":"When the interop system pumps messages in these applications, in places that are unexpected, , the application can encounter reentrancy issues that are difficult to diagnose.","pos":[318,492]},{"content":"Therefore, applications need to be able to control their own pumping for a particular STA and to control the clean-up of RCWs.","pos":[493,619]}]}]},{"pos":[626,776],"content":"However, developers often only control a subset of the threads in their application and thus cannot ensure that all threads are pumping appropriately.","nodes":[{"content":"However, developers often only control a subset of the threads in their application and thus cannot ensure that all threads are pumping appropriately.","pos":[0,150]}]},{"pos":[783,805],"content":"To solve this problem:","nodes":[{"content":"To solve this problem:","pos":[0,22]}]},{"pos":[815,1112],"content":"Use the <xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A?displayProperty=fullName> method to turn off automatic cleanup of RCWs, and the message pumping that occurs, on a per-thread basis. This allows developers to opt out of automatic clean-up, and the corresponding message pumping.","nodes":[{"content":"Use the <xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A?displayProperty=fullName> method to turn off automatic cleanup of RCWs, and the message pumping that occurs, on a per-thread basis. This allows developers to opt out of automatic clean-up, and the corresponding message pumping.","pos":[0,297],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A?displayProperty=fullName&gt;</ph> method to turn off automatic cleanup of RCWs, and the message pumping that occurs, on a per-thread basis.","pos":[0,201],"source":"Use the <xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A?displayProperty=fullName> method to turn off automatic cleanup of RCWs, and the message pumping that occurs, on a per-thread basis."},{"content":"This allows developers to opt out of automatic clean-up, and the corresponding message pumping.","pos":[202,297]}]}]},{"pos":[1122,1427],"content":"Use the <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A> method to notify the runtime to clean up all RCWs that are allocated in the current context. This companion method allows developers to precisely control when the runtime performs cleanup in the current context.","nodes":[{"content":"Use the <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A> method to notify the runtime to clean up all RCWs that are allocated in the current context. This companion method allows developers to precisely control when the runtime performs cleanup in the current context.","pos":[0,305],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A&gt;</ph> method to notify the runtime to clean up all RCWs that are allocated in the current context.","pos":[0,186],"source":"Use the <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A> method to notify the runtime to clean up all RCWs that are allocated in the current context."},{"content":"This companion method allows developers to precisely control when the runtime performs cleanup in the current context.","pos":[187,305]}]}]}],"pos":[41214,42652],"yaml":true,"extradata":"MT"},{"content":"Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.","nodes":[{"pos":[0,120],"content":"Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.","nodes":[{"content":"Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.","pos":[0,120]}]}],"pos":[44267,44388],"yaml":true},{"content":"You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.","nodes":[{"pos":[0,106],"content":"You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.","nodes":[{"content":"You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.","pos":[0,106]}]}],"pos":[44399,44506],"yaml":true,"extradata":"MT"},{"content":"The one-dimensional array to copy from.","nodes":[{"pos":[0,39],"content":"The one-dimensional array to copy from.","nodes":[{"content":"The one-dimensional array to copy from.","pos":[0,39]}]}],"pos":[44699,44739],"yaml":true},{"content":"The zero-based index in the source array where copying should start.","nodes":[{"pos":[0,68],"content":"The zero-based index in the source array where copying should start.","nodes":[{"content":"The zero-based index in the source array where copying should start.","pos":[0,68]}]}],"pos":[44804,44873],"yaml":true},{"content":"The memory pointer to copy to.","nodes":[{"pos":[0,30],"content":"The memory pointer to copy to.","nodes":[{"content":"The memory pointer to copy to.","pos":[0,30]}]}],"pos":[44940,44971],"yaml":true},{"content":"The number of array elements to copy.","nodes":[{"pos":[0,37],"content":"The number of array elements to copy.","nodes":[{"content":"The number of array elements to copy.","pos":[0,37]}]}],"pos":[45032,45070],"yaml":true},{"content":"<code>startIndex</code> and <code>length</code> are not valid.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> are not valid.","source":"<code>startIndex</code> and <code>length</code> are not valid."}],"pos":[45255,45318],"yaml":true},{"content":"<code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;startIndex&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;destination&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;length&lt;/code&gt;</ph> is <ph id=\"ph5\">`null`</ph>.","source":"<code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`."}],"pos":[45420,45526],"yaml":true},{"content":"Copies data from a one-dimensional, managed <xref href=\"System.IntPtr\"></xref> array to an unmanaged memory pointer.","nodes":[{"pos":[0,116],"content":"Copies data from a one-dimensional, managed <ph id=\"ph1\">&lt;xref href=\"System.IntPtr\"&gt;&lt;/xref&gt;</ph> array to an unmanaged memory pointer.","source":"Copies data from a one-dimensional, managed <xref href=\"System.IntPtr\"></xref> array to an unmanaged memory pointer."}],"pos":[47237,47354],"yaml":true},{"content":"You can use this method to copy a subset of a one-dimensional managed <xref:System.IntPtr> array to an unmanaged C-style array.","nodes":[{"pos":[0,127],"content":"You can use this method to copy a subset of a one-dimensional managed <xref:System.IntPtr> array to an unmanaged C-style array.","nodes":[{"content":"You can use this method to copy a subset of a one-dimensional managed <ph id=\"ph1\">&lt;xref:System.IntPtr&gt;</ph> array to an unmanaged C-style array.","pos":[0,127],"source":"You can use this method to copy a subset of a one-dimensional managed <xref:System.IntPtr> array to an unmanaged C-style array."}]}],"pos":[47365,47493],"yaml":true,"extradata":"MT"},{"content":"The one-dimensional array to copy from.","nodes":[{"pos":[0,39],"content":"The one-dimensional array to copy from.","nodes":[{"content":"The one-dimensional array to copy from.","pos":[0,39]}]}],"pos":[47687,47727],"yaml":true},{"content":"The zero-based index in the source array where copying should start.","nodes":[{"pos":[0,68],"content":"The zero-based index in the source array where copying should start.","nodes":[{"content":"The zero-based index in the source array where copying should start.","pos":[0,68]}]}],"pos":[47792,47861],"yaml":true},{"content":"The memory pointer to copy to.","nodes":[{"pos":[0,30],"content":"The memory pointer to copy to.","nodes":[{"content":"The memory pointer to copy to.","pos":[0,30]}]}],"pos":[47928,47959],"yaml":true},{"content":"The number of array elements to copy.","nodes":[{"pos":[0,37],"content":"The number of array elements to copy.","nodes":[{"content":"The number of array elements to copy.","pos":[0,37]}]}],"pos":[48020,48058],"yaml":true},{"content":"<code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;destination&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;startIndex&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;length&lt;/code&gt;</ph> is <ph id=\"ph5\">`null`</ph>.","source":"<code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`."}],"pos":[48231,48337],"yaml":true},{"content":"Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.","nodes":[{"pos":[0,103],"content":"Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.","nodes":[{"content":"Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.","pos":[0,103]}]}],"pos":[50048,50152],"yaml":true},{"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.","nodes":[{"pos":[0,353],"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.","nodes":[{"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the <ph id=\"ph1\">`startIndex`</ph> and <ph id=\"ph2\">`length`</ph> parameters from being validated.","pos":[0,138],"source":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated."},{"content":"Thus, the unmanaged data corresponding to the <ph id=\"ph1\">`source`</ph> parameter populates the managed array regardless of its usefulness.","pos":[139,261],"source":" Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness."},{"content":"You must initialize the managed array with the appropriate size before calling this method.","pos":[262,353]}]}],"pos":[50163,50517],"yaml":true,"extradata":"MT"},{"content":"The memory pointer to copy from.","nodes":[{"pos":[0,32],"content":"The memory pointer to copy from.","nodes":[{"content":"The memory pointer to copy from.","pos":[0,32]}]}],"pos":[50708,50741],"yaml":true},{"content":"The array to copy to.","nodes":[{"pos":[0,21],"content":"The array to copy to.","nodes":[{"content":"The array to copy to.","pos":[0,21]}]}],"pos":[50810,50832],"yaml":true},{"content":"The zero-based index in the destination array where copying should start.","nodes":[{"pos":[0,73],"content":"The zero-based index in the destination array where copying should start.","nodes":[{"content":"The zero-based index in the destination array where copying should start.","pos":[0,73]}]}],"pos":[50897,50971],"yaml":true},{"content":"The number of array elements to copy.","nodes":[{"pos":[0,37],"content":"The number of array elements to copy.","nodes":[{"content":"The number of array elements to copy.","pos":[0,37]}]}],"pos":[51032,51070],"yaml":true},{"content":"<code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;destination&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;startIndex&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;length&lt;/code&gt;</ph> is <ph id=\"ph5\">`null`</ph>.","source":"<code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`."}],"pos":[51243,51349],"yaml":true},{"content":"Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.","nodes":[{"pos":[0,86],"content":"Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.","nodes":[{"content":"Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.","pos":[0,86]}]}],"pos":[53054,53141],"yaml":true},{"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the`source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.","nodes":[{"pos":[0,352],"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the`source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.","nodes":[{"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the <ph id=\"ph1\">`startIndex`</ph> and <ph id=\"ph2\">`length`</ph> parameters from being validated.","pos":[0,138],"source":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated."},{"content":"Thus, the unmanaged data corresponding to the<ph id=\"ph1\">`source`</ph> parameter populates the managed array regardless of its usefulness.","pos":[139,260],"source":" Thus, the unmanaged data corresponding to the`source` parameter populates the managed array regardless of its usefulness."},{"content":"You must initialize the managed array with the appropriate size before calling this method.","pos":[261,352]}]}],"pos":[53152,53505],"yaml":true,"extradata":"MT"},{"content":"The memory pointer to copy from.","nodes":[{"pos":[0,32],"content":"The memory pointer to copy from.","nodes":[{"content":"The memory pointer to copy from.","pos":[0,32]}]}],"pos":[54165,54198],"yaml":true},{"content":"The array to copy to.","nodes":[{"pos":[0,21],"content":"The array to copy to.","nodes":[{"content":"The array to copy to.","pos":[0,21]}]}],"pos":[54266,54288],"yaml":true},{"content":"The zero-based index in the destination array where copying should start.","nodes":[{"pos":[0,73],"content":"The zero-based index in the destination array where copying should start.","nodes":[{"content":"The zero-based index in the destination array where copying should start.","pos":[0,73]}]}],"pos":[54353,54427],"yaml":true},{"content":"The number of array elements to copy.","nodes":[{"pos":[0,37],"content":"The number of array elements to copy.","nodes":[{"content":"The number of array elements to copy.","pos":[0,37]}]}],"pos":[54488,54526],"yaml":true},{"content":"<code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;destination&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;startIndex&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;length&lt;/code&gt;</ph> is <ph id=\"ph5\">`null`</ph>.","source":"<code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`."}],"pos":[54699,54805],"yaml":true},{"content":"Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.","nodes":[{"pos":[0,86],"content":"Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.","nodes":[{"content":"Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.","pos":[0,86]}]}],"pos":[56510,56597],"yaml":true},{"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.","nodes":[{"pos":[0,353],"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.","nodes":[{"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the <ph id=\"ph1\">`startIndex`</ph> and <ph id=\"ph2\">`length`</ph> parameters from being validated.","pos":[0,138],"source":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated."},{"content":"Thus, the unmanaged data corresponding to the <ph id=\"ph1\">`source`</ph> parameter populates the managed array regardless of its usefulness.","pos":[139,261],"source":" Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness."},{"content":"You must initialize the managed array with the appropriate size before calling this method.","pos":[262,353]}]}],"pos":[56608,56962],"yaml":true,"extradata":"MT"},{"content":"The memory pointer to copy from.","nodes":[{"pos":[0,32],"content":"The memory pointer to copy from.","nodes":[{"content":"The memory pointer to copy from.","pos":[0,32]}]}],"pos":[57613,57646],"yaml":true},{"content":"The array to copy to.","nodes":[{"pos":[0,21],"content":"The array to copy to.","nodes":[{"content":"The array to copy to.","pos":[0,21]}]}],"pos":[57714,57736],"yaml":true},{"content":"The zero-based index in the destination array where copying should start.","nodes":[{"pos":[0,73],"content":"The zero-based index in the destination array where copying should start.","nodes":[{"content":"The zero-based index in the destination array where copying should start.","pos":[0,73]}]}],"pos":[57801,57875],"yaml":true},{"content":"The number of array elements to copy.","nodes":[{"pos":[0,37],"content":"The number of array elements to copy.","nodes":[{"content":"The number of array elements to copy.","pos":[0,37]}]}],"pos":[57936,57974],"yaml":true},{"content":"<code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;destination&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;startIndex&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;length&lt;/code&gt;</ph> is <ph id=\"ph5\">`null`</ph>.","source":"<code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`."}],"pos":[58147,58253],"yaml":true},{"content":"Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.","nodes":[{"pos":[0,86],"content":"Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.","nodes":[{"content":"Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.","pos":[0,86]}]}],"pos":[59958,60045],"yaml":true},{"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.","nodes":[{"pos":[0,353],"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.","nodes":[{"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the <ph id=\"ph1\">`startIndex`</ph> and <ph id=\"ph2\">`length`</ph> parameters from being validated.","pos":[0,138],"source":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated."},{"content":"Thus, the unmanaged data corresponding to the <ph id=\"ph1\">`source`</ph> parameter populates the managed array regardless of its usefulness.","pos":[139,261],"source":" Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness."},{"content":"You must initialize the managed array with the appropriate size before calling this method.","pos":[262,353]}]}],"pos":[60056,60410],"yaml":true,"extradata":"MT"},{"content":"The memory pointer to copy from.","nodes":[{"pos":[0,32],"content":"The memory pointer to copy from.","nodes":[{"content":"The memory pointer to copy from.","pos":[0,32]}]}],"pos":[61071,61104],"yaml":true},{"content":"The array to copy to.","nodes":[{"pos":[0,21],"content":"The array to copy to.","nodes":[{"content":"The array to copy to.","pos":[0,21]}]}],"pos":[61172,61194],"yaml":true},{"content":"The zero-based index in the destination array where copying should start.","nodes":[{"pos":[0,73],"content":"The zero-based index in the destination array where copying should start.","nodes":[{"content":"The zero-based index in the destination array where copying should start.","pos":[0,73]}]}],"pos":[61259,61333],"yaml":true},{"content":"The number of array elements to copy.","nodes":[{"pos":[0,37],"content":"The number of array elements to copy.","nodes":[{"content":"The number of array elements to copy.","pos":[0,37]}]}],"pos":[61394,61432],"yaml":true},{"content":"<code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;destination&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;startIndex&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;length&lt;/code&gt;</ph> is <ph id=\"ph5\">`null`</ph>.","source":"<code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`."}],"pos":[61605,61711],"yaml":true},{"content":"Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.","nodes":[{"pos":[0,103],"content":"Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.","nodes":[{"content":"Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.","pos":[0,103]}]}],"pos":[63422,63526],"yaml":true},{"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.","nodes":[{"pos":[0,353],"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.","nodes":[{"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the <ph id=\"ph1\">`startIndex`</ph> and <ph id=\"ph2\">`length`</ph> parameters from being validated.","pos":[0,138],"source":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated."},{"content":"Thus, the unmanaged data corresponding to the <ph id=\"ph1\">`source`</ph> parameter populates the managed array regardless of its usefulness.","pos":[139,261],"source":" Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness."},{"content":"You must initialize the managed array with the appropriate size before calling this method.","pos":[262,353]}]}],"pos":[63537,63891],"yaml":true,"extradata":"MT"},{"content":"The memory pointer to copy from.","nodes":[{"pos":[0,32],"content":"The memory pointer to copy from.","nodes":[{"content":"The memory pointer to copy from.","pos":[0,32]}]}],"pos":[64557,64590],"yaml":true},{"content":"The array to copy to.","nodes":[{"pos":[0,21],"content":"The array to copy to.","nodes":[{"content":"The array to copy to.","pos":[0,21]}]}],"pos":[64659,64681],"yaml":true},{"content":"The zero-based index in the destination array where copying should start.","nodes":[{"pos":[0,73],"content":"The zero-based index in the destination array where copying should start.","nodes":[{"content":"The zero-based index in the destination array where copying should start.","pos":[0,73]}]}],"pos":[64746,64820],"yaml":true},{"content":"The number of array elements to copy.","nodes":[{"pos":[0,37],"content":"The number of array elements to copy.","nodes":[{"content":"The number of array elements to copy.","pos":[0,37]}]}],"pos":[64881,64919],"yaml":true},{"content":"<code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;destination&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;startIndex&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;length&lt;/code&gt;</ph> is <ph id=\"ph5\">`null`</ph>.","source":"<code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`."}],"pos":[65092,65198],"yaml":true},{"content":"Copies data from an unmanaged memory pointer to a managed <xref href=\"System.IntPtr\"></xref> array.","nodes":[{"pos":[0,99],"content":"Copies data from an unmanaged memory pointer to a managed <ph id=\"ph1\">&lt;xref href=\"System.IntPtr\"&gt;&lt;/xref&gt;</ph> array.","source":"Copies data from an unmanaged memory pointer to a managed <xref href=\"System.IntPtr\"></xref> array."}],"pos":[66909,67009],"yaml":true},{"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Therefore, the unmanaged data that corresponds to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling the <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,439],"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Therefore, the unmanaged data that corresponds to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling the <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName> method.","nodes":[{"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the <ph id=\"ph1\">`startIndex`</ph> and <ph id=\"ph2\">`length`</ph> parameters from being validated.","pos":[0,138],"source":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated."},{"content":"Therefore, the unmanaged data that corresponds to the <ph id=\"ph1\">`source`</ph> parameter populates the managed array regardless of its usefulness.","pos":[139,269],"source":" Therefore, the unmanaged data that corresponds to the `source` parameter populates the managed array regardless of its usefulness."},{"content":"You must initialize the managed array with the appropriate size before calling the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph> method.","pos":[270,439],"source":" You must initialize the managed array with the appropriate size before calling the <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName> method."}]}],"pos":[67020,67460],"yaml":true,"extradata":"MT"},{"content":"The memory pointer to copy from.","nodes":[{"pos":[0,32],"content":"The memory pointer to copy from.","nodes":[{"content":"The memory pointer to copy from.","pos":[0,32]}]}],"pos":[67652,67685],"yaml":true},{"content":"The array to copy to.","nodes":[{"pos":[0,21],"content":"The array to copy to.","nodes":[{"content":"The array to copy to.","pos":[0,21]}]}],"pos":[67754,67776],"yaml":true},{"content":"The zero-based index in the destination array where copying should start.","nodes":[{"pos":[0,73],"content":"The zero-based index in the destination array where copying should start.","nodes":[{"content":"The zero-based index in the destination array where copying should start.","pos":[0,73]}]}],"pos":[67841,67915],"yaml":true},{"content":"The number of array elements to copy.","nodes":[{"pos":[0,37],"content":"The number of array elements to copy.","nodes":[{"content":"The number of array elements to copy.","pos":[0,37]}]}],"pos":[67976,68014],"yaml":true},{"content":"<code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;destination&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;startIndex&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;length&lt;/code&gt;</ph> is <ph id=\"ph5\">`null`</ph>.","source":"<code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`."}],"pos":[68187,68293],"yaml":true},{"content":"Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.","nodes":[{"pos":[0,87],"content":"Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.","nodes":[{"content":"Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.","pos":[0,87]}]}],"pos":[69992,70080],"yaml":true},{"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.","nodes":[{"pos":[0,353],"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.","nodes":[{"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the <ph id=\"ph1\">`startIndex`</ph> and <ph id=\"ph2\">`length`</ph> parameters from being validated.","pos":[0,138],"source":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated."},{"content":"Thus, the unmanaged data corresponding to the <ph id=\"ph1\">`source`</ph> parameter populates the managed array regardless of its usefulness.","pos":[139,261],"source":" Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness."},{"content":"You must initialize the managed array with the appropriate size before calling this method.","pos":[262,353]}]}],"pos":[70091,70445],"yaml":true,"extradata":"MT"},{"content":"The memory pointer to copy from.","nodes":[{"pos":[0,32],"content":"The memory pointer to copy from.","nodes":[{"content":"The memory pointer to copy from.","pos":[0,32]}]}],"pos":[71101,71134],"yaml":true},{"content":"The array to copy to.","nodes":[{"pos":[0,21],"content":"The array to copy to.","nodes":[{"content":"The array to copy to.","pos":[0,21]}]}],"pos":[71201,71223],"yaml":true},{"content":"The zero-based index in the destination array where copying should start.","nodes":[{"pos":[0,73],"content":"The zero-based index in the destination array where copying should start.","nodes":[{"content":"The zero-based index in the destination array where copying should start.","pos":[0,73]}]}],"pos":[71288,71362],"yaml":true},{"content":"The number of array elements to copy.","nodes":[{"pos":[0,37],"content":"The number of array elements to copy.","nodes":[{"content":"The number of array elements to copy.","pos":[0,37]}]}],"pos":[71423,71461],"yaml":true},{"content":"<code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;destination&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;startIndex&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;length&lt;/code&gt;</ph> is <ph id=\"ph5\">`null`</ph>.","source":"<code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`."}],"pos":[71634,71740],"yaml":true},{"content":"Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.","nodes":[{"pos":[0,103],"content":"Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.","nodes":[{"content":"Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.","pos":[0,103]}]}],"pos":[73445,73549],"yaml":true},{"content":"You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.","nodes":[{"pos":[0,106],"content":"You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.","nodes":[{"content":"You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.","pos":[0,106]}]}],"pos":[73560,73667],"yaml":true,"extradata":"MT"},{"content":"The one-dimensional array to copy from.","nodes":[{"pos":[0,39],"content":"The one-dimensional array to copy from.","nodes":[{"content":"The one-dimensional array to copy from.","pos":[0,39]}]}],"pos":[74328,74368],"yaml":true},{"content":"The zero-based index in the source array where copying should start.","nodes":[{"pos":[0,68],"content":"The zero-based index in the source array where copying should start.","nodes":[{"content":"The zero-based index in the source array where copying should start.","pos":[0,68]}]}],"pos":[74433,74502],"yaml":true},{"content":"The memory pointer to copy to.","nodes":[{"pos":[0,30],"content":"The memory pointer to copy to.","nodes":[{"content":"The memory pointer to copy to.","pos":[0,30]}]}],"pos":[74569,74600],"yaml":true},{"content":"The number of array elements to copy.","nodes":[{"pos":[0,37],"content":"The number of array elements to copy.","nodes":[{"content":"The number of array elements to copy.","pos":[0,37]}]}],"pos":[74661,74699],"yaml":true},{"content":"<code>startIndex</code> and <code>length</code> are not valid.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> are not valid.","source":"<code>startIndex</code> and <code>length</code> are not valid."}],"pos":[74884,74947],"yaml":true},{"content":"<code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;startIndex&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;destination&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;length&lt;/code&gt;</ph> is <ph id=\"ph5\">`null`</ph>.","source":"<code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`."}],"pos":[75049,75155],"yaml":true},{"content":"Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.","nodes":[{"pos":[0,103],"content":"Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.","nodes":[{"content":"Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.","pos":[0,103]}]}],"pos":[76860,76964],"yaml":true},{"content":"You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.","nodes":[{"pos":[0,106],"content":"You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.","nodes":[{"content":"You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.","pos":[0,106]}]}],"pos":[76975,77082],"yaml":true,"extradata":"MT"},{"content":"The one-dimensional array to copy from.","nodes":[{"pos":[0,39],"content":"The one-dimensional array to copy from.","nodes":[{"content":"The one-dimensional array to copy from.","pos":[0,39]}]}],"pos":[77734,77774],"yaml":true},{"content":"The zero-based index in the source array where copying should start.","nodes":[{"pos":[0,68],"content":"The zero-based index in the source array where copying should start.","nodes":[{"content":"The zero-based index in the source array where copying should start.","pos":[0,68]}]}],"pos":[77839,77908],"yaml":true},{"content":"The memory pointer to copy to.","nodes":[{"pos":[0,30],"content":"The memory pointer to copy to.","nodes":[{"content":"The memory pointer to copy to.","pos":[0,30]}]}],"pos":[77975,78006],"yaml":true},{"content":"The number of array elements to copy.","nodes":[{"pos":[0,37],"content":"The number of array elements to copy.","nodes":[{"content":"The number of array elements to copy.","pos":[0,37]}]}],"pos":[78067,78105],"yaml":true},{"content":"<code>startIndex</code> and <code>length</code> are not valid.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> are not valid.","source":"<code>startIndex</code> and <code>length</code> are not valid."}],"pos":[78290,78353],"yaml":true},{"content":"<code>startIndex</code> or <code>length</code> is `null`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>startIndex</code> or <code>length</code> is `null`."}],"pos":[78455,78513],"yaml":true},{"content":"Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.","nodes":[{"pos":[0,103],"content":"Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.","nodes":[{"content":"Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.","pos":[0,103]}]}],"pos":[80218,80322],"yaml":true},{"content":"You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.","nodes":[{"pos":[0,106],"content":"You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.","nodes":[{"content":"You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.","pos":[0,106]}]}],"pos":[80333,80440],"yaml":true,"extradata":"MT"},{"content":"The one-dimensional array to copy from.","nodes":[{"pos":[0,39],"content":"The one-dimensional array to copy from.","nodes":[{"content":"The one-dimensional array to copy from.","pos":[0,39]}]}],"pos":[81102,81142],"yaml":true},{"content":"The zero-based index in the source array where copying should start.","nodes":[{"pos":[0,68],"content":"The zero-based index in the source array where copying should start.","nodes":[{"content":"The zero-based index in the source array where copying should start.","pos":[0,68]}]}],"pos":[81207,81276],"yaml":true},{"content":"The memory pointer to copy to.","nodes":[{"pos":[0,30],"content":"The memory pointer to copy to.","nodes":[{"content":"The memory pointer to copy to.","pos":[0,30]}]}],"pos":[81343,81374],"yaml":true},{"content":"The number of array elements to copy.","nodes":[{"pos":[0,37],"content":"The number of array elements to copy.","nodes":[{"content":"The number of array elements to copy.","pos":[0,37]}]}],"pos":[81435,81473],"yaml":true},{"content":"<code>startIndex</code> and <code>length</code> are not valid.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> are not valid.","source":"<code>startIndex</code> and <code>length</code> are not valid."}],"pos":[81658,81721],"yaml":true},{"content":"<code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;startIndex&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;destination&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;length&lt;/code&gt;</ph> is <ph id=\"ph5\">`null`</ph>.","source":"<code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`."}],"pos":[81823,81929],"yaml":true},{"content":"Copies data from an unmanaged memory pointer to a managed character array.","nodes":[{"pos":[0,74],"content":"Copies data from an unmanaged memory pointer to a managed character array.","nodes":[{"content":"Copies data from an unmanaged memory pointer to a managed character array.","pos":[0,74]}]}],"pos":[83628,83703],"yaml":true},{"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.","nodes":[{"pos":[0,353],"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.","nodes":[{"content":"Unmanaged, C-style arrays do not contain bounds information, which prevents the <ph id=\"ph1\">`startIndex`</ph> and <ph id=\"ph2\">`length`</ph> parameters from being validated.","pos":[0,138],"source":"Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated."},{"content":"Thus, the unmanaged data corresponding to the <ph id=\"ph1\">`source`</ph> parameter populates the managed array regardless of its usefulness.","pos":[139,261],"source":" Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness."},{"content":"You must initialize the managed array with the appropriate size before calling this method.","pos":[262,353]}]}],"pos":[83714,84068],"yaml":true,"extradata":"MT"},{"content":"The memory pointer to copy from.","nodes":[{"pos":[0,32],"content":"The memory pointer to copy from.","nodes":[{"content":"The memory pointer to copy from.","pos":[0,32]}]}],"pos":[84724,84757],"yaml":true},{"content":"The array to copy to.","nodes":[{"pos":[0,21],"content":"The array to copy to.","nodes":[{"content":"The array to copy to.","pos":[0,21]}]}],"pos":[84824,84846],"yaml":true},{"content":"The zero-based index in the destination array where copying should start.","nodes":[{"pos":[0,73],"content":"The zero-based index in the destination array where copying should start.","nodes":[{"content":"The zero-based index in the destination array where copying should start.","pos":[0,73]}]}],"pos":[84911,84985],"yaml":true},{"content":"The number of array elements to copy.","nodes":[{"pos":[0,37],"content":"The number of array elements to copy.","nodes":[{"content":"The number of array elements to copy.","pos":[0,37]}]}],"pos":[85046,85084],"yaml":true},{"content":"<code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;destination&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;startIndex&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;length&lt;/code&gt;</ph> is <ph id=\"ph5\">`null`</ph>.","source":"<code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`."}],"pos":[85257,85363],"yaml":true},{"content":"Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.","nodes":[{"pos":[0,120],"content":"Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.","nodes":[{"content":"Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.","pos":[0,120]}]}],"pos":[87074,87195],"yaml":true},{"content":"You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.","nodes":[{"pos":[0,106],"content":"You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.","nodes":[{"content":"You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.","pos":[0,106]}]}],"pos":[87206,87313],"yaml":true,"extradata":"MT"},{"content":"The one-dimensional array to copy from.","nodes":[{"pos":[0,39],"content":"The one-dimensional array to copy from.","nodes":[{"content":"The one-dimensional array to copy from.","pos":[0,39]}]}],"pos":[87981,88021],"yaml":true},{"content":"The zero-based index in the source array where copying should start.","nodes":[{"pos":[0,68],"content":"The zero-based index in the source array where copying should start.","nodes":[{"content":"The zero-based index in the source array where copying should start.","pos":[0,68]}]}],"pos":[88086,88155],"yaml":true},{"content":"The memory pointer to copy to.","nodes":[{"pos":[0,30],"content":"The memory pointer to copy to.","nodes":[{"content":"The memory pointer to copy to.","pos":[0,30]}]}],"pos":[88222,88253],"yaml":true},{"content":"The number of array elements to copy.","nodes":[{"pos":[0,37],"content":"The number of array elements to copy.","nodes":[{"content":"The number of array elements to copy.","pos":[0,37]}]}],"pos":[88314,88352],"yaml":true},{"content":"<code>startIndex</code> and <code>length</code> are not valid.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> are not valid.","source":"<code>startIndex</code> and <code>length</code> are not valid."}],"pos":[88537,88600],"yaml":true},{"content":"<code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;startIndex&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;destination&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;length&lt;/code&gt;</ph> is <ph id=\"ph5\">`null`</ph>.","source":"<code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`."}],"pos":[88702,88808],"yaml":true},{"content":"Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.","nodes":[{"pos":[0,91],"content":"Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.","nodes":[{"content":"Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.","pos":[0,91]}]}],"pos":[90507,90599],"yaml":true},{"content":"You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.","nodes":[{"pos":[0,106],"content":"You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.","nodes":[{"content":"You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.","pos":[0,106]}]}],"pos":[90610,90717],"yaml":true,"extradata":"MT"},{"content":"The one-dimensional array to copy from.","nodes":[{"pos":[0,39],"content":"The one-dimensional array to copy from.","nodes":[{"content":"The one-dimensional array to copy from.","pos":[0,39]}]}],"pos":[91373,91413],"yaml":true},{"content":"The zero-based index in the source array where copying should start.","nodes":[{"pos":[0,68],"content":"The zero-based index in the source array where copying should start.","nodes":[{"content":"The zero-based index in the source array where copying should start.","pos":[0,68]}]}],"pos":[91478,91547],"yaml":true},{"content":"The memory pointer to copy to.","nodes":[{"pos":[0,30],"content":"The memory pointer to copy to.","nodes":[{"content":"The memory pointer to copy to.","pos":[0,30]}]}],"pos":[91614,91645],"yaml":true},{"content":"The number of array elements to copy.","nodes":[{"pos":[0,37],"content":"The number of array elements to copy.","nodes":[{"content":"The number of array elements to copy.","pos":[0,37]}]}],"pos":[91706,91744],"yaml":true},{"content":"<code>startIndex</code> and <code>length</code> are not valid.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> are not valid.","source":"<code>startIndex</code> and <code>length</code> are not valid."}],"pos":[91929,91992],"yaml":true},{"content":"<code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`.","nodes":[{"pos":[0,84],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;destination&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;length&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`."}],"pos":[92094,92179],"yaml":true},{"content":"Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.","nodes":[{"pos":[0,104],"content":"Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.","nodes":[{"content":"Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.","pos":[0,104]}]}],"pos":[93878,93983],"yaml":true},{"content":"You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.","nodes":[{"pos":[0,106],"content":"You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.","nodes":[{"content":"You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.","pos":[0,106]}]}],"pos":[93994,94101],"yaml":true,"extradata":"MT"},{"content":"The one-dimensional array to copy from.","nodes":[{"pos":[0,39],"content":"The one-dimensional array to copy from.","nodes":[{"content":"The one-dimensional array to copy from.","pos":[0,39]}]}],"pos":[95041,95081],"yaml":true},{"content":"The zero-based index in the source array where copying should start.","nodes":[{"pos":[0,68],"content":"The zero-based index in the source array where copying should start.","nodes":[{"content":"The zero-based index in the source array where copying should start.","pos":[0,68]}]}],"pos":[95146,95215],"yaml":true},{"content":"The memory pointer to copy to.","nodes":[{"pos":[0,30],"content":"The memory pointer to copy to.","nodes":[{"content":"The memory pointer to copy to.","pos":[0,30]}]}],"pos":[95282,95313],"yaml":true},{"content":"The number of array elements to copy.","nodes":[{"pos":[0,37],"content":"The number of array elements to copy.","nodes":[{"content":"The number of array elements to copy.","pos":[0,37]}]}],"pos":[95374,95412],"yaml":true},{"content":"<code>startIndex</code> and <code>length</code> are not valid.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> are not valid.","source":"<code>startIndex</code> and <code>length</code> are not valid."}],"pos":[95597,95660],"yaml":true},{"content":"<code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;startIndex&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;destination&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;length&lt;/code&gt;</ph> is <ph id=\"ph5\">`null`</ph>.","source":"<code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`."}],"pos":[95762,95868],"yaml":true},{"content":"Aggregates a managed object with the specified COM object.","nodes":[{"pos":[0,58],"content":"Aggregates a managed object with the specified COM object.","nodes":[{"content":"Aggregates a managed object with the specified COM object.","pos":[0,58]}]}],"pos":[97555,97614],"yaml":true},{"content":"The <xref:System.Runtime.InteropServices.Marshal.CreateAggregatedObject%2A> method aggregates the inner managed pointer of a managed object with the specified outer pointer, and then returns an inner [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer of the managed object.","nodes":[{"pos":[0,288],"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.CreateAggregatedObject%2A&gt;</ph> method aggregates the inner managed pointer of a managed object with the specified outer pointer, and then returns an inner <bpt id=\"p1\">[</bpt>IUnknown<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148003)</ept> pointer of the managed object.","source":"The <xref:System.Runtime.InteropServices.Marshal.CreateAggregatedObject%2A> method aggregates the inner managed pointer of a managed object with the specified outer pointer, and then returns an inner [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer of the managed object."}],"pos":[97625,97914],"yaml":true,"extradata":"MT"},{"content":"The outer `IUnknown` pointer.","nodes":[{"pos":[0,29],"content":"The outer <ph id=\"ph1\">`IUnknown`</ph> pointer.","source":"The outer `IUnknown` pointer."}],"pos":[98086,98116],"yaml":true},{"content":"An object to aggregate.","nodes":[{"pos":[0,23],"content":"An object to aggregate.","nodes":[{"content":"An object to aggregate.","pos":[0,23]}]}],"pos":[98173,98197],"yaml":true},{"content":"The inner `IUnknown` pointer of the managed object.","nodes":[{"pos":[0,51],"content":"The inner <ph id=\"ph1\">`IUnknown`</ph> pointer of the managed object.","source":"The inner `IUnknown` pointer of the managed object."}],"pos":[98254,98306],"yaml":true},{"content":"<code>o</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] object.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph> is a <ph id=\"ph2\">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> object.","source":"<code>o</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] object."}],"pos":[98489,98555],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Aggregates a managed object of the specified type with the specified COM object.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,145],"content":"Aggregates a managed object of the specified type with the specified COM object.","nodes":[{"content":"Aggregates a managed object of the specified type with the specified COM object.","pos":[0,80]}]}],"pos":[100215,100365],"yaml":true},{"content":"The<xref:System.Runtime.InteropServices.Marshal.CreateAggregatedObject%2A> method aggregates the inner managed pointer of a managed object of a specified type with the specified outer pointer, and returns an inner [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer of the managed object.","nodes":[{"pos":[0,302],"content":"The<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.CreateAggregatedObject%2A&gt;</ph> method aggregates the inner managed pointer of a managed object of a specified type with the specified outer pointer, and returns an inner <bpt id=\"p1\">[</bpt>IUnknown<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148003)</ept> pointer of the managed object.","source":"The<xref:System.Runtime.InteropServices.Marshal.CreateAggregatedObject%2A> method aggregates the inner managed pointer of a managed object of a specified type with the specified outer pointer, and returns an inner [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer of the managed object."}],"pos":[100376,100679],"yaml":true,"extradata":"MT"},{"content":"The outer [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer.","nodes":[{"pos":[0,76],"content":"The outer <bpt id=\"p1\">[</bpt>IUnknown<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148003)</ept> pointer.","source":"The outer [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer."}],"pos":[100849,100926],"yaml":true},{"content":"The managed object to aggregate.","nodes":[{"pos":[0,32],"content":"The managed object to aggregate.","nodes":[{"content":"The managed object to aggregate.","pos":[0,32]}]}],"pos":[100971,101004],"yaml":true},{"content":"The type of the managed object to aggregate.","nodes":[{"pos":[0,44],"content":"The type of the managed object to aggregate.","nodes":[{"content":"The type of the managed object to aggregate.","pos":[0,44]}]}],"pos":[101055,101100],"yaml":true},{"content":"The inner [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer of the managed object.","nodes":[{"pos":[0,98],"content":"The inner <bpt id=\"p1\">[</bpt>IUnknown<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148003)</ept> pointer of the managed object.","source":"The inner [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer of the managed object."}],"pos":[101157,101256],"yaml":true},{"content":"<code>o</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] object.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph> is a <ph id=\"ph2\">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> object.","source":"<code>o</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] object."}],"pos":[101442,101508],"yaml":true},{"content":"Wraps the specified COM object in an object of the specified type.","nodes":[{"pos":[0,66],"content":"Wraps the specified COM object in an object of the specified type.","nodes":[{"content":"Wraps the specified COM object in an object of the specified type.","pos":[0,66]}]}],"pos":[103083,103150],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.CreateWrapperOfType%2A> converts one COM class type, typically the generic `__ComObject` type, to another COM class type. The input COM object, represented by parameter `o`, is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW).  \n  \n Both the `t` and `o` parameters must be classes whose signatures are attributed with <xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=fullName>. The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool applies this attribute for you when it imports a type library. If you create the RCW manually in source code, you should apply this attribute to the managed signature that represents the original coclass to signify its COM origins.  \n  \n Tlbimp.exe imports a COM [coclass](http://msdn.microsoft.com/en-us/333d0904-ffa2-4d25-878d-7422bcd40582) as a managed class and an interface. The coclass interface has the same name as the original coclass, and the managed class has the original coclass name appended with \"Class\". For example, a coclass called `MyCoclass` becomes a coclass interface called `MyCoclass` and a managed class called `MyCoclassClass`. Since `t` must be a class, not an interface, be sure to specify the managed class (`MyCoclassClass`) and not the coclass interface.  \n  \n> [!NOTE]\n>  You lose the identity of the input COM object because a new RCW instance wraps the [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer exposed by the original RCW.","nodes":[{"pos":[0,311],"content":"<xref:System.Runtime.InteropServices.Marshal.CreateWrapperOfType%2A> converts one COM class type, typically the generic `__ComObject` type, to another COM class type. The input COM object, represented by parameter `o`, is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW).","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.CreateWrapperOfType%2A&gt;</ph> converts one COM class type, typically the generic <ph id=\"ph2\">`__ComObject`</ph> type, to another COM class type.","pos":[0,166],"source":"<xref:System.Runtime.InteropServices.Marshal.CreateWrapperOfType%2A> converts one COM class type, typically the generic `__ComObject` type, to another COM class type."},{"content":"The input COM object, represented by parameter <ph id=\"ph1\">`o`</ph>, is a <bpt id=\"p1\">[</bpt>Runtime Callable Wrapper<ept id=\"p1\">](~/docs/framework/interop/runtime-callable-wrapper.md)</ept> (RCW).","pos":[167,311],"source":" The input COM object, represented by parameter `o`, is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW)."}]},{"pos":[318,823],"content":"Both the `t` and `o` parameters must be classes whose signatures are attributed with <xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=fullName>. The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool applies this attribute for you when it imports a type library. If you create the RCW manually in source code, you should apply this attribute to the managed signature that represents the original coclass to signify its COM origins.","nodes":[{"content":"Both the <ph id=\"ph1\">`t`</ph> and <ph id=\"ph2\">`o`</ph> parameters must be classes whose signatures are attributed with <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=fullName&gt;</ph>.","pos":[0,167],"source":"Both the `t` and `o` parameters must be classes whose signatures are attributed with <xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=fullName>."},{"content":"The <bpt id=\"p1\">[</bpt>Tlbimp.exe (Type Library Importer)<ept id=\"p1\">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> tool applies this attribute for you when it imports a type library.","pos":[168,336],"source":" The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool applies this attribute for you when it imports a type library."},{"content":"If you create the RCW manually in source code, you should apply this attribute to the managed signature that represents the original coclass to signify its COM origins.","pos":[337,505]}]},{"pos":[830,1377],"content":"Tlbimp.exe imports a COM [coclass](http://msdn.microsoft.com/en-us/333d0904-ffa2-4d25-878d-7422bcd40582) as a managed class and an interface. The coclass interface has the same name as the original coclass, and the managed class has the original coclass name appended with \"Class\". For example, a coclass called `MyCoclass` becomes a coclass interface called `MyCoclass` and a managed class called `MyCoclassClass`. Since `t` must be a class, not an interface, be sure to specify the managed class (`MyCoclassClass`) and not the coclass interface.","nodes":[{"content":"Tlbimp.exe imports a COM <bpt id=\"p1\">[</bpt>coclass<ept id=\"p1\">](http://msdn.microsoft.com/en-us/333d0904-ffa2-4d25-878d-7422bcd40582)</ept> as a managed class and an interface.","pos":[0,141],"source":"Tlbimp.exe imports a COM [coclass](http://msdn.microsoft.com/en-us/333d0904-ffa2-4d25-878d-7422bcd40582) as a managed class and an interface."},{"content":"The coclass interface has the same name as the original coclass, and the managed class has the original coclass name appended with \"Class\".","pos":[142,281]},{"content":"For example, a coclass called <ph id=\"ph1\">`MyCoclass`</ph> becomes a coclass interface called <ph id=\"ph2\">`MyCoclass`</ph> and a managed class called <ph id=\"ph3\">`MyCoclassClass`</ph>.","pos":[282,415],"source":" For example, a coclass called `MyCoclass` becomes a coclass interface called `MyCoclass` and a managed class called `MyCoclassClass`."},{"content":"Since <ph id=\"ph1\">`t`</ph> must be a class, not an interface, be sure to specify the managed class (<ph id=\"ph2\">`MyCoclassClass`</ph>) and not the coclass interface.","pos":[416,547],"source":" Since `t` must be a class, not an interface, be sure to specify the managed class (`MyCoclassClass`) and not the coclass interface."}]},{"pos":[1385,1573],"content":"[!NOTE]\n You lose the identity of the input COM object because a new RCW instance wraps the [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer exposed by the original RCW.","leadings":["","> "],"nodes":[{"content":"You lose the identity of the input COM object because a new RCW instance wraps the <bpt id=\"p1\">[</bpt>IUnknown<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148003)</ept> pointer exposed by the original RCW.","pos":[9,186],"source":"You lose the identity of the input COM object because a new RCW instance wraps the [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer exposed by the original RCW."}]}],"pos":[103161,104746],"yaml":true,"extradata":"MT"},{"content":"The object to be wrapped.","nodes":[{"pos":[0,25],"content":"The object to be wrapped.","nodes":[{"content":"The object to be wrapped.","pos":[0,25]}]}],"pos":[104903,104929],"yaml":true},{"content":"The type of wrapper to create.","nodes":[{"pos":[0,30],"content":"The type of wrapper to create.","nodes":[{"content":"The type of wrapper to create.","pos":[0,30]}]}],"pos":[104984,105015],"yaml":true},{"content":"The newly wrapped object that is an instance of the desired type.","nodes":[{"pos":[0,65],"content":"The newly wrapped object that is an instance of the desired type.","nodes":[{"content":"The newly wrapped object that is an instance of the desired type.","pos":[0,65]}]}],"pos":[105072,105138],"yaml":true},{"content":"<code>t</code> must derive from `__ComObject`.  \n  \n -or-  \n  \n <code>t</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] type.","nodes":[{"pos":[0,46],"content":"<ph id=\"ph1\">&lt;code&gt;t&lt;/code&gt;</ph> must derive from <ph id=\"ph2\">`__ComObject`</ph>.","source":"<code>t</code> must derive from `__ComObject`."},{"pos":[53,57],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[64,127],"content":"<ph id=\"ph1\">&lt;code&gt;t&lt;/code&gt;</ph> is a <ph id=\"ph2\">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> type.","source":"<code>t</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] type."}],"pos":[105318,105452],"yaml":true},{"content":"The <code>t</code> parameter is `null`.","nodes":[{"pos":[0,39],"content":"The <ph id=\"ph1\">&lt;code&gt;t&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>t</code> parameter is `null`."}],"pos":[105554,105594],"yaml":true},{"content":"<code>o</code> cannot be converted to the destination type because it does not support all required interfaces.","nodes":[{"pos":[0,111],"content":"<ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph> cannot be converted to the destination type because it does not support all required interfaces.","source":"<code>o</code> cannot be converted to the destination type because it does not support all required interfaces."}],"pos":[105694,105806],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Wraps the specified COM object in an object of the specified type.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,131],"content":"Wraps the specified COM object in an object of the specified type.","nodes":[{"content":"Wraps the specified COM object in an object of the specified type.","pos":[0,66]}]}],"pos":[107409,107545],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.CreateWrapperOfType%60%602%28%60%600%29> converts a COM object of type `T` to the `TWrapper` COM class type. The input COM object, represented by parameter `o`, is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW).  \n  \n Both the `T` generic type parameter and the `o` parameter must be classes whose signatures are attributed with the <xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=fullName> attribute. The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool applies this attribute for you when it imports a type library. If you create the RCW manually in source code, you should apply this attribute to the managed signature that represents the original coclass to signify its COM origins.  \n  \n Tlbimp.exe imports a COM [coclass](http://msdn.microsoft.com/en-us/333d0904-ffa2-4d25-878d-7422bcd40582) as a managed class and an interface. The coclass interface has the same name as the original coclass, and the managed class has the original coclass name appended with \"Class\". For example, a coclass called `MyCoclass` becomes a coclass interface called `MyCoclass` and a managed class called `MyCoclassClass`. Because`T` must be a class, not an interface, be sure to specify the managed class (`MyCoclassClass`) and not the `coclass` interface.  \n  \n> [!NOTE]\n>  You lose the identity of the input COM object, because a new RCW instance wraps the [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer exposed by the original RCW.","nodes":[{"pos":[0,298],"content":"<xref:System.Runtime.InteropServices.Marshal.CreateWrapperOfType%60%602%28%60%600%29> converts a COM object of type `T` to the `TWrapper` COM class type. The input COM object, represented by parameter `o`, is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW).","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.CreateWrapperOfType%60%602%28%60%600%29&gt;</ph> converts a COM object of type <ph id=\"ph2\">`T`</ph> to the <ph id=\"ph3\">`TWrapper`</ph> COM class type.","pos":[0,153],"source":"<xref:System.Runtime.InteropServices.Marshal.CreateWrapperOfType%60%602%28%60%600%29> converts a COM object of type `T` to the `TWrapper` COM class type."},{"content":"The input COM object, represented by parameter <ph id=\"ph1\">`o`</ph>, is a <bpt id=\"p1\">[</bpt>Runtime Callable Wrapper<ept id=\"p1\">](~/docs/framework/interop/runtime-callable-wrapper.md)</ept> (RCW).","pos":[154,298],"source":" The input COM object, represented by parameter `o`, is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW)."}]},{"pos":[305,850],"content":"Both the `T` generic type parameter and the `o` parameter must be classes whose signatures are attributed with the <xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=fullName> attribute. The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool applies this attribute for you when it imports a type library. If you create the RCW manually in source code, you should apply this attribute to the managed signature that represents the original coclass to signify its COM origins.","nodes":[{"content":"Both the <ph id=\"ph1\">`T`</ph> generic type parameter and the <ph id=\"ph2\">`o`</ph> parameter must be classes whose signatures are attributed with the <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=fullName&gt;</ph> attribute.","pos":[0,207],"source":"Both the `T` generic type parameter and the `o` parameter must be classes whose signatures are attributed with the <xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=fullName> attribute."},{"content":"The <bpt id=\"p1\">[</bpt>Tlbimp.exe (Type Library Importer)<ept id=\"p1\">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> tool applies this attribute for you when it imports a type library.","pos":[208,376],"source":" The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool applies this attribute for you when it imports a type library."},{"content":"If you create the RCW manually in source code, you should apply this attribute to the managed signature that represents the original coclass to signify its COM origins.","pos":[377,545]}]},{"pos":[857,1407],"content":"Tlbimp.exe imports a COM [coclass](http://msdn.microsoft.com/en-us/333d0904-ffa2-4d25-878d-7422bcd40582) as a managed class and an interface. The coclass interface has the same name as the original coclass, and the managed class has the original coclass name appended with \"Class\". For example, a coclass called `MyCoclass` becomes a coclass interface called `MyCoclass` and a managed class called `MyCoclassClass`. Because`T` must be a class, not an interface, be sure to specify the managed class (`MyCoclassClass`) and not the `coclass` interface.","nodes":[{"content":"Tlbimp.exe imports a COM <bpt id=\"p1\">[</bpt>coclass<ept id=\"p1\">](http://msdn.microsoft.com/en-us/333d0904-ffa2-4d25-878d-7422bcd40582)</ept> as a managed class and an interface.","pos":[0,141],"source":"Tlbimp.exe imports a COM [coclass](http://msdn.microsoft.com/en-us/333d0904-ffa2-4d25-878d-7422bcd40582) as a managed class and an interface."},{"content":"The coclass interface has the same name as the original coclass, and the managed class has the original coclass name appended with \"Class\".","pos":[142,281]},{"content":"For example, a coclass called <ph id=\"ph1\">`MyCoclass`</ph> becomes a coclass interface called <ph id=\"ph2\">`MyCoclass`</ph> and a managed class called <ph id=\"ph3\">`MyCoclassClass`</ph>.","pos":[282,415],"source":" For example, a coclass called `MyCoclass` becomes a coclass interface called `MyCoclass` and a managed class called `MyCoclassClass`."},{"content":"Because<ph id=\"ph1\">`T`</ph> must be a class, not an interface, be sure to specify the managed class (<ph id=\"ph2\">`MyCoclassClass`</ph>) and not the <ph id=\"ph3\">`coclass`</ph> interface.","pos":[416,550],"source":" Because`T` must be a class, not an interface, be sure to specify the managed class (`MyCoclassClass`) and not the `coclass` interface."}]},{"pos":[1415,1604],"content":"[!NOTE]\n You lose the identity of the input COM object, because a new RCW instance wraps the [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer exposed by the original RCW.","leadings":["","> "],"nodes":[{"content":"You lose the identity of the input COM object, because a new RCW instance wraps the <bpt id=\"p1\">[</bpt>IUnknown<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148003)</ept> pointer exposed by the original RCW.","pos":[9,187],"source":"You lose the identity of the input COM object, because a new RCW instance wraps the [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer exposed by the original RCW."}]}],"pos":[107556,109172],"yaml":true,"extradata":"MT"},{"content":"The object to be wrapped.","nodes":[{"pos":[0,25],"content":"The object to be wrapped.","nodes":[{"content":"The object to be wrapped.","pos":[0,25]}]}],"pos":[109318,109344],"yaml":true},{"content":"The type of object to wrap.","nodes":[{"pos":[0,27],"content":"The type of object to wrap.","nodes":[{"content":"The type of object to wrap.","pos":[0,27]}]}],"pos":[109395,109423],"yaml":true},{"content":"The type of object to return.","nodes":[{"pos":[0,29],"content":"The type of object to return.","nodes":[{"content":"The type of object to return.","pos":[0,29]}]}],"pos":[109461,109491],"yaml":true},{"content":"The newly wrapped object.","nodes":[{"pos":[0,25],"content":"The newly wrapped object.","nodes":[{"content":"The newly wrapped object.","pos":[0,25]}]}],"pos":[109543,109569],"yaml":true},{"content":"<code>T</code> must derive from `__ComObject`.  \n  \n -or-  \n  \n <code>T</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] type.","nodes":[{"pos":[0,46],"content":"<ph id=\"ph1\">&lt;code&gt;T&lt;/code&gt;</ph> must derive from <ph id=\"ph2\">`__ComObject`</ph>.","source":"<code>T</code> must derive from `__ComObject`."},{"pos":[53,57],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[64,127],"content":"<ph id=\"ph1\">&lt;code&gt;T&lt;/code&gt;</ph> is a <ph id=\"ph2\">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> type.","source":"<code>T</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] type."}],"pos":[109752,109886],"yaml":true},{"content":"<code>o</code> cannot be converted to the <code>TWrapper</code> because it does not support all required interfaces.","nodes":[{"pos":[0,116],"content":"<ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph> cannot be converted to the <ph id=\"ph2\">&lt;code&gt;TWrapper&lt;/code&gt;</ph> because it does not support all required interfaces.","source":"<code>o</code> cannot be converted to the <code>TWrapper</code> because it does not support all required interfaces."}],"pos":[109986,110103],"yaml":true},{"content":"Frees all substructures that the specified unmanaged memory block points to.","nodes":[{"pos":[0,76],"content":"Frees all substructures that the specified unmanaged memory block points to.","nodes":[{"content":"Frees all substructures that the specified unmanaged memory block points to.","pos":[0,76]}]}],"pos":[111660,111737],"yaml":true},{"content":"You can use this method to free reference-type fields, such as strings, of an unmanaged structure. Unlike its fields, a structure can be a value type or a reference type. Value-type structures that contain value-type fields (all blittable) have no references whose memory must be freed. The <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A?displayProperty=fullName> method uses this method to prevent memory leaks when reusing memory occupied by a structure.  \n  \n <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> calls the COM [SysFreeString](http://go.microsoft.com/fwlink/?LinkId=148633) function, which, in turn, frees an allocated string.  \n  \n In addition to <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A>, the <xref:System.Runtime.InteropServices.Marshal> class provides two other memory-deallocation methods: <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A> and <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>.","nodes":[{"pos":[0,472],"content":"You can use this method to free reference-type fields, such as strings, of an unmanaged structure. Unlike its fields, a structure can be a value type or a reference type. Value-type structures that contain value-type fields (all blittable) have no references whose memory must be freed. The <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A?displayProperty=fullName> method uses this method to prevent memory leaks when reusing memory occupied by a structure.","nodes":[{"content":"You can use this method to free reference-type fields, such as strings, of an unmanaged structure. Unlike its fields, a structure can be a value type or a reference type. Value-type structures that contain value-type fields (all blittable) have no references whose memory must be freed. The <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A?displayProperty=fullName> method uses this method to prevent memory leaks when reusing memory occupied by a structure.","pos":[0,472],"nodes":[{"content":"You can use this method to free reference-type fields, such as strings, of an unmanaged structure.","pos":[0,98]},{"content":"Unlike its fields, a structure can be a value type or a reference type.","pos":[99,170]},{"content":"Value-type structures that contain value-type fields (all blittable) have no references whose memory must be freed.","pos":[171,286]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A?displayProperty=fullName&gt;</ph> method uses this method to prevent memory leaks when reusing memory occupied by a structure.","pos":[287,472],"source":" The <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A?displayProperty=fullName> method uses this method to prevent memory leaks when reusing memory occupied by a structure."}]}]},{"pos":[479,674],"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A&gt;</ph> calls the COM <bpt id=\"p1\">[</bpt>SysFreeString<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148633)</ept> function, which, in turn, frees an allocated string.","source":"<xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> calls the COM [SysFreeString](http://go.microsoft.com/fwlink/?LinkId=148633) function, which, in turn, frees an allocated string."},{"pos":[681,995],"content":"In addition to <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A>, the <xref:System.Runtime.InteropServices.Marshal> class provides two other memory-deallocation methods: <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A> and <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>.","nodes":[{"content":"In addition to <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A&gt;</ph>, the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class provides two other memory-deallocation methods: <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A&gt;</ph>.","pos":[0,314],"source":"In addition to <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A>, the <xref:System.Runtime.InteropServices.Marshal> class provides two other memory-deallocation methods: <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A> and <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>."}]}],"pos":[111748,112750],"yaml":true,"extradata":"MT"},{"content":"A pointer to an unmanaged block of memory.","nodes":[{"pos":[0,42],"content":"A pointer to an unmanaged block of memory.","nodes":[{"content":"A pointer to an unmanaged block of memory.","pos":[0,42]}]}],"pos":[112984,113027],"yaml":true},{"content":"Type of a formatted class. This provides the layout information necessary to delete the buffer in the <code>ptr</code> parameter.","nodes":[{"pos":[0,129],"content":"Type of a formatted class. This provides the layout information necessary to delete the buffer in the <code>ptr</code> parameter.","nodes":[{"content":"Type of a formatted class.","pos":[0,26]},{"content":"This provides the layout information necessary to delete the buffer in the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter.","pos":[27,129],"source":" This provides the layout information necessary to delete the buffer in the <code>ptr</code> parameter."}]}],"pos":[113094,113224],"yaml":true},{"content":"<code>structureType</code> has an automatic layout. Use sequential or explicit instead.","nodes":[{"pos":[0,87],"content":"<code>structureType</code> has an automatic layout. Use sequential or explicit instead.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;structureType&lt;/code&gt;</ph> has an automatic layout.","pos":[0,51],"source":"<code>structureType</code> has an automatic layout."},{"content":"Use sequential or explicit instead.","pos":[52,87]}]}],"pos":[113401,113489],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Frees all substructures of a specified type that the specified unmanaged memory block points to.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,161],"content":"Frees all substructures of a specified type that the specified unmanaged memory block points to.","nodes":[{"content":"Frees all substructures of a specified type that the specified unmanaged memory block points to.","pos":[0,96]}]}],"pos":[115167,115333],"yaml":true},{"content":"You can use this method to free reference type fields, such as strings, of an unmanaged structure. Unlike its fields, a structure can be a value type or a reference type. Value type structures that contain value type fields (all blittable) have no references whose memory must be freed. The <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A?displayProperty=fullName> method uses this method to prevent memory leaks when reusing memory occupied by a structure.  \n  \n <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> calls the COM [SysFreeString](http://go.microsoft.com/fwlink/?LinkId=148633) function, which, in turn, frees an allocated string.","nodes":[{"pos":[0,472],"content":"You can use this method to free reference type fields, such as strings, of an unmanaged structure. Unlike its fields, a structure can be a value type or a reference type. Value type structures that contain value type fields (all blittable) have no references whose memory must be freed. The <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A?displayProperty=fullName> method uses this method to prevent memory leaks when reusing memory occupied by a structure.","nodes":[{"content":"You can use this method to free reference type fields, such as strings, of an unmanaged structure. Unlike its fields, a structure can be a value type or a reference type. Value type structures that contain value type fields (all blittable) have no references whose memory must be freed. The <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A?displayProperty=fullName> method uses this method to prevent memory leaks when reusing memory occupied by a structure.","pos":[0,472],"nodes":[{"content":"You can use this method to free reference type fields, such as strings, of an unmanaged structure.","pos":[0,98]},{"content":"Unlike its fields, a structure can be a value type or a reference type.","pos":[99,170]},{"content":"Value type structures that contain value type fields (all blittable) have no references whose memory must be freed.","pos":[171,286]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A?displayProperty=fullName&gt;</ph> method uses this method to prevent memory leaks when reusing memory occupied by a structure.","pos":[287,472],"source":" The <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A?displayProperty=fullName> method uses this method to prevent memory leaks when reusing memory occupied by a structure."}]}]},{"pos":[479,674],"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A&gt;</ph> calls the COM <bpt id=\"p1\">[</bpt>SysFreeString<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148633)</ept> function, which, in turn, frees an allocated string.","source":"<xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> calls the COM [SysFreeString](http://go.microsoft.com/fwlink/?LinkId=148633) function, which, in turn, frees an allocated string."}],"pos":[115344,116023],"yaml":true,"extradata":"MT"},{"content":"A pointer to an unmanaged block of memory.","nodes":[{"pos":[0,42],"content":"A pointer to an unmanaged block of memory.","nodes":[{"content":"A pointer to an unmanaged block of memory.","pos":[0,42]}]}],"pos":[116174,116217],"yaml":true},{"content":"The type of the formatted structure. This provides the layout information necessary to delete the buffer in the <code>ptr</code> parameter.","nodes":[{"pos":[0,139],"content":"The type of the formatted structure. This provides the layout information necessary to delete the buffer in the <code>ptr</code> parameter.","nodes":[{"content":"The type of the formatted structure.","pos":[0,36]},{"content":"This provides the layout information necessary to delete the buffer in the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter.","pos":[37,139],"source":" This provides the layout information necessary to delete the buffer in the <code>ptr</code> parameter."}]}],"pos":[116268,116408],"yaml":true},{"content":"<code>T</code> has an automatic layout. Use sequential or explicit instead.","nodes":[{"pos":[0,75],"content":"<code>T</code> has an automatic layout. Use sequential or explicit instead.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;T&lt;/code&gt;</ph> has an automatic layout.","pos":[0,39],"source":"<code>T</code> has an automatic layout."},{"content":"Use sequential or explicit instead.","pos":[40,75]}]}],"pos":[116588,116664],"yaml":true},{"content":"Releases all references to a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW) by setting its reference count to 0.","nodes":[{"pos":[0,152],"content":"Releases all references to a <bpt id=\"p1\">[</bpt>Runtime Callable Wrapper<ept id=\"p1\">](~/docs/framework/interop/runtime-callable-wrapper.md)</ept> (RCW) by setting its reference count to 0.","source":"Releases all references to a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW) by setting its reference count to 0."}],"pos":[118197,118350],"yaml":true},{"content":"The <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method releases the managed reference to a COM object. Calling this method is equivalent to calling the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method in a loop until it returns 0 (zero).  \n  \n When the reference count on the COM object becomes 0, the COM object is usually freed, although this depends on the COM object's implementation and is beyond the control of the runtime. However, the RCW can still exist, waiting to be garbage-collected.  \n  \n The COM object cannot be used after it has been separated from its underlying RCW. If you try to call a method on the RCW after its reference count becomes 0, a <xref:System.Runtime.InteropServices.InvalidComObjectException> will be thrown.","nodes":[{"pos":[0,288],"content":"The <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method releases the managed reference to a COM object. Calling this method is equivalent to calling the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method in a loop until it returns 0 (zero).","nodes":[{"content":"The <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method releases the managed reference to a COM object. Calling this method is equivalent to calling the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method in a loop until it returns 0 (zero).","pos":[0,288],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A&gt;</ph> method releases the managed reference to a COM object.","pos":[0,129],"source":"The <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method releases the managed reference to a COM object."},{"content":"Calling this method is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A&gt;</ph> method in a loop until it returns 0 (zero).","pos":[130,288],"source":" Calling this method is equivalent to calling the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method in a loop until it returns 0 (zero)."}]}]},{"pos":[295,547],"content":"When the reference count on the COM object becomes 0, the COM object is usually freed, although this depends on the COM object's implementation and is beyond the control of the runtime. However, the RCW can still exist, waiting to be garbage-collected.","nodes":[{"content":"When the reference count on the COM object becomes 0, the COM object is usually freed, although this depends on the COM object's implementation and is beyond the control of the runtime. However, the RCW can still exist, waiting to be garbage-collected.","pos":[0,252],"nodes":[{"content":"When the reference count on the COM object becomes 0, the COM object is usually freed, although this depends on the COM object's implementation and is beyond the control of the runtime.","pos":[0,185]},{"content":"However, the RCW can still exist, waiting to be garbage-collected.","pos":[186,252]}]}]},{"pos":[554,794],"content":"The COM object cannot be used after it has been separated from its underlying RCW. If you try to call a method on the RCW after its reference count becomes 0, a <xref:System.Runtime.InteropServices.InvalidComObjectException> will be thrown.","nodes":[{"content":"The COM object cannot be used after it has been separated from its underlying RCW. If you try to call a method on the RCW after its reference count becomes 0, a <xref:System.Runtime.InteropServices.InvalidComObjectException> will be thrown.","pos":[0,240],"nodes":[{"content":"The COM object cannot be used after it has been separated from its underlying RCW.","pos":[0,82]},{"content":"If you try to call a method on the RCW after its reference count becomes 0, a <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.InvalidComObjectException&gt;</ph> will be thrown.","pos":[83,240],"source":" If you try to call a method on the RCW after its reference count becomes 0, a <xref:System.Runtime.InteropServices.InvalidComObjectException> will be thrown."}]}]}],"pos":[118361,119162],"yaml":true,"extradata":"MT"},{"content":"The RCW to be released.","nodes":[{"pos":[0,23],"content":"The RCW to be released.","nodes":[{"content":"The RCW to be released.","pos":[0,23]}]}],"pos":[119310,119334],"yaml":true},{"content":"The new value of the reference count of the RCW associated with the <code>o</code> parameter, which is 0 (zero) if the release is successful.","nodes":[{"pos":[0,141],"content":"The new value of the reference count of the RCW associated with the <ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph> parameter, which is 0 (zero) if the release is successful.","source":"The new value of the reference count of the RCW associated with the <code>o</code> parameter, which is 0 (zero) if the release is successful."}],"pos":[119390,119532],"yaml":true},{"content":"<code>o</code> is not a valid COM object.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph> is not a valid COM object.","source":"<code>o</code> is not a valid COM object."}],"pos":[119714,119756],"yaml":true},{"content":"<code>o</code> is `null`.","nodes":[{"pos":[0,25],"content":"<ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>o</code> is `null`."}],"pos":[119858,119884],"yaml":true},{"content":"Frees a `BSTR` using the COM [SysFreeString](http://go.microsoft.com/fwlink/?LinkID=148633) function.","nodes":[{"pos":[0,101],"content":"Frees a <ph id=\"ph1\">`BSTR`</ph> using the COM <bpt id=\"p1\">[</bpt>SysFreeString<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=148633)</ept> function.","source":"Frees a `BSTR` using the COM [SysFreeString](http://go.microsoft.com/fwlink/?LinkID=148633) function."}],"pos":[121421,121523],"yaml":true},{"content":"Like <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A?displayProperty=fullName>, you can use this method to deallocate memory. <xref:System.Runtime.InteropServices.Marshal.FreeBSTR%2A> calls the COM [SysFreeString](http://go.microsoft.com/fwlink/?LinkID=148633) function, which frees memory allocated by any of the following unmanaged methods: `SysAllocString`, `SysAllocStringByteLen`, `SysAllocStringLen`, `SysReAllocString`, `SysReAllocStringLen`. You can call unmanaged methods such as these with platform invoke. For details, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).","nodes":[{"pos":[0,737],"content":"Like <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A?displayProperty=fullName>, you can use this method to deallocate memory. <xref:System.Runtime.InteropServices.Marshal.FreeBSTR%2A> calls the COM [SysFreeString](http://go.microsoft.com/fwlink/?LinkID=148633) function, which frees memory allocated by any of the following unmanaged methods: `SysAllocString`, `SysAllocStringByteLen`, `SysAllocStringLen`, `SysReAllocString`, `SysReAllocStringLen`. You can call unmanaged methods such as these with platform invoke. For details, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).","nodes":[{"content":"Like <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A?displayProperty=fullName&gt;</ph>, you can use this method to deallocate memory.","pos":[0,229],"source":"Like <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A?displayProperty=fullName>, you can use this method to deallocate memory."},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.FreeBSTR%2A&gt;</ph> calls the COM <bpt id=\"p1\">[</bpt>SysFreeString<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=148633)</ept> function, which frees memory allocated by any of the following unmanaged methods: <ph id=\"ph2\">`SysAllocString`</ph>, <ph id=\"ph3\">`SysAllocStringByteLen`</ph>, <ph id=\"ph4\">`SysAllocStringLen`</ph>, <ph id=\"ph5\">`SysReAllocString`</ph>, <ph id=\"ph6\">`SysReAllocStringLen`</ph>.","pos":[230,553],"source":" <xref:System.Runtime.InteropServices.Marshal.FreeBSTR%2A> calls the COM [SysFreeString](http://go.microsoft.com/fwlink/?LinkID=148633) function, which frees memory allocated by any of the following unmanaged methods: `SysAllocString`, `SysAllocStringByteLen`, `SysAllocStringLen`, `SysReAllocString`, `SysReAllocStringLen`."},{"content":"You can call unmanaged methods such as these with platform invoke.","pos":[554,620]},{"content":"For details, see <bpt id=\"p1\">[</bpt>Consuming Unmanaged DLL Functions<ept id=\"p1\">](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)</ept>.","pos":[621,737],"source":" For details, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)."}]}],"pos":[121534,122274],"yaml":true,"extradata":"MT"},{"content":"The address of the BSTR to be freed.","nodes":[{"pos":[0,36],"content":"The address of the BSTR to be freed.","nodes":[{"content":"The address of the BSTR to be freed.","pos":[0,36]}]}],"pos":[122414,122451],"yaml":true},{"content":"Frees a block of memory allocated by the unmanaged COM task memory allocator.","nodes":[{"pos":[0,77],"content":"Frees a block of memory allocated by the unmanaged COM task memory allocator.","nodes":[{"content":"Frees a block of memory allocated by the unmanaged COM task memory allocator.","pos":[0,77]}]}],"pos":[124096,124174],"yaml":true},{"content":"You can use <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A> to free any memory allocated by <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A>, <xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A>, or any equivalent unmanaged method. If the `ptr` parameter is `null`, the method does nothing.  \n  \n <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A> exposes the COM [CoTaskMemFree](http://go.microsoft.com/fwlink/?LinkId=148638) function, which frees all bytes so that you can no longer use the memory that the `ptr` parameter points to.  \n  \n In addition to <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>, the <xref:System.Runtime.InteropServices.Marshal> class provides two other memory-deallocation methods: <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> and <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>.","nodes":[{"pos":[0,333],"content":"You can use <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A> to free any memory allocated by <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A>, <xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A>, or any equivalent unmanaged method. If the `ptr` parameter is `null`, the method does nothing.","nodes":[{"content":"You can use <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A&gt;</ph> to free any memory allocated by <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A&gt;</ph>, or any equivalent unmanaged method.","pos":[0,274],"source":"You can use <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A> to free any memory allocated by <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A>, <xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A>, or any equivalent unmanaged method."},{"content":"If the <ph id=\"ph1\">`ptr`</ph> parameter is <ph id=\"ph2\">`null`</ph>, the method does nothing.","pos":[275,333],"source":" If the `ptr` parameter is `null`, the method does nothing."}]},{"pos":[340,590],"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A&gt;</ph> exposes the COM <bpt id=\"p1\">[</bpt>CoTaskMemFree<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148638)</ept> function, which frees all bytes so that you can no longer use the memory that the <ph id=\"ph2\">`ptr`</ph> parameter points to.","source":"<xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A> exposes the COM [CoTaskMemFree](http://go.microsoft.com/fwlink/?LinkId=148638) function, which frees all bytes so that you can no longer use the memory that the `ptr` parameter points to."},{"pos":[597,911],"content":"In addition to <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>, the <xref:System.Runtime.InteropServices.Marshal> class provides two other memory-deallocation methods: <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> and <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>.","nodes":[{"content":"In addition to <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A&gt;</ph>, the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class provides two other memory-deallocation methods: <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A&gt;</ph>.","pos":[0,314],"source":"In addition to <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>, the <xref:System.Runtime.InteropServices.Marshal> class provides two other memory-deallocation methods: <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> and <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>."}]}],"pos":[124185,125103],"yaml":true,"extradata":"MT"},{"content":"The address of the memory to be freed.","nodes":[{"pos":[0,38],"content":"The address of the memory to be freed.","nodes":[{"content":"The address of the memory to be freed.","pos":[0,38]}]}],"pos":[125248,125287],"yaml":true},{"content":"Frees memory previously allocated from the unmanaged memory of the process.","nodes":[{"pos":[0,75],"content":"Frees memory previously allocated from the unmanaged memory of the process.","nodes":[{"content":"Frees memory previously allocated from the unmanaged memory of the process.","pos":[0,75]}]}],"pos":[126925,127001],"yaml":true},{"content":"You can use <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> to free any memory from the global heap allocated by <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>, <xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A>, or any equivalent unmanaged API method. If the `hglobal` parameter is <xref:System.IntPtr.Zero?displayProperty=fullName> the method does nothing.  \n  \n <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> exposes the [LocalFree](http://go.microsoft.com/fwlink/?LinkId=148640) function from Kernel32.DLL, which frees all bytes so that you can no longer use the memory pointed to by `hglobal`.  \n  \n In addition to <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>, the <xref:System.Runtime.InteropServices.Marshal> class provides two other memory-deallocation API methods: <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> and <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>.","nodes":[{"pos":[0,399],"content":"You can use <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> to free any memory from the global heap allocated by <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>, <xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A>, or any equivalent unmanaged API method. If the `hglobal` parameter is <xref:System.IntPtr.Zero?displayProperty=fullName> the method does nothing.","nodes":[{"content":"You can use <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A&gt;</ph> to free any memory from the global heap allocated by <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A&gt;</ph>, or any equivalent unmanaged API method.","pos":[0,293],"source":"You can use <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> to free any memory from the global heap allocated by <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>, <xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A>, or any equivalent unmanaged API method."},{"content":"If the <ph id=\"ph1\">`hglobal`</ph> parameter is <ph id=\"ph2\">&lt;xref:System.IntPtr.Zero?displayProperty=fullName&gt;</ph> the method does nothing.","pos":[294,399],"source":" If the `hglobal` parameter is <xref:System.IntPtr.Zero?displayProperty=fullName> the method does nothing."}]},{"pos":[406,653],"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A&gt;</ph> exposes the <bpt id=\"p1\">[</bpt>LocalFree<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148640)</ept> function from Kernel32.DLL, which frees all bytes so that you can no longer use the memory pointed to by <ph id=\"ph2\">`hglobal`</ph>.","source":"<xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> exposes the [LocalFree](http://go.microsoft.com/fwlink/?LinkId=148640) function from Kernel32.DLL, which frees all bytes so that you can no longer use the memory pointed to by `hglobal`."},{"pos":[660,978],"content":"In addition to <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>, the <xref:System.Runtime.InteropServices.Marshal> class provides two other memory-deallocation API methods: <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> and <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>.","nodes":[{"content":"In addition to <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A&gt;</ph>, the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class provides two other memory-deallocation API methods: <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A&gt;</ph>.","pos":[0,318],"source":"In addition to <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>, the <xref:System.Runtime.InteropServices.Marshal> class provides two other memory-deallocation API methods: <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> and <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>."}]}],"pos":[127012,127997],"yaml":true,"extradata":"MT"},{"content":"The handle returned by the original matching call to <xref href=\"System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\"></xref>.","nodes":[{"pos":[0,141],"content":"The handle returned by the original matching call to <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\"&gt;&lt;/xref&gt;</ph>.","source":"The handle returned by the original matching call to <xref href=\"System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\"></xref>."}],"pos":[129260,129402],"yaml":true},{"content":"Returns the globally unique identifier (GUID) for the specified type, or generates a GUID using the algorithm used by the Type Library Exporter (Tlbexp.exe).","nodes":[{"pos":[0,157],"content":"Returns the globally unique identifier (GUID) for the specified type, or generates a GUID using the algorithm used by the Type Library Exporter (Tlbexp.exe).","nodes":[{"content":"Returns the globally unique identifier (GUID) for the specified type, or generates a GUID using the algorithm used by the Type Library Exporter (Tlbexp.exe).","pos":[0,157]}]}],"pos":[131075,131233],"yaml":true},{"content":"If the type has a GUID in the metadata, it is returned. Otherwise, a GUID is automatically generated. You can use this method to programmatically determine the COM GUID for any managed type, including COM-invisible types. Class interfaces are the only exception because they do not correspond to a managed type. <xref:System.Runtime.InteropServices.Marshal.GenerateGuidForType%2A> provides the same functionality as the <xref:System.Type.GUID%2A?displayProperty=fullName> property.","nodes":[{"pos":[0,481],"content":"If the type has a GUID in the metadata, it is returned. Otherwise, a GUID is automatically generated. You can use this method to programmatically determine the COM GUID for any managed type, including COM-invisible types. Class interfaces are the only exception because they do not correspond to a managed type. <xref:System.Runtime.InteropServices.Marshal.GenerateGuidForType%2A> provides the same functionality as the <xref:System.Type.GUID%2A?displayProperty=fullName> property.","nodes":[{"content":"If the type has a GUID in the metadata, it is returned. Otherwise, a GUID is automatically generated. You can use this method to programmatically determine the COM GUID for any managed type, including COM-invisible types. Class interfaces are the only exception because they do not correspond to a managed type. <xref:System.Runtime.InteropServices.Marshal.GenerateGuidForType%2A> provides the same functionality as the <xref:System.Type.GUID%2A?displayProperty=fullName> property.","pos":[0,481],"nodes":[{"content":"If the type has a GUID in the metadata, it is returned.","pos":[0,55]},{"content":"Otherwise, a GUID is automatically generated.","pos":[56,101]},{"content":"You can use this method to programmatically determine the COM GUID for any managed type, including COM-invisible types.","pos":[102,221]},{"content":"Class interfaces are the only exception because they do not correspond to a managed type.","pos":[222,311]},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GenerateGuidForType%2A&gt;</ph> provides the same functionality as the <ph id=\"ph2\">&lt;xref:System.Type.GUID%2A?displayProperty=fullName&gt;</ph> property.","pos":[312,481],"source":" <xref:System.Runtime.InteropServices.Marshal.GenerateGuidForType%2A> provides the same functionality as the <xref:System.Type.GUID%2A?displayProperty=fullName> property."}]}]}],"pos":[131244,131726],"yaml":true,"extradata":"MT"},{"content":"The type to generate a GUID for.","nodes":[{"pos":[0,32],"content":"The type to generate a GUID for.","nodes":[{"content":"The type to generate a GUID for.","pos":[0,32]}]}],"pos":[131875,131908],"yaml":true},{"content":"An identifier for the specified type.","nodes":[{"pos":[0,37],"content":"An identifier for the specified type.","nodes":[{"content":"An identifier for the specified type.","pos":[0,37]}]}],"pos":[131963,132001],"yaml":true},{"content":"Returns a programmatic identifier (ProgID) for the specified type.","nodes":[{"pos":[0,66],"content":"Returns a programmatic identifier (ProgID) for the specified type.","nodes":[{"content":"Returns a programmatic identifier (ProgID) for the specified type.","pos":[0,66]}]}],"pos":[133293,133360],"yaml":true},{"content":"If the type has a ProgID in the metadata, that ProgID is returned. Otherwise, a ProgID is generated based on the fully qualified name of the type.","nodes":[{"pos":[0,146],"content":"If the type has a ProgID in the metadata, that ProgID is returned. Otherwise, a ProgID is generated based on the fully qualified name of the type.","nodes":[{"content":"If the type has a ProgID in the metadata, that ProgID is returned. Otherwise, a ProgID is generated based on the fully qualified name of the type.","pos":[0,146],"nodes":[{"content":"If the type has a ProgID in the metadata, that ProgID is returned.","pos":[0,66]},{"content":"Otherwise, a ProgID is generated based on the fully qualified name of the type.","pos":[67,146]}]}]}],"pos":[133371,133518],"yaml":true,"extradata":"MT"},{"content":"The type to get a ProgID for.","nodes":[{"pos":[0,29],"content":"The type to get a ProgID for.","nodes":[{"content":"The type to get a ProgID for.","pos":[0,29]}]}],"pos":[133671,133701],"yaml":true},{"content":"The ProgID of the specified type.","nodes":[{"pos":[0,33],"content":"The ProgID of the specified type.","nodes":[{"content":"The ProgID of the specified type.","pos":[0,33]}]}],"pos":[133758,133792],"yaml":true},{"content":"The <code>type</code> parameter is not a class that can be create by COM. The class must be public, have a public default constructor, and be COM visible.","nodes":[{"pos":[0,154],"content":"The <code>type</code> parameter is not a class that can be create by COM. The class must be public, have a public default constructor, and be COM visible.","nodes":[{"content":"The <ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> parameter is not a class that can be create by COM.","pos":[0,73],"source":"The <code>type</code> parameter is not a class that can be create by COM."},{"content":"The class must be public, have a public default constructor, and be COM visible.","pos":[74,154]}]}],"pos":[133974,134129],"yaml":true},{"content":"The <code>type</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>type</code> parameter is `null`."}],"pos":[134231,134274],"yaml":true},{"content":"Obtains a running instance of the specified object from the running object table (ROT).","nodes":[{"pos":[0,87],"content":"Obtains a running instance of the specified object from the running object table (ROT).","nodes":[{"content":"Obtains a running instance of the specified object from the running object table (ROT).","pos":[0,87]}]}],"pos":[135418,135506],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.GetActiveObject%2A> exposes the COM [GetActiveObject](https://msdn.microsoft.com/library/ms221467\\(v=vs.85\\).aspx) function from OLEAUT32.DLL; however, the latter expects a class identifier (CLSID) instead of the programmatic identifier (`ProgID`) expected by this method. To obtain a running instance of a COM object without a registered `ProgID`, use platform invoke to define the COM [GetActiveObject](https://msdn.microsoft.com/library/ms221467\\(v=vs.85\\).aspx) function. For a description of platform invoke, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).  \n  \n## ProgID and CLSID  \n Keys in the HKEY_CLASSES_ROOT subtree of the registry contain a variety of subkey types. Most of the subkeys are ProgIDs, which map a user-friendly string to a CLSID. Applications often use these human-readable strings instead of the numeric CLSIDs. Often, a component has a version-independent ProgID that is mapped to the latest version of the component that is installed on the system.  \n  \n Applications and components primarily use ProgIDs to retrieve their corresponding CLSIDs.","nodes":[{"pos":[0,662],"content":"<xref:System.Runtime.InteropServices.Marshal.GetActiveObject%2A> exposes the COM [GetActiveObject](https://msdn.microsoft.com/library/ms221467\\(v=vs.85\\).aspx) function from OLEAUT32.DLL; however, the latter expects a class identifier (CLSID) instead of the programmatic identifier (`ProgID`) expected by this method. To obtain a running instance of a COM object without a registered `ProgID`, use platform invoke to define the COM [GetActiveObject](https://msdn.microsoft.com/library/ms221467\\(v=vs.85\\).aspx) function. For a description of platform invoke, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetActiveObject%2A&gt;</ph> exposes the COM <bpt id=\"p1\">[</bpt>GetActiveObject<ept id=\"p1\">](https://msdn.microsoft.com/library/ms221467\\(v=vs.85\\).aspx)</ept> function from OLEAUT32.DLL; however, the latter expects a class identifier (CLSID) instead of the programmatic identifier (<ph id=\"ph2\">`ProgID`</ph>) expected by this method.","pos":[0,317],"source":"<xref:System.Runtime.InteropServices.Marshal.GetActiveObject%2A> exposes the COM [GetActiveObject](https://msdn.microsoft.com/library/ms221467\\(v=vs.85\\).aspx) function from OLEAUT32.DLL; however, the latter expects a class identifier (CLSID) instead of the programmatic identifier (`ProgID`) expected by this method."},{"content":"To obtain a running instance of a COM object without a registered <ph id=\"ph1\">`ProgID`</ph>, use platform invoke to define the COM <bpt id=\"p1\">[</bpt>GetActiveObject<ept id=\"p1\">](https://msdn.microsoft.com/library/ms221467\\(v=vs.85\\).aspx)</ept> function.","pos":[318,520],"source":" To obtain a running instance of a COM object without a registered `ProgID`, use platform invoke to define the COM [GetActiveObject](https://msdn.microsoft.com/library/ms221467\\(v=vs.85\\).aspx) function."},{"content":"For a description of platform invoke, see <bpt id=\"p1\">[</bpt>Consuming Unmanaged DLL Functions<ept id=\"p1\">](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)</ept>.","pos":[521,662],"source":" For a description of platform invoke, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)."}]},{"pos":[671,687],"content":"ProgID and CLSID","linkify":"ProgID and CLSID","nodes":[{"content":"ProgID and CLSID","pos":[0,16]}]},{"pos":[691,1079],"content":"Keys in the HKEY_CLASSES_ROOT subtree of the registry contain a variety of subkey types. Most of the subkeys are ProgIDs, which map a user-friendly string to a CLSID. Applications often use these human-readable strings instead of the numeric CLSIDs. Often, a component has a version-independent ProgID that is mapped to the latest version of the component that is installed on the system.","nodes":[{"content":"Keys in the HKEY_CLASSES_ROOT subtree of the registry contain a variety of subkey types. Most of the subkeys are ProgIDs, which map a user-friendly string to a CLSID. Applications often use these human-readable strings instead of the numeric CLSIDs. Often, a component has a version-independent ProgID that is mapped to the latest version of the component that is installed on the system.","pos":[0,388],"nodes":[{"content":"Keys in the HKEY_CLASSES_ROOT subtree of the registry contain a variety of subkey types.","pos":[0,88]},{"content":"Most of the subkeys are ProgIDs, which map a user-friendly string to a CLSID.","pos":[89,166]},{"content":"Applications often use these human-readable strings instead of the numeric CLSIDs.","pos":[167,249]},{"content":"Often, a component has a version-independent ProgID that is mapped to the latest version of the component that is installed on the system.","pos":[250,388]}]}]},{"pos":[1086,1175],"content":"Applications and components primarily use ProgIDs to retrieve their corresponding CLSIDs.","nodes":[{"content":"Applications and components primarily use ProgIDs to retrieve their corresponding CLSIDs.","pos":[0,89]}]}],"pos":[135517,136704],"yaml":true,"extradata":"MT"},{"content":"The programmatic identifier (ProgID) of the object that was requested.","nodes":[{"pos":[0,70],"content":"The programmatic identifier (ProgID) of the object that was requested.","nodes":[{"content":"The programmatic identifier (ProgID) of the object that was requested.","pos":[0,70]}]}],"pos":[138056,138127],"yaml":true},{"content":"The object that was requested; otherwise `null`. You can cast this object to any COM interface that it supports.","nodes":[{"pos":[0,112],"content":"The object that was requested; otherwise `null`. You can cast this object to any COM interface that it supports.","nodes":[{"content":"The object that was requested; otherwise <ph id=\"ph1\">`null`</ph>.","pos":[0,48],"source":"The object that was requested; otherwise `null`."},{"content":"You can cast this object to any COM interface that it supports.","pos":[49,112]}]}],"pos":[138184,138297],"yaml":true},{"content":"The object was not found.","nodes":[{"pos":[0,25],"content":"The object was not found.","nodes":[{"content":"The object was not found.","pos":[0,25]}]}],"pos":[138511,138537],"yaml":true},{"content":"Returns a pointer to an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface that represents the specified interface on the specified object. Custom query interface access is enabled by default.","nodes":[{"pos":[0,209],"content":"Returns a pointer to an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface that represents the specified interface on the specified object. Custom query interface access is enabled by default.","nodes":[{"content":"Returns a pointer to an <bpt id=\"p1\">[</bpt>IUnknown<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148003)</ept> interface that represents the specified interface on the specified object.","pos":[0,156],"source":"Returns a pointer to an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface that represents the specified interface on the specified object."},{"content":"Custom query interface access is enabled by default.","pos":[157,209]}]}],"pos":[139808,140018],"yaml":true},{"content":"This method returns an interface pointer that represents the requested interface on the specified object. It is particularly useful if you have an unmanaged method that expects to be passed an interface pointer. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer. You must adhere to the rules defined by COM when using raw COM interface pointers.  \n  \n <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling. Although less common, you can use this method on a managed object to obtain a pointer to the object's COM callable wrapper. For example, you can use <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> on a managed object that is exported to COM to obtain an interface pointer for <xref:System.Runtime.InteropServices.UCOMIConnectionPointContainer?displayProperty=fullName>. You cannot obtain a pointer to a class interface since a class interface lacks the corresponding type to pass to the second parameter (`t`). Instead, use <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName> to invoke the members on the default interface of the COM callable wrapper, which is usually an auto-dispatch class interface.  \n  \n The <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> method overload allows query interface customization by default. To specify whether to apply query interface customization, use the <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29> method overload.  \n  \n For additional information, see the [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md), [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md), and [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024) topics.","nodes":[{"pos":[0,593],"content":"This method returns an interface pointer that represents the requested interface on the specified object. It is particularly useful if you have an unmanaged method that expects to be passed an interface pointer. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer. You must adhere to the rules defined by COM when using raw COM interface pointers.","nodes":[{"content":"This method returns an interface pointer that represents the requested interface on the specified object. It is particularly useful if you have an unmanaged method that expects to be passed an interface pointer. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer. You must adhere to the rules defined by COM when using raw COM interface pointers.","pos":[0,593],"nodes":[{"content":"This method returns an interface pointer that represents the requested interface on the specified object.","pos":[0,105]},{"content":"It is particularly useful if you have an unmanaged method that expects to be passed an interface pointer.","pos":[106,211]},{"content":"Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned.","pos":[212,343]},{"content":"Always use <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName&gt;</ph> to decrement the reference count once you have finished with the pointer.","pos":[344,510],"source":" Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer."},{"content":"You must adhere to the rules defined by COM when using raw COM interface pointers.","pos":[511,593]}]}]},{"pos":[600,1634],"content":"<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling. Although less common, you can use this method on a managed object to obtain a pointer to the object's COM callable wrapper. For example, you can use <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> on a managed object that is exported to COM to obtain an interface pointer for <xref:System.Runtime.InteropServices.UCOMIConnectionPointContainer?displayProperty=fullName>. You cannot obtain a pointer to a class interface since a class interface lacks the corresponding type to pass to the second parameter (`t`). Instead, use <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName> to invoke the members on the default interface of the COM callable wrapper, which is usually an auto-dispatch class interface.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29&gt;</ph> is useful when calling a method that exposes a COM object parameter as an <ph id=\"ph2\">&lt;xref:System.IntPtr&gt;</ph> type, or with custom marshaling.","pos":[0,231],"source":"<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling."},{"content":"Although less common, you can use this method on a managed object to obtain a pointer to the object's COM callable wrapper.","pos":[232,355]},{"content":"For example, you can use <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29&gt;</ph> on a managed object that is exported to COM to obtain an interface pointer for <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.UCOMIConnectionPointContainer?displayProperty=fullName&gt;</ph>.","pos":[356,657],"source":" For example, you can use <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> on a managed object that is exported to COM to obtain an interface pointer for <xref:System.Runtime.InteropServices.UCOMIConnectionPointContainer?displayProperty=fullName>."},{"content":"You cannot obtain a pointer to a class interface since a class interface lacks the corresponding type to pass to the second parameter (<ph id=\"ph1\">`t`</ph>).","pos":[658,798],"source":" You cannot obtain a pointer to a class interface since a class interface lacks the corresponding type to pass to the second parameter (`t`)."},{"content":"Instead, use <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName&gt;</ph> to invoke the members on the default interface of the COM callable wrapper, which is usually an auto-dispatch class interface.","pos":[799,1034],"source":" Instead, use <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName> to invoke the members on the default interface of the COM callable wrapper, which is usually an auto-dispatch class interface."}]},{"pos":[1641,2059],"content":"The <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> method overload allows query interface customization by default. To specify whether to apply query interface customization, use the <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29> method overload.","nodes":[{"content":"The <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> method overload allows query interface customization by default. To specify whether to apply query interface customization, use the <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29> method overload.","pos":[0,418],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29&gt;</ph> method overload allows query interface customization by default.","pos":[0,172],"source":"The <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> method overload allows query interface customization by default."},{"content":"To specify whether to apply query interface customization, use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29&gt;</ph> method overload.","pos":[173,418],"source":" To specify whether to apply query interface customization, use the <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29> method overload."}]}]},{"pos":[2066,2373],"content":"For additional information, see the <bpt id=\"p1\">[</bpt>COM Callable Wrapper<ept id=\"p1\">](~/docs/framework/interop/com-callable-wrapper.md)</ept>, <bpt id=\"p2\">[</bpt>Runtime Callable Wrapper<ept id=\"p2\">](~/docs/framework/interop/runtime-callable-wrapper.md)</ept>, and <bpt id=\"p3\">[</bpt>Introducing the Class Interface<ept id=\"p3\">](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024)</ept> topics.","source":"For additional information, see the [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md), [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md), and [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024) topics."}],"pos":[140029,142411],"yaml":true,"extradata":"MT"},{"content":"The object that provides the interface.","nodes":[{"pos":[0,39],"content":"The object that provides the interface.","nodes":[{"content":"The object that provides the interface.","pos":[0,39]}]}],"pos":[142573,142613],"yaml":true},{"content":"The type of interface that is requested.","nodes":[{"pos":[0,40],"content":"The type of interface that is requested.","nodes":[{"content":"The type of interface that is requested.","pos":[0,40]}]}],"pos":[142668,142709],"yaml":true},{"content":"The interface pointer that represents the specified interface for the object.","nodes":[{"pos":[0,77],"content":"The interface pointer that represents the specified interface for the object.","nodes":[{"content":"The interface pointer that represents the specified interface for the object.","pos":[0,77]}]}],"pos":[142766,142844],"yaml":true},{"content":"The <code>T</code> parameter is not an interface.  \n  \n -or-  \n  \n The type is not visible to COM.  \n  \n -or-  \n  \n The <code>T</code> parameter is a generic type.","nodes":[{"pos":[0,49],"content":"The <ph id=\"ph1\">&lt;code&gt;T&lt;/code&gt;</ph> parameter is not an interface.","source":"The <code>T</code> parameter is not an interface."},{"pos":[56,60],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[67,98],"content":"The type is not visible to COM.","nodes":[{"content":"The type is not visible to COM.","pos":[0,31]}]},{"pos":[105,109],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[116,163],"content":"The <ph id=\"ph1\">&lt;code&gt;T&lt;/code&gt;</ph> parameter is a generic type.","source":"The <code>T</code> parameter is a generic type."}],"pos":[143029,143203],"yaml":true},{"content":"The <code>o</code> parameter does not support the requested interface.","nodes":[{"pos":[0,70],"content":"The <ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph> parameter does not support the requested interface.","source":"The <code>o</code> parameter does not support the requested interface."}],"pos":[143303,143374],"yaml":true},{"content":"The <code>o</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>T</code> parameter is `null`.","nodes":[{"pos":[0,39],"content":"The <ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>o</code> parameter is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,96],"content":"The <ph id=\"ph1\">&lt;code&gt;T&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>T</code> parameter is `null`."}],"pos":[143476,143579],"yaml":true},{"content":"Returns a pointer to an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface that represents the specified interface on the specified object. Custom query interface access is controlled by the specified customization mode.","nodes":[{"pos":[0,237],"content":"Returns a pointer to an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface that represents the specified interface on the specified object. Custom query interface access is controlled by the specified customization mode.","nodes":[{"content":"Returns a pointer to an <bpt id=\"p1\">[</bpt>IUnknown<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148003)</ept> interface that represents the specified interface on the specified object.","pos":[0,156],"source":"Returns a pointer to an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface that represents the specified interface on the specified object."},{"content":"Custom query interface access is controlled by the specified customization mode.","pos":[157,237]}]}],"pos":[145512,145750],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29>lets you specify whether to apply query interface customization. Use the <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> overload to apply query interface customization by default.","nodes":[{"pos":[0,397],"content":"<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29>lets you specify whether to apply query interface customization. Use the <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> overload to apply query interface customization by default.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29>lets you specify whether to apply query interface customization. Use the <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> overload to apply query interface customization by default.","pos":[0,397],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29&gt;</ph>lets you specify whether to apply query interface customization.","pos":[0,225],"source":"<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29>lets you specify whether to apply query interface customization."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29&gt;</ph> overload to apply query interface customization by default.","pos":[226,397],"source":" Use the <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> overload to apply query interface customization by default."}]}]}],"pos":[145761,146159],"yaml":true,"extradata":"MT"},{"content":"The object that provides the interface.","nodes":[{"pos":[0,39],"content":"The object that provides the interface.","nodes":[{"content":"The object that provides the interface.","pos":[0,39]}]}],"pos":[146383,146423],"yaml":true},{"content":"The type of interface that is requested.","nodes":[{"pos":[0,40],"content":"The type of interface that is requested.","nodes":[{"content":"The type of interface that is requested.","pos":[0,40]}]}],"pos":[146478,146519],"yaml":true},{"content":"One of the enumeration values that indicates whether to apply an `IUnknown::QueryInterface` customization that is supplied by an <xref href=\"System.Runtime.InteropServices.ICustomQueryInterface\"></xref>.","nodes":[{"pos":[0,203],"content":"One of the enumeration values that indicates whether to apply an <ph id=\"ph1\">`IUnknown::QueryInterface`</ph> customization that is supplied by an <ph id=\"ph2\">&lt;xref href=\"System.Runtime.InteropServices.ICustomQueryInterface\"&gt;&lt;/xref&gt;</ph>.","source":"One of the enumeration values that indicates whether to apply an `IUnknown::QueryInterface` customization that is supplied by an <xref href=\"System.Runtime.InteropServices.ICustomQueryInterface\"></xref>."}],"pos":[146621,146825],"yaml":true},{"content":"The interface pointer that represents the interface for the object.","nodes":[{"pos":[0,67],"content":"The interface pointer that represents the interface for the object.","nodes":[{"content":"The interface pointer that represents the interface for the object.","pos":[0,67]}]}],"pos":[146882,146950],"yaml":true},{"content":"The <code>T</code> parameter is not an interface.  \n  \n -or-  \n  \n The type is not visible to COM.  \n  \n -or-  \n  \n The <code>T</code> parameter is a generic type.","nodes":[{"pos":[0,49],"content":"The <ph id=\"ph1\">&lt;code&gt;T&lt;/code&gt;</ph> parameter is not an interface.","source":"The <code>T</code> parameter is not an interface."},{"pos":[56,60],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[67,98],"content":"The type is not visible to COM.","nodes":[{"content":"The type is not visible to COM.","pos":[0,31]}]},{"pos":[105,109],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[116,163],"content":"The <ph id=\"ph1\">&lt;code&gt;T&lt;/code&gt;</ph> parameter is a generic type.","source":"The <code>T</code> parameter is a generic type."}],"pos":[147135,147309],"yaml":true},{"content":"The object <code>o</code> does not support the requested interface.","nodes":[{"pos":[0,67],"content":"The object <ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph> does not support the requested interface.","source":"The object <code>o</code> does not support the requested interface."}],"pos":[147409,147477],"yaml":true},{"content":"The <code>o</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>T</code> parameter is `null`.","nodes":[{"pos":[0,39],"content":"The <ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>o</code> parameter is `null`."},{"pos":[46,50],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[57,96],"content":"The <ph id=\"ph1\">&lt;code&gt;T&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>T</code> parameter is `null`."}],"pos":[147579,147682],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Returns a pointer to an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface that represents the specified interface on an object of the specified type. Custom query interface access is enabled by default.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,285],"content":"Returns a pointer to an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface that represents the specified interface on an object of the specified type. Custom query interface access is enabled by default.","nodes":[{"content":"Returns a pointer to an <bpt id=\"p1\">[</bpt>IUnknown<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148003)</ept> interface that represents the specified interface on an object of the specified type.","pos":[0,167],"source":"Returns a pointer to an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface that represents the specified interface on an object of the specified type."},{"content":"Custom query interface access is enabled by default.","pos":[168,220]}]}],"pos":[149321,149611],"yaml":true},{"content":"This method returns an interface pointer that represents the `TInterface` interface on the specified object. It is particularly useful if you have an unmanaged method that expects to be passed an interface pointer. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use the <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName>method to decrement the reference count when you have finished with the pointer. You must adhere to the rules defined by COM when using raw COM interface pointers.  \n  \n <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling. You can also use this method on a managed object to obtain a pointer to the object's COM callable wrapper, although this is less common. For example, you can use<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> on a managed object that is exported to COM to obtain an interface pointer for <xref:System.Runtime.InteropServices.UCOMIConnectionPointContainer?displayProperty=fullName>.  \n  \n The<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> method overload allows query interface customization by default. To specify whether to apply query interface customization, use the <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29> method overload.  \n  \n For additional information, see the [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md), [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md), and [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024) topics.","nodes":[{"pos":[0,606],"content":"This method returns an interface pointer that represents the `TInterface` interface on the specified object. It is particularly useful if you have an unmanaged method that expects to be passed an interface pointer. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use the <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName>method to decrement the reference count when you have finished with the pointer. You must adhere to the rules defined by COM when using raw COM interface pointers.","nodes":[{"content":"This method returns an interface pointer that represents the <ph id=\"ph1\">`TInterface`</ph> interface on the specified object.","pos":[0,108],"source":"This method returns an interface pointer that represents the `TInterface` interface on the specified object."},{"content":"It is particularly useful if you have an unmanaged method that expects to be passed an interface pointer.","pos":[109,214]},{"content":"Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned.","pos":[215,346]},{"content":"Always use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName&gt;</ph>method to decrement the reference count when you have finished with the pointer.","pos":[347,523],"source":" Always use the <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName>method to decrement the reference count when you have finished with the pointer."},{"content":"You must adhere to the rules defined by COM when using raw COM interface pointers.","pos":[524,606]}]},{"pos":[613,1256],"content":"<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling. You can also use this method on a managed object to obtain a pointer to the object's COM callable wrapper, although this is less common. For example, you can use<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> on a managed object that is exported to COM to obtain an interface pointer for <xref:System.Runtime.InteropServices.UCOMIConnectionPointContainer?displayProperty=fullName>.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling. You can also use this method on a managed object to obtain a pointer to the object's COM callable wrapper, although this is less common. For example, you can use<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> on a managed object that is exported to COM to obtain an interface pointer for <xref:System.Runtime.InteropServices.UCOMIConnectionPointContainer?displayProperty=fullName>.","pos":[0,643],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29&gt;</ph> is useful when calling a method that exposes a COM object parameter as an <ph id=\"ph2\">&lt;xref:System.IntPtr&gt;</ph> type, or with custom marshaling.","pos":[0,218],"source":"<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling."},{"content":"You can also use this method on a managed object to obtain a pointer to the object's COM callable wrapper, although this is less common.","pos":[219,355]},{"content":"For example, you can use<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29&gt;</ph> on a managed object that is exported to COM to obtain an interface pointer for <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.UCOMIConnectionPointContainer?displayProperty=fullName&gt;</ph>.","pos":[356,643],"source":" For example, you can use<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> on a managed object that is exported to COM to obtain an interface pointer for <xref:System.Runtime.InteropServices.UCOMIConnectionPointContainer?displayProperty=fullName>."}]}]},{"pos":[1263,1667],"content":"The<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> method overload allows query interface customization by default. To specify whether to apply query interface customization, use the <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29> method overload.","nodes":[{"content":"The<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> method overload allows query interface customization by default. To specify whether to apply query interface customization, use the <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29> method overload.","pos":[0,404],"nodes":[{"content":"The<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29&gt;</ph> method overload allows query interface customization by default.","pos":[0,158],"source":"The<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> method overload allows query interface customization by default."},{"content":"To specify whether to apply query interface customization, use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29&gt;</ph> method overload.","pos":[159,404],"source":" To specify whether to apply query interface customization, use the <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29> method overload."}]}]},{"pos":[1674,1981],"content":"For additional information, see the <bpt id=\"p1\">[</bpt>COM Callable Wrapper<ept id=\"p1\">](~/docs/framework/interop/com-callable-wrapper.md)</ept>, <bpt id=\"p2\">[</bpt>Runtime Callable Wrapper<ept id=\"p2\">](~/docs/framework/interop/runtime-callable-wrapper.md)</ept>, and <bpt id=\"p3\">[</bpt>Introducing the Class Interface<ept id=\"p3\">](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024)</ept> topics.","source":"For additional information, see the [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md), [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md), and [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024) topics."}],"pos":[149622,151612],"yaml":true,"extradata":"MT"},{"content":"The object that provides the interface.","nodes":[{"pos":[0,39],"content":"The object that provides the interface.","nodes":[{"content":"The object that provides the interface.","pos":[0,39]}]}],"pos":[151763,151803],"yaml":true},{"content":"The type of <code>o</code>.","nodes":[{"pos":[0,27],"content":"The type of <ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph>.","source":"The type of <code>o</code>."}],"pos":[151854,151882],"yaml":true},{"content":"The type of interface to return.","nodes":[{"pos":[0,32],"content":"The type of interface to return.","nodes":[{"content":"The type of interface to return.","pos":[0,32]}]}],"pos":[151922,151955],"yaml":true},{"content":"The interface pointer that represents the <code>TInterface</code> interface.","nodes":[{"pos":[0,76],"content":"The interface pointer that represents the <ph id=\"ph1\">&lt;code&gt;TInterface&lt;/code&gt;</ph> interface.","source":"The interface pointer that represents the <code>TInterface</code> interface."}],"pos":[152012,152089],"yaml":true},{"content":"The <code>TInterface</code> parameter is not an interface.  \n  \n -or-  \n  \n The type is not visible to COM.  \n  \n -or-  \n  \n The <code>T</code> parameter is an open generic type.","nodes":[{"pos":[0,58],"content":"The <ph id=\"ph1\">&lt;code&gt;TInterface&lt;/code&gt;</ph> parameter is not an interface.","source":"The <code>TInterface</code> parameter is not an interface."},{"pos":[65,69],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[76,107],"content":"The type is not visible to COM.","nodes":[{"content":"The type is not visible to COM.","pos":[0,31]}]},{"pos":[114,118],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[125,178],"content":"The <ph id=\"ph1\">&lt;code&gt;T&lt;/code&gt;</ph> parameter is an open generic type.","source":"The <code>T</code> parameter is an open generic type."}],"pos":[152277,152466],"yaml":true},{"content":"The <code>o</code> parameter does not support the <code>TInterface</code> interface.","nodes":[{"pos":[0,84],"content":"The <ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph> parameter does not support the <ph id=\"ph2\">&lt;code&gt;TInterface&lt;/code&gt;</ph> interface.","source":"The <code>o</code> parameter does not support the <code>TInterface</code> interface."}],"pos":[152566,152651],"yaml":true},{"content":"The <code>o</code> parameter is `null`.","nodes":[{"pos":[0,39],"content":"The <ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>o</code> parameter is `null`."}],"pos":[152753,152793],"yaml":true},{"content":"Returns an interface pointer that represents the specified interface for an object, if the caller is in the same context as that object.","nodes":[{"pos":[0,136],"content":"Returns an interface pointer that represents the specified interface for an object, if the caller is in the same context as that object.","nodes":[{"content":"Returns an interface pointer that represents the specified interface for an object, if the caller is in the same context as that object.","pos":[0,136]}]}],"pos":[154401,154538],"yaml":true},{"content":"This method is the same as <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A> except that it returns `null` if the caller is not in the same context as the object. It is particularly useful if you have an unmanaged method that expects to be passed an interface pointer.","nodes":[{"pos":[0,292],"content":"This method is the same as <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A> except that it returns `null` if the caller is not in the same context as the object. It is particularly useful if you have an unmanaged method that expects to be passed an interface pointer.","nodes":[{"content":"This method is the same as <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A&gt;</ph> except that it returns <ph id=\"ph2\">`null`</ph> if the caller is not in the same context as the object.","pos":[0,186],"source":"This method is the same as <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A> except that it returns `null` if the caller is not in the same context as the object."},{"content":"It is particularly useful if you have an unmanaged method that expects to be passed an interface pointer.","pos":[187,292]}]}],"pos":[154549,154842],"yaml":true,"extradata":"MT"},{"content":"The object that provides the interface.","nodes":[{"pos":[0,39],"content":"The object that provides the interface.","nodes":[{"content":"The object that provides the interface.","pos":[0,39]}]}],"pos":[155013,155053],"yaml":true},{"content":"The type of interface that is requested.","nodes":[{"pos":[0,40],"content":"The type of interface that is requested.","nodes":[{"content":"The type of interface that is requested.","pos":[0,40]}]}],"pos":[155108,155149],"yaml":true},{"content":"The interface pointer specified by <code>t</code> that represents the interface for the specified object, or `null` if the caller is not in the same context as the object.","nodes":[{"pos":[0,171],"content":"The interface pointer specified by <ph id=\"ph1\">&lt;code&gt;t&lt;/code&gt;</ph> that represents the interface for the specified object, or <ph id=\"ph2\">`null`</ph> if the caller is not in the same context as the object.","source":"The interface pointer specified by <code>t</code> that represents the interface for the specified object, or `null` if the caller is not in the same context as the object."}],"pos":[155206,155378],"yaml":true},{"content":"<code>t</code> is not an interface.  \n  \n -or-  \n  \n The type is not visible to COM.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;t&lt;/code&gt;</ph> is not an interface.","source":"<code>t</code> is not an interface."},{"pos":[42,46],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[53,84],"content":"The type is not visible to COM.","nodes":[{"content":"The type is not visible to COM.","pos":[0,31]}]}],"pos":[155572,155663],"yaml":true},{"content":"<code>o</code> does not support the requested interface.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph> does not support the requested interface.","source":"<code>o</code> does not support the requested interface."}],"pos":[155763,155820],"yaml":true},{"content":"<code>o</code> is `null`.  \n  \n -or-  \n  \n <code>t</code> is `null`.","nodes":[{"pos":[0,25],"content":"<ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>o</code> is `null`."},{"pos":[32,36],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[43,68],"content":"<ph id=\"ph1\">&lt;code&gt;t&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>t</code> is `null`."}],"pos":[155922,155997],"yaml":true},{"content":"Retrieves data that is referenced by the specified key from the specified COM object.","nodes":[{"pos":[0,85],"content":"Retrieves data that is referenced by the specified key from the specified COM object.","nodes":[{"content":"Retrieves data that is referenced by the specified key from the specified COM object.","pos":[0,85]}]}],"pos":[157216,157302],"yaml":true},{"content":"All COM objects wrapped in a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) have an associated hash table, which <xref:System.Runtime.InteropServices.Marshal.GetComObjectData%2A> retrieves. <xref:System.Runtime.InteropServices.Marshal.SetComObjectData%2A?displayProperty=fullName> adds data to the hash table. You should never have to call either method from your code.","nodes":[{"pos":[0,403],"content":"All COM objects wrapped in a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) have an associated hash table, which <xref:System.Runtime.InteropServices.Marshal.GetComObjectData%2A> retrieves. <xref:System.Runtime.InteropServices.Marshal.SetComObjectData%2A?displayProperty=fullName> adds data to the hash table. You should never have to call either method from your code.","nodes":[{"content":"All COM objects wrapped in a <bpt id=\"p1\">[</bpt>Runtime Callable Wrapper<ept id=\"p1\">](~/docs/framework/interop/runtime-callable-wrapper.md)</ept> have an associated hash table, which <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetComObjectData%2A&gt;</ph> retrieves.","pos":[0,223],"source":"All COM objects wrapped in a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) have an associated hash table, which <xref:System.Runtime.InteropServices.Marshal.GetComObjectData%2A> retrieves."},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.SetComObjectData%2A?displayProperty=fullName&gt;</ph> adds data to the hash table.","pos":[224,343],"source":" <xref:System.Runtime.InteropServices.Marshal.SetComObjectData%2A?displayProperty=fullName> adds data to the hash table."},{"content":"You should never have to call either method from your code.","pos":[344,403]}]}],"pos":[157313,157717],"yaml":true,"extradata":"MT"},{"content":"The COM object that contains the data that you want.","nodes":[{"pos":[0,52],"content":"The COM object that contains the data that you want.","nodes":[{"content":"The COM object that contains the data that you want.","pos":[0,52]}]}],"pos":[157879,157932],"yaml":true},{"content":"The key in the internal hash table of <code>obj</code> to retrieve the data from.","nodes":[{"pos":[0,81],"content":"The key in the internal hash table of <ph id=\"ph1\">&lt;code&gt;obj&lt;/code&gt;</ph> to retrieve the data from.","source":"The key in the internal hash table of <code>obj</code> to retrieve the data from."}],"pos":[157991,158073],"yaml":true},{"content":"The data represented by the <code>key</code> parameter in the internal hash table of the <code>obj</code> parameter.","nodes":[{"pos":[0,116],"content":"The data represented by the <ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> parameter in the internal hash table of the <ph id=\"ph2\">&lt;code&gt;obj&lt;/code&gt;</ph> parameter.","source":"The data represented by the <code>key</code> parameter in the internal hash table of the <code>obj</code> parameter."}],"pos":[158130,158247],"yaml":true},{"content":"<code>obj</code> is `null`.  \n  \n -or-  \n  \n <code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;obj&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>obj</code> is `null`."},{"pos":[34,38],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[45,72],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[158432,158511],"yaml":true},{"content":"<code>obj</code> is not a COM object.  \n  \n -or-  \n  \n <code>obj</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] object.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;obj&lt;/code&gt;</ph> is not a COM object.","source":"<code>obj</code> is not a COM object."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,122],"content":"<ph id=\"ph1\">&lt;code&gt;obj&lt;/code&gt;</ph> is a <ph id=\"ph2\">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> object.","source":"<code>obj</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] object."}],"pos":[158605,158734],"yaml":true},{"content":"Retrieves the virtual function table (v-table or VTBL) slot for a specified <xref href=\"System.Reflection.MemberInfo\"></xref> type when that type is exposed to COM.","nodes":[{"pos":[0,164],"content":"Retrieves the virtual function table (v-table or VTBL) slot for a specified <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> type when that type is exposed to COM.","source":"Retrieves the virtual function table (v-table or VTBL) slot for a specified <xref href=\"System.Reflection.MemberInfo\"></xref> type when that type is exposed to COM."}],"pos":[159983,160148],"yaml":true},{"content":"The zero-based slot number returned by this method accounts for three [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) and possibly four [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) methods, making the value of the first available slot either 3 or 7. <xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=fullName>.  \n  \n You can use this method to retrieve slot numbers for members of interfaces that are not visible from COM and for members of private interfaces. The slot numbers returned correspond to the v-table numbers that would be reserved if the type was exposed to COM. COM-invisible members actually occupy a slot in an exposed v-table, even though the COM client cannot use the slot. You cannot use <xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A> on a class interface by passing <xref:System.Reflection.MemberInfo> from a class. For additional information, see [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024).","nodes":[{"pos":[0,507],"content":"The zero-based slot number returned by this method accounts for three [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) and possibly four [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) methods, making the value of the first available slot either 3 or 7. <xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=fullName>.","nodes":[{"content":"The zero-based slot number returned by this method accounts for three <bpt id=\"p1\">[</bpt>IUnknown<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148003)</ept> and possibly four <bpt id=\"p2\">[</bpt>IDispatch<ept id=\"p2\">](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5)</ept> methods, making the value of the first available slot either 3 or 7.","pos":[0,296],"source":"The zero-based slot number returned by this method accounts for three [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) and possibly four [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) methods, making the value of the first available slot either 3 or 7."},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A&gt;</ph> provides the opposite functionality of <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=fullName&gt;</ph>.","pos":[297,507],"source":" <xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=fullName>."}]},{"pos":[514,1195],"content":"You can use this method to retrieve slot numbers for members of interfaces that are not visible from COM and for members of private interfaces. The slot numbers returned correspond to the v-table numbers that would be reserved if the type was exposed to COM. COM-invisible members actually occupy a slot in an exposed v-table, even though the COM client cannot use the slot. You cannot use <xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A> on a class interface by passing <xref:System.Reflection.MemberInfo> from a class. For additional information, see [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024).","nodes":[{"content":"You can use this method to retrieve slot numbers for members of interfaces that are not visible from COM and for members of private interfaces.","pos":[0,143]},{"content":"The slot numbers returned correspond to the v-table numbers that would be reserved if the type was exposed to COM.","pos":[144,258]},{"content":"COM-invisible members actually occupy a slot in an exposed v-table, even though the COM client cannot use the slot.","pos":[259,374]},{"content":"You cannot use <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A&gt;</ph> on a class interface by passing <ph id=\"ph2\">&lt;xref:System.Reflection.MemberInfo&gt;</ph> from a class.","pos":[375,544],"source":" You cannot use <xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A> on a class interface by passing <xref:System.Reflection.MemberInfo> from a class."},{"content":"For additional information, see <bpt id=\"p1\">[</bpt>Introducing the Class Interface<ept id=\"p1\">](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024)</ept>.","pos":[545,681],"source":" For additional information, see [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024)."}]}],"pos":[160159,161359],"yaml":true,"extradata":"MT"},{"content":"An object that represents an interface method.","nodes":[{"pos":[0,46],"content":"An object that represents an interface method.","nodes":[{"content":"An object that represents an interface method.","pos":[0,46]}]}],"pos":[161546,161593],"yaml":true},{"content":"The VTBL slot <code>m</code> identifier when it is exposed to COM.","nodes":[{"pos":[0,66],"content":"The VTBL slot <ph id=\"ph1\">&lt;code&gt;m&lt;/code&gt;</ph> identifier when it is exposed to COM.","source":"The VTBL slot <code>m</code> identifier when it is exposed to COM."}],"pos":[161649,161716],"yaml":true},{"content":"The <code>m</code> parameter is `null`.","nodes":[{"pos":[0,39],"content":"The <ph id=\"ph1\">&lt;code&gt;m&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>m</code> parameter is `null`."}],"pos":[161908,161948],"yaml":true},{"content":"The <code>m</code> parameter is not a <xref href=\"System.Reflection.MemberInfo\"></xref> object.  \n  \n -or-  \n  \n The <code>m</code> parameter is not an interface method.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;code&gt;m&lt;/code&gt;</ph> parameter is not a <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> object.","source":"The <code>m</code> parameter is not a <xref href=\"System.Reflection.MemberInfo\"></xref> object."},{"pos":[102,106],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[113,169],"content":"The <ph id=\"ph1\">&lt;code&gt;m&lt;/code&gt;</ph> parameter is not an interface method.","source":"The <code>m</code> parameter is not an interface method."}],"pos":[162042,162220],"yaml":true},{"content":"Converts an unmanaged function pointer to a delegate.","nodes":[{"pos":[0,53],"content":"Converts an unmanaged function pointer to a delegate.","nodes":[{"content":"Converts an unmanaged function pointer to a delegate.","pos":[0,53]}]}],"pos":[163521,163575],"yaml":true},{"content":"In versions 1.0 and 1.1 of the .NET Framework, it was possible to pass a delegate representing a managed method to unmanaged code as a function pointer, allowing the unmanaged code to call the managed method through the function pointer. It was also possible for the unmanaged code to pass that function pointer back to the managed code, and the pointer was resolved properly to the underlying managed method.  \n  \n In the .NET Framework 2.0 and later versions, you can use the <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A> and <xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%2A> methods to marshal delegates in both directions. With <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A>, `ptr` is imported as a <xref:System.IntPtr?displayProperty=fullName>. A <xref:System.IntPtr?displayProperty=fullName> can be obtained for a managed delegate by calling <xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%2A> and passed as a parameter; it can then be called from inside the unmanaged method. Note that the parameter marshaler can also marshal function pointers to delegates in the .NET Framework 2.0 and later versions.  \n  \n The <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A> method has the following restrictions:  \n  \n-   Generics are not supported in interop scenarios.  \n  \n-   You cannot pass an invalid function pointer to this method.  \n  \n-   You can use this method only for pure unmanaged function pointers.  \n  \n-   You cannot use this method with function pointers obtained through C++ or from the <xref:System.RuntimeMethodHandle.GetFunctionPointer%2A> method.  \n  \n-   You cannot use this method to create a delegate from a function pointer to another managed delegate.","nodes":[{"pos":[0,409],"content":"In versions 1.0 and 1.1 of the .NET Framework, it was possible to pass a delegate representing a managed method to unmanaged code as a function pointer, allowing the unmanaged code to call the managed method through the function pointer. It was also possible for the unmanaged code to pass that function pointer back to the managed code, and the pointer was resolved properly to the underlying managed method.","nodes":[{"content":"In versions 1.0 and 1.1 of the .NET Framework, it was possible to pass a delegate representing a managed method to unmanaged code as a function pointer, allowing the unmanaged code to call the managed method through the function pointer. It was also possible for the unmanaged code to pass that function pointer back to the managed code, and the pointer was resolved properly to the underlying managed method.","pos":[0,409],"nodes":[{"content":"In versions 1.0 and 1.1 of the .NET Framework, it was possible to pass a delegate representing a managed method to unmanaged code as a function pointer, allowing the unmanaged code to call the managed method through the function pointer.","pos":[0,237]},{"content":"It was also possible for the unmanaged code to pass that function pointer back to the managed code, and the pointer was resolved properly to the underlying managed method.","pos":[238,409]}]}]},{"pos":[416,1231],"content":"In the .NET Framework 2.0 and later versions, you can use the <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A> and <xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%2A> methods to marshal delegates in both directions. With <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A>, `ptr` is imported as a <xref:System.IntPtr?displayProperty=fullName>. A <xref:System.IntPtr?displayProperty=fullName> can be obtained for a managed delegate by calling <xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%2A> and passed as a parameter; it can then be called from inside the unmanaged method. Note that the parameter marshaler can also marshal function pointers to delegates in the .NET Framework 2.0 and later versions.","nodes":[{"content":"In the .NET Framework 2.0 and later versions, you can use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%2A&gt;</ph> methods to marshal delegates in both directions.","pos":[0,272],"source":"In the .NET Framework 2.0 and later versions, you can use the <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A> and <xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%2A> methods to marshal delegates in both directions."},{"content":"With <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A&gt;</ph>, <ph id=\"ph2\">`ptr`</ph> is imported as a <ph id=\"ph3\">&lt;xref:System.IntPtr?displayProperty=fullName&gt;</ph>.","pos":[273,427],"source":" With <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A>, `ptr` is imported as a <xref:System.IntPtr?displayProperty=fullName>."},{"content":"A <ph id=\"ph1\">&lt;xref:System.IntPtr?displayProperty=fullName&gt;</ph> can be obtained for a managed delegate by calling <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%2A&gt;</ph> and passed as a parameter; it can then be called from inside the unmanaged method.","pos":[428,687],"source":" A <xref:System.IntPtr?displayProperty=fullName> can be obtained for a managed delegate by calling <xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%2A> and passed as a parameter; it can then be called from inside the unmanaged method."},{"content":"Note that the parameter marshaler can also marshal function pointers to delegates in the .NET Framework 2.0 and later versions.","pos":[688,815]}]},{"pos":[1238,1359],"content":"The <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A> method has the following restrictions:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A&gt;</ph> method has the following restrictions:","pos":[0,121],"source":"The <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A> method has the following restrictions:"}]},{"pos":[1369,1417],"content":"Generics are not supported in interop scenarios.","nodes":[{"content":"Generics are not supported in interop scenarios.","pos":[0,48]}]},{"pos":[1427,1486],"content":"You cannot pass an invalid function pointer to this method.","nodes":[{"content":"You cannot pass an invalid function pointer to this method.","pos":[0,59]}]},{"pos":[1496,1562],"content":"You can use this method only for pure unmanaged function pointers.","nodes":[{"content":"You can use this method only for pure unmanaged function pointers.","pos":[0,66]}]},{"pos":[1572,1718],"content":"You cannot use this method with function pointers obtained through C++ or from the <xref:System.RuntimeMethodHandle.GetFunctionPointer%2A> method.","nodes":[{"content":"You cannot use this method with function pointers obtained through C++ or from the <ph id=\"ph1\">&lt;xref:System.RuntimeMethodHandle.GetFunctionPointer%2A&gt;</ph> method.","pos":[0,146],"source":"You cannot use this method with function pointers obtained through C++ or from the <xref:System.RuntimeMethodHandle.GetFunctionPointer%2A> method."}]},{"pos":[1728,1828],"content":"You cannot use this method to create a delegate from a function pointer to another managed delegate.","nodes":[{"content":"You cannot use this method to create a delegate from a function pointer to another managed delegate.","pos":[0,100]}]}],"pos":[163586,165431],"yaml":true,"extradata":"MT"},{"content":"The unmanaged function pointer to be converted.","nodes":[{"pos":[0,47],"content":"The unmanaged function pointer to be converted.","nodes":[{"content":"The unmanaged function pointer to be converted.","pos":[0,47]}]}],"pos":[165604,165652],"yaml":true},{"content":"The type of the delegate to be returned.","nodes":[{"pos":[0,40],"content":"The type of the delegate to be returned.","nodes":[{"content":"The type of the delegate to be returned.","pos":[0,40]}]}],"pos":[165707,165748],"yaml":true},{"content":"A delegate instance that can be cast to the appropriate delegate type.","nodes":[{"pos":[0,70],"content":"A delegate instance that can be cast to the appropriate delegate type.","nodes":[{"content":"A delegate instance that can be cast to the appropriate delegate type.","pos":[0,70]}]}],"pos":[165807,165878],"yaml":true},{"content":"The <code>t</code> parameter is not a delegate or is generic.","nodes":[{"pos":[0,61],"content":"The <ph id=\"ph1\">&lt;code&gt;t&lt;/code&gt;</ph> parameter is not a delegate or is generic.","source":"The <code>t</code> parameter is not a delegate or is generic."}],"pos":[166068,166130],"yaml":true},{"content":"The <code>ptr</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>t</code> parameter is `null`.","nodes":[{"pos":[0,41],"content":"The <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>ptr</code> parameter is `null`."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,98],"content":"The <ph id=\"ph1\">&lt;code&gt;t&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>t</code> parameter is `null`."}],"pos":[166232,166337],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Converts an unmanaged function pointer to a delegate of a specified type.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,138],"content":"Converts an unmanaged function pointer to a delegate of a specified type.","nodes":[{"content":"Converts an unmanaged function pointer to a delegate of a specified type.","pos":[0,73]}]}],"pos":[168042,168185],"yaml":true},{"content":"You can use the<xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%60%601%28System.IntPtr%29> and<xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%60%601%28%60%600%29>methods to marshal delegates in both directions.  \n  \n The<xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%60%601%28System.IntPtr%29> method has the following restrictions:  \n  \n-   You cannot pass an invalid function pointer to this method.  \n  \n-   You can use this method only for pure unmanaged function pointers.  \n  \n-   You cannot use this method with function pointers obtained through C++ or from the <xref:System.RuntimeMethodHandle.GetFunctionPointer%2A> method.  \n  \n-   You cannot use this method to create a delegate from a function pointer to another managed delegate.","nodes":[{"pos":[0,263],"content":"You can use the<xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%60%601%28System.IntPtr%29> and<xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%60%601%28%60%600%29>methods to marshal delegates in both directions.","nodes":[{"content":"You can use the<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%60%601%28System.IntPtr%29&gt;</ph> and<ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%60%601%28%60%600%29&gt;</ph>methods to marshal delegates in both directions.","pos":[0,263],"source":"You can use the<xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%60%601%28System.IntPtr%29> and<xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%60%601%28%60%600%29>methods to marshal delegates in both directions."}]},{"pos":[270,413],"content":"The<xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%60%601%28System.IntPtr%29> method has the following restrictions:","nodes":[{"content":"The<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%60%601%28System.IntPtr%29&gt;</ph> method has the following restrictions:","pos":[0,143],"source":"The<xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%60%601%28System.IntPtr%29> method has the following restrictions:"}]},{"pos":[423,482],"content":"You cannot pass an invalid function pointer to this method.","nodes":[{"content":"You cannot pass an invalid function pointer to this method.","pos":[0,59]}]},{"pos":[492,558],"content":"You can use this method only for pure unmanaged function pointers.","nodes":[{"content":"You can use this method only for pure unmanaged function pointers.","pos":[0,66]}]},{"pos":[568,714],"content":"You cannot use this method with function pointers obtained through C++ or from the <xref:System.RuntimeMethodHandle.GetFunctionPointer%2A> method.","nodes":[{"content":"You cannot use this method with function pointers obtained through C++ or from the <ph id=\"ph1\">&lt;xref:System.RuntimeMethodHandle.GetFunctionPointer%2A&gt;</ph> method.","pos":[0,146],"source":"You cannot use this method with function pointers obtained through C++ or from the <xref:System.RuntimeMethodHandle.GetFunctionPointer%2A> method."}]},{"pos":[724,824],"content":"You cannot use this method to create a delegate from a function pointer to another managed delegate.","nodes":[{"content":"You cannot use this method to create a delegate from a function pointer to another managed delegate.","pos":[0,100]}]}],"pos":[168196,169033],"yaml":true,"extradata":"MT"},{"content":"The unmanaged function pointer to convert.","nodes":[{"pos":[0,42],"content":"The unmanaged function pointer to convert.","nodes":[{"content":"The unmanaged function pointer to convert.","pos":[0,42]}]}],"pos":[169210,169253],"yaml":true},{"content":"The type of the delegate to return.","nodes":[{"pos":[0,35],"content":"The type of the delegate to return.","nodes":[{"content":"The type of the delegate to return.","pos":[0,35]}]}],"pos":[169312,169348],"yaml":true},{"content":"A instance of the specified delegate type.","nodes":[{"pos":[0,42],"content":"A instance of the specified delegate type.","nodes":[{"content":"A instance of the specified delegate type.","pos":[0,42]}]}],"pos":[169401,169444],"yaml":true},{"content":"The <code>TDelegate</code> generic parameter is not a delegate, or it is an open generic type.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">&lt;code&gt;TDelegate&lt;/code&gt;</ph> generic parameter is not a delegate, or it is an open generic type.","source":"The <code>TDelegate</code> generic parameter is not a delegate, or it is an open generic type."}],"pos":[169637,169732],"yaml":true},{"content":"The <code>ptr</code> parameter is `null`.","nodes":[{"pos":[0,41],"content":"The <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>ptr</code> parameter is `null`."}],"pos":[169834,169876],"yaml":true},{"content":"Retrieves the last slot in the virtual function table (v-table or VTBL) of a type when exposed to COM.","nodes":[{"pos":[0,102],"content":"Retrieves the last slot in the virtual function table (v-table or VTBL) of a type when exposed to COM.","nodes":[{"content":"Retrieves the last slot in the virtual function table (v-table or VTBL) of a type when exposed to COM.","pos":[0,102]}]}],"pos":[171298,171401],"yaml":true},{"content":"This method returns the zero-based, v-table number for an interface or a class. When used on a class, the slot number returned refers to the class interface for the class. If the class interface is auto-dual, this method always returns -1 to indicate that the dispatch-only interface does not expose a v-table to managed clients. You can use <xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A> and <xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A?displayProperty=fullName> in conjunction with <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=fullName> to pass slots within a specified range. For additional information, see [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024).","nodes":[{"pos":[0,793],"content":"This method returns the zero-based, v-table number for an interface or a class. When used on a class, the slot number returned refers to the class interface for the class. If the class interface is auto-dual, this method always returns -1 to indicate that the dispatch-only interface does not expose a v-table to managed clients. You can use <xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A> and <xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A?displayProperty=fullName> in conjunction with <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=fullName> to pass slots within a specified range. For additional information, see [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024).","nodes":[{"content":"This method returns the zero-based, v-table number for an interface or a class.","pos":[0,79]},{"content":"When used on a class, the slot number returned refers to the class interface for the class.","pos":[80,171]},{"content":"If the class interface is auto-dual, this method always returns -1 to indicate that the dispatch-only interface does not expose a v-table to managed clients.","pos":[172,329]},{"content":"You can use <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A?displayProperty=fullName&gt;</ph> in conjunction with <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=fullName&gt;</ph> to pass slots within a specified range.","pos":[330,656],"source":" You can use <xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A> and <xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A?displayProperty=fullName> in conjunction with <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=fullName> to pass slots within a specified range."},{"content":"For additional information, see <bpt id=\"p1\">[</bpt>Introducing the Class Interface<ept id=\"p1\">](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024)</ept>.","pos":[657,793],"source":" For additional information, see [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024)."}]}],"pos":[171412,172206],"yaml":true,"extradata":"MT"},{"content":"A type that represents an interface or class.","nodes":[{"pos":[0,45],"content":"A type that represents an interface or class.","nodes":[{"content":"A type that represents an interface or class.","pos":[0,45]}]}],"pos":[172342,172388],"yaml":true},{"content":"The last VTBL slot of the interface when exposed to COM. If the <code>t</code> parameter is a class, the returned VTBL slot is the last slot in the interface that is generated from the class.","nodes":[{"pos":[0,191],"content":"The last VTBL slot of the interface when exposed to COM. If the <code>t</code> parameter is a class, the returned VTBL slot is the last slot in the interface that is generated from the class.","nodes":[{"content":"The last VTBL slot of the interface when exposed to COM.","pos":[0,56]},{"content":"If the <ph id=\"ph1\">&lt;code&gt;t&lt;/code&gt;</ph> parameter is a class, the returned VTBL slot is the last slot in the interface that is generated from the class.","pos":[57,191],"source":" If the <code>t</code> parameter is a class, the returned VTBL slot is the last slot in the interface that is generated from the class."}]}],"pos":[172444,172636],"yaml":true},{"content":"Retrieves a code that identifies the type of the exception that occurred.","nodes":[{"pos":[0,73],"content":"Retrieves a code that identifies the type of the exception that occurred.","nodes":[{"content":"Retrieves a code that identifies the type of the exception that occurred.","pos":[0,73]}]}],"pos":[173825,173899],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.GetExceptionCode%2A> is exposed for compiler support of structured exception handling (SEH) only. If this method is called before an exception is thrown, it returns 0x0.","nodes":[{"pos":[0,214],"content":"<xref:System.Runtime.InteropServices.Marshal.GetExceptionCode%2A> is exposed for compiler support of structured exception handling (SEH) only. If this method is called before an exception is thrown, it returns 0x0.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.GetExceptionCode%2A> is exposed for compiler support of structured exception handling (SEH) only. If this method is called before an exception is thrown, it returns 0x0.","pos":[0,214],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetExceptionCode%2A&gt;</ph> is exposed for compiler support of structured exception handling (SEH) only.","pos":[0,142],"source":"<xref:System.Runtime.InteropServices.Marshal.GetExceptionCode%2A> is exposed for compiler support of structured exception handling (SEH) only."},{"content":"If this method is called before an exception is thrown, it returns 0x0.","pos":[143,214]}]}]}],"pos":[173910,174125],"yaml":true,"extradata":"MT"},{"content":"The type of the exception.","nodes":[{"pos":[0,26],"content":"The type of the exception.","nodes":[{"content":"The type of the exception.","pos":[0,26]}]}],"pos":[174262,174289],"yaml":true},{"content":"Converts the specified HRESULT error code to a corresponding <xref href=\"System.Exception\"></xref> object.","nodes":[{"pos":[0,106],"content":"Converts the specified HRESULT error code to a corresponding <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> object.","source":"Converts the specified HRESULT error code to a corresponding <xref href=\"System.Exception\"></xref> object."}],"pos":[175960,176067],"yaml":true},{"content":"Use the <xref:System.Runtime.InteropServices.Marshal.GetExceptionForHR%2A> method to get an <xref:System.Exception> based on an HRESULT without having to call the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method and catch the exception.  \n  \n The current [IErrorInfo](http://msdn.microsoft.com/en-us/4dda6909-2d9a-4727-ae0c-b5f90dcfa447) interface is used to construct the exception.  \n  \n For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md).","nodes":[{"pos":[0,263],"content":"Use the <xref:System.Runtime.InteropServices.Marshal.GetExceptionForHR%2A> method to get an <xref:System.Exception> based on an HRESULT without having to call the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method and catch the exception.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetExceptionForHR%2A&gt;</ph> method to get an <ph id=\"ph2\">&lt;xref:System.Exception&gt;</ph> based on an HRESULT without having to call the <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A&gt;</ph> method and catch the exception.","pos":[0,263],"source":"Use the <xref:System.Runtime.InteropServices.Marshal.GetExceptionForHR%2A> method to get an <xref:System.Exception> based on an HRESULT without having to call the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method and catch the exception."}]},{"pos":[270,410],"content":"The current <bpt id=\"p1\">[</bpt>IErrorInfo<ept id=\"p1\">](http://msdn.microsoft.com/en-us/4dda6909-2d9a-4727-ae0c-b5f90dcfa447)</ept> interface is used to construct the exception.","source":"The current [IErrorInfo](http://msdn.microsoft.com/en-us/4dda6909-2d9a-4727-ae0c-b5f90dcfa447) interface is used to construct the exception."},{"pos":[417,614],"content":"For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see <bpt id=\"p1\">[</bpt>How to: Map HRESULTs and Exceptions<ept id=\"p1\">](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)</ept>.","source":"For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)."}],"pos":[176078,176699],"yaml":true,"extradata":"MT"},{"content":"The HRESULT to be converted.","nodes":[{"pos":[0,28],"content":"The HRESULT to be converted.","nodes":[{"content":"The HRESULT to be converted.","pos":[0,28]}]}],"pos":[176861,176890],"yaml":true},{"content":"An object that represents the converted HRESULT.","nodes":[{"pos":[0,48],"content":"An object that represents the converted HRESULT.","nodes":[{"content":"An object that represents the converted HRESULT.","pos":[0,48]}]}],"pos":[176950,176999],"yaml":true},{"content":"Converts the specified HRESULT error code to a corresponding <xref href=\"System.Exception\"></xref> object, with additional error information passed in an [IErrorInfo](http://msdn.microsoft.com/en-us/4dda6909-2d9a-4727-ae0c-b5f90dcfa447) interface for the exception object.","nodes":[{"pos":[0,272],"content":"Converts the specified HRESULT error code to a corresponding <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> object, with additional error information passed in an <bpt id=\"p1\">[</bpt>IErrorInfo<ept id=\"p1\">](http://msdn.microsoft.com/en-us/4dda6909-2d9a-4727-ae0c-b5f90dcfa447)</ept> interface for the exception object.","source":"Converts the specified HRESULT error code to a corresponding <xref href=\"System.Exception\"></xref> object, with additional error information passed in an [IErrorInfo](http://msdn.microsoft.com/en-us/4dda6909-2d9a-4727-ae0c-b5f90dcfa447) interface for the exception object."}],"pos":[178737,179010],"yaml":true},{"content":"Use the <xref:System.Runtime.InteropServices.Marshal.GetExceptionForHR%2A> method to get an <xref:System.Exception> based on an HRESULT without having to call the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method and catch the exception (thus avoiding the corresponding performance overhead). The `errorInfo` parameter supplies additional information about the error, such as its textual description and the globally unique identifier (GUID) for the interface that defined the error.  \n  \n Use this method overload if you have custom error information that you have to supply in the conversion.  \n  \n For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md).","nodes":[{"pos":[0,509],"content":"Use the <xref:System.Runtime.InteropServices.Marshal.GetExceptionForHR%2A> method to get an <xref:System.Exception> based on an HRESULT without having to call the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method and catch the exception (thus avoiding the corresponding performance overhead). The `errorInfo` parameter supplies additional information about the error, such as its textual description and the globally unique identifier (GUID) for the interface that defined the error.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetExceptionForHR%2A&gt;</ph> method to get an <ph id=\"ph2\">&lt;xref:System.Exception&gt;</ph> based on an HRESULT without having to call the <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A&gt;</ph> method and catch the exception (thus avoiding the corresponding performance overhead).","pos":[0,318],"source":"Use the <xref:System.Runtime.InteropServices.Marshal.GetExceptionForHR%2A> method to get an <xref:System.Exception> based on an HRESULT without having to call the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method and catch the exception (thus avoiding the corresponding performance overhead)."},{"content":"The <ph id=\"ph1\">`errorInfo`</ph> parameter supplies additional information about the error, such as its textual description and the globally unique identifier (GUID) for the interface that defined the error.","pos":[319,509],"source":" The `errorInfo` parameter supplies additional information about the error, such as its textual description and the globally unique identifier (GUID) for the interface that defined the error."}]},{"pos":[516,620],"content":"Use this method overload if you have custom error information that you have to supply in the conversion.","nodes":[{"content":"Use this method overload if you have custom error information that you have to supply in the conversion.","pos":[0,104]}]},{"pos":[627,824],"content":"For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see <bpt id=\"p1\">[</bpt>How to: Map HRESULTs and Exceptions<ept id=\"p1\">](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)</ept>.","source":"For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)."}],"pos":[179021,179852],"yaml":true,"extradata":"MT"},{"content":"The HRESULT to be converted.","nodes":[{"pos":[0,28],"content":"The HRESULT to be converted.","nodes":[{"content":"The HRESULT to be converted.","pos":[0,28]}]}],"pos":[180032,180061],"yaml":true},{"content":"A pointer to the `IErrorInfo` interface that provides more information about the error. You can specify <code>IntPtr(0)</code> to use the current `IErrorInfo` interface, or <code>IntPtr(-1)</code> to ignore the current `IErrorInfo` interface and construct the exception just from the error code.","nodes":[{"pos":[0,295],"content":"A pointer to the `IErrorInfo` interface that provides more information about the error. You can specify <code>IntPtr(0)</code> to use the current `IErrorInfo` interface, or <code>IntPtr(-1)</code> to ignore the current `IErrorInfo` interface and construct the exception just from the error code.","nodes":[{"content":"A pointer to the <ph id=\"ph1\">`IErrorInfo`</ph> interface that provides more information about the error.","pos":[0,87],"source":"A pointer to the `IErrorInfo` interface that provides more information about the error."},{"content":"You can specify <ph id=\"ph1\">&lt;code&gt;IntPtr(0)&lt;/code&gt;</ph> to use the current <ph id=\"ph2\">`IErrorInfo`</ph> interface, or <ph id=\"ph3\">&lt;code&gt;IntPtr(-1)&lt;/code&gt;</ph> to ignore the current <ph id=\"ph4\">`IErrorInfo`</ph> interface and construct the exception just from the error code.","pos":[88,295],"source":" You can specify <code>IntPtr(0)</code> to use the current `IErrorInfo` interface, or <code>IntPtr(-1)</code> to ignore the current `IErrorInfo` interface and construct the exception just from the error code."}]}],"pos":[180126,180422],"yaml":true},{"content":"An object that represents the converted HRESULT and information obtained from <code>errorInfo</code>.","nodes":[{"pos":[0,101],"content":"An object that represents the converted HRESULT and information obtained from <ph id=\"ph1\">&lt;code&gt;errorInfo&lt;/code&gt;</ph>.","source":"An object that represents the converted HRESULT and information obtained from <code>errorInfo</code>."}],"pos":[180482,180584],"yaml":true},{"content":"Retrieves a computer-independent description of an exception, and information about the state that existed for the thread when the exception occurred.","nodes":[{"pos":[0,150],"content":"Retrieves a computer-independent description of an exception, and information about the state that existed for the thread when the exception occurred.","nodes":[{"content":"Retrieves a computer-independent description of an exception, and information about the state that existed for the thread when the exception occurred.","pos":[0,150]}]}],"pos":[182166,182317],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.GetExceptionPointers%2A> is exposed for compiler support of structured exception handling (SEH) only.","nodes":[{"pos":[0,146],"content":"<xref:System.Runtime.InteropServices.Marshal.GetExceptionPointers%2A> is exposed for compiler support of structured exception handling (SEH) only.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetExceptionPointers%2A&gt;</ph> is exposed for compiler support of structured exception handling (SEH) only.","pos":[0,146],"source":"<xref:System.Runtime.InteropServices.Marshal.GetExceptionPointers%2A> is exposed for compiler support of structured exception handling (SEH) only."}]}],"pos":[182328,182475],"yaml":true,"extradata":"MT"},{"content":"A pointer to an [EXCEPTION_POINTERS](http://go.microsoft.com/fwlink/?LinkId=148648) structure.","nodes":[{"pos":[0,94],"content":"A pointer to an <bpt id=\"p1\">[</bpt>EXCEPTION_POINTERS<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148648)</ept> structure.","source":"A pointer to an [EXCEPTION_POINTERS](http://go.microsoft.com/fwlink/?LinkId=148648) structure."}],"pos":[182686,182781],"yaml":true},{"content":"Converts a delegate into a function pointer that is callable from unmanaged code.","nodes":[{"pos":[0,81],"content":"Converts a delegate into a function pointer that is callable from unmanaged code.","nodes":[{"content":"Converts a delegate into a function pointer that is callable from unmanaged code.","pos":[0,81]}]}],"pos":[184205,184287],"yaml":true},{"content":"The delegate `d` is converted to a function pointer that can be passed to unmanaged code using the [__stdcall](http://msdn.microsoft.com/library/e212594b-1827-4d07-9527-7d412b300df8) calling convention.  \n  \n You must manually keep the delegate from being collected by the garbage collector from managed code. The garbage collector does not track references to unmanaged code.","nodes":[{"pos":[0,202],"content":"The delegate <ph id=\"ph1\">`d`</ph> is converted to a function pointer that can be passed to unmanaged code using the <bpt id=\"p1\">[</bpt>__stdcall<ept id=\"p1\">](http://msdn.microsoft.com/library/e212594b-1827-4d07-9527-7d412b300df8)</ept> calling convention.","source":"The delegate `d` is converted to a function pointer that can be passed to unmanaged code using the [__stdcall](http://msdn.microsoft.com/library/e212594b-1827-4d07-9527-7d412b300df8) calling convention."},{"pos":[209,376],"content":"You must manually keep the delegate from being collected by the garbage collector from managed code. The garbage collector does not track references to unmanaged code.","nodes":[{"content":"You must manually keep the delegate from being collected by the garbage collector from managed code. The garbage collector does not track references to unmanaged code.","pos":[0,167],"nodes":[{"content":"You must manually keep the delegate from being collected by the garbage collector from managed code.","pos":[0,100]},{"content":"The garbage collector does not track references to unmanaged code.","pos":[101,167]}]}]}],"pos":[184298,184679],"yaml":true,"extradata":"MT"},{"content":"The delegate to be passed to unmanaged code.","nodes":[{"pos":[0,44],"content":"The delegate to be passed to unmanaged code.","nodes":[{"content":"The delegate to be passed to unmanaged code.","pos":[0,44]}]}],"pos":[184842,184887],"yaml":true},{"content":"A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.","nodes":[{"pos":[0,113],"content":"A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.","nodes":[{"content":"A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.","pos":[0,113]}]}],"pos":[184944,185058],"yaml":true},{"content":"The <code>d</code> parameter is a generic type.","nodes":[{"pos":[0,47],"content":"The <ph id=\"ph1\">&lt;code&gt;d&lt;/code&gt;</ph> parameter is a generic type.","source":"The <code>d</code> parameter is a generic type."}],"pos":[185248,185296],"yaml":true},{"content":"The <code>d</code> parameter is `null`.","nodes":[{"pos":[0,39],"content":"The <ph id=\"ph1\">&lt;code&gt;d&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>d</code> parameter is `null`."}],"pos":[185398,185438],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Converts a delegate of a specified type to a function pointer that is callable from unmanaged code.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,164],"content":"Converts a delegate of a specified type to a function pointer that is callable from unmanaged code.","nodes":[{"content":"Converts a delegate of a specified type to a function pointer that is callable from unmanaged code.","pos":[0,99]}]}],"pos":[187122,187291],"yaml":true},{"content":"The delegate `d` is converted to a function pointer that can be passed to unmanaged code by using the [__stdcall](http://msdn.microsoft.com/library/e212594b-1827-4d07-9527-7d412b300df8) calling convention.  \n  \n You must manually keep the delegate from being collected by the garbage collector from managed code. The garbage collector does not track references to unmanaged code.","nodes":[{"pos":[0,205],"content":"The delegate <ph id=\"ph1\">`d`</ph> is converted to a function pointer that can be passed to unmanaged code by using the <bpt id=\"p1\">[</bpt>__stdcall<ept id=\"p1\">](http://msdn.microsoft.com/library/e212594b-1827-4d07-9527-7d412b300df8)</ept> calling convention.","source":"The delegate `d` is converted to a function pointer that can be passed to unmanaged code by using the [__stdcall](http://msdn.microsoft.com/library/e212594b-1827-4d07-9527-7d412b300df8) calling convention."},{"pos":[212,379],"content":"You must manually keep the delegate from being collected by the garbage collector from managed code. The garbage collector does not track references to unmanaged code.","nodes":[{"content":"You must manually keep the delegate from being collected by the garbage collector from managed code. The garbage collector does not track references to unmanaged code.","pos":[0,167],"nodes":[{"content":"You must manually keep the delegate from being collected by the garbage collector from managed code.","pos":[0,100]},{"content":"The garbage collector does not track references to unmanaged code.","pos":[101,167]}]}]}],"pos":[187302,187686],"yaml":true,"extradata":"MT"},{"content":"The delegate to be passed to unmanaged code.","nodes":[{"pos":[0,44],"content":"The delegate to be passed to unmanaged code.","nodes":[{"content":"The delegate to be passed to unmanaged code.","pos":[0,44]}]}],"pos":[187855,187900],"yaml":true},{"content":"The type of delegate to convert.","nodes":[{"pos":[0,32],"content":"The type of delegate to convert.","nodes":[{"content":"The type of delegate to convert.","pos":[0,32]}]}],"pos":[187959,187992],"yaml":true},{"content":"A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.","nodes":[{"pos":[0,113],"content":"A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.","nodes":[{"content":"A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.","pos":[0,113]}]}],"pos":[188049,188163],"yaml":true},{"content":"The <code>d</code> parameter is `null`.","nodes":[{"pos":[0,39],"content":"The <ph id=\"ph1\">&lt;code&gt;d&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>d</code> parameter is `null`."}],"pos":[188364,188404],"yaml":true},{"content":"Returns the instance handle (HINSTANCE) for the specified module.","nodes":[{"pos":[0,65],"content":"Returns the instance handle (HINSTANCE) for the specified module.","nodes":[{"content":"Returns the instance handle (HINSTANCE) for the specified module.","pos":[0,65]}]}],"pos":[189900,189966],"yaml":true},{"content":"When dynamic or in-memory, modules do not have an HINSTANCE.","nodes":[{"pos":[0,60],"content":"When dynamic or in-memory, modules do not have an HINSTANCE.","nodes":[{"content":"When dynamic or in-memory, modules do not have an HINSTANCE.","pos":[0,60]}]}],"pos":[189977,190038],"yaml":true,"extradata":"MT"},{"content":"The module whose HINSTANCE is desired.","nodes":[{"pos":[0,38],"content":"The module whose HINSTANCE is desired.","nodes":[{"content":"The module whose HINSTANCE is desired.","pos":[0,38]}]}],"pos":[190209,190248],"yaml":true},{"content":"The HINSTANCE for <code>m</code>; or -1 if the module does not have an HINSTANCE.","nodes":[{"pos":[0,81],"content":"The HINSTANCE for <ph id=\"ph1\">&lt;code&gt;m&lt;/code&gt;</ph>; or -1 if the module does not have an HINSTANCE.","source":"The HINSTANCE for <code>m</code>; or -1 if the module does not have an HINSTANCE."}],"pos":[190305,190387],"yaml":true},{"content":"The <code>m</code> parameter is `null`.","nodes":[{"pos":[0,39],"content":"The <ph id=\"ph1\">&lt;code&gt;m&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>m</code> parameter is `null`."}],"pos":[190568,190608],"yaml":true},{"content":"Converts the specified exception to an HRESULT.","nodes":[{"pos":[0,47],"content":"Converts the specified exception to an HRESULT.","nodes":[{"content":"Converts the specified exception to an HRESULT.","pos":[0,47]}]}],"pos":[191833,191881],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A> also sets up an [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface for the exception that can be obtained by calling the COM GetErrorInfoNEEDGUID function. You can use this function to return an HRESULT value on a managed class implementation of a COM interface where you apply the <xref:System.Runtime.InteropServices.PreserveSigAttribute> attribute. Have the attributed method catch all exceptions and use the <xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A> method to return the appropriate HRESULT value. Allowing an exception to propagate outside the method produces incorrect behavior. (In fact, the common language runtime fails to pass an exception to a COM client that calls such a method through a v-table.)  \n  \n Note that the <xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A> method sets the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface of the current thread. This can cause unexpected results for methods like the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> methods that default to using the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) of the current thread if it is set.","nodes":[{"pos":[0,835],"content":"<xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A> also sets up an [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface for the exception that can be obtained by calling the COM GetErrorInfoNEEDGUID function. You can use this function to return an HRESULT value on a managed class implementation of a COM interface where you apply the <xref:System.Runtime.InteropServices.PreserveSigAttribute> attribute. Have the attributed method catch all exceptions and use the <xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A> method to return the appropriate HRESULT value. Allowing an exception to propagate outside the method produces incorrect behavior. (In fact, the common language runtime fails to pass an exception to a COM client that calls such a method through a v-table.)","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A&gt;</ph> also sets up an <bpt id=\"p1\">[</bpt>IErrorInfo<ept id=\"p1\">](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx)</ept> interface for the exception that can be obtained by calling the COM GetErrorInfoNEEDGUID function.","pos":[0,255],"source":"<xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A> also sets up an [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface for the exception that can be obtained by calling the COM GetErrorInfoNEEDGUID function."},{"content":"You can use this function to return an HRESULT value on a managed class implementation of a COM interface where you apply the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.PreserveSigAttribute&gt;</ph> attribute.","pos":[256,451],"source":" You can use this function to return an HRESULT value on a managed class implementation of a COM interface where you apply the <xref:System.Runtime.InteropServices.PreserveSigAttribute> attribute."},{"content":"Have the attributed method catch all exceptions and use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A&gt;</ph> method to return the appropriate HRESULT value.","pos":[452,626],"source":" Have the attributed method catch all exceptions and use the <xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A> method to return the appropriate HRESULT value."},{"content":"Allowing an exception to propagate outside the method produces incorrect behavior.","pos":[627,709]},{"content":"(In fact, the common language runtime fails to pass an exception to a COM client that calls such a method through a v-table.)","pos":[710,835]}]},{"pos":[842,1313],"content":"Note that the <xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A> method sets the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface of the current thread. This can cause unexpected results for methods like the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> methods that default to using the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) of the current thread if it is set.","nodes":[{"content":"Note that the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A&gt;</ph> method sets the <bpt id=\"p1\">[</bpt>IErrorInfo<ept id=\"p1\">](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx)</ept> interface of the current thread.","pos":[0,203],"source":"Note that the <xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A> method sets the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface of the current thread."},{"content":"This can cause unexpected results for methods like the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A&gt;</ph> methods that default to using the <bpt id=\"p1\">[</bpt>IErrorInfo<ept id=\"p1\">](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx)</ept> of the current thread if it is set.","pos":[204,471],"source":" This can cause unexpected results for methods like the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> methods that default to using the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) of the current thread if it is set."}]}],"pos":[191892,193216],"yaml":true,"extradata":"MT"},{"content":"The exception to convert to an HRESULT.","nodes":[{"pos":[0,39],"content":"The exception to convert to an HRESULT.","nodes":[{"content":"The exception to convert to an HRESULT.","pos":[0,39]}]}],"pos":[193366,193406],"yaml":true},{"content":"The HRESULT mapped to the supplied exception.","nodes":[{"pos":[0,45],"content":"The HRESULT mapped to the supplied exception.","nodes":[{"content":"The HRESULT mapped to the supplied exception.","pos":[0,45]}]}],"pos":[193462,193508],"yaml":true},{"content":"Returns the HRESULT corresponding to the last error incurred by Win32 code executed using <xref href=\"System.Runtime.InteropServices.Marshal\"></xref>.","nodes":[{"pos":[0,150],"content":"Returns the HRESULT corresponding to the last error incurred by Win32 code executed using <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.Marshal\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the HRESULT corresponding to the last error incurred by Win32 code executed using <xref href=\"System.Runtime.InteropServices.Marshal\"></xref>."}],"pos":[195153,195304],"yaml":true},{"content":"The target function must have had the `setLastError` metadata flag set. For example, the `SetLastError` field of the <xref:System.Runtime.InteropServices.DllImportAttribute?displayProperty=fullName> must be `true`. The process for setting this flag depends on the source language used: C# and C++ are `false` by default, but the `Declare` statement in Visual Basic is `true`.","nodes":[{"pos":[0,375],"content":"The target function must have had the `setLastError` metadata flag set. For example, the `SetLastError` field of the <xref:System.Runtime.InteropServices.DllImportAttribute?displayProperty=fullName> must be `true`. The process for setting this flag depends on the source language used: C# and C++ are `false` by default, but the `Declare` statement in Visual Basic is `true`.","nodes":[{"content":"The target function must have had the <ph id=\"ph1\">`setLastError`</ph> metadata flag set.","pos":[0,71],"source":"The target function must have had the `setLastError` metadata flag set."},{"content":"For example, the <ph id=\"ph1\">`SetLastError`</ph> field of the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute?displayProperty=fullName&gt;</ph> must be <ph id=\"ph3\">`true`</ph>.","pos":[72,214],"source":" For example, the `SetLastError` field of the <xref:System.Runtime.InteropServices.DllImportAttribute?displayProperty=fullName> must be `true`."},{"content":"The process for setting this flag depends on the source language used: C# and C++ are <ph id=\"ph1\">`false`</ph> by default, but the <ph id=\"ph2\">`Declare`</ph> statement in Visual Basic is <ph id=\"ph3\">`true`</ph>.","pos":[215,375],"source":" The process for setting this flag depends on the source language used: C# and C++ are `false` by default, but the `Declare` statement in Visual Basic is `true`."}]}],"pos":[195315,195693],"yaml":true,"extradata":"MT"},{"content":"The HRESULT corresponding to the last Win32 error code.","nodes":[{"pos":[0,55],"content":"The HRESULT corresponding to the last Win32 error code.","nodes":[{"content":"The HRESULT corresponding to the last Win32 error code.","pos":[0,55]}]}],"pos":[196426,196482],"yaml":true},{"content":"Returns an [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) interface from a managed object.","nodes":[{"pos":[0,125],"content":"Returns an <bpt id=\"p1\">[</bpt>IDispatch<ept id=\"p1\">](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5)</ept> interface from a managed object.","source":"Returns an [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) interface from a managed object."}],"pos":[198190,198316],"yaml":true},{"content":"In managed code, you seldom work directly with the `IDispatch` interface. However, <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer.  \n  \n You can also use this method on a managed object to obtain an interface pointer to the COM callable wrapper for the object. For additional information, see [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md).","nodes":[{"pos":[0,580],"content":"In managed code, you seldom work directly with the `IDispatch` interface. However, <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer.","nodes":[{"content":"In managed code, you seldom work directly with the <ph id=\"ph1\">`IDispatch`</ph> interface.","pos":[0,73],"source":"In managed code, you seldom work directly with the `IDispatch` interface."},{"content":"However, <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A&gt;</ph> is useful when calling a method that exposes a COM object parameter as an <ph id=\"ph2\">&lt;xref:System.IntPtr&gt;</ph> type, or with custom marshaling.","pos":[74,281],"source":" However, <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling."},{"content":"Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned.","pos":[282,413]},{"content":"Always use <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName&gt;</ph> to decrement the reference count once you have finished with the pointer.","pos":[414,580],"source":" Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer."}]},{"pos":[587,816],"content":"You can also use this method on a managed object to obtain an interface pointer to the COM callable wrapper for the object. For additional information, see [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md).","nodes":[{"content":"You can also use this method on a managed object to obtain an interface pointer to the COM callable wrapper for the object.","pos":[0,123]},{"content":"For additional information, see <bpt id=\"p1\">[</bpt>COM Callable Wrapper<ept id=\"p1\">](~/docs/framework/interop/com-callable-wrapper.md)</ept>.","pos":[124,229],"source":" For additional information, see [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md)."}]}],"pos":[198327,199148],"yaml":true,"extradata":"MT"},{"content":"The object whose `IDispatch` interface is requested.","nodes":[{"pos":[0,52],"content":"The object whose <ph id=\"ph1\">`IDispatch`</ph> interface is requested.","source":"The object whose `IDispatch` interface is requested."}],"pos":[199299,199352],"yaml":true},{"content":"The `IDispatch` pointer for the <code>o</code> parameter.","nodes":[{"pos":[0,57],"content":"The <ph id=\"ph1\">`IDispatch`</ph> pointer for the <ph id=\"ph2\">&lt;code&gt;o&lt;/code&gt;</ph> parameter.","source":"The `IDispatch` pointer for the <code>o</code> parameter."}],"pos":[199409,199467],"yaml":true},{"content":"<code>o</code> does not support the requested interface.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph> does not support the requested interface.","source":"<code>o</code> does not support the requested interface."}],"pos":[199655,199712],"yaml":true},{"content":"Returns an [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) interface pointer from a managed object, if the caller is in the same context as that object.","nodes":[{"pos":[0,186],"content":"Returns an <bpt id=\"p1\">[</bpt>IDispatch<ept id=\"p1\">](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5)</ept> interface pointer from a managed object, if the caller is in the same context as that object.","source":"Returns an [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) interface pointer from a managed object, if the caller is in the same context as that object."}],"pos":[200946,201133],"yaml":true},{"content":"This method is the same as <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A> except that it returns `null` if the caller is not in the same context as the object.","nodes":[{"pos":[0,183],"content":"This method is the same as <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A&gt;</ph> except that it returns <ph id=\"ph2\">`null`</ph> if the caller is not in the same context as the object.","source":"This method is the same as <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A> except that it returns `null` if the caller is not in the same context as the object."}],"pos":[201144,201328],"yaml":true,"extradata":"MT"},{"content":"The object whose `IDispatch` interface is requested.","nodes":[{"pos":[0,52],"content":"The object whose <ph id=\"ph1\">`IDispatch`</ph> interface is requested.","source":"The object whose `IDispatch` interface is requested."}],"pos":[201488,201541],"yaml":true},{"content":"The `IDispatch` interface pointer for the specified object, or `null` if the caller is not in the same context as the specified object.","nodes":[{"pos":[0,135],"content":"The <ph id=\"ph1\">`IDispatch`</ph> interface pointer for the specified object, or <ph id=\"ph2\">`null`</ph> if the caller is not in the same context as the specified object.","source":"The `IDispatch` interface pointer for the specified object, or `null` if the caller is not in the same context as the specified object."}],"pos":[201598,201734],"yaml":true},{"content":"<code>o</code> does not support the requested interface.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph> does not support the requested interface.","source":"<code>o</code> does not support the requested interface."}],"pos":[201931,201988],"yaml":true},{"content":"<code>o</code> is `null`.","nodes":[{"pos":[0,25],"content":"<ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>o</code> is `null`."}],"pos":[202090,202116],"yaml":true},{"content":"Returns a <xref href=\"System.Runtime.InteropServices.ComTypes.ITypeInfo\"></xref> interface from a managed type.","nodes":[{"pos":[0,111],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.ComTypes.ITypeInfo\"&gt;&lt;/xref&gt;</ph> interface from a managed type.","source":"Returns a <xref href=\"System.Runtime.InteropServices.ComTypes.ITypeInfo\"></xref> interface from a managed type."}],"pos":[203240,203352],"yaml":true},{"content":"This method returns a pointer to an `ITypeInfo` implementation that is based on the original type. Calling an object with <xref:System.Runtime.InteropServices.Marshal.GetITypeInfoForType%2A> causes the reference count to increment on the interface pointer before the pointer is returned. Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer. You can apply the <xref:System.Runtime.InteropServices.MarshalAsAttribute?displayProperty=fullName> to replace standard interop marshaling behavior with this custom marshaler.","nodes":[{"pos":[0,630],"content":"This method returns a pointer to an `ITypeInfo` implementation that is based on the original type. Calling an object with <xref:System.Runtime.InteropServices.Marshal.GetITypeInfoForType%2A> causes the reference count to increment on the interface pointer before the pointer is returned. Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer. You can apply the <xref:System.Runtime.InteropServices.MarshalAsAttribute?displayProperty=fullName> to replace standard interop marshaling behavior with this custom marshaler.","nodes":[{"content":"This method returns a pointer to an <ph id=\"ph1\">`ITypeInfo`</ph> implementation that is based on the original type.","pos":[0,98],"source":"This method returns a pointer to an `ITypeInfo` implementation that is based on the original type."},{"content":"Calling an object with <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetITypeInfoForType%2A&gt;</ph> causes the reference count to increment on the interface pointer before the pointer is returned.","pos":[99,287],"source":" Calling an object with <xref:System.Runtime.InteropServices.Marshal.GetITypeInfoForType%2A> causes the reference count to increment on the interface pointer before the pointer is returned."},{"content":"Always use <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName&gt;</ph> to decrement the reference count once you have finished with the pointer.","pos":[288,454],"source":" Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer."},{"content":"You can apply the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute?displayProperty=fullName&gt;</ph> to replace standard interop marshaling behavior with this custom marshaler.","pos":[455,630],"source":" You can apply the <xref:System.Runtime.InteropServices.MarshalAsAttribute?displayProperty=fullName> to replace standard interop marshaling behavior with this custom marshaler."}]}],"pos":[203363,203994],"yaml":true,"extradata":"MT"},{"content":"The type whose `ITypeInfo` interface is being requested.","nodes":[{"pos":[0,56],"content":"The type whose <ph id=\"ph1\">`ITypeInfo`</ph> interface is being requested.","source":"The type whose `ITypeInfo` interface is being requested."}],"pos":[204717,204774],"yaml":true},{"content":"A pointer to the `ITypeInfo` interface for the <code>t</code> parameter.","nodes":[{"pos":[0,72],"content":"A pointer to the <ph id=\"ph1\">`ITypeInfo`</ph> interface for the <ph id=\"ph2\">&lt;code&gt;t&lt;/code&gt;</ph> parameter.","source":"A pointer to the `ITypeInfo` interface for the <code>t</code> parameter."}],"pos":[204831,204904],"yaml":true},{"content":"<code>t</code> is not a visible type to COM.  \n  \n -or-  \n  \n <code>t</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] type.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;t&lt;/code&gt;</ph> is not a visible type to COM.","source":"<code>t</code> is not a visible type to COM."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,125],"content":"<ph id=\"ph1\">&lt;code&gt;t&lt;/code&gt;</ph> is a <ph id=\"ph2\">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> type.","source":"<code>t</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] type."}],"pos":[205084,205216],"yaml":true},{"content":"A type library is registered for the assembly that contains the type, but the type definition cannot be found.","nodes":[{"pos":[0,110],"content":"A type library is registered for the assembly that contains the type, but the type definition cannot be found.","nodes":[{"content":"A type library is registered for the assembly that contains the type, but the type definition cannot be found.","pos":[0,110]}]}],"pos":[205348,205459],"yaml":true},{"content":"Returns an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface from a managed object.","nodes":[{"pos":[0,101],"content":"Returns an <bpt id=\"p1\">[</bpt>IUnknown<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148003)</ept> interface from a managed object.","source":"Returns an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface from a managed object."}],"pos":[206652,206754],"yaml":true},{"content":"In managed code, you seldom work directly with the `IUnknown` interface. However, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown%2A?displayProperty=fullName> method.  \n  \n You can also use this method on a managed object to obtain an interface pointer to the [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md) for the object.","nodes":[{"pos":[0,736],"content":"In managed code, you seldom work directly with the `IUnknown` interface. However, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown%2A?displayProperty=fullName> method.","nodes":[{"content":"In managed code, you seldom work directly with the <ph id=\"ph1\">`IUnknown`</ph> interface.","pos":[0,72],"source":"In managed code, you seldom work directly with the `IUnknown` interface."},{"content":"However, <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A&gt;</ph> is useful when calling a method that exposes a COM object parameter as an <ph id=\"ph2\">&lt;xref:System.IntPtr&gt;</ph> type, or with custom marshaling.","pos":[73,279],"source":" However, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling."},{"content":"Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned.","pos":[280,411]},{"content":"Always use <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName&gt;</ph> to decrement the reference count once you have finished with the pointer.","pos":[412,578],"source":" Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer."},{"content":"This method provides the opposite functionality of the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown%2A?displayProperty=fullName&gt;</ph> method.","pos":[579,736],"source":" This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown%2A?displayProperty=fullName> method."}]},{"pos":[743,918],"content":"You can also use this method on a managed object to obtain an interface pointer to the <bpt id=\"p1\">[</bpt>COM Callable Wrapper<ept id=\"p1\">](~/docs/framework/interop/com-callable-wrapper.md)</ept> for the object.","source":"You can also use this method on a managed object to obtain an interface pointer to the [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md) for the object."}],"pos":[206765,207688],"yaml":true,"extradata":"MT"},{"content":"The object whose `IUnknown` interface is requested.","nodes":[{"pos":[0,51],"content":"The object whose <ph id=\"ph1\">`IUnknown`</ph> interface is requested.","source":"The object whose `IUnknown` interface is requested."}],"pos":[208495,208547],"yaml":true},{"content":"The `IUnknown` pointer for the <code>o</code> parameter.","nodes":[{"pos":[0,56],"content":"The <ph id=\"ph1\">`IUnknown`</ph> pointer for the <ph id=\"ph2\">&lt;code&gt;o&lt;/code&gt;</ph> parameter.","source":"The `IUnknown` pointer for the <code>o</code> parameter."}],"pos":[208604,208661],"yaml":true},{"content":"Returns an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface from a managed object, if the caller is in the same context as that object.","nodes":[{"pos":[0,154],"content":"Returns an <bpt id=\"p1\">[</bpt>IUnknown<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148003)</ept> interface from a managed object, if the caller is in the same context as that object.","source":"Returns an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface from a managed object, if the caller is in the same context as that object."}],"pos":[210363,210518],"yaml":true},{"content":"This method is the same as <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A> except that it returns `null` if the caller is not in the same context as the object.","nodes":[{"pos":[0,182],"content":"This method is the same as <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A&gt;</ph> except that it returns <ph id=\"ph2\">`null`</ph> if the caller is not in the same context as the object.","source":"This method is the same as <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A> except that it returns `null` if the caller is not in the same context as the object."}],"pos":[210529,210712],"yaml":true,"extradata":"MT"},{"content":"The object whose `IUnknown` interface is requested.","nodes":[{"pos":[0,51],"content":"The object whose <ph id=\"ph1\">`IUnknown`</ph> interface is requested.","source":"The object whose `IUnknown` interface is requested."}],"pos":[211526,211578],"yaml":true},{"content":"The `IUnknown` pointer for the specified object, or `null` if the caller is not in the same context as the specified object.","nodes":[{"pos":[0,124],"content":"The <ph id=\"ph1\">`IUnknown`</ph> pointer for the specified object, or <ph id=\"ph2\">`null`</ph> if the caller is not in the same context as the specified object.","source":"The `IUnknown` pointer for the specified object, or `null` if the caller is not in the same context as the specified object."}],"pos":[211635,211760],"yaml":true},{"content":"Returns the error code returned by the last unmanaged function that was called using platform invoke that has the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.SetLastError\"></xref> flag set.","nodes":[{"pos":[0,207],"content":"Returns the error code returned by the last unmanaged function that was called using platform invoke that has the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.DllImportAttribute.SetLastError\"&gt;&lt;/xref&gt;</ph> flag set.","source":"Returns the error code returned by the last unmanaged function that was called using platform invoke that has the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.SetLastError\"></xref> flag set."}],"pos":[212971,213179],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A> exposes the Win32 [GetLastError](http://go.microsoft.com/fwlink/?LinkId=148657) function from Kernel32.DLL. This method exists because it is not safe to make a direct platform invoke call to `GetLastError` to obtain this information. If you want to access this error code, you must call <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A> instead of writing your own platform invoke definition for `GetLastError` and calling it. The common language runtime can make internal calls to APIs that overwrite the `GetLastError` maintained by the operating system.  \n  \n You can use this method to obtain error codes only if you apply the <xref:System.Runtime.InteropServices.DllImportAttribute?displayProperty=fullName> to the method signature and set the <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError> field to`true`. The process for this varies depending upon the source language used: C# and C++ are `false` by default, but the `Declare` statement in Visual Basic is `true`.","nodes":[{"pos":[0,640],"content":"<xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A> exposes the Win32 [GetLastError](http://go.microsoft.com/fwlink/?LinkId=148657) function from Kernel32.DLL. This method exists because it is not safe to make a direct platform invoke call to `GetLastError` to obtain this information. If you want to access this error code, you must call <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A> instead of writing your own platform invoke definition for `GetLastError` and calling it. The common language runtime can make internal calls to APIs that overwrite the `GetLastError` maintained by the operating system.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A&gt;</ph> exposes the Win32 <bpt id=\"p1\">[</bpt>GetLastError<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148657)</ept> function from Kernel32.DLL.","pos":[0,174],"source":"<xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A> exposes the Win32 [GetLastError](http://go.microsoft.com/fwlink/?LinkId=148657) function from Kernel32.DLL."},{"content":"This method exists because it is not safe to make a direct platform invoke call to <ph id=\"ph1\">`GetLastError`</ph> to obtain this information.","pos":[175,300],"source":" This method exists because it is not safe to make a direct platform invoke call to `GetLastError` to obtain this information."},{"content":"If you want to access this error code, you must call <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A&gt;</ph> instead of writing your own platform invoke definition for <ph id=\"ph2\">`GetLastError`</ph> and calling it.","pos":[301,510],"source":" If you want to access this error code, you must call <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A> instead of writing your own platform invoke definition for `GetLastError` and calling it."},{"content":"The common language runtime can make internal calls to APIs that overwrite the <ph id=\"ph1\">`GetLastError`</ph> maintained by the operating system.","pos":[511,640],"source":" The common language runtime can make internal calls to APIs that overwrite the `GetLastError` maintained by the operating system."}]},{"pos":[647,1077],"content":"You can use this method to obtain error codes only if you apply the <xref:System.Runtime.InteropServices.DllImportAttribute?displayProperty=fullName> to the method signature and set the <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError> field to`true`. The process for this varies depending upon the source language used: C# and C++ are `false` by default, but the `Declare` statement in Visual Basic is `true`.","nodes":[{"content":"You can use this method to obtain error codes only if you apply the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute?displayProperty=fullName&gt;</ph> to the method signature and set the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph> field to<ph id=\"ph3\">`true`</ph>.","pos":[0,271],"source":"You can use this method to obtain error codes only if you apply the <xref:System.Runtime.InteropServices.DllImportAttribute?displayProperty=fullName> to the method signature and set the <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError> field to`true`."},{"content":"The process for this varies depending upon the source language used: C# and C++ are <ph id=\"ph1\">`false`</ph> by default, but the <ph id=\"ph2\">`Declare`</ph> statement in Visual Basic is <ph id=\"ph3\">`true`</ph>.","pos":[272,430],"source":" The process for this varies depending upon the source language used: C# and C++ are `false` by default, but the `Declare` statement in Visual Basic is `true`."}]}],"pos":[213190,214272],"yaml":true,"extradata":"MT"},{"content":"The last error code set by a call to the Win32 [SetLastError](http://go.microsoft.com/fwlink/?LinkId=148656) function.","nodes":[{"pos":[0,118],"content":"The last error code set by a call to the Win32 <bpt id=\"p1\">[</bpt>SetLastError<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148656)</ept> function.","source":"The last error code set by a call to the Win32 [SetLastError](http://go.microsoft.com/fwlink/?LinkId=148656) function."}],"pos":[215049,215168],"yaml":true},{"content":"Gets a pointer to a runtime-generated function that marshals a call from managed to unmanaged code.","nodes":[{"pos":[0,99],"content":"Gets a pointer to a runtime-generated function that marshals a call from managed to unmanaged code.","nodes":[{"content":"Gets a pointer to a runtime-generated function that marshals a call from managed to unmanaged code.","pos":[0,99]}]}],"pos":[217052,217152],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr%2A> is exposed for compiler support only.","nodes":[{"pos":[0,123],"content":"<xref:System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr%2A> is exposed for compiler support only.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr%2A&gt;</ph> is exposed for compiler support only.","pos":[0,123],"source":"<xref:System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr%2A> is exposed for compiler support only."}]}],"pos":[217163,217287],"yaml":true,"extradata":"MT"},{"content":"A pointer to the method to marshal.","nodes":[{"pos":[0,35],"content":"A pointer to the method to marshal.","nodes":[{"content":"A pointer to the method to marshal.","pos":[0,35]}]}],"pos":[217587,217623],"yaml":true},{"content":"A pointer to the method signature.","nodes":[{"pos":[0,34],"content":"A pointer to the method signature.","nodes":[{"content":"A pointer to the method signature.","pos":[0,34]}]}],"pos":[217690,217725],"yaml":true},{"content":"The number of bytes in <code>pbSignature</code>.","nodes":[{"pos":[0,48],"content":"The number of bytes in <ph id=\"ph1\">&lt;code&gt;pbSignature&lt;/code&gt;</ph>.","source":"The number of bytes in <code>pbSignature</code>."}],"pos":[217791,217840],"yaml":true},{"content":"A pointer to the function that will marshal a call from the <code>pfnMethodToWrap</code> parameter to unmanaged code.","nodes":[{"pos":[0,117],"content":"A pointer to the function that will marshal a call from the <ph id=\"ph1\">&lt;code&gt;pfnMethodToWrap&lt;/code&gt;</ph> parameter to unmanaged code.","source":"A pointer to the function that will marshal a call from the <code>pfnMethodToWrap</code> parameter to unmanaged code."}],"pos":[217897,218015],"yaml":true},{"content":"Retrieves a <xref href=\"System.Reflection.MemberInfo\"></xref> object for the specified virtual function table (v-table or VTBL) slot.","nodes":[{"pos":[0,133],"content":"Retrieves a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> object for the specified virtual function table (v-table or VTBL) slot.","source":"Retrieves a <xref href=\"System.Reflection.MemberInfo\"></xref> object for the specified virtual function table (v-table or VTBL) slot."}],"pos":[219561,219695],"yaml":true},{"content":"The return value may be a <xref:System.Reflection.FieldInfo>, <xref:System.Reflection.MethodInfo>, or <xref:System.Reflection.PropertyInfo> object. The return value depends on the type of managed member that exists in the given COM slot (hence the generalized return type <xref:System.Reflection.MemberInfo> from which all three derive).  \n  \n The zero-based slot number that is returned by this method accounts for three [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) and possibly four [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) methods, making the value of the first available slot either 3 or 7. <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A?displayProperty=fullName>. You can use <xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A?displayProperty=fullName> in conjunction with <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A> to pass slots within a specified range.  \n  \n The `memberType` parameter is important only on return. It contains the type of the COM member (a regular method or a property accessor) that corresponds to the returned <xref:System.Reflection.MemberInfo> object.","nodes":[{"pos":[0,337],"content":"The return value may be a <xref:System.Reflection.FieldInfo>, <xref:System.Reflection.MethodInfo>, or <xref:System.Reflection.PropertyInfo> object. The return value depends on the type of managed member that exists in the given COM slot (hence the generalized return type <xref:System.Reflection.MemberInfo> from which all three derive).","nodes":[{"content":"The return value may be a <xref:System.Reflection.FieldInfo>, <xref:System.Reflection.MethodInfo>, or <xref:System.Reflection.PropertyInfo> object. The return value depends on the type of managed member that exists in the given COM slot (hence the generalized return type <xref:System.Reflection.MemberInfo> from which all three derive).","pos":[0,337],"nodes":[{"content":"The return value may be a <ph id=\"ph1\">&lt;xref:System.Reflection.FieldInfo&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object.","pos":[0,147],"source":"The return value may be a <xref:System.Reflection.FieldInfo>, <xref:System.Reflection.MethodInfo>, or <xref:System.Reflection.PropertyInfo> object."},{"content":"The return value depends on the type of managed member that exists in the given COM slot (hence the generalized return type <ph id=\"ph1\">&lt;xref:System.Reflection.MemberInfo&gt;</ph> from which all three derive).","pos":[148,337],"source":" The return value depends on the type of managed member that exists in the given COM slot (hence the generalized return type <xref:System.Reflection.MemberInfo> from which all three derive)."}]}]},{"pos":[344,1186],"content":"The zero-based slot number that is returned by this method accounts for three [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) and possibly four [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) methods, making the value of the first available slot either 3 or 7. <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A?displayProperty=fullName>. You can use <xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A?displayProperty=fullName> in conjunction with <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A> to pass slots within a specified range.","nodes":[{"content":"The zero-based slot number that is returned by this method accounts for three <bpt id=\"p1\">[</bpt>IUnknown<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148003)</ept> and possibly four <bpt id=\"p2\">[</bpt>IDispatch<ept id=\"p2\">](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5)</ept> methods, making the value of the first available slot either 3 or 7.","pos":[0,304],"source":"The zero-based slot number that is returned by this method accounts for three [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) and possibly four [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) methods, making the value of the first available slot either 3 or 7."},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A&gt;</ph> provides the opposite functionality of <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A?displayProperty=fullName&gt;</ph>.","pos":[305,515],"source":" <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A?displayProperty=fullName>."},{"content":"You can use <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A?displayProperty=fullName&gt;</ph> in conjunction with <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A&gt;</ph> to pass slots within a specified range.","pos":[516,842],"source":" You can use <xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A?displayProperty=fullName> in conjunction with <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A> to pass slots within a specified range."}]},{"pos":[1193,1406],"content":"The `memberType` parameter is important only on return. It contains the type of the COM member (a regular method or a property accessor) that corresponds to the returned <xref:System.Reflection.MemberInfo> object.","nodes":[{"content":"The <ph id=\"ph1\">`memberType`</ph> parameter is important only on return.","pos":[0,55],"source":"The `memberType` parameter is important only on return."},{"content":"It contains the type of the COM member (a regular method or a property accessor) that corresponds to the returned <ph id=\"ph1\">&lt;xref:System.Reflection.MemberInfo&gt;</ph> object.","pos":[56,213],"source":" It contains the type of the COM member (a regular method or a property accessor) that corresponds to the returned <xref:System.Reflection.MemberInfo> object."}]}],"pos":[219706,221119],"yaml":true,"extradata":"MT"},{"content":"The type for which the <xref href=\"System.Reflection.MemberInfo\"></xref> is to be retrieved.","nodes":[{"pos":[0,92],"content":"The type for which the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> is to be retrieved.","source":"The type for which the <xref href=\"System.Reflection.MemberInfo\"></xref> is to be retrieved."}],"pos":[221361,221454],"yaml":true},{"content":"The VTBL slot.","nodes":[{"pos":[0,14],"content":"The VTBL slot.","nodes":[{"content":"The VTBL slot.","pos":[0,14]}]}],"pos":[221513,221528],"yaml":true},{"content":"On successful return, one of the enumeration values that specifies the type of the member.","nodes":[{"pos":[0,90],"content":"On successful return, one of the enumeration values that specifies the type of the member.","nodes":[{"content":"On successful return, one of the enumeration values that specifies the type of the member.","pos":[0,90]}]}],"pos":[221625,221716],"yaml":true},{"content":"The object that represents the member at the specified VTBL slot.","nodes":[{"pos":[0,65],"content":"The object that represents the member at the specified VTBL slot.","nodes":[{"content":"The object that represents the member at the specified VTBL slot.","pos":[0,65]}]}],"pos":[221788,221854],"yaml":true},{"content":"<code>t</code> is not visible from COM.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">&lt;code&gt;t&lt;/code&gt;</ph> is not visible from COM.","source":"<code>t</code> is not visible from COM."}],"pos":[222038,222078],"yaml":true},{"content":"Converts an object to a COM VARIANT.","nodes":[{"pos":[0,36],"content":"Converts an object to a COM VARIANT.","nodes":[{"content":"Converts an object to a COM VARIANT.","pos":[0,36]}]}],"pos":[223367,223404],"yaml":true},{"content":"The `pDstNativeVariant` parameter must point to sufficient memory to store the resulting VARIANT. Also, the implementation of this method calls the [VariantInit](https://msdn.microsoft.com/library/ms221402\\(v=vs.85\\).aspx) function on the raw memory that the `pDstNativeVariant` parameter points to.","nodes":[{"pos":[0,299],"content":"The `pDstNativeVariant` parameter must point to sufficient memory to store the resulting VARIANT. Also, the implementation of this method calls the [VariantInit](https://msdn.microsoft.com/library/ms221402\\(v=vs.85\\).aspx) function on the raw memory that the `pDstNativeVariant` parameter points to.","nodes":[{"content":"The <ph id=\"ph1\">`pDstNativeVariant`</ph> parameter must point to sufficient memory to store the resulting VARIANT.","pos":[0,97],"source":"The `pDstNativeVariant` parameter must point to sufficient memory to store the resulting VARIANT."},{"content":"Also, the implementation of this method calls the <bpt id=\"p1\">[</bpt>VariantInit<ept id=\"p1\">](https://msdn.microsoft.com/library/ms221402\\(v=vs.85\\).aspx)</ept> function on the raw memory that the <ph id=\"ph1\">`pDstNativeVariant`</ph> parameter points to.","pos":[98,299],"source":" Also, the implementation of this method calls the [VariantInit](https://msdn.microsoft.com/library/ms221402\\(v=vs.85\\).aspx) function on the raw memory that the `pDstNativeVariant` parameter points to."}]}],"pos":[223415,223715],"yaml":true,"extradata":"MT"},{"content":"The object for which to get a COM VARIANT.","nodes":[{"pos":[0,42],"content":"The object for which to get a COM VARIANT.","nodes":[{"content":"The object for which to get a COM VARIANT.","pos":[0,42]}]}],"pos":[223898,223941],"yaml":true},{"content":"A pointer to receive the VARIANT that corresponds to the <code>obj</code> parameter.","nodes":[{"pos":[0,84],"content":"A pointer to receive the VARIANT that corresponds to the <ph id=\"ph1\">&lt;code&gt;obj&lt;/code&gt;</ph> parameter.","source":"A pointer to receive the VARIANT that corresponds to the <code>obj</code> parameter."}],"pos":[224014,224099],"yaml":true},{"content":"The <code>obj</code> parameter is a generic type.","nodes":[{"pos":[0,49],"content":"The <ph id=\"ph1\">&lt;code&gt;obj&lt;/code&gt;</ph> parameter is a generic type.","source":"The <code>obj</code> parameter is a generic type."}],"pos":[224285,224335],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Converts an object of a specified type to a COM VARIANT.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,121],"content":"Converts an object of a specified type to a COM VARIANT.","nodes":[{"content":"Converts an object of a specified type to a COM VARIANT.","pos":[0,56]}]}],"pos":[226013,226139],"yaml":true},{"content":"The `pDstNativeVariant` parameter must point to sufficient memory to store the resulting VARIANT. Also, the implementation of this method calls [VariantInit](https://msdn.microsoft.com/library/ms221402\\(v=vs.85\\).aspx) function on the raw memory that the `pDstNativeVariant` parameter points to.","nodes":[{"pos":[0,295],"content":"The `pDstNativeVariant` parameter must point to sufficient memory to store the resulting VARIANT. Also, the implementation of this method calls [VariantInit](https://msdn.microsoft.com/library/ms221402\\(v=vs.85\\).aspx) function on the raw memory that the `pDstNativeVariant` parameter points to.","nodes":[{"content":"The <ph id=\"ph1\">`pDstNativeVariant`</ph> parameter must point to sufficient memory to store the resulting VARIANT.","pos":[0,97],"source":"The `pDstNativeVariant` parameter must point to sufficient memory to store the resulting VARIANT."},{"content":"Also, the implementation of this method calls <bpt id=\"p1\">[</bpt>VariantInit<ept id=\"p1\">](https://msdn.microsoft.com/library/ms221402\\(v=vs.85\\).aspx)</ept> function on the raw memory that the <ph id=\"ph1\">`pDstNativeVariant`</ph> parameter points to.","pos":[98,295],"source":" Also, the implementation of this method calls [VariantInit](https://msdn.microsoft.com/library/ms221402\\(v=vs.85\\).aspx) function on the raw memory that the `pDstNativeVariant` parameter points to."}]}],"pos":[226150,226446],"yaml":true,"extradata":"MT"},{"content":"The object for which to get a COM VARIANT.","nodes":[{"pos":[0,42],"content":"The object for which to get a COM VARIANT.","nodes":[{"content":"The object for which to get a COM VARIANT.","pos":[0,42]}]}],"pos":[226615,226658],"yaml":true},{"content":"A pointer to receive the VARIANT that corresponds to the <code>obj</code> parameter.","nodes":[{"pos":[0,84],"content":"A pointer to receive the VARIANT that corresponds to the <ph id=\"ph1\">&lt;code&gt;obj&lt;/code&gt;</ph> parameter.","source":"A pointer to receive the VARIANT that corresponds to the <code>obj</code> parameter."}],"pos":[226731,226816],"yaml":true},{"content":"The type of the object to convert.","nodes":[{"pos":[0,34],"content":"The type of the object to convert.","nodes":[{"content":"The type of the object to convert.","pos":[0,34]}]}],"pos":[226867,226902],"yaml":true},{"content":"Returns an instance of a type that represents a COM object by a pointer to its [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface.","nodes":[{"pos":[0,147],"content":"Returns an instance of a type that represents a COM object by a pointer to its <bpt id=\"p1\">[</bpt>IUnknown<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148003)</ept> interface.","source":"Returns an instance of a type that represents a COM object by a pointer to its [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface."}],"pos":[228527,228675],"yaml":true},{"content":"This method wraps `IUnknown` in a managed object. This has the effect of incrementing the reference count of the COM component. The reference count will be decremented when the runtime performs garbage collection on the managed object that represents the COM object.  \n  \n The `pUnk` parameter represents an `IUnknown` interface pointer; however, because all COM interfaces derive directly or indirectly from `IUnknown`, you can pass any COM interface to this method. The object returned by <xref:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown%2A> is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md), which the common language runtime manages as it does any other managed object. The type of this wrapper is often a generic `System.__ComObject` type, which is a hidden type used when the wrapper type is ambiguous. You can still make late-bound calls to such a generic type as long as the COM object implements the [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) interface. Likewise, you can cast the returned object to an appropriate COM interface.  \n  \n For an object to be wrapped with a specific managed class type (and not a generic wrapper type), you must adhere to the following requirements:  \n  \n-   Implement the [IProvideClassInfo](http://go.microsoft.com/fwlink/?LinkID=148012) interface for the COM object.  \n  \n-   Register the containing assembly with the [Regasm.exe (Assembly Registration Tool)](~/docs/framework/tools/regasm-exe-assembly-registration-tool.md).  \n  \n Alternatively, you can avoid these requirements and still get an object that is wrapped with a specific managed class type by using the <xref:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,266],"content":"This method wraps `IUnknown` in a managed object. This has the effect of incrementing the reference count of the COM component. The reference count will be decremented when the runtime performs garbage collection on the managed object that represents the COM object.","nodes":[{"content":"This method wraps <ph id=\"ph1\">`IUnknown`</ph> in a managed object.","pos":[0,49],"source":"This method wraps `IUnknown` in a managed object."},{"content":"This has the effect of incrementing the reference count of the COM component.","pos":[50,127]},{"content":"The reference count will be decremented when the runtime performs garbage collection on the managed object that represents the COM object.","pos":[128,266]}]},{"pos":[273,1130],"content":"The `pUnk` parameter represents an `IUnknown` interface pointer; however, because all COM interfaces derive directly or indirectly from `IUnknown`, you can pass any COM interface to this method. The object returned by <xref:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown%2A> is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md), which the common language runtime manages as it does any other managed object. The type of this wrapper is often a generic `System.__ComObject` type, which is a hidden type used when the wrapper type is ambiguous. You can still make late-bound calls to such a generic type as long as the COM object implements the [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) interface. Likewise, you can cast the returned object to an appropriate COM interface.","nodes":[{"content":"The <ph id=\"ph1\">`pUnk`</ph> parameter represents an <ph id=\"ph2\">`IUnknown`</ph> interface pointer; however, because all COM interfaces derive directly or indirectly from <ph id=\"ph3\">`IUnknown`</ph>, you can pass any COM interface to this method.","pos":[0,194],"source":"The `pUnk` parameter represents an `IUnknown` interface pointer; however, because all COM interfaces derive directly or indirectly from `IUnknown`, you can pass any COM interface to this method."},{"content":"The object returned by <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown%2A&gt;</ph> is a <bpt id=\"p1\">[</bpt>Runtime Callable Wrapper<ept id=\"p1\">](~/docs/framework/interop/runtime-callable-wrapper.md)</ept>, which the common language runtime manages as it does any other managed object.","pos":[195,453],"source":" The object returned by <xref:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown%2A> is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md), which the common language runtime manages as it does any other managed object."},{"content":"The type of this wrapper is often a generic <ph id=\"ph1\">`System.__ComObject`</ph> type, which is a hidden type used when the wrapper type is ambiguous.","pos":[454,588],"source":" The type of this wrapper is often a generic `System.__ComObject` type, which is a hidden type used when the wrapper type is ambiguous."},{"content":"You can still make late-bound calls to such a generic type as long as the COM object implements the <bpt id=\"p1\">[</bpt>IDispatch<ept id=\"p1\">](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5)</ept> interface.","pos":[589,781],"source":" You can still make late-bound calls to such a generic type as long as the COM object implements the [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) interface."},{"content":"Likewise, you can cast the returned object to an appropriate COM interface.","pos":[782,857]}]},{"pos":[1137,1280],"content":"For an object to be wrapped with a specific managed class type (and not a generic wrapper type), you must adhere to the following requirements:","nodes":[{"content":"For an object to be wrapped with a specific managed class type (and not a generic wrapper type), you must adhere to the following requirements:","pos":[0,143]}]},{"pos":[1290,1400],"content":"Implement the <bpt id=\"p1\">[</bpt>IProvideClassInfo<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=148012)</ept> interface for the COM object.","source":"Implement the [IProvideClassInfo](http://go.microsoft.com/fwlink/?LinkID=148012) interface for the COM object."},{"pos":[1410,1559],"content":"Register the containing assembly with the <bpt id=\"p1\">[</bpt>Regasm.exe (Assembly Registration Tool)<ept id=\"p1\">](~/docs/framework/tools/regasm-exe-assembly-registration-tool.md)</ept>.","source":"Register the containing assembly with the [Regasm.exe (Assembly Registration Tool)](~/docs/framework/tools/regasm-exe-assembly-registration-tool.md)."},{"pos":[1566,1809],"content":"Alternatively, you can avoid these requirements and still get an object that is wrapped with a specific managed class type by using the <xref:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown%2A?displayProperty=fullName> method.","nodes":[{"content":"Alternatively, you can avoid these requirements and still get an object that is wrapped with a specific managed class type by using the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,243],"source":"Alternatively, you can avoid these requirements and still get an object that is wrapped with a specific managed class type by using the <xref:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown%2A?displayProperty=fullName> method."}]}],"pos":[228686,230508],"yaml":true,"extradata":"MT"},{"content":"A pointer to the `IUnknown` interface.","nodes":[{"pos":[0,38],"content":"A pointer to the <ph id=\"ph1\">`IUnknown`</ph> interface.","source":"A pointer to the `IUnknown` interface."}],"pos":[230664,230703],"yaml":true},{"content":"An object that represents the specified unmanaged COM object.","nodes":[{"pos":[0,61],"content":"An object that represents the specified unmanaged COM object.","nodes":[{"content":"An object that represents the specified unmanaged COM object.","pos":[0,61]}]}],"pos":[230760,230822],"yaml":true},{"content":"Converts a COM VARIANT to an object.","nodes":[{"pos":[0,36],"content":"Converts a COM VARIANT to an object.","nodes":[{"content":"Converts a COM VARIANT to an object.","pos":[0,36]}]}],"pos":[232551,232588],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> returns a managed object that corresponds to a raw pointer to an unmanaged VARIANT type. The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code.  \n  \n <xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject%2A?displayProperty=fullName>.  \n  \n When the VARIANT type is VT_ERROR, <xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> returns an object of type `Int32` instead of `UInt32`.","nodes":[{"pos":[0,268],"content":"<xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> returns a managed object that corresponds to a raw pointer to an unmanaged VARIANT type. The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> returns a managed object that corresponds to a raw pointer to an unmanaged VARIANT type. The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code.","pos":[0,268],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A&gt;</ph> returns a managed object that corresponds to a raw pointer to an unmanaged VARIANT type.","pos":[0,163],"source":"<xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> returns a managed object that corresponds to a raw pointer to an unmanaged VARIANT type."},{"content":"The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code.","pos":[164,268]}]}]},{"pos":[275,489],"content":"<xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject%2A?displayProperty=fullName>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A&gt;</ph> provides the opposite functionality of <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject%2A?displayProperty=fullName&gt;</ph>.","pos":[0,214],"source":"<xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject%2A?displayProperty=fullName>."}]},{"pos":[496,660],"content":"When the VARIANT type is VT_ERROR, <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A&gt;</ph> returns an object of type <ph id=\"ph2\">`Int32`</ph> instead of <ph id=\"ph3\">`UInt32`</ph>.","source":"When the VARIANT type is VT_ERROR, <xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> returns an object of type `Int32` instead of `UInt32`."}],"pos":[232599,233266],"yaml":true,"extradata":"MT"},{"content":"A pointer to a COM VARIANT.","nodes":[{"pos":[0,27],"content":"A pointer to a COM VARIANT.","nodes":[{"content":"A pointer to a COM VARIANT.","pos":[0,27]}]}],"pos":[233453,233481],"yaml":true},{"content":"An object that corresponds to the <code>pSrcNativeVariant</code> parameter.","nodes":[{"pos":[0,75],"content":"An object that corresponds to the <ph id=\"ph1\">&lt;code&gt;pSrcNativeVariant&lt;/code&gt;</ph> parameter.","source":"An object that corresponds to the <code>pSrcNativeVariant</code> parameter."}],"pos":[233538,233614],"yaml":true},{"content":"<code>pSrcNativeVariant</code> is not a valid VARIANT type.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;pSrcNativeVariant&lt;/code&gt;</ph> is not a valid VARIANT type.","source":"<code>pSrcNativeVariant</code> is not a valid VARIANT type."}],"pos":[233874,233934],"yaml":true},{"content":"<code>pSrcNativeVariant</code> has an unsupported type.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;pSrcNativeVariant&lt;/code&gt;</ph> has an unsupported type.","source":"<code>pSrcNativeVariant</code> has an unsupported type."}],"pos":[234036,234092],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Converts a COM VARIANT to an object of a specified type.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,121],"content":"Converts a COM VARIANT to an object of a specified type.","nodes":[{"content":"Converts a COM VARIANT to an object of a specified type.","pos":[0,56]}]}],"pos":[235749,235875],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%60%601%28System.IntPtr%29> returns a managed object of type `T` that corresponds to a raw pointer to an unmanaged VARIANT type. The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code.  \n  \n <xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%60%601%28System.IntPtr%29> provides the opposite functionality of<xref:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject%60%601%28%60%600%2CSystem.IntPtr%29>.","nodes":[{"pos":[0,303],"content":"<xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%60%601%28System.IntPtr%29> returns a managed object of type `T` that corresponds to a raw pointer to an unmanaged VARIANT type. The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%60%601%28System.IntPtr%29&gt;</ph> returns a managed object of type <ph id=\"ph2\">`T`</ph> that corresponds to a raw pointer to an unmanaged VARIANT type.","pos":[0,198],"source":"<xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%60%601%28System.IntPtr%29> returns a managed object of type `T` that corresponds to a raw pointer to an unmanaged VARIANT type."},{"content":"The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code.","pos":[199,303]}]},{"pos":[310,554],"content":"<xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%60%601%28System.IntPtr%29> provides the opposite functionality of<xref:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject%60%601%28%60%600%2CSystem.IntPtr%29>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%60%601%28System.IntPtr%29&gt;</ph> provides the opposite functionality of<ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject%60%601%28%60%600%2CSystem.IntPtr%29&gt;</ph>.","pos":[0,244],"source":"<xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%60%601%28System.IntPtr%29> provides the opposite functionality of<xref:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject%60%601%28%60%600%2CSystem.IntPtr%29>."}]}],"pos":[235886,236445],"yaml":true,"extradata":"MT"},{"content":"A pointer to a COM VARIANT.","nodes":[{"pos":[0,27],"content":"A pointer to a COM VARIANT.","nodes":[{"content":"A pointer to a COM VARIANT.","pos":[0,27]}]}],"pos":[236630,236658],"yaml":true},{"content":"The type to which to convert the COM VARIANT.","nodes":[{"pos":[0,45],"content":"The type to which to convert the COM VARIANT.","nodes":[{"content":"The type to which to convert the COM VARIANT.","pos":[0,45]}]}],"pos":[236709,236755],"yaml":true},{"content":"An object of the specified type that corresponds to the <code>pSrcNativeVariant</code> parameter.","nodes":[{"pos":[0,97],"content":"An object of the specified type that corresponds to the <ph id=\"ph1\">&lt;code&gt;pSrcNativeVariant&lt;/code&gt;</ph> parameter.","source":"An object of the specified type that corresponds to the <code>pSrcNativeVariant</code> parameter."}],"pos":[236800,236898],"yaml":true},{"content":"<code>pSrcNativeVariant</code> is not a valid VARIANT type.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;pSrcNativeVariant&lt;/code&gt;</ph> is not a valid VARIANT type.","source":"<code>pSrcNativeVariant</code> is not a valid VARIANT type."}],"pos":[237161,237221],"yaml":true},{"content":"<code>pSrcNativeVariant</code> has an unsupported type.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;pSrcNativeVariant&lt;/code&gt;</ph> has an unsupported type.","source":"<code>pSrcNativeVariant</code> has an unsupported type."}],"pos":[237323,237379],"yaml":true},{"content":"Converts an array of COM [VARIANTs](http://go.microsoft.com/fwlink/?LinkId=148670) to an array of objects.","nodes":[{"pos":[0,106],"content":"Converts an array of COM <bpt id=\"p1\">[</bpt>VARIANTs<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148670)</ept> to an array of objects.","source":"Converts an array of COM [VARIANTs](http://go.microsoft.com/fwlink/?LinkId=148670) to an array of objects."}],"pos":[239008,239115],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants%2A> returns an array of managed objects that corresponds to a raw pointer to a C-style array of unmanaged VARIANT types. The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code. The method returns an empty array when the `cVars` parameter is 0.  \n  \n The object array (the return value) gets garbage collected as usual. The unmanaged input array or individual VARIANTs in the input array are not freed. Therefore it is your responsibility to free them as appropriate.","nodes":[{"pos":[0,365],"content":"<xref:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants%2A> returns an array of managed objects that corresponds to a raw pointer to a C-style array of unmanaged VARIANT types. The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code. The method returns an empty array when the `cVars` parameter is 0.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants%2A&gt;</ph> returns an array of managed objects that corresponds to a raw pointer to a C-style array of unmanaged VARIANT types.","pos":[0,193],"source":"<xref:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants%2A> returns an array of managed objects that corresponds to a raw pointer to a C-style array of unmanaged VARIANT types."},{"content":"The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code.","pos":[194,298]},{"content":"The method returns an empty array when the <ph id=\"ph1\">`cVars`</ph> parameter is 0.","pos":[299,365],"source":" The method returns an empty array when the `cVars` parameter is 0."}]},{"pos":[372,588],"content":"The object array (the return value) gets garbage collected as usual. The unmanaged input array or individual VARIANTs in the input array are not freed. Therefore it is your responsibility to free them as appropriate.","nodes":[{"content":"The object array (the return value) gets garbage collected as usual. The unmanaged input array or individual VARIANTs in the input array are not freed. Therefore it is your responsibility to free them as appropriate.","pos":[0,216],"nodes":[{"content":"The object array (the return value) gets garbage collected as usual.","pos":[0,68]},{"content":"The unmanaged input array or individual VARIANTs in the input array are not freed.","pos":[69,151]},{"content":"Therefore it is your responsibility to free them as appropriate.","pos":[152,216]}]}]}],"pos":[239126,239719],"yaml":true,"extradata":"MT"},{"content":"A pointer to the first element of an array of COM VARIANTs.","nodes":[{"pos":[0,59],"content":"A pointer to the first element of an array of COM VARIANTs.","nodes":[{"content":"A pointer to the first element of an array of COM VARIANTs.","pos":[0,59]}]}],"pos":[239921,239981],"yaml":true},{"content":"The count of COM VARIANTs in <code>aSrcNativeVariant</code>.","nodes":[{"pos":[0,60],"content":"The count of COM VARIANTs in <ph id=\"ph1\">&lt;code&gt;aSrcNativeVariant&lt;/code&gt;</ph>.","source":"The count of COM VARIANTs in <code>aSrcNativeVariant</code>."}],"pos":[240041,240102],"yaml":true},{"content":"An object array that corresponds to <code>aSrcNativeVariant</code>.","nodes":[{"pos":[0,67],"content":"An object array that corresponds to <ph id=\"ph1\">&lt;code&gt;aSrcNativeVariant&lt;/code&gt;</ph>.","source":"An object array that corresponds to <code>aSrcNativeVariant</code>."}],"pos":[240161,240229],"yaml":true},{"content":"<code>cVars</code> is a negative number.","nodes":[{"pos":[0,40],"content":"<ph id=\"ph1\">&lt;code&gt;cVars&lt;/code&gt;</ph> is a negative number.","source":"<code>cVars</code> is a negative number."}],"pos":[240437,240478],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Converts an array of COM VARIANTs to an array of a specified type.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,131],"content":"Converts an array of COM VARIANTs to an array of a specified type.","nodes":[{"content":"Converts an array of COM VARIANTs to an array of a specified type.","pos":[0,66]}]}],"pos":[242207,242343],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants%60%601%28System.IntPtr%2CSystem.Int32%29> returns an array of `T` that corresponds to a raw pointer to a C-style array of unmanaged VARIANT types. The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code. The method returns an empty array when the `cVars` parameter is 0.  \n  \n The returned array is garbage-collected as usual. The unmanaged input array or individual VARIANTs in the input array are not freed. Therefore, it is your responsibility to free them as appropriate.","nodes":[{"pos":[0,391],"content":"<xref:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants%60%601%28System.IntPtr%2CSystem.Int32%29> returns an array of `T` that corresponds to a raw pointer to a C-style array of unmanaged VARIANT types. The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code. The method returns an empty array when the `cVars` parameter is 0.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants%60%601%28System.IntPtr%2CSystem.Int32%29&gt;</ph> returns an array of <ph id=\"ph2\">`T`</ph> that corresponds to a raw pointer to a C-style array of unmanaged VARIANT types.","pos":[0,219],"source":"<xref:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants%60%601%28System.IntPtr%2CSystem.Int32%29> returns an array of `T` that corresponds to a raw pointer to a C-style array of unmanaged VARIANT types."},{"content":"The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code.","pos":[220,324]},{"content":"The method returns an empty array when the <ph id=\"ph1\">`cVars`</ph> parameter is 0.","pos":[325,391],"source":" The method returns an empty array when the `cVars` parameter is 0."}]},{"pos":[398,596],"content":"The returned array is garbage-collected as usual. The unmanaged input array or individual VARIANTs in the input array are not freed. Therefore, it is your responsibility to free them as appropriate.","nodes":[{"content":"The returned array is garbage-collected as usual. The unmanaged input array or individual VARIANTs in the input array are not freed. Therefore, it is your responsibility to free them as appropriate.","pos":[0,198],"nodes":[{"content":"The returned array is garbage-collected as usual.","pos":[0,49]},{"content":"The unmanaged input array or individual VARIANTs in the input array are not freed.","pos":[50,132]},{"content":"Therefore, it is your responsibility to free them as appropriate.","pos":[133,198]}]}]}],"pos":[242354,242955],"yaml":true,"extradata":"MT"},{"content":"A pointer to the first element of an array of COM VARIANTs.","nodes":[{"pos":[0,59],"content":"A pointer to the first element of an array of COM VARIANTs.","nodes":[{"content":"A pointer to the first element of an array of COM VARIANTs.","pos":[0,59]}]}],"pos":[243155,243215],"yaml":true},{"content":"The count of COM VARIANTs in <code>aSrcNativeVariant</code>.","nodes":[{"pos":[0,60],"content":"The count of COM VARIANTs in <ph id=\"ph1\">&lt;code&gt;aSrcNativeVariant&lt;/code&gt;</ph>.","source":"The count of COM VARIANTs in <code>aSrcNativeVariant</code>."}],"pos":[243275,243336],"yaml":true},{"content":"The type of the array to return.","nodes":[{"pos":[0,32],"content":"The type of the array to return.","nodes":[{"content":"The type of the array to return.","pos":[0,32]}]}],"pos":[243387,243420],"yaml":true},{"content":"An array of <code>T</code> objects that corresponds to <code>aSrcNativeVariant</code>.","nodes":[{"pos":[0,86],"content":"An array of <ph id=\"ph1\">&lt;code&gt;T&lt;/code&gt;</ph> objects that corresponds to <ph id=\"ph2\">&lt;code&gt;aSrcNativeVariant&lt;/code&gt;</ph>.","source":"An array of <code>T</code> objects that corresponds to <code>aSrcNativeVariant</code>."}],"pos":[243467,243554],"yaml":true},{"content":"<code>cVars</code> is a negative number.","nodes":[{"pos":[0,40],"content":"<ph id=\"ph1\">&lt;code&gt;cVars&lt;/code&gt;</ph> is a negative number.","source":"<code>cVars</code> is a negative number."}],"pos":[243765,243806],"yaml":true},{"content":"Gets the first slot in the virtual function table (v-table or VTBL) that contains user-defined methods.","nodes":[{"pos":[0,103],"content":"Gets the first slot in the virtual function table (v-table or VTBL) that contains user-defined methods.","nodes":[{"content":"Gets the first slot in the virtual function table (v-table or VTBL) that contains user-defined methods.","pos":[0,103]}]}],"pos":[245291,245395],"yaml":true},{"content":"This method returns the zero-based v-table number for an interface or a class. When used on a class, the slot number that is returned refers to the class interface for the class. If the class interface is auto-dispatch, this method always returns -1 to indicate that the dispatch-only interface does not expose a v-table to managed clients. You can use <xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A> and <xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A?displayProperty=fullName> in conjunction with <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=fullName> to pass slots within a specified range. For additional information, see [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024).","nodes":[{"pos":[0,804],"content":"This method returns the zero-based v-table number for an interface or a class. When used on a class, the slot number that is returned refers to the class interface for the class. If the class interface is auto-dispatch, this method always returns -1 to indicate that the dispatch-only interface does not expose a v-table to managed clients. You can use <xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A> and <xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A?displayProperty=fullName> in conjunction with <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=fullName> to pass slots within a specified range. For additional information, see [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024).","nodes":[{"content":"This method returns the zero-based v-table number for an interface or a class.","pos":[0,78]},{"content":"When used on a class, the slot number that is returned refers to the class interface for the class.","pos":[79,178]},{"content":"If the class interface is auto-dispatch, this method always returns -1 to indicate that the dispatch-only interface does not expose a v-table to managed clients.","pos":[179,340]},{"content":"You can use <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A?displayProperty=fullName&gt;</ph> in conjunction with <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=fullName&gt;</ph> to pass slots within a specified range.","pos":[341,667],"source":" You can use <xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A> and <xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A?displayProperty=fullName> in conjunction with <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=fullName> to pass slots within a specified range."},{"content":"For additional information, see <bpt id=\"p1\">[</bpt>Introducing the Class Interface<ept id=\"p1\">](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024)</ept>.","pos":[668,804],"source":" For additional information, see [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024)."}]}],"pos":[245406,246211],"yaml":true,"extradata":"MT"},{"content":"A type that represents an interface.","nodes":[{"pos":[0,36],"content":"A type that represents an interface.","nodes":[{"content":"A type that represents an interface.","pos":[0,36]}]}],"pos":[246349,246386],"yaml":true},{"content":"The first VTBL slot that contains user-defined methods. The first slot is 3 if the interface is based on [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003), and 7 if the interface is based on [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5).","nodes":[{"pos":[0,281],"content":"The first VTBL slot that contains user-defined methods. The first slot is 3 if the interface is based on [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003), and 7 if the interface is based on [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5).","nodes":[{"content":"The first VTBL slot that contains user-defined methods.","pos":[0,55]},{"content":"The first slot is 3 if the interface is based on <bpt id=\"p1\">[</bpt>IUnknown<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148003)</ept>, and 7 if the interface is based on <bpt id=\"p2\">[</bpt>IDispatch<ept id=\"p2\">](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5)</ept>.","pos":[56,281],"source":" The first slot is 3 if the interface is based on [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003), and 7 if the interface is based on [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5)."}]}],"pos":[246442,246724],"yaml":true},{"content":"<code>t</code> is not visible from COM.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">&lt;code&gt;t&lt;/code&gt;</ph> is not visible from COM.","source":"<code>t</code> is not visible from COM."}],"pos":[246900,246940],"yaml":true},{"content":"Converts a fiber cookie into the corresponding <xref href=\"System.Threading.Thread\"></xref> instance.","nodes":[{"pos":[0,101],"content":"Converts a fiber cookie into the corresponding <ph id=\"ph1\">&lt;xref href=\"System.Threading.Thread\"&gt;&lt;/xref&gt;</ph> instance.","source":"Converts a fiber cookie into the corresponding <xref href=\"System.Threading.Thread\"></xref> instance."}],"pos":[248516,248618],"yaml":true},{"content":"Fiber cookies are opaque tokens that are used by the host when alerting the common language runtime to its fiber-scheduling decisions. They consist of a stack and register context.","nodes":[{"pos":[0,180],"content":"Fiber cookies are opaque tokens that are used by the host when alerting the common language runtime to its fiber-scheduling decisions. They consist of a stack and register context.","nodes":[{"content":"Fiber cookies are opaque tokens that are used by the host when alerting the common language runtime to its fiber-scheduling decisions. They consist of a stack and register context.","pos":[0,180],"nodes":[{"content":"Fiber cookies are opaque tokens that are used by the host when alerting the common language runtime to its fiber-scheduling decisions.","pos":[0,134]},{"content":"They consist of a stack and register context.","pos":[135,180]}]}]}],"pos":[248629,248810],"yaml":true,"extradata":"MT"},{"content":"An integer that represents a fiber cookie.","nodes":[{"pos":[0,42],"content":"An integer that represents a fiber cookie.","nodes":[{"content":"An integer that represents a fiber cookie.","pos":[0,42]}]}],"pos":[249056,249099],"yaml":true},{"content":"A thread that corresponds to the <code>cookie</code> parameter.","nodes":[{"pos":[0,63],"content":"A thread that corresponds to the <ph id=\"ph1\">&lt;code&gt;cookie&lt;/code&gt;</ph> parameter.","source":"A thread that corresponds to the <code>cookie</code> parameter."}],"pos":[249166,249230],"yaml":true},{"content":"The <code>cookie</code> parameter is 0.","nodes":[{"pos":[0,39],"content":"The <ph id=\"ph1\">&lt;code&gt;cookie&lt;/code&gt;</ph> parameter is 0.","source":"The <code>cookie</code> parameter is 0."}],"pos":[249415,249455],"yaml":true},{"content":"Returns a managed object of a specified type that represents a COM object.","nodes":[{"pos":[0,74],"content":"Returns a managed object of a specified type that represents a COM object.","nodes":[{"content":"Returns a managed object of a specified type that represents a COM object.","pos":[0,74]}]}],"pos":[250765,250840],"yaml":true},{"content":"The `t` parameter must be either a COM-imported type or a subtype of a COM-imported type. In addition, `t` must be a type whose metadata was imported by the [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool. This type must be a class and not an associated coclass interface, which carries the name of the COM class. For example, if Tlbimp.exe imports `Myclass` as a class called `MyclassClass` and as a coclass interface called `Myclass`, you must use `MyclassClass` (not `Myclass`) with this method. For additional information about imported classes and coclass interfaces, see [Imported Type Conversion](http://msdn.microsoft.com/en-us/cb1ee67d-8ef0-4e40-b2a5-13714b9f33c3).  \n  \n If an object has already been obtained for the `pUnk` parameter, `t` is ignored and the existing object is returned. `pUnk` represents an[IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface pointer; however, because all COM interfaces derive directly or indirectly from `IUnknown`, you can pass any COM interface to this method. The object returned by <xref:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown%2A> is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW), which the common language runtime manages as it does any other managed object.","nodes":[{"pos":[0,728],"content":"The `t` parameter must be either a COM-imported type or a subtype of a COM-imported type. In addition, `t` must be a type whose metadata was imported by the [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool. This type must be a class and not an associated coclass interface, which carries the name of the COM class. For example, if Tlbimp.exe imports `Myclass` as a class called `MyclassClass` and as a coclass interface called `Myclass`, you must use `MyclassClass` (not `Myclass`) with this method. For additional information about imported classes and coclass interfaces, see [Imported Type Conversion](http://msdn.microsoft.com/en-us/cb1ee67d-8ef0-4e40-b2a5-13714b9f33c3).","nodes":[{"content":"The <ph id=\"ph1\">`t`</ph> parameter must be either a COM-imported type or a subtype of a COM-imported type.","pos":[0,89],"source":"The `t` parameter must be either a COM-imported type or a subtype of a COM-imported type."},{"content":"In addition, <ph id=\"ph1\">`t`</ph> must be a type whose metadata was imported by the <bpt id=\"p1\">[</bpt>Tlbimp.exe (Type Library Importer)<ept id=\"p1\">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> tool.","pos":[90,259],"source":" In addition, `t` must be a type whose metadata was imported by the [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool."},{"content":"This type must be a class and not an associated coclass interface, which carries the name of the COM class.","pos":[260,367]},{"content":"For example, if Tlbimp.exe imports <ph id=\"ph1\">`Myclass`</ph> as a class called <ph id=\"ph2\">`MyclassClass`</ph> and as a coclass interface called <ph id=\"ph3\">`Myclass`</ph>, you must use <ph id=\"ph4\">`MyclassClass`</ph> (not <ph id=\"ph5\">`Myclass`</ph>) with this method.","pos":[368,552],"source":" For example, if Tlbimp.exe imports `Myclass` as a class called `MyclassClass` and as a coclass interface called `Myclass`, you must use `MyclassClass` (not `Myclass`) with this method."},{"content":"For additional information about imported classes and coclass interfaces, see <bpt id=\"p1\">[</bpt>Imported Type Conversion<ept id=\"p1\">](http://msdn.microsoft.com/en-us/cb1ee67d-8ef0-4e40-b2a5-13714b9f33c3)</ept>.","pos":[553,728],"source":" For additional information about imported classes and coclass interfaces, see [Imported Type Conversion](http://msdn.microsoft.com/en-us/cb1ee67d-8ef0-4e40-b2a5-13714b9f33c3)."}]},{"pos":[735,1348],"content":"If an object has already been obtained for the `pUnk` parameter, `t` is ignored and the existing object is returned. `pUnk` represents an[IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface pointer; however, because all COM interfaces derive directly or indirectly from `IUnknown`, you can pass any COM interface to this method. The object returned by <xref:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown%2A> is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW), which the common language runtime manages as it does any other managed object.","nodes":[{"content":"If an object has already been obtained for the <ph id=\"ph1\">`pUnk`</ph> parameter, <ph id=\"ph2\">`t`</ph> is ignored and the existing object is returned.","pos":[0,116],"source":"If an object has already been obtained for the `pUnk` parameter, `t` is ignored and the existing object is returned."},{"content":"<ph id=\"ph1\">`pUnk`</ph> represents an<bpt id=\"p1\">[</bpt>IUnknown<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148003)</ept> interface pointer; however, because all COM interfaces derive directly or indirectly from <ph id=\"ph2\">`IUnknown`</ph>, you can pass any COM interface to this method.","pos":[117,343],"source":"`pUnk` represents an[IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface pointer; however, because all COM interfaces derive directly or indirectly from `IUnknown`, you can pass any COM interface to this method."},{"content":"The object returned by <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown%2A&gt;</ph> is a <bpt id=\"p1\">[</bpt>Runtime Callable Wrapper<ept id=\"p1\">](~/docs/framework/interop/runtime-callable-wrapper.md)</ept> (RCW), which the common language runtime manages as it does any other managed object.","pos":[344,613],"source":" The object returned by <xref:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown%2A> is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW), which the common language runtime manages as it does any other managed object."}]}],"pos":[250851,252204],"yaml":true,"extradata":"MT"},{"content":"A pointer to the `IUnknown` interface of the unmanaged object.","nodes":[{"pos":[0,62],"content":"A pointer to the <ph id=\"ph1\">`IUnknown`</ph> interface of the unmanaged object.","source":"A pointer to the `IUnknown` interface of the unmanaged object."}],"pos":[252373,252436],"yaml":true},{"content":"The type of the requested managed class.","nodes":[{"pos":[0,40],"content":"The type of the requested managed class.","nodes":[{"content":"The type of the requested managed class.","pos":[0,40]}]}],"pos":[252491,252532],"yaml":true},{"content":"An instance of the class corresponding to the <xref href=\"System.Type\"></xref> object that represents the requested unmanaged COM object.","nodes":[{"pos":[0,137],"content":"An instance of the class corresponding to the <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents the requested unmanaged COM object.","source":"An instance of the class corresponding to the <xref href=\"System.Type\"></xref> object that represents the requested unmanaged COM object."}],"pos":[252589,252727],"yaml":true},{"content":"<code>t</code> is not attributed with <xref href=\"System.Runtime.InteropServices.ComImportAttribute\"></xref>.  \n  \n -or-  \n  \n <code>t</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] type.","nodes":[{"pos":[0,109],"content":"<ph id=\"ph1\">&lt;code&gt;t&lt;/code&gt;</ph> is not attributed with <ph id=\"ph2\">&lt;xref href=\"System.Runtime.InteropServices.ComImportAttribute\"&gt;&lt;/xref&gt;</ph>.","source":"<code>t</code> is not attributed with <xref href=\"System.Runtime.InteropServices.ComImportAttribute\"></xref>."},{"pos":[116,120],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[127,190],"content":"<ph id=\"ph1\">&lt;code&gt;t&lt;/code&gt;</ph> is a <ph id=\"ph2\">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> type.","source":"<code>t</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] type."}],"pos":[252913,253112],"yaml":true},{"content":"Converts an unmanaged [ITypeInfo](http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680) object into a managed <xref href=\"System.Type\"></xref> object.","nodes":[{"pos":[0,166],"content":"Converts an unmanaged <bpt id=\"p1\">[</bpt>ITypeInfo<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680)</ept> object into a managed <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object.","source":"Converts an unmanaged [ITypeInfo](http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680) object into a managed <xref href=\"System.Type\"></xref> object."}],"pos":[254280,254447],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo%2A> returns a <xref:System.Type?displayProperty=fullName> instance that is based on the original type. You can apply the <xref:System.Runtime.InteropServices.MarshalAsAttribute?displayProperty=fullName> to replace standard interop marshaling behavior with this custom marshaler. The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool uses the custom marshaler to translate `ITypeInfo` parameters to <xref:System.Type?displayProperty=fullName> parameters. However, if you obtain an `ITypeInfo` interface by some means other than Tlbimp.exe, you can use <xref:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo%2A> to manually perform the same translation.","nodes":[{"pos":[0,778],"content":"<xref:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo%2A> returns a <xref:System.Type?displayProperty=fullName> instance that is based on the original type. You can apply the <xref:System.Runtime.InteropServices.MarshalAsAttribute?displayProperty=fullName> to replace standard interop marshaling behavior with this custom marshaler. The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool uses the custom marshaler to translate `ITypeInfo` parameters to <xref:System.Type?displayProperty=fullName> parameters. However, if you obtain an `ITypeInfo` interface by some means other than Tlbimp.exe, you can use <xref:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo%2A> to manually perform the same translation.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo%2A&gt;</ph> returns a <ph id=\"ph2\">&lt;xref:System.Type?displayProperty=fullName&gt;</ph> instance that is based on the original type.","pos":[0,167],"source":"<xref:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo%2A> returns a <xref:System.Type?displayProperty=fullName> instance that is based on the original type."},{"content":"You can apply the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute?displayProperty=fullName&gt;</ph> to replace standard interop marshaling behavior with this custom marshaler.","pos":[168,343],"source":" You can apply the <xref:System.Runtime.InteropServices.MarshalAsAttribute?displayProperty=fullName> to replace standard interop marshaling behavior with this custom marshaler."},{"content":"The <bpt id=\"p1\">[</bpt>Tlbimp.exe (Type Library Importer)<ept id=\"p1\">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> tool uses the custom marshaler to translate <ph id=\"ph1\">`ITypeInfo`</ph> parameters to <ph id=\"ph2\">&lt;xref:System.Type?displayProperty=fullName&gt;</ph> parameters.","pos":[344,570],"source":" The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool uses the custom marshaler to translate `ITypeInfo` parameters to <xref:System.Type?displayProperty=fullName> parameters."},{"content":"However, if you obtain an <ph id=\"ph1\">`ITypeInfo`</ph> interface by some means other than Tlbimp.exe, you can use <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo%2A&gt;</ph> to manually perform the same translation.","pos":[571,778],"source":" However, if you obtain an `ITypeInfo` interface by some means other than Tlbimp.exe, you can use <xref:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo%2A> to manually perform the same translation."}]}],"pos":[254458,255237],"yaml":true,"extradata":"MT"},{"content":"The `ITypeInfo` interface to marshal.","nodes":[{"pos":[0,37],"content":"The <ph id=\"ph1\">`ITypeInfo`</ph> interface to marshal.","source":"The `ITypeInfo` interface to marshal."}],"pos":[255402,255440],"yaml":true},{"content":"A managed type that represents the unmanaged `ITypeInfo` object.","nodes":[{"pos":[0,64],"content":"A managed type that represents the unmanaged <ph id=\"ph1\">`ITypeInfo`</ph> object.","source":"A managed type that represents the unmanaged `ITypeInfo` object."}],"pos":[255495,255560],"yaml":true},{"content":"Returns the type associated with the specified class identifier (CLSID).","nodes":[{"pos":[0,72],"content":"Returns the type associated with the specified class identifier (CLSID).","nodes":[{"content":"Returns the type associated with the specified class identifier (CLSID).","pos":[0,72]}]}],"pos":[256806,256879],"yaml":true},{"content":"The CLSID of the type to return.","nodes":[{"pos":[0,32],"content":"The CLSID of the type to return.","nodes":[{"content":"The CLSID of the type to return.","pos":[0,32]}]}],"pos":[257027,257060],"yaml":true},{"content":"`System.__ComObject` regardless of whether the CLSID is valid.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">`System.__ComObject`</ph> regardless of whether the CLSID is valid.","source":"`System.__ComObject` regardless of whether the CLSID is valid."}],"pos":[257115,257180],"yaml":true},{"content":"Retrieves the name of the type represented by an [ITypeInfo](http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680) object.","nodes":[{"pos":[0,138],"content":"Retrieves the name of the type represented by an <bpt id=\"p1\">[</bpt>ITypeInfo<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680)</ept> object.","source":"Retrieves the name of the type represented by an [ITypeInfo](http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680) object."}],"pos":[258908,259047],"yaml":true},{"content":"You can also retrieve the name of the type represented by an `ITypeInfo` object by calling the <xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName> method and passing -1 for its first parameter.","nodes":[{"pos":[0,238],"content":"You can also retrieve the name of the type represented by an <ph id=\"ph1\">`ITypeInfo`</ph> object by calling the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName&gt;</ph> method and passing -1 for its first parameter.","source":"You can also retrieve the name of the type represented by an `ITypeInfo` object by calling the <xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName> method and passing -1 for its first parameter."}],"pos":[259058,259297],"yaml":true,"extradata":"MT"},{"content":"An object that represents an `ITypeInfo` pointer.","nodes":[{"pos":[0,49],"content":"An object that represents an <ph id=\"ph1\">`ITypeInfo`</ph> pointer.","source":"An object that represents an `ITypeInfo` pointer."}],"pos":[259549,259599],"yaml":true},{"content":"The name of the type that the <code>pTI</code> parameter points to.","nodes":[{"pos":[0,67],"content":"The name of the type that the <ph id=\"ph1\">&lt;code&gt;pTI&lt;/code&gt;</ph> parameter points to.","source":"The name of the type that the <code>pTI</code> parameter points to."}],"pos":[259656,259724],"yaml":true},{"content":"Retrieves the name of the type represented by an [ITypeInfo](http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680) object.","nodes":[{"pos":[0,138],"content":"Retrieves the name of the type represented by an <bpt id=\"p1\">[</bpt>ITypeInfo<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680)</ept> object.","source":"Retrieves the name of the type represented by an [ITypeInfo](http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680) object."}],"pos":[261138,261277],"yaml":true},{"content":"You can also retrieve the name of the type represented by an `ITypeInfo` by calling the <xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName> method and passing -1 for its first parameter.","nodes":[{"pos":[0,231],"content":"You can also retrieve the name of the type represented by an <ph id=\"ph1\">`ITypeInfo`</ph> by calling the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName&gt;</ph> method and passing -1 for its first parameter.","source":"You can also retrieve the name of the type represented by an `ITypeInfo` by calling the <xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName> method and passing -1 for its first parameter."}],"pos":[261288,261520],"yaml":true,"extradata":"MT"},{"content":"An object that represents an `ITypeInfo` pointer.","nodes":[{"pos":[0,49],"content":"An object that represents an <ph id=\"ph1\">`ITypeInfo`</ph> pointer.","source":"An object that represents an `ITypeInfo` pointer."}],"pos":[261758,261808],"yaml":true},{"content":"The name of the type that the <code>typeInfo</code> parameter points to.","nodes":[{"pos":[0,72],"content":"The name of the type that the <ph id=\"ph1\">&lt;code&gt;typeInfo&lt;/code&gt;</ph> parameter points to.","source":"The name of the type that the <code>typeInfo</code> parameter points to."}],"pos":[261865,261938],"yaml":true},{"content":"The <code>typeInfo</code> parameter is `null`.","nodes":[{"pos":[0,46],"content":"The <ph id=\"ph1\">&lt;code&gt;typeInfo&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>typeInfo</code> parameter is `null`."}],"pos":[262122,262169],"yaml":true},{"content":"Retrieves the library identifier (LIBID) of a type library.","nodes":[{"pos":[0,59],"content":"Retrieves the library identifier (LIBID) of a type library.","nodes":[{"content":"Retrieves the library identifier (LIBID) of a type library.","pos":[0,59]}]}],"pos":[263802,263862],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> extracts the LIBID directly from an existing type library. This action differs from that of the <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A?displayProperty=fullName> method, which calculates what the LIBID should be based on the current assembly.  \n  \n For more information about library identifiers, see [Exported Assembly Conversion](http://msdn.microsoft.com/en-us/3fffd8db-240f-4fde-a558-a5bcc01e1a86).","nodes":[{"pos":[0,340],"content":"<xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> extracts the LIBID directly from an existing type library. This action differs from that of the <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A?displayProperty=fullName> method, which calculates what the LIBID should be based on the current assembly.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> extracts the LIBID directly from an existing type library. This action differs from that of the <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A?displayProperty=fullName> method, which calculates what the LIBID should be based on the current assembly.","pos":[0,340],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A&gt;</ph> extracts the LIBID directly from an existing type library.","pos":[0,122],"source":"<xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> extracts the LIBID directly from an existing type library."},{"content":"This action differs from that of the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A?displayProperty=fullName&gt;</ph> method, which calculates what the LIBID should be based on the current assembly.","pos":[123,340],"source":" This action differs from that of the <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A?displayProperty=fullName> method, which calculates what the LIBID should be based on the current assembly."}]}]},{"pos":[347,500],"content":"For more information about library identifiers, see <bpt id=\"p1\">[</bpt>Exported Assembly Conversion<ept id=\"p1\">](http://msdn.microsoft.com/en-us/3fffd8db-240f-4fde-a558-a5bcc01e1a86)</ept>.","source":"For more information about library identifiers, see [Exported Assembly Conversion](http://msdn.microsoft.com/en-us/3fffd8db-240f-4fde-a558-a5bcc01e1a86)."}],"pos":[263873,264378],"yaml":true,"extradata":"MT"},{"content":"The type library whose LIBID is to be retrieved.","nodes":[{"pos":[0,48],"content":"The type library whose LIBID is to be retrieved.","nodes":[{"content":"The type library whose LIBID is to be retrieved.","pos":[0,48]}]}],"pos":[264609,264658],"yaml":true},{"content":"The LIBID of the specified type library.","nodes":[{"pos":[0,40],"content":"The LIBID of the specified type library.","nodes":[{"content":"The LIBID of the specified type library.","pos":[0,40]}]}],"pos":[264713,264754],"yaml":true},{"content":"Retrieves the library identifier (LIBID) of a type library.","nodes":[{"pos":[0,59],"content":"Retrieves the library identifier (LIBID) of a type library.","nodes":[{"content":"Retrieves the library identifier (LIBID) of a type library.","pos":[0,59]}]}],"pos":[266052,266112],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> extracts the LIBID directly from an existing type library. This action differs from that of the <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A?displayProperty=fullName> method, which calculates what the LIBID should be based on the current assembly.  \n  \n For more information about library identifiers, see [Exported Assembly Conversion](http://msdn.microsoft.com/en-us/3fffd8db-240f-4fde-a558-a5bcc01e1a86).","nodes":[{"pos":[0,340],"content":"<xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> extracts the LIBID directly from an existing type library. This action differs from that of the <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A?displayProperty=fullName> method, which calculates what the LIBID should be based on the current assembly.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> extracts the LIBID directly from an existing type library. This action differs from that of the <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A?displayProperty=fullName> method, which calculates what the LIBID should be based on the current assembly.","pos":[0,340],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A&gt;</ph> extracts the LIBID directly from an existing type library.","pos":[0,122],"source":"<xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> extracts the LIBID directly from an existing type library."},{"content":"This action differs from that of the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A?displayProperty=fullName&gt;</ph> method, which calculates what the LIBID should be based on the current assembly.","pos":[123,340],"source":" This action differs from that of the <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A?displayProperty=fullName> method, which calculates what the LIBID should be based on the current assembly."}]}]},{"pos":[347,500],"content":"For more information about library identifiers, see <bpt id=\"p1\">[</bpt>Exported Assembly Conversion<ept id=\"p1\">](http://msdn.microsoft.com/en-us/3fffd8db-240f-4fde-a558-a5bcc01e1a86)</ept>.","source":"For more information about library identifiers, see [Exported Assembly Conversion](http://msdn.microsoft.com/en-us/3fffd8db-240f-4fde-a558-a5bcc01e1a86)."}],"pos":[266123,266628],"yaml":true,"extradata":"MT"},{"content":"The type library whose LIBID is to be retrieved.","nodes":[{"pos":[0,48],"content":"The type library whose LIBID is to be retrieved.","nodes":[{"content":"The type library whose LIBID is to be retrieved.","pos":[0,48]}]}],"pos":[266877,266926],"yaml":true},{"content":"The LIBID of the type library that the <code>pTLB</code> parameter points to.","nodes":[{"pos":[0,77],"content":"The LIBID of the type library that the <ph id=\"ph1\">&lt;code&gt;pTLB&lt;/code&gt;</ph> parameter points to.","source":"The LIBID of the type library that the <code>pTLB</code> parameter points to."}],"pos":[266981,267059],"yaml":true},{"content":"Retrieves the library identifier (LIBID) that is assigned to a type library when it was exported from the specified assembly.","nodes":[{"pos":[0,125],"content":"Retrieves the library identifier (LIBID) that is assigned to a type library when it was exported from the specified assembly.","nodes":[{"content":"Retrieves the library identifier (LIBID) that is assigned to a type library when it was exported from the specified assembly.","pos":[0,125]}]}],"pos":[268409,268535],"yaml":true},{"content":"When assemblies are exported to type libraries, the type library is assigned a LIBID. You can set the LIBID explicitly by applying the <xref:System.Runtime.InteropServices.GuidAttribute?displayProperty=fullName> at the assembly level, or it can be generated automatically. The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool calculates a LIBID value based on the identity of the assembly. <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> returns the LIBID that is associated with the <xref:System.Runtime.InteropServices.GuidAttribute>, if the attribute is applied. Otherwise, <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A> returns the calculated value. Alternatively, you can use the <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> method to extract the actual LIBID from an existing type library.  \n  \n See the [Exported Assembly Conversion](http://msdn.microsoft.com/en-us/3fffd8db-240f-4fde-a558-a5bcc01e1a86) topic for more information about library identifiers.","nodes":[{"pos":[0,911],"content":"When assemblies are exported to type libraries, the type library is assigned a LIBID. You can set the LIBID explicitly by applying the <xref:System.Runtime.InteropServices.GuidAttribute?displayProperty=fullName> at the assembly level, or it can be generated automatically. The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool calculates a LIBID value based on the identity of the assembly. <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> returns the LIBID that is associated with the <xref:System.Runtime.InteropServices.GuidAttribute>, if the attribute is applied. Otherwise, <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A> returns the calculated value. Alternatively, you can use the <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> method to extract the actual LIBID from an existing type library.","nodes":[{"content":"When assemblies are exported to type libraries, the type library is assigned a LIBID.","pos":[0,85]},{"content":"You can set the LIBID explicitly by applying the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.GuidAttribute?displayProperty=fullName&gt;</ph> at the assembly level, or it can be generated automatically.","pos":[86,272],"source":" You can set the LIBID explicitly by applying the <xref:System.Runtime.InteropServices.GuidAttribute?displayProperty=fullName> at the assembly level, or it can be generated automatically."},{"content":"The <bpt id=\"p1\">[</bpt>Tlbimp.exe (Type Library Importer)<ept id=\"p1\">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> tool calculates a LIBID value based on the identity of the assembly.","pos":[273,442],"source":" The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool calculates a LIBID value based on the identity of the assembly."},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A&gt;</ph> returns the LIBID that is associated with the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.GuidAttribute&gt;</ph>, if the attribute is applied.","pos":[443,634],"source":" <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> returns the LIBID that is associated with the <xref:System.Runtime.InteropServices.GuidAttribute>, if the attribute is applied."},{"content":"Otherwise, <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A&gt;</ph> returns the calculated value.","pos":[635,750],"source":" Otherwise, <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A> returns the calculated value."},{"content":"Alternatively, you can use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A&gt;</ph> method to extract the actual LIBID from an existing type library.","pos":[751,911],"source":" Alternatively, you can use the <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> method to extract the actual LIBID from an existing type library."}]},{"pos":[918,1080],"content":"See the <bpt id=\"p1\">[</bpt>Exported Assembly Conversion<ept id=\"p1\">](http://msdn.microsoft.com/en-us/3fffd8db-240f-4fde-a558-a5bcc01e1a86)</ept> topic for more information about library identifiers.","source":"See the [Exported Assembly Conversion](http://msdn.microsoft.com/en-us/3fffd8db-240f-4fde-a558-a5bcc01e1a86) topic for more information about library identifiers."}],"pos":[268546,269631],"yaml":true,"extradata":"MT"},{"content":"The assembly from which the type library was exported.","nodes":[{"pos":[0,54],"content":"The assembly from which the type library was exported.","nodes":[{"content":"The assembly from which the type library was exported.","pos":[0,54]}]}],"pos":[269821,269876],"yaml":true},{"content":"The LIBID that is assigned to a type library when it is exported from the specified assembly.","nodes":[{"pos":[0,93],"content":"The LIBID that is assigned to a type library when it is exported from the specified assembly.","nodes":[{"content":"The LIBID that is assigned to a type library when it is exported from the specified assembly.","pos":[0,93]}]}],"pos":[269931,270025],"yaml":true},{"content":"<code>asm</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;asm&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>asm</code> is `null`."}],"pos":[270219,270247],"yaml":true},{"content":"Retrieves the LCID of a type library.","nodes":[{"pos":[0,37],"content":"Retrieves the LCID of a type library.","nodes":[{"content":"Retrieves the LCID of a type library.","pos":[0,37]}]}],"pos":[271464,271502],"yaml":true},{"content":"The type library whose LCID is to be retrieved.","nodes":[{"pos":[0,47],"content":"The type library whose LCID is to be retrieved.","nodes":[{"content":"The type library whose LCID is to be retrieved.","pos":[0,47]}]}],"pos":[271732,271780],"yaml":true},{"content":"The LCID of the type library that the <code>typelib</code> parameter points to.","nodes":[{"pos":[0,79],"content":"The LCID of the type library that the <ph id=\"ph1\">&lt;code&gt;typelib&lt;/code&gt;</ph> parameter points to.","source":"The LCID of the type library that the <code>typelib</code> parameter points to."}],"pos":[271836,271916],"yaml":true},{"content":"Retrieves the LCID of a type library.","nodes":[{"pos":[0,37],"content":"Retrieves the LCID of a type library.","nodes":[{"content":"Retrieves the LCID of a type library.","pos":[0,37]}]}],"pos":[273214,273252],"yaml":true},{"content":"The type library whose LCID is to be retrieved.","nodes":[{"pos":[0,47],"content":"The type library whose LCID is to be retrieved.","nodes":[{"content":"The type library whose LCID is to be retrieved.","pos":[0,47]}]}],"pos":[273500,273548],"yaml":true},{"content":"The LCID of the type library that the <code>pTLB</code> parameter points to.","nodes":[{"pos":[0,76],"content":"The LCID of the type library that the <ph id=\"ph1\">&lt;code&gt;pTLB&lt;/code&gt;</ph> parameter points to.","source":"The LCID of the type library that the <code>pTLB</code> parameter points to."}],"pos":[273604,273681],"yaml":true},{"content":"Retrieves the name of a type library.","nodes":[{"pos":[0,37],"content":"Retrieves the name of a type library.","nodes":[{"content":"Retrieves the name of a type library.","pos":[0,37]}]}],"pos":[275031,275069],"yaml":true},{"content":"The name returned by this method is the identifier used with the library statement, such as ADODB for the Microsoft ADO type library. The name is not a file name.  \n  \n You can also retrieve the type library name by calling the <xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName> method and passing -1 for its first parameter.","nodes":[{"pos":[0,162],"content":"The name returned by this method is the identifier used with the library statement, such as ADODB for the Microsoft ADO type library. The name is not a file name.","nodes":[{"content":"The name returned by this method is the identifier used with the library statement, such as ADODB for the Microsoft ADO type library. The name is not a file name.","pos":[0,162],"nodes":[{"content":"The name returned by this method is the identifier used with the library statement, such as ADODB for the Microsoft ADO type library.","pos":[0,133]},{"content":"The name is not a file name.","pos":[134,162]}]}]},{"pos":[169,371],"content":"You can also retrieve the type library name by calling the <xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName> method and passing -1 for its first parameter.","nodes":[{"content":"You can also retrieve the type library name by calling the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName&gt;</ph> method and passing -1 for its first parameter.","pos":[0,202],"source":"You can also retrieve the type library name by calling the <xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName> method and passing -1 for its first parameter."}]}],"pos":[275080,275456],"yaml":true,"extradata":"MT"},{"content":"The type library whose name is to be retrieved.","nodes":[{"pos":[0,47],"content":"The type library whose name is to be retrieved.","nodes":[{"content":"The type library whose name is to be retrieved.","pos":[0,47]}]}],"pos":[275689,275737],"yaml":true},{"content":"The name of the type library that the <code>typelib</code> parameter points to.","nodes":[{"pos":[0,79],"content":"The name of the type library that the <ph id=\"ph1\">&lt;code&gt;typelib&lt;/code&gt;</ph> parameter points to.","source":"The name of the type library that the <code>typelib</code> parameter points to."}],"pos":[275794,275874],"yaml":true},{"content":"The <code>typelib</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <ph id=\"ph1\">&lt;code&gt;typelib&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>typelib</code> parameter is `null`."}],"pos":[276057,276103],"yaml":true},{"content":"Retrieves the name of a type library.","nodes":[{"pos":[0,37],"content":"Retrieves the name of a type library.","nodes":[{"content":"Retrieves the name of a type library.","pos":[0,37]}]}],"pos":[277317,277355],"yaml":true},{"content":"The name returned by this method is the identifier used with the library statement, such as ADODB for the Microsoft ADO type library. The name is not a file name.  \n  \n You can also retrieve the type library name by calling the<xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName> method and passing -1 for its first parameter.","nodes":[{"pos":[0,162],"content":"The name returned by this method is the identifier used with the library statement, such as ADODB for the Microsoft ADO type library. The name is not a file name.","nodes":[{"content":"The name returned by this method is the identifier used with the library statement, such as ADODB for the Microsoft ADO type library. The name is not a file name.","pos":[0,162],"nodes":[{"content":"The name returned by this method is the identifier used with the library statement, such as ADODB for the Microsoft ADO type library.","pos":[0,133]},{"content":"The name is not a file name.","pos":[134,162]}]}]},{"pos":[169,370],"content":"You can also retrieve the type library name by calling the<xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName> method and passing -1 for its first parameter.","nodes":[{"content":"You can also retrieve the type library name by calling the<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName&gt;</ph> method and passing -1 for its first parameter.","pos":[0,201],"source":"You can also retrieve the type library name by calling the<xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName> method and passing -1 for its first parameter."}]}],"pos":[277366,277741],"yaml":true,"extradata":"MT"},{"content":"The type library whose name is to be retrieved.","nodes":[{"pos":[0,47],"content":"The type library whose name is to be retrieved.","nodes":[{"content":"The type library whose name is to be retrieved.","pos":[0,47]}]}],"pos":[277992,278040],"yaml":true},{"content":"The name of the type library that the <code>pTLB</code> parameter points to.","nodes":[{"pos":[0,76],"content":"The name of the type library that the <ph id=\"ph1\">&lt;code&gt;pTLB&lt;/code&gt;</ph> parameter points to.","source":"The name of the type library that the <code>pTLB</code> parameter points to."}],"pos":[278097,278174],"yaml":true},{"content":"Retrieves the version number of a type library that will be exported from the specified assembly.","nodes":[{"pos":[0,97],"content":"Retrieves the version number of a type library that will be exported from the specified assembly.","nodes":[{"content":"Retrieves the version number of a type library that will be exported from the specified assembly.","pos":[0,97]}]}],"pos":[279668,279766],"yaml":true},{"content":"Before exporting an assembly by using <xref:System.Runtime.InteropServices.TypeLibExporterFlags> with the `CallerResolvedReferences` value, you can use this method to retrieve the type library version from the assembly.  \n  \n If you do not apply the <xref:System.Runtime.InteropServices.TypeLibVersionAttribute> attribute to an exported assembly to explicitly control the version number of the generated type library, the type library will have the same version number as the assembly.","nodes":[{"pos":[0,219],"content":"Before exporting an assembly by using <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.TypeLibExporterFlags&gt;</ph> with the <ph id=\"ph2\">`CallerResolvedReferences`</ph> value, you can use this method to retrieve the type library version from the assembly.","source":"Before exporting an assembly by using <xref:System.Runtime.InteropServices.TypeLibExporterFlags> with the `CallerResolvedReferences` value, you can use this method to retrieve the type library version from the assembly."},{"pos":[226,485],"content":"If you do not apply the <xref:System.Runtime.InteropServices.TypeLibVersionAttribute> attribute to an exported assembly to explicitly control the version number of the generated type library, the type library will have the same version number as the assembly.","nodes":[{"content":"If you do not apply the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.TypeLibVersionAttribute&gt;</ph> attribute to an exported assembly to explicitly control the version number of the generated type library, the type library will have the same version number as the assembly.","pos":[0,259],"source":"If you do not apply the <xref:System.Runtime.InteropServices.TypeLibVersionAttribute> attribute to an exported assembly to explicitly control the version number of the generated type library, the type library will have the same version number as the assembly."}]}],"pos":[279777,280267],"yaml":true,"extradata":"MT"},{"content":"A managed assembly.","nodes":[{"pos":[0,19],"content":"A managed assembly.","nodes":[{"content":"A managed assembly.","pos":[0,19]}]}],"pos":[280524,280544],"yaml":true},{"content":"The major version number.","nodes":[{"pos":[0,25],"content":"The major version number.","nodes":[{"content":"The major version number.","pos":[0,25]}]}],"pos":[280611,280637],"yaml":true},{"content":"The minor version number.","nodes":[{"pos":[0,25],"content":"The minor version number.","nodes":[{"content":"The minor version number.","pos":[0,25]}]}],"pos":[280704,280730],"yaml":true},{"content":"<code>inputAssembly</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;inputAssembly&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>inputAssembly</code> is `null`."}],"pos":[280927,280965],"yaml":true},{"content":"Creates a unique [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW) object for a given [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface.","nodes":[{"pos":[0,191],"content":"Creates a unique <bpt id=\"p1\">[</bpt>Runtime Callable Wrapper<ept id=\"p1\">](~/docs/framework/interop/runtime-callable-wrapper.md)</ept> (RCW) object for a given <bpt id=\"p2\">[</bpt>IUnknown<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkId=148003)</ept> interface.","source":"Creates a unique [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW) object for a given [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface."}],"pos":[282194,282386],"yaml":true},{"content":"The <xref:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown%2A> method ensures that you receive a unique RCW, because it does not match an `IUnknown` pointer to an existing object. Use this method when you have to create a unique RCW that is not impacted by other code that calls the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method.","nodes":[{"pos":[0,373],"content":"The <xref:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown%2A> method ensures that you receive a unique RCW, because it does not match an `IUnknown` pointer to an existing object. Use this method when you have to create a unique RCW that is not impacted by other code that calls the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown%2A&gt;</ph> method ensures that you receive a unique RCW, because it does not match an <ph id=\"ph2\">`IUnknown`</ph> pointer to an existing object.","pos":[0,196],"source":"The <xref:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown%2A> method ensures that you receive a unique RCW, because it does not match an `IUnknown` pointer to an existing object."},{"content":"Use this method when you have to create a unique RCW that is not impacted by other code that calls the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A&gt;</ph> method.","pos":[197,373],"source":" Use this method when you have to create a unique RCW that is not impacted by other code that calls the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method."}]}],"pos":[282397,282771],"yaml":true,"extradata":"MT"},{"content":"A managed pointer to an `IUnknown` interface.","nodes":[{"pos":[0,45],"content":"A managed pointer to an <ph id=\"ph1\">`IUnknown`</ph> interface.","source":"A managed pointer to an `IUnknown` interface."}],"pos":[282939,282985],"yaml":true},{"content":"A unique RCW for the specified `IUnknown` interface.","nodes":[{"pos":[0,52],"content":"A unique RCW for the specified <ph id=\"ph1\">`IUnknown`</ph> interface.","source":"A unique RCW for the specified `IUnknown` interface."}],"pos":[283042,283095],"yaml":true},{"content":"Gets a pointer to a runtime-generated function that marshals a call from unmanaged to managed code.","nodes":[{"pos":[0,99],"content":"Gets a pointer to a runtime-generated function that marshals a call from unmanaged to managed code.","nodes":[{"content":"Gets a pointer to a runtime-generated function that marshals a call from unmanaged to managed code.","pos":[0,99]}]}],"pos":[284971,285071],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr%2A> is exposed for compiler support only.","nodes":[{"pos":[0,123],"content":"<xref:System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr%2A> is exposed for compiler support only.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr%2A&gt;</ph> is exposed for compiler support only.","pos":[0,123],"source":"<xref:System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr%2A> is exposed for compiler support only."}]}],"pos":[285082,285206],"yaml":true,"extradata":"MT"},{"content":"A pointer to the method to marshal.","nodes":[{"pos":[0,35],"content":"A pointer to the method to marshal.","nodes":[{"content":"A pointer to the method to marshal.","pos":[0,35]}]}],"pos":[285506,285542],"yaml":true},{"content":"A pointer to the method signature.","nodes":[{"pos":[0,34],"content":"A pointer to the method signature.","nodes":[{"content":"A pointer to the method signature.","pos":[0,34]}]}],"pos":[285609,285644],"yaml":true},{"content":"The number of bytes in <code>pbSignature</code>.","nodes":[{"pos":[0,48],"content":"The number of bytes in <ph id=\"ph1\">&lt;code&gt;pbSignature&lt;/code&gt;</ph>.","source":"The number of bytes in <code>pbSignature</code>."}],"pos":[285710,285759],"yaml":true},{"content":"A pointer to a function that will marshal a call from <code>pfnMethodToWrap</code> to managed code.","nodes":[{"pos":[0,99],"content":"A pointer to a function that will marshal a call from <ph id=\"ph1\">&lt;code&gt;pfnMethodToWrap&lt;/code&gt;</ph> to managed code.","source":"A pointer to a function that will marshal a call from <code>pfnMethodToWrap</code> to managed code."}],"pos":[285816,285916],"yaml":true},{"content":"Indicates whether a specified object represents a COM object.","nodes":[{"pos":[0,61],"content":"Indicates whether a specified object represents a COM object.","nodes":[{"content":"Indicates whether a specified object represents a COM object.","pos":[0,61]}]}],"pos":[287210,287272],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.IsComObject%2A> returns `true` if the class type of the instance is attributed with <xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=fullName> or if it derives directly or indirectly from a class attributed with <xref:System.Runtime.InteropServices.ComImportAttribute>. The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool applies this attribute for you when it imports a type library.  \n  \n Two other methods also determine whether a specified object represents a COM object, but the requirements for returning `true` differ from this method's requirements. <xref:System.Type.IsImport%2A?displayProperty=fullName> returns `true` if the class (or interface) is attributed with <xref:System.Runtime.InteropServices.ComImportAttribute> directly; it does not return `true` for derived types. <xref:System.Runtime.InteropServices.RegistrationServices.TypeRepresentsComType%2A?displayProperty=fullName> returns `true` if the type is attributed with <xref:System.Runtime.InteropServices.ComImportAttribute> or derives from a type with the same GUID.","nodes":[{"pos":[0,506],"content":"<xref:System.Runtime.InteropServices.Marshal.IsComObject%2A> returns `true` if the class type of the instance is attributed with <xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=fullName> or if it derives directly or indirectly from a class attributed with <xref:System.Runtime.InteropServices.ComImportAttribute>. The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool applies this attribute for you when it imports a type library.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.IsComObject%2A&gt;</ph> returns <ph id=\"ph2\">`true`</ph> if the class type of the instance is attributed with <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=fullName&gt;</ph> or if it derives directly or indirectly from a class attributed with <ph id=\"ph4\">&lt;xref:System.Runtime.InteropServices.ComImportAttribute&gt;</ph>.","pos":[0,337],"source":"<xref:System.Runtime.InteropServices.Marshal.IsComObject%2A> returns `true` if the class type of the instance is attributed with <xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=fullName> or if it derives directly or indirectly from a class attributed with <xref:System.Runtime.InteropServices.ComImportAttribute>."},{"content":"The <bpt id=\"p1\">[</bpt>Tlbimp.exe (Type Library Importer)<ept id=\"p1\">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> tool applies this attribute for you when it imports a type library.","pos":[338,506],"source":" The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool applies this attribute for you when it imports a type library."}]},{"pos":[513,1164],"content":"Two other methods also determine whether a specified object represents a COM object, but the requirements for returning `true` differ from this method's requirements. <xref:System.Type.IsImport%2A?displayProperty=fullName> returns `true` if the class (or interface) is attributed with <xref:System.Runtime.InteropServices.ComImportAttribute> directly; it does not return `true` for derived types. <xref:System.Runtime.InteropServices.RegistrationServices.TypeRepresentsComType%2A?displayProperty=fullName> returns `true` if the type is attributed with <xref:System.Runtime.InteropServices.ComImportAttribute> or derives from a type with the same GUID.","nodes":[{"content":"Two other methods also determine whether a specified object represents a COM object, but the requirements for returning <ph id=\"ph1\">`true`</ph> differ from this method's requirements.","pos":[0,166],"source":"Two other methods also determine whether a specified object represents a COM object, but the requirements for returning `true` differ from this method's requirements."},{"content":"<ph id=\"ph1\">&lt;xref:System.Type.IsImport%2A?displayProperty=fullName&gt;</ph> returns <ph id=\"ph2\">`true`</ph> if the class (or interface) is attributed with <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.ComImportAttribute&gt;</ph> directly; it does not return <ph id=\"ph4\">`true`</ph> for derived types.","pos":[167,396],"source":" <xref:System.Type.IsImport%2A?displayProperty=fullName> returns `true` if the class (or interface) is attributed with <xref:System.Runtime.InteropServices.ComImportAttribute> directly; it does not return `true` for derived types."},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.RegistrationServices.TypeRepresentsComType%2A?displayProperty=fullName&gt;</ph> returns <ph id=\"ph2\">`true`</ph> if the type is attributed with <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.ComImportAttribute&gt;</ph> or derives from a type with the same GUID.","pos":[397,651],"source":" <xref:System.Runtime.InteropServices.RegistrationServices.TypeRepresentsComType%2A?displayProperty=fullName> returns `true` if the type is attributed with <xref:System.Runtime.InteropServices.ComImportAttribute> or derives from a type with the same GUID."}]}],"pos":[287283,288452],"yaml":true,"extradata":"MT"},{"content":"The object to check.","nodes":[{"pos":[0,20],"content":"The object to check.","nodes":[{"content":"The object to check.","pos":[0,20]}]}],"pos":[288591,288612],"yaml":true},{"content":"`true` if the <code>o</code> parameter is a COM type; otherwise, `false`.","nodes":[{"pos":[0,73],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;code&gt;o&lt;/code&gt;</ph> parameter is a COM type; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <code>o</code> parameter is a COM type; otherwise, `false`."}],"pos":[288670,288746],"yaml":true},{"content":"<code>o</code> is `null`.","nodes":[{"pos":[0,25],"content":"<ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>o</code> is `null`."}],"pos":[288926,288952],"yaml":true},{"content":"Indicates whether a type is visible to COM clients.","nodes":[{"pos":[0,51],"content":"Indicates whether a type is visible to COM clients.","nodes":[{"content":"Indicates whether a type is visible to COM clients.","pos":[0,51]}]}],"pos":[290498,290550],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom%2A> enables you to check for COM visibility in one step. Types that are not visible cannot be used from COM. A type is visible if it is `public` and not hidden with the <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName>.","nodes":[{"pos":[0,318],"content":"<xref:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom%2A> enables you to check for COM visibility in one step. Types that are not visible cannot be used from COM. A type is visible if it is `public` and not hidden with the <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom%2A&gt;</ph> enables you to check for COM visibility in one step.","pos":[0,122],"source":"<xref:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom%2A> enables you to check for COM visibility in one step."},{"content":"Types that are not visible cannot be used from COM.","pos":[123,174]},{"content":"A type is visible if it is <ph id=\"ph1\">`public`</ph> and not hidden with the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName&gt;</ph>.","pos":[175,318],"source":" A type is visible if it is `public` and not hidden with the <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName>."}]}],"pos":[290561,290880],"yaml":true,"extradata":"MT"},{"content":"The type to check for COM visibility.","nodes":[{"pos":[0,37],"content":"The type to check for COM visibility.","nodes":[{"content":"The type to check for COM visibility.","pos":[0,37]}]}],"pos":[291024,291062],"yaml":true},{"content":"`true` if the type is visible to COM; otherwise, `false`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">`true`</ph> if the type is visible to COM; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the type is visible to COM; otherwise, `false`."}],"pos":[291120,291180],"yaml":true},{"content":"Calculates the number of bytes in unmanaged memory that are required to hold the parameters for the specified method.","nodes":[{"pos":[0,117],"content":"Calculates the number of bytes in unmanaged memory that are required to hold the parameters for the specified method.","nodes":[{"content":"Calculates the number of bytes in unmanaged memory that are required to hold the parameters for the specified method.","pos":[0,117]}]}],"pos":[292427,292545],"yaml":true},{"content":"The <xref:System.Runtime.InteropServices.Marshal.NumParamBytes%2A> method returns the stack size (in bytes) needed to represent the parameters of a method signature in unmanaged memory.  \n  \n Note that the return value of this method is platform-dependent. For example, a signature with a single integer parameter returns a value of 4 on 32-bit platforms and a value of 8 on 64-bit platforms.","nodes":[{"pos":[0,185],"content":"The <xref:System.Runtime.InteropServices.Marshal.NumParamBytes%2A> method returns the stack size (in bytes) needed to represent the parameters of a method signature in unmanaged memory.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.NumParamBytes%2A&gt;</ph> method returns the stack size (in bytes) needed to represent the parameters of a method signature in unmanaged memory.","pos":[0,185],"source":"The <xref:System.Runtime.InteropServices.Marshal.NumParamBytes%2A> method returns the stack size (in bytes) needed to represent the parameters of a method signature in unmanaged memory."}]},{"pos":[192,392],"content":"Note that the return value of this method is platform-dependent. For example, a signature with a single integer parameter returns a value of 4 on 32-bit platforms and a value of 8 on 64-bit platforms.","nodes":[{"content":"Note that the return value of this method is platform-dependent. For example, a signature with a single integer parameter returns a value of 4 on 32-bit platforms and a value of 8 on 64-bit platforms.","pos":[0,200],"nodes":[{"content":"Note that the return value of this method is platform-dependent.","pos":[0,64]},{"content":"For example, a signature with a single integer parameter returns a value of 4 on 32-bit platforms and a value of 8 on 64-bit platforms.","pos":[65,200]}]}]}],"pos":[292556,292953],"yaml":true,"extradata":"MT"},{"content":"The method to be checked.","nodes":[{"pos":[0,25],"content":"The method to be checked.","nodes":[{"content":"The method to be checked.","pos":[0,25]}]}],"pos":[293130,293156],"yaml":true},{"content":"The number of bytes required to represent the method parameters in unmanaged memory.","nodes":[{"pos":[0,84],"content":"The number of bytes required to represent the method parameters in unmanaged memory.","nodes":[{"content":"The number of bytes required to represent the method parameters in unmanaged memory.","pos":[0,84]}]}],"pos":[293212,293297],"yaml":true},{"content":"The <code>m</code> parameter is `null`.","nodes":[{"pos":[0,39],"content":"The <ph id=\"ph1\">&lt;code&gt;m&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>m</code> parameter is `null`."}],"pos":[293479,293519],"yaml":true},{"content":"The <code>m</code> parameter is not a <xref href=\"System.Reflection.MethodInfo\"></xref> object.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;code&gt;m&lt;/code&gt;</ph> parameter is not a <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> object.","source":"The <code>m</code> parameter is not a <xref href=\"System.Reflection.MethodInfo\"></xref> object."}],"pos":[293613,293709],"yaml":true},{"content":"Returns the field offset of the unmanaged form of the managed class.","nodes":[{"pos":[0,68],"content":"Returns the field offset of the unmanaged form of the managed class.","nodes":[{"content":"Returns the field offset of the unmanaged form of the managed class.","pos":[0,68]}]}],"pos":[294884,294953],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A> provides the offset in terms of the unmanaged structure layout, which does not necessarily correspond to the offset of the managed structure layout. Marshaling the structure can transform the layout and alter the offset. The `t` parameter can be a value type or a formatted reference type (with either a sequential or explicit layout). You can obtain the size of the entire layout by using the <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=fullName> method. For additional information, see [Default Marshaling for Value Types](http://msdn.microsoft.com/en-us/4d9a876c-e05a-40ba-bd85-bd22877f984a).  \n  \n> [!NOTE]\n>  Beginning with the .NET Framework version 2.0, <xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A> may expose private fields.","nodes":[{"pos":[0,680],"content":"<xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A> provides the offset in terms of the unmanaged structure layout, which does not necessarily correspond to the offset of the managed structure layout. Marshaling the structure can transform the layout and alter the offset. The `t` parameter can be a value type or a formatted reference type (with either a sequential or explicit layout). You can obtain the size of the entire layout by using the <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=fullName> method. For additional information, see [Default Marshaling for Value Types](http://msdn.microsoft.com/en-us/4d9a876c-e05a-40ba-bd85-bd22877f984a).","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A&gt;</ph> provides the offset in terms of the unmanaged structure layout, which does not necessarily correspond to the offset of the managed structure layout.","pos":[0,206],"source":"<xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A> provides the offset in terms of the unmanaged structure layout, which does not necessarily correspond to the offset of the managed structure layout."},{"content":"Marshaling the structure can transform the layout and alter the offset.","pos":[207,278]},{"content":"The <ph id=\"ph1\">`t`</ph> parameter can be a value type or a formatted reference type (with either a sequential or explicit layout).","pos":[279,393],"source":" The `t` parameter can be a value type or a formatted reference type (with either a sequential or explicit layout)."},{"content":"You can obtain the size of the entire layout by using the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=fullName&gt;</ph> method.","pos":[394,540],"source":" You can obtain the size of the entire layout by using the <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=fullName> method."},{"content":"For additional information, see <bpt id=\"p1\">[</bpt>Default Marshaling for Value Types<ept id=\"p1\">](http://msdn.microsoft.com/en-us/4d9a876c-e05a-40ba-bd85-bd22877f984a)</ept>.","pos":[541,680],"source":" For additional information, see [Default Marshaling for Value Types](http://msdn.microsoft.com/en-us/4d9a876c-e05a-40ba-bd85-bd22877f984a)."}]},{"pos":[688,830],"content":"[!NOTE]\n Beginning with the .NET Framework version 2.0, <xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A> may expose private fields.","leadings":["","> "],"nodes":[{"content":"Beginning with the .NET Framework version 2.0, <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A&gt;</ph> may expose private fields.","pos":[9,140],"source":"Beginning with the .NET Framework version 2.0, <xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A> may expose private fields."}]}],"pos":[294964,295800],"yaml":true,"extradata":"MT"},{"content":"A value type or formatted reference type that specifies the managed class. You must apply the <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute\"></xref> to the class.","nodes":[{"pos":[0,181],"content":"A value type or formatted reference type that specifies the managed class. You must apply the <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute\"></xref> to the class.","nodes":[{"content":"A value type or formatted reference type that specifies the managed class.","pos":[0,74]},{"content":"You must apply the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.StructLayoutAttribute\"&gt;&lt;/xref&gt;</ph> to the class.","pos":[75,181],"source":" You must apply the <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute\"></xref> to the class."}]}],"pos":[295952,296134],"yaml":true},{"content":"The field within the <code>t</code> parameter.","nodes":[{"pos":[0,46],"content":"The field within the <ph id=\"ph1\">&lt;code&gt;t&lt;/code&gt;</ph> parameter.","source":"The field within the <code>t</code> parameter."}],"pos":[296199,296246],"yaml":true},{"content":"The offset, in bytes, for the <code>fieldName</code> parameter within the specified class that is declared by platform invoke.","nodes":[{"pos":[0,126],"content":"The offset, in bytes, for the <ph id=\"ph1\">&lt;code&gt;fieldName&lt;/code&gt;</ph> parameter within the specified class that is declared by platform invoke.","source":"The offset, in bytes, for the <code>fieldName</code> parameter within the specified class that is declared by platform invoke."}],"pos":[296303,296430],"yaml":true},{"content":"The class cannot be exported as a structure or the field is nonpublic. Beginning with the .NET Framework version 2.0, the field may be private.","nodes":[{"pos":[0,143],"content":"The class cannot be exported as a structure or the field is nonpublic. Beginning with the .NET Framework version 2.0, the field may be private.","nodes":[{"content":"The class cannot be exported as a structure or the field is nonpublic. Beginning with the .NET Framework version 2.0, the field may be private.","pos":[0,143],"nodes":[{"content":"The class cannot be exported as a structure or the field is nonpublic.","pos":[0,70]},{"content":"Beginning with the .NET Framework version 2.0, the field may be private.","pos":[71,143]}]}]}],"pos":[296599,296743],"yaml":true},{"content":"The <code>t</code> parameter is `null`.","nodes":[{"pos":[0,39],"content":"The <ph id=\"ph1\">&lt;code&gt;t&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>t</code> parameter is `null`."}],"pos":[296845,296885],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Returns the field offset of the unmanaged form of a specified managed class.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,141],"content":"Returns the field offset of the unmanaged form of a specified managed class.","nodes":[{"content":"Returns the field offset of the unmanaged form of a specified managed class.","pos":[0,76]}]}],"pos":[298440,298586],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.OffsetOf%60%601%28System.String%29> provides the offset in terms of the unmanaged structure layout, which does not necessarily correspond to the offset of the managed structure layout. Marshaling the structure can transform the layout and alter the offset. The `T` generic type parameter can be a value type or a formatted reference type (with either a sequential or explicit layout). You can obtain the size of the entire layout by using the <xref:System.Runtime.InteropServices.Marshal.SizeOf%60%601%28%60%600%29> method. For additional information, see [Default Marshaling for Value Types](http://msdn.microsoft.com/en-us/4d9a876c-e05a-40ba-bd85-bd22877f984a).  \n  \n> [!NOTE]\n>  Beginning with the .NET Framework version 2.0, <xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A> may expose private fields.","nodes":[{"pos":[0,708],"content":"<xref:System.Runtime.InteropServices.Marshal.OffsetOf%60%601%28System.String%29> provides the offset in terms of the unmanaged structure layout, which does not necessarily correspond to the offset of the managed structure layout. Marshaling the structure can transform the layout and alter the offset. The `T` generic type parameter can be a value type or a formatted reference type (with either a sequential or explicit layout). You can obtain the size of the entire layout by using the <xref:System.Runtime.InteropServices.Marshal.SizeOf%60%601%28%60%600%29> method. For additional information, see [Default Marshaling for Value Types](http://msdn.microsoft.com/en-us/4d9a876c-e05a-40ba-bd85-bd22877f984a).","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.OffsetOf%60%601%28System.String%29&gt;</ph> provides the offset in terms of the unmanaged structure layout, which does not necessarily correspond to the offset of the managed structure layout.","pos":[0,229],"source":"<xref:System.Runtime.InteropServices.Marshal.OffsetOf%60%601%28System.String%29> provides the offset in terms of the unmanaged structure layout, which does not necessarily correspond to the offset of the managed structure layout."},{"content":"Marshaling the structure can transform the layout and alter the offset.","pos":[230,301]},{"content":"The <ph id=\"ph1\">`T`</ph> generic type parameter can be a value type or a formatted reference type (with either a sequential or explicit layout).","pos":[302,429],"source":" The `T` generic type parameter can be a value type or a formatted reference type (with either a sequential or explicit layout)."},{"content":"You can obtain the size of the entire layout by using the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.SizeOf%60%601%28%60%600%29&gt;</ph> method.","pos":[430,568],"source":" You can obtain the size of the entire layout by using the <xref:System.Runtime.InteropServices.Marshal.SizeOf%60%601%28%60%600%29> method."},{"content":"For additional information, see <bpt id=\"p1\">[</bpt>Default Marshaling for Value Types<ept id=\"p1\">](http://msdn.microsoft.com/en-us/4d9a876c-e05a-40ba-bd85-bd22877f984a)</ept>.","pos":[569,708],"source":" For additional information, see [Default Marshaling for Value Types](http://msdn.microsoft.com/en-us/4d9a876c-e05a-40ba-bd85-bd22877f984a)."}]},{"pos":[716,858],"content":"[!NOTE]\n Beginning with the .NET Framework version 2.0, <xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A> may expose private fields.","leadings":["","> "],"nodes":[{"content":"Beginning with the .NET Framework version 2.0, <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A&gt;</ph> may expose private fields.","pos":[9,140],"source":"Beginning with the .NET Framework version 2.0, <xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A> may expose private fields."}]}],"pos":[298597,299461],"yaml":true,"extradata":"MT"},{"content":"The name of the field in the <code>T</code> type.","nodes":[{"pos":[0,49],"content":"The name of the field in the <ph id=\"ph1\">&lt;code&gt;T&lt;/code&gt;</ph> type.","source":"The name of the field in the <code>T</code> type."}],"pos":[299618,299668],"yaml":true},{"content":"A managed value type or formatted reference type. You must apply the <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute\"></xref> attribute to the class.","nodes":[{"pos":[0,166],"content":"A managed value type or formatted reference type. You must apply the <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute\"></xref> attribute to the class.","nodes":[{"content":"A managed value type or formatted reference type.","pos":[0,49]},{"content":"You must apply the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.StructLayoutAttribute\"&gt;&lt;/xref&gt;</ph> attribute to the class.","pos":[50,166],"source":" You must apply the <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute\"></xref> attribute to the class."}]}],"pos":[299719,299886],"yaml":true},{"content":"The offset, in bytes, for the <code>fieldName</code> parameter within the specified class that is declared by platform invoke.","nodes":[{"pos":[0,126],"content":"The offset, in bytes, for the <ph id=\"ph1\">&lt;code&gt;fieldName&lt;/code&gt;</ph> parameter within the specified class that is declared by platform invoke.","source":"The offset, in bytes, for the <code>fieldName</code> parameter within the specified class that is declared by platform invoke."}],"pos":[299943,300070],"yaml":true},{"content":"Executes one-time method setup tasks without calling the method.","nodes":[{"pos":[0,64],"content":"Executes one-time method setup tasks without calling the method.","nodes":[{"content":"Executes one-time method setup tasks without calling the method.","pos":[0,64]}]}],"pos":[301657,301722],"yaml":true},{"content":"Setup tasks provide early initialization and are performed automatically when the target method is invoked. First-time tasks include the following:  \n  \n-   Verifying that the platform invoke metadata is correctly formatted.  \n  \n-   Verifying that all the managed types are valid parameters of platform invoke functions.  \n  \n-   Locating and loading the unmanaged DLL into the process.  \n  \n-   Locating the entry point in the process.  \n  \n Calling <xref:System.Runtime.InteropServices.Marshal.Prelink%2A> on a method outside of platform invoke has no effect. To execute setup tasks on all platform invoke methods in a type, use <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A?displayProperty=fullName>.","nodes":[{"pos":[0,147],"content":"Setup tasks provide early initialization and are performed automatically when the target method is invoked. First-time tasks include the following:","nodes":[{"content":"Setup tasks provide early initialization and are performed automatically when the target method is invoked. First-time tasks include the following:","pos":[0,147],"nodes":[{"content":"Setup tasks provide early initialization and are performed automatically when the target method is invoked.","pos":[0,107]},{"content":"First-time tasks include the following:","pos":[108,147]}]}]},{"pos":[157,224],"content":"Verifying that the platform invoke metadata is correctly formatted.","nodes":[{"content":"Verifying that the platform invoke metadata is correctly formatted.","pos":[0,67]}]},{"pos":[234,321],"content":"Verifying that all the managed types are valid parameters of platform invoke functions.","nodes":[{"content":"Verifying that all the managed types are valid parameters of platform invoke functions.","pos":[0,87]}]},{"pos":[331,387],"content":"Locating and loading the unmanaged DLL into the process.","nodes":[{"content":"Locating and loading the unmanaged DLL into the process.","pos":[0,56]}]},{"pos":[397,437],"content":"Locating the entry point in the process.","nodes":[{"content":"Locating the entry point in the process.","pos":[0,40]}]},{"pos":[444,717],"content":"Calling <xref:System.Runtime.InteropServices.Marshal.Prelink%2A> on a method outside of platform invoke has no effect. To execute setup tasks on all platform invoke methods in a type, use <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A?displayProperty=fullName>.","nodes":[{"content":"Calling <xref:System.Runtime.InteropServices.Marshal.Prelink%2A> on a method outside of platform invoke has no effect. To execute setup tasks on all platform invoke methods in a type, use <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A?displayProperty=fullName>.","pos":[0,273],"nodes":[{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.Prelink%2A&gt;</ph> on a method outside of platform invoke has no effect.","pos":[0,118],"source":"Calling <xref:System.Runtime.InteropServices.Marshal.Prelink%2A> on a method outside of platform invoke has no effect."},{"content":"To execute setup tasks on all platform invoke methods in a type, use <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A?displayProperty=fullName&gt;</ph>.","pos":[119,273],"source":" To execute setup tasks on all platform invoke methods in a type, use <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A?displayProperty=fullName>."}]}]}],"pos":[301733,302463],"yaml":true,"extradata":"MT"},{"content":"The method to be checked.","nodes":[{"pos":[0,25],"content":"The method to be checked.","nodes":[{"content":"The method to be checked.","pos":[0,25]}]}],"pos":[302635,302661],"yaml":true},{"content":"The <code>m</code> parameter is `null`.","nodes":[{"pos":[0,39],"content":"The <ph id=\"ph1\">&lt;code&gt;m&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>m</code> parameter is `null`."}],"pos":[302837,302877],"yaml":true},{"content":"The <code>m</code> parameter is not a <xref href=\"System.Reflection.MethodInfo\"></xref> object.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;code&gt;m&lt;/code&gt;</ph> parameter is not a <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> object.","source":"The <code>m</code> parameter is not a <xref href=\"System.Reflection.MethodInfo\"></xref> object."}],"pos":[302971,303067],"yaml":true},{"content":"Performs a pre-link check for all methods on a class.","nodes":[{"pos":[0,53],"content":"Performs a pre-link check for all methods on a class.","nodes":[{"content":"Performs a pre-link check for all methods on a class.","pos":[0,53]}]}],"pos":[304300,304354],"yaml":true},{"content":"The <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A> method invokes <xref:System.Runtime.InteropServices.Marshal.Prelink%2A?displayProperty=fullName> on every method for a given type. <xref:System.Runtime.InteropServices.Marshal.Prelink%2A> executes one-time method setup tasks without calling each method. You can use <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A> only for platform invoke calls.","nodes":[{"pos":[0,421],"content":"The <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A> method invokes <xref:System.Runtime.InteropServices.Marshal.Prelink%2A?displayProperty=fullName> on every method for a given type. <xref:System.Runtime.InteropServices.Marshal.Prelink%2A> executes one-time method setup tasks without calling each method. You can use <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A> only for platform invoke calls.","nodes":[{"content":"The <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A> method invokes <xref:System.Runtime.InteropServices.Marshal.Prelink%2A?displayProperty=fullName> on every method for a given type. <xref:System.Runtime.InteropServices.Marshal.Prelink%2A> executes one-time method setup tasks without calling each method. You can use <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A> only for platform invoke calls.","pos":[0,421],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A&gt;</ph> method invokes <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Prelink%2A?displayProperty=fullName&gt;</ph> on every method for a given type.","pos":[0,194],"source":"The <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A> method invokes <xref:System.Runtime.InteropServices.Marshal.Prelink%2A?displayProperty=fullName> on every method for a given type."},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.Prelink%2A&gt;</ph> executes one-time method setup tasks without calling each method.","pos":[195,317],"source":" <xref:System.Runtime.InteropServices.Marshal.Prelink%2A> executes one-time method setup tasks without calling each method."},{"content":"You can use <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A&gt;</ph> only for platform invoke calls.","pos":[318,421],"source":" You can use <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A> only for platform invoke calls."}]}]}],"pos":[304365,304787],"yaml":true,"extradata":"MT"},{"content":"The class whose methods are to be checked.","nodes":[{"pos":[0,42],"content":"The class whose methods are to be checked.","nodes":[{"content":"The class whose methods are to be checked.","pos":[0,42]}]}],"pos":[304921,304964],"yaml":true},{"content":"The <code>c</code> parameter is `null`.","nodes":[{"pos":[0,39],"content":"The <ph id=\"ph1\">&lt;code&gt;c&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>c</code> parameter is `null`."}],"pos":[305143,305183],"yaml":true},{"content":"Copies all characters up to the first null character from an unmanaged ANSI string to a managed <xref href=\"System.String\"></xref>, and widens each ANSI character to Unicode.","nodes":[{"pos":[0,174],"content":"Copies all characters up to the first null character from an unmanaged ANSI string to a managed <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>, and widens each ANSI character to Unicode.","source":"Copies all characters up to the first null character from an unmanaged ANSI string to a managed <xref href=\"System.String\"></xref>, and widens each ANSI character to Unicode."}],"pos":[306458,306633],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=fullName> methods.","nodes":[{"pos":[0,518],"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=fullName> methods.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=fullName> methods.","pos":[0,518],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A&gt;</ph> is useful for custom marshaling or when mixing managed and unmanaged code.","pos":[0,139],"source":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code."},{"content":"Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate.","pos":[140,260]},{"content":"This method provides the opposite functionality of the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=fullName&gt;</ph> methods.","pos":[261,518],"source":" This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=fullName> methods."}]}]}],"pos":[306644,307163],"yaml":true,"extradata":"MT"},{"content":"The address of the first character of the unmanaged string.","nodes":[{"pos":[0,59],"content":"The address of the first character of the unmanaged string.","nodes":[{"content":"The address of the first character of the unmanaged string.","pos":[0,59]}]}],"pos":[307681,307741],"yaml":true},{"content":"A managed string that holds a copy of the unmanaged ANSI string. If <code>ptr</code> is `null`, the method returns a null string.","nodes":[{"pos":[0,129],"content":"A managed string that holds a copy of the unmanaged ANSI string. If <code>ptr</code> is `null`, the method returns a null string.","nodes":[{"content":"A managed string that holds a copy of the unmanaged ANSI string.","pos":[0,64]},{"content":"If <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, the method returns a null string.","pos":[65,129],"source":" If <code>ptr</code> is `null`, the method returns a null string."}]}],"pos":[307798,307928],"yaml":true},{"content":"Allocates a managed <xref href=\"System.String\"></xref>, copies a specified number of characters from an unmanaged ANSI string into it, and widens each ANSI character to Unicode.","nodes":[{"pos":[0,177],"content":"Allocates a managed <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>, copies a specified number of characters from an unmanaged ANSI string into it, and widens each ANSI character to Unicode.","source":"Allocates a managed <xref href=\"System.String\"></xref>, copies a specified number of characters from an unmanaged ANSI string into it, and widens each ANSI character to Unicode."}],"pos":[309652,309830],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=fullName> methods.","nodes":[{"pos":[0,518],"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=fullName> methods.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=fullName> methods.","pos":[0,518],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A&gt;</ph> is useful for custom marshaling or when mixing managed and unmanaged code.","pos":[0,139],"source":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code."},{"content":"Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate.","pos":[140,260]},{"content":"This method provides the opposite functionality of the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=fullName&gt;</ph> methods.","pos":[261,518],"source":" This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=fullName> methods."}]}]}],"pos":[309841,310360],"yaml":true,"extradata":"MT"},{"content":"The address of the first character of the unmanaged string.","nodes":[{"pos":[0,59],"content":"The address of the first character of the unmanaged string.","nodes":[{"content":"The address of the first character of the unmanaged string.","pos":[0,59]}]}],"pos":[310894,310954],"yaml":true},{"content":"The byte count of the input string to copy.","nodes":[{"pos":[0,43],"content":"The byte count of the input string to copy.","nodes":[{"content":"The byte count of the input string to copy.","pos":[0,43]}]}],"pos":[311012,311056],"yaml":true},{"content":"A managed string that holds a copy of the native ANSI string if the value of the <code>ptr</code> parameter is not `null`; otherwise, this method returns `null`.","nodes":[{"pos":[0,161],"content":"A managed string that holds a copy of the native ANSI string if the value of the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter is not <ph id=\"ph2\">`null`</ph>; otherwise, this method returns <ph id=\"ph3\">`null`</ph>.","source":"A managed string that holds a copy of the native ANSI string if the value of the <code>ptr</code> parameter is not `null`; otherwise, this method returns `null`."}],"pos":[311113,311275],"yaml":true},{"content":"<code>len</code> is less than zero.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;len&lt;/code&gt;</ph> is less than zero.","source":"<code>len</code> is less than zero."}],"pos":[311451,311487],"yaml":true},{"content":"Allocates a managed <xref href=\"System.String\"></xref> and copies all characters up to the first null character from a string stored in unmanaged memory into it.","nodes":[{"pos":[0,161],"content":"Allocates a managed <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> and copies all characters up to the first null character from a string stored in unmanaged memory into it.","source":"Allocates a managed <xref href=\"System.String\"></xref> and copies all characters up to the first null character from a string stored in unmanaged memory into it."}],"pos":[313066,313228],"yaml":true},{"content":"If the current platform is Unicode, each ANSI character is widened to a Unicode character and this method calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A>. Otherwise, this method calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A>.  \n  \n <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A?displayProperty=fullName> methods.","nodes":[{"pos":[0,271],"content":"If the current platform is Unicode, each ANSI character is widened to a Unicode character and this method calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A>. Otherwise, this method calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A>.","nodes":[{"content":"If the current platform is Unicode, each ANSI character is widened to a Unicode character and this method calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A>. Otherwise, this method calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A>.","pos":[0,271],"nodes":[{"content":"If the current platform is Unicode, each ANSI character is widened to a Unicode character and this method calls <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A&gt;</ph>.","pos":[0,176],"source":"If the current platform is Unicode, each ANSI character is widened to a Unicode character and this method calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A>."},{"content":"Otherwise, this method calls <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A&gt;</ph>.","pos":[177,271],"source":" Otherwise, this method calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A>."}]}]},{"pos":[278,849],"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A?displayProperty=fullName> methods.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A?displayProperty=fullName> methods.","pos":[0,571],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A&gt;</ph> is useful for custom marshaling or when mixing managed and unmanaged code.","pos":[0,139],"source":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> is useful for custom marshaling or when mixing managed and unmanaged code."},{"content":"Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate.","pos":[140,260]},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A&gt;</ph> provides the opposite functionality of the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A?displayProperty=fullName&gt;</ph> methods.","pos":[261,571],"source":" <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A?displayProperty=fullName> methods."}]}]}],"pos":[313239,314093],"yaml":true,"extradata":"MT"},{"content":"For Unicode platforms, the address of the first Unicode character.  \n  \n -or-  \n  \n For ANSI plaforms, the address of the first ANSI character.","nodes":[{"pos":[0,66],"content":"For Unicode platforms, the address of the first Unicode character.","nodes":[{"content":"For Unicode platforms, the address of the first Unicode character.","pos":[0,66]}]},{"pos":[73,77],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[84,143],"content":"For ANSI plaforms, the address of the first ANSI character.","nodes":[{"content":"For ANSI plaforms, the address of the first ANSI character.","pos":[0,59]}]}],"pos":[314242,314392],"yaml":true},{"content":"A managed string that holds a copy of the unmanaged string if the value of the <code>ptr</code> parameter is not `null`; otherwise, this method returns `null`.","nodes":[{"pos":[0,159],"content":"A managed string that holds a copy of the unmanaged string if the value of the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter is not <ph id=\"ph2\">`null`</ph>; otherwise, this method returns <ph id=\"ph3\">`null`</ph>.","source":"A managed string that holds a copy of the unmanaged string if the value of the <code>ptr</code> parameter is not `null`; otherwise, this method returns `null`."}],"pos":[314449,314609],"yaml":true},{"content":"Allocates a managed <xref href=\"System.String\"></xref> and copies the specified number of characters from a string stored in unmanaged memory into it.","nodes":[{"pos":[0,150],"content":"Allocates a managed <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> and copies the specified number of characters from a string stored in unmanaged memory into it.","source":"Allocates a managed <xref href=\"System.String\"></xref> and copies the specified number of characters from a string stored in unmanaged memory into it."}],"pos":[316029,316180],"yaml":true},{"content":"On Unicode platforms, this method calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A>; on ANSI platforms, it calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A>. No transformations are done before these methods are called.  \n  \n <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A?displayProperty=fullName>.","nodes":[{"pos":[0,259],"content":"On Unicode platforms, this method calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A>; on ANSI platforms, it calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A>. No transformations are done before these methods are called.","nodes":[{"content":"On Unicode platforms, this method calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A>; on ANSI platforms, it calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A>. No transformations are done before these methods are called.","pos":[0,259],"nodes":[{"content":"On Unicode platforms, this method calls <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A&gt;</ph>; on ANSI platforms, it calls <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A&gt;</ph>.","pos":[0,198],"source":"On Unicode platforms, this method calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A>; on ANSI platforms, it calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A>."},{"content":"No transformations are done before these methods are called.","pos":[199,259]}]}]},{"pos":[266,825],"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A?displayProperty=fullName>.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A?displayProperty=fullName>.","pos":[0,559],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A&gt;</ph> is useful for custom marshaling or when mixing managed and unmanaged code.","pos":[0,139],"source":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> is useful for custom marshaling or when mixing managed and unmanaged code."},{"content":"Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate.","pos":[140,260]},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A&gt;</ph> provides the opposite functionality of <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A?displayProperty=fullName&gt;</ph>.","pos":[261,559],"source":" <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A?displayProperty=fullName>."}]}]}],"pos":[316191,317021],"yaml":true,"extradata":"MT"},{"content":"For Unicode platforms, the address of the first Unicode character.  \n  \n -or-  \n  \n For ANSI plaforms, the address of the first ANSI character.","nodes":[{"pos":[0,66],"content":"For Unicode platforms, the address of the first Unicode character.","nodes":[{"content":"For Unicode platforms, the address of the first Unicode character.","pos":[0,66]}]},{"pos":[73,77],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[84,143],"content":"For ANSI plaforms, the address of the first ANSI character.","nodes":[{"content":"For ANSI plaforms, the address of the first ANSI character.","pos":[0,59]}]}],"pos":[317179,317329],"yaml":true},{"content":"The number of characters to copy.","nodes":[{"pos":[0,33],"content":"The number of characters to copy.","nodes":[{"content":"The number of characters to copy.","pos":[0,33]}]}],"pos":[317387,317421],"yaml":true},{"content":"A managed string that holds a copy of the native string if the value of the <code>ptr</code> parameter is not `null`; otherwise, this method returns `null`.","nodes":[{"pos":[0,156],"content":"A managed string that holds a copy of the native string if the value of the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter is not <ph id=\"ph2\">`null`</ph>; otherwise, this method returns <ph id=\"ph3\">`null`</ph>.","source":"A managed string that holds a copy of the native string if the value of the <code>ptr</code> parameter is not `null`; otherwise, this method returns `null`."}],"pos":[317478,317635],"yaml":true},{"content":"<code>len</code> is less than zero.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;len&lt;/code&gt;</ph> is less than zero.","source":"<code>len</code> is less than zero."}],"pos":[317811,317847],"yaml":true},{"content":"Allocates a managed <xref href=\"System.String\"></xref> and copies a [binary string (BSTR)](https://msdn.microsoft.com/library/ms221069\\(v=vs.85\\).aspx) stored in unmanaged memory into it.","nodes":[{"pos":[0,187],"content":"Allocates a managed <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> and copies a <bpt id=\"p1\">[</bpt>binary string (BSTR)<ept id=\"p1\">](https://msdn.microsoft.com/library/ms221069\\(v=vs.85\\).aspx)</ept> stored in unmanaged memory into it.","source":"Allocates a managed <xref href=\"System.String\"></xref> and copies a [binary string (BSTR)](https://msdn.microsoft.com/library/ms221069\\(v=vs.85\\).aspx) stored in unmanaged memory into it."}],"pos":[319122,319310],"yaml":true},{"content":"Call this method only on strings that were allocated with the unmanaged [SysAllocString](https://msdn.microsoft.com/library/ms221458\\(v=vs.85\\).aspx) and [SysAllocStringLen](https://msdn.microsoft.com/library/ms221639\\(v=vs.85\\).aspx) functions.  \n  \n <xref:System.Runtime.InteropServices.Marshal.PtrToStringBSTR%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToBSTR%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,245],"content":"Call this method only on strings that were allocated with the unmanaged <bpt id=\"p1\">[</bpt>SysAllocString<ept id=\"p1\">](https://msdn.microsoft.com/library/ms221458\\(v=vs.85\\).aspx)</ept> and <bpt id=\"p2\">[</bpt>SysAllocStringLen<ept id=\"p2\">](https://msdn.microsoft.com/library/ms221639\\(v=vs.85\\).aspx)</ept> functions.","source":"Call this method only on strings that were allocated with the unmanaged [SysAllocString](https://msdn.microsoft.com/library/ms221458\\(v=vs.85\\).aspx) and [SysAllocStringLen](https://msdn.microsoft.com/library/ms221639\\(v=vs.85\\).aspx) functions."},{"pos":[252,662],"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringBSTR%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToBSTR%2A?displayProperty=fullName> method.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringBSTR%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToBSTR%2A?displayProperty=fullName> method.","pos":[0,410],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringBSTR%2A&gt;</ph> is useful for custom marshaling or when mixing managed and unmanaged code.","pos":[0,139],"source":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringBSTR%2A> is useful for custom marshaling or when mixing managed and unmanaged code."},{"content":"Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate.","pos":[140,260]},{"content":"This method provides the opposite functionality of the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StringToBSTR%2A?displayProperty=fullName&gt;</ph> method.","pos":[261,410],"source":" This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToBSTR%2A?displayProperty=fullName> method."}]}]}],"pos":[319321,319992],"yaml":true,"extradata":"MT"},{"content":"The address of the first character of the unmanaged string.","nodes":[{"pos":[0,59],"content":"The address of the first character of the unmanaged string.","nodes":[{"content":"The address of the first character of the unmanaged string.","pos":[0,59]}]}],"pos":[320141,320201],"yaml":true},{"content":"A managed string that holds a copy of the unmanaged string.","nodes":[{"pos":[0,59],"content":"A managed string that holds a copy of the unmanaged string.","nodes":[{"content":"A managed string that holds a copy of the unmanaged string.","pos":[0,59]}]}],"pos":[320258,320318],"yaml":true},{"content":"<code>ptr</code> equals <xref href=\"System.IntPtr.Zero\"></xref>.","nodes":[{"pos":[0,64],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> equals <ph id=\"ph2\">&lt;xref href=\"System.IntPtr.Zero\"&gt;&lt;/xref&gt;</ph>.","source":"<code>ptr</code> equals <xref href=\"System.IntPtr.Zero\"></xref>."}],"pos":[320502,320567],"yaml":true},{"content":"Allocates a managed <xref href=\"System.String\"></xref> and copies all characters up to the first null character from an unmanaged Unicode string into it.","nodes":[{"pos":[0,153],"content":"Allocates a managed <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> and copies all characters up to the first null character from an unmanaged Unicode string into it.","source":"Allocates a managed <xref href=\"System.String\"></xref> and copies all characters up to the first null character from an unmanaged Unicode string into it."}],"pos":[322140,322294],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=fullName> methods.","nodes":[{"pos":[0,523],"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=fullName> methods.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=fullName> methods.","pos":[0,523],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A&gt;</ph> is useful for custom marshaling or for use when mixing managed and unmanaged code.","pos":[0,146],"source":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code."},{"content":"Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate.","pos":[147,267]},{"content":"This method provides the opposite functionality of the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=fullName&gt;</ph> methods.","pos":[268,523],"source":" This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=fullName> methods."}]}]}],"pos":[322305,322829],"yaml":true,"extradata":"MT"},{"content":"The address of the first character of the unmanaged string.","nodes":[{"pos":[0,59],"content":"The address of the first character of the unmanaged string.","nodes":[{"content":"The address of the first character of the unmanaged string.","pos":[0,59]}]}],"pos":[322977,323037],"yaml":true},{"content":"A managed string that holds a copy of the unmanaged string if the value of the <code>ptr</code> parameter is not `null`; otherwise, this method returns `null`.","nodes":[{"pos":[0,159],"content":"A managed string that holds a copy of the unmanaged string if the value of the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter is not <ph id=\"ph2\">`null`</ph>; otherwise, this method returns <ph id=\"ph3\">`null`</ph>.","source":"A managed string that holds a copy of the unmanaged string if the value of the <code>ptr</code> parameter is not `null`; otherwise, this method returns `null`."}],"pos":[323094,323254],"yaml":true},{"content":"Allocates a managed <xref href=\"System.String\"></xref> and copies a specified number of characters from an unmanaged Unicode string into it.","nodes":[{"pos":[0,140],"content":"Allocates a managed <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> and copies a specified number of characters from an unmanaged Unicode string into it.","source":"Allocates a managed <xref href=\"System.String\"></xref> and copies a specified number of characters from an unmanaged Unicode string into it."}],"pos":[324971,325112],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=fullName> methods.","nodes":[{"pos":[0,515],"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=fullName> methods.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=fullName> methods.","pos":[0,515],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A&gt;</ph> is useful for custom marshaling or when mixing managed and unmanaged code.","pos":[0,138],"source":"<xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A> is useful for custom marshaling or when mixing managed and unmanaged code."},{"content":"Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate.","pos":[139,259]},{"content":"This method provides the opposite functionality of the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=fullName&gt;</ph> methods.","pos":[260,515],"source":" This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=fullName> methods."}]}]}],"pos":[325123,325639],"yaml":true,"extradata":"MT"},{"content":"The address of the first character of the unmanaged string.","nodes":[{"pos":[0,59],"content":"The address of the first character of the unmanaged string.","nodes":[{"content":"The address of the first character of the unmanaged string.","pos":[0,59]}]}],"pos":[325796,325856],"yaml":true},{"content":"The number of Unicode characters to copy.","nodes":[{"pos":[0,41],"content":"The number of Unicode characters to copy.","nodes":[{"content":"The number of Unicode characters to copy.","pos":[0,41]}]}],"pos":[325914,325956],"yaml":true},{"content":"A managed string that holds a copy of the unmanaged string if the value of the <code>ptr</code> parameter is not `null`; otherwise, this method returns `null`.","nodes":[{"pos":[0,159],"content":"A managed string that holds a copy of the unmanaged string if the value of the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter is not <ph id=\"ph2\">`null`</ph>; otherwise, this method returns <ph id=\"ph3\">`null`</ph>.","source":"A managed string that holds a copy of the unmanaged string if the value of the <code>ptr</code> parameter is not `null`; otherwise, this method returns `null`."}],"pos":[326013,326173],"yaml":true},{"content":"Marshals data from an unmanaged block of memory to a managed object.","nodes":[{"pos":[0,68],"content":"Marshals data from an unmanaged block of memory to a managed object.","nodes":[{"content":"Marshals data from an unmanaged block of memory to a managed object.","pos":[0,68]}]}],"pos":[330020,330089],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> is often necessary in COM interop and platform invoke when structure parameters are represented as an <xref:System.IntPtr?displayProperty=fullName> value. You cannot use this overload method with value types.","nodes":[{"pos":[0,272],"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> is often necessary in COM interop and platform invoke when structure parameters are represented as an <xref:System.IntPtr?displayProperty=fullName> value. You cannot use this overload method with value types.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> is often necessary in COM interop and platform invoke when structure parameters are represented as an <xref:System.IntPtr?displayProperty=fullName> value. You cannot use this overload method with value types.","pos":[0,272],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A&gt;</ph> is often necessary in COM interop and platform invoke when structure parameters are represented as an <ph id=\"ph2\">&lt;xref:System.IntPtr?displayProperty=fullName&gt;</ph> value.","pos":[0,218],"source":"<xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> is often necessary in COM interop and platform invoke when structure parameters are represented as an <xref:System.IntPtr?displayProperty=fullName> value."},{"content":"You cannot use this overload method with value types.","pos":[219,272]}]}]}],"pos":[330100,330373],"yaml":true,"extradata":"MT"},{"content":"A pointer to an unmanaged block of memory.","nodes":[{"pos":[0,42],"content":"A pointer to an unmanaged block of memory.","nodes":[{"content":"A pointer to an unmanaged block of memory.","pos":[0,42]}]}],"pos":[330603,330646],"yaml":true},{"content":"The object to which the data is to be copied. This must be an instance of a formatted class.","nodes":[{"pos":[0,92],"content":"The object to which the data is to be copied. This must be an instance of a formatted class.","nodes":[{"content":"The object to which the data is to be copied. This must be an instance of a formatted class.","pos":[0,92],"nodes":[{"content":"The object to which the data is to be copied.","pos":[0,45]},{"content":"This must be an instance of a formatted class.","pos":[46,92]}]}]}],"pos":[330711,330804],"yaml":true},{"content":"Structure layout is not sequential or explicit.  \n  \n -or-  \n  \n Structure is a boxed value type.","nodes":[{"pos":[0,47],"content":"Structure layout is not sequential or explicit.","nodes":[{"content":"Structure layout is not sequential or explicit.","pos":[0,47]}]},{"pos":[54,58],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[65,97],"content":"Structure is a boxed value type.","nodes":[{"content":"Structure is a boxed value type.","pos":[0,32]}]}],"pos":[330979,331083],"yaml":true},{"content":"Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.","nodes":[{"pos":[0,106],"content":"Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.","nodes":[{"content":"Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.","pos":[0,106]}]}],"pos":[332785,332892],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> is often necessary in COM interop and platform invoke when structure parameters are represented as an <xref:System.IntPtr?displayProperty=fullName> value. You can pass a value type to this overload method. In this case, the returned object is a boxed instance.","nodes":[{"pos":[0,324],"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> is often necessary in COM interop and platform invoke when structure parameters are represented as an <xref:System.IntPtr?displayProperty=fullName> value. You can pass a value type to this overload method. In this case, the returned object is a boxed instance.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> is often necessary in COM interop and platform invoke when structure parameters are represented as an <xref:System.IntPtr?displayProperty=fullName> value. You can pass a value type to this overload method. In this case, the returned object is a boxed instance.","pos":[0,324],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A&gt;</ph> is often necessary in COM interop and platform invoke when structure parameters are represented as an <ph id=\"ph2\">&lt;xref:System.IntPtr?displayProperty=fullName&gt;</ph> value.","pos":[0,218],"source":"<xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> is often necessary in COM interop and platform invoke when structure parameters are represented as an <xref:System.IntPtr?displayProperty=fullName> value."},{"content":"You can pass a value type to this overload method.","pos":[219,269]},{"content":"In this case, the returned object is a boxed instance.","pos":[270,324]}]}]}],"pos":[332903,333228],"yaml":true,"extradata":"MT"},{"content":"A pointer to an unmanaged block of memory.","nodes":[{"pos":[0,42],"content":"A pointer to an unmanaged block of memory.","nodes":[{"content":"A pointer to an unmanaged block of memory.","pos":[0,42]}]}],"pos":[334698,334741],"yaml":true},{"content":"The type of object to be created. This object must represent a formatted class or a structure.","nodes":[{"pos":[0,94],"content":"The type of object to be created. This object must represent a formatted class or a structure.","nodes":[{"content":"The type of object to be created. This object must represent a formatted class or a structure.","pos":[0,94],"nodes":[{"content":"The type of object to be created.","pos":[0,33]},{"content":"This object must represent a formatted class or a structure.","pos":[34,94]}]}]}],"pos":[334808,334903],"yaml":true},{"content":"A managed object containing the data pointed to by the <code>ptr</code> parameter.","nodes":[{"pos":[0,82],"content":"A managed object containing the data pointed to by the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter.","source":"A managed object containing the data pointed to by the <code>ptr</code> parameter."}],"pos":[334960,335043],"yaml":true},{"content":"The <code>structureType</code> parameter layout is not sequential or explicit.  \n  \n -or-  \n  \n The <code>structureType</code> parameter is a generic type.","nodes":[{"pos":[0,78],"content":"The <ph id=\"ph1\">&lt;code&gt;structureType&lt;/code&gt;</ph> parameter layout is not sequential or explicit.","source":"The <code>structureType</code> parameter layout is not sequential or explicit."},{"pos":[85,89],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[96,155],"content":"The <ph id=\"ph1\">&lt;code&gt;structureType&lt;/code&gt;</ph> parameter is a generic type.","source":"The <code>structureType</code> parameter is a generic type."}],"pos":[335218,335380],"yaml":true},{"content":"<code>structureType</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;structureType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>structureType</code> is `null`."}],"pos":[335482,335520],"yaml":true},{"content":"The class specified by <code>structureType</code> does not have an accessible default constructor.","nodes":[{"pos":[0,98],"content":"The class specified by <ph id=\"ph1\">&lt;code&gt;structureType&lt;/code&gt;</ph> does not have an accessible default constructor.","source":"The class specified by <code>structureType</code> does not have an accessible default constructor."}],"pos":[335624,335723],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,199],"content":"Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter.","nodes":[{"content":"Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter.","pos":[0,134]}]}],"pos":[337389,337593],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStructure%60%601%28System.IntPtr%29> is often necessary in COM interop and platform invoke when structure parameters are represented as <xref:System.IntPtr?displayProperty=fullName> values. You can pass a value type to this method overload.","nodes":[{"pos":[0,290],"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStructure%60%601%28System.IntPtr%29> is often necessary in COM interop and platform invoke when structure parameters are represented as <xref:System.IntPtr?displayProperty=fullName> values. You can pass a value type to this method overload.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStructure%60%601%28System.IntPtr%29> is often necessary in COM interop and platform invoke when structure parameters are represented as <xref:System.IntPtr?displayProperty=fullName> values. You can pass a value type to this method overload.","pos":[0,290],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStructure%60%601%28System.IntPtr%29&gt;</ph> is often necessary in COM interop and platform invoke when structure parameters are represented as <ph id=\"ph2\">&lt;xref:System.IntPtr?displayProperty=fullName&gt;</ph> values.","pos":[0,239],"source":"<xref:System.Runtime.InteropServices.Marshal.PtrToStructure%60%601%28System.IntPtr%29> is often necessary in COM interop and platform invoke when structure parameters are represented as <xref:System.IntPtr?displayProperty=fullName> values."},{"content":"You can pass a value type to this method overload.","pos":[240,290]}]}]}],"pos":[337604,337895],"yaml":true,"extradata":"MT"},{"content":"A pointer to an unmanaged block of memory.","nodes":[{"pos":[0,42],"content":"A pointer to an unmanaged block of memory.","nodes":[{"content":"A pointer to an unmanaged block of memory.","pos":[0,42]}]}],"pos":[338041,338084],"yaml":true},{"content":"The type of the object to which the data is to be copied. This must be a formatted class or a structure.","nodes":[{"pos":[0,104],"content":"The type of the object to which the data is to be copied. This must be a formatted class or a structure.","nodes":[{"content":"The type of the object to which the data is to be copied. This must be a formatted class or a structure.","pos":[0,104],"nodes":[{"content":"The type of the object to which the data is to be copied.","pos":[0,57]},{"content":"This must be a formatted class or a structure.","pos":[58,104]}]}]}],"pos":[338135,338240],"yaml":true},{"content":"A managed object that contains the data that the <code>ptr</code> parameter points to.","nodes":[{"pos":[0,86],"content":"A managed object that contains the data that the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter points to.","source":"A managed object that contains the data that the <code>ptr</code> parameter points to."}],"pos":[338285,338372],"yaml":true},{"content":"The layout of <code>T</code> is not sequential or explicit.","nodes":[{"pos":[0,59],"content":"The layout of <ph id=\"ph1\">&lt;code&gt;T&lt;/code&gt;</ph> is not sequential or explicit.","source":"The layout of <code>T</code> is not sequential or explicit."}],"pos":[338550,338610],"yaml":true},{"content":"The class specified by <code>T</code> does not have an accessible default constructor.","nodes":[{"pos":[0,86],"content":"The class specified by <ph id=\"ph1\">&lt;code&gt;T&lt;/code&gt;</ph> does not have an accessible default constructor.","source":"The class specified by <code>T</code> does not have an accessible default constructor."}],"pos":[338714,338801],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Marshals data from an unmanaged block of memory to a managed object of the specified type.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,155],"content":"Marshals data from an unmanaged block of memory to a managed object of the specified type.","nodes":[{"content":"Marshals data from an unmanaged block of memory to a managed object of the specified type.","pos":[0,90]}]}],"pos":[340331,340491],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStructure%60%601%28System.IntPtr%2C%60%600%29> is often necessary in COM interop and platform invoke when structure parameters are represented as <xref:System.IntPtr> values. You cannot use this method overload with value types.","nodes":[{"pos":[0,278],"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStructure%60%601%28System.IntPtr%2C%60%600%29> is often necessary in COM interop and platform invoke when structure parameters are represented as <xref:System.IntPtr> values. You cannot use this method overload with value types.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.PtrToStructure%60%601%28System.IntPtr%2C%60%600%29> is often necessary in COM interop and platform invoke when structure parameters are represented as <xref:System.IntPtr> values. You cannot use this method overload with value types.","pos":[0,278],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStructure%60%601%28System.IntPtr%2C%60%600%29&gt;</ph> is often necessary in COM interop and platform invoke when structure parameters are represented as <ph id=\"ph2\">&lt;xref:System.IntPtr&gt;</ph> values.","pos":[0,224],"source":"<xref:System.Runtime.InteropServices.Marshal.PtrToStructure%60%601%28System.IntPtr%2C%60%600%29> is often necessary in COM interop and platform invoke when structure parameters are represented as <xref:System.IntPtr> values."},{"content":"You cannot use this method overload with value types.","pos":[225,278]}]}]}],"pos":[340502,340781],"yaml":true,"extradata":"MT"},{"content":"A pointer to an unmanaged block of memory.","nodes":[{"pos":[0,42],"content":"A pointer to an unmanaged block of memory.","nodes":[{"content":"A pointer to an unmanaged block of memory.","pos":[0,42]}]}],"pos":[340943,340986],"yaml":true},{"content":"The object to which the data is to be copied.","nodes":[{"pos":[0,45],"content":"The object to which the data is to be copied.","nodes":[{"content":"The object to which the data is to be copied.","pos":[0,45]}]}],"pos":[341039,341085],"yaml":true},{"content":"The type of <code>structure</code>. This must be a formatted class.","nodes":[{"pos":[0,67],"content":"The type of <code>structure</code>. This must be a formatted class.","nodes":[{"content":"The type of <ph id=\"ph1\">&lt;code&gt;structure&lt;/code&gt;</ph>.","pos":[0,35],"source":"The type of <code>structure</code>."},{"content":"This must be a formatted class.","pos":[36,67]}]}],"pos":[341136,341204],"yaml":true},{"content":"Structure layout is not sequential or explicit.","nodes":[{"pos":[0,47],"content":"Structure layout is not sequential or explicit.","nodes":[{"content":"Structure layout is not sequential or explicit.","pos":[0,47]}]}],"pos":[341382,341430],"yaml":true},{"content":"Requests a pointer to a specified interface from a COM object.","nodes":[{"pos":[0,62],"content":"Requests a pointer to a specified interface from a COM object.","nodes":[{"content":"Requests a pointer to a specified interface from a COM object.","pos":[0,62]}]}],"pos":[343047,343110],"yaml":true},{"content":"The <xref:System.Runtime.InteropServices.Marshal.QueryInterface%2A> method exposes the [IUnknown::QueryInterface](http://go.microsoft.com/fwlink/?LinkID=144867) method of a COM object, which attempts to obtain a specific interface pointer. Using `QueryInterface` on a COM object is the same as performing a cast operation in managed code. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer. To obtain an <xref:System.IntPtr> value that represents a [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface pointer, you can call <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=fullName>, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName>.","nodes":[{"pos":[0,1081],"content":"The <xref:System.Runtime.InteropServices.Marshal.QueryInterface%2A> method exposes the [IUnknown::QueryInterface](http://go.microsoft.com/fwlink/?LinkID=144867) method of a COM object, which attempts to obtain a specific interface pointer. Using `QueryInterface` on a COM object is the same as performing a cast operation in managed code. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer. To obtain an <xref:System.IntPtr> value that represents a [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface pointer, you can call <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=fullName>, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.QueryInterface%2A&gt;</ph> method exposes the <bpt id=\"p1\">[</bpt>IUnknown::QueryInterface<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=144867)</ept> method of a COM object, which attempts to obtain a specific interface pointer.","pos":[0,239],"source":"The <xref:System.Runtime.InteropServices.Marshal.QueryInterface%2A> method exposes the [IUnknown::QueryInterface](http://go.microsoft.com/fwlink/?LinkID=144867) method of a COM object, which attempts to obtain a specific interface pointer."},{"content":"Using <ph id=\"ph1\">`QueryInterface`</ph> on a COM object is the same as performing a cast operation in managed code.","pos":[240,338],"source":" Using `QueryInterface` on a COM object is the same as performing a cast operation in managed code."},{"content":"Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned.","pos":[339,470]},{"content":"Always use <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName&gt;</ph> to decrement the reference count once you have finished with the pointer.","pos":[471,637],"source":" Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer."},{"content":"To obtain an <ph id=\"ph1\">&lt;xref:System.IntPtr&gt;</ph> value that represents a <bpt id=\"p1\">[</bpt>IUnknown<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148003)</ept> interface pointer, you can call <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=fullName&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName&gt;</ph>.","pos":[638,1081],"source":" To obtain an <xref:System.IntPtr> value that represents a [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface pointer, you can call <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=fullName>, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName>."}]}],"pos":[343121,344203],"yaml":true,"extradata":"MT"},{"content":"The interface to be queried.","nodes":[{"pos":[0,28],"content":"The interface to be queried.","nodes":[{"content":"The interface to be queried.","pos":[0,28]}]}],"pos":[344380,344409],"yaml":true},{"content":"The interface identifier (IID) of the requested interface.","nodes":[{"pos":[0,58],"content":"The interface identifier (IID) of the requested interface.","nodes":[{"content":"The interface identifier (IID) of the requested interface.","pos":[0,58]}]}],"pos":[344466,344525],"yaml":true},{"content":"When this method returns, contains a reference to the returned interface.","nodes":[{"pos":[0,73],"content":"When this method returns, contains a reference to the returned interface.","nodes":[{"content":"When this method returns, contains a reference to the returned interface.","pos":[0,73]}]}],"pos":[344584,344658],"yaml":true},{"content":"An HRESULT that indicates the success or failure of the call.","nodes":[{"pos":[0,61],"content":"An HRESULT that indicates the success or failure of the call.","nodes":[{"content":"An HRESULT that indicates the success or failure of the call.","pos":[0,61]}]}],"pos":[344714,344776],"yaml":true},{"content":"Reads a single byte at a given offset (or index) from unmanaged memory.","nodes":[{"pos":[0,71],"content":"Reads a single byte at a given offset (or index) from unmanaged memory.","nodes":[{"content":"Reads a single byte at a given offset (or index) from unmanaged memory.","pos":[0,71]}]}],"pos":[346457,346529],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported.","nodes":[{"pos":[0,333],"content":"<xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReadByte%2A&gt;</ph> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before reading its element values.","pos":[0,333],"source":"<xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values."}]},{"pos":[340,393],"content":"Reading from unaligned memory locations is supported.","nodes":[{"content":"Reading from unaligned memory locations is supported.","pos":[0,53]}]}],"pos":[346540,346938],"yaml":true,"extradata":"MT"},{"content":"The base address in unmanaged memory from which to read.","nodes":[{"pos":[0,56],"content":"The base address in unmanaged memory from which to read.","nodes":[{"content":"The base address in unmanaged memory from which to read.","pos":[0,56]}]}],"pos":[348068,348125],"yaml":true},{"content":"An additional byte offset, which is added to the <code>ptr</code> parameter before reading.","nodes":[{"pos":[0,91],"content":"An additional byte offset, which is added to the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before reading.","source":"An additional byte offset, which is added to the <code>ptr</code> parameter before reading."}],"pos":[348183,348275],"yaml":true},{"content":"The byte read from unmanaged memory at the given offset.","nodes":[{"pos":[0,56],"content":"The byte read from unmanaged memory at the given offset.","nodes":[{"content":"The byte read from unmanaged memory at the given offset.","pos":[0,56]}]}],"pos":[348330,348387],"yaml":true},{"content":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.","nodes":[{"pos":[0,103],"content":"Base address (<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph>) plus offset byte (<ph id=\"ph2\">&lt;code&gt;ofs&lt;/code&gt;</ph>) produces a null or invalid address.","source":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address."}],"pos":[348570,348674],"yaml":true},{"content":"Reads a single byte at a given offset (or index) from unmanaged memory.","nodes":[{"pos":[0,71],"content":"Reads a single byte at a given offset (or index) from unmanaged memory.","nodes":[{"content":"Reads a single byte at a given offset (or index) from unmanaged memory.","pos":[0,71]}]}],"pos":[350271,350343],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported.","nodes":[{"pos":[0,333],"content":"<xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReadByte%2A&gt;</ph> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before reading its element values.","pos":[0,333],"source":"<xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values."}]},{"pos":[340,393],"content":"Reading from unaligned memory locations is supported.","nodes":[{"content":"Reading from unaligned memory locations is supported.","pos":[0,53]}]}],"pos":[350354,350752],"yaml":true,"extradata":"MT"},{"content":"The base address in unmanaged memory of the source object.","nodes":[{"pos":[0,58],"content":"The base address in unmanaged memory of the source object.","nodes":[{"content":"The base address in unmanaged memory of the source object.","pos":[0,58]}]}],"pos":[350901,350960],"yaml":true},{"content":"An additional byte offset, which is added to the <code>ptr</code> parameter before reading.","nodes":[{"pos":[0,91],"content":"An additional byte offset, which is added to the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before reading.","source":"An additional byte offset, which is added to the <code>ptr</code> parameter before reading."}],"pos":[351018,351110],"yaml":true},{"content":"The byte read from unmanaged memory at the given offset.","nodes":[{"pos":[0,56],"content":"The byte read from unmanaged memory at the given offset.","nodes":[{"content":"The byte read from unmanaged memory at the given offset.","pos":[0,56]}]}],"pos":[351165,351222],"yaml":true},{"content":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.","nodes":[{"pos":[0,103],"content":"Base address (<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph>) plus offset byte (<ph id=\"ph2\">&lt;code&gt;ofs&lt;/code&gt;</ph>) produces a null or invalid address.","source":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address."}],"pos":[351405,351509],"yaml":true},{"content":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.","nodes":[{"pos":[0,206],"content":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is an <ph id=\"ph2\">&lt;xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,98],"source":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object."},{"content":"This method does not accept <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"&gt;&lt;/xref&gt;</ph> parameters.","pos":[99,206],"source":" This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters."}]}],"pos":[351603,351810],"yaml":true},{"content":"Reads a single byte from unmanaged memory.","nodes":[{"pos":[0,42],"content":"Reads a single byte from unmanaged memory.","nodes":[{"content":"Reads a single byte from unmanaged memory.","pos":[0,42]}]}],"pos":[353364,353407],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported.","nodes":[{"pos":[0,373],"content":"<xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.","pos":[0,373],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReadByte%2A&gt;</ph> has an implied offset of 0.","pos":[0,85],"source":"<xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> has an implied offset of 0."},{"content":"This method enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before reading its element values.","pos":[86,373],"source":" This method enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values."}]}]},{"pos":[380,433],"content":"Reading from unaligned memory locations is supported.","nodes":[{"content":"Reading from unaligned memory locations is supported.","pos":[0,53]}]}],"pos":[353418,353856],"yaml":true,"extradata":"MT"},{"content":"The address in unmanaged memory from which to read.","nodes":[{"pos":[0,51],"content":"The address in unmanaged memory from which to read.","nodes":[{"content":"The address in unmanaged memory from which to read.","pos":[0,51]}]}],"pos":[354901,354953],"yaml":true},{"content":"The byte read from unmanaged memory.","nodes":[{"pos":[0,36],"content":"The byte read from unmanaged memory.","nodes":[{"content":"The byte read from unmanaged memory.","pos":[0,36]}]}],"pos":[355008,355045],"yaml":true},{"content":"<code>ptr</code> is not a recognized format.  \n  \n -or-  \n  \n <code>ptr</code> is `null`.  \n  \n -or-  \n  \n <code>ptr</code> is invalid.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is not a recognized format.","source":"<code>ptr</code> is not a recognized format."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,89],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>ptr</code> is `null`."},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,135],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is invalid.","source":"<code>ptr</code> is invalid."}],"pos":[355228,355374],"yaml":true},{"content":"Reads a 16-bit signed integer from unmanaged memory.","nodes":[{"pos":[0,52],"content":"Reads a 16-bit signed integer from unmanaged memory.","nodes":[{"content":"Reads a 16-bit signed integer from unmanaged memory.","pos":[0,52]}]}],"pos":[356917,356970],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style `Int16` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported.","nodes":[{"pos":[0,377],"content":"<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style `Int16` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A&gt;</ph> has an implied offset of 0.","pos":[0,86],"source":"<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> has an implied offset of 0."},{"content":"This method enables direct interaction with an unmanaged C-style <ph id=\"ph1\">`Int16`</ph> array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before reading its element values.","pos":[87,377],"source":" This method enables direct interaction with an unmanaged C-style `Int16` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values."}]},{"pos":[384,437],"content":"Reading from unaligned memory locations is supported.","nodes":[{"content":"Reading from unaligned memory locations is supported.","pos":[0,53]}]}],"pos":[356981,357423],"yaml":true,"extradata":"MT"},{"content":"The address in unmanaged memory from which to read.","nodes":[{"pos":[0,51],"content":"The address in unmanaged memory from which to read.","nodes":[{"content":"The address in unmanaged memory from which to read.","pos":[0,51]}]}],"pos":[358536,358588],"yaml":true},{"content":"The 16-bit signed integer read from unmanaged memory.","nodes":[{"pos":[0,53],"content":"The 16-bit signed integer read from unmanaged memory.","nodes":[{"content":"The 16-bit signed integer read from unmanaged memory.","pos":[0,53]}]}],"pos":[358644,358698],"yaml":true},{"content":"<code>ptr</code> is not a recognized format.  \n  \n -or-  \n  \n <code>ptr</code> is `null`.  \n  \n -or-  \n  \n <code>ptr</code> is invalid.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is not a recognized format.","source":"<code>ptr</code> is not a recognized format."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,89],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>ptr</code> is `null`."},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,135],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is invalid.","source":"<code>ptr</code> is invalid."}],"pos":[358882,359028],"yaml":true},{"content":"Reads a 16-bit signed integer at a given offset from unmanaged memory.","nodes":[{"pos":[0,70],"content":"Reads a 16-bit signed integer at a given offset from unmanaged memory.","nodes":[{"content":"Reads a 16-bit signed integer at a given offset from unmanaged memory.","pos":[0,70]}]}],"pos":[360631,360702],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported.","nodes":[{"pos":[0,335],"content":"<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A&gt;</ph> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before reading its element values.","pos":[0,335],"source":"<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values."}]},{"pos":[342,395],"content":"Reading from unaligned memory locations is supported.","nodes":[{"content":"Reading from unaligned memory locations is supported.","pos":[0,53]}]}],"pos":[360713,361113],"yaml":true,"extradata":"MT"},{"content":"The base address in unmanaged memory from which to read.","nodes":[{"pos":[0,56],"content":"The base address in unmanaged memory from which to read.","nodes":[{"content":"The base address in unmanaged memory from which to read.","pos":[0,56]}]}],"pos":[362257,362314],"yaml":true},{"content":"An additional byte offset, which is added to the <code>ptr</code> parameter before reading.","nodes":[{"pos":[0,91],"content":"An additional byte offset, which is added to the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before reading.","source":"An additional byte offset, which is added to the <code>ptr</code> parameter before reading."}],"pos":[362372,362464],"yaml":true},{"content":"The 16-bit signed integer read from unmanaged memory at the given offset.","nodes":[{"pos":[0,73],"content":"The 16-bit signed integer read from unmanaged memory at the given offset.","nodes":[{"content":"The 16-bit signed integer read from unmanaged memory at the given offset.","pos":[0,73]}]}],"pos":[362520,362594],"yaml":true},{"content":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.","nodes":[{"pos":[0,103],"content":"Base address (<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph>) plus offset byte (<ph id=\"ph2\">&lt;code&gt;ofs&lt;/code&gt;</ph>) produces a null or invalid address.","source":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address."}],"pos":[362778,362882],"yaml":true},{"content":"Reads a 16-bit signed integer at a given offset from unmanaged memory.","nodes":[{"pos":[0,70],"content":"Reads a 16-bit signed integer at a given offset from unmanaged memory.","nodes":[{"content":"Reads a 16-bit signed integer at a given offset from unmanaged memory.","pos":[0,70]}]}],"pos":[364485,364556],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported.","nodes":[{"pos":[0,335],"content":"<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A&gt;</ph> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before reading its element values.","pos":[0,335],"source":"<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values."}]},{"pos":[342,395],"content":"Reading from unaligned memory locations is supported.","nodes":[{"content":"Reading from unaligned memory locations is supported.","pos":[0,53]}]}],"pos":[364567,364967],"yaml":true,"extradata":"MT"},{"content":"The base address in unmanaged memory of the source object.","nodes":[{"pos":[0,58],"content":"The base address in unmanaged memory of the source object.","nodes":[{"content":"The base address in unmanaged memory of the source object.","pos":[0,58]}]}],"pos":[365118,365177],"yaml":true},{"content":"An additional byte offset, which is added to the <code>ptr</code> parameter before reading.","nodes":[{"pos":[0,91],"content":"An additional byte offset, which is added to the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before reading.","source":"An additional byte offset, which is added to the <code>ptr</code> parameter before reading."}],"pos":[365235,365327],"yaml":true},{"content":"The 16-bit signed integer read from unmanaged memory at the given offset.","nodes":[{"pos":[0,73],"content":"The 16-bit signed integer read from unmanaged memory at the given offset.","nodes":[{"content":"The 16-bit signed integer read from unmanaged memory at the given offset.","pos":[0,73]}]}],"pos":[365383,365457],"yaml":true},{"content":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.","nodes":[{"pos":[0,103],"content":"Base address (<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph>) plus offset byte (<ph id=\"ph2\">&lt;code&gt;ofs&lt;/code&gt;</ph>) produces a null or invalid address.","source":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address."}],"pos":[365641,365745],"yaml":true},{"content":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.","nodes":[{"pos":[0,206],"content":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is an <ph id=\"ph2\">&lt;xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,98],"source":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object."},{"content":"This method does not accept <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"&gt;&lt;/xref&gt;</ph> parameters.","pos":[99,206],"source":" This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters."}]}],"pos":[365839,366046],"yaml":true},{"content":"Reads a 32-bit signed integer from unmanaged memory.","nodes":[{"pos":[0,52],"content":"Reads a 32-bit signed integer from unmanaged memory.","nodes":[{"content":"Reads a 32-bit signed integer from unmanaged memory.","pos":[0,52]}]}],"pos":[367606,367659],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style `Int32` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported.","nodes":[{"pos":[0,377],"content":"<xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style `Int32` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A&gt;</ph> has an implied offset of 0.","pos":[0,86],"source":"<xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> has an implied offset of 0."},{"content":"This method enables direct interaction with an unmanaged C-style <ph id=\"ph1\">`Int32`</ph> array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before reading its element values.","pos":[87,377],"source":" This method enables direct interaction with an unmanaged C-style `Int32` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values."}]},{"pos":[384,437],"content":"Reading from unaligned memory locations is supported.","nodes":[{"content":"Reading from unaligned memory locations is supported.","pos":[0,53]}]}],"pos":[367670,368112],"yaml":true,"extradata":"MT"},{"content":"The address in unmanaged memory from which to read.","nodes":[{"pos":[0,51],"content":"The address in unmanaged memory from which to read.","nodes":[{"content":"The address in unmanaged memory from which to read.","pos":[0,51]}]}],"pos":[369221,369273],"yaml":true},{"content":"The 32-bit signed integer read from unmanaged memory.","nodes":[{"pos":[0,53],"content":"The 32-bit signed integer read from unmanaged memory.","nodes":[{"content":"The 32-bit signed integer read from unmanaged memory.","pos":[0,53]}]}],"pos":[369329,369383],"yaml":true},{"content":"<code>ptr</code> is not a recognized format.  \n  \n -or-  \n  \n <code>ptr</code> is `null`.  \n  \n -or-  \n  \n <code>ptr</code> is invalid.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is not a recognized format.","source":"<code>ptr</code> is not a recognized format."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,89],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>ptr</code> is `null`."},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,135],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is invalid.","source":"<code>ptr</code> is invalid."}],"pos":[369567,369713],"yaml":true},{"content":"Reads a 32-bit signed integer at a given offset from unmanaged memory.","nodes":[{"pos":[0,70],"content":"Reads a 32-bit signed integer at a given offset from unmanaged memory.","nodes":[{"content":"Reads a 32-bit signed integer at a given offset from unmanaged memory.","pos":[0,70]}]}],"pos":[371333,371404],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported.","nodes":[{"pos":[0,335],"content":"<xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A&gt;</ph> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before reading its element values.","pos":[0,335],"source":"<xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values."}]},{"pos":[342,395],"content":"Reading from unaligned memory locations is supported.","nodes":[{"content":"Reading from unaligned memory locations is supported.","pos":[0,53]}]}],"pos":[371415,371815],"yaml":true,"extradata":"MT"},{"content":"The base address in unmanaged memory from which to read.","nodes":[{"pos":[0,56],"content":"The base address in unmanaged memory from which to read.","nodes":[{"content":"The base address in unmanaged memory from which to read.","pos":[0,56]}]}],"pos":[372954,373011],"yaml":true},{"content":"An additional byte offset, which is added to the <code>ptr</code> parameter before reading.","nodes":[{"pos":[0,91],"content":"An additional byte offset, which is added to the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before reading.","source":"An additional byte offset, which is added to the <code>ptr</code> parameter before reading."}],"pos":[373069,373161],"yaml":true},{"content":"The 32-bit signed integer read from unmanaged memory.","nodes":[{"pos":[0,53],"content":"The 32-bit signed integer read from unmanaged memory.","nodes":[{"content":"The 32-bit signed integer read from unmanaged memory.","pos":[0,53]}]}],"pos":[373217,373271],"yaml":true},{"content":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.","nodes":[{"pos":[0,103],"content":"Base address (<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph>) plus offset byte (<ph id=\"ph2\">&lt;code&gt;ofs&lt;/code&gt;</ph>) produces a null or invalid address.","source":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address."}],"pos":[373455,373559],"yaml":true},{"content":"Reads a 32-bit signed integer at a given offset from unmanaged memory.","nodes":[{"pos":[0,70],"content":"Reads a 32-bit signed integer at a given offset from unmanaged memory.","nodes":[{"content":"Reads a 32-bit signed integer at a given offset from unmanaged memory.","pos":[0,70]}]}],"pos":[375179,375250],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported.","nodes":[{"pos":[0,335],"content":"<xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A&gt;</ph> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before reading its element values.","pos":[0,335],"source":"<xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values."}]},{"pos":[342,395],"content":"Reading from unaligned memory locations is supported.","nodes":[{"content":"Reading from unaligned memory locations is supported.","pos":[0,53]}]}],"pos":[375261,375661],"yaml":true,"extradata":"MT"},{"content":"The base address in unmanaged memory of the source object.","nodes":[{"pos":[0,58],"content":"The base address in unmanaged memory of the source object.","nodes":[{"content":"The base address in unmanaged memory of the source object.","pos":[0,58]}]}],"pos":[375810,375869],"yaml":true},{"content":"An additional byte offset, which is added to the <code>ptr</code> parameter before reading.","nodes":[{"pos":[0,91],"content":"An additional byte offset, which is added to the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before reading.","source":"An additional byte offset, which is added to the <code>ptr</code> parameter before reading."}],"pos":[375927,376019],"yaml":true},{"content":"The 32-bit signed integer read from unmanaged memory at the given offset.","nodes":[{"pos":[0,73],"content":"The 32-bit signed integer read from unmanaged memory at the given offset.","nodes":[{"content":"The 32-bit signed integer read from unmanaged memory at the given offset.","pos":[0,73]}]}],"pos":[376075,376149],"yaml":true},{"content":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.","nodes":[{"pos":[0,103],"content":"Base address (<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph>) plus offset byte (<ph id=\"ph2\">&lt;code&gt;ofs&lt;/code&gt;</ph>) produces a null or invalid address.","source":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address."}],"pos":[376333,376437],"yaml":true},{"content":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.","nodes":[{"pos":[0,206],"content":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is an <ph id=\"ph2\">&lt;xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,98],"source":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object."},{"content":"This method does not accept <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"&gt;&lt;/xref&gt;</ph> parameters.","pos":[99,206],"source":" This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters."}]}],"pos":[376531,376738],"yaml":true},{"content":"Reads a 64-bit signed integer from unmanaged memory.","nodes":[{"pos":[0,52],"content":"Reads a 64-bit signed integer from unmanaged memory.","nodes":[{"content":"Reads a 64-bit signed integer from unmanaged memory.","pos":[0,52]}]}],"pos":[378298,378351],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style `Int64` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported.","nodes":[{"pos":[0,377],"content":"<xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style `Int64` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A&gt;</ph> has an implied offset of 0.","pos":[0,86],"source":"<xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> has an implied offset of 0."},{"content":"This method enables direct interaction with an unmanaged C-style <ph id=\"ph1\">`Int64`</ph> array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before reading its element values.","pos":[87,377],"source":" This method enables direct interaction with an unmanaged C-style `Int64` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values."}]},{"pos":[384,437],"content":"Reading from unaligned memory locations is supported.","nodes":[{"content":"Reading from unaligned memory locations is supported.","pos":[0,53]}]}],"pos":[378362,378804],"yaml":true,"extradata":"MT"},{"content":"The address in unmanaged memory from which to read.","nodes":[{"pos":[0,51],"content":"The address in unmanaged memory from which to read.","nodes":[{"content":"The address in unmanaged memory from which to read.","pos":[0,51]}]}],"pos":[379918,379970],"yaml":true},{"content":"The 64-bit signed integer read from unmanaged memory.","nodes":[{"pos":[0,53],"content":"The 64-bit signed integer read from unmanaged memory.","nodes":[{"content":"The 64-bit signed integer read from unmanaged memory.","pos":[0,53]}]}],"pos":[380026,380080],"yaml":true},{"content":"<code>ptr</code> is not a recognized format.  \n  \n -or-  \n  \n <code>ptr</code> is `null`.  \n  \n -or-  \n  \n <code>ptr</code> is invalid.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is not a recognized format.","source":"<code>ptr</code> is not a recognized format."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,89],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>ptr</code> is `null`."},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,135],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is invalid.","source":"<code>ptr</code> is invalid."}],"pos":[380264,380410],"yaml":true},{"content":"Reads a 64-bit signed integer at a given offset from unmanaged memory.","nodes":[{"pos":[0,70],"content":"Reads a 64-bit signed integer at a given offset from unmanaged memory.","nodes":[{"content":"Reads a 64-bit signed integer at a given offset from unmanaged memory.","pos":[0,70]}]}],"pos":[382030,382101],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported.","nodes":[{"pos":[0,335],"content":"<xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A&gt;</ph> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before reading its element values.","pos":[0,335],"source":"<xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values."}]},{"pos":[342,395],"content":"Reading from unaligned memory locations is supported.","nodes":[{"content":"Reading from unaligned memory locations is supported.","pos":[0,53]}]}],"pos":[382112,382512],"yaml":true,"extradata":"MT"},{"content":"The base address in unmanaged memory from which to read.","nodes":[{"pos":[0,56],"content":"The base address in unmanaged memory from which to read.","nodes":[{"content":"The base address in unmanaged memory from which to read.","pos":[0,56]}]}],"pos":[383657,383714],"yaml":true},{"content":"An additional byte offset, which is added to the <code>ptr</code> parameter before reading.","nodes":[{"pos":[0,91],"content":"An additional byte offset, which is added to the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before reading.","source":"An additional byte offset, which is added to the <code>ptr</code> parameter before reading."}],"pos":[383772,383864],"yaml":true},{"content":"The 64-bit signed integer read from unmanaged memory at the given offset.","nodes":[{"pos":[0,73],"content":"The 64-bit signed integer read from unmanaged memory at the given offset.","nodes":[{"content":"The 64-bit signed integer read from unmanaged memory at the given offset.","pos":[0,73]}]}],"pos":[383920,383994],"yaml":true},{"content":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.","nodes":[{"pos":[0,103],"content":"Base address (<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph>) plus offset byte (<ph id=\"ph2\">&lt;code&gt;ofs&lt;/code&gt;</ph>) produces a null or invalid address.","source":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address."}],"pos":[384178,384282],"yaml":true},{"content":"Reads a 64-bit signed integer at a given offset from unmanaged memory.","nodes":[{"pos":[0,70],"content":"Reads a 64-bit signed integer at a given offset from unmanaged memory.","nodes":[{"content":"Reads a 64-bit signed integer at a given offset from unmanaged memory.","pos":[0,70]}]}],"pos":[385885,385956],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported.","nodes":[{"pos":[0,335],"content":"<xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A&gt;</ph> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before reading its element values.","pos":[0,335],"source":"<xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values."}]},{"pos":[342,395],"content":"Reading from unaligned memory locations is supported.","nodes":[{"content":"Reading from unaligned memory locations is supported.","pos":[0,53]}]}],"pos":[385967,386367],"yaml":true,"extradata":"MT"},{"content":"The base address in unmanaged memory of the source object.","nodes":[{"pos":[0,58],"content":"The base address in unmanaged memory of the source object.","nodes":[{"content":"The base address in unmanaged memory of the source object.","pos":[0,58]}]}],"pos":[386517,386576],"yaml":true},{"content":"An additional byte offset, which is added to the <code>ptr</code> parameter before reading.","nodes":[{"pos":[0,91],"content":"An additional byte offset, which is added to the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before reading.","source":"An additional byte offset, which is added to the <code>ptr</code> parameter before reading."}],"pos":[386634,386726],"yaml":true},{"content":"The 64-bit signed integer read from unmanaged memory at the given offset.","nodes":[{"pos":[0,73],"content":"The 64-bit signed integer read from unmanaged memory at the given offset.","nodes":[{"content":"The 64-bit signed integer read from unmanaged memory at the given offset.","pos":[0,73]}]}],"pos":[386782,386856],"yaml":true},{"content":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.","nodes":[{"pos":[0,103],"content":"Base address (<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph>) plus offset byte (<ph id=\"ph2\">&lt;code&gt;ofs&lt;/code&gt;</ph>) produces a null or invalid address.","source":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address."}],"pos":[387040,387144],"yaml":true},{"content":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.","nodes":[{"pos":[0,206],"content":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is an <ph id=\"ph2\">&lt;xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,98],"source":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object."},{"content":"This method does not accept <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"&gt;&lt;/xref&gt;</ph> parameters.","pos":[99,206],"source":" This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters."}]}],"pos":[387238,387445],"yaml":true},{"content":"Reads a processor native sized integer at a given offset from unmanaged memory.","nodes":[{"pos":[0,79],"content":"Reads a processor native sized integer at a given offset from unmanaged memory.","nodes":[{"content":"Reads a processor native sized integer at a given offset from unmanaged memory.","pos":[0,79]}]}],"pos":[389071,389151],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported.","nodes":[{"pos":[0,339],"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A&gt;</ph> enables direct interaction with an unmanaged C-style <ph id=\"ph2\">`IntPtr`</ph> array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before reading its element values.","source":"<xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values."},{"pos":[346,399],"content":"Reading from unaligned memory locations is supported.","nodes":[{"content":"Reading from unaligned memory locations is supported.","pos":[0,53]}]}],"pos":[389162,389566],"yaml":true,"extradata":"MT"},{"content":"The base address in unmanaged memory from which to read.","nodes":[{"pos":[0,56],"content":"The base address in unmanaged memory from which to read.","nodes":[{"content":"The base address in unmanaged memory from which to read.","pos":[0,56]}]}],"pos":[390352,390409],"yaml":true},{"content":"An additional byte offset, which is added to the <code>ptr</code> parameter before reading.","nodes":[{"pos":[0,91],"content":"An additional byte offset, which is added to the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before reading.","source":"An additional byte offset, which is added to the <code>ptr</code> parameter before reading."}],"pos":[390467,390559],"yaml":true},{"content":"The integer read from unmanaged memory at the given offset.","nodes":[{"pos":[0,59],"content":"The integer read from unmanaged memory at the given offset.","nodes":[{"content":"The integer read from unmanaged memory at the given offset.","pos":[0,59]}]}],"pos":[390616,390676],"yaml":true},{"content":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.","nodes":[{"pos":[0,103],"content":"Base address (<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph>) plus offset byte (<ph id=\"ph2\">&lt;code&gt;ofs&lt;/code&gt;</ph>) produces a null or invalid address.","source":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address."}],"pos":[390861,390965],"yaml":true},{"content":"Reads a processor native sized integer from unmanaged memory.","nodes":[{"pos":[0,61],"content":"Reads a processor native sized integer from unmanaged memory.","nodes":[{"content":"Reads a processor native sized integer from unmanaged memory.","pos":[0,61]}]}],"pos":[392591,392653],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported.","nodes":[{"pos":[0,339],"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A&gt;</ph> enables direct interaction with an unmanaged C-style <ph id=\"ph2\">`IntPtr`</ph> array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before reading its element values.","source":"<xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values."},{"pos":[346,399],"content":"Reading from unaligned memory locations is supported.","nodes":[{"content":"Reading from unaligned memory locations is supported.","pos":[0,53]}]}],"pos":[392664,393068],"yaml":true,"extradata":"MT"},{"content":"The base address in unmanaged memory of the source object.","nodes":[{"pos":[0,58],"content":"The base address in unmanaged memory of the source object.","nodes":[{"content":"The base address in unmanaged memory of the source object.","pos":[0,58]}]}],"pos":[393221,393280],"yaml":true},{"content":"An additional byte offset, which is added to the <code>ptr</code> parameter before reading.","nodes":[{"pos":[0,91],"content":"An additional byte offset, which is added to the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before reading.","source":"An additional byte offset, which is added to the <code>ptr</code> parameter before reading."}],"pos":[393338,393430],"yaml":true},{"content":"The integer read from unmanaged memory at the given offset.","nodes":[{"pos":[0,59],"content":"The integer read from unmanaged memory at the given offset.","nodes":[{"content":"The integer read from unmanaged memory at the given offset.","pos":[0,59]}]}],"pos":[393487,393547],"yaml":true},{"content":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.","nodes":[{"pos":[0,103],"content":"Base address (<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph>) plus offset byte (<ph id=\"ph2\">&lt;code&gt;ofs&lt;/code&gt;</ph>) produces a null or invalid address.","source":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address."}],"pos":[393732,393836],"yaml":true},{"content":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.","nodes":[{"pos":[0,206],"content":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is an <ph id=\"ph2\">&lt;xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,98],"source":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object."},{"content":"This method does not accept <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"&gt;&lt;/xref&gt;</ph> parameters.","pos":[99,206],"source":" This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters."}]}],"pos":[393930,394137],"yaml":true},{"content":"Reads a processor native-sized integer from unmanaged memory.","nodes":[{"pos":[0,61],"content":"Reads a processor native-sized integer from unmanaged memory.","nodes":[{"content":"Reads a processor native-sized integer from unmanaged memory.","pos":[0,61]}]}],"pos":[395703,395765],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \n  \n Reading from unaligned memory locations is supported.","nodes":[{"pos":[0,379],"content":"<xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A&gt;</ph> has an implied offset of 0.","pos":[0,87],"source":"<xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> has an implied offset of 0."},{"content":"This method enables direct interaction with an unmanaged C-style <ph id=\"ph1\">`IntPtr`</ph> array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before reading its element values.","pos":[88,379],"source":" This method enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values."}]},{"pos":[386,439],"content":"Reading from unaligned memory locations is supported.","nodes":[{"content":"Reading from unaligned memory locations is supported.","pos":[0,53]}]}],"pos":[395776,396220],"yaml":true,"extradata":"MT"},{"content":"The address in unmanaged memory from which to read.","nodes":[{"pos":[0,51],"content":"The address in unmanaged memory from which to read.","nodes":[{"content":"The address in unmanaged memory from which to read.","pos":[0,51]}]}],"pos":[396997,397049],"yaml":true},{"content":"The integer read from unmanaged memory. A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.","nodes":[{"pos":[0,140],"content":"The integer read from unmanaged memory. A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.","nodes":[{"content":"The integer read from unmanaged memory. A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.","pos":[0,140],"nodes":[{"content":"The integer read from unmanaged memory.","pos":[0,39]},{"content":"A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.","pos":[40,140]}]}]}],"pos":[397106,397247],"yaml":true},{"content":"<code>ptr</code> is not a recognized format.  \n  \n -or-  \n  \n <code>ptr</code> is `null`.  \n  \n -or-  \n  \n <code>ptr</code> is invalid.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is not a recognized format.","source":"<code>ptr</code> is not a recognized format."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,89],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>ptr</code> is `null`."},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,135],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is invalid.","source":"<code>ptr</code> is invalid."}],"pos":[397432,397578],"yaml":true},{"content":"Resizes a block of memory previously allocated with <xref href=\"System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\"></xref>.","nodes":[{"pos":[0,141],"content":"Resizes a block of memory previously allocated with <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\"&gt;&lt;/xref&gt;</ph>.","source":"Resizes a block of memory previously allocated with <xref href=\"System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\"></xref>."}],"pos":[399240,399382],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A> is one of two memory reallocation methods in the <xref:System.Runtime.InteropServices.Marshal> class. (<xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A> is the other.) The beginning of the reallocated memory content is the same as the original content; however, the entire memory block can be in a different location. This method exposes the COM [CoTaskMemRealloc](http://go.microsoft.com/fwlink/?LinkId=148778) function, which is referred to as the COM task memory allocator.","nodes":[{"pos":[0,556],"content":"<xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A> is one of two memory reallocation methods in the <xref:System.Runtime.InteropServices.Marshal> class. (<xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A> is the other.) The beginning of the reallocated memory content is the same as the original content; however, the entire memory block can be in a different location. This method exposes the COM [CoTaskMemRealloc](http://go.microsoft.com/fwlink/?LinkId=148778) function, which is referred to as the COM task memory allocator.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A&gt;</ph> is one of two memory reallocation methods in the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.","pos":[0,167],"source":"<xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A> is one of two memory reallocation methods in the <xref:System.Runtime.InteropServices.Marshal> class."},{"content":"(<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A&gt;</ph> is the other.) The beginning of the reallocated memory content is the same as the original content; however, the entire memory block can be in a different location.","pos":[168,397],"source":" (<xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A> is the other.) The beginning of the reallocated memory content is the same as the original content; however, the entire memory block can be in a different location."},{"content":"This method exposes the COM <bpt id=\"p1\">[</bpt>CoTaskMemRealloc<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148778)</ept> function, which is referred to as the COM task memory allocator.","pos":[398,556],"source":" This method exposes the COM [CoTaskMemRealloc](http://go.microsoft.com/fwlink/?LinkId=148778) function, which is referred to as the COM task memory allocator."}]}],"pos":[399393,399950],"yaml":true,"extradata":"MT"},{"content":"A pointer to memory allocated with <xref href=\"System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\"></xref>.","nodes":[{"pos":[0,124],"content":"A pointer to memory allocated with <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\"&gt;&lt;/xref&gt;</ph>.","source":"A pointer to memory allocated with <xref href=\"System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\"></xref>."}],"pos":[400106,400231],"yaml":true},{"content":"The new size of the allocated block.","nodes":[{"pos":[0,36],"content":"The new size of the allocated block.","nodes":[{"content":"The new size of the allocated block.","pos":[0,36]}]}],"pos":[400288,400325],"yaml":true},{"content":"An integer representing the address of the reallocated block of memory. This memory must be released with <xref href=\"System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\"></xref>.","nodes":[{"pos":[0,195],"content":"An integer representing the address of the reallocated block of memory. This memory must be released with <xref href=\"System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\"></xref>.","nodes":[{"content":"An integer representing the address of the reallocated block of memory.","pos":[0,71]},{"content":"This memory must be released with <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\"&gt;&lt;/xref&gt;</ph>.","pos":[72,195],"source":" This memory must be released with <xref href=\"System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\"></xref>."}]}],"pos":[400382,400578],"yaml":true},{"content":"There is insufficient memory to satisfy the request.","nodes":[{"pos":[0,52],"content":"There is insufficient memory to satisfy the request.","nodes":[{"content":"There is insufficient memory to satisfy the request.","pos":[0,52]}]}],"pos":[400761,400814],"yaml":true},{"content":"Resizes a block of memory previously allocated with <xref href=\"System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\"></xref>.","nodes":[{"pos":[0,140],"content":"Resizes a block of memory previously allocated with <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\"&gt;&lt;/xref&gt;</ph>.","source":"Resizes a block of memory previously allocated with <xref href=\"System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\"></xref>."}],"pos":[402453,402594],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A> is one of two memory reallocation API methods in the <xref:System.Runtime.InteropServices.Marshal> class. (<xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A?displayProperty=fullName> is the other.)  \n  \n This method exposes the Win32 [GlobalReAlloc](http://go.microsoft.com/fwlink/?LinkId=148780) function from Kernel32.dll. The returned pointer can differ from the original. If it is different, the contents of the original memory block have been copied to the new block, and the original memory block has been freed.","nodes":[{"pos":[0,276],"content":"<xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A> is one of two memory reallocation API methods in the <xref:System.Runtime.InteropServices.Marshal> class. (<xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A?displayProperty=fullName> is the other.)","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A> is one of two memory reallocation API methods in the <xref:System.Runtime.InteropServices.Marshal> class. (<xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A?displayProperty=fullName> is the other.)","pos":[0,276],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A&gt;</ph> is one of two memory reallocation API methods in the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.","pos":[0,169],"source":"<xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A> is one of two memory reallocation API methods in the <xref:System.Runtime.InteropServices.Marshal> class."},{"content":"(<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A?displayProperty=fullName&gt;</ph> is the other.)","pos":[170,276],"source":" (<xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A?displayProperty=fullName> is the other.)"}]}]},{"pos":[283,597],"content":"This method exposes the Win32 [GlobalReAlloc](http://go.microsoft.com/fwlink/?LinkId=148780) function from Kernel32.dll. The returned pointer can differ from the original. If it is different, the contents of the original memory block have been copied to the new block, and the original memory block has been freed.","nodes":[{"content":"This method exposes the Win32 <bpt id=\"p1\">[</bpt>GlobalReAlloc<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148780)</ept> function from Kernel32.dll.","pos":[0,120],"source":"This method exposes the Win32 [GlobalReAlloc](http://go.microsoft.com/fwlink/?LinkId=148780) function from Kernel32.dll."},{"content":"The returned pointer can differ from the original.","pos":[121,171]},{"content":"If it is different, the contents of the original memory block have been copied to the new block, and the original memory block has been freed.","pos":[172,314]}]}],"pos":[402605,403207],"yaml":true,"extradata":"MT"},{"content":"A pointer to memory allocated with <xref href=\"System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\"></xref>.","nodes":[{"pos":[0,123],"content":"A pointer to memory allocated with <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\"&gt;&lt;/xref&gt;</ph>.","source":"A pointer to memory allocated with <xref href=\"System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\"></xref>."}],"pos":[403364,403488],"yaml":true},{"content":"The new size of the allocated block. This is not a pointer; it is the byte count you are requesting, cast to type <xref href=\"System.IntPtr\"></xref>. If you pass a pointer, it is treated as a size.","nodes":[{"pos":[0,197],"content":"The new size of the allocated block. This is not a pointer; it is the byte count you are requesting, cast to type <xref href=\"System.IntPtr\"></xref>. If you pass a pointer, it is treated as a size.","nodes":[{"content":"The new size of the allocated block.","pos":[0,36]},{"content":"This is not a pointer; it is the byte count you are requesting, cast to type <ph id=\"ph1\">&lt;xref href=\"System.IntPtr\"&gt;&lt;/xref&gt;</ph>.","pos":[37,149],"source":" This is not a pointer; it is the byte count you are requesting, cast to type <xref href=\"System.IntPtr\"></xref>."},{"content":"If you pass a pointer, it is treated as a size.","pos":[150,197]}]}],"pos":[403546,403744],"yaml":true},{"content":"A pointer to the reallocated memory. This memory must be released using <xref href=\"System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\"></xref>.","nodes":[{"pos":[0,159],"content":"A pointer to the reallocated memory. This memory must be released using <xref href=\"System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\"></xref>.","nodes":[{"content":"A pointer to the reallocated memory.","pos":[0,36]},{"content":"This memory must be released using <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\"&gt;&lt;/xref&gt;</ph>.","pos":[37,159],"source":" This memory must be released using <xref href=\"System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\"></xref>."}]}],"pos":[403801,403961],"yaml":true},{"content":"There is insufficient memory to satisfy the request.","nodes":[{"pos":[0,52],"content":"There is insufficient memory to satisfy the request.","nodes":[{"content":"There is insufficient memory to satisfy the request.","pos":[0,52]}]}],"pos":[404142,404195],"yaml":true},{"content":"Decrements the reference count on the specified interface.","nodes":[{"pos":[0,58],"content":"Decrements the reference count on the specified interface.","nodes":[{"content":"Decrements the reference count on the specified interface.","pos":[0,58]}]}],"pos":[405726,405785],"yaml":true},{"content":"The common language runtime manages the reference count of a COM object for you, making it unnecessary to use this method directly. Use this value only for testing purposes. In rare cases, such as testing a custom marshaler, you might find it necessary to manipulate an object's lifetime manually. Only programs that call <xref:System.Runtime.InteropServices.Marshal.AddRef%2A?displayProperty=fullName> should call <xref:System.Runtime.InteropServices.Marshal.Release%2A>. Calling <xref:System.Runtime.InteropServices.Marshal.Release%2A> after the reference count has reached zero causes undefined behavior.  \n  \n You can call <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=fullName>, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName> to obtain an <xref:System.IntPtr> value that represents a [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface pointer to release. You can also use these methods and the <xref:System.Runtime.InteropServices.Marshal.Release%2A> method on managed objects to release the COM interfaces represented by the managed object's [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md).","nodes":[{"pos":[0,607],"content":"The common language runtime manages the reference count of a COM object for you, making it unnecessary to use this method directly. Use this value only for testing purposes. In rare cases, such as testing a custom marshaler, you might find it necessary to manipulate an object's lifetime manually. Only programs that call <xref:System.Runtime.InteropServices.Marshal.AddRef%2A?displayProperty=fullName> should call <xref:System.Runtime.InteropServices.Marshal.Release%2A>. Calling <xref:System.Runtime.InteropServices.Marshal.Release%2A> after the reference count has reached zero causes undefined behavior.","nodes":[{"content":"The common language runtime manages the reference count of a COM object for you, making it unnecessary to use this method directly. Use this value only for testing purposes. In rare cases, such as testing a custom marshaler, you might find it necessary to manipulate an object's lifetime manually. Only programs that call <xref:System.Runtime.InteropServices.Marshal.AddRef%2A?displayProperty=fullName> should call <xref:System.Runtime.InteropServices.Marshal.Release%2A>. Calling <xref:System.Runtime.InteropServices.Marshal.Release%2A> after the reference count has reached zero causes undefined behavior.","pos":[0,607],"nodes":[{"content":"The common language runtime manages the reference count of a COM object for you, making it unnecessary to use this method directly.","pos":[0,131]},{"content":"Use this value only for testing purposes.","pos":[132,173]},{"content":"In rare cases, such as testing a custom marshaler, you might find it necessary to manipulate an object's lifetime manually.","pos":[174,297]},{"content":"Only programs that call <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.AddRef%2A?displayProperty=fullName&gt;</ph> should call <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Release%2A&gt;</ph>.","pos":[298,472],"source":" Only programs that call <xref:System.Runtime.InteropServices.Marshal.AddRef%2A?displayProperty=fullName> should call <xref:System.Runtime.InteropServices.Marshal.Release%2A>."},{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.Release%2A&gt;</ph> after the reference count has reached zero causes undefined behavior.","pos":[473,607],"source":" Calling <xref:System.Runtime.InteropServices.Marshal.Release%2A> after the reference count has reached zero causes undefined behavior."}]}]},{"pos":[614,1329],"content":"You can call <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=fullName>, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName> to obtain an <xref:System.IntPtr> value that represents a [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface pointer to release. You can also use these methods and the <xref:System.Runtime.InteropServices.Marshal.Release%2A> method on managed objects to release the COM interfaces represented by the managed object's [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md).","nodes":[{"content":"You can call <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=fullName&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName&gt;</ph> to obtain an <ph id=\"ph4\">&lt;xref:System.IntPtr&gt;</ph> value that represents a <bpt id=\"p1\">[</bpt>IUnknown<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=148003)</ept> interface pointer to release.","pos":[0,453],"source":"You can call <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=fullName>, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName> to obtain an <xref:System.IntPtr> value that represents a [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface pointer to release."},{"content":"You can also use these methods and the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.Release%2A&gt;</ph> method on managed objects to release the COM interfaces represented by the managed object's <bpt id=\"p1\">[</bpt>COM Callable Wrapper<ept id=\"p1\">](~/docs/framework/interop/com-callable-wrapper.md)</ept>.","pos":[454,715],"source":" You can also use these methods and the <xref:System.Runtime.InteropServices.Marshal.Release%2A> method on managed objects to release the COM interfaces represented by the managed object's [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md)."}]}],"pos":[405796,407130],"yaml":true,"extradata":"MT"},{"content":"The interface to release.","nodes":[{"pos":[0,25],"content":"The interface to release.","nodes":[{"content":"The interface to release.","pos":[0,25]}]}],"pos":[408008,408034],"yaml":true},{"content":"The new value of the reference count on the interface specified by the <code>pUnk</code> parameter.","nodes":[{"pos":[0,99],"content":"The new value of the reference count on the interface specified by the <ph id=\"ph1\">&lt;code&gt;pUnk&lt;/code&gt;</ph> parameter.","source":"The new value of the reference count on the interface specified by the <code>pUnk</code> parameter."}],"pos":[408090,408190],"yaml":true},{"content":"Decrements the reference count of the [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW) associated with the specified COM object.","nodes":[{"pos":[0,166],"content":"Decrements the reference count of the <bpt id=\"p1\">[</bpt>Runtime Callable Wrapper<ept id=\"p1\">](~/docs/framework/interop/runtime-callable-wrapper.md)</ept> (RCW) associated with the specified COM object.","source":"Decrements the reference count of the [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW) associated with the specified COM object."}],"pos":[409869,410036],"yaml":true},{"content":"This method is used to explicitly control the lifetime of a COM object used from managed code. You should use this method to free the underlying COM object that holds references to resources in a timely manner or when objects must be freed in a specific order.  \n  \n Every time a COM interface pointer enters the common language runtime (CLR), it is wrapped in an RCW.  \n  \n The RCW has a reference count that is incremented every time a COM interface pointer is mapped to it. The <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method decrements the reference count of an RCW. When the reference count reaches zero, the runtime releases all its references on the unmanaged COM object, and throws a <xref:System.NullReferenceException?displayProperty=fullName> if you attempt to use the object further. If the same COM interface is passed more than one time from unmanaged to managed code, the reference count on the wrapper is incremented every time, and calling <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> returns the number of remaining references.  \n  \n This method enables you to force an RCW reference count release so that it occurs precisely when you want it to. However, improper use of <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> may cause your application to fail, or may cause an access violation.  \n  \n Consider a scenario in which managed code in an application domain is holding onto an RCW that represents a COM component. If you call the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method on the RCW, the managed code will be unable to access the RCW and will raise an <xref:System.Runtime.InteropServices.InvalidComObjectException> exception.  \n  \n A more serious error may occur if a call to the RCW is executing when the RCW is released. In this case, there is a good chance that the thread making the call will cause an access violation. However, process memory may become corrupted, and the process may continue to run until it fails for reasons that are very difficult to debug.  \n  \n This risk is compounded when the COM component that is being used is a singleton, for the following reason: The CLR activates COM components by calling the COM [CoCreateInstance](http://go.microsoft.com/fwlink/?LinkID=142894) function, which returns the same interface pointer every time it is called for singleton COM components. Thus, separate and independent pieces of managed code in an application domain can be using the same RCW for a singleton COM component, and if either one calls the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method on the COM component, the other will be broken.  \n  \n Therefore, use the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> only if it is absolutely required. If you want to call this method to ensure that a COM component is released at a determined time, consider using the <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method instead. <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> will release the underlying COM component regardless of how many times it has re-entered the CLR. The internal reference count of the RCW is incremented by one every time the COM component re-enters the CLR. Therefore, you could call the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method in a loop until the value returned is zero. This achieves the same result as the <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method.","nodes":[{"pos":[0,260],"content":"This method is used to explicitly control the lifetime of a COM object used from managed code. You should use this method to free the underlying COM object that holds references to resources in a timely manner or when objects must be freed in a specific order.","nodes":[{"content":"This method is used to explicitly control the lifetime of a COM object used from managed code. You should use this method to free the underlying COM object that holds references to resources in a timely manner or when objects must be freed in a specific order.","pos":[0,260],"nodes":[{"content":"This method is used to explicitly control the lifetime of a COM object used from managed code.","pos":[0,94]},{"content":"You should use this method to free the underlying COM object that holds references to resources in a timely manner or when objects must be freed in a specific order.","pos":[95,260]}]}]},{"pos":[267,368],"content":"Every time a COM interface pointer enters the common language runtime (CLR), it is wrapped in an RCW.","nodes":[{"content":"Every time a COM interface pointer enters the common language runtime (CLR), it is wrapped in an RCW.","pos":[0,101]}]},{"pos":[375,1091],"content":"The RCW has a reference count that is incremented every time a COM interface pointer is mapped to it. The <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method decrements the reference count of an RCW. When the reference count reaches zero, the runtime releases all its references on the unmanaged COM object, and throws a <xref:System.NullReferenceException?displayProperty=fullName> if you attempt to use the object further. If the same COM interface is passed more than one time from unmanaged to managed code, the reference count on the wrapper is incremented every time, and calling <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> returns the number of remaining references.","nodes":[{"content":"The RCW has a reference count that is incremented every time a COM interface pointer is mapped to it. The <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method decrements the reference count of an RCW. When the reference count reaches zero, the runtime releases all its references on the unmanaged COM object, and throws a <xref:System.NullReferenceException?displayProperty=fullName> if you attempt to use the object further. If the same COM interface is passed more than one time from unmanaged to managed code, the reference count on the wrapper is incremented every time, and calling <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> returns the number of remaining references.","pos":[0,716],"nodes":[{"content":"The RCW has a reference count that is incremented every time a COM interface pointer is mapped to it.","pos":[0,101]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A&gt;</ph> method decrements the reference count of an RCW.","pos":[102,220],"source":" The <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method decrements the reference count of an RCW."},{"content":"When the reference count reaches zero, the runtime releases all its references on the unmanaged COM object, and throws a <ph id=\"ph1\">&lt;xref:System.NullReferenceException?displayProperty=fullName&gt;</ph> if you attempt to use the object further.","pos":[221,445],"source":" When the reference count reaches zero, the runtime releases all its references on the unmanaged COM object, and throws a <xref:System.NullReferenceException?displayProperty=fullName> if you attempt to use the object further."},{"content":"If the same COM interface is passed more than one time from unmanaged to managed code, the reference count on the wrapper is incremented every time, and calling <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A&gt;</ph> returns the number of remaining references.","pos":[446,716],"source":" If the same COM interface is passed more than one time from unmanaged to managed code, the reference count on the wrapper is incremented every time, and calling <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> returns the number of remaining references."}]}]},{"pos":[1098,1371],"content":"This method enables you to force an RCW reference count release so that it occurs precisely when you want it to. However, improper use of <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> may cause your application to fail, or may cause an access violation.","nodes":[{"content":"This method enables you to force an RCW reference count release so that it occurs precisely when you want it to. However, improper use of <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> may cause your application to fail, or may cause an access violation.","pos":[0,273],"nodes":[{"content":"This method enables you to force an RCW reference count release so that it occurs precisely when you want it to.","pos":[0,112]},{"content":"However, improper use of <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A&gt;</ph> may cause your application to fail, or may cause an access violation.","pos":[113,273],"source":" However, improper use of <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> may cause your application to fail, or may cause an access violation."}]}]},{"pos":[1378,1744],"content":"Consider a scenario in which managed code in an application domain is holding onto an RCW that represents a COM component. If you call the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method on the RCW, the managed code will be unable to access the RCW and will raise an <xref:System.Runtime.InteropServices.InvalidComObjectException> exception.","nodes":[{"content":"Consider a scenario in which managed code in an application domain is holding onto an RCW that represents a COM component. If you call the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method on the RCW, the managed code will be unable to access the RCW and will raise an <xref:System.Runtime.InteropServices.InvalidComObjectException> exception.","pos":[0,366],"nodes":[{"content":"Consider a scenario in which managed code in an application domain is holding onto an RCW that represents a COM component.","pos":[0,122]},{"content":"If you call the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A&gt;</ph> method on the RCW, the managed code will be unable to access the RCW and will raise an <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.InvalidComObjectException&gt;</ph> exception.","pos":[123,366],"source":" If you call the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method on the RCW, the managed code will be unable to access the RCW and will raise an <xref:System.Runtime.InteropServices.InvalidComObjectException> exception."}]}]},{"pos":[1751,2085],"content":"A more serious error may occur if a call to the RCW is executing when the RCW is released. In this case, there is a good chance that the thread making the call will cause an access violation. However, process memory may become corrupted, and the process may continue to run until it fails for reasons that are very difficult to debug.","nodes":[{"content":"A more serious error may occur if a call to the RCW is executing when the RCW is released. In this case, there is a good chance that the thread making the call will cause an access violation. However, process memory may become corrupted, and the process may continue to run until it fails for reasons that are very difficult to debug.","pos":[0,334],"nodes":[{"content":"A more serious error may occur if a call to the RCW is executing when the RCW is released.","pos":[0,90]},{"content":"In this case, there is a good chance that the thread making the call will cause an access violation.","pos":[91,191]},{"content":"However, process memory may become corrupted, and the process may continue to run until it fails for reasons that are very difficult to debug.","pos":[192,334]}]}]},{"pos":[2092,2707],"content":"This risk is compounded when the COM component that is being used is a singleton, for the following reason: The CLR activates COM components by calling the COM [CoCreateInstance](http://go.microsoft.com/fwlink/?LinkID=142894) function, which returns the same interface pointer every time it is called for singleton COM components. Thus, separate and independent pieces of managed code in an application domain can be using the same RCW for a singleton COM component, and if either one calls the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method on the COM component, the other will be broken.","nodes":[{"content":"This risk is compounded when the COM component that is being used is a singleton, for the following reason: The CLR activates COM components by calling the COM <bpt id=\"p1\">[</bpt>CoCreateInstance<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=142894)</ept> function, which returns the same interface pointer every time it is called for singleton COM components.","pos":[0,330],"source":"This risk is compounded when the COM component that is being used is a singleton, for the following reason: The CLR activates COM components by calling the COM [CoCreateInstance](http://go.microsoft.com/fwlink/?LinkID=142894) function, which returns the same interface pointer every time it is called for singleton COM components."},{"content":"Thus, separate and independent pieces of managed code in an application domain can be using the same RCW for a singleton COM component, and if either one calls the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A&gt;</ph> method on the COM component, the other will be broken.","pos":[331,615],"source":" Thus, separate and independent pieces of managed code in an application domain can be using the same RCW for a singleton COM component, and if either one calls the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method on the COM component, the other will be broken."}]},{"pos":[2714,3578],"content":"Therefore, use the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> only if it is absolutely required. If you want to call this method to ensure that a COM component is released at a determined time, consider using the <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method instead. <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> will release the underlying COM component regardless of how many times it has re-entered the CLR. The internal reference count of the RCW is incremented by one every time the COM component re-enters the CLR. Therefore, you could call the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method in a loop until the value returned is zero. This achieves the same result as the <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method.","nodes":[{"content":"Therefore, use the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> only if it is absolutely required. If you want to call this method to ensure that a COM component is released at a determined time, consider using the <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method instead. <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> will release the underlying COM component regardless of how many times it has re-entered the CLR. The internal reference count of the RCW is incremented by one every time the COM component re-enters the CLR. Therefore, you could call the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method in a loop until the value returned is zero. This achieves the same result as the <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method.","pos":[0,864],"nodes":[{"content":"Therefore, use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A&gt;</ph> only if it is absolutely required.","pos":[0,119],"source":"Therefore, use the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> only if it is absolutely required."},{"content":"If you want to call this method to ensure that a COM component is released at a determined time, consider using the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A&gt;</ph> method instead.","pos":[120,322],"source":" If you want to call this method to ensure that a COM component is released at a determined time, consider using the <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method instead."},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A&gt;</ph> will release the underlying COM component regardless of how many times it has re-entered the CLR.","pos":[323,491],"source":" <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> will release the underlying COM component regardless of how many times it has re-entered the CLR."},{"content":"The internal reference count of the RCW is incremented by one every time the COM component re-enters the CLR.","pos":[492,601]},{"content":"Therefore, you could call the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A&gt;</ph> method in a loop until the value returned is zero.","pos":[602,748],"source":" Therefore, you could call the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method in a loop until the value returned is zero."},{"content":"This achieves the same result as the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A&gt;</ph> method.","pos":[749,864],"source":" This achieves the same result as the <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method."}]}]}],"pos":[410047,413642],"yaml":true,"extradata":"MT"},{"content":"The COM object to release.","nodes":[{"pos":[0,26],"content":"The COM object to release.","nodes":[{"content":"The COM object to release.","pos":[0,26]}]}],"pos":[413785,413812],"yaml":true},{"content":"The new value of the reference count of the RCW associated with <code>o</code>. This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.","nodes":[{"pos":[0,229],"content":"The new value of the reference count of the RCW associated with <code>o</code>. This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.","nodes":[{"content":"The new value of the reference count of the RCW associated with <ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph>.","pos":[0,79],"source":"The new value of the reference count of the RCW associated with <code>o</code>."},{"content":"This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.","pos":[80,229]}]}],"pos":[413868,414098],"yaml":true},{"content":"<code>o</code> is not a valid COM object.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph> is not a valid COM object.","source":"<code>o</code> is not a valid COM object."}],"pos":[414275,414317],"yaml":true},{"content":"<code>o</code> is `null`.","nodes":[{"pos":[0,25],"content":"<ph id=\"ph1\">&lt;code&gt;o&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>o</code> is `null`."}],"pos":[414421,414447],"yaml":true},{"content":"Releases the thread cache.","nodes":[{"pos":[0,26],"content":"Releases the thread cache.","nodes":[{"content":"Releases the thread cache.","pos":[0,26]}]}],"pos":[415930,415957],"yaml":true},{"content":"Allocates an unmanaged [binary string (BSTR)](https://msdn.microsoft.com/library/ms221069\\(v=vs.85\\).aspx) and copies the contents of a managed <xref href=\"System.Security.SecureString\"></xref> object into it.","nodes":[{"pos":[0,209],"content":"Allocates an unmanaged <bpt id=\"p1\">[</bpt>binary string (BSTR)<ept id=\"p1\">](https://msdn.microsoft.com/library/ms221069\\(v=vs.85\\).aspx)</ept> and copies the contents of a managed <ph id=\"ph1\">&lt;xref href=\"System.Security.SecureString\"&gt;&lt;/xref&gt;</ph> object into it.","source":"Allocates an unmanaged [binary string (BSTR)](https://msdn.microsoft.com/library/ms221069\\(v=vs.85\\).aspx) and copies the contents of a managed <xref href=\"System.Security.SecureString\"></xref> object into it."}],"pos":[417456,417666],"yaml":true},{"content":"The <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the `BSTR` when finished by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A> method.","nodes":[{"pos":[0,349],"content":"The <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the `BSTR` when finished by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A&gt;</ph> method is useful for custom marshaling or when mixing managed and unmanaged code.","pos":[0,153],"source":"The <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> method is useful for custom marshaling or when mixing managed and unmanaged code."},{"content":"Because this method allocates the unmanaged memory required for a string, always free the <ph id=\"ph1\">`BSTR`</ph> when finished by calling the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A&gt;</ph> method.","pos":[154,349],"source":" Because this method allocates the unmanaged memory required for a string, always free the `BSTR` when finished by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A> method."}]}],"pos":[417677,418027],"yaml":true,"extradata":"MT"},{"content":"The managed object to copy.","nodes":[{"pos":[0,27],"content":"The managed object to copy.","nodes":[{"content":"The managed object to copy.","pos":[0,27]}]}],"pos":[418212,418240],"yaml":true},{"content":"The address, in unmanaged memory, where the <code>s</code> parameter was copied to, or 0 if a null object was supplied.","nodes":[{"pos":[0,119],"content":"The address, in unmanaged memory, where the <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> parameter was copied to, or 0 if a null object was supplied.","source":"The address, in unmanaged memory, where the <code>s</code> parameter was copied to, or 0 if a null object was supplied."}],"pos":[418297,418417],"yaml":true},{"content":"The <code>s</code> parameter is `null`.","nodes":[{"pos":[0,39],"content":"The <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>s</code> parameter is `null`."}],"pos":[418604,418644],"yaml":true},{"content":"The current computer is not running Windows 2000 Service Pack 3 or later.","nodes":[{"pos":[0,73],"content":"The current computer is not running Windows 2000 Service Pack 3 or later.","nodes":[{"content":"The current computer is not running Windows 2000 Service Pack 3 or later.","pos":[0,73]}]}],"pos":[418746,418820],"yaml":true},{"content":"There is insufficient memory available.","nodes":[{"pos":[0,39],"content":"There is insufficient memory available.","nodes":[{"content":"There is insufficient memory available.","pos":[0,39]}]}],"pos":[418920,418960],"yaml":true},{"content":"Copies the contents of a managed <xref href=\"System.Security.SecureString\"></xref> object to a block of memory allocated from the unmanaged COM task allocator.","nodes":[{"pos":[0,159],"content":"Copies the contents of a managed <ph id=\"ph1\">&lt;xref href=\"System.Security.SecureString\"&gt;&lt;/xref&gt;</ph> object to a block of memory allocated from the unmanaged COM task allocator.","source":"Copies the contents of a managed <xref href=\"System.Security.SecureString\"></xref> object to a block of memory allocated from the unmanaged COM task allocator."}],"pos":[420370,420530],"yaml":true},{"content":"The <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A>. The characters of the string are copied as ANSI characters.","nodes":[{"pos":[0,402],"content":"The <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A>. The characters of the string are copied as ANSI characters.","nodes":[{"content":"The <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A>. The characters of the string are copied as ANSI characters.","pos":[0,402],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A&gt;</ph> method is useful for custom marshaling or when mixing managed and unmanaged code.","pos":[0,162],"source":"The <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> method is useful for custom marshaling or when mixing managed and unmanaged code."},{"content":"Because this method allocates the unmanaged memory required for a string, always free the memory by calling <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A&gt;</ph>.","pos":[163,342],"source":" Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A>."},{"content":"The characters of the string are copied as ANSI characters.","pos":[343,402]}]}]}],"pos":[420541,420944],"yaml":true,"extradata":"MT"},{"content":"The managed object to copy.","nodes":[{"pos":[0,27],"content":"The managed object to copy.","nodes":[{"content":"The managed object to copy.","pos":[0,27]}]}],"pos":[421929,421957],"yaml":true},{"content":"The address, in unmanaged memory, where the <code>s</code> parameter was copied to, or 0 if a null object was supplied.","nodes":[{"pos":[0,119],"content":"The address, in unmanaged memory, where the <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> parameter was copied to, or 0 if a null object was supplied.","source":"The address, in unmanaged memory, where the <code>s</code> parameter was copied to, or 0 if a null object was supplied."}],"pos":[422014,422134],"yaml":true},{"content":"The <code>s</code> parameter is `null`.","nodes":[{"pos":[0,39],"content":"The <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>s</code> parameter is `null`."}],"pos":[422330,422370],"yaml":true},{"content":"The current computer is not running Windows 2000 Service Pack 3 or later.","nodes":[{"pos":[0,73],"content":"The current computer is not running Windows 2000 Service Pack 3 or later.","nodes":[{"content":"The current computer is not running Windows 2000 Service Pack 3 or later.","pos":[0,73]}]}],"pos":[422472,422546],"yaml":true},{"content":"There is insufficient memory available.","nodes":[{"pos":[0,39],"content":"There is insufficient memory available.","nodes":[{"content":"There is insufficient memory available.","pos":[0,39]}]}],"pos":[422646,422686],"yaml":true},{"content":"Copies the contents of a managed <xref href=\"System.Security.SecureString\"></xref> object to a block of memory allocated from the unmanaged COM task allocator.","nodes":[{"pos":[0,159],"content":"Copies the contents of a managed <ph id=\"ph1\">&lt;xref href=\"System.Security.SecureString\"&gt;&lt;/xref&gt;</ph> object to a block of memory allocated from the unmanaged COM task allocator.","source":"Copies the contents of a managed <xref href=\"System.Security.SecureString\"></xref> object to a block of memory allocated from the unmanaged COM task allocator."}],"pos":[424114,424274],"yaml":true},{"content":"The <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A> method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A> method. The characters of the string are copied as Unicode characters.","nodes":[{"pos":[0,422],"content":"The <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A> method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A> method. The characters of the string are copied as Unicode characters.","nodes":[{"content":"The <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A> method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A> method. The characters of the string are copied as Unicode characters.","pos":[0,422],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A&gt;</ph> method is useful for custom marshaling or when mixing managed and unmanaged code.","pos":[0,165],"source":"The <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A> method is useful for custom marshaling or when mixing managed and unmanaged code."},{"content":"Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A&gt;</ph> method.","pos":[166,359],"source":" Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A> method."},{"content":"The characters of the string are copied as Unicode characters.","pos":[360,422]}]}]}],"pos":[424285,424708],"yaml":true,"extradata":"MT"},{"content":"The managed object to copy.","nodes":[{"pos":[0,27],"content":"The managed object to copy.","nodes":[{"content":"The managed object to copy.","pos":[0,27]}]}],"pos":[425714,425742],"yaml":true},{"content":"The address, in unmanaged memory, where the <code>s</code> parameter was copied to, or 0 if a null object was supplied.","nodes":[{"pos":[0,119],"content":"The address, in unmanaged memory, where the <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> parameter was copied to, or 0 if a null object was supplied.","source":"The address, in unmanaged memory, where the <code>s</code> parameter was copied to, or 0 if a null object was supplied."}],"pos":[425799,425919],"yaml":true},{"content":"The <code>s</code> parameter is `null`.","nodes":[{"pos":[0,39],"content":"The <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>s</code> parameter is `null`."}],"pos":[426118,426158],"yaml":true},{"content":"The current computer is not running Windows 2000 Service Pack 3 or later.","nodes":[{"pos":[0,73],"content":"The current computer is not running Windows 2000 Service Pack 3 or later.","nodes":[{"content":"The current computer is not running Windows 2000 Service Pack 3 or later.","pos":[0,73]}]}],"pos":[426260,426334],"yaml":true},{"content":"There is insufficient memory available.","nodes":[{"pos":[0,39],"content":"There is insufficient memory available.","nodes":[{"content":"There is insufficient memory available.","pos":[0,39]}]}],"pos":[426434,426474],"yaml":true},{"content":"Copies the contents of a managed <xref href=\"System.Security.SecureString\"></xref> into unmanaged memory, converting into ANSI format as it copies.","nodes":[{"pos":[0,147],"content":"Copies the contents of a managed <ph id=\"ph1\">&lt;xref href=\"System.Security.SecureString\"&gt;&lt;/xref&gt;</ph> into unmanaged memory, converting into ANSI format as it copies.","source":"Copies the contents of a managed <xref href=\"System.Security.SecureString\"></xref> into unmanaged memory, converting into ANSI format as it copies."}],"pos":[427896,428044],"yaml":true},{"content":"The <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> method.","nodes":[{"pos":[0,357],"content":"The <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> method.","nodes":[{"content":"The <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> method.","pos":[0,357],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A&gt;</ph> method is useful for custom marshaling or when mixing managed and unmanaged code.","pos":[0,164],"source":"The <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> method is useful for custom marshaling or when mixing managed and unmanaged code."},{"content":"Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A&gt;</ph> method.","pos":[165,357],"source":" Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> method."}]}]}],"pos":[428055,428413],"yaml":true,"extradata":"MT"},{"content":"The managed object to copy.","nodes":[{"pos":[0,27],"content":"The managed object to copy.","nodes":[{"content":"The managed object to copy.","pos":[0,27]}]}],"pos":[429396,429424],"yaml":true},{"content":"The address, in unmanaged memory, to where the <code>s</code> parameter was copied, or 0 if a null object was supplied.","nodes":[{"pos":[0,119],"content":"The address, in unmanaged memory, to where the <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> parameter was copied, or 0 if a null object was supplied.","source":"The address, in unmanaged memory, to where the <code>s</code> parameter was copied, or 0 if a null object was supplied."}],"pos":[429481,429601],"yaml":true},{"content":"The <code>s</code> parameter is `null`.","nodes":[{"pos":[0,39],"content":"The <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>s</code> parameter is `null`."}],"pos":[429799,429839],"yaml":true},{"content":"The current computer is not running Windows 2000 Service Pack 3 or later.","nodes":[{"pos":[0,73],"content":"The current computer is not running Windows 2000 Service Pack 3 or later.","nodes":[{"content":"The current computer is not running Windows 2000 Service Pack 3 or later.","pos":[0,73]}]}],"pos":[429941,430015],"yaml":true},{"content":"There is insufficient memory available.","nodes":[{"pos":[0,39],"content":"There is insufficient memory available.","nodes":[{"content":"There is insufficient memory available.","pos":[0,39]}]}],"pos":[430115,430155],"yaml":true},{"content":"Copies the contents of a managed <xref href=\"System.Security.SecureString\"></xref> object into unmanaged memory.","nodes":[{"pos":[0,112],"content":"Copies the contents of a managed <ph id=\"ph1\">&lt;xref href=\"System.Security.SecureString\"&gt;&lt;/xref&gt;</ph> object into unmanaged memory.","source":"Copies the contents of a managed <xref href=\"System.Security.SecureString\"></xref> object into unmanaged memory."}],"pos":[431595,431708],"yaml":true},{"content":"The <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> method is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> method.","nodes":[{"pos":[0,371],"content":"The <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> method is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> method.","nodes":[{"content":"The <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> method is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> method.","pos":[0,371],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A&gt;</ph> method is useful for custom marshaling or for use when mixing managed and unmanaged code.","pos":[0,175],"source":"The <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> method is useful for custom marshaling or for use when mixing managed and unmanaged code."},{"content":"Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A&gt;</ph> method.","pos":[176,371],"source":" Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> method."}]}]}],"pos":[431719,432091],"yaml":true,"extradata":"MT"},{"content":"The managed object to copy.","nodes":[{"pos":[0,27],"content":"The managed object to copy.","nodes":[{"content":"The managed object to copy.","pos":[0,27]}]}],"pos":[433116,433144],"yaml":true},{"content":"The address, in unmanaged memory, where <code>s</code> was copied, or 0 if <code>s</code> is a <xref href=\"System.Security.SecureString\"></xref> object whose length is 0.","nodes":[{"pos":[0,170],"content":"The address, in unmanaged memory, where <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> was copied, or 0 if <ph id=\"ph2\">&lt;code&gt;s&lt;/code&gt;</ph> is a <ph id=\"ph3\">&lt;xref href=\"System.Security.SecureString\"&gt;&lt;/xref&gt;</ph> object whose length is 0.","source":"The address, in unmanaged memory, where <code>s</code> was copied, or 0 if <code>s</code> is a <xref href=\"System.Security.SecureString\"></xref> object whose length is 0."}],"pos":[433201,433372],"yaml":true},{"content":"The <code>s</code> parameter is `null`.","nodes":[{"pos":[0,39],"content":"The <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>s</code> parameter is `null`."}],"pos":[433573,433613],"yaml":true},{"content":"The current computer is not running Windows 2000 Service Pack 3 or later.","nodes":[{"pos":[0,73],"content":"The current computer is not running Windows 2000 Service Pack 3 or later.","nodes":[{"content":"The current computer is not running Windows 2000 Service Pack 3 or later.","pos":[0,73]}]}],"pos":[433715,433789],"yaml":true},{"content":"There is insufficient memory available.","nodes":[{"pos":[0,39],"content":"There is insufficient memory available.","nodes":[{"content":"There is insufficient memory available.","pos":[0,39]}]}],"pos":[433889,433929],"yaml":true},{"content":"Sets data referenced by the specified key in the specified COM object.","nodes":[{"pos":[0,70],"content":"Sets data referenced by the specified key in the specified COM object.","nodes":[{"content":"Sets data referenced by the specified key in the specified COM object.","pos":[0,70]}]}],"pos":[435326,435397],"yaml":true},{"content":"All COM objects wrapped in a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW) have an associated hash table, to which <xref:System.Runtime.InteropServices.Marshal.SetComObjectData%2A> adds data. <xref:System.Runtime.InteropServices.Marshal.GetComObjectData%2A?displayProperty=fullName> retrieves data from the hash table. You should never have to call either method from your code.","nodes":[{"pos":[0,419],"content":"All COM objects wrapped in a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW) have an associated hash table, to which <xref:System.Runtime.InteropServices.Marshal.SetComObjectData%2A> adds data. <xref:System.Runtime.InteropServices.Marshal.GetComObjectData%2A?displayProperty=fullName> retrieves data from the hash table. You should never have to call either method from your code.","nodes":[{"content":"All COM objects wrapped in a <bpt id=\"p1\">[</bpt>Runtime Callable Wrapper<ept id=\"p1\">](~/docs/framework/interop/runtime-callable-wrapper.md)</ept> (RCW) have an associated hash table, to which <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.SetComObjectData%2A&gt;</ph> adds data.","pos":[0,232],"source":"All COM objects wrapped in a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW) have an associated hash table, to which <xref:System.Runtime.InteropServices.Marshal.SetComObjectData%2A> adds data."},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetComObjectData%2A?displayProperty=fullName&gt;</ph> retrieves data from the hash table.","pos":[233,359],"source":" <xref:System.Runtime.InteropServices.Marshal.GetComObjectData%2A?displayProperty=fullName> retrieves data from the hash table."},{"content":"You should never have to call either method from your code.","pos":[360,419]}]}],"pos":[435408,435828],"yaml":true,"extradata":"MT"},{"content":"The COM object in which to store the data.","nodes":[{"pos":[0,42],"content":"The COM object in which to store the data.","nodes":[{"content":"The COM object in which to store the data.","pos":[0,42]}]}],"pos":[436001,436044],"yaml":true},{"content":"The key in the internal hash table of the COM object in which to store the data.","nodes":[{"pos":[0,80],"content":"The key in the internal hash table of the COM object in which to store the data.","nodes":[{"content":"The key in the internal hash table of the COM object in which to store the data.","pos":[0,80]}]}],"pos":[436103,436184],"yaml":true},{"content":"The data to set.","nodes":[{"pos":[0,16],"content":"The data to set.","nodes":[{"content":"The data to set.","pos":[0,16]}]}],"pos":[436244,436261],"yaml":true},{"content":"`true` if the data was set successfully; otherwise, `false`.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">`true`</ph> if the data was set successfully; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the data was set successfully; otherwise, `false`."}],"pos":[436319,436382],"yaml":true},{"content":"<code>obj</code> is `null`.  \n  \n -or-  \n  \n <code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;obj&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>obj</code> is `null`."},{"pos":[34,38],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[45,72],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[436567,436646],"yaml":true},{"content":"<code>obj</code> is not a COM object.  \n  \n -or-  \n  \n <code>obj</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] object.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;obj&lt;/code&gt;</ph> is not a COM object.","source":"<code>obj</code> is not a COM object."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,122],"content":"<ph id=\"ph1\">&lt;code&gt;obj&lt;/code&gt;</ph> is a <ph id=\"ph2\">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> object.","source":"<code>obj</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] object."}],"pos":[436740,436869],"yaml":true},{"content":"Returns the unmanaged size of an object in bytes.","nodes":[{"pos":[0,49],"content":"Returns the unmanaged size of an object in bytes.","nodes":[{"content":"Returns the unmanaged size of an object in bytes.","pos":[0,49]}]}],"pos":[438010,438060],"yaml":true},{"content":"This method accepts an instance of a structure, which can be a reference type or a boxed value type. The layout must be sequential or explicit.  \n  \n The size returned is the size of the unmanaged object. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class.  \n  \n You can use the <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A> method to determine how much unmanaged memory to allocate using the <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> and <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A> methods.","nodes":[{"pos":[0,143],"content":"This method accepts an instance of a structure, which can be a reference type or a boxed value type. The layout must be sequential or explicit.","nodes":[{"content":"This method accepts an instance of a structure, which can be a reference type or a boxed value type. The layout must be sequential or explicit.","pos":[0,143],"nodes":[{"content":"This method accepts an instance of a structure, which can be a reference type or a boxed value type.","pos":[0,100]},{"content":"The layout must be sequential or explicit.","pos":[101,143]}]}]},{"pos":[150,385],"content":"The size returned is the size of the unmanaged object. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class.","nodes":[{"content":"The size returned is the size of the unmanaged object. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class.","pos":[0,235],"nodes":[{"content":"The size returned is the size of the unmanaged object.","pos":[0,54]},{"content":"The unmanaged and managed sizes of an object can differ.","pos":[55,111]},{"content":"For character types, the size is affected by the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.CharSet&gt;</ph> value applied to that class.","pos":[112,235],"source":" For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class."}]}]},{"pos":[392,670],"content":"You can use the <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A> method to determine how much unmanaged memory to allocate using the <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> and <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A> methods.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.SizeOf%2A&gt;</ph> method to determine how much unmanaged memory to allocate using the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A&gt;</ph> methods.","pos":[0,278],"source":"You can use the <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A> method to determine how much unmanaged memory to allocate using the <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> and <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A> methods."}]}],"pos":[438071,438748],"yaml":true,"extradata":"MT"},{"content":"The object whose size is to be returned.","nodes":[{"pos":[0,40],"content":"The object whose size is to be returned.","nodes":[{"content":"The object whose size is to be returned.","pos":[0,40]}]}],"pos":[439627,439668],"yaml":true},{"content":"The size of the specified object in unmanaged code.","nodes":[{"pos":[0,51],"content":"The size of the specified object in unmanaged code.","nodes":[{"content":"The size of the specified object in unmanaged code.","pos":[0,51]}]}],"pos":[439724,439776],"yaml":true},{"content":"The <code>structure</code> parameter is `null`.","nodes":[{"pos":[0,47],"content":"The <ph id=\"ph1\">&lt;code&gt;structure&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>structure</code> parameter is `null`."}],"pos":[439951,439999],"yaml":true},{"content":"Returns the size of an unmanaged type in bytes.","nodes":[{"pos":[0,47],"content":"Returns the size of an unmanaged type in bytes.","nodes":[{"content":"Returns the size of an unmanaged type in bytes.","pos":[0,47]}]}],"pos":[441587,441635],"yaml":true},{"content":"You can use this method when you do not have a structure. The layout must be sequential or explicit.  \n  \n The size returned is the size of the unmanaged type. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class.","nodes":[{"pos":[0,100],"content":"You can use this method when you do not have a structure. The layout must be sequential or explicit.","nodes":[{"content":"You can use this method when you do not have a structure. The layout must be sequential or explicit.","pos":[0,100],"nodes":[{"content":"You can use this method when you do not have a structure.","pos":[0,57]},{"content":"The layout must be sequential or explicit.","pos":[58,100]}]}]},{"pos":[107,340],"content":"The size returned is the size of the unmanaged type. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class.","nodes":[{"content":"The size returned is the size of the unmanaged type. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class.","pos":[0,233],"nodes":[{"content":"The size returned is the size of the unmanaged type.","pos":[0,52]},{"content":"The unmanaged and managed sizes of an object can differ.","pos":[53,109]},{"content":"For character types, the size is affected by the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.CharSet&gt;</ph> value applied to that class.","pos":[110,233],"source":" For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class."}]}]}],"pos":[441646,441991],"yaml":true,"extradata":"MT"},{"content":"The type whose size is to be returned.","nodes":[{"pos":[0,38],"content":"The type whose size is to be returned.","nodes":[{"content":"The type whose size is to be returned.","pos":[0,38]}]}],"pos":[442652,442691],"yaml":true},{"content":"The size of the specified type in unmanaged code.","nodes":[{"pos":[0,49],"content":"The size of the specified type in unmanaged code.","nodes":[{"content":"The size of the specified type in unmanaged code.","pos":[0,49]}]}],"pos":[442747,442797],"yaml":true},{"content":"The <code>t</code> parameter is a generic type.","nodes":[{"pos":[0,47],"content":"The <ph id=\"ph1\">&lt;code&gt;t&lt;/code&gt;</ph> parameter is a generic type.","source":"The <code>t</code> parameter is a generic type."}],"pos":[442964,443012],"yaml":true},{"content":"The <code>t</code> parameter is `null`.","nodes":[{"pos":[0,39],"content":"The <ph id=\"ph1\">&lt;code&gt;t&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>t</code> parameter is `null`."}],"pos":[443114,443154],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Returns the size of an unmanaged type in bytes.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,112],"content":"Returns the size of an unmanaged type in bytes.","nodes":[{"content":"Returns the size of an unmanaged type in bytes.","pos":[0,47]}]}],"pos":[444634,444751],"yaml":true},{"content":"You can use this method when you do not have a structure. The layout must be sequential or explicit.  \n  \n The size returned is the size of the unmanaged type. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class.","nodes":[{"pos":[0,100],"content":"You can use this method when you do not have a structure. The layout must be sequential or explicit.","nodes":[{"content":"You can use this method when you do not have a structure. The layout must be sequential or explicit.","pos":[0,100],"nodes":[{"content":"You can use this method when you do not have a structure.","pos":[0,57]},{"content":"The layout must be sequential or explicit.","pos":[58,100]}]}]},{"pos":[107,340],"content":"The size returned is the size of the unmanaged type. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class.","nodes":[{"content":"The size returned is the size of the unmanaged type. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class.","pos":[0,233],"nodes":[{"content":"The size returned is the size of the unmanaged type.","pos":[0,52]},{"content":"The unmanaged and managed sizes of an object can differ.","pos":[53,109]},{"content":"For character types, the size is affected by the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.CharSet&gt;</ph> value applied to that class.","pos":[110,233],"source":" For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class."}]}]}],"pos":[444762,445107],"yaml":true,"extradata":"MT"},{"content":"The type whose size is to be returned.","nodes":[{"pos":[0,38],"content":"The type whose size is to be returned.","nodes":[{"content":"The type whose size is to be returned.","pos":[0,38]}]}],"pos":[445232,445271],"yaml":true},{"content":"The size, in bytes, of the type that is specified by the <code>T</code> generic type parameter.","nodes":[{"pos":[0,95],"content":"The size, in bytes, of the type that is specified by the <ph id=\"ph1\">&lt;code&gt;T&lt;/code&gt;</ph> generic type parameter.","source":"The size, in bytes, of the type that is specified by the <code>T</code> generic type parameter."}],"pos":[445327,445423],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Returns the unmanaged size of an object of a specified type in bytes.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,134],"content":"Returns the unmanaged size of an object of a specified type in bytes.","nodes":[{"content":"Returns the unmanaged size of an object of a specified type in bytes.","pos":[0,69]}]}],"pos":[446918,447057],"yaml":true},{"content":"This method accepts an instance of a structure, which can be a reference type or a boxed value type. The layout must be sequential or explicit.  \n  \n The size returned is the size of the unmanaged object. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class.  \n  \n You can use the <xref:System.Runtime.InteropServices.Marshal.SizeOf%60%601%28%60%600%29> method to determine how much unmanaged memory to allocate by using the <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> and <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A> methods.","nodes":[{"pos":[0,143],"content":"This method accepts an instance of a structure, which can be a reference type or a boxed value type. The layout must be sequential or explicit.","nodes":[{"content":"This method accepts an instance of a structure, which can be a reference type or a boxed value type. The layout must be sequential or explicit.","pos":[0,143],"nodes":[{"content":"This method accepts an instance of a structure, which can be a reference type or a boxed value type.","pos":[0,100]},{"content":"The layout must be sequential or explicit.","pos":[101,143]}]}]},{"pos":[150,385],"content":"The size returned is the size of the unmanaged object. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class.","nodes":[{"content":"The size returned is the size of the unmanaged object. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class.","pos":[0,235],"nodes":[{"content":"The size returned is the size of the unmanaged object.","pos":[0,54]},{"content":"The unmanaged and managed sizes of an object can differ.","pos":[55,111]},{"content":"For character types, the size is affected by the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.CharSet&gt;</ph> value applied to that class.","pos":[112,235],"source":" For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class."}]}]},{"pos":[392,690],"content":"You can use the <xref:System.Runtime.InteropServices.Marshal.SizeOf%60%601%28%60%600%29> method to determine how much unmanaged memory to allocate by using the <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> and <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A> methods.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.SizeOf%60%601%28%60%600%29&gt;</ph> method to determine how much unmanaged memory to allocate by using the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A&gt;</ph> methods.","pos":[0,298],"source":"You can use the <xref:System.Runtime.InteropServices.Marshal.SizeOf%60%601%28%60%600%29> method to determine how much unmanaged memory to allocate by using the <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> and <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A> methods."}]}],"pos":[447068,447765],"yaml":true,"extradata":"MT"},{"content":"The object whose size is to be returned.","nodes":[{"pos":[0,40],"content":"The object whose size is to be returned.","nodes":[{"content":"The object whose size is to be returned.","pos":[0,40]}]}],"pos":[447900,447941],"yaml":true},{"content":"The type of the <code>structure</code> parameter.","nodes":[{"pos":[0,49],"content":"The type of the <ph id=\"ph1\">&lt;code&gt;structure&lt;/code&gt;</ph> parameter.","source":"The type of the <code>structure</code> parameter."}],"pos":[447992,448042],"yaml":true},{"content":"The size, in bytes, of the specified object in unmanaged code.","nodes":[{"pos":[0,62],"content":"The size, in bytes, of the specified object in unmanaged code.","nodes":[{"content":"The size, in bytes, of the specified object in unmanaged code.","pos":[0,62]}]}],"pos":[448098,448161],"yaml":true},{"content":"The <code>structure</code> parameter is `null`.","nodes":[{"pos":[0,47],"content":"The <ph id=\"ph1\">&lt;code&gt;structure&lt;/code&gt;</ph> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>structure</code> parameter is `null`."}],"pos":[448339,448387],"yaml":true},{"content":"Allocates a [BSTR](https://msdn.microsoft.com/library/ms221069.aspx) and copies the contents of a managed <xref href=\"System.String\"></xref> into it.","nodes":[{"pos":[0,149],"content":"Allocates a <bpt id=\"p1\">[</bpt>BSTR<ept id=\"p1\">](https://msdn.microsoft.com/library/ms221069.aspx)</ept> and copies the contents of a managed <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> into it.","source":"Allocates a [BSTR](https://msdn.microsoft.com/library/ms221069.aspx) and copies the contents of a managed <xref href=\"System.String\"></xref> into it."}],"pos":[449866,450016],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.StringToBSTR%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the `BSTR` when finished by calling <xref:System.Runtime.InteropServices.Marshal.FreeBSTR%2A?displayProperty=fullName>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringBSTR%2A?displayProperty=fullName>.","nodes":[{"pos":[0,484],"content":"<xref:System.Runtime.InteropServices.Marshal.StringToBSTR%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the `BSTR` when finished by calling <xref:System.Runtime.InteropServices.Marshal.FreeBSTR%2A?displayProperty=fullName>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringBSTR%2A?displayProperty=fullName>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StringToBSTR%2A&gt;</ph> is useful for custom marshaling or when mixing managed and unmanaged code.","pos":[0,136],"source":"<xref:System.Runtime.InteropServices.Marshal.StringToBSTR%2A> is useful for custom marshaling or when mixing managed and unmanaged code."},{"content":"Because this method allocates the unmanaged memory required for a string, always free the <ph id=\"ph1\">`BSTR`</ph> when finished by calling <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.FreeBSTR%2A?displayProperty=fullName&gt;</ph>.","pos":[137,342],"source":" Because this method allocates the unmanaged memory required for a string, always free the `BSTR` when finished by calling <xref:System.Runtime.InteropServices.Marshal.FreeBSTR%2A?displayProperty=fullName>."},{"content":"This method provides the opposite functionality of <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringBSTR%2A?displayProperty=fullName&gt;</ph>.","pos":[343,484],"source":" This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringBSTR%2A?displayProperty=fullName>."}]}],"pos":[450027,450512],"yaml":true,"extradata":"MT"},{"content":"The managed string to be copied.","nodes":[{"pos":[0,32],"content":"The managed string to be copied.","nodes":[{"content":"The managed string to be copied.","pos":[0,32]}]}],"pos":[450654,450687],"yaml":true},{"content":"An unmanaged pointer to the `BSTR`, or 0 if <code>s</code> is null.","nodes":[{"pos":[0,67],"content":"An unmanaged pointer to the <ph id=\"ph1\">`BSTR`</ph>, or 0 if <ph id=\"ph2\">&lt;code&gt;s&lt;/code&gt;</ph> is null.","source":"An unmanaged pointer to the `BSTR`, or 0 if <code>s</code> is null."}],"pos":[450744,450812],"yaml":true},{"content":"There is insufficient memory available.","nodes":[{"pos":[0,39],"content":"There is insufficient memory available.","nodes":[{"content":"There is insufficient memory available.","pos":[0,39]}]}],"pos":[450991,451031],"yaml":true},{"content":"The length for <code>s</code> is out of range.","nodes":[{"pos":[0,46],"content":"The length for <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> is out of range.","source":"The length for <code>s</code> is out of range."}],"pos":[451145,451192],"yaml":true},{"content":"Copies the contents of a managed <xref href=\"System.String\"></xref> to a block of memory allocated from the unmanaged COM task allocator.","nodes":[{"pos":[0,137],"content":"Copies the contents of a managed <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> to a block of memory allocated from the unmanaged COM task allocator.","source":"Copies the contents of a managed <xref href=\"System.String\"></xref> to a block of memory allocated from the unmanaged COM task allocator."}],"pos":[452807,452945],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=fullName>. The characters of the string are copied as ANSI characters.","nodes":[{"pos":[0,519],"content":"<xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=fullName>. The characters of the string are copied as ANSI characters.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=fullName>. The characters of the string are copied as ANSI characters.","pos":[0,519],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A&gt;</ph> is useful for custom marshaling or when mixing managed and unmanaged code.","pos":[0,145],"source":"<xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code."},{"content":"Because this method allocates the unmanaged memory required for a string, always free the memory by calling <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A&gt;</ph>.","pos":[146,317],"source":" Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>."},{"content":"This method provides the opposite functionality of <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=fullName&gt;</ph>.","pos":[318,459],"source":" This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=fullName>."},{"content":"The characters of the string are copied as ANSI characters.","pos":[460,519]}]}]}],"pos":[452956,453476],"yaml":true,"extradata":"MT"},{"content":"A managed string to be copied.","nodes":[{"pos":[0,30],"content":"A managed string to be copied.","nodes":[{"content":"A managed string to be copied.","pos":[0,30]}]}],"pos":[453627,453658],"yaml":true},{"content":"An integer representing a pointer to the block of memory allocated for the string, or 0 if <code>s</code> is `null`.","nodes":[{"pos":[0,116],"content":"An integer representing a pointer to the block of memory allocated for the string, or 0 if <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"An integer representing a pointer to the block of memory allocated for the string, or 0 if <code>s</code> is `null`."}],"pos":[453715,453832],"yaml":true},{"content":"There is insufficient memory available.","nodes":[{"pos":[0,39],"content":"There is insufficient memory available.","nodes":[{"content":"There is insufficient memory available.","pos":[0,39]}]}],"pos":[454020,454060],"yaml":true},{"content":"The <code>s</code> parameter exceeds the maximum length allowed by the operating system.","nodes":[{"pos":[0,88],"content":"The <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> parameter exceeds the maximum length allowed by the operating system.","source":"The <code>s</code> parameter exceeds the maximum length allowed by the operating system."}],"pos":[454174,454263],"yaml":true},{"content":"Copies the contents of a managed <xref href=\"System.String\"></xref> to a block of memory allocated from the unmanaged COM task allocator.","nodes":[{"pos":[0,137],"content":"Copies the contents of a managed <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> to a block of memory allocated from the unmanaged COM task allocator.","source":"Copies the contents of a managed <xref href=\"System.String\"></xref> to a block of memory allocated from the unmanaged COM task allocator."}],"pos":[455878,456016],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A?displayProperty=fullName>.  \n  \n The characters of the string are copied as either ANSI or Unicode characters, depending on the operating system where the code is executing. On Windows 98, the characters are copied as ANSI characters. On Windows NT 4.0, Windows 2000, Windows XP, and the Windows Server 2003 family, the characters are copied as Unicode characters.","nodes":[{"pos":[0,467],"content":"<xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A?displayProperty=fullName>.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A?displayProperty=fullName>.","pos":[0,467],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A&gt;</ph> is useful for custom marshaling or for use when mixing managed and unmanaged code.","pos":[0,153],"source":"<xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code."},{"content":"Because this method allocates the unmanaged memory required for a string, always free the memory by calling <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A&gt;</ph>.","pos":[154,325],"source":" Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>."},{"content":"This method provides the opposite functionality of <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A?displayProperty=fullName&gt;</ph>.","pos":[326,467],"source":" This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A?displayProperty=fullName>."}]}]},{"pos":[474,805],"content":"The characters of the string are copied as either ANSI or Unicode characters, depending on the operating system where the code is executing. On Windows 98, the characters are copied as ANSI characters. On Windows NT 4.0, Windows 2000, Windows XP, and the Windows Server 2003 family, the characters are copied as Unicode characters.","nodes":[{"content":"The characters of the string are copied as either ANSI or Unicode characters, depending on the operating system where the code is executing. On Windows 98, the characters are copied as ANSI characters. On Windows NT 4.0, Windows 2000, Windows XP, and the Windows Server 2003 family, the characters are copied as Unicode characters.","pos":[0,331],"nodes":[{"content":"The characters of the string are copied as either ANSI or Unicode characters, depending on the operating system where the code is executing.","pos":[0,140]},{"content":"On Windows 98, the characters are copied as ANSI characters.","pos":[141,201]},{"content":"On Windows NT 4.0, Windows 2000, Windows XP, and the Windows Server 2003 family, the characters are copied as Unicode characters.","pos":[202,331]}]}]}],"pos":[456027,456837],"yaml":true,"extradata":"MT"},{"content":"A managed string to be copied.","nodes":[{"pos":[0,30],"content":"A managed string to be copied.","nodes":[{"content":"A managed string to be copied.","pos":[0,30]}]}],"pos":[456988,457019],"yaml":true},{"content":"The allocated memory block, or 0 if <code>s</code> is `null`.","nodes":[{"pos":[0,61],"content":"The allocated memory block, or 0 if <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"The allocated memory block, or 0 if <code>s</code> is `null`."}],"pos":[457076,457138],"yaml":true},{"content":"There is insufficient memory available.","nodes":[{"pos":[0,39],"content":"There is insufficient memory available.","nodes":[{"content":"There is insufficient memory available.","pos":[0,39]}]}],"pos":[457326,457366],"yaml":true},{"content":"The length for <code>s</code> is out of range.","nodes":[{"pos":[0,46],"content":"The length for <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> is out of range.","source":"The length for <code>s</code> is out of range."}],"pos":[457480,457527],"yaml":true},{"content":"Copies the contents of a managed <xref href=\"System.String\"></xref> to a block of memory allocated from the unmanaged COM task allocator.","nodes":[{"pos":[0,137],"content":"Copies the contents of a managed <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> to a block of memory allocated from the unmanaged COM task allocator.","source":"Copies the contents of a managed <xref href=\"System.String\"></xref> to a block of memory allocated from the unmanaged COM task allocator."}],"pos":[458832,458970],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A?displayProperty=fullName>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A?displayProperty=fullName>. The characters of the string are copied as Unicode characters.","nodes":[{"pos":[0,553],"content":"<xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A?displayProperty=fullName>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A?displayProperty=fullName>. The characters of the string are copied as Unicode characters.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A?displayProperty=fullName>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A?displayProperty=fullName>. The characters of the string are copied as Unicode characters.","pos":[0,553],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A&gt;</ph> is useful for custom marshaling or for use when mixing managed and unmanaged code.","pos":[0,152],"source":"<xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code."},{"content":"Because this method allocates the unmanaged memory required for a string, always free the memory by calling <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A?displayProperty=fullName&gt;</ph>.","pos":[153,349],"source":" Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A?displayProperty=fullName>."},{"content":"This method provides the opposite functionality of <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A?displayProperty=fullName&gt;</ph>.","pos":[350,490],"source":" This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A?displayProperty=fullName>."},{"content":"The characters of the string are copied as Unicode characters.","pos":[491,553]}]}]}],"pos":[458981,459535],"yaml":true,"extradata":"MT"},{"content":"A managed string to be copied.","nodes":[{"pos":[0,30],"content":"A managed string to be copied.","nodes":[{"content":"A managed string to be copied.","pos":[0,30]}]}],"pos":[459685,459716],"yaml":true},{"content":"An integer representing a pointer to the block of memory allocated for the string, or 0 if s is `null`.","nodes":[{"pos":[0,103],"content":"An integer representing a pointer to the block of memory allocated for the string, or 0 if s is <ph id=\"ph1\">`null`</ph>.","source":"An integer representing a pointer to the block of memory allocated for the string, or 0 if s is `null`."}],"pos":[459773,459877],"yaml":true},{"content":"The <code>s</code> parameter exceeds the maximum length allowed by the operating system.","nodes":[{"pos":[0,88],"content":"The <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> parameter exceeds the maximum length allowed by the operating system.","source":"The <code>s</code> parameter exceeds the maximum length allowed by the operating system."}],"pos":[460078,460167],"yaml":true},{"content":"There is insufficient memory available.","nodes":[{"pos":[0,39],"content":"There is insufficient memory available.","nodes":[{"content":"There is insufficient memory available.","pos":[0,39]}]}],"pos":[460267,460307],"yaml":true},{"content":"Copies the contents of a managed <xref href=\"System.String\"></xref> into unmanaged memory, converting into ANSI format as it copies.","nodes":[{"pos":[0,132],"content":"Copies the contents of a managed <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> into unmanaged memory, converting into ANSI format as it copies.","source":"Copies the contents of a managed <xref href=\"System.String\"></xref> into unmanaged memory, converting into ANSI format as it copies."}],"pos":[462947,463080],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>. <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=fullName>.  \n  \n This method copies embedded null characters, and includes a terminating null character.","nodes":[{"pos":[0,512],"content":"<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>. <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=fullName>.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>. <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=fullName>.","pos":[0,512],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A&gt;</ph> is useful for custom marshaling or when mixing managed and unmanaged code.","pos":[0,143],"source":"<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code."},{"content":"Because this method allocates the unmanaged memory required for a string, always free the memory by calling <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A&gt;</ph>.","pos":[144,313],"source":" Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A&gt;</ph> provides the opposite functionality of <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=fullName&gt;</ph>.","pos":[314,512],"source":" <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=fullName>."}]}]},{"pos":[519,606],"content":"This method copies embedded null characters, and includes a terminating null character.","nodes":[{"content":"This method copies embedded null characters, and includes a terminating null character.","pos":[0,87]}]}],"pos":[463091,463702],"yaml":true,"extradata":"MT"},{"content":"A managed string to be copied.","nodes":[{"pos":[0,30],"content":"A managed string to be copied.","nodes":[{"content":"A managed string to be copied.","pos":[0,30]}]}],"pos":[464435,464466],"yaml":true},{"content":"The address, in unmanaged memory, to where <code>s</code> was copied, or 0 if <code>s</code> is `null`.","nodes":[{"pos":[0,103],"content":"The address, in unmanaged memory, to where <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> was copied, or 0 if <ph id=\"ph2\">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"The address, in unmanaged memory, to where <code>s</code> was copied, or 0 if <code>s</code> is `null`."}],"pos":[464523,464627],"yaml":true},{"content":"There is insufficient memory available.","nodes":[{"pos":[0,39],"content":"There is insufficient memory available.","nodes":[{"content":"There is insufficient memory available.","pos":[0,39]}]}],"pos":[464813,464853],"yaml":true},{"content":"The <code>s</code> parameter exceeds the maximum length allowed by the operating system.","nodes":[{"pos":[0,88],"content":"The <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> parameter exceeds the maximum length allowed by the operating system.","source":"The <code>s</code> parameter exceeds the maximum length allowed by the operating system."}],"pos":[464967,465056],"yaml":true},{"content":"Copies the contents of a managed <xref href=\"System.String\"></xref> into unmanaged memory, converting into ANSI format if required.","nodes":[{"pos":[0,131],"content":"Copies the contents of a managed <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> into unmanaged memory, converting into ANSI format if required.","source":"Copies the contents of a managed <xref href=\"System.String\"></xref> into unmanaged memory, converting into ANSI format if required."}],"pos":[466659,466791],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A?displayProperty=fullName>.  \n  \n This method copies embedded null characters, and includes a terminating null character.","nodes":[{"pos":[0,463],"content":"<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A?displayProperty=fullName>.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A?displayProperty=fullName>.","pos":[0,463],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A&gt;</ph> is useful for custom marshaling or for use when mixing managed and unmanaged code.","pos":[0,151],"source":"<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code."},{"content":"Because this method allocates the unmanaged memory required for a string, always free the memory by calling <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A&gt;</ph>.","pos":[152,321],"source":" Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>."},{"content":"This method provides the opposite functionality of <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A?displayProperty=fullName&gt;</ph>.","pos":[322,463],"source":" This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A?displayProperty=fullName>."}]}]},{"pos":[470,557],"content":"This method copies embedded null characters, and includes a terminating null character.","nodes":[{"content":"This method copies embedded null characters, and includes a terminating null character.","pos":[0,87]}]}],"pos":[466802,467364],"yaml":true,"extradata":"MT"},{"content":"A managed string to be copied.","nodes":[{"pos":[0,30],"content":"A managed string to be copied.","nodes":[{"content":"A managed string to be copied.","pos":[0,30]}]}],"pos":[467889,467920],"yaml":true},{"content":"The address, in unmanaged memory, to where the string was copied, or 0 if <code>s</code> is `null`.","nodes":[{"pos":[0,99],"content":"The address, in unmanaged memory, to where the string was copied, or 0 if <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"The address, in unmanaged memory, to where the string was copied, or 0 if <code>s</code> is `null`."}],"pos":[467977,468077],"yaml":true},{"content":"There is insufficient memory available.","nodes":[{"pos":[0,39],"content":"There is insufficient memory available.","nodes":[{"content":"There is insufficient memory available.","pos":[0,39]}]}],"pos":[468263,468303],"yaml":true},{"content":"Copies the contents of a managed <xref href=\"System.String\"></xref> into unmanaged memory.","nodes":[{"pos":[0,90],"content":"Copies the contents of a managed <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> into unmanaged memory.","source":"Copies the contents of a managed <xref href=\"System.String\"></xref> into unmanaged memory."}],"pos":[469596,469687],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A?displayProperty=fullName>.  \n  \n This method copies embedded null characters, and includes a terminating null character.","nodes":[{"pos":[0,461],"content":"<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A?displayProperty=fullName>.","nodes":[{"content":"<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A?displayProperty=fullName>.","pos":[0,461],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A&gt;</ph> is useful for custom marshaling or for use when mixing managed and unmanaged code.","pos":[0,150],"source":"<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code."},{"content":"Because this method allocates the unmanaged memory required for a string, always free the memory by calling <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A&gt;</ph>.","pos":[151,320],"source":" Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>."},{"content":"This method provides the opposite functionality of <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A?displayProperty=fullName&gt;</ph>.","pos":[321,461],"source":" This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A?displayProperty=fullName>."}]}]},{"pos":[468,555],"content":"This method copies embedded null characters, and includes a terminating null character.","nodes":[{"content":"This method copies embedded null characters, and includes a terminating null character.","pos":[0,87]}]}],"pos":[469698,470258],"yaml":true,"extradata":"MT"},{"content":"A managed string to be copied.","nodes":[{"pos":[0,30],"content":"A managed string to be copied.","nodes":[{"content":"A managed string to be copied.","pos":[0,30]}]}],"pos":[470406,470437],"yaml":true},{"content":"The address, in unmanaged memory, to where the <code>s</code> was copied, or 0 if <code>s</code> is `null`.","nodes":[{"pos":[0,107],"content":"The address, in unmanaged memory, to where the <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> was copied, or 0 if <ph id=\"ph2\">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"The address, in unmanaged memory, to where the <code>s</code> was copied, or 0 if <code>s</code> is `null`."}],"pos":[470494,470602],"yaml":true},{"content":"The method could not allocate enough native heap memory.","nodes":[{"pos":[0,56],"content":"The method could not allocate enough native heap memory.","nodes":[{"content":"The method could not allocate enough native heap memory.","pos":[0,56]}]}],"pos":[470787,470844],"yaml":true},{"content":"The <code>s</code> parameter exceeds the maximum length allowed by the operating system.","nodes":[{"pos":[0,88],"content":"The <ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> parameter exceeds the maximum length allowed by the operating system.","source":"The <code>s</code> parameter exceeds the maximum length allowed by the operating system."}],"pos":[470958,471047],"yaml":true},{"content":"Marshals data from a managed object to an unmanaged block of memory.","nodes":[{"pos":[0,68],"content":"Marshals data from a managed object to an unmanaged block of memory.","nodes":[{"content":"Marshals data from a managed object to an unmanaged block of memory.","pos":[0,68]}]}],"pos":[472758,472827],"yaml":true},{"content":"If `structure` is a value type, it can be boxed or unboxed. If it is boxed, it is unboxed before copying.  \n  \n A formatted class is a reference type whose layout is specified by the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute, as either <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> or <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName>.  \n  \n <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> copies the contents of `structure` to the pre-allocated block of memory that the `ptr` parameter points to. If `structure` contains reference types that marshal to COM interface pointers (interfaces, classes without layout, and <xref:System.Object?displayProperty=fullName>), the managed objects are kept alive with reference counts. All other reference types (for example, strings and arrays) are marshaled to copies. To release these managed or unmanaged objects, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A?displayProperty=fullName>method before you free the memory block.  \n  \n If you use the <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> method to copy a different instance to the memory block at a later time, specify `true` for `fDeleteOld` to remove reference counts for reference types in the previous instance. Otherwise, the managed reference typesand unmanaged copies are effectively leaked.  \n  \n The overall pattern for using <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> is as follows:  \n  \n1.  On the first call to the <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> method after a memory block has been allocated, `fDeleteOld` must be `false`, because there are no contents to clear.  \n  \n    > [!IMPORTANT]\n    >  Specify `true` for `fDeleteOld` only if the block contains valid data.  \n  \n2.  If you copy a different instance to the memory block, and the object contains reference types, `fDeleteOld` must be `true` to free reference types in the old contents.  \n  \n3.  If the object contains reference types, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> method before you free the memory block.  \n  \n> [!NOTE]\n>  To pin an existing structure instead of copying it, use the <xref:System.Runtime.InteropServices.GCHandle?displayProperty=fullName> type to create a pinned handle for the structure. For details on how to pin, see [Copying and Pinning](~/docs/framework/interop/copying-and-pinning.md).","nodes":[{"pos":[0,105],"content":"If `structure` is a value type, it can be boxed or unboxed. If it is boxed, it is unboxed before copying.","nodes":[{"content":"If <ph id=\"ph1\">`structure`</ph> is a value type, it can be boxed or unboxed.","pos":[0,59],"source":"If `structure` is a value type, it can be boxed or unboxed."},{"content":"If it is boxed, it is unboxed before copying.","pos":[60,105]}]},{"pos":[112,415],"content":"A formatted class is a reference type whose layout is specified by the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute, as either <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> or <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName>.","nodes":[{"content":"A formatted class is a reference type whose layout is specified by the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute&gt;</ph> attribute, as either <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName&gt;</ph>.","pos":[0,303],"source":"A formatted class is a reference type whose layout is specified by the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute, as either <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> or <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName>."}]},{"pos":[422,1100],"content":"<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> copies the contents of `structure` to the pre-allocated block of memory that the `ptr` parameter points to. If `structure` contains reference types that marshal to COM interface pointers (interfaces, classes without layout, and <xref:System.Object?displayProperty=fullName>), the managed objects are kept alive with reference counts. All other reference types (for example, strings and arrays) are marshaled to copies. To release these managed or unmanaged objects, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A?displayProperty=fullName>method before you free the memory block.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A&gt;</ph> copies the contents of <ph id=\"ph2\">`structure`</ph> to the pre-allocated block of memory that the <ph id=\"ph3\">`ptr`</ph> parameter points to.","pos":[0,171],"source":"<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> copies the contents of `structure` to the pre-allocated block of memory that the `ptr` parameter points to."},{"content":"If <ph id=\"ph1\">`structure`</ph> contains reference types that marshal to COM interface pointers (interfaces, classes without layout, and <ph id=\"ph2\">&lt;xref:System.Object?displayProperty=fullName&gt;</ph>), the managed objects are kept alive with reference counts.","pos":[172,397],"source":" If `structure` contains reference types that marshal to COM interface pointers (interfaces, classes without layout, and <xref:System.Object?displayProperty=fullName>), the managed objects are kept alive with reference counts."},{"content":"All other reference types (for example, strings and arrays) are marshaled to copies.","pos":[398,482]},{"content":"To release these managed or unmanaged objects, you must call the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A?displayProperty=fullName&gt;</ph>method before you free the memory block.","pos":[483,678],"source":" To release these managed or unmanaged objects, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A?displayProperty=fullName>method before you free the memory block."}]},{"pos":[1107,1446],"content":"If you use the <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> method to copy a different instance to the memory block at a later time, specify `true` for `fDeleteOld` to remove reference counts for reference types in the previous instance. Otherwise, the managed reference typesand unmanaged copies are effectively leaked.","nodes":[{"content":"If you use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A&gt;</ph> method to copy a different instance to the memory block at a later time, specify <ph id=\"ph2\">`true`</ph> for <ph id=\"ph3\">`fDeleteOld`</ph> to remove reference counts for reference types in the previous instance.","pos":[0,256],"source":"If you use the <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> method to copy a different instance to the memory block at a later time, specify `true` for `fDeleteOld` to remove reference counts for reference types in the previous instance."},{"content":"Otherwise, the managed reference typesand unmanaged copies are effectively leaked.","pos":[257,339]}]},{"pos":[1453,1561],"content":"The overall pattern for using <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> is as follows:","nodes":[{"content":"The overall pattern for using <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A&gt;</ph> is as follows:","pos":[0,108],"source":"The overall pattern for using <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> is as follows:"}]},{"pos":[1571,1777],"content":"On the first call to the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A&gt;</ph> method after a memory block has been allocated, <ph id=\"ph2\">`fDeleteOld`</ph> must be <ph id=\"ph3\">`false`</ph>, because there are no contents to clear.","source":"On the first call to the <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> method after a memory block has been allocated, `fDeleteOld` must be `false`, because there are no contents to clear."},{"pos":[1789,1879],"content":"[!IMPORTANT]\nSpecify `true` for `fDeleteOld` only if the block contains valid data.","leadings":["","    >  "],"nodes":[{"content":"Specify <ph id=\"ph1\">`true`</ph> for <ph id=\"ph2\">`fDeleteOld`</ph> only if the block contains valid data.","pos":[13,83],"source":"Specify `true` for `fDeleteOld` only if the block contains valid data."}]},{"pos":[1889,2056],"content":"If you copy a different instance to the memory block, and the object contains reference types, <ph id=\"ph1\">`fDeleteOld`</ph> must be <ph id=\"ph2\">`true`</ph> to free reference types in the old contents.","source":"If you copy a different instance to the memory block, and the object contains reference types, `fDeleteOld` must be `true` to free reference types in the old contents."},{"pos":[2066,2230],"content":"If the object contains reference types, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> method before you free the memory block.","nodes":[{"content":"If the object contains reference types, you must call the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A&gt;</ph> method before you free the memory block.","pos":[0,164],"source":"If the object contains reference types, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> method before you free the memory block."}]},{"pos":[2238,2533],"content":"[!NOTE]\n To pin an existing structure instead of copying it, use the <xref:System.Runtime.InteropServices.GCHandle?displayProperty=fullName> type to create a pinned handle for the structure. For details on how to pin, see [Copying and Pinning](~/docs/framework/interop/copying-and-pinning.md).","leadings":["","> "],"nodes":[{"content":"To pin an existing structure instead of copying it, use the <xref:System.Runtime.InteropServices.GCHandle?displayProperty=fullName> type to create a pinned handle for the structure. For details on how to pin, see [Copying and Pinning](~/docs/framework/interop/copying-and-pinning.md).","pos":[9,293],"nodes":[{"content":"To pin an existing structure instead of copying it, use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.GCHandle?displayProperty=fullName&gt;</ph> type to create a pinned handle for the structure.","pos":[0,181],"source":"To pin an existing structure instead of copying it, use the <xref:System.Runtime.InteropServices.GCHandle?displayProperty=fullName> type to create a pinned handle for the structure."},{"content":"For details on how to pin, see <bpt id=\"p1\">[</bpt>Copying and Pinning<ept id=\"p1\">](~/docs/framework/interop/copying-and-pinning.md)</ept>.","pos":[182,284],"source":" For details on how to pin, see [Copying and Pinning](~/docs/framework/interop/copying-and-pinning.md)."}]}]}],"pos":[472838,475394],"yaml":true,"extradata":"MT"},{"content":"A managed object that holds the data to be marshaled. This object must be a structure or an instance of a formatted class.","nodes":[{"pos":[0,122],"content":"A managed object that holds the data to be marshaled. This object must be a structure or an instance of a formatted class.","nodes":[{"content":"A managed object that holds the data to be marshaled. This object must be a structure or an instance of a formatted class.","pos":[0,122],"nodes":[{"content":"A managed object that holds the data to be marshaled.","pos":[0,53]},{"content":"This object must be a structure or an instance of a formatted class.","pos":[54,122]}]}]}],"pos":[476336,476459],"yaml":true},{"content":"A pointer to an unmanaged block of memory, which must be allocated before this method is called.","nodes":[{"pos":[0,96],"content":"A pointer to an unmanaged block of memory, which must be allocated before this method is called.","nodes":[{"content":"A pointer to an unmanaged block of memory, which must be allocated before this method is called.","pos":[0,96]}]}],"pos":[476518,476615],"yaml":true},{"content":"`true` to call the <xref href=\"System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)\"></xref> method on the <code>ptr</code> parameter before this method copies the data. The block must contain valid data. Note that passing `false` when the memory block already contains data can lead to a memory leak.","nodes":[{"pos":[0,331],"content":"`true` to call the <xref href=\"System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)\"></xref> method on the <code>ptr</code> parameter before this method copies the data. The block must contain valid data. Note that passing `false` when the memory block already contains data can lead to a memory leak.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> to call the <ph id=\"ph2\">&lt;xref href=\"System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)\"&gt;&lt;/xref&gt;</ph> method on the <ph id=\"ph3\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before this method copies the data.","pos":[0,199],"source":"`true` to call the <xref href=\"System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)\"></xref> method on the <code>ptr</code> parameter before this method copies the data."},{"content":"The block must contain valid data.","pos":[200,234]},{"content":"Note that passing <ph id=\"ph1\">`false`</ph> when the memory block already contains data can lead to a memory leak.","pos":[235,331],"source":" Note that passing `false` when the memory block already contains data can lead to a memory leak."}]}],"pos":[476682,477016],"yaml":true},{"content":"<code>structure</code> is a reference type that is not a formatted class.  \n  \n -or-  \n  \n <code>structure</code> is a generic type.","nodes":[{"pos":[0,73],"content":"<ph id=\"ph1\">&lt;code&gt;structure&lt;/code&gt;</ph> is a reference type that is not a formatted class.","source":"<code>structure</code> is a reference type that is not a formatted class."},{"pos":[80,84],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[91,132],"content":"<ph id=\"ph1\">&lt;code&gt;structure&lt;/code&gt;</ph> is a generic type.","source":"<code>structure</code> is a generic type."}],"pos":[477191,477330],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Marshals data from a managed object of a specified type to an unmanaged block of memory.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,153],"content":"Marshals data from a managed object of a specified type to an unmanaged block of memory.","nodes":[{"content":"Marshals data from a managed object of a specified type to an unmanaged block of memory.","pos":[0,88]}]}],"pos":[479089,479247],"yaml":true},{"content":"A formatted class is a reference type whose layout is specified by the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute, as either <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> or <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName>.  \n  \n <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29> copies the contents of `structure` to the pre-allocated block of memory that the `ptr` parameter points to. If `structure` contains reference types that marshal to COM interface pointers (interfaces, classes without layout, and <xref:System.Object?displayProperty=fullName>), the managed objects are kept alive with reference counts. All other reference types (for example, strings and arrays) are marshaled to copies. To release these managed or unmanaged objects, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%60%601%28System.IntPtr%29> method before you free the memory block.  \n  \n If you use the<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29> method to copy a different instance to the memory block at a later time, specify `true` for `fDeleteOld` to remove reference counts for reference types in the previous instance. Otherwise, the managed reference types and unmanaged copies are effectively leaked.  \n  \n The overall pattern for using<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29> is as follows:  \n  \n1.  On the first call to the<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> method after a memory block has been allocated, `fDeleteOld` must be `false`, because there are no contents to clear.  \n  \n    > [!IMPORTANT]\n    >  Specify `true` for `fDeleteOld` only if the block contains valid data.  \n  \n2.  If you copy a different instance to the memory block, and the object contains reference types, `fDeleteOld` must be `true` to free reference types in the old contents.  \n  \n3.  If the object contains reference types, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> method before you free the memory block.  \n  \n> [!NOTE]\n>  To pin an existing structure instead of copying it, use the <xref:System.Runtime.InteropServices.GCHandle?displayProperty=fullName> type to create a pinned handle for the structure. For details on how to pin, see [Copying and Pinning](~/docs/framework/interop/copying-and-pinning.md).","nodes":[{"pos":[0,303],"content":"A formatted class is a reference type whose layout is specified by the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute, as either <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> or <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName>.","nodes":[{"content":"A formatted class is a reference type whose layout is specified by the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute&gt;</ph> attribute, as either <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName&gt;</ph>.","pos":[0,303],"source":"A formatted class is a reference type whose layout is specified by the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute, as either <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> or <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName>."}]},{"pos":[310,1037],"content":"<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29> copies the contents of `structure` to the pre-allocated block of memory that the `ptr` parameter points to. If `structure` contains reference types that marshal to COM interface pointers (interfaces, classes without layout, and <xref:System.Object?displayProperty=fullName>), the managed objects are kept alive with reference counts. All other reference types (for example, strings and arrays) are marshaled to copies. To release these managed or unmanaged objects, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%60%601%28System.IntPtr%29> method before you free the memory block.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29&gt;</ph> copies the contents of <ph id=\"ph2\">`structure`</ph> to the pre-allocated block of memory that the <ph id=\"ph3\">`ptr`</ph> parameter points to.","pos":[0,221],"source":"<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29> copies the contents of `structure` to the pre-allocated block of memory that the `ptr` parameter points to."},{"content":"If <ph id=\"ph1\">`structure`</ph> contains reference types that marshal to COM interface pointers (interfaces, classes without layout, and <ph id=\"ph2\">&lt;xref:System.Object?displayProperty=fullName&gt;</ph>), the managed objects are kept alive with reference counts.","pos":[222,447],"source":" If `structure` contains reference types that marshal to COM interface pointers (interfaces, classes without layout, and <xref:System.Object?displayProperty=fullName>), the managed objects are kept alive with reference counts."},{"content":"All other reference types (for example, strings and arrays) are marshaled to copies.","pos":[448,532]},{"content":"To release these managed or unmanaged objects, you must call the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.DestroyStructure%60%601%28System.IntPtr%29&gt;</ph> method before you free the memory block.","pos":[533,727],"source":" To release these managed or unmanaged objects, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%60%601%28System.IntPtr%29> method before you free the memory block."}]},{"pos":[1044,1433],"content":"If you use the<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29> method to copy a different instance to the memory block at a later time, specify `true` for `fDeleteOld` to remove reference counts for reference types in the previous instance. Otherwise, the managed reference types and unmanaged copies are effectively leaked.","nodes":[{"content":"If you use the<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29&gt;</ph> method to copy a different instance to the memory block at a later time, specify <ph id=\"ph2\">`true`</ph> for <ph id=\"ph3\">`fDeleteOld`</ph> to remove reference counts for reference types in the previous instance.","pos":[0,305],"source":"If you use the<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29> method to copy a different instance to the memory block at a later time, specify `true` for `fDeleteOld` to remove reference counts for reference types in the previous instance."},{"content":"Otherwise, the managed reference types and unmanaged copies are effectively leaked.","pos":[306,389]}]},{"pos":[1440,1597],"content":"The overall pattern for using<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29> is as follows:","nodes":[{"content":"The overall pattern for using<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29&gt;</ph> is as follows:","pos":[0,157],"source":"The overall pattern for using<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29> is as follows:"}]},{"pos":[1607,1812],"content":"On the first call to the<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A&gt;</ph> method after a memory block has been allocated, <ph id=\"ph2\">`fDeleteOld`</ph> must be <ph id=\"ph3\">`false`</ph>, because there are no contents to clear.","source":"On the first call to the<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> method after a memory block has been allocated, `fDeleteOld` must be `false`, because there are no contents to clear."},{"pos":[1824,1914],"content":"[!IMPORTANT]\nSpecify `true` for `fDeleteOld` only if the block contains valid data.","leadings":["","    >  "],"nodes":[{"content":"Specify <ph id=\"ph1\">`true`</ph> for <ph id=\"ph2\">`fDeleteOld`</ph> only if the block contains valid data.","pos":[13,83],"source":"Specify `true` for `fDeleteOld` only if the block contains valid data."}]},{"pos":[1924,2091],"content":"If you copy a different instance to the memory block, and the object contains reference types, <ph id=\"ph1\">`fDeleteOld`</ph> must be <ph id=\"ph2\">`true`</ph> to free reference types in the old contents.","source":"If you copy a different instance to the memory block, and the object contains reference types, `fDeleteOld` must be `true` to free reference types in the old contents."},{"pos":[2101,2265],"content":"If the object contains reference types, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> method before you free the memory block.","nodes":[{"content":"If the object contains reference types, you must call the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A&gt;</ph> method before you free the memory block.","pos":[0,164],"source":"If the object contains reference types, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> method before you free the memory block."}]},{"pos":[2273,2568],"content":"[!NOTE]\n To pin an existing structure instead of copying it, use the <xref:System.Runtime.InteropServices.GCHandle?displayProperty=fullName> type to create a pinned handle for the structure. For details on how to pin, see [Copying and Pinning](~/docs/framework/interop/copying-and-pinning.md).","leadings":["","> "],"nodes":[{"content":"To pin an existing structure instead of copying it, use the <xref:System.Runtime.InteropServices.GCHandle?displayProperty=fullName> type to create a pinned handle for the structure. For details on how to pin, see [Copying and Pinning](~/docs/framework/interop/copying-and-pinning.md).","pos":[9,293],"nodes":[{"content":"To pin an existing structure instead of copying it, use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.GCHandle?displayProperty=fullName&gt;</ph> type to create a pinned handle for the structure.","pos":[0,181],"source":"To pin an existing structure instead of copying it, use the <xref:System.Runtime.InteropServices.GCHandle?displayProperty=fullName> type to create a pinned handle for the structure."},{"content":"For details on how to pin, see <bpt id=\"p1\">[</bpt>Copying and Pinning<ept id=\"p1\">](~/docs/framework/interop/copying-and-pinning.md)</ept>.","pos":[182,284],"source":" For details on how to pin, see [Copying and Pinning](~/docs/framework/interop/copying-and-pinning.md)."}]}]}],"pos":[479258,481847],"yaml":true,"extradata":"MT"},{"content":"A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class.","nodes":[{"pos":[0,121],"content":"A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class.","nodes":[{"content":"A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class.","pos":[0,121],"nodes":[{"content":"A managed object that holds the data to be marshaled.","pos":[0,53]},{"content":"The object must be a structure or an instance of a formatted class.","pos":[54,121]}]}]}],"pos":[482020,482142],"yaml":true},{"content":"A pointer to an unmanaged block of memory, which must be allocated before this method is called.","nodes":[{"pos":[0,96],"content":"A pointer to an unmanaged block of memory, which must be allocated before this method is called.","nodes":[{"content":"A pointer to an unmanaged block of memory, which must be allocated before this method is called.","pos":[0,96]}]}],"pos":[482201,482298],"yaml":true},{"content":"`true` to call the <xref href=\"System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)\"></xref> method on the <code>ptr</code> parameter before this method copies the data. The block must contain valid data. Note that passing `false` when the memory block already contains data can lead to a memory leak.","nodes":[{"pos":[0,322],"content":"`true` to call the <xref href=\"System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)\"></xref> method on the <code>ptr</code> parameter before this method copies the data. The block must contain valid data. Note that passing `false` when the memory block already contains data can lead to a memory leak.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> to call the <ph id=\"ph2\">&lt;xref href=\"System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)\"&gt;&lt;/xref&gt;</ph> method on the <ph id=\"ph3\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before this method copies the data.","pos":[0,190],"source":"`true` to call the <xref href=\"System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)\"></xref> method on the <code>ptr</code> parameter before this method copies the data."},{"content":"The block must contain valid data.","pos":[191,225]},{"content":"Note that passing <ph id=\"ph1\">`false`</ph> when the memory block already contains data can lead to a memory leak.","pos":[226,322],"source":" Note that passing `false` when the memory block already contains data can lead to a memory leak."}]}],"pos":[482365,482690],"yaml":true},{"content":"The type of the managed object.","nodes":[{"pos":[0,31],"content":"The type of the managed object.","nodes":[{"content":"The type of the managed object.","pos":[0,31]}]}],"pos":[482741,482773],"yaml":true},{"content":"<code>structure</code> is a reference type that is not a formatted class.","nodes":[{"pos":[0,73],"content":"<ph id=\"ph1\">&lt;code&gt;structure&lt;/code&gt;</ph> is a reference type that is not a formatted class.","source":"<code>structure</code> is a reference type that is not a formatted class."}],"pos":[482951,483025],"yaml":true},{"content":"Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.","nodes":[{"pos":[0,138],"content":"Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.","nodes":[{"content":"Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.","pos":[0,138],"nodes":[{"content":"Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems.","pos":[0,113]},{"content":"This field is read-only.","pos":[114,138]}]}]}],"pos":[484488,484627],"yaml":true},{"content":"Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system. This field is read-only.","nodes":[{"pos":[0,140],"content":"Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system. This field is read-only.","nodes":[{"content":"Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system. This field is read-only.","pos":[0,140],"nodes":[{"content":"Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system.","pos":[0,115]},{"content":"This field is read-only.","pos":[116,140]}]}]}],"pos":[486870,487011],"yaml":true},{"content":"Throws an exception with a specific failure HRESULT value.","nodes":[{"pos":[0,58],"content":"Throws an exception with a specific failure HRESULT value.","nodes":[{"content":"Throws an exception with a specific failure HRESULT value.","pos":[0,58]}]}],"pos":[489306,489365],"yaml":true},{"content":"This method creates an exception object for the specified failure HRESULT. If the HRESULT is 0 or positive (a success code), the method returns without creating or throwing an exception.  \n  \n Note that the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%28System.Int32%29> method returns an exception based on the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface of the current thread if one is set. When this happens, the `errorCode` parameter is ignored.  \n  \n Some failure HRESULTs map to defined exceptions, whereas others do not. If the HRESULT maps to a defined exception, <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> creates an instance of the exception and throws it. Otherwise, it creates an instance of <xref:System.Runtime.InteropServices.COMException>, initializes the error code field with the HRESULT, and throws that exception. When <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> is invoked, it attempts to retrieve extra information regarding the error by using the unmanaged [GetErrorInfo](https://msdn.microsoft.com/library/ms221032\\(v=vs.85\\).aspx) function.  \n  \n For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md).  \n  \n Occasionally, <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> might return an exception from a previous COM call. In this case, you can use the following workaround and pass `IntPtr(-1)` as the second parameter (`errorInfo`):  \n  \n```  \n[SecurityPermissionAttribute(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]  \npublic static void ThrowExceptionForHR(interrorCode,IntPtrerrorInfo)  \n```","nodes":[{"pos":[0,186],"content":"This method creates an exception object for the specified failure HRESULT. If the HRESULT is 0 or positive (a success code), the method returns without creating or throwing an exception.","nodes":[{"content":"This method creates an exception object for the specified failure HRESULT. If the HRESULT is 0 or positive (a success code), the method returns without creating or throwing an exception.","pos":[0,186],"nodes":[{"content":"This method creates an exception object for the specified failure HRESULT.","pos":[0,74]},{"content":"If the HRESULT is 0 or positive (a success code), the method returns without creating or throwing an exception.","pos":[75,186]}]}]},{"pos":[193,509],"content":"Note that the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%28System.Int32%29> method returns an exception based on the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface of the current thread if one is set. When this happens, the `errorCode` parameter is ignored.","nodes":[{"content":"Note that the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%28System.Int32%29&gt;</ph> method returns an exception based on the <bpt id=\"p1\">[</bpt>IErrorInfo<ept id=\"p1\">](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx)</ept> interface of the current thread if one is set.","pos":[0,259],"source":"Note that the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%28System.Int32%29> method returns an exception based on the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface of the current thread if one is set."},{"content":"When this happens, the <ph id=\"ph1\">`errorCode`</ph> parameter is ignored.","pos":[260,316],"source":" When this happens, the `errorCode` parameter is ignored."}]},{"pos":[516,1176],"content":"Some failure HRESULTs map to defined exceptions, whereas others do not. If the HRESULT maps to a defined exception, <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> creates an instance of the exception and throws it. Otherwise, it creates an instance of <xref:System.Runtime.InteropServices.COMException>, initializes the error code field with the HRESULT, and throws that exception. When <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> is invoked, it attempts to retrieve extra information regarding the error by using the unmanaged [GetErrorInfo](https://msdn.microsoft.com/library/ms221032\\(v=vs.85\\).aspx) function.","nodes":[{"content":"Some failure HRESULTs map to defined exceptions, whereas others do not.","pos":[0,71]},{"content":"If the HRESULT maps to a defined exception, <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A&gt;</ph> creates an instance of the exception and throws it.","pos":[72,236],"source":" If the HRESULT maps to a defined exception, <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> creates an instance of the exception and throws it."},{"content":"Otherwise, it creates an instance of <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.COMException&gt;</ph>, initializes the error code field with the HRESULT, and throws that exception.","pos":[237,403],"source":" Otherwise, it creates an instance of <xref:System.Runtime.InteropServices.COMException>, initializes the error code field with the HRESULT, and throws that exception."},{"content":"When <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A&gt;</ph> is invoked, it attempts to retrieve extra information regarding the error by using the unmanaged <bpt id=\"p1\">[</bpt>GetErrorInfo<ept id=\"p1\">](https://msdn.microsoft.com/library/ms221032\\(v=vs.85\\).aspx)</ept> function.","pos":[404,660],"source":" When <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> is invoked, it attempts to retrieve extra information regarding the error by using the unmanaged [GetErrorInfo](https://msdn.microsoft.com/library/ms221032\\(v=vs.85\\).aspx) function."}]},{"pos":[1183,1380],"content":"For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see <bpt id=\"p1\">[</bpt>How to: Map HRESULTs and Exceptions<ept id=\"p1\">](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)</ept>.","source":"For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)."},{"pos":[1387,1633],"content":"Occasionally, <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> might return an exception from a previous COM call. In this case, you can use the following workaround and pass `IntPtr(-1)` as the second parameter (`errorInfo`):","nodes":[{"content":"Occasionally, <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A&gt;</ph> might return an exception from a previous COM call.","pos":[0,134],"source":"Occasionally, <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> might return an exception from a previous COM call."},{"content":"In this case, you can use the following workaround and pass <ph id=\"ph1\">`IntPtr(-1)`</ph> as the second parameter (<ph id=\"ph2\">`errorInfo`</ph>):","pos":[135,246],"source":" In this case, you can use the following workaround and pass `IntPtr(-1)` as the second parameter (`errorInfo`):"}]}],"pos":[489376,491220],"yaml":true,"extradata":"MT"},{"content":"The HRESULT corresponding to the desired exception.","nodes":[{"pos":[0,51],"content":"The HRESULT corresponding to the desired exception.","nodes":[{"content":"The HRESULT corresponding to the desired exception.","pos":[0,51]}]}],"pos":[491379,491431],"yaml":true},{"content":"Throws an exception with a specific failure HRESULT, based on the specified [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface.","nodes":[{"pos":[0,160],"content":"Throws an exception with a specific failure HRESULT, based on the specified <bpt id=\"p1\">[</bpt>IErrorInfo<ept id=\"p1\">](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx)</ept> interface.","source":"Throws an exception with a specific failure HRESULT, based on the specified [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface."}],"pos":[493183,493344],"yaml":true},{"content":"This method creates an exception object for the specified failure HRESULT. If the HRESULT is 0 or positive (a success code), the method returns without creating or throwing an exception.  \n  \n The <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method releases the `errorInfo` parameter, decreasing the COM reference count of the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface.  \n  \n Note that the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method returns an exception based on the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface of the current thread if one is set. When this happens, the `errorCode` parameter is ignored.  \n  \n Some failure HRESULTs map to defined exceptions, whereas others do not. If the HRESULT maps to a defined exception, <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> creates an instance of the exception and throws it. Otherwise, it creates an instance of <xref:System.Runtime.InteropServices.COMException?displayProperty=fullName>, initializes the error code field with the HRESULT, and throws that exception. The `errorInfo` parameter is used to retrieve extra information regarding the error.  \n  \n For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md).","nodes":[{"pos":[0,186],"content":"This method creates an exception object for the specified failure HRESULT. If the HRESULT is 0 or positive (a success code), the method returns without creating or throwing an exception.","nodes":[{"content":"This method creates an exception object for the specified failure HRESULT. If the HRESULT is 0 or positive (a success code), the method returns without creating or throwing an exception.","pos":[0,186],"nodes":[{"content":"This method creates an exception object for the specified failure HRESULT.","pos":[0,74]},{"content":"If the HRESULT is 0 or positive (a success code), the method returns without creating or throwing an exception.","pos":[75,186]}]}]},{"pos":[193,435],"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A&gt;</ph> method releases the <ph id=\"ph2\">`errorInfo`</ph> parameter, decreasing the COM reference count of the <bpt id=\"p1\">[</bpt>IErrorInfo<ept id=\"p1\">](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx)</ept> interface.","source":"The <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method releases the `errorInfo` parameter, decreasing the COM reference count of the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface."},{"pos":[442,743],"content":"Note that the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method returns an exception based on the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface of the current thread if one is set. When this happens, the `errorCode` parameter is ignored.","nodes":[{"content":"Note that the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A&gt;</ph> method returns an exception based on the <bpt id=\"p1\">[</bpt>IErrorInfo<ept id=\"p1\">](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx)</ept> interface of the current thread if one is set.","pos":[0,244],"source":"Note that the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method returns an exception based on the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface of the current thread if one is set."},{"content":"When this happens, the <ph id=\"ph1\">`errorCode`</ph> parameter is ignored.","pos":[245,301],"source":" When this happens, the `errorCode` parameter is ignored."}]},{"pos":[750,1263],"content":"Some failure HRESULTs map to defined exceptions, whereas others do not. If the HRESULT maps to a defined exception, <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> creates an instance of the exception and throws it. Otherwise, it creates an instance of <xref:System.Runtime.InteropServices.COMException?displayProperty=fullName>, initializes the error code field with the HRESULT, and throws that exception. The `errorInfo` parameter is used to retrieve extra information regarding the error.","nodes":[{"content":"Some failure HRESULTs map to defined exceptions, whereas others do not.","pos":[0,71]},{"content":"If the HRESULT maps to a defined exception, <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A&gt;</ph> creates an instance of the exception and throws it.","pos":[72,236],"source":" If the HRESULT maps to a defined exception, <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> creates an instance of the exception and throws it."},{"content":"Otherwise, it creates an instance of <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.COMException?displayProperty=fullName&gt;</ph>, initializes the error code field with the HRESULT, and throws that exception.","pos":[237,428],"source":" Otherwise, it creates an instance of <xref:System.Runtime.InteropServices.COMException?displayProperty=fullName>, initializes the error code field with the HRESULT, and throws that exception."},{"content":"The <ph id=\"ph1\">`errorInfo`</ph> parameter is used to retrieve extra information regarding the error.","pos":[429,513],"source":" The `errorInfo` parameter is used to retrieve extra information regarding the error."}]},{"pos":[1270,1467],"content":"For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see <bpt id=\"p1\">[</bpt>How to: Map HRESULTs and Exceptions<ept id=\"p1\">](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)</ept>.","source":"For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)."}],"pos":[493355,494837],"yaml":true,"extradata":"MT"},{"content":"The HRESULT corresponding to the desired exception.","nodes":[{"pos":[0,51],"content":"The HRESULT corresponding to the desired exception.","nodes":[{"content":"The HRESULT corresponding to the desired exception.","pos":[0,51]}]}],"pos":[495014,495066],"yaml":true},{"content":"A pointer to the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface that provides more information about the error. You can specify <code>IntPtr(0)</code> to use the current [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface, or <code>IntPtr(-1)</code> to ignore the current [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface and construct the exception just from the error code.","nodes":[{"pos":[0,478],"content":"A pointer to the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface that provides more information about the error. You can specify <code>IntPtr(0)</code> to use the current [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface, or <code>IntPtr(-1)</code> to ignore the current [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface and construct the exception just from the error code.","nodes":[{"content":"A pointer to the <bpt id=\"p1\">[</bpt>IErrorInfo<ept id=\"p1\">](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx)</ept> interface that provides more information about the error.","pos":[0,148],"source":"A pointer to the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface that provides more information about the error."},{"content":"You can specify <ph id=\"ph1\">&lt;code&gt;IntPtr(0)&lt;/code&gt;</ph> to use the current <bpt id=\"p1\">[</bpt>IErrorInfo<ept id=\"p1\">](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx)</ept> interface, or <ph id=\"ph2\">&lt;code&gt;IntPtr(-1)&lt;/code&gt;</ph> to ignore the current <bpt id=\"p2\">[</bpt>IErrorInfo<ept id=\"p2\">](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx)</ept> interface and construct the exception just from the error code.","pos":[149,478],"source":" You can specify <code>IntPtr(0)</code> to use the current [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface, or <code>IntPtr(-1)</code> to ignore the current [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface and construct the exception just from the error code."}]}],"pos":[495131,495610],"yaml":true},{"content":"Gets the address of the element at the specified index inside the specified array.","nodes":[{"pos":[0,82],"content":"Gets the address of the element at the specified index inside the specified array.","nodes":[{"content":"Gets the address of the element at the specified index inside the specified array.","pos":[0,82]}]}],"pos":[497422,497505],"yaml":true},{"content":"The array must be pinned using a <xref:System.Runtime.InteropServices.GCHandle> before it is passed to this method. For maximum performance, this method does not validate the array passed to it; this can result in unexpected behavior.","nodes":[{"pos":[0,234],"content":"The array must be pinned using a <xref:System.Runtime.InteropServices.GCHandle> before it is passed to this method. For maximum performance, this method does not validate the array passed to it; this can result in unexpected behavior.","nodes":[{"content":"The array must be pinned using a <xref:System.Runtime.InteropServices.GCHandle> before it is passed to this method. For maximum performance, this method does not validate the array passed to it; this can result in unexpected behavior.","pos":[0,234],"nodes":[{"content":"The array must be pinned using a <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> before it is passed to this method.","pos":[0,115],"source":"The array must be pinned using a <xref:System.Runtime.InteropServices.GCHandle> before it is passed to this method."},{"content":"For maximum performance, this method does not validate the array passed to it; this can result in unexpected behavior.","pos":[116,234]}]}]}],"pos":[497516,497751],"yaml":true,"extradata":"MT"},{"content":"The array that contains the desired element.","nodes":[{"pos":[0,44],"content":"The array that contains the desired element.","nodes":[{"content":"The array that contains the desired element.","pos":[0,44]}]}],"pos":[497924,497969],"yaml":true},{"content":"The index in the <code>arr</code> parameter of the desired element.","nodes":[{"pos":[0,67],"content":"The index in the <ph id=\"ph1\">&lt;code&gt;arr&lt;/code&gt;</ph> parameter of the desired element.","source":"The index in the <code>arr</code> parameter of the desired element."}],"pos":[498029,498097],"yaml":true},{"content":"The address of <code>index</code> inside <code>arr</code>.","nodes":[{"pos":[0,58],"content":"The address of <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> inside <ph id=\"ph2\">&lt;code&gt;arr&lt;/code&gt;</ph>.","source":"The address of <code>index</code> inside <code>arr</code>."}],"pos":[498154,498213],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Gets the address of the element at the specified index in an array of a specified type.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,152],"content":"Gets the address of the element at the specified index in an array of a specified type.","nodes":[{"content":"Gets the address of the element at the specified index in an array of a specified type.","pos":[0,87]}]}],"pos":[500027,500184],"yaml":true},{"content":"The array must be pinned by using a <xref:System.Runtime.InteropServices.GCHandle> before it is passed to this method. For maximum performance, this method does not validate the array passed to it; this can result in unexpected behavior.","nodes":[{"pos":[0,237],"content":"The array must be pinned by using a <xref:System.Runtime.InteropServices.GCHandle> before it is passed to this method. For maximum performance, this method does not validate the array passed to it; this can result in unexpected behavior.","nodes":[{"content":"The array must be pinned by using a <xref:System.Runtime.InteropServices.GCHandle> before it is passed to this method. For maximum performance, this method does not validate the array passed to it; this can result in unexpected behavior.","pos":[0,237],"nodes":[{"content":"The array must be pinned by using a <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> before it is passed to this method.","pos":[0,118],"source":"The array must be pinned by using a <xref:System.Runtime.InteropServices.GCHandle> before it is passed to this method."},{"content":"For maximum performance, this method does not validate the array passed to it; this can result in unexpected behavior.","pos":[119,237]}]}]}],"pos":[500195,500433],"yaml":true,"extradata":"MT"},{"content":"The array that contains the desired element.","nodes":[{"pos":[0,44],"content":"The array that contains the desired element.","nodes":[{"content":"The array that contains the desired element.","pos":[0,44]}]}],"pos":[500598,500643],"yaml":true},{"content":"The index of the desired element in the <code>arr</code> array.","nodes":[{"pos":[0,63],"content":"The index of the desired element in the <ph id=\"ph1\">&lt;code&gt;arr&lt;/code&gt;</ph> array.","source":"The index of the desired element in the <code>arr</code> array."}],"pos":[500703,500767],"yaml":true},{"content":"The type of the array.","nodes":[{"pos":[0,22],"content":"The type of the array.","nodes":[{"content":"The type of the array.","pos":[0,22]}]}],"pos":[500818,500841],"yaml":true},{"content":"The address of <code>index</code> in <code>arr</code>.","nodes":[{"pos":[0,54],"content":"The address of <ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> in <ph id=\"ph2\">&lt;code&gt;arr&lt;/code&gt;</ph>.","source":"The address of <code>index</code> in <code>arr</code>."}],"pos":[500898,500953],"yaml":true},{"content":"Writes a single byte value to unmanaged memory at a specified offset.","nodes":[{"pos":[0,69],"content":"Writes a single byte value to unmanaged memory at a specified offset.","nodes":[{"content":"Writes a single byte value to unmanaged memory at a specified offset.","pos":[0,69]}]}],"pos":[502631,502701],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.","nodes":[{"pos":[0,334],"content":"<xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.WriteByte%2A&gt;</ph> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before setting its element values.","pos":[0,334],"source":"<xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values."}]}],"pos":[502712,503047],"yaml":true,"extradata":"MT"},{"content":"The base address in unmanaged memory of the target object.","nodes":[{"pos":[0,58],"content":"The base address in unmanaged memory of the target object.","nodes":[{"content":"The base address in unmanaged memory of the target object.","pos":[0,58]}]}],"pos":[503207,503266],"yaml":true},{"content":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing.","nodes":[{"pos":[0,91],"content":"An additional byte offset, which is added to the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before writing.","source":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing."}],"pos":[503324,503416],"yaml":true},{"content":"The value to write.","nodes":[{"pos":[0,19],"content":"The value to write.","nodes":[{"content":"The value to write.","pos":[0,19]}]}],"pos":[503473,503493],"yaml":true},{"content":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.","nodes":[{"pos":[0,103],"content":"Base address (<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph>) plus offset byte (<ph id=\"ph2\">&lt;code&gt;ofs&lt;/code&gt;</ph>) produces a null or invalid address.","source":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address."}],"pos":[503677,503781],"yaml":true},{"content":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.","nodes":[{"pos":[0,206],"content":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is an <ph id=\"ph2\">&lt;xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,98],"source":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object."},{"content":"This method does not accept <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"&gt;&lt;/xref&gt;</ph> parameters.","pos":[99,206],"source":" This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters."}]}],"pos":[503875,504082],"yaml":true},{"content":"Writes a single byte value to unmanaged memory at a specified offset.","nodes":[{"pos":[0,69],"content":"Writes a single byte value to unmanaged memory at a specified offset.","nodes":[{"content":"Writes a single byte value to unmanaged memory at a specified offset.","pos":[0,69]}]}],"pos":[505756,505826],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.","nodes":[{"pos":[0,334],"content":"<xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.WriteByte%2A&gt;</ph> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before setting its element values.","pos":[0,334],"source":"<xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values."}]}],"pos":[505837,506172],"yaml":true,"extradata":"MT"},{"content":"The base address in unmanaged memory to write to.","nodes":[{"pos":[0,49],"content":"The base address in unmanaged memory to write to.","nodes":[{"content":"The base address in unmanaged memory to write to.","pos":[0,49]}]}],"pos":[506961,507011],"yaml":true},{"content":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing.","nodes":[{"pos":[0,91],"content":"An additional byte offset, which is added to the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before writing.","source":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing."}],"pos":[507069,507161],"yaml":true},{"content":"The value to write.","nodes":[{"pos":[0,19],"content":"The value to write.","nodes":[{"content":"The value to write.","pos":[0,19]}]}],"pos":[507218,507238],"yaml":true},{"content":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.","nodes":[{"pos":[0,103],"content":"Base address (<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph>) plus offset byte (<ph id=\"ph2\">&lt;code&gt;ofs&lt;/code&gt;</ph>) produces a null or invalid address.","source":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address."}],"pos":[507422,507526],"yaml":true},{"content":"Writes a single byte value to unmanaged memory.","nodes":[{"pos":[0,47],"content":"Writes a single byte value to unmanaged memory.","nodes":[{"content":"Writes a single byte value to unmanaged memory.","pos":[0,47]}]}],"pos":[509123,509171],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.","nodes":[{"pos":[0,334],"content":"<xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.WriteByte%2A&gt;</ph> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before setting its element values.","pos":[0,334],"source":"<xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values."}]}],"pos":[509182,509517],"yaml":true,"extradata":"MT"},{"content":"The address in unmanaged memory to write to.","nodes":[{"pos":[0,44],"content":"The address in unmanaged memory to write to.","nodes":[{"content":"The address in unmanaged memory to write to.","pos":[0,44]}]}],"pos":[510243,510288],"yaml":true},{"content":"The value to write.","nodes":[{"pos":[0,19],"content":"The value to write.","nodes":[{"content":"The value to write.","pos":[0,19]}]}],"pos":[510345,510365],"yaml":true},{"content":"<code>ptr</code> is not a recognized format.  \n  \n -or-  \n  \n <code>ptr</code> is `null`.  \n  \n -or-  \n  \n <code>ptr</code> is invalid.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is not a recognized format.","source":"<code>ptr</code> is not a recognized format."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,89],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>ptr</code> is `null`."},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,135],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is invalid.","source":"<code>ptr</code> is invalid."}],"pos":[510549,510695],"yaml":true},{"content":"Writes a character as a 16-bit integer value to unmanaged memory.","nodes":[{"pos":[0,65],"content":"Writes a character as a 16-bit integer value to unmanaged memory.","nodes":[{"content":"Writes a character as a 16-bit integer value to unmanaged memory.","pos":[0,65]}]}],"pos":[512298,512364],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported.","nodes":[{"pos":[0,336],"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A&gt;</ph> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before setting its element values.","pos":[0,336],"source":"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values."}]},{"pos":[343,394],"content":"Writing to unaligned memory locations is supported.","nodes":[{"content":"Writing to unaligned memory locations is supported.","pos":[0,51]}]}],"pos":[512375,512774],"yaml":true,"extradata":"MT"},{"content":"The address in unmanaged memory to write to.","nodes":[{"pos":[0,44],"content":"The address in unmanaged memory to write to.","nodes":[{"content":"The address in unmanaged memory to write to.","pos":[0,44]}]}],"pos":[513557,513602],"yaml":true},{"content":"The value to write.","nodes":[{"pos":[0,19],"content":"The value to write.","nodes":[{"content":"The value to write.","pos":[0,19]}]}],"pos":[513659,513679],"yaml":true},{"content":"<code>ptr</code> is not a recognized format.  \n  \n -or-  \n  \n <code>ptr</code> is `null`.  \n  \n -or-  \n  \n <code>ptr</code> is invalid.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is not a recognized format.","source":"<code>ptr</code> is not a recognized format."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,89],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>ptr</code> is `null`."},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,135],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is invalid.","source":"<code>ptr</code> is invalid."}],"pos":[513864,514010],"yaml":true},{"content":"Writes a 16-bit integer value to unmanaged memory.","nodes":[{"pos":[0,50],"content":"Writes a 16-bit integer value to unmanaged memory.","nodes":[{"content":"Writes a 16-bit integer value to unmanaged memory.","pos":[0,50]}]}],"pos":[515619,515670],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported.","nodes":[{"pos":[0,336],"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A&gt;</ph> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before setting its element values.","pos":[0,336],"source":"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values."}]},{"pos":[343,394],"content":"Writing to unaligned memory locations is supported.","nodes":[{"content":"Writing to unaligned memory locations is supported.","pos":[0,51]}]}],"pos":[515681,516080],"yaml":true,"extradata":"MT"},{"content":"The address in unmanaged memory to write to.","nodes":[{"pos":[0,44],"content":"The address in unmanaged memory to write to.","nodes":[{"content":"The address in unmanaged memory to write to.","pos":[0,44]}]}],"pos":[516863,516908],"yaml":true},{"content":"The value to write.","nodes":[{"pos":[0,19],"content":"The value to write.","nodes":[{"content":"The value to write.","pos":[0,19]}]}],"pos":[516966,516986],"yaml":true},{"content":"<code>ptr</code> is not a recognized format.  \n  \n -or-  \n  \n <code>ptr</code> is `null`.  \n  \n -or-  \n  \n <code>ptr</code> is invalid.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is not a recognized format.","source":"<code>ptr</code> is not a recognized format."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,89],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>ptr</code> is `null`."},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,135],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is invalid.","source":"<code>ptr</code> is invalid."}],"pos":[517171,517317],"yaml":true},{"content":"Writes a 16-bit signed integer value to unmanaged memory at a specified offset.","nodes":[{"pos":[0,79],"content":"Writes a 16-bit signed integer value to unmanaged memory at a specified offset.","nodes":[{"content":"Writes a 16-bit signed integer value to unmanaged memory at a specified offset.","pos":[0,79]}]}],"pos":[518980,519060],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported.","nodes":[{"pos":[0,336],"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A&gt;</ph> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before setting its element values.","pos":[0,336],"source":"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values."}]},{"pos":[343,394],"content":"Writing to unaligned memory locations is supported.","nodes":[{"content":"Writing to unaligned memory locations is supported.","pos":[0,51]}]}],"pos":[519071,519470],"yaml":true,"extradata":"MT"},{"content":"The base address in the native heap to write to.","nodes":[{"pos":[0,48],"content":"The base address in the native heap to write to.","nodes":[{"content":"The base address in the native heap to write to.","pos":[0,48]}]}],"pos":[520262,520311],"yaml":true},{"content":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing.","nodes":[{"pos":[0,91],"content":"An additional byte offset, which is added to the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before writing.","source":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing."}],"pos":[520369,520461],"yaml":true},{"content":"The value to write.","nodes":[{"pos":[0,19],"content":"The value to write.","nodes":[{"content":"The value to write.","pos":[0,19]}]}],"pos":[520518,520538],"yaml":true},{"content":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.","nodes":[{"pos":[0,103],"content":"Base address (<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph>) plus offset byte (<ph id=\"ph2\">&lt;code&gt;ofs&lt;/code&gt;</ph>) produces a null or invalid address.","source":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address."}],"pos":[520723,520827],"yaml":true},{"content":"Writes a 16-bit signed integer value into unmanaged memory at a specified offset.","nodes":[{"pos":[0,81],"content":"Writes a 16-bit signed integer value into unmanaged memory at a specified offset.","nodes":[{"content":"Writes a 16-bit signed integer value into unmanaged memory at a specified offset.","pos":[0,81]}]}],"pos":[522496,522578],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported.","nodes":[{"pos":[0,336],"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A&gt;</ph> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before setting its element values.","pos":[0,336],"source":"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values."}]},{"pos":[343,394],"content":"Writing to unaligned memory locations is supported.","nodes":[{"content":"Writing to unaligned memory locations is supported.","pos":[0,51]}]}],"pos":[522589,522988],"yaml":true,"extradata":"MT"},{"content":"The base address in unmanaged memory to write to.","nodes":[{"pos":[0,49],"content":"The base address in unmanaged memory to write to.","nodes":[{"content":"The base address in unmanaged memory to write to.","pos":[0,49]}]}],"pos":[523781,523831],"yaml":true},{"content":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing.","nodes":[{"pos":[0,91],"content":"An additional byte offset, which is added to the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before writing.","source":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing."}],"pos":[523889,523981],"yaml":true},{"content":"The value to write.","nodes":[{"pos":[0,19],"content":"The value to write.","nodes":[{"content":"The value to write.","pos":[0,19]}]}],"pos":[524039,524059],"yaml":true},{"content":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.","nodes":[{"pos":[0,103],"content":"Base address (<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph>) plus offset byte (<ph id=\"ph2\">&lt;code&gt;ofs&lt;/code&gt;</ph>) produces a null or invalid address.","source":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address."}],"pos":[524244,524348],"yaml":true},{"content":"Writes a 16-bit signed integer value to unmanaged memory at a specified offset.","nodes":[{"pos":[0,79],"content":"Writes a 16-bit signed integer value to unmanaged memory at a specified offset.","nodes":[{"content":"Writes a 16-bit signed integer value to unmanaged memory at a specified offset.","pos":[0,79]}]}],"pos":[526011,526091],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported.","nodes":[{"pos":[0,336],"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A&gt;</ph> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before setting its element values.","pos":[0,336],"source":"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values."}]},{"pos":[343,394],"content":"Writing to unaligned memory locations is supported.","nodes":[{"content":"Writing to unaligned memory locations is supported.","pos":[0,51]}]}],"pos":[526102,526501],"yaml":true,"extradata":"MT"},{"content":"The base address in unmanaged memory of the target object.","nodes":[{"pos":[0,58],"content":"The base address in unmanaged memory of the target object.","nodes":[{"content":"The base address in unmanaged memory of the target object.","pos":[0,58]}]}],"pos":[526662,526721],"yaml":true},{"content":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing.","nodes":[{"pos":[0,91],"content":"An additional byte offset, which is added to the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before writing.","source":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing."}],"pos":[526779,526871],"yaml":true},{"content":"The value to write.","nodes":[{"pos":[0,19],"content":"The value to write.","nodes":[{"content":"The value to write.","pos":[0,19]}]}],"pos":[526928,526948],"yaml":true},{"content":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.","nodes":[{"pos":[0,103],"content":"Base address (<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph>) plus offset byte (<ph id=\"ph2\">&lt;code&gt;ofs&lt;/code&gt;</ph>) produces a null or invalid address.","source":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address."}],"pos":[527133,527237],"yaml":true},{"content":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.","nodes":[{"pos":[0,206],"content":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is an <ph id=\"ph2\">&lt;xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,98],"source":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object."},{"content":"This method does not accept <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"&gt;&lt;/xref&gt;</ph> parameters.","pos":[99,206],"source":" This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters."}]}],"pos":[527331,527538],"yaml":true},{"content":"Writes a 16-bit signed integer value to unmanaged memory at a specified offset.","nodes":[{"pos":[0,79],"content":"Writes a 16-bit signed integer value to unmanaged memory at a specified offset.","nodes":[{"content":"Writes a 16-bit signed integer value to unmanaged memory at a specified offset.","pos":[0,79]}]}],"pos":[529207,529287],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported.","nodes":[{"pos":[0,336],"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A&gt;</ph> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before setting its element values.","pos":[0,336],"source":"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values."}]},{"pos":[343,394],"content":"Writing to unaligned memory locations is supported.","nodes":[{"content":"Writing to unaligned memory locations is supported.","pos":[0,51]}]}],"pos":[529298,529697],"yaml":true,"extradata":"MT"},{"content":"The base address in unmanaged memory of the target object.","nodes":[{"pos":[0,58],"content":"The base address in unmanaged memory of the target object.","nodes":[{"content":"The base address in unmanaged memory of the target object.","pos":[0,58]}]}],"pos":[529859,529918],"yaml":true},{"content":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing.","nodes":[{"pos":[0,91],"content":"An additional byte offset, which is added to the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before writing.","source":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing."}],"pos":[529976,530068],"yaml":true},{"content":"The value to write.","nodes":[{"pos":[0,19],"content":"The value to write.","nodes":[{"content":"The value to write.","pos":[0,19]}]}],"pos":[530126,530146],"yaml":true},{"content":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.","nodes":[{"pos":[0,103],"content":"Base address (<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph>) plus offset byte (<ph id=\"ph2\">&lt;code&gt;ofs&lt;/code&gt;</ph>) produces a null or invalid address.","source":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address."}],"pos":[530331,530435],"yaml":true},{"content":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.","nodes":[{"pos":[0,206],"content":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is an <ph id=\"ph2\">&lt;xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,98],"source":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object."},{"content":"This method does not accept <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"&gt;&lt;/xref&gt;</ph> parameters.","pos":[99,206],"source":" This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters."}]}],"pos":[530529,530736],"yaml":true},{"content":"Writes a 32-bit signed integer value to unmanaged memory.","nodes":[{"pos":[0,57],"content":"Writes a 32-bit signed integer value to unmanaged memory.","nodes":[{"content":"Writes a 32-bit signed integer value to unmanaged memory.","pos":[0,57]}]}],"pos":[532362,532420],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported.","nodes":[{"pos":[0,336],"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A&gt;</ph> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before setting its element values.","pos":[0,336],"source":"<xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values."}]},{"pos":[343,394],"content":"Writing to unaligned memory locations is supported.","nodes":[{"content":"Writing to unaligned memory locations is supported.","pos":[0,51]}]}],"pos":[532431,532830],"yaml":true,"extradata":"MT"},{"content":"The address in unmanaged memory to write to.","nodes":[{"pos":[0,44],"content":"The address in unmanaged memory to write to.","nodes":[{"content":"The address in unmanaged memory to write to.","pos":[0,44]}]}],"pos":[533612,533657],"yaml":true},{"content":"The value to write.","nodes":[{"pos":[0,19],"content":"The value to write.","nodes":[{"content":"The value to write.","pos":[0,19]}]}],"pos":[533715,533735],"yaml":true},{"content":"<code>ptr</code> is not a recognized format.  \n  \n -or-  \n  \n <code>ptr</code> is `null`.  \n  \n -or-  \n  \n <code>ptr</code> is invalid.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is not a recognized format.","source":"<code>ptr</code> is not a recognized format."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,89],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>ptr</code> is `null`."},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,135],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is invalid.","source":"<code>ptr</code> is invalid."}],"pos":[533920,534066],"yaml":true},{"content":"Writes a 32-bit signed integer value into unmanaged memory at a specified offset.","nodes":[{"pos":[0,81],"content":"Writes a 32-bit signed integer value into unmanaged memory at a specified offset.","nodes":[{"content":"Writes a 32-bit signed integer value into unmanaged memory at a specified offset.","pos":[0,81]}]}],"pos":[535735,535817],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported.","nodes":[{"pos":[0,336],"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A&gt;</ph> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before setting its element values.","pos":[0,336],"source":"<xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values."}]},{"pos":[343,394],"content":"Writing to unaligned memory locations is supported.","nodes":[{"content":"Writing to unaligned memory locations is supported.","pos":[0,51]}]}],"pos":[535828,536227],"yaml":true,"extradata":"MT"},{"content":"The base address in unmanaged memory to write to.","nodes":[{"pos":[0,49],"content":"The base address in unmanaged memory to write to.","nodes":[{"content":"The base address in unmanaged memory to write to.","pos":[0,49]}]}],"pos":[537018,537068],"yaml":true},{"content":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing.","nodes":[{"pos":[0,91],"content":"An additional byte offset, which is added to the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before writing.","source":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing."}],"pos":[537126,537218],"yaml":true},{"content":"The value to write.","nodes":[{"pos":[0,19],"content":"The value to write.","nodes":[{"content":"The value to write.","pos":[0,19]}]}],"pos":[537276,537296],"yaml":true},{"content":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.","nodes":[{"pos":[0,103],"content":"Base address (<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph>) plus offset byte (<ph id=\"ph2\">&lt;code&gt;ofs&lt;/code&gt;</ph>) produces a null or invalid address.","source":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address."}],"pos":[537481,537585],"yaml":true},{"content":"Writes a 32-bit signed integer value to unmanaged memory at a specified offset.","nodes":[{"pos":[0,79],"content":"Writes a 32-bit signed integer value to unmanaged memory at a specified offset.","nodes":[{"content":"Writes a 32-bit signed integer value to unmanaged memory at a specified offset.","pos":[0,79]}]}],"pos":[539254,539334],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported.","nodes":[{"pos":[0,336],"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A&gt;</ph> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before setting its element values.","pos":[0,336],"source":"<xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values."}]},{"pos":[343,394],"content":"Writing to unaligned memory locations is supported.","nodes":[{"content":"Writing to unaligned memory locations is supported.","pos":[0,51]}]}],"pos":[539345,539744],"yaml":true,"extradata":"MT"},{"content":"The base address in unmanaged memory of the target object.","nodes":[{"pos":[0,58],"content":"The base address in unmanaged memory of the target object.","nodes":[{"content":"The base address in unmanaged memory of the target object.","pos":[0,58]}]}],"pos":[539904,539963],"yaml":true},{"content":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing.","nodes":[{"pos":[0,91],"content":"An additional byte offset, which is added to the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before writing.","source":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing."}],"pos":[540021,540113],"yaml":true},{"content":"The value to write.","nodes":[{"pos":[0,19],"content":"The value to write.","nodes":[{"content":"The value to write.","pos":[0,19]}]}],"pos":[540171,540191],"yaml":true},{"content":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.","nodes":[{"pos":[0,103],"content":"Base address (<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph>) plus offset byte (<ph id=\"ph2\">&lt;code&gt;ofs&lt;/code&gt;</ph>) produces a null or invalid address.","source":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address."}],"pos":[540376,540480],"yaml":true},{"content":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.","nodes":[{"pos":[0,206],"content":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is an <ph id=\"ph2\">&lt;xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,98],"source":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object."},{"content":"This method does not accept <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"&gt;&lt;/xref&gt;</ph> parameters.","pos":[99,206],"source":" This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters."}]}],"pos":[540574,540781],"yaml":true},{"content":"Writes a 64-bit signed integer value to unmanaged memory at a specified offset.","nodes":[{"pos":[0,79],"content":"Writes a 64-bit signed integer value to unmanaged memory at a specified offset.","nodes":[{"content":"Writes a 64-bit signed integer value to unmanaged memory at a specified offset.","pos":[0,79]}]}],"pos":[542467,542547],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported.","nodes":[{"pos":[0,336],"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A&gt;</ph> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before setting its element values.","pos":[0,336],"source":"<xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values."}]},{"pos":[343,394],"content":"Writing to unaligned memory locations is supported.","nodes":[{"content":"Writing to unaligned memory locations is supported.","pos":[0,51]}]}],"pos":[542558,542957],"yaml":true,"extradata":"MT"},{"content":"The base address in unmanaged memory of the target object.","nodes":[{"pos":[0,58],"content":"The base address in unmanaged memory of the target object.","nodes":[{"content":"The base address in unmanaged memory of the target object.","pos":[0,58]}]}],"pos":[543118,543177],"yaml":true},{"content":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing.","nodes":[{"pos":[0,91],"content":"An additional byte offset, which is added to the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before writing.","source":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing."}],"pos":[543235,543327],"yaml":true},{"content":"The value to write.","nodes":[{"pos":[0,19],"content":"The value to write.","nodes":[{"content":"The value to write.","pos":[0,19]}]}],"pos":[543385,543405],"yaml":true},{"content":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.","nodes":[{"pos":[0,103],"content":"Base address (<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph>) plus offset byte (<ph id=\"ph2\">&lt;code&gt;ofs&lt;/code&gt;</ph>) produces a null or invalid address.","source":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address."}],"pos":[543590,543694],"yaml":true},{"content":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.","nodes":[{"pos":[0,206],"content":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is an <ph id=\"ph2\">&lt;xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,98],"source":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object."},{"content":"This method does not accept <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"&gt;&lt;/xref&gt;</ph> parameters.","pos":[99,206],"source":" This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters."}]}],"pos":[543788,543995],"yaml":true},{"content":"Writes a 64-bit signed integer value to unmanaged memory.","nodes":[{"pos":[0,57],"content":"Writes a 64-bit signed integer value to unmanaged memory.","nodes":[{"content":"Writes a 64-bit signed integer value to unmanaged memory.","pos":[0,57]}]}],"pos":[545621,545679],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported.","nodes":[{"pos":[0,336],"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A&gt;</ph> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before setting its element values.","pos":[0,336],"source":"<xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values."}]},{"pos":[343,394],"content":"Writing to unaligned memory locations is supported.","nodes":[{"content":"Writing to unaligned memory locations is supported.","pos":[0,51]}]}],"pos":[545690,546089],"yaml":true,"extradata":"MT"},{"content":"The address in unmanaged memory to write to.","nodes":[{"pos":[0,44],"content":"The address in unmanaged memory to write to.","nodes":[{"content":"The address in unmanaged memory to write to.","pos":[0,44]}]}],"pos":[546872,546917],"yaml":true},{"content":"The value to write.","nodes":[{"pos":[0,19],"content":"The value to write.","nodes":[{"content":"The value to write.","pos":[0,19]}]}],"pos":[546975,546995],"yaml":true},{"content":"<code>ptr</code> is not a recognized format.  \n  \n -or-  \n  \n <code>ptr</code> is `null`.  \n  \n -or-  \n  \n <code>ptr</code> is invalid.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is not a recognized format.","source":"<code>ptr</code> is not a recognized format."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,89],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>ptr</code> is `null`."},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,135],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is invalid.","source":"<code>ptr</code> is invalid."}],"pos":[547180,547326],"yaml":true},{"content":"Writes a 64-bit signed integer value to unmanaged memory at a specified offset.","nodes":[{"pos":[0,79],"content":"Writes a 64-bit signed integer value to unmanaged memory at a specified offset.","nodes":[{"content":"Writes a 64-bit signed integer value to unmanaged memory at a specified offset.","pos":[0,79]}]}],"pos":[548995,549075],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported.","nodes":[{"pos":[0,336],"content":"<xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A&gt;</ph> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before setting its element values.","pos":[0,336],"source":"<xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values."}]},{"pos":[343,394],"content":"Writing to unaligned memory locations is supported.","nodes":[{"content":"Writing to unaligned memory locations is supported.","pos":[0,51]}]}],"pos":[549086,549485],"yaml":true,"extradata":"MT"},{"content":"The base address in unmanaged memory to write.","nodes":[{"pos":[0,46],"content":"The base address in unmanaged memory to write.","nodes":[{"content":"The base address in unmanaged memory to write.","pos":[0,46]}]}],"pos":[550277,550324],"yaml":true},{"content":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing.","nodes":[{"pos":[0,91],"content":"An additional byte offset, which is added to the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before writing.","source":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing."}],"pos":[550382,550474],"yaml":true},{"content":"The value to write.","nodes":[{"pos":[0,19],"content":"The value to write.","nodes":[{"content":"The value to write.","pos":[0,19]}]}],"pos":[550532,550552],"yaml":true},{"content":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.","nodes":[{"pos":[0,103],"content":"Base address (<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph>) plus offset byte (<ph id=\"ph2\">&lt;code&gt;ofs&lt;/code&gt;</ph>) produces a null or invalid address.","source":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address."}],"pos":[550737,550841],"yaml":true},{"content":"Writes a processor native sized integer value into unmanaged memory.","nodes":[{"pos":[0,68],"content":"Writes a processor native sized integer value into unmanaged memory.","nodes":[{"content":"Writes a processor native sized integer value into unmanaged memory.","pos":[0,68]}]}],"pos":[552462,552531],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported.","nodes":[{"pos":[0,340],"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A&gt;</ph> enables direct interaction with an unmanaged C-style <ph id=\"ph2\">`IntPtr`</ph> array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before setting its element values.","source":"<xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values."},{"pos":[347,398],"content":"Writing to unaligned memory locations is supported.","nodes":[{"content":"Writing to unaligned memory locations is supported.","pos":[0,51]}]}],"pos":[552542,552945],"yaml":true,"extradata":"MT"},{"content":"The address in unmanaged memory to write to.","nodes":[{"pos":[0,44],"content":"The address in unmanaged memory to write to.","nodes":[{"content":"The address in unmanaged memory to write to.","pos":[0,44]}]}],"pos":[553733,553778],"yaml":true},{"content":"The value to write.","nodes":[{"pos":[0,19],"content":"The value to write.","nodes":[{"content":"The value to write.","pos":[0,19]}]}],"pos":[553837,553857],"yaml":true},{"content":"<code>ptr</code> is not a recognized format.  \n  \n -or-  \n  \n <code>ptr</code> is `null`.  \n  \n -or-  \n  \n <code>ptr</code> is invalid.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is not a recognized format.","source":"<code>ptr</code> is not a recognized format."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,89],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>ptr</code> is `null`."},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,135],"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is invalid.","source":"<code>ptr</code> is invalid."}],"pos":[554043,554189],"yaml":true},{"content":"Writes a processor native-sized integer value to unmanaged memory at a specified offset.","nodes":[{"pos":[0,88],"content":"Writes a processor native-sized integer value to unmanaged memory at a specified offset.","nodes":[{"content":"Writes a processor native-sized integer value to unmanaged memory at a specified offset.","pos":[0,88]}]}],"pos":[555870,555959],"yaml":true},{"content":"This method writes a 32 bit integer on 32 bit systems, and a 64 bit integer on 64 bit systems.  \n  \n <xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported.","nodes":[{"pos":[0,94],"content":"This method writes a 32 bit integer on 32 bit systems, and a 64 bit integer on 64 bit systems.","nodes":[{"content":"This method writes a 32 bit integer on 32 bit systems, and a 64 bit integer on 64 bit systems.","pos":[0,94]}]},{"pos":[101,441],"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A&gt;</ph> enables direct interaction with an unmanaged C-style <ph id=\"ph2\">`IntPtr`</ph> array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before setting its element values.","source":"<xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values."},{"pos":[448,499],"content":"Writing to unaligned memory locations is supported.","nodes":[{"content":"Writing to unaligned memory locations is supported.","pos":[0,51]}]}],"pos":[555970,556476],"yaml":true,"extradata":"MT"},{"content":"The base address in unmanaged memory to write to.","nodes":[{"pos":[0,49],"content":"The base address in unmanaged memory to write to.","nodes":[{"content":"The base address in unmanaged memory to write to.","pos":[0,49]}]}],"pos":[557273,557323],"yaml":true},{"content":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing.","nodes":[{"pos":[0,91],"content":"An additional byte offset, which is added to the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before writing.","source":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing."}],"pos":[557381,557473],"yaml":true},{"content":"The value to write.","nodes":[{"pos":[0,19],"content":"The value to write.","nodes":[{"content":"The value to write.","pos":[0,19]}]}],"pos":[557532,557552],"yaml":true},{"content":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.","nodes":[{"pos":[0,103],"content":"Base address (<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph>) plus offset byte (<ph id=\"ph2\">&lt;code&gt;ofs&lt;/code&gt;</ph>) produces a null or invalid address.","source":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address."}],"pos":[557738,557842],"yaml":true},{"content":"Writes a processor native sized integer value to unmanaged memory.","nodes":[{"pos":[0,66],"content":"Writes a processor native sized integer value to unmanaged memory.","nodes":[{"content":"Writes a processor native sized integer value to unmanaged memory.","pos":[0,66]}]}],"pos":[559523,559590],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \n  \n Writing to unaligned memory locations is supported.","nodes":[{"pos":[0,336],"content":"<xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A&gt;</ph> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName&gt;</ph>) to a separate managed array before setting its element values.","pos":[0,336],"source":"<xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values."}]},{"pos":[343,394],"content":"Writing to unaligned memory locations is supported.","nodes":[{"content":"Writing to unaligned memory locations is supported.","pos":[0,51]}]}],"pos":[559601,560000],"yaml":true,"extradata":"MT"},{"content":"The base address in unmanaged memory of the target object.","nodes":[{"pos":[0,58],"content":"The base address in unmanaged memory of the target object.","nodes":[{"content":"The base address in unmanaged memory of the target object.","pos":[0,58]}]}],"pos":[560164,560223],"yaml":true},{"content":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing.","nodes":[{"pos":[0,91],"content":"An additional byte offset, which is added to the <ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> parameter before writing.","source":"An additional byte offset, which is added to the <code>ptr</code> parameter before writing."}],"pos":[560281,560373],"yaml":true},{"content":"The value to write.","nodes":[{"pos":[0,19],"content":"The value to write.","nodes":[{"content":"The value to write.","pos":[0,19]}]}],"pos":[560432,560452],"yaml":true},{"content":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.","nodes":[{"pos":[0,103],"content":"Base address (<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph>) plus offset byte (<ph id=\"ph2\">&lt;code&gt;ofs&lt;/code&gt;</ph>) produces a null or invalid address.","source":"Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address."}],"pos":[560638,560742],"yaml":true},{"content":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.","nodes":[{"pos":[0,206],"content":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;ptr&lt;/code&gt;</ph> is an <ph id=\"ph2\">&lt;xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,98],"source":"<code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object."},{"content":"This method does not accept <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"&gt;&lt;/xref&gt;</ph> parameters.","pos":[99,206],"source":" This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters."}]}],"pos":[560836,561043],"yaml":true},{"content":"Frees a [BSTR](https://msdn.microsoft.com/library/ms221069.aspx) pointer that was allocated using the <xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)\"></xref> method.","nodes":[{"pos":[0,218],"content":"Frees a <bpt id=\"p1\">[</bpt>BSTR<ept id=\"p1\">](https://msdn.microsoft.com/library/ms221069.aspx)</ept> pointer that was allocated using the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)\"&gt;&lt;/xref&gt;</ph> method.","source":"Frees a [BSTR](https://msdn.microsoft.com/library/ms221069.aspx) pointer that was allocated using the <xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)\"></xref> method."}],"pos":[562604,562823],"yaml":true},{"content":"The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A> method first sets the contents of the BSTR to zero, and then frees the BSTR.","nodes":[{"pos":[0,142],"content":"The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A> method first sets the contents of the BSTR to zero, and then frees the BSTR.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A&gt;</ph> method first sets the contents of the BSTR to zero, and then frees the BSTR.","pos":[0,142],"source":"The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A> method first sets the contents of the BSTR to zero, and then frees the BSTR."}]}],"pos":[562834,562977],"yaml":true,"extradata":"MT"},{"content":"The address of the `BSTR` to free.","nodes":[{"pos":[0,34],"content":"The address of the <ph id=\"ph1\">`BSTR`</ph> to free.","source":"The address of the `BSTR` to free."}],"pos":[563117,563152],"yaml":true},{"content":"Frees an unmanaged string pointer that was allocated using the <xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)\"></xref> method.","nodes":[{"pos":[0,188],"content":"Frees an unmanaged string pointer that was allocated using the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)\"&gt;&lt;/xref&gt;</ph> method.","source":"Frees an unmanaged string pointer that was allocated using the <xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)\"></xref> method."}],"pos":[564849,565038],"yaml":true},{"content":"The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> method.","nodes":[{"pos":[0,243],"content":"The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A&gt;</ph> method first zeros out and then frees unmanaged memory that was allocated using the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A&gt;</ph> method.","pos":[0,243],"source":"The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> method."}]}],"pos":[565049,565293],"yaml":true,"extradata":"MT"},{"content":"The address of the unmanaged string to free.","nodes":[{"pos":[0,44],"content":"The address of the unmanaged string to free.","nodes":[{"content":"The address of the unmanaged string to free.","pos":[0,44]}]}],"pos":[566233,566278],"yaml":true},{"content":"Frees an unmanaged string pointer that was allocated using the <xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)\"></xref> method.","nodes":[{"pos":[0,191],"content":"Frees an unmanaged string pointer that was allocated using the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)\"&gt;&lt;/xref&gt;</ph> method.","source":"Frees an unmanaged string pointer that was allocated using the <xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)\"></xref> method."}],"pos":[568002,568194],"yaml":true},{"content":"The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A> method.","nodes":[{"pos":[0,249],"content":"The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A&gt;</ph> method first zeros out and then frees unmanaged memory that was allocated using the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A&gt;</ph> method.","pos":[0,249],"source":"The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A> method."}]}],"pos":[568205,568455],"yaml":true,"extradata":"MT"},{"content":"The address of the unmanaged string to free.","nodes":[{"pos":[0,44],"content":"The address of the unmanaged string to free.","nodes":[{"content":"The address of the unmanaged string to free.","pos":[0,44]}]}],"pos":[568607,568652],"yaml":true},{"content":"Frees an unmanaged string pointer that was allocated using the <xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)\"></xref> method.","nodes":[{"pos":[0,190],"content":"Frees an unmanaged string pointer that was allocated using the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)\"&gt;&lt;/xref&gt;</ph> method.","source":"Frees an unmanaged string pointer that was allocated using the <xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)\"></xref> method."}],"pos":[571348,571539],"yaml":true},{"content":"The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> method.","nodes":[{"pos":[0,247],"content":"The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A&gt;</ph> method first zeros out and then frees unmanaged memory that was allocated using the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A&gt;</ph> method.","pos":[0,247],"source":"The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> method."}]}],"pos":[571550,571798],"yaml":true,"extradata":"MT"},{"content":"The address of the unmanaged string to free.","nodes":[{"pos":[0,44],"content":"The address of the unmanaged string to free.","nodes":[{"content":"The address of the unmanaged string to free.","pos":[0,44]}]}],"pos":[572736,572781],"yaml":true},{"content":"Frees an unmanaged string pointer that was allocated using the <xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)\"></xref> method.","nodes":[{"pos":[0,193],"content":"Frees an unmanaged string pointer that was allocated using the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)\"&gt;&lt;/xref&gt;</ph> method.","source":"Frees an unmanaged string pointer that was allocated using the <xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)\"></xref> method."}],"pos":[574519,574713],"yaml":true},{"content":"The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> method.","nodes":[{"pos":[0,253],"content":"The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A&gt;</ph> method first zeros out and then frees unmanaged memory that was allocated using the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A&gt;</ph> method.","pos":[0,253],"source":"The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> method."}]}],"pos":[574724,574978],"yaml":true,"extradata":"MT"},{"content":"The address of the unmanaged string to free.","nodes":[{"pos":[0,44],"content":"The address of the unmanaged string to free.","nodes":[{"content":"The address of the unmanaged string to free.","pos":[0,44]}]}],"pos":[575958,576003],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.InteropServices.Marshal\n  commentId: T:System.Runtime.InteropServices.Marshal\n  id: Marshal\n  children:\n  - System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\n  - System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)\n  - System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup\n  - System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)\n  - System.Runtime.InteropServices.Marshal.BufferToBSTR(System.Array,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)\n  - System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext\n  - System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)\n  - System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)\n  - System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)\n  - System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)\n  - System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)\n  - System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)\n  - System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)\n  - System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)\n  - System.Runtime.InteropServices.Marshal.GetActiveObject(System.String)\n  - System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)\n  - System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)\n  - System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)\n  - System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext(System.Object,System.Type)\n  - System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)\n  - System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo(System.Reflection.MemberInfo)\n  - System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)\n  - System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)\n  - System.Runtime.InteropServices.Marshal.GetExceptionCode\n  - System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)\n  - System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.GetExceptionPointers\n  - System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)\n  - System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)\n  - System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)\n  - System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)\n  - System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error\n  - System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)\n  - System.Runtime.InteropServices.Marshal.GetIDispatchForObjectInContext(System.Object)\n  - System.Runtime.InteropServices.Marshal.GetITypeInfoForType(System.Type)\n  - System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)\n  - System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext(System.Object)\n  - System.Runtime.InteropServices.Marshal.GetLastWin32Error\n  - System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)\n  - System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)\n  - System.Runtime.InteropServices.Marshal.GetThreadFromFiberCookie(System.Int32)\n  - System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)\n  - System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)\n  - System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.UCOMITypeInfo)\n  - System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)\n  - System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.ComTypes.ITypeLib)\n  - System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.UCOMITypeLib)\n  - System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly(System.Reflection.Assembly)\n  - System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.ComTypes.ITypeLib)\n  - System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.UCOMITypeLib)\n  - System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.ComTypes.ITypeLib)\n  - System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.UCOMITypeLib)\n  - System.Runtime.InteropServices.Marshal.GetTypeLibVersionForAssembly(System.Reflection.Assembly,System.Int32@,System.Int32@)\n  - System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.IsComObject(System.Object)\n  - System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)\n  - System.Runtime.InteropServices.Marshal.NumParamBytes(System.Reflection.MethodInfo)\n  - System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)\n  - System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)\n  - System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)\n  - System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)\n  - System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)\n  - System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)\n  - System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)\n  - System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)\n  - System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.Release(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)\n  - System.Runtime.InteropServices.Marshal.ReleaseThreadCache\n  - System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)\n  - System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)\n  - System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)\n  - System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)\n  - System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)\n  - System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)\n  - System.Runtime.InteropServices.Marshal.SizeOf(System.Object)\n  - System.Runtime.InteropServices.Marshal.SizeOf(System.Type)\n  - System.Runtime.InteropServices.Marshal.SizeOf``1\n  - System.Runtime.InteropServices.Marshal.SizeOf``1(``0)\n  - System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)\n  - System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)\n  - System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)\n  - System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)\n  - System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)\n  - System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)\n  - System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)\n  - System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)\n  - System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)\n  - System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)\n  - System.Runtime.InteropServices.Marshal.SystemDefaultCharSize\n  - System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize\n  - System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)\n  - System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)\n  - System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)\n  - System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)\n  - System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)\n  - System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)\n  - System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)\n  - System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)\n  - System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)\n  - System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)\n  - System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)\n  - System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)\n  - System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)\n  - System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)\n  - System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)\n  - System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)\n  - System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)\n  - System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)\n  langs:\n  - csharp\n  name: Marshal\n  nameWithType: Marshal\n  fullName: System.Runtime.InteropServices.Marshal\n  type: Class\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.\n  remarks: \"The `static` methods defined on the <xref:System.Runtime.InteropServices.Marshal> class are essential to working with unmanaged code. Most methods defined in this class are typically used by developers who want to provide a bridge between the managed and unmanaged programming models. For example, the <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> method copies ANSI characters from a specified string (in the managed heap) to a buffer in the unmanaged heap. It also allocates the target heap of the right size.  \\n  \\n The common language runtime provides specific marshaling capabilities. For details on marshaling behavior, see [Interop Marshaling](~/docs/framework/interop/interop-marshaling.md).  \\n  \\n The `Read` and `Write` methods in the <xref:System.Runtime.InteropServices.Marshal> class support both aligned and unaligned access.\"\n  example:\n  - \"The following example shows how to use various methods defined by the <xref:System.Runtime.InteropServices.Marshal> class.  \\n  \\n [!code-cpp[Marshal#1](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#1)]\\n [!code-csharp[Marshal#1](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#1)]\\n [!code-vb[Marshal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#1)]\"\n  syntax:\n    content: public static class Marshal\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)\n  id: AddRef(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: AddRef(IntPtr)\n  nameWithType: Marshal.AddRef(IntPtr)\n  fullName: Marshal.AddRef(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Increments the reference count on the specified interface.\n  remarks: \"The common language runtime manages the reference count of a COM object for you, making it unnecessary to use this method directly. In rare cases, such as testing a custom marshaler, you might find it necessary to manipulate an object's lifetime manually. After calling <xref:System.Runtime.InteropServices.Marshal.AddRef%2A>, you must decrement the reference count by using a method such as <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName>. Do not rely on the return value of <xref:System.Runtime.InteropServices.Marshal.AddRef%2A>, as it can sometimes be unstable.  \\n  \\n You can call <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=fullName>, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName> to obtain an <xref:System.IntPtr> value that represents an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface pointer. You can also use these methods and the <xref:System.Runtime.InteropServices.Marshal.AddRef%2A> method on managed objects to obtain the COM interfaces represented by the managed object's COM callable wrapper. If you are not familiar with the details of this wrapper type, see [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md).\"\n  syntax:\n    content: public static int AddRef (IntPtr pUnk);\n    parameters:\n    - id: pUnk\n      type: System.IntPtr\n      description: The interface reference count to increment.\n    return:\n      type: System.Int32\n      description: The new value of the reference count on the <code>pUnk</code> parameter.\n  overload: System.Runtime.InteropServices.Marshal.AddRef*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\n  id: AllocCoTaskMem(System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: AllocCoTaskMem(Int32)\n  nameWithType: Marshal.AllocCoTaskMem(Int32)\n  fullName: Marshal.AllocCoTaskMem(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Allocates a block of memory of specified size from the COM task memory allocator.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A> is one of two memory allocation API methods in the <xref:System.Runtime.InteropServices.Marshal> class. (<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=fullName> is the other.) The initial memory content returned is undefined, and the allocated memory can be larger than the requested number of bytes. This method exposes the COM [CoTaskMemAlloc](http://go.microsoft.com/fwlink/?LinkId=148626) function, which is referred to as the COM task memory allocator.\n  syntax:\n    content: public static IntPtr AllocCoTaskMem (int cb);\n    parameters:\n    - id: cb\n      type: System.Int32\n      description: The size of the block of memory to be allocated.\n    return:\n      type: System.IntPtr\n      description: An integer representing the address of the block of memory allocated. This memory must be released with <xref href=\"System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\"></xref>.\n  overload: System.Runtime.InteropServices.Marshal.AllocCoTaskMem*\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory to satisfy the request.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)\n  id: AllocHGlobal(System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: AllocHGlobal(Int32)\n  nameWithType: Marshal.AllocHGlobal(Int32)\n  fullName: Marshal.AllocHGlobal(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Allocates memory from the unmanaged memory of the process by using the specified number of bytes.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> is one of two memory allocation methods in the <xref:System.Runtime.InteropServices.Marshal> class. (<xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A?displayProperty=fullName> is the other.) This method exposes the Win32 [LocalAlloc](http://go.microsoft.com/fwlink/?LinkId=148628) function from Kernel32.dll.  \\n  \\n When <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> calls `LocalAlloc`, it passes a `LMEM_FIXED` flag, which causes the allocated memory to be locked in place. Also, the allocated memory is not zero-filled.\"\n  example:\n  - \"The following example demonstrates calling the <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>method. This code example is part of a larger example provided for the <xref:System.Runtime.InteropServices.Marshal> class.  \\n  \\n [!code-cpp[Marshal#4](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#4)]\\n [!code-csharp[Marshal#4](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#4)]\\n [!code-vb[Marshal#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#4)]\"\n  syntax:\n    content: public static IntPtr AllocHGlobal (int cb);\n    parameters:\n    - id: cb\n      type: System.Int32\n      description: The required number of bytes in memory.\n    return:\n      type: System.IntPtr\n      description: A pointer to the newly allocated memory. This memory must be released using the <xref href=\"System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\"></xref> method.\n  overload: System.Runtime.InteropServices.Marshal.AllocHGlobal*\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory to satisfy the request.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\n  id: AllocHGlobal(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: AllocHGlobal(IntPtr)\n  nameWithType: Marshal.AllocHGlobal(IntPtr)\n  fullName: Marshal.AllocHGlobal(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> is one of two memory allocation methods in the <xref:System.Runtime.InteropServices.Marshal> class. (<xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A?displayProperty=fullName> is the other.) This method exposes the Win32 [LocalAlloc](http://go.microsoft.com/fwlink/?LinkID=148628) function from Kernel32.dll.  \\n  \\n When <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> calls `LocalAlloc`, it passes a `LMEM_FIXED` flag, which causes the allocated memory to be locked in place. Also, the allocated memory is not zero-filled.  \\n  \\n For example code, see <xref:System.Runtime.InteropServices.Marshal> and <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>.\"\n  syntax:\n    content: public static IntPtr AllocHGlobal (IntPtr cb);\n    parameters:\n    - id: cb\n      type: System.IntPtr\n      description: The required number of bytes in memory.\n    return:\n      type: System.IntPtr\n      description: A pointer to the newly allocated memory. This memory must be released using the <xref href=\"System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\"></xref> method.\n  overload: System.Runtime.InteropServices.Marshal.AllocHGlobal*\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory to satisfy the request.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup\n  commentId: M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup\n  id: AreComObjectsAvailableForCleanup\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: AreComObjectsAvailableForCleanup()\n  nameWithType: Marshal.AreComObjectsAvailableForCleanup()\n  fullName: Marshal.AreComObjectsAvailableForCleanup()\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Indicates whether runtime callable wrappers (RCWs) from any context are available for cleanup.\n  remarks: \"If there are a lot of references between managed and native code with deep dependency graphs it can take a long time for all the objects to clean up. Each time a GC runs it will free up some number of RCWs, which will in turn release the underlying COM objects. Those COM objects will then release their managed references and make more objects available for cleanup the next time a GC runs, which starts the process over again.  \\n  \\n The <xref:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup%2A> method provides a way for the application to determine how many cycles of GC.Collect and GC.WaitForPendingFinalizers need to happen in order to clean everything up.\"\n  syntax:\n    content: public static bool AreComObjectsAvailableForCleanup ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if there are any RCWs available for cleanup; otherwise, `false`.'\n  overload: System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)\n  commentId: M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)\n  id: BindToMoniker(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: BindToMoniker(String)\n  nameWithType: Marshal.BindToMoniker(String)\n  fullName: Marshal.BindToMoniker(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: Gets an interface pointer identified by the specified moniker.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.BindToMoniker%2A> exposes the COM `BindToMoniker` method, which produces an object that you can cast to any COM interface you require. This method provides the same functionality as the `GetObject` method in Visual Basic 6.0 and [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)].\n  syntax:\n    content: public static object BindToMoniker (string monikerName);\n    parameters:\n    - id: monikerName\n      type: System.String\n      description: The moniker corresponding to the desired interface pointer.\n    return:\n      type: System.Object\n      description: An object containing a reference to the interface pointer identified by the <code>monikerName</code> parameter. A moniker is a name, and in this case, the moniker is defined by an interface.\n  overload: System.Runtime.InteropServices.Marshal.BindToMoniker*\n  exceptions:\n  - type: System.Runtime.InteropServices.COMException\n    commentId: T:System.Runtime.InteropServices.COMException\n    description: An unrecognized HRESULT was returned by the unmanaged `BindToMoniker` method.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.BufferToBSTR(System.Array,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.BufferToBSTR(System.Array,System.Int32)\n  id: BufferToBSTR(System.Array,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: BufferToBSTR(Array, Int32)\n  nameWithType: Marshal.BufferToBSTR(Array, Int32)\n  fullName: Marshal.BufferToBSTR(Array, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: public static IntPtr BufferToBSTR (Array ptr, int slen);\n    parameters:\n    - id: ptr\n      type: System.Array\n      description: ''\n    - id: slen\n      type: System.Int32\n      description: ''\n    return:\n      type: System.IntPtr\n      description: ''\n  overload: System.Runtime.InteropServices.Marshal.BufferToBSTR*\n  exceptions: []\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)\n  commentId: M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)\n  id: ChangeWrapperHandleStrength(System.Object,System.Boolean)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ChangeWrapperHandleStrength(Object, Boolean)\n  nameWithType: Marshal.ChangeWrapperHandleStrength(Object, Boolean)\n  fullName: Marshal.ChangeWrapperHandleStrength(Object, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: Changes the strength of an object's [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md) (CCW) handle.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength%2A> is used for object pooling functionality and should never be called by user code directly.\n  syntax:\n    content: public static void ChangeWrapperHandleStrength (object otp, bool fIsWeak);\n    parameters:\n    - id: otp\n      type: System.Object\n      description: The object whose CCW holds a reference counted handle. The handle is strong if the reference count on the CCW is greater than zero; otherwise, it is weak.\n    - id: fIsWeak\n      type: System.Boolean\n      description: '`true` to change the strength of the handle on the <code>otp</code> parameter to weak, regardless of its reference count; `false` to reset the handle strength on <code>otp</code> to be reference counted.'\n  overload: System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext\n  commentId: M:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext\n  id: CleanupUnusedObjectsInCurrentContext\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: CleanupUnusedObjectsInCurrentContext()\n  nameWithType: Marshal.CleanupUnusedObjectsInCurrentContext()\n  fullName: Marshal.CleanupUnusedObjectsInCurrentContext()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: Notifies the runtime to clean up all [Runtime Callable Wrappers](~/docs/framework/interop/runtime-callable-wrapper.md) (RCWs) allocated in the current context.\n  remarks: \"The interop system pumps messages while it attempts to clean up RCWs. This ensures that cleanup for single-threaded apartment (STA) RCWs happens in all applications, including applications that do not pump often enough. However, some applications that do pump appropriately are very sensitive to where pumping occurs. When the interop system pumps messages in these applications, in places that are unexpected, , the application can encounter reentrancy issues that are difficult to diagnose. Therefore, applications need to be able to control their own pumping for a particular STA and to control the clean-up of RCWs.  \\n  \\n However, developers often only control a subset of the threads in their application and thus cannot ensure that all threads are pumping appropriately.  \\n  \\n To solve this problem:  \\n  \\n1.  Use the <xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A?displayProperty=fullName> method to turn off automatic cleanup of RCWs, and the message pumping that occurs, on a per-thread basis. This allows developers to opt out of automatic clean-up, and the corresponding message pumping.  \\n  \\n2.  Use the <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A> method to notify the runtime to clean up all RCWs that are allocated in the current context. This companion method allows developers to precisely control when the runtime performs cleanup in the current context.\"\n  syntax:\n    content: public static void CleanupUnusedObjectsInCurrentContext ();\n    parameters: []\n  overload: System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)\n  id: Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: Copy(Single[], Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(Single[], Int32, IntPtr, Int32)\n  fullName: Marshal.Copy(Single[], Int32, IntPtr, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.\n  remarks: You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.\n  syntax:\n    content: public static void Copy (float[] source, int startIndex, IntPtr destination, int length);\n    parameters:\n    - id: source\n      type: System.Single[]\n      description: The one-dimensional array to copy from.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based index in the source array where copying should start.\n    - id: destination\n      type: System.IntPtr\n      description: The memory pointer to copy to.\n    - id: length\n      type: System.Int32\n      description: The number of array elements to copy.\n  overload: System.Runtime.InteropServices.Marshal.Copy*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> and <code>length</code> are not valid.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)\n  id: Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: Copy(IntPtr[], Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(IntPtr[], Int32, IntPtr, Int32)\n  fullName: Marshal.Copy(IntPtr[], Int32, IntPtr, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Copies data from a one-dimensional, managed <xref href=\"System.IntPtr\"></xref> array to an unmanaged memory pointer.\n  remarks: You can use this method to copy a subset of a one-dimensional managed <xref:System.IntPtr> array to an unmanaged C-style array.\n  syntax:\n    content: public static void Copy (IntPtr[] source, int startIndex, IntPtr destination, int length);\n    parameters:\n    - id: source\n      type: System.IntPtr[]\n      description: The one-dimensional array to copy from.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based index in the source array where copying should start.\n    - id: destination\n      type: System.IntPtr\n      description: The memory pointer to copy to.\n    - id: length\n      type: System.Int32\n      description: The number of array elements to copy.\n  overload: System.Runtime.InteropServices.Marshal.Copy*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)\n  id: Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: Copy(IntPtr, Single[], Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, Single[], Int32, Int32)\n  fullName: Marshal.Copy(IntPtr, Single[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.\n  remarks: Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.\n  syntax:\n    content: public static void Copy (IntPtr source, float[] destination, int startIndex, int length);\n    parameters:\n    - id: source\n      type: System.IntPtr\n      description: The memory pointer to copy from.\n    - id: destination\n      type: System.Single[]\n      description: The array to copy to.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based index in the destination array where copying should start.\n    - id: length\n      type: System.Int32\n      description: The number of array elements to copy.\n  overload: System.Runtime.InteropServices.Marshal.Copy*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)\n  id: Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: Copy(IntPtr, Int64[], Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, Int64[], Int32, Int32)\n  fullName: Marshal.Copy(IntPtr, Int64[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.\n  remarks: Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the`source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.\n  example:\n  - \"The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.Copy-int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int64/cs/sample.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.Copy-int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int64/vb/sample.vb#1)]\"\n  syntax:\n    content: public static void Copy (IntPtr source, long[] destination, int startIndex, int length);\n    parameters:\n    - id: source\n      type: System.IntPtr\n      description: The memory pointer to copy from.\n    - id: destination\n      type: System.Int64[]\n      description: The array to copy to.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based index in the destination array where copying should start.\n    - id: length\n      type: System.Int32\n      description: The number of array elements to copy.\n  overload: System.Runtime.InteropServices.Marshal.Copy*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)\n  id: Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: Copy(IntPtr, Int32[], Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, Int32[], Int32, Int32)\n  fullName: Marshal.Copy(IntPtr, Int32[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.\n  remarks: Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.\n  example:\n  - \"The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.Copy-int#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int/cs/sample.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.Copy-int#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int/vb/sample.vb#1)]\"\n  syntax:\n    content: public static void Copy (IntPtr source, int[] destination, int startIndex, int length);\n    parameters:\n    - id: source\n      type: System.IntPtr\n      description: The memory pointer to copy from.\n    - id: destination\n      type: System.Int32[]\n      description: The array to copy to.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based index in the destination array where copying should start.\n    - id: length\n      type: System.Int32\n      description: The number of array elements to copy.\n  overload: System.Runtime.InteropServices.Marshal.Copy*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)\n  id: Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: Copy(IntPtr, Int16[], Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, Int16[], Int32, Int32)\n  fullName: Marshal.Copy(IntPtr, Int16[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.\n  remarks: Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.\n  example:\n  - \"The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.Copy-int16#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int16/cs/sample.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.Copy-int16#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int16/vb/sample.vb#1)]\"\n  syntax:\n    content: public static void Copy (IntPtr source, short[] destination, int startIndex, int length);\n    parameters:\n    - id: source\n      type: System.IntPtr\n      description: The memory pointer to copy from.\n    - id: destination\n      type: System.Int16[]\n      description: The array to copy to.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based index in the destination array where copying should start.\n    - id: length\n      type: System.Int32\n      description: The number of array elements to copy.\n  overload: System.Runtime.InteropServices.Marshal.Copy*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)\n  id: Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: Copy(IntPtr, Double[], Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, Double[], Int32, Int32)\n  fullName: Marshal.Copy(IntPtr, Double[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.\n  remarks: Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.\n  example:\n  - \"The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.Copy-double#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-double/cs/sample.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.Copy-double#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-double/vb/sample.vb#1)]\"\n  syntax:\n    content: public static void Copy (IntPtr source, double[] destination, int startIndex, int length);\n    parameters:\n    - id: source\n      type: System.IntPtr\n      description: The memory pointer to copy from.\n    - id: destination\n      type: System.Double[]\n      description: The array to copy to.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based index in the destination array where copying should start.\n    - id: length\n      type: System.Int32\n      description: The number of array elements to copy.\n  overload: System.Runtime.InteropServices.Marshal.Copy*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)\n  id: Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: Copy(IntPtr, IntPtr[], Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, IntPtr[], Int32, Int32)\n  fullName: Marshal.Copy(IntPtr, IntPtr[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Copies data from an unmanaged memory pointer to a managed <xref href=\"System.IntPtr\"></xref> array.\n  remarks: Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Therefore, the unmanaged data that corresponds to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling the <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName> method.\n  syntax:\n    content: public static void Copy (IntPtr source, IntPtr[] destination, int startIndex, int length);\n    parameters:\n    - id: source\n      type: System.IntPtr\n      description: The memory pointer to copy from.\n    - id: destination\n      type: System.IntPtr[]\n      description: The array to copy to.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based index in the destination array where copying should start.\n    - id: length\n      type: System.Int32\n      description: The number of array elements to copy.\n  overload: System.Runtime.InteropServices.Marshal.Copy*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)\n  id: Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: Copy(IntPtr, Byte[], Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, Byte[], Int32, Int32)\n  fullName: Marshal.Copy(IntPtr, Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.\n  remarks: Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.\n  example:\n  - \"The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.Copy-byte#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-byte/cs/sample.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.Copy-byte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-byte/vb/sample.vb#1)]\"\n  syntax:\n    content: public static void Copy (IntPtr source, byte[] destination, int startIndex, int length);\n    parameters:\n    - id: source\n      type: System.IntPtr\n      description: The memory pointer to copy from.\n    - id: destination\n      type: System.Byte[]\n      description: The array to copy to.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based index in the destination array where copying should start.\n    - id: length\n      type: System.Int32\n      description: The number of array elements to copy.\n  overload: System.Runtime.InteropServices.Marshal.Copy*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)\n  id: Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: Copy(Int64[], Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(Int64[], Int32, IntPtr, Int32)\n  fullName: Marshal.Copy(Int64[], Int32, IntPtr, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.\n  remarks: You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.\n  example:\n  - \"The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.Copy-int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int64/cs/sample.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.Copy-int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int64/vb/sample.vb#1)]\"\n  syntax:\n    content: public static void Copy (long[] source, int startIndex, IntPtr destination, int length);\n    parameters:\n    - id: source\n      type: System.Int64[]\n      description: The one-dimensional array to copy from.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based index in the source array where copying should start.\n    - id: destination\n      type: System.IntPtr\n      description: The memory pointer to copy to.\n    - id: length\n      type: System.Int32\n      description: The number of array elements to copy.\n  overload: System.Runtime.InteropServices.Marshal.Copy*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> and <code>length</code> are not valid.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  id: Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: Copy(Int32[], Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(Int32[], Int32, IntPtr, Int32)\n  fullName: Marshal.Copy(Int32[], Int32, IntPtr, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.\n  remarks: You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.\n  example:\n  - \"The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.Copy-int#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int/cs/sample.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.Copy-int#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int/vb/sample.vb#1)]\"\n  syntax:\n    content: public static void Copy (int[] source, int startIndex, IntPtr destination, int length);\n    parameters:\n    - id: source\n      type: System.Int32[]\n      description: The one-dimensional array to copy from.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based index in the source array where copying should start.\n    - id: destination\n      type: System.IntPtr\n      description: The memory pointer to copy to.\n    - id: length\n      type: System.Int32\n      description: The number of array elements to copy.\n  overload: System.Runtime.InteropServices.Marshal.Copy*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> and <code>length</code> are not valid.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>startIndex</code> or <code>length</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)\n  id: Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: Copy(Int16[], Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(Int16[], Int32, IntPtr, Int32)\n  fullName: Marshal.Copy(Int16[], Int32, IntPtr, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.\n  remarks: You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.\n  example:\n  - \"The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.Copy-int16#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int16/cs/sample.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.Copy-int16#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int16/vb/sample.vb#1)]\"\n  syntax:\n    content: public static void Copy (short[] source, int startIndex, IntPtr destination, int length);\n    parameters:\n    - id: source\n      type: System.Int16[]\n      description: The one-dimensional array to copy from.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based index in the source array where copying should start.\n    - id: destination\n      type: System.IntPtr\n      description: The memory pointer to copy to.\n    - id: length\n      type: System.Int32\n      description: The number of array elements to copy.\n  overload: System.Runtime.InteropServices.Marshal.Copy*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> and <code>length</code> are not valid.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)\n  id: Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: Copy(IntPtr, Char[], Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, Char[], Int32, Int32)\n  fullName: Marshal.Copy(IntPtr, Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Copies data from an unmanaged memory pointer to a managed character array.\n  remarks: Unmanaged, C-style arrays do not contain bounds information, which prevents the `startIndex` and `length` parameters from being validated. Thus, the unmanaged data corresponding to the `source` parameter populates the managed array regardless of its usefulness. You must initialize the managed array with the appropriate size before calling this method.\n  example:\n  - \"The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.Copy-char#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-char/cs/sample.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.Copy-char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-char/vb/sample.vb#1)]\"\n  syntax:\n    content: public static void Copy (IntPtr source, char[] destination, int startIndex, int length);\n    parameters:\n    - id: source\n      type: System.IntPtr\n      description: The memory pointer to copy from.\n    - id: destination\n      type: System.Char[]\n      description: The array to copy to.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based index in the destination array where copying should start.\n    - id: length\n      type: System.Int32\n      description: The number of array elements to copy.\n  overload: System.Runtime.InteropServices.Marshal.Copy*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code>, <code>destination</code>, <code>startIndex</code>, or <code>length</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)\n  id: Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: Copy(Double[], Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(Double[], Int32, IntPtr, Int32)\n  fullName: Marshal.Copy(Double[], Int32, IntPtr, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.\n  remarks: You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.\n  example:\n  - \"The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.Copy-double#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-double/cs/sample.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.Copy-double#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-double/vb/sample.vb#1)]\"\n  syntax:\n    content: public static void Copy (double[] source, int startIndex, IntPtr destination, int length);\n    parameters:\n    - id: source\n      type: System.Double[]\n      description: The one-dimensional array to copy from.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based index in the source array where copying should start.\n    - id: destination\n      type: System.IntPtr\n      description: The memory pointer to copy to.\n    - id: length\n      type: System.Int32\n      description: The number of array elements to copy.\n  overload: System.Runtime.InteropServices.Marshal.Copy*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> and <code>length</code> are not valid.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)\n  id: Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: Copy(Char[], Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(Char[], Int32, IntPtr, Int32)\n  fullName: Marshal.Copy(Char[], Int32, IntPtr, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.\n  remarks: You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.\n  example:\n  - \"The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.Copy-char#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-char/cs/sample.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.Copy-char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-char/vb/sample.vb#1)]\"\n  syntax:\n    content: public static void Copy (char[] source, int startIndex, IntPtr destination, int length);\n    parameters:\n    - id: source\n      type: System.Char[]\n      description: The one-dimensional array to copy from.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based index in the source array where copying should start.\n    - id: destination\n      type: System.IntPtr\n      description: The memory pointer to copy to.\n    - id: length\n      type: System.Int32\n      description: The number of array elements to copy.\n  overload: System.Runtime.InteropServices.Marshal.Copy*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> and <code>length</code> are not valid.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)\n  id: Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: Copy(Byte[], Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(Byte[], Int32, IntPtr, Int32)\n  fullName: Marshal.Copy(Byte[], Int32, IntPtr, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.\n  remarks: You can use this method to copy a subset of a one-dimensional managed array to an unmanaged C-style array.\n  example:\n  - \"The following example copies an array to unmanaged memory by using the <xref:System.Runtime.InteropServices.Marshal.Copy%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.IntPtr%2CSystem.Int32%29> overload, and then copies the unmanaged array back to managed memory by using the <xref:System.Runtime.InteropServices.Marshal.Copy%28System.IntPtr%2CSystem.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29>overload.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.Copy-byte#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-byte/cs/sample.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.Copy-byte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-byte/vb/sample.vb#1)]\"\n  syntax:\n    content: public static void Copy (byte[] source, int startIndex, IntPtr destination, int length);\n    parameters:\n    - id: source\n      type: System.Byte[]\n      description: The one-dimensional array to copy from.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based index in the source array where copying should start.\n    - id: destination\n      type: System.IntPtr\n      description: The memory pointer to copy to.\n    - id: length\n      type: System.Int32\n      description: The number of array elements to copy.\n  overload: System.Runtime.InteropServices.Marshal.Copy*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> and <code>length</code> are not valid.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code>, <code>startIndex</code>, <code>destination</code>, or <code>length</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)\n  commentId: M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)\n  id: CreateAggregatedObject(System.IntPtr,System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: CreateAggregatedObject(IntPtr, Object)\n  nameWithType: Marshal.CreateAggregatedObject(IntPtr, Object)\n  fullName: Marshal.CreateAggregatedObject(IntPtr, Object)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Aggregates a managed object with the specified COM object.\n  remarks: The <xref:System.Runtime.InteropServices.Marshal.CreateAggregatedObject%2A> method aggregates the inner managed pointer of a managed object with the specified outer pointer, and then returns an inner [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer of the managed object.\n  syntax:\n    content: public static IntPtr CreateAggregatedObject (IntPtr pOuter, object o);\n    parameters:\n    - id: pOuter\n      type: System.IntPtr\n      description: The outer `IUnknown` pointer.\n    - id: o\n      type: System.Object\n      description: An object to aggregate.\n    return:\n      type: System.IntPtr\n      description: The inner `IUnknown` pointer of the managed object.\n  overload: System.Runtime.InteropServices.Marshal.CreateAggregatedObject*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>o</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] object.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)\n  commentId: M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)\n  id: CreateAggregatedObject``1(System.IntPtr,``0)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: CreateAggregatedObject<T>(IntPtr, T)\n  nameWithType: Marshal.CreateAggregatedObject<T>(IntPtr, T)\n  fullName: Marshal.CreateAggregatedObject<T>(IntPtr, T)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Aggregates a managed object of the specified type with the specified COM object.\"\n  remarks: The<xref:System.Runtime.InteropServices.Marshal.CreateAggregatedObject%2A> method aggregates the inner managed pointer of a managed object of a specified type with the specified outer pointer, and returns an inner [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer of the managed object.\n  syntax:\n    content: public static IntPtr CreateAggregatedObject<T> (IntPtr pOuter, T o);\n    parameters:\n    - id: pOuter\n      type: System.IntPtr\n      description: The outer [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer.\n    - id: o\n      type: T\n      description: The managed object to aggregate.\n    typeParameters:\n    - id: T\n      description: The type of the managed object to aggregate.\n    return:\n      type: System.IntPtr\n      description: The inner [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer of the managed object.\n  overload: System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>o</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] object.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)\n  commentId: M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)\n  id: CreateWrapperOfType(System.Object,System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: CreateWrapperOfType(Object, Type)\n  nameWithType: Marshal.CreateWrapperOfType(Object, Type)\n  fullName: Marshal.CreateWrapperOfType(Object, Type)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Wraps the specified COM object in an object of the specified type.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.CreateWrapperOfType%2A> converts one COM class type, typically the generic `__ComObject` type, to another COM class type. The input COM object, represented by parameter `o`, is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW).  \\n  \\n Both the `t` and `o` parameters must be classes whose signatures are attributed with <xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=fullName>. The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool applies this attribute for you when it imports a type library. If you create the RCW manually in source code, you should apply this attribute to the managed signature that represents the original coclass to signify its COM origins.  \\n  \\n Tlbimp.exe imports a COM [coclass](http://msdn.microsoft.com/en-us/333d0904-ffa2-4d25-878d-7422bcd40582) as a managed class and an interface. The coclass interface has the same name as the original coclass, and the managed class has the original coclass name appended with \\\"Class\\\". For example, a coclass called `MyCoclass` becomes a coclass interface called `MyCoclass` and a managed class called `MyCoclassClass`. Since `t` must be a class, not an interface, be sure to specify the managed class (`MyCoclassClass`) and not the coclass interface.  \\n  \\n> [!NOTE]\\n>  You lose the identity of the input COM object because a new RCW instance wraps the [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer exposed by the original RCW.\"\n  syntax:\n    content: public static object CreateWrapperOfType (object o, Type t);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The object to be wrapped.\n    - id: t\n      type: System.Type\n      description: The type of wrapper to create.\n    return:\n      type: System.Object\n      description: The newly wrapped object that is an instance of the desired type.\n  overload: System.Runtime.InteropServices.Marshal.CreateWrapperOfType*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>t</code> must derive from `__ComObject`.  \\n  \\n -or-  \\n  \\n <code>t</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] type.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>t</code> parameter is `null`.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: <code>o</code> cannot be converted to the destination type because it does not support all required interfaces.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)\n  commentId: M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)\n  id: CreateWrapperOfType``2(``0)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: CreateWrapperOfType<T,TWrapper>(T)\n  nameWithType: Marshal.CreateWrapperOfType<T,TWrapper>(T)\n  fullName: Marshal.CreateWrapperOfType<T,TWrapper>(T)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Wraps the specified COM object in an object of the specified type.\"\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.CreateWrapperOfType%60%602%28%60%600%29> converts a COM object of type `T` to the `TWrapper` COM class type. The input COM object, represented by parameter `o`, is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW).  \\n  \\n Both the `T` generic type parameter and the `o` parameter must be classes whose signatures are attributed with the <xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=fullName> attribute. The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool applies this attribute for you when it imports a type library. If you create the RCW manually in source code, you should apply this attribute to the managed signature that represents the original coclass to signify its COM origins.  \\n  \\n Tlbimp.exe imports a COM [coclass](http://msdn.microsoft.com/en-us/333d0904-ffa2-4d25-878d-7422bcd40582) as a managed class and an interface. The coclass interface has the same name as the original coclass, and the managed class has the original coclass name appended with \\\"Class\\\". For example, a coclass called `MyCoclass` becomes a coclass interface called `MyCoclass` and a managed class called `MyCoclassClass`. Because`T` must be a class, not an interface, be sure to specify the managed class (`MyCoclassClass`) and not the `coclass` interface.  \\n  \\n> [!NOTE]\\n>  You lose the identity of the input COM object, because a new RCW instance wraps the [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer exposed by the original RCW.\"\n  syntax:\n    content: public static TWrapper CreateWrapperOfType<T,TWrapper> (T o);\n    parameters:\n    - id: o\n      type: T\n      description: The object to be wrapped.\n    typeParameters:\n    - id: T\n      description: The type of object to wrap.\n    - id: TWrapper\n      description: The type of object to return.\n    return:\n      type: TWrapper\n      description: The newly wrapped object.\n  overload: System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>T</code> must derive from `__ComObject`.  \\n  \\n -or-  \\n  \\n <code>T</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] type.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: <code>o</code> cannot be converted to the <code>TWrapper</code> because it does not support all required interfaces.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)\n  commentId: M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)\n  id: DestroyStructure(System.IntPtr,System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: DestroyStructure(IntPtr, Type)\n  nameWithType: Marshal.DestroyStructure(IntPtr, Type)\n  fullName: Marshal.DestroyStructure(IntPtr, Type)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Frees all substructures that the specified unmanaged memory block points to.\n  remarks: \"You can use this method to free reference-type fields, such as strings, of an unmanaged structure. Unlike its fields, a structure can be a value type or a reference type. Value-type structures that contain value-type fields (all blittable) have no references whose memory must be freed. The <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A?displayProperty=fullName> method uses this method to prevent memory leaks when reusing memory occupied by a structure.  \\n  \\n <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> calls the COM [SysFreeString](http://go.microsoft.com/fwlink/?LinkId=148633) function, which, in turn, frees an allocated string.  \\n  \\n In addition to <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A>, the <xref:System.Runtime.InteropServices.Marshal> class provides two other memory-deallocation methods: <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A> and <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public static void DestroyStructure (IntPtr ptr, Type structuretype);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: A pointer to an unmanaged block of memory.\n    - id: structuretype\n      type: System.Type\n      description: Type of a formatted class. This provides the layout information necessary to delete the buffer in the <code>ptr</code> parameter.\n  overload: System.Runtime.InteropServices.Marshal.DestroyStructure*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>structureType</code> has an automatic layout. Use sequential or explicit instead.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)\n  id: DestroyStructure``1(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: DestroyStructure<T>(IntPtr)\n  nameWithType: Marshal.DestroyStructure<T>(IntPtr)\n  fullName: Marshal.DestroyStructure<T>(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Frees all substructures of a specified type that the specified unmanaged memory block points to.\"\n  remarks: \"You can use this method to free reference type fields, such as strings, of an unmanaged structure. Unlike its fields, a structure can be a value type or a reference type. Value type structures that contain value type fields (all blittable) have no references whose memory must be freed. The <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A?displayProperty=fullName> method uses this method to prevent memory leaks when reusing memory occupied by a structure.  \\n  \\n <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> calls the COM [SysFreeString](http://go.microsoft.com/fwlink/?LinkId=148633) function, which, in turn, frees an allocated string.\"\n  syntax:\n    content: public static void DestroyStructure<T> (IntPtr ptr);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: A pointer to an unmanaged block of memory.\n    typeParameters:\n    - id: T\n      description: The type of the formatted structure. This provides the layout information necessary to delete the buffer in the <code>ptr</code> parameter.\n  overload: System.Runtime.InteropServices.Marshal.DestroyStructure``1*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>T</code> has an automatic layout. Use sequential or explicit instead.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)\n  commentId: M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)\n  id: FinalReleaseComObject(System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: FinalReleaseComObject(Object)\n  nameWithType: Marshal.FinalReleaseComObject(Object)\n  fullName: Marshal.FinalReleaseComObject(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Releases all references to a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW) by setting its reference count to 0.\n  remarks: \"The <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method releases the managed reference to a COM object. Calling this method is equivalent to calling the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method in a loop until it returns 0 (zero).  \\n  \\n When the reference count on the COM object becomes 0, the COM object is usually freed, although this depends on the COM object's implementation and is beyond the control of the runtime. However, the RCW can still exist, waiting to be garbage-collected.  \\n  \\n The COM object cannot be used after it has been separated from its underlying RCW. If you try to call a method on the RCW after its reference count becomes 0, a <xref:System.Runtime.InteropServices.InvalidComObjectException> will be thrown.\"\n  syntax:\n    content: public static int FinalReleaseComObject (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The RCW to be released.\n    return:\n      type: System.Int32\n      description: The new value of the reference count of the RCW associated with the <code>o</code> parameter, which is 0 (zero) if the release is successful.\n  overload: System.Runtime.InteropServices.Marshal.FinalReleaseComObject*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>o</code> is not a valid COM object.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>o</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)\n  id: FreeBSTR(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: FreeBSTR(IntPtr)\n  nameWithType: Marshal.FreeBSTR(IntPtr)\n  fullName: Marshal.FreeBSTR(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Frees a `BSTR` using the COM [SysFreeString](http://go.microsoft.com/fwlink/?LinkID=148633) function.\n  remarks: 'Like <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A?displayProperty=fullName>, you can use this method to deallocate memory. <xref:System.Runtime.InteropServices.Marshal.FreeBSTR%2A> calls the COM [SysFreeString](http://go.microsoft.com/fwlink/?LinkID=148633) function, which frees memory allocated by any of the following unmanaged methods: `SysAllocString`, `SysAllocStringByteLen`, `SysAllocStringLen`, `SysReAllocString`, `SysReAllocStringLen`. You can call unmanaged methods such as these with platform invoke. For details, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).'\n  syntax:\n    content: public static void FreeBSTR (IntPtr ptr);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The address of the BSTR to be freed.\n  overload: System.Runtime.InteropServices.Marshal.FreeBSTR*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\n  id: FreeCoTaskMem(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: FreeCoTaskMem(IntPtr)\n  nameWithType: Marshal.FreeCoTaskMem(IntPtr)\n  fullName: Marshal.FreeCoTaskMem(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Frees a block of memory allocated by the unmanaged COM task memory allocator.\n  remarks: \"You can use <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A> to free any memory allocated by <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A>, <xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A>, or any equivalent unmanaged method. If the `ptr` parameter is `null`, the method does nothing.  \\n  \\n <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A> exposes the COM [CoTaskMemFree](http://go.microsoft.com/fwlink/?LinkId=148638) function, which frees all bytes so that you can no longer use the memory that the `ptr` parameter points to.  \\n  \\n In addition to <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>, the <xref:System.Runtime.InteropServices.Marshal> class provides two other memory-deallocation methods: <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> and <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>.\"\n  syntax:\n    content: public static void FreeCoTaskMem (IntPtr ptr);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The address of the memory to be freed.\n  overload: System.Runtime.InteropServices.Marshal.FreeCoTaskMem*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\n  id: FreeHGlobal(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: FreeHGlobal(IntPtr)\n  nameWithType: Marshal.FreeHGlobal(IntPtr)\n  fullName: Marshal.FreeHGlobal(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Frees memory previously allocated from the unmanaged memory of the process.\n  remarks: \"You can use <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> to free any memory from the global heap allocated by <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>, <xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A>, or any equivalent unmanaged API method. If the `hglobal` parameter is <xref:System.IntPtr.Zero?displayProperty=fullName> the method does nothing.  \\n  \\n <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> exposes the [LocalFree](http://go.microsoft.com/fwlink/?LinkId=148640) function from Kernel32.DLL, which frees all bytes so that you can no longer use the memory pointed to by `hglobal`.  \\n  \\n In addition to <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>, the <xref:System.Runtime.InteropServices.Marshal> class provides two other memory-deallocation API methods: <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> and <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>.\"\n  example:\n  - \"The following example demonstrates calling the <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> method. This code example is part of a larger example provided for the <xref:System.Runtime.InteropServices.Marshal> class.  \\n  \\n [!code-cpp[Marshal#4](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#4)]\\n [!code-csharp[Marshal#4](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#4)]\\n [!code-vb[Marshal#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#4)]  \\n  \\n The following example demonstrates how to convert the contents of a managed <xref:System.String> class to unmanaged memory and then dispose of the unmanaged memory when done.  \\n  \\n [!code-cpp[Runtime.InteropServices.Marshal.StringToHGlobalAnsi#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.StringToHGlobalAnsi/CPP/stringtohglobalansi.cpp#1)]\\n [!code-csharp[Runtime.InteropServices.Marshal.StringToHGlobalAnsi#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.StringToHGlobalAnsi/cs/stringtohglobalansi.cs#1)]\"\n  syntax:\n    content: public static void FreeHGlobal (IntPtr hglobal);\n    parameters:\n    - id: hglobal\n      type: System.IntPtr\n      description: The handle returned by the original matching call to <xref href=\"System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\"></xref>.\n  overload: System.Runtime.InteropServices.Marshal.FreeHGlobal*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)\n  commentId: M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)\n  id: GenerateGuidForType(System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GenerateGuidForType(Type)\n  nameWithType: Marshal.GenerateGuidForType(Type)\n  fullName: Marshal.GenerateGuidForType(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: Returns the globally unique identifier (GUID) for the specified type, or generates a GUID using the algorithm used by the Type Library Exporter (Tlbexp.exe).\n  remarks: If the type has a GUID in the metadata, it is returned. Otherwise, a GUID is automatically generated. You can use this method to programmatically determine the COM GUID for any managed type, including COM-invisible types. Class interfaces are the only exception because they do not correspond to a managed type. <xref:System.Runtime.InteropServices.Marshal.GenerateGuidForType%2A> provides the same functionality as the <xref:System.Type.GUID%2A?displayProperty=fullName> property.\n  syntax:\n    content: public static Guid GenerateGuidForType (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type to generate a GUID for.\n    return:\n      type: System.Guid\n      description: An identifier for the specified type.\n  overload: System.Runtime.InteropServices.Marshal.GenerateGuidForType*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)\n  commentId: M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)\n  id: GenerateProgIdForType(System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GenerateProgIdForType(Type)\n  nameWithType: Marshal.GenerateProgIdForType(Type)\n  fullName: Marshal.GenerateProgIdForType(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: Returns a programmatic identifier (ProgID) for the specified type.\n  remarks: If the type has a ProgID in the metadata, that ProgID is returned. Otherwise, a ProgID is generated based on the fully qualified name of the type.\n  syntax:\n    content: public static string GenerateProgIdForType (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type to get a ProgID for.\n    return:\n      type: System.String\n      description: The ProgID of the specified type.\n  overload: System.Runtime.InteropServices.Marshal.GenerateProgIdForType*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>type</code> parameter is not a class that can be create by COM. The class must be public, have a public default constructor, and be COM visible.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>type</code> parameter is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetActiveObject(System.String)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetActiveObject(System.String)\n  id: GetActiveObject(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetActiveObject(String)\n  nameWithType: Marshal.GetActiveObject(String)\n  fullName: Marshal.GetActiveObject(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Obtains a running instance of the specified object from the running object table (ROT).\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.GetActiveObject%2A> exposes the COM [GetActiveObject](https://msdn.microsoft.com/library/ms221467\\\\(v=vs.85\\\\).aspx) function from OLEAUT32.DLL; however, the latter expects a class identifier (CLSID) instead of the programmatic identifier (`ProgID`) expected by this method. To obtain a running instance of a COM object without a registered `ProgID`, use platform invoke to define the COM [GetActiveObject](https://msdn.microsoft.com/library/ms221467\\\\(v=vs.85\\\\).aspx) function. For a description of platform invoke, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).  \\n  \\n## ProgID and CLSID  \\n Keys in the HKEY_CLASSES_ROOT subtree of the registry contain a variety of subkey types. Most of the subkeys are ProgIDs, which map a user-friendly string to a CLSID. Applications often use these human-readable strings instead of the numeric CLSIDs. Often, a component has a version-independent ProgID that is mapped to the latest version of the component that is installed on the system.  \\n  \\n Applications and components primarily use ProgIDs to retrieve their corresponding CLSIDs.\"\n  example:\n  - \"The following example was run on a computer that was configured with a running instance of Microsoft Word. There were no instances of Microsoft Excel running.  \\n  \\n The example calls <xref:System.Runtime.InteropServices.Marshal.GetActiveObject%2A> twice. The first call tries to retrieve a reference to an instance of Microsoft Word (an instance of the `Word.Application` object). The second call tries to retrieve a reference to an instance of Microsoft Excel (an instance of an `Excel.Application` object).  \\n  \\n The code retrieves a reference to an instance of Microsoft Word successfully. However, because Microsoft Excel is not running, the attempt to retrieve the second object raises a <xref:System.Runtime.InteropServices.COMException>.  \\n  \\n [!code-csharp[System.Runtime.InteropServices.Marshal.GetActiveObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.marshal.getactiveobject/cs/marshal.getactiveobject.cs#1)]\\n [!code-vb[System.Runtime.InteropServices.Marshal.GetActiveObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.marshal.getactiveobject/vb/marshal.getactiveobject.vb#1)]\"\n  syntax:\n    content: public static object GetActiveObject (string progID);\n    parameters:\n    - id: progID\n      type: System.String\n      description: The programmatic identifier (ProgID) of the object that was requested.\n    return:\n      type: System.Object\n      description: The object that was requested; otherwise `null`. You can cast this object to any COM interface that it supports.\n  overload: System.Runtime.InteropServices.Marshal.GetActiveObject*\n  exceptions:\n  - type: System.Runtime.InteropServices.COMException\n    commentId: T:System.Runtime.InteropServices.COMException\n    description: The object was not found.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)\n  id: GetComInterfaceForObject(System.Object,System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetComInterfaceForObject(Object, Type)\n  nameWithType: Marshal.GetComInterfaceForObject(Object, Type)\n  fullName: Marshal.GetComInterfaceForObject(Object, Type)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Returns a pointer to an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface that represents the specified interface on the specified object. Custom query interface access is enabled by default.\n  remarks: \"This method returns an interface pointer that represents the requested interface on the specified object. It is particularly useful if you have an unmanaged method that expects to be passed an interface pointer. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer. You must adhere to the rules defined by COM when using raw COM interface pointers.  \\n  \\n <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling. Although less common, you can use this method on a managed object to obtain a pointer to the object's COM callable wrapper. For example, you can use <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> on a managed object that is exported to COM to obtain an interface pointer for <xref:System.Runtime.InteropServices.UCOMIConnectionPointContainer?displayProperty=fullName>. You cannot obtain a pointer to a class interface since a class interface lacks the corresponding type to pass to the second parameter (`t`). Instead, use <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName> to invoke the members on the default interface of the COM callable wrapper, which is usually an auto-dispatch class interface.  \\n  \\n The <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> method overload allows query interface customization by default. To specify whether to apply query interface customization, use the <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29> method overload.  \\n  \\n For additional information, see the [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md), [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md), and [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024) topics.\"\n  syntax:\n    content: public static IntPtr GetComInterfaceForObject (object o, Type T);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The object that provides the interface.\n    - id: T\n      type: System.Type\n      description: The type of interface that is requested.\n    return:\n      type: System.IntPtr\n      description: The interface pointer that represents the specified interface for the object.\n  overload: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>T</code> parameter is not an interface.  \\n  \\n -or-  \\n  \\n The type is not visible to COM.  \\n  \\n -or-  \\n  \\n The <code>T</code> parameter is a generic type.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The <code>o</code> parameter does not support the requested interface.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>o</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>T</code> parameter is `null`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)\n  id: GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode)\n  nameWithType: Marshal.GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode)\n  fullName: Marshal.GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Returns a pointer to an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface that represents the specified interface on the specified object. Custom query interface access is controlled by the specified customization mode.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29>lets you specify whether to apply query interface customization. Use the <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> overload to apply query interface customization by default.\n  syntax:\n    content: public static IntPtr GetComInterfaceForObject (object o, Type T, System.Runtime.InteropServices.CustomQueryInterfaceMode mode);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The object that provides the interface.\n    - id: T\n      type: System.Type\n      description: The type of interface that is requested.\n    - id: mode\n      type: System.Runtime.InteropServices.CustomQueryInterfaceMode\n      description: One of the enumeration values that indicates whether to apply an `IUnknown::QueryInterface` customization that is supplied by an <xref href=\"System.Runtime.InteropServices.ICustomQueryInterface\"></xref>.\n    return:\n      type: System.IntPtr\n      description: The interface pointer that represents the interface for the object.\n  overload: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>T</code> parameter is not an interface.  \\n  \\n -or-  \\n  \\n The type is not visible to COM.  \\n  \\n -or-  \\n  \\n The <code>T</code> parameter is a generic type.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The object <code>o</code> does not support the requested interface.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>o</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>T</code> parameter is `null`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)\n  id: GetComInterfaceForObject``2(``0)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetComInterfaceForObject<T,TInterface>(T)\n  nameWithType: Marshal.GetComInterfaceForObject<T,TInterface>(T)\n  fullName: Marshal.GetComInterfaceForObject<T,TInterface>(T)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Returns a pointer to an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface that represents the specified interface on an object of the specified type. Custom query interface access is enabled by default.\"\n  remarks: \"This method returns an interface pointer that represents the `TInterface` interface on the specified object. It is particularly useful if you have an unmanaged method that expects to be passed an interface pointer. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use the <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName>method to decrement the reference count when you have finished with the pointer. You must adhere to the rules defined by COM when using raw COM interface pointers.  \\n  \\n <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling. You can also use this method on a managed object to obtain a pointer to the object's COM callable wrapper, although this is less common. For example, you can use<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> on a managed object that is exported to COM to obtain an interface pointer for <xref:System.Runtime.InteropServices.UCOMIConnectionPointContainer?displayProperty=fullName>.  \\n  \\n The<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> method overload allows query interface customization by default. To specify whether to apply query interface customization, use the <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29> method overload.  \\n  \\n For additional information, see the [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md), [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md), and [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024) topics.\"\n  syntax:\n    content: public static IntPtr GetComInterfaceForObject<T,TInterface> (T o);\n    parameters:\n    - id: o\n      type: T\n      description: The object that provides the interface.\n    typeParameters:\n    - id: T\n      description: The type of <code>o</code>.\n    - id: TInterface\n      description: The type of interface to return.\n    return:\n      type: System.IntPtr\n      description: The interface pointer that represents the <code>TInterface</code> interface.\n  overload: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>TInterface</code> parameter is not an interface.  \\n  \\n -or-  \\n  \\n The type is not visible to COM.  \\n  \\n -or-  \\n  \\n The <code>T</code> parameter is an open generic type.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: The <code>o</code> parameter does not support the <code>TInterface</code> interface.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>o</code> parameter is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext(System.Object,System.Type)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext(System.Object,System.Type)\n  id: GetComInterfaceForObjectInContext(System.Object,System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetComInterfaceForObjectInContext(Object, Type)\n  nameWithType: Marshal.GetComInterfaceForObjectInContext(Object, Type)\n  fullName: Marshal.GetComInterfaceForObjectInContext(Object, Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Returns an interface pointer that represents the specified interface for an object, if the caller is in the same context as that object.\n  remarks: This method is the same as <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A> except that it returns `null` if the caller is not in the same context as the object. It is particularly useful if you have an unmanaged method that expects to be passed an interface pointer.\n  syntax:\n    content: public static IntPtr GetComInterfaceForObjectInContext (object o, Type t);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The object that provides the interface.\n    - id: t\n      type: System.Type\n      description: The type of interface that is requested.\n    return:\n      type: System.IntPtr\n      description: The interface pointer specified by <code>t</code> that represents the interface for the specified object, or `null` if the caller is not in the same context as the object.\n  overload: System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>t</code> is not an interface.  \\n  \\n -or-  \\n  \\n The type is not visible to COM.\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: <code>o</code> does not support the requested interface.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>o</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>t</code> is `null`.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)\n  id: GetComObjectData(System.Object,System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetComObjectData(Object, Object)\n  nameWithType: Marshal.GetComObjectData(Object, Object)\n  fullName: Marshal.GetComObjectData(Object, Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: Retrieves data that is referenced by the specified key from the specified COM object.\n  remarks: All COM objects wrapped in a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) have an associated hash table, which <xref:System.Runtime.InteropServices.Marshal.GetComObjectData%2A> retrieves. <xref:System.Runtime.InteropServices.Marshal.SetComObjectData%2A?displayProperty=fullName> adds data to the hash table. You should never have to call either method from your code.\n  syntax:\n    content: public static object GetComObjectData (object obj, object key);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The COM object that contains the data that you want.\n    - id: key\n      type: System.Object\n      description: The key in the internal hash table of <code>obj</code> to retrieve the data from.\n    return:\n      type: System.Object\n      description: The data represented by the <code>key</code> parameter in the internal hash table of the <code>obj</code> parameter.\n  overload: System.Runtime.InteropServices.Marshal.GetComObjectData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>obj</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>key</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>obj</code> is not a COM object.  \\n  \\n -or-  \\n  \\n <code>obj</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] object.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo(System.Reflection.MemberInfo)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo(System.Reflection.MemberInfo)\n  id: GetComSlotForMethodInfo(System.Reflection.MemberInfo)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetComSlotForMethodInfo(MemberInfo)\n  nameWithType: Marshal.GetComSlotForMethodInfo(MemberInfo)\n  fullName: Marshal.GetComSlotForMethodInfo(MemberInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Retrieves the virtual function table (v-table or VTBL) slot for a specified <xref href=\"System.Reflection.MemberInfo\"></xref> type when that type is exposed to COM.\n  remarks: \"The zero-based slot number returned by this method accounts for three [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) and possibly four [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) methods, making the value of the first available slot either 3 or 7. <xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=fullName>.  \\n  \\n You can use this method to retrieve slot numbers for members of interfaces that are not visible from COM and for members of private interfaces. The slot numbers returned correspond to the v-table numbers that would be reserved if the type was exposed to COM. COM-invisible members actually occupy a slot in an exposed v-table, even though the COM client cannot use the slot. You cannot use <xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A> on a class interface by passing <xref:System.Reflection.MemberInfo> from a class. For additional information, see [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024).\"\n  syntax:\n    content: public static int GetComSlotForMethodInfo (System.Reflection.MemberInfo m);\n    parameters:\n    - id: m\n      type: System.Reflection.MemberInfo\n      description: An object that represents an interface method.\n    return:\n      type: System.Int32\n      description: The VTBL slot <code>m</code> identifier when it is exposed to COM.\n  overload: System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>m</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>m</code> parameter is not a <xref href=\\\"System.Reflection.MemberInfo\\\"></xref> object.  \\n  \\n -or-  \\n  \\n The <code>m</code> parameter is not an interface method.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)\n  id: GetDelegateForFunctionPointer(System.IntPtr,System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetDelegateForFunctionPointer(IntPtr, Type)\n  nameWithType: Marshal.GetDelegateForFunctionPointer(IntPtr, Type)\n  fullName: Marshal.GetDelegateForFunctionPointer(IntPtr, Type)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Converts an unmanaged function pointer to a delegate.\n  remarks: \"In versions 1.0 and 1.1 of the .NET Framework, it was possible to pass a delegate representing a managed method to unmanaged code as a function pointer, allowing the unmanaged code to call the managed method through the function pointer. It was also possible for the unmanaged code to pass that function pointer back to the managed code, and the pointer was resolved properly to the underlying managed method.  \\n  \\n In the .NET Framework 2.0 and later versions, you can use the <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A> and <xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%2A> methods to marshal delegates in both directions. With <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A>, `ptr` is imported as a <xref:System.IntPtr?displayProperty=fullName>. A <xref:System.IntPtr?displayProperty=fullName> can be obtained for a managed delegate by calling <xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%2A> and passed as a parameter; it can then be called from inside the unmanaged method. Note that the parameter marshaler can also marshal function pointers to delegates in the .NET Framework 2.0 and later versions.  \\n  \\n The <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A> method has the following restrictions:  \\n  \\n-   Generics are not supported in interop scenarios.  \\n  \\n-   You cannot pass an invalid function pointer to this method.  \\n  \\n-   You can use this method only for pure unmanaged function pointers.  \\n  \\n-   You cannot use this method with function pointers obtained through C++ or from the <xref:System.RuntimeMethodHandle.GetFunctionPointer%2A> method.  \\n  \\n-   You cannot use this method to create a delegate from a function pointer to another managed delegate.\"\n  syntax:\n    content: public static Delegate GetDelegateForFunctionPointer (IntPtr ptr, Type t);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The unmanaged function pointer to be converted.\n    - id: t\n      type: System.Type\n      description: The type of the delegate to be returned.\n    return:\n      type: System.Delegate\n      description: A delegate instance that can be cast to the appropriate delegate type.\n  overload: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>t</code> parameter is not a delegate or is generic.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>ptr</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>t</code> parameter is `null`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)\n  id: GetDelegateForFunctionPointer``1(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetDelegateForFunctionPointer<TDelegate>(IntPtr)\n  nameWithType: Marshal.GetDelegateForFunctionPointer<TDelegate>(IntPtr)\n  fullName: Marshal.GetDelegateForFunctionPointer<TDelegate>(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Converts an unmanaged function pointer to a delegate of a specified type.\"\n  remarks: \"You can use the<xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%60%601%28System.IntPtr%29> and<xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%60%601%28%60%600%29>methods to marshal delegates in both directions.  \\n  \\n The<xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%60%601%28System.IntPtr%29> method has the following restrictions:  \\n  \\n-   You cannot pass an invalid function pointer to this method.  \\n  \\n-   You can use this method only for pure unmanaged function pointers.  \\n  \\n-   You cannot use this method with function pointers obtained through C++ or from the <xref:System.RuntimeMethodHandle.GetFunctionPointer%2A> method.  \\n  \\n-   You cannot use this method to create a delegate from a function pointer to another managed delegate.\"\n  syntax:\n    content: public static TDelegate GetDelegateForFunctionPointer<TDelegate> (IntPtr ptr);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The unmanaged function pointer to convert.\n    typeParameters:\n    - id: TDelegate\n      description: The type of the delegate to return.\n    return:\n      type: TDelegate\n      description: A instance of the specified delegate type.\n  overload: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>TDelegate</code> generic parameter is not a delegate, or it is an open generic type.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>ptr</code> parameter is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)\n  id: GetEndComSlot(System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetEndComSlot(Type)\n  nameWithType: Marshal.GetEndComSlot(Type)\n  fullName: Marshal.GetEndComSlot(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Retrieves the last slot in the virtual function table (v-table or VTBL) of a type when exposed to COM.\n  remarks: This method returns the zero-based, v-table number for an interface or a class. When used on a class, the slot number returned refers to the class interface for the class. If the class interface is auto-dual, this method always returns -1 to indicate that the dispatch-only interface does not expose a v-table to managed clients. You can use <xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A> and <xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A?displayProperty=fullName> in conjunction with <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=fullName> to pass slots within a specified range. For additional information, see [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024).\n  syntax:\n    content: public static int GetEndComSlot (Type t);\n    parameters:\n    - id: t\n      type: System.Type\n      description: A type that represents an interface or class.\n    return:\n      type: System.Int32\n      description: The last VTBL slot of the interface when exposed to COM. If the <code>t</code> parameter is a class, the returned VTBL slot is the last slot in the interface that is generated from the class.\n  overload: System.Runtime.InteropServices.Marshal.GetEndComSlot*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetExceptionCode\n  commentId: M:System.Runtime.InteropServices.Marshal.GetExceptionCode\n  id: GetExceptionCode\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetExceptionCode()\n  nameWithType: Marshal.GetExceptionCode()\n  fullName: Marshal.GetExceptionCode()\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Retrieves a code that identifies the type of the exception that occurred.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.GetExceptionCode%2A> is exposed for compiler support of structured exception handling (SEH) only. If this method is called before an exception is thrown, it returns 0x0.\n  syntax:\n    content: public static int GetExceptionCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The type of the exception.\n  overload: System.Runtime.InteropServices.Marshal.GetExceptionCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)\n  id: GetExceptionForHR(System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetExceptionForHR(Int32)\n  nameWithType: Marshal.GetExceptionForHR(Int32)\n  fullName: Marshal.GetExceptionForHR(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Converts the specified HRESULT error code to a corresponding <xref href=\"System.Exception\"></xref> object.\n  remarks: \"Use the <xref:System.Runtime.InteropServices.Marshal.GetExceptionForHR%2A> method to get an <xref:System.Exception> based on an HRESULT without having to call the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method and catch the exception.  \\n  \\n The current [IErrorInfo](http://msdn.microsoft.com/en-us/4dda6909-2d9a-4727-ae0c-b5f90dcfa447) interface is used to construct the exception.  \\n  \\n For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md).\"\n  syntax:\n    content: public static Exception GetExceptionForHR (int errorCode);\n    parameters:\n    - id: errorCode\n      type: System.Int32\n      description: The HRESULT to be converted.\n    return:\n      type: System.Exception\n      description: An object that represents the converted HRESULT.\n  overload: System.Runtime.InteropServices.Marshal.GetExceptionForHR*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)\n  id: GetExceptionForHR(System.Int32,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetExceptionForHR(Int32, IntPtr)\n  nameWithType: Marshal.GetExceptionForHR(Int32, IntPtr)\n  fullName: Marshal.GetExceptionForHR(Int32, IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Converts the specified HRESULT error code to a corresponding <xref href=\"System.Exception\"></xref> object, with additional error information passed in an [IErrorInfo](http://msdn.microsoft.com/en-us/4dda6909-2d9a-4727-ae0c-b5f90dcfa447) interface for the exception object.\n  remarks: \"Use the <xref:System.Runtime.InteropServices.Marshal.GetExceptionForHR%2A> method to get an <xref:System.Exception> based on an HRESULT without having to call the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method and catch the exception (thus avoiding the corresponding performance overhead). The `errorInfo` parameter supplies additional information about the error, such as its textual description and the globally unique identifier (GUID) for the interface that defined the error.  \\n  \\n Use this method overload if you have custom error information that you have to supply in the conversion.  \\n  \\n For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md).\"\n  syntax:\n    content: public static Exception GetExceptionForHR (int errorCode, IntPtr errorInfo);\n    parameters:\n    - id: errorCode\n      type: System.Int32\n      description: The HRESULT to be converted.\n    - id: errorInfo\n      type: System.IntPtr\n      description: A pointer to the `IErrorInfo` interface that provides more information about the error. You can specify <code>IntPtr(0)</code> to use the current `IErrorInfo` interface, or <code>IntPtr(-1)</code> to ignore the current `IErrorInfo` interface and construct the exception just from the error code.\n    return:\n      type: System.Exception\n      description: An object that represents the converted HRESULT and information obtained from <code>errorInfo</code>.\n  overload: System.Runtime.InteropServices.Marshal.GetExceptionForHR*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetExceptionPointers\n  commentId: M:System.Runtime.InteropServices.Marshal.GetExceptionPointers\n  id: GetExceptionPointers\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetExceptionPointers()\n  nameWithType: Marshal.GetExceptionPointers()\n  fullName: Marshal.GetExceptionPointers()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Retrieves a computer-independent description of an exception, and information about the state that existed for the thread when the exception occurred.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.GetExceptionPointers%2A> is exposed for compiler support of structured exception handling (SEH) only.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public static IntPtr GetExceptionPointers ();\n    parameters: []\n    return:\n      type: System.IntPtr\n      description: A pointer to an [EXCEPTION_POINTERS](http://go.microsoft.com/fwlink/?LinkId=148648) structure.\n  overload: System.Runtime.InteropServices.Marshal.GetExceptionPointers*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)\n  id: GetFunctionPointerForDelegate(System.Delegate)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetFunctionPointerForDelegate(Delegate)\n  nameWithType: Marshal.GetFunctionPointerForDelegate(Delegate)\n  fullName: Marshal.GetFunctionPointerForDelegate(Delegate)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Converts a delegate into a function pointer that is callable from unmanaged code.\n  remarks: \"The delegate `d` is converted to a function pointer that can be passed to unmanaged code using the [__stdcall](http://msdn.microsoft.com/library/e212594b-1827-4d07-9527-7d412b300df8) calling convention.  \\n  \\n You must manually keep the delegate from being collected by the garbage collector from managed code. The garbage collector does not track references to unmanaged code.\"\n  syntax:\n    content: public static IntPtr GetFunctionPointerForDelegate (Delegate d);\n    parameters:\n    - id: d\n      type: System.Delegate\n      description: The delegate to be passed to unmanaged code.\n    return:\n      type: System.IntPtr\n      description: A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.\n  overload: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>d</code> parameter is a generic type.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>d</code> parameter is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)\n  id: GetFunctionPointerForDelegate``1(``0)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetFunctionPointerForDelegate<TDelegate>(TDelegate)\n  nameWithType: Marshal.GetFunctionPointerForDelegate<TDelegate>(TDelegate)\n  fullName: Marshal.GetFunctionPointerForDelegate<TDelegate>(TDelegate)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Converts a delegate of a specified type to a function pointer that is callable from unmanaged code.\"\n  remarks: \"The delegate `d` is converted to a function pointer that can be passed to unmanaged code by using the [__stdcall](http://msdn.microsoft.com/library/e212594b-1827-4d07-9527-7d412b300df8) calling convention.  \\n  \\n You must manually keep the delegate from being collected by the garbage collector from managed code. The garbage collector does not track references to unmanaged code.\"\n  syntax:\n    content: public static IntPtr GetFunctionPointerForDelegate<TDelegate> (TDelegate d);\n    parameters:\n    - id: d\n      type: TDelegate\n      description: The delegate to be passed to unmanaged code.\n    typeParameters:\n    - id: TDelegate\n      description: The type of delegate to convert.\n    return:\n      type: System.IntPtr\n      description: A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.\n  overload: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>d</code> parameter is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)\n  id: GetHINSTANCE(System.Reflection.Module)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetHINSTANCE(Module)\n  nameWithType: Marshal.GetHINSTANCE(Module)\n  fullName: Marshal.GetHINSTANCE(Module)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: Returns the instance handle (HINSTANCE) for the specified module.\n  remarks: When dynamic or in-memory, modules do not have an HINSTANCE.\n  syntax:\n    content: public static IntPtr GetHINSTANCE (System.Reflection.Module m);\n    parameters:\n    - id: m\n      type: System.Reflection.Module\n      description: The module whose HINSTANCE is desired.\n    return:\n      type: System.IntPtr\n      description: The HINSTANCE for <code>m</code>; or -1 if the module does not have an HINSTANCE.\n  overload: System.Runtime.InteropServices.Marshal.GetHINSTANCE*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>m</code> parameter is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)\n  id: GetHRForException(System.Exception)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetHRForException(Exception)\n  nameWithType: Marshal.GetHRForException(Exception)\n  fullName: Marshal.GetHRForException(Exception)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Converts the specified exception to an HRESULT.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A> also sets up an [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\\\(v=vs.85\\\\).aspx) interface for the exception that can be obtained by calling the COM GetErrorInfoNEEDGUID function. You can use this function to return an HRESULT value on a managed class implementation of a COM interface where you apply the <xref:System.Runtime.InteropServices.PreserveSigAttribute> attribute. Have the attributed method catch all exceptions and use the <xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A> method to return the appropriate HRESULT value. Allowing an exception to propagate outside the method produces incorrect behavior. (In fact, the common language runtime fails to pass an exception to a COM client that calls such a method through a v-table.)  \\n  \\n Note that the <xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A> method sets the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\\\(v=vs.85\\\\).aspx) interface of the current thread. This can cause unexpected results for methods like the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> methods that default to using the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\\\(v=vs.85\\\\).aspx) of the current thread if it is set.\"\n  syntax:\n    content: public static int GetHRForException (Exception e);\n    parameters:\n    - id: e\n      type: System.Exception\n      description: The exception to convert to an HRESULT.\n    return:\n      type: System.Int32\n      description: The HRESULT mapped to the supplied exception.\n  overload: System.Runtime.InteropServices.Marshal.GetHRForException*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error\n  commentId: M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error\n  id: GetHRForLastWin32Error\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetHRForLastWin32Error()\n  nameWithType: Marshal.GetHRForLastWin32Error()\n  fullName: Marshal.GetHRForLastWin32Error()\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Returns the HRESULT corresponding to the last error incurred by Win32 code executed using <xref href=\"System.Runtime.InteropServices.Marshal\"></xref>.\n  remarks: 'The target function must have had the `setLastError` metadata flag set. For example, the `SetLastError` field of the <xref:System.Runtime.InteropServices.DllImportAttribute?displayProperty=fullName> must be `true`. The process for setting this flag depends on the source language used: C# and C++ are `false` by default, but the `Declare` statement in Visual Basic is `true`.'\n  example:\n  - \"The following example demonstrates how to retrieve an HRESULT corresponding to a Win32 error code using the <xref:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error%2A> method.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.GetHRForLastWin32Error#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetHRForLastWin32Error/cs/example.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.GetHRForLastWin32Error#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetHRForLastWin32Error/vb/example.vb#1)]\"\n  syntax:\n    content: public static int GetHRForLastWin32Error ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The HRESULT corresponding to the last Win32 error code.\n  overload: System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)\n  id: GetIDispatchForObject(System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetIDispatchForObject(Object)\n  nameWithType: Marshal.GetIDispatchForObject(Object)\n  fullName: Marshal.GetIDispatchForObject(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: Returns an [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) interface from a managed object.\n  remarks: \"In managed code, you seldom work directly with the `IDispatch` interface. However, <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer.  \\n  \\n You can also use this method on a managed object to obtain an interface pointer to the COM callable wrapper for the object. For additional information, see [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md).\"\n  syntax:\n    content: public static IntPtr GetIDispatchForObject (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The object whose `IDispatch` interface is requested.\n    return:\n      type: System.IntPtr\n      description: The `IDispatch` pointer for the <code>o</code> parameter.\n  overload: System.Runtime.InteropServices.Marshal.GetIDispatchForObject*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: <code>o</code> does not support the requested interface.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetIDispatchForObjectInContext(System.Object)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetIDispatchForObjectInContext(System.Object)\n  id: GetIDispatchForObjectInContext(System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetIDispatchForObjectInContext(Object)\n  nameWithType: Marshal.GetIDispatchForObjectInContext(Object)\n  fullName: Marshal.GetIDispatchForObjectInContext(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Returns an [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) interface pointer from a managed object, if the caller is in the same context as that object.\n  remarks: This method is the same as <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A> except that it returns `null` if the caller is not in the same context as the object.\n  syntax:\n    content: public static IntPtr GetIDispatchForObjectInContext (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The object whose `IDispatch` interface is requested.\n    return:\n      type: System.IntPtr\n      description: The `IDispatch` interface pointer for the specified object, or `null` if the caller is not in the same context as the specified object.\n  overload: System.Runtime.InteropServices.Marshal.GetIDispatchForObjectInContext*\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: <code>o</code> does not support the requested interface.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>o</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetITypeInfoForType(System.Type)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetITypeInfoForType(System.Type)\n  id: GetITypeInfoForType(System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetITypeInfoForType(Type)\n  nameWithType: Marshal.GetITypeInfoForType(Type)\n  fullName: Marshal.GetITypeInfoForType(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Returns a <xref href=\"System.Runtime.InteropServices.ComTypes.ITypeInfo\"></xref> interface from a managed type.\n  remarks: This method returns a pointer to an `ITypeInfo` implementation that is based on the original type. Calling an object with <xref:System.Runtime.InteropServices.Marshal.GetITypeInfoForType%2A> causes the reference count to increment on the interface pointer before the pointer is returned. Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer. You can apply the <xref:System.Runtime.InteropServices.MarshalAsAttribute?displayProperty=fullName> to replace standard interop marshaling behavior with this custom marshaler.\n  example:\n  - \"The following example demonstrates how to retrieve a pointer to the `ITypeInfo` interface for a type using the <xref:System.Runtime.InteropServices.Marshal.GetITypeInfoForType%2A> method.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.GetITypeInfoForType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetITypeInfoForType/cs/example.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.GetITypeInfoForType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetITypeInfoForType/vb/example.vb#1)]\"\n  syntax:\n    content: public static IntPtr GetITypeInfoForType (Type t);\n    parameters:\n    - id: t\n      type: System.Type\n      description: The type whose `ITypeInfo` interface is being requested.\n    return:\n      type: System.IntPtr\n      description: A pointer to the `ITypeInfo` interface for the <code>t</code> parameter.\n  overload: System.Runtime.InteropServices.Marshal.GetITypeInfoForType*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>t</code> is not a visible type to COM.  \\n  \\n -or-  \\n  \\n <code>t</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] type.\"\n  - type: System.Runtime.InteropServices.COMException\n    commentId: T:System.Runtime.InteropServices.COMException\n    description: A type library is registered for the assembly that contains the type, but the type definition cannot be found.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)\n  id: GetIUnknownForObject(System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetIUnknownForObject(Object)\n  nameWithType: Marshal.GetIUnknownForObject(Object)\n  fullName: Marshal.GetIUnknownForObject(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Returns an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface from a managed object.\n  remarks: \"In managed code, you seldom work directly with the `IUnknown` interface. However, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A> is useful when calling a method that exposes a COM object parameter as an <xref:System.IntPtr> type, or with custom marshaling. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown%2A?displayProperty=fullName> method.  \\n  \\n You can also use this method on a managed object to obtain an interface pointer to the [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md) for the object.\"\n  example:\n  - \"The following example demonstrates how to retrieve an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface for a managed object using the <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A> method.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.GetIUnknownForObject-release#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObject-release/cs/example.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.GetIUnknownForObject-release#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObject-release/vb/example.vb#1)]\"\n  syntax:\n    content: public static IntPtr GetIUnknownForObject (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The object whose `IUnknown` interface is requested.\n    return:\n      type: System.IntPtr\n      description: The `IUnknown` pointer for the <code>o</code> parameter.\n  overload: System.Runtime.InteropServices.Marshal.GetIUnknownForObject*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext(System.Object)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext(System.Object)\n  id: GetIUnknownForObjectInContext(System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetIUnknownForObjectInContext(Object)\n  nameWithType: Marshal.GetIUnknownForObjectInContext(Object)\n  fullName: Marshal.GetIUnknownForObjectInContext(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Returns an [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface from a managed object, if the caller is in the same context as that object.\n  remarks: This method is the same as <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A> except that it returns `null` if the caller is not in the same context as the object.\n  example:\n  - \"The following example demonstrates how to retrieve an `IUnknown` interface for a managed object using the <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext%2A> method.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext-release#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext-release/cs/example.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext-release#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext-release/vb/example.vb#1)]\"\n  syntax:\n    content: public static IntPtr GetIUnknownForObjectInContext (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The object whose `IUnknown` interface is requested.\n    return:\n      type: System.IntPtr\n      description: The `IUnknown` pointer for the specified object, or `null` if the caller is not in the same context as the specified object.\n  overload: System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetLastWin32Error\n  commentId: M:System.Runtime.InteropServices.Marshal.GetLastWin32Error\n  id: GetLastWin32Error\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetLastWin32Error()\n  nameWithType: Marshal.GetLastWin32Error()\n  fullName: Marshal.GetLastWin32Error()\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Returns the error code returned by the last unmanaged function that was called using platform invoke that has the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.SetLastError\"></xref> flag set.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A> exposes the Win32 [GetLastError](http://go.microsoft.com/fwlink/?LinkId=148657) function from Kernel32.DLL. This method exists because it is not safe to make a direct platform invoke call to `GetLastError` to obtain this information. If you want to access this error code, you must call <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A> instead of writing your own platform invoke definition for `GetLastError` and calling it. The common language runtime can make internal calls to APIs that overwrite the `GetLastError` maintained by the operating system.  \\n  \\n You can use this method to obtain error codes only if you apply the <xref:System.Runtime.InteropServices.DllImportAttribute?displayProperty=fullName> to the method signature and set the <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError> field to`true`. The process for this varies depending upon the source language used: C# and C++ are `false` by default, but the `Declare` statement in Visual Basic is `true`.\"\n  example:\n  - \"The following example demonstrates calling the <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>method. The example first demonstrates calling the method with no error present and then demonstrates calling the method with an error present.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.GetLastWin32Error#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetLastWin32Error/cs/example.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.GetLastWin32Error#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetLastWin32Error/vb/example.vb#1)]\"\n  syntax:\n    content: public static int GetLastWin32Error ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The last error code set by a call to the Win32 [SetLastError](http://go.microsoft.com/fwlink/?LinkId=148656) function.\n  overload: System.Runtime.InteropServices.Marshal.GetLastWin32Error*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)\n  id: GetManagedThunkForUnmanagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetManagedThunkForUnmanagedMethodPtr(IntPtr, IntPtr, Int32)\n  nameWithType: Marshal.GetManagedThunkForUnmanagedMethodPtr(IntPtr, IntPtr, Int32)\n  fullName: Marshal.GetManagedThunkForUnmanagedMethodPtr(IntPtr, IntPtr, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Gets a pointer to a runtime-generated function that marshals a call from managed to unmanaged code.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr%2A> is exposed for compiler support only.\n  syntax:\n    content: >-\n      [System.Obsolete(\"This method has been deprecated\")]\n\n      public static IntPtr GetManagedThunkForUnmanagedMethodPtr (IntPtr pfnMethodToWrap, IntPtr pbSignature, int cbSignature);\n    parameters:\n    - id: pfnMethodToWrap\n      type: System.IntPtr\n      description: A pointer to the method to marshal.\n    - id: pbSignature\n      type: System.IntPtr\n      description: A pointer to the method signature.\n    - id: cbSignature\n      type: System.Int32\n      description: The number of bytes in <code>pbSignature</code>.\n    return:\n      type: System.IntPtr\n      description: A pointer to the function that will marshal a call from the <code>pfnMethodToWrap</code> parameter to unmanaged code.\n  overload: System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)\n  id: GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetMethodInfoForComSlot(Type, Int32, ComMemberType)\n  nameWithType: Marshal.GetMethodInfoForComSlot(Type, Int32, ComMemberType)\n  fullName: Marshal.GetMethodInfoForComSlot(Type, Int32, ComMemberType)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Retrieves a <xref href=\"System.Reflection.MemberInfo\"></xref> object for the specified virtual function table (v-table or VTBL) slot.\n  remarks: \"The return value may be a <xref:System.Reflection.FieldInfo>, <xref:System.Reflection.MethodInfo>, or <xref:System.Reflection.PropertyInfo> object. The return value depends on the type of managed member that exists in the given COM slot (hence the generalized return type <xref:System.Reflection.MemberInfo> from which all three derive).  \\n  \\n The zero-based slot number that is returned by this method accounts for three [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) and possibly four [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) methods, making the value of the first available slot either 3 or 7. <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A?displayProperty=fullName>. You can use <xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A?displayProperty=fullName> in conjunction with <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A> to pass slots within a specified range.  \\n  \\n The `memberType` parameter is important only on return. It contains the type of the COM member (a regular method or a property accessor) that corresponds to the returned <xref:System.Reflection.MemberInfo> object.\"\n  syntax:\n    content: public static System.Reflection.MemberInfo GetMethodInfoForComSlot (Type t, int slot, ref System.Runtime.InteropServices.ComMemberType memberType);\n    parameters:\n    - id: t\n      type: System.Type\n      description: The type for which the <xref href=\"System.Reflection.MemberInfo\"></xref> is to be retrieved.\n    - id: slot\n      type: System.Int32\n      description: The VTBL slot.\n    - id: memberType\n      type: System.Runtime.InteropServices.ComMemberType\n      description: On successful return, one of the enumeration values that specifies the type of the member.\n    return:\n      type: System.Reflection.MemberInfo\n      description: The object that represents the member at the specified VTBL slot.\n  overload: System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>t</code> is not visible from COM.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)\n  id: GetNativeVariantForObject(System.Object,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetNativeVariantForObject(Object, IntPtr)\n  nameWithType: Marshal.GetNativeVariantForObject(Object, IntPtr)\n  fullName: Marshal.GetNativeVariantForObject(Object, IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Converts an object to a COM VARIANT.\n  remarks: The `pDstNativeVariant` parameter must point to sufficient memory to store the resulting VARIANT. Also, the implementation of this method calls the [VariantInit](https://msdn.microsoft.com/library/ms221402\\(v=vs.85\\).aspx) function on the raw memory that the `pDstNativeVariant` parameter points to.\n  syntax:\n    content: public static void GetNativeVariantForObject (object obj, IntPtr pDstNativeVariant);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object for which to get a COM VARIANT.\n    - id: pDstNativeVariant\n      type: System.IntPtr\n      description: A pointer to receive the VARIANT that corresponds to the <code>obj</code> parameter.\n  overload: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>obj</code> parameter is a generic type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)\n  id: GetNativeVariantForObject``1(``0,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetNativeVariantForObject<T>(T, IntPtr)\n  nameWithType: Marshal.GetNativeVariantForObject<T>(T, IntPtr)\n  fullName: Marshal.GetNativeVariantForObject<T>(T, IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Converts an object of a specified type to a COM VARIANT.\"\n  remarks: The `pDstNativeVariant` parameter must point to sufficient memory to store the resulting VARIANT. Also, the implementation of this method calls [VariantInit](https://msdn.microsoft.com/library/ms221402\\(v=vs.85\\).aspx) function on the raw memory that the `pDstNativeVariant` parameter points to.\n  syntax:\n    content: public static void GetNativeVariantForObject<T> (T obj, IntPtr pDstNativeVariant);\n    parameters:\n    - id: obj\n      type: T\n      description: The object for which to get a COM VARIANT.\n    - id: pDstNativeVariant\n      type: System.IntPtr\n      description: A pointer to receive the VARIANT that corresponds to the <code>obj</code> parameter.\n    typeParameters:\n    - id: T\n      description: The type of the object to convert.\n  overload: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)\n  id: GetObjectForIUnknown(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetObjectForIUnknown(IntPtr)\n  nameWithType: Marshal.GetObjectForIUnknown(IntPtr)\n  fullName: Marshal.GetObjectForIUnknown(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Returns an instance of a type that represents a COM object by a pointer to its [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface.\n  remarks: \"This method wraps `IUnknown` in a managed object. This has the effect of incrementing the reference count of the COM component. The reference count will be decremented when the runtime performs garbage collection on the managed object that represents the COM object.  \\n  \\n The `pUnk` parameter represents an `IUnknown` interface pointer; however, because all COM interfaces derive directly or indirectly from `IUnknown`, you can pass any COM interface to this method. The object returned by <xref:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown%2A> is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md), which the common language runtime manages as it does any other managed object. The type of this wrapper is often a generic `System.__ComObject` type, which is a hidden type used when the wrapper type is ambiguous. You can still make late-bound calls to such a generic type as long as the COM object implements the [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) interface. Likewise, you can cast the returned object to an appropriate COM interface.  \\n  \\n For an object to be wrapped with a specific managed class type (and not a generic wrapper type), you must adhere to the following requirements:  \\n  \\n-   Implement the [IProvideClassInfo](http://go.microsoft.com/fwlink/?LinkID=148012) interface for the COM object.  \\n  \\n-   Register the containing assembly with the [Regasm.exe (Assembly Registration Tool)](~/docs/framework/tools/regasm-exe-assembly-registration-tool.md).  \\n  \\n Alternatively, you can avoid these requirements and still get an object that is wrapped with a specific managed class type by using the <xref:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown%2A?displayProperty=fullName> method.\"\n  syntax:\n    content: public static object GetObjectForIUnknown (IntPtr pUnk);\n    parameters:\n    - id: pUnk\n      type: System.IntPtr\n      description: A pointer to the `IUnknown` interface.\n    return:\n      type: System.Object\n      description: An object that represents the specified unmanaged COM object.\n  overload: System.Runtime.InteropServices.Marshal.GetObjectForIUnknown*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)\n  id: GetObjectForNativeVariant(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetObjectForNativeVariant(IntPtr)\n  nameWithType: Marshal.GetObjectForNativeVariant(IntPtr)\n  fullName: Marshal.GetObjectForNativeVariant(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Converts a COM VARIANT to an object.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> returns a managed object that corresponds to a raw pointer to an unmanaged VARIANT type. The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code.  \\n  \\n <xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject%2A?displayProperty=fullName>.  \\n  \\n When the VARIANT type is VT_ERROR, <xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> returns an object of type `Int32` instead of `UInt32`.\"\n  syntax:\n    content: public static object GetObjectForNativeVariant (IntPtr pSrcNativeVariant);\n    parameters:\n    - id: pSrcNativeVariant\n      type: System.IntPtr\n      description: A pointer to a COM VARIANT.\n    return:\n      type: System.Object\n      description: An object that corresponds to the <code>pSrcNativeVariant</code> parameter.\n  overload: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant*\n  exceptions:\n  - type: System.Runtime.InteropServices.InvalidOleVariantTypeException\n    commentId: T:System.Runtime.InteropServices.InvalidOleVariantTypeException\n    description: <code>pSrcNativeVariant</code> is not a valid VARIANT type.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>pSrcNativeVariant</code> has an unsupported type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)\n  id: GetObjectForNativeVariant``1(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetObjectForNativeVariant<T>(IntPtr)\n  nameWithType: Marshal.GetObjectForNativeVariant<T>(IntPtr)\n  fullName: Marshal.GetObjectForNativeVariant<T>(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Converts a COM VARIANT to an object of a specified type.\"\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%60%601%28System.IntPtr%29> returns a managed object of type `T` that corresponds to a raw pointer to an unmanaged VARIANT type. The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code.  \\n  \\n <xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%60%601%28System.IntPtr%29> provides the opposite functionality of<xref:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject%60%601%28%60%600%2CSystem.IntPtr%29>.\"\n  syntax:\n    content: public static T GetObjectForNativeVariant<T> (IntPtr pSrcNativeVariant);\n    parameters:\n    - id: pSrcNativeVariant\n      type: System.IntPtr\n      description: A pointer to a COM VARIANT.\n    typeParameters:\n    - id: T\n      description: The type to which to convert the COM VARIANT.\n    return:\n      type: T\n      description: An object of the specified type that corresponds to the <code>pSrcNativeVariant</code> parameter.\n  overload: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1*\n  exceptions:\n  - type: System.Runtime.InteropServices.InvalidOleVariantTypeException\n    commentId: T:System.Runtime.InteropServices.InvalidOleVariantTypeException\n    description: <code>pSrcNativeVariant</code> is not a valid VARIANT type.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>pSrcNativeVariant</code> has an unsupported type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)\n  id: GetObjectsForNativeVariants(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetObjectsForNativeVariants(IntPtr, Int32)\n  nameWithType: Marshal.GetObjectsForNativeVariants(IntPtr, Int32)\n  fullName: Marshal.GetObjectsForNativeVariants(IntPtr, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Converts an array of COM [VARIANTs](http://go.microsoft.com/fwlink/?LinkId=148670) to an array of objects.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants%2A> returns an array of managed objects that corresponds to a raw pointer to a C-style array of unmanaged VARIANT types. The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code. The method returns an empty array when the `cVars` parameter is 0.  \\n  \\n The object array (the return value) gets garbage collected as usual. The unmanaged input array or individual VARIANTs in the input array are not freed. Therefore it is your responsibility to free them as appropriate.\"\n  syntax:\n    content: public static object[] GetObjectsForNativeVariants (IntPtr aSrcNativeVariant, int cVars);\n    parameters:\n    - id: aSrcNativeVariant\n      type: System.IntPtr\n      description: A pointer to the first element of an array of COM VARIANTs.\n    - id: cVars\n      type: System.Int32\n      description: The count of COM VARIANTs in <code>aSrcNativeVariant</code>.\n    return:\n      type: System.Object[]\n      description: An object array that corresponds to <code>aSrcNativeVariant</code>.\n  overload: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>cVars</code> is a negative number.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)\n  id: GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetObjectsForNativeVariants<T>(IntPtr, Int32)\n  nameWithType: Marshal.GetObjectsForNativeVariants<T>(IntPtr, Int32)\n  fullName: Marshal.GetObjectsForNativeVariants<T>(IntPtr, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Converts an array of COM VARIANTs to an array of a specified type.\"\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants%60%601%28System.IntPtr%2CSystem.Int32%29> returns an array of `T` that corresponds to a raw pointer to a C-style array of unmanaged VARIANT types. The interopmarshaler performs the identical transformation when exposing a VARIANT type to managed code. The method returns an empty array when the `cVars` parameter is 0.  \\n  \\n The returned array is garbage-collected as usual. The unmanaged input array or individual VARIANTs in the input array are not freed. Therefore, it is your responsibility to free them as appropriate.\"\n  syntax:\n    content: public static T[] GetObjectsForNativeVariants<T> (IntPtr aSrcNativeVariant, int cVars);\n    parameters:\n    - id: aSrcNativeVariant\n      type: System.IntPtr\n      description: A pointer to the first element of an array of COM VARIANTs.\n    - id: cVars\n      type: System.Int32\n      description: The count of COM VARIANTs in <code>aSrcNativeVariant</code>.\n    typeParameters:\n    - id: T\n      description: The type of the array to return.\n    return:\n      type: T[]\n      description: An array of <code>T</code> objects that corresponds to <code>aSrcNativeVariant</code>.\n  overload: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>cVars</code> is a negative number.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)\n  id: GetStartComSlot(System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetStartComSlot(Type)\n  nameWithType: Marshal.GetStartComSlot(Type)\n  fullName: Marshal.GetStartComSlot(Type)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Gets the first slot in the virtual function table (v-table or VTBL) that contains user-defined methods.\n  remarks: This method returns the zero-based v-table number for an interface or a class. When used on a class, the slot number that is returned refers to the class interface for the class. If the class interface is auto-dispatch, this method always returns -1 to indicate that the dispatch-only interface does not expose a v-table to managed clients. You can use <xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A> and <xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A?displayProperty=fullName> in conjunction with <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=fullName> to pass slots within a specified range. For additional information, see [Introducing the Class Interface](http://msdn.microsoft.com/en-us/733c0dd2-12e5-46e6-8de1-39d5b25df024).\n  syntax:\n    content: public static int GetStartComSlot (Type t);\n    parameters:\n    - id: t\n      type: System.Type\n      description: A type that represents an interface.\n    return:\n      type: System.Int32\n      description: The first VTBL slot that contains user-defined methods. The first slot is 3 if the interface is based on [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003), and 7 if the interface is based on [IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5).\n  overload: System.Runtime.InteropServices.Marshal.GetStartComSlot*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>t</code> is not visible from COM.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetThreadFromFiberCookie(System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetThreadFromFiberCookie(System.Int32)\n  id: GetThreadFromFiberCookie(System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetThreadFromFiberCookie(Int32)\n  nameWithType: Marshal.GetThreadFromFiberCookie(Int32)\n  fullName: Marshal.GetThreadFromFiberCookie(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Converts a fiber cookie into the corresponding <xref href=\"System.Threading.Thread\"></xref> instance.\n  remarks: Fiber cookies are opaque tokens that are used by the host when alerting the common language runtime to its fiber-scheduling decisions. They consist of a stack and register context.\n  syntax:\n    content: >-\n      [System.Obsolete(\"This method has been deprecated\")]\n\n      public static System.Threading.Thread GetThreadFromFiberCookie (int cookie);\n    parameters:\n    - id: cookie\n      type: System.Int32\n      description: An integer that represents a fiber cookie.\n    return:\n      type: System.Threading.Thread\n      description: A thread that corresponds to the <code>cookie</code> parameter.\n  overload: System.Runtime.InteropServices.Marshal.GetThreadFromFiberCookie*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>cookie</code> parameter is 0.\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)\n  id: GetTypedObjectForIUnknown(System.IntPtr,System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetTypedObjectForIUnknown(IntPtr, Type)\n  nameWithType: Marshal.GetTypedObjectForIUnknown(IntPtr, Type)\n  fullName: Marshal.GetTypedObjectForIUnknown(IntPtr, Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: Returns a managed object of a specified type that represents a COM object.\n  remarks: \"The `t` parameter must be either a COM-imported type or a subtype of a COM-imported type. In addition, `t` must be a type whose metadata was imported by the [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool. This type must be a class and not an associated coclass interface, which carries the name of the COM class. For example, if Tlbimp.exe imports `Myclass` as a class called `MyclassClass` and as a coclass interface called `Myclass`, you must use `MyclassClass` (not `Myclass`) with this method. For additional information about imported classes and coclass interfaces, see [Imported Type Conversion](http://msdn.microsoft.com/en-us/cb1ee67d-8ef0-4e40-b2a5-13714b9f33c3).  \\n  \\n If an object has already been obtained for the `pUnk` parameter, `t` is ignored and the existing object is returned. `pUnk` represents an[IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface pointer; however, because all COM interfaces derive directly or indirectly from `IUnknown`, you can pass any COM interface to this method. The object returned by <xref:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown%2A> is a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW), which the common language runtime manages as it does any other managed object.\"\n  syntax:\n    content: public static object GetTypedObjectForIUnknown (IntPtr pUnk, Type t);\n    parameters:\n    - id: pUnk\n      type: System.IntPtr\n      description: A pointer to the `IUnknown` interface of the unmanaged object.\n    - id: t\n      type: System.Type\n      description: The type of the requested managed class.\n    return:\n      type: System.Object\n      description: An instance of the class corresponding to the <xref href=\"System.Type\"></xref> object that represents the requested unmanaged COM object.\n  overload: System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>t</code> is not attributed with <xref href=\\\"System.Runtime.InteropServices.ComImportAttribute\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>t</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] type.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo(System.IntPtr)\n  id: GetTypeForITypeInfo(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetTypeForITypeInfo(IntPtr)\n  nameWithType: Marshal.GetTypeForITypeInfo(IntPtr)\n  fullName: Marshal.GetTypeForITypeInfo(IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Converts an unmanaged [ITypeInfo](http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680) object into a managed <xref href=\"System.Type\"></xref> object.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo%2A> returns a <xref:System.Type?displayProperty=fullName> instance that is based on the original type. You can apply the <xref:System.Runtime.InteropServices.MarshalAsAttribute?displayProperty=fullName> to replace standard interop marshaling behavior with this custom marshaler. The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool uses the custom marshaler to translate `ITypeInfo` parameters to <xref:System.Type?displayProperty=fullName> parameters. However, if you obtain an `ITypeInfo` interface by some means other than Tlbimp.exe, you can use <xref:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo%2A> to manually perform the same translation.\n  syntax:\n    content: public static Type GetTypeForITypeInfo (IntPtr piTypeInfo);\n    parameters:\n    - id: piTypeInfo\n      type: System.IntPtr\n      description: The `ITypeInfo` interface to marshal.\n    return:\n      type: System.Type\n      description: A managed type that represents the unmanaged `ITypeInfo` object.\n  overload: System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)\n  id: GetTypeFromCLSID(System.Guid)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetTypeFromCLSID(Guid)\n  nameWithType: Marshal.GetTypeFromCLSID(Guid)\n  fullName: Marshal.GetTypeFromCLSID(Guid)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Returns the type associated with the specified class identifier (CLSID).\n  syntax:\n    content: public static Type GetTypeFromCLSID (Guid clsid);\n    parameters:\n    - id: clsid\n      type: System.Guid\n      description: The CLSID of the type to return.\n    return:\n      type: System.Type\n      description: '`System.__ComObject` regardless of whether the CLSID is valid.'\n  overload: System.Runtime.InteropServices.Marshal.GetTypeFromCLSID*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.UCOMITypeInfo)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.UCOMITypeInfo)\n  id: GetTypeInfoName(System.Runtime.InteropServices.UCOMITypeInfo)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetTypeInfoName(UCOMITypeInfo)\n  nameWithType: Marshal.GetTypeInfoName(UCOMITypeInfo)\n  fullName: Marshal.GetTypeInfoName(UCOMITypeInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Retrieves the name of the type represented by an [ITypeInfo](http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680) object.\n  remarks: You can also retrieve the name of the type represented by an `ITypeInfo` object by calling the <xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName> method and passing -1 for its first parameter.\n  syntax:\n    content: >-\n      [System.Obsolete]\n\n      public static string GetTypeInfoName (System.Runtime.InteropServices.UCOMITypeInfo pTI);\n    parameters:\n    - id: pTI\n      type: System.Runtime.InteropServices.UCOMITypeInfo\n      description: An object that represents an `ITypeInfo` pointer.\n    return:\n      type: System.String\n      description: The name of the type that the <code>pTI</code> parameter points to.\n  overload: System.Runtime.InteropServices.Marshal.GetTypeInfoName*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)\n  id: GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetTypeInfoName(ITypeInfo)\n  nameWithType: Marshal.GetTypeInfoName(ITypeInfo)\n  fullName: Marshal.GetTypeInfoName(ITypeInfo)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Retrieves the name of the type represented by an [ITypeInfo](http://msdn.microsoft.com/en-us/f3356463-3373-4279-bae1-953378aa2680) object.\n  remarks: You can also retrieve the name of the type represented by an `ITypeInfo` by calling the <xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName> method and passing -1 for its first parameter.\n  syntax:\n    content: public static string GetTypeInfoName (System.Runtime.InteropServices.ComTypes.ITypeInfo typeInfo);\n    parameters:\n    - id: typeInfo\n      type: System.Runtime.InteropServices.ComTypes.ITypeInfo\n      description: An object that represents an `ITypeInfo` pointer.\n    return:\n      type: System.String\n      description: The name of the type that the <code>typeInfo</code> parameter points to.\n  overload: System.Runtime.InteropServices.Marshal.GetTypeInfoName*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>typeInfo</code> parameter is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.ComTypes.ITypeLib)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.ComTypes.ITypeLib)\n  id: GetTypeLibGuid(System.Runtime.InteropServices.ComTypes.ITypeLib)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetTypeLibGuid(ITypeLib)\n  nameWithType: Marshal.GetTypeLibGuid(ITypeLib)\n  fullName: Marshal.GetTypeLibGuid(ITypeLib)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Retrieves the library identifier (LIBID) of a type library.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> extracts the LIBID directly from an existing type library. This action differs from that of the <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A?displayProperty=fullName> method, which calculates what the LIBID should be based on the current assembly.  \\n  \\n For more information about library identifiers, see [Exported Assembly Conversion](http://msdn.microsoft.com/en-us/3fffd8db-240f-4fde-a558-a5bcc01e1a86).\"\n  syntax:\n    content: public static Guid GetTypeLibGuid (System.Runtime.InteropServices.ComTypes.ITypeLib typelib);\n    parameters:\n    - id: typelib\n      type: System.Runtime.InteropServices.ComTypes.ITypeLib\n      description: The type library whose LIBID is to be retrieved.\n    return:\n      type: System.Guid\n      description: The LIBID of the specified type library.\n  overload: System.Runtime.InteropServices.Marshal.GetTypeLibGuid*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.UCOMITypeLib)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.UCOMITypeLib)\n  id: GetTypeLibGuid(System.Runtime.InteropServices.UCOMITypeLib)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetTypeLibGuid(UCOMITypeLib)\n  nameWithType: Marshal.GetTypeLibGuid(UCOMITypeLib)\n  fullName: Marshal.GetTypeLibGuid(UCOMITypeLib)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Retrieves the library identifier (LIBID) of a type library.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> extracts the LIBID directly from an existing type library. This action differs from that of the <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A?displayProperty=fullName> method, which calculates what the LIBID should be based on the current assembly.  \\n  \\n For more information about library identifiers, see [Exported Assembly Conversion](http://msdn.microsoft.com/en-us/3fffd8db-240f-4fde-a558-a5bcc01e1a86).\"\n  syntax:\n    content: >-\n      [System.Obsolete]\n\n      public static Guid GetTypeLibGuid (System.Runtime.InteropServices.UCOMITypeLib pTLB);\n    parameters:\n    - id: pTLB\n      type: System.Runtime.InteropServices.UCOMITypeLib\n      description: The type library whose LIBID is to be retrieved.\n    return:\n      type: System.Guid\n      description: The LIBID of the type library that the <code>pTLB</code> parameter points to.\n  overload: System.Runtime.InteropServices.Marshal.GetTypeLibGuid*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly(System.Reflection.Assembly)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly(System.Reflection.Assembly)\n  id: GetTypeLibGuidForAssembly(System.Reflection.Assembly)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetTypeLibGuidForAssembly(Assembly)\n  nameWithType: Marshal.GetTypeLibGuidForAssembly(Assembly)\n  fullName: Marshal.GetTypeLibGuidForAssembly(Assembly)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Retrieves the library identifier (LIBID) that is assigned to a type library when it was exported from the specified assembly.\n  remarks: \"When assemblies are exported to type libraries, the type library is assigned a LIBID. You can set the LIBID explicitly by applying the <xref:System.Runtime.InteropServices.GuidAttribute?displayProperty=fullName> at the assembly level, or it can be generated automatically. The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool calculates a LIBID value based on the identity of the assembly. <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> returns the LIBID that is associated with the <xref:System.Runtime.InteropServices.GuidAttribute>, if the attribute is applied. Otherwise, <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A> returns the calculated value. Alternatively, you can use the <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> method to extract the actual LIBID from an existing type library.  \\n  \\n See the [Exported Assembly Conversion](http://msdn.microsoft.com/en-us/3fffd8db-240f-4fde-a558-a5bcc01e1a86) topic for more information about library identifiers.\"\n  syntax:\n    content: public static Guid GetTypeLibGuidForAssembly (System.Reflection.Assembly asm);\n    parameters:\n    - id: asm\n      type: System.Reflection.Assembly\n      description: The assembly from which the type library was exported.\n    return:\n      type: System.Guid\n      description: The LIBID that is assigned to a type library when it is exported from the specified assembly.\n  overload: System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asm</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.ComTypes.ITypeLib)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.ComTypes.ITypeLib)\n  id: GetTypeLibLcid(System.Runtime.InteropServices.ComTypes.ITypeLib)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetTypeLibLcid(ITypeLib)\n  nameWithType: Marshal.GetTypeLibLcid(ITypeLib)\n  fullName: Marshal.GetTypeLibLcid(ITypeLib)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Retrieves the LCID of a type library.\n  syntax:\n    content: public static int GetTypeLibLcid (System.Runtime.InteropServices.ComTypes.ITypeLib typelib);\n    parameters:\n    - id: typelib\n      type: System.Runtime.InteropServices.ComTypes.ITypeLib\n      description: The type library whose LCID is to be retrieved.\n    return:\n      type: System.Int32\n      description: The LCID of the type library that the <code>typelib</code> parameter points to.\n  overload: System.Runtime.InteropServices.Marshal.GetTypeLibLcid*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.UCOMITypeLib)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.UCOMITypeLib)\n  id: GetTypeLibLcid(System.Runtime.InteropServices.UCOMITypeLib)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetTypeLibLcid(UCOMITypeLib)\n  nameWithType: Marshal.GetTypeLibLcid(UCOMITypeLib)\n  fullName: Marshal.GetTypeLibLcid(UCOMITypeLib)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Retrieves the LCID of a type library.\n  syntax:\n    content: >-\n      [System.Obsolete]\n\n      public static int GetTypeLibLcid (System.Runtime.InteropServices.UCOMITypeLib pTLB);\n    parameters:\n    - id: pTLB\n      type: System.Runtime.InteropServices.UCOMITypeLib\n      description: The type library whose LCID is to be retrieved.\n    return:\n      type: System.Int32\n      description: The LCID of the type library that the <code>pTLB</code> parameter points to.\n  overload: System.Runtime.InteropServices.Marshal.GetTypeLibLcid*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.ComTypes.ITypeLib)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.ComTypes.ITypeLib)\n  id: GetTypeLibName(System.Runtime.InteropServices.ComTypes.ITypeLib)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetTypeLibName(ITypeLib)\n  nameWithType: Marshal.GetTypeLibName(ITypeLib)\n  fullName: Marshal.GetTypeLibName(ITypeLib)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Retrieves the name of a type library.\n  remarks: \"The name returned by this method is the identifier used with the library statement, such as ADODB for the Microsoft ADO type library. The name is not a file name.  \\n  \\n You can also retrieve the type library name by calling the <xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName> method and passing -1 for its first parameter.\"\n  syntax:\n    content: public static string GetTypeLibName (System.Runtime.InteropServices.ComTypes.ITypeLib typelib);\n    parameters:\n    - id: typelib\n      type: System.Runtime.InteropServices.ComTypes.ITypeLib\n      description: The type library whose name is to be retrieved.\n    return:\n      type: System.String\n      description: The name of the type library that the <code>typelib</code> parameter points to.\n  overload: System.Runtime.InteropServices.Marshal.GetTypeLibName*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>typelib</code> parameter is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.UCOMITypeLib)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.UCOMITypeLib)\n  id: GetTypeLibName(System.Runtime.InteropServices.UCOMITypeLib)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetTypeLibName(UCOMITypeLib)\n  nameWithType: Marshal.GetTypeLibName(UCOMITypeLib)\n  fullName: Marshal.GetTypeLibName(UCOMITypeLib)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Retrieves the name of a type library.\n  remarks: \"The name returned by this method is the identifier used with the library statement, such as ADODB for the Microsoft ADO type library. The name is not a file name.  \\n  \\n You can also retrieve the type library name by calling the<xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName> method and passing -1 for its first parameter.\"\n  syntax:\n    content: >-\n      [System.Obsolete]\n\n      public static string GetTypeLibName (System.Runtime.InteropServices.UCOMITypeLib pTLB);\n    parameters:\n    - id: pTLB\n      type: System.Runtime.InteropServices.UCOMITypeLib\n      description: The type library whose name is to be retrieved.\n    return:\n      type: System.String\n      description: The name of the type library that the <code>pTLB</code> parameter points to.\n  overload: System.Runtime.InteropServices.Marshal.GetTypeLibName*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetTypeLibVersionForAssembly(System.Reflection.Assembly,System.Int32@,System.Int32@)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeLibVersionForAssembly(System.Reflection.Assembly,System.Int32@,System.Int32@)\n  id: GetTypeLibVersionForAssembly(System.Reflection.Assembly,System.Int32@,System.Int32@)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetTypeLibVersionForAssembly(Assembly, Int32, Int32)\n  nameWithType: Marshal.GetTypeLibVersionForAssembly(Assembly, Int32, Int32)\n  fullName: Marshal.GetTypeLibVersionForAssembly(Assembly, Int32, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Retrieves the version number of a type library that will be exported from the specified assembly.\n  remarks: \"Before exporting an assembly by using <xref:System.Runtime.InteropServices.TypeLibExporterFlags> with the `CallerResolvedReferences` value, you can use this method to retrieve the type library version from the assembly.  \\n  \\n If you do not apply the <xref:System.Runtime.InteropServices.TypeLibVersionAttribute> attribute to an exported assembly to explicitly control the version number of the generated type library, the type library will have the same version number as the assembly.\"\n  syntax:\n    content: public static void GetTypeLibVersionForAssembly (System.Reflection.Assembly inputAssembly, out int majorVersion, out int minorVersion);\n    parameters:\n    - id: inputAssembly\n      type: System.Reflection.Assembly\n      description: A managed assembly.\n    - id: majorVersion\n      type: System.Int32\n      description: The major version number.\n    - id: minorVersion\n      type: System.Int32\n      description: The minor version number.\n  overload: System.Runtime.InteropServices.Marshal.GetTypeLibVersionForAssembly*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>inputAssembly</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)\n  id: GetUniqueObjectForIUnknown(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetUniqueObjectForIUnknown(IntPtr)\n  nameWithType: Marshal.GetUniqueObjectForIUnknown(IntPtr)\n  fullName: Marshal.GetUniqueObjectForIUnknown(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Creates a unique [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW) object for a given [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface.\n  remarks: The <xref:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown%2A> method ensures that you receive a unique RCW, because it does not match an `IUnknown` pointer to an existing object. Use this method when you have to create a unique RCW that is not impacted by other code that calls the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method.\n  syntax:\n    content: public static object GetUniqueObjectForIUnknown (IntPtr unknown);\n    parameters:\n    - id: unknown\n      type: System.IntPtr\n      description: A managed pointer to an `IUnknown` interface.\n    return:\n      type: System.Object\n      description: A unique RCW for the specified `IUnknown` interface.\n  overload: System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)\n  id: GetUnmanagedThunkForManagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: GetUnmanagedThunkForManagedMethodPtr(IntPtr, IntPtr, Int32)\n  nameWithType: Marshal.GetUnmanagedThunkForManagedMethodPtr(IntPtr, IntPtr, Int32)\n  fullName: Marshal.GetUnmanagedThunkForManagedMethodPtr(IntPtr, IntPtr, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Gets a pointer to a runtime-generated function that marshals a call from unmanaged to managed code.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr%2A> is exposed for compiler support only.\n  syntax:\n    content: >-\n      [System.Obsolete(\"This method has been deprecated\")]\n\n      public static IntPtr GetUnmanagedThunkForManagedMethodPtr (IntPtr pfnMethodToWrap, IntPtr pbSignature, int cbSignature);\n    parameters:\n    - id: pfnMethodToWrap\n      type: System.IntPtr\n      description: A pointer to the method to marshal.\n    - id: pbSignature\n      type: System.IntPtr\n      description: A pointer to the method signature.\n    - id: cbSignature\n      type: System.Int32\n      description: The number of bytes in <code>pbSignature</code>.\n    return:\n      type: System.IntPtr\n      description: A pointer to a function that will marshal a call from <code>pfnMethodToWrap</code> to managed code.\n  overload: System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.IsComObject(System.Object)\n  commentId: M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)\n  id: IsComObject(System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: IsComObject(Object)\n  nameWithType: Marshal.IsComObject(Object)\n  fullName: Marshal.IsComObject(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Indicates whether a specified object represents a COM object.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.IsComObject%2A> returns `true` if the class type of the instance is attributed with <xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=fullName> or if it derives directly or indirectly from a class attributed with <xref:System.Runtime.InteropServices.ComImportAttribute>. The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool applies this attribute for you when it imports a type library.  \\n  \\n Two other methods also determine whether a specified object represents a COM object, but the requirements for returning `true` differ from this method's requirements. <xref:System.Type.IsImport%2A?displayProperty=fullName> returns `true` if the class (or interface) is attributed with <xref:System.Runtime.InteropServices.ComImportAttribute> directly; it does not return `true` for derived types. <xref:System.Runtime.InteropServices.RegistrationServices.TypeRepresentsComType%2A?displayProperty=fullName> returns `true` if the type is attributed with <xref:System.Runtime.InteropServices.ComImportAttribute> or derives from a type with the same GUID.\"\n  syntax:\n    content: public static bool IsComObject (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The object to check.\n    return:\n      type: System.Boolean\n      description: '`true` if the <code>o</code> parameter is a COM type; otherwise, `false`.'\n  overload: System.Runtime.InteropServices.Marshal.IsComObject*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>o</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)\n  commentId: M:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)\n  id: IsTypeVisibleFromCom(System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: IsTypeVisibleFromCom(Type)\n  nameWithType: Marshal.IsTypeVisibleFromCom(Type)\n  fullName: Marshal.IsTypeVisibleFromCom(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Indicates whether a type is visible to COM clients.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom%2A> enables you to check for COM visibility in one step. Types that are not visible cannot be used from COM. A type is visible if it is `public` and not hidden with the <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName>.\n  syntax:\n    content: public static bool IsTypeVisibleFromCom (Type t);\n    parameters:\n    - id: t\n      type: System.Type\n      description: The type to check for COM visibility.\n    return:\n      type: System.Boolean\n      description: '`true` if the type is visible to COM; otherwise, `false`.'\n  overload: System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.NumParamBytes(System.Reflection.MethodInfo)\n  commentId: M:System.Runtime.InteropServices.Marshal.NumParamBytes(System.Reflection.MethodInfo)\n  id: NumParamBytes(System.Reflection.MethodInfo)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: NumParamBytes(MethodInfo)\n  nameWithType: Marshal.NumParamBytes(MethodInfo)\n  fullName: Marshal.NumParamBytes(MethodInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Calculates the number of bytes in unmanaged memory that are required to hold the parameters for the specified method.\n  remarks: \"The <xref:System.Runtime.InteropServices.Marshal.NumParamBytes%2A> method returns the stack size (in bytes) needed to represent the parameters of a method signature in unmanaged memory.  \\n  \\n Note that the return value of this method is platform-dependent. For example, a signature with a single integer parameter returns a value of 4 on 32-bit platforms and a value of 8 on 64-bit platforms.\"\n  syntax:\n    content: public static int NumParamBytes (System.Reflection.MethodInfo m);\n    parameters:\n    - id: m\n      type: System.Reflection.MethodInfo\n      description: The method to be checked.\n    return:\n      type: System.Int32\n      description: The number of bytes required to represent the method parameters in unmanaged memory.\n  overload: System.Runtime.InteropServices.Marshal.NumParamBytes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>m</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>m</code> parameter is not a <xref href=\"System.Reflection.MethodInfo\"></xref> object.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)\n  commentId: M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)\n  id: OffsetOf(System.Type,System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: OffsetOf(Type, String)\n  nameWithType: Marshal.OffsetOf(Type, String)\n  fullName: Marshal.OffsetOf(Type, String)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Returns the field offset of the unmanaged form of the managed class.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A> provides the offset in terms of the unmanaged structure layout, which does not necessarily correspond to the offset of the managed structure layout. Marshaling the structure can transform the layout and alter the offset. The `t` parameter can be a value type or a formatted reference type (with either a sequential or explicit layout). You can obtain the size of the entire layout by using the <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=fullName> method. For additional information, see [Default Marshaling for Value Types](http://msdn.microsoft.com/en-us/4d9a876c-e05a-40ba-bd85-bd22877f984a).  \\n  \\n> [!NOTE]\\n>  Beginning with the .NET Framework version 2.0, <xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A> may expose private fields.\"\n  syntax:\n    content: public static IntPtr OffsetOf (Type t, string fieldName);\n    parameters:\n    - id: t\n      type: System.Type\n      description: A value type or formatted reference type that specifies the managed class. You must apply the <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute\"></xref> to the class.\n    - id: fieldName\n      type: System.String\n      description: The field within the <code>t</code> parameter.\n    return:\n      type: System.IntPtr\n      description: The offset, in bytes, for the <code>fieldName</code> parameter within the specified class that is declared by platform invoke.\n  overload: System.Runtime.InteropServices.Marshal.OffsetOf*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The class cannot be exported as a structure or the field is nonpublic. Beginning with the .NET Framework version 2.0, the field may be private.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>t</code> parameter is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)\n  commentId: M:System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)\n  id: OffsetOf``1(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: OffsetOf<T>(String)\n  nameWithType: Marshal.OffsetOf<T>(String)\n  fullName: Marshal.OffsetOf<T>(String)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Returns the field offset of the unmanaged form of a specified managed class.\"\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.OffsetOf%60%601%28System.String%29> provides the offset in terms of the unmanaged structure layout, which does not necessarily correspond to the offset of the managed structure layout. Marshaling the structure can transform the layout and alter the offset. The `T` generic type parameter can be a value type or a formatted reference type (with either a sequential or explicit layout). You can obtain the size of the entire layout by using the <xref:System.Runtime.InteropServices.Marshal.SizeOf%60%601%28%60%600%29> method. For additional information, see [Default Marshaling for Value Types](http://msdn.microsoft.com/en-us/4d9a876c-e05a-40ba-bd85-bd22877f984a).  \\n  \\n> [!NOTE]\\n>  Beginning with the .NET Framework version 2.0, <xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A> may expose private fields.\"\n  syntax:\n    content: public static IntPtr OffsetOf<T> (string fieldName);\n    parameters:\n    - id: fieldName\n      type: System.String\n      description: The name of the field in the <code>T</code> type.\n    typeParameters:\n    - id: T\n      description: A managed value type or formatted reference type. You must apply the <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute\"></xref> attribute to the class.\n    return:\n      type: System.IntPtr\n      description: The offset, in bytes, for the <code>fieldName</code> parameter within the specified class that is declared by platform invoke.\n  overload: System.Runtime.InteropServices.Marshal.OffsetOf``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)\n  commentId: M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)\n  id: Prelink(System.Reflection.MethodInfo)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: Prelink(MethodInfo)\n  nameWithType: Marshal.Prelink(MethodInfo)\n  fullName: Marshal.Prelink(MethodInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: Executes one-time method setup tasks without calling the method.\n  remarks: \"Setup tasks provide early initialization and are performed automatically when the target method is invoked. First-time tasks include the following:  \\n  \\n-   Verifying that the platform invoke metadata is correctly formatted.  \\n  \\n-   Verifying that all the managed types are valid parameters of platform invoke functions.  \\n  \\n-   Locating and loading the unmanaged DLL into the process.  \\n  \\n-   Locating the entry point in the process.  \\n  \\n Calling <xref:System.Runtime.InteropServices.Marshal.Prelink%2A> on a method outside of platform invoke has no effect. To execute setup tasks on all platform invoke methods in a type, use <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A?displayProperty=fullName>.\"\n  syntax:\n    content: public static void Prelink (System.Reflection.MethodInfo m);\n    parameters:\n    - id: m\n      type: System.Reflection.MethodInfo\n      description: The method to be checked.\n  overload: System.Runtime.InteropServices.Marshal.Prelink*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>m</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>m</code> parameter is not a <xref href=\"System.Reflection.MethodInfo\"></xref> object.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)\n  commentId: M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)\n  id: PrelinkAll(System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: PrelinkAll(Type)\n  nameWithType: Marshal.PrelinkAll(Type)\n  fullName: Marshal.PrelinkAll(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: Performs a pre-link check for all methods on a class.\n  remarks: The <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A> method invokes <xref:System.Runtime.InteropServices.Marshal.Prelink%2A?displayProperty=fullName> on every method for a given type. <xref:System.Runtime.InteropServices.Marshal.Prelink%2A> executes one-time method setup tasks without calling each method. You can use <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A> only for platform invoke calls.\n  syntax:\n    content: public static void PrelinkAll (Type c);\n    parameters:\n    - id: c\n      type: System.Type\n      description: The class whose methods are to be checked.\n  overload: System.Runtime.InteropServices.Marshal.PrelinkAll*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>c</code> parameter is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)\n  id: PtrToStringAnsi(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: PtrToStringAnsi(IntPtr)\n  nameWithType: Marshal.PtrToStringAnsi(IntPtr)\n  fullName: Marshal.PtrToStringAnsi(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Copies all characters up to the first null character from an unmanaged ANSI string to a managed <xref href=\"System.String\"></xref>, and widens each ANSI character to Unicode.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=fullName> methods.\n  example:\n  - \"The following example uses the <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> method to create a managed string from an unmanaged `char` array.  \\n  \\n [!code-cpp[Runtime.InteropServices.Marshal.PtrToStringAnsi-IntPtr#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStringAnsi-IntPtr/cpp/sample.cpp#1)]\"\n  syntax:\n    content: public static string PtrToStringAnsi (IntPtr ptr);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The address of the first character of the unmanaged string.\n    return:\n      type: System.String\n      description: A managed string that holds a copy of the unmanaged ANSI string. If <code>ptr</code> is `null`, the method returns a null string.\n  overload: System.Runtime.InteropServices.Marshal.PtrToStringAnsi*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)\n  id: PtrToStringAnsi(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: PtrToStringAnsi(IntPtr, Int32)\n  nameWithType: Marshal.PtrToStringAnsi(IntPtr, Int32)\n  fullName: Marshal.PtrToStringAnsi(IntPtr, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Allocates a managed <xref href=\"System.String\"></xref>, copies a specified number of characters from an unmanaged ANSI string into it, and widens each ANSI character to Unicode.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=fullName> methods.\n  example:\n  - \"The following example uses the <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> method to create a managed string from an unmanaged`char` array.  \\n  \\n [!code-cpp[Runtime.InteropServices.Marshal.PtrToStringAnsi-IntPtr-int#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStringAnsi-IntPtr-int/cpp/sample.cpp#1)]\"\n  syntax:\n    content: public static string PtrToStringAnsi (IntPtr ptr, int len);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The address of the first character of the unmanaged string.\n    - id: len\n      type: System.Int32\n      description: The byte count of the input string to copy.\n    return:\n      type: System.String\n      description: A managed string that holds a copy of the native ANSI string if the value of the <code>ptr</code> parameter is not `null`; otherwise, this method returns `null`.\n  overload: System.Runtime.InteropServices.Marshal.PtrToStringAnsi*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>len</code> is less than zero.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)\n  id: PtrToStringAuto(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: PtrToStringAuto(IntPtr)\n  nameWithType: Marshal.PtrToStringAuto(IntPtr)\n  fullName: Marshal.PtrToStringAuto(IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: Allocates a managed <xref href=\"System.String\"></xref> and copies all characters up to the first null character from a string stored in unmanaged memory into it.\n  remarks: \"If the current platform is Unicode, each ANSI character is widened to a Unicode character and this method calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A>. Otherwise, this method calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A>.  \\n  \\n <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A?displayProperty=fullName> methods.\"\n  syntax:\n    content: public static string PtrToStringAuto (IntPtr ptr);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"For Unicode platforms, the address of the first Unicode character.  \\n  \\n -or-  \\n  \\n For ANSI plaforms, the address of the first ANSI character.\"\n    return:\n      type: System.String\n      description: A managed string that holds a copy of the unmanaged string if the value of the <code>ptr</code> parameter is not `null`; otherwise, this method returns `null`.\n  overload: System.Runtime.InteropServices.Marshal.PtrToStringAuto*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)\n  id: PtrToStringAuto(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: PtrToStringAuto(IntPtr, Int32)\n  nameWithType: Marshal.PtrToStringAuto(IntPtr, Int32)\n  fullName: Marshal.PtrToStringAuto(IntPtr, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: Allocates a managed <xref href=\"System.String\"></xref> and copies the specified number of characters from a string stored in unmanaged memory into it.\n  remarks: \"On Unicode platforms, this method calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A>; on ANSI platforms, it calls <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A>. No transformations are done before these methods are called.  \\n  \\n <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A?displayProperty=fullName>.\"\n  syntax:\n    content: public static string PtrToStringAuto (IntPtr ptr, int len);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"For Unicode platforms, the address of the first Unicode character.  \\n  \\n -or-  \\n  \\n For ANSI plaforms, the address of the first ANSI character.\"\n    - id: len\n      type: System.Int32\n      description: The number of characters to copy.\n    return:\n      type: System.String\n      description: A managed string that holds a copy of the native string if the value of the <code>ptr</code> parameter is not `null`; otherwise, this method returns `null`.\n  overload: System.Runtime.InteropServices.Marshal.PtrToStringAuto*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>len</code> is less than zero.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)\n  id: PtrToStringBSTR(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: PtrToStringBSTR(IntPtr)\n  nameWithType: Marshal.PtrToStringBSTR(IntPtr)\n  fullName: Marshal.PtrToStringBSTR(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Allocates a managed <xref href=\"System.String\"></xref> and copies a [binary string (BSTR)](https://msdn.microsoft.com/library/ms221069\\(v=vs.85\\).aspx) stored in unmanaged memory into it.\n  remarks: \"Call this method only on strings that were allocated with the unmanaged [SysAllocString](https://msdn.microsoft.com/library/ms221458\\\\(v=vs.85\\\\).aspx) and [SysAllocStringLen](https://msdn.microsoft.com/library/ms221639\\\\(v=vs.85\\\\).aspx) functions.  \\n  \\n <xref:System.Runtime.InteropServices.Marshal.PtrToStringBSTR%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToBSTR%2A?displayProperty=fullName> method.\"\n  syntax:\n    content: public static string PtrToStringBSTR (IntPtr ptr);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The address of the first character of the unmanaged string.\n    return:\n      type: System.String\n      description: A managed string that holds a copy of the unmanaged string.\n  overload: System.Runtime.InteropServices.Marshal.PtrToStringBSTR*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>ptr</code> equals <xref href=\"System.IntPtr.Zero\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)\n  id: PtrToStringUni(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: PtrToStringUni(IntPtr)\n  nameWithType: Marshal.PtrToStringUni(IntPtr)\n  fullName: Marshal.PtrToStringUni(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Allocates a managed <xref href=\"System.String\"></xref> and copies all characters up to the first null character from an unmanaged Unicode string into it.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=fullName> methods.\n  syntax:\n    content: public static string PtrToStringUni (IntPtr ptr);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The address of the first character of the unmanaged string.\n    return:\n      type: System.String\n      description: A managed string that holds a copy of the unmanaged string if the value of the <code>ptr</code> parameter is not `null`; otherwise, this method returns `null`.\n  overload: System.Runtime.InteropServices.Marshal.PtrToStringUni*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)\n  id: PtrToStringUni(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: PtrToStringUni(IntPtr, Int32)\n  nameWithType: Marshal.PtrToStringUni(IntPtr, Int32)\n  fullName: Marshal.PtrToStringUni(IntPtr, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Allocates a managed <xref href=\"System.String\"></xref> and copies a specified number of characters from an unmanaged Unicode string into it.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method creates a copy of the unmanaged string's contents, you must free the original string as appropriate. This method provides the opposite functionality of the <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A?displayProperty=fullName> and <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=fullName> methods.\n  syntax:\n    content: public static string PtrToStringUni (IntPtr ptr, int len);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The address of the first character of the unmanaged string.\n    - id: len\n      type: System.Int32\n      description: The number of Unicode characters to copy.\n    return:\n      type: System.String\n      description: A managed string that holds a copy of the unmanaged string if the value of the <code>ptr</code> parameter is not `null`; otherwise, this method returns `null`.\n  overload: System.Runtime.InteropServices.Marshal.PtrToStringUni*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)\n  id: PtrToStringUTF8(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: PtrToStringUTF8(IntPtr)\n  nameWithType: Marshal.PtrToStringUTF8(IntPtr)\n  fullName: Marshal.PtrToStringUTF8(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: public static string PtrToStringUTF8 (IntPtr ptr);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: ''\n    return:\n      type: System.String\n      description: ''\n  overload: System.Runtime.InteropServices.Marshal.PtrToStringUTF8*\n  exceptions: []\n  version:\n  - netcore-1.1\n  - netcore-2.0\n  monikers:\n  - netcore-1.1\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)\n  id: PtrToStringUTF8(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: PtrToStringUTF8(IntPtr, Int32)\n  nameWithType: Marshal.PtrToStringUTF8(IntPtr, Int32)\n  fullName: Marshal.PtrToStringUTF8(IntPtr, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: public static string PtrToStringUTF8 (IntPtr ptr, int byteLen);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: ''\n    - id: byteLen\n      type: System.Int32\n      description: ''\n    return:\n      type: System.String\n      description: ''\n  overload: System.Runtime.InteropServices.Marshal.PtrToStringUTF8*\n  exceptions: []\n  version:\n  - netcore-1.1\n  - netcore-2.0\n  monikers:\n  - netcore-1.1\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)\n  id: PtrToStructure(System.IntPtr,System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: PtrToStructure(IntPtr, Object)\n  nameWithType: Marshal.PtrToStructure(IntPtr, Object)\n  fullName: Marshal.PtrToStructure(IntPtr, Object)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Marshals data from an unmanaged block of memory to a managed object.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> is often necessary in COM interop and platform invoke when structure parameters are represented as an <xref:System.IntPtr?displayProperty=fullName> value. You cannot use this overload method with value types.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public static void PtrToStructure (IntPtr ptr, object structure);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: A pointer to an unmanaged block of memory.\n    - id: structure\n      type: System.Object\n      description: The object to which the data is to be copied. This must be an instance of a formatted class.\n  overload: System.Runtime.InteropServices.Marshal.PtrToStructure*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"Structure layout is not sequential or explicit.  \\n  \\n -or-  \\n  \\n Structure is a boxed value type.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)\n  id: PtrToStructure(System.IntPtr,System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: PtrToStructure(IntPtr, Type)\n  nameWithType: Marshal.PtrToStructure(IntPtr, Type)\n  fullName: Marshal.PtrToStructure(IntPtr, Type)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> is often necessary in COM interop and platform invoke when structure parameters are represented as an <xref:System.IntPtr?displayProperty=fullName> value. You can pass a value type to this overload method. In this case, the returned object is a boxed instance.\n  example:\n  - \"The following example creates a managed structure, transfers it to unmanaged memory, and then transfers it back to managed memory using the <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> method.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/cs/sample.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/vb/sample.vb#1)]  \\n  \\n The following example demonstrates how to marshal an unmanaged block of memory to a managed structure using the <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> method.  \\n  \\n> [!IMPORTANT]\\n>  This code assumes 32-bit compilation. Before using a 64-bit compiler, replace <xref:System.IntPtr.ToInt32%2A?displayProperty=fullName> with <xref:System.IntPtr.ToInt64%2A?displayProperty=fullName>.  \\n  \\n [!code-cpp[PtrToStructure#1](~/samples/snippets/cpp/VS_Snippets_CLR/PtrToStructure/CPP/pts.cpp#1)]\\n [!code-csharp[PtrToStructure#1](~/samples/snippets/csharp/VS_Snippets_CLR/PtrToStructure/CS/pts.cs#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public static object PtrToStructure (IntPtr ptr, Type structureType);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: A pointer to an unmanaged block of memory.\n    - id: structureType\n      type: System.Type\n      description: The type of object to be created. This object must represent a formatted class or a structure.\n    return:\n      type: System.Object\n      description: A managed object containing the data pointed to by the <code>ptr</code> parameter.\n  overload: System.Runtime.InteropServices.Marshal.PtrToStructure*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>structureType</code> parameter layout is not sequential or explicit.  \\n  \\n -or-  \\n  \\n The <code>structureType</code> parameter is a generic type.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>structureType</code> is `null`.\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: The class specified by <code>structureType</code> does not have an accessible default constructor.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)\n  id: PtrToStructure``1(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: PtrToStructure<T>(IntPtr)\n  nameWithType: Marshal.PtrToStructure<T>(IntPtr)\n  fullName: Marshal.PtrToStructure<T>(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter.\"\n  remarks: <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%60%601%28System.IntPtr%29> is often necessary in COM interop and platform invoke when structure parameters are represented as <xref:System.IntPtr?displayProperty=fullName> values. You can pass a value type to this method overload.\n  syntax:\n    content: public static T PtrToStructure<T> (IntPtr ptr);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: A pointer to an unmanaged block of memory.\n    typeParameters:\n    - id: T\n      description: The type of the object to which the data is to be copied. This must be a formatted class or a structure.\n    return:\n      type: T\n      description: A managed object that contains the data that the <code>ptr</code> parameter points to.\n  overload: System.Runtime.InteropServices.Marshal.PtrToStructure``1*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The layout of <code>T</code> is not sequential or explicit.\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: The class specified by <code>T</code> does not have an accessible default constructor.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)\n  id: PtrToStructure``1(System.IntPtr,``0)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: PtrToStructure<T>(IntPtr, T)\n  nameWithType: Marshal.PtrToStructure<T>(IntPtr, T)\n  fullName: Marshal.PtrToStructure<T>(IntPtr, T)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Marshals data from an unmanaged block of memory to a managed object of the specified type.\"\n  remarks: <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%60%601%28System.IntPtr%2C%60%600%29> is often necessary in COM interop and platform invoke when structure parameters are represented as <xref:System.IntPtr> values. You cannot use this method overload with value types.\n  syntax:\n    content: public static void PtrToStructure<T> (IntPtr ptr, T structure);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: A pointer to an unmanaged block of memory.\n    - id: structure\n      type: T\n      description: The object to which the data is to be copied.\n    typeParameters:\n    - id: T\n      description: The type of <code>structure</code>. This must be a formatted class.\n  overload: System.Runtime.InteropServices.Marshal.PtrToStructure``1*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Structure layout is not sequential or explicit.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)\n  commentId: M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)\n  id: QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: QueryInterface(IntPtr, Guid, IntPtr)\n  nameWithType: Marshal.QueryInterface(IntPtr, Guid, IntPtr)\n  fullName: Marshal.QueryInterface(IntPtr, Guid, IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Requests a pointer to a specified interface from a COM object.\n  remarks: The <xref:System.Runtime.InteropServices.Marshal.QueryInterface%2A> method exposes the [IUnknown::QueryInterface](http://go.microsoft.com/fwlink/?LinkID=144867) method of a COM object, which attempts to obtain a specific interface pointer. Using `QueryInterface` on a COM object is the same as performing a cast operation in managed code. Calling an object with this method causes the reference count to increment on the interface pointer before the pointer is returned. Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer. To obtain an <xref:System.IntPtr> value that represents a [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface pointer, you can call <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=fullName>, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName>.\n  syntax:\n    content: public static int QueryInterface (IntPtr pUnk, ref Guid iid, out IntPtr ppv);\n    parameters:\n    - id: pUnk\n      type: System.IntPtr\n      description: The interface to be queried.\n    - id: iid\n      type: System.Guid\n      description: The interface identifier (IID) of the requested interface.\n    - id: ppv\n      type: System.IntPtr\n      description: When this method returns, contains a reference to the returned interface.\n    return:\n      type: System.Int32\n      description: An HRESULT that indicates the success or failure of the call.\n  overload: System.Runtime.InteropServices.Marshal.QueryInterface*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)\n  id: ReadByte(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ReadByte(IntPtr, Int32)\n  nameWithType: Marshal.ReadByte(IntPtr, Int32)\n  fullName: Marshal.ReadByte(IntPtr, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Reads a single byte at a given offset (or index) from unmanaged memory.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \\n  \\n Reading from unaligned memory locations is supported.\"\n  example:\n  - \"The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> methods.  \\n  \\n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#3)]\\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#3)]  \\n  \\n The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> method to read the value of an unmanaged character.  \\n  \\n [!code-cpp[Runtime.InteropServices.Marshal.ReadByte-IntPtr-int#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte-IntPtr-int/cpp/sample.cpp#1)]\"\n  syntax:\n    content: public static byte ReadByte (IntPtr ptr, int ofs);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The base address in unmanaged memory from which to read.\n    - id: ofs\n      type: System.Int32\n      description: An additional byte offset, which is added to the <code>ptr</code> parameter before reading.\n    return:\n      type: System.Byte\n      description: The byte read from unmanaged memory at the given offset.\n  overload: System.Runtime.InteropServices.Marshal.ReadByte*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)\n  id: ReadByte(System.Object,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ReadByte(Object, Int32)\n  nameWithType: Marshal.ReadByte(Object, Int32)\n  fullName: Marshal.ReadByte(Object, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Reads a single byte at a given offset (or index) from unmanaged memory.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \\n  \\n Reading from unaligned memory locations is supported.\"\n  syntax:\n    content: public static byte ReadByte (object ptr, int ofs);\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: The base address in unmanaged memory of the source object.\n    - id: ofs\n      type: System.Int32\n      description: An additional byte offset, which is added to the <code>ptr</code> parameter before reading.\n    return:\n      type: System.Byte\n      description: The byte read from unmanaged memory at the given offset.\n  overload: System.Runtime.InteropServices.Marshal.ReadByte*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)\n  id: ReadByte(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ReadByte(IntPtr)\n  nameWithType: Marshal.ReadByte(IntPtr)\n  fullName: Marshal.ReadByte(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Reads a single byte from unmanaged memory.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \\n  \\n Reading from unaligned memory locations is supported.\"\n  example:\n  - \"The following example creates a block of unmanaged memory, writes a byte to the unmanaged memory, reads the byte back from unmanaged memory, and then disposes the unmanaged memory.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.ReadByte - WriteByte#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte - WriteByte/cs/example.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.ReadByte - WriteByte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte - WriteByte/vb/example.vb#1)]  \\n  \\n The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> method to read the value of an unmanaged character.  \\n  \\n [!code-cpp[Runtime.InteropServices.Marshal.ReadByte#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte/cpp/sample.cpp#1)]\"\n  syntax:\n    content: public static byte ReadByte (IntPtr ptr);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The address in unmanaged memory from which to read.\n    return:\n      type: System.Byte\n      description: The byte read from unmanaged memory.\n  overload: System.Runtime.InteropServices.Marshal.ReadByte*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"<code>ptr</code> is not a recognized format.  \\n  \\n -or-  \\n  \\n <code>ptr</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>ptr</code> is invalid.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)\n  id: ReadInt16(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ReadInt16(IntPtr)\n  nameWithType: Marshal.ReadInt16(IntPtr)\n  fullName: Marshal.ReadInt16(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Reads a 16-bit signed integer from unmanaged memory.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style `Int16` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \\n  \\n Reading from unaligned memory locations is supported.\"\n  example:\n  - \"The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> methods.  \\n  \\n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]\\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]  \\n  \\n The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> method to read the value of an unmanaged `short` variable.  \\n  \\n [!code-cpp[Runtime.InteropServices.Marshal.ReadInt16#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt16/cpp/sample.cpp#1)]\"\n  syntax:\n    content: public static short ReadInt16 (IntPtr ptr);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The address in unmanaged memory from which to read.\n    return:\n      type: System.Int16\n      description: The 16-bit signed integer read from unmanaged memory.\n  overload: System.Runtime.InteropServices.Marshal.ReadInt16*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"<code>ptr</code> is not a recognized format.  \\n  \\n -or-  \\n  \\n <code>ptr</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>ptr</code> is invalid.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)\n  id: ReadInt16(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ReadInt16(IntPtr, Int32)\n  nameWithType: Marshal.ReadInt16(IntPtr, Int32)\n  fullName: Marshal.ReadInt16(IntPtr, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Reads a 16-bit signed integer at a given offset from unmanaged memory.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \\n  \\n Reading from unaligned memory locations is supported.\"\n  example:\n  - \"The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> methods.  \\n  \\n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]\\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]  \\n  \\n The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> method to read the value of an unmanaged `short` variable.  \\n  \\n [!code-cpp[Runtime.InteropServices.Marshal.ReadInt16-IntPtr-Int#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt16-IntPtr-Int/cpp/sample.cpp#1)]\"\n  syntax:\n    content: public static short ReadInt16 (IntPtr ptr, int ofs);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The base address in unmanaged memory from which to read.\n    - id: ofs\n      type: System.Int32\n      description: An additional byte offset, which is added to the <code>ptr</code> parameter before reading.\n    return:\n      type: System.Int16\n      description: The 16-bit signed integer read from unmanaged memory at the given offset.\n  overload: System.Runtime.InteropServices.Marshal.ReadInt16*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)\n  id: ReadInt16(System.Object,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ReadInt16(Object, Int32)\n  nameWithType: Marshal.ReadInt16(Object, Int32)\n  fullName: Marshal.ReadInt16(Object, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Reads a 16-bit signed integer at a given offset from unmanaged memory.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \\n  \\n Reading from unaligned memory locations is supported.\"\n  syntax:\n    content: public static short ReadInt16 (object ptr, int ofs);\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: The base address in unmanaged memory of the source object.\n    - id: ofs\n      type: System.Int32\n      description: An additional byte offset, which is added to the <code>ptr</code> parameter before reading.\n    return:\n      type: System.Int16\n      description: The 16-bit signed integer read from unmanaged memory at the given offset.\n  overload: System.Runtime.InteropServices.Marshal.ReadInt16*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)\n  id: ReadInt32(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ReadInt32(IntPtr)\n  nameWithType: Marshal.ReadInt32(IntPtr)\n  fullName: Marshal.ReadInt32(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Reads a 32-bit signed integer from unmanaged memory.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style `Int32` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \\n  \\n Reading from unaligned memory locations is supported.\"\n  example:\n  - \"The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> methods.  \\n  \\n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#5)]\\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#5)]  \\n  \\n The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> method to read the value of an unmanaged `int` variable.  \\n  \\n [!code-cpp[Runtime.InteropServices.Marshal.ReadInt32#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt32/cpp/sample.cpp#1)]\"\n  syntax:\n    content: public static int ReadInt32 (IntPtr ptr);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The address in unmanaged memory from which to read.\n    return:\n      type: System.Int32\n      description: The 32-bit signed integer read from unmanaged memory.\n  overload: System.Runtime.InteropServices.Marshal.ReadInt32*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"<code>ptr</code> is not a recognized format.  \\n  \\n -or-  \\n  \\n <code>ptr</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>ptr</code> is invalid.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)\n  id: ReadInt32(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ReadInt32(IntPtr, Int32)\n  nameWithType: Marshal.ReadInt32(IntPtr, Int32)\n  fullName: Marshal.ReadInt32(IntPtr, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Reads a 32-bit signed integer at a given offset from unmanaged memory.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \\n  \\n Reading from unaligned memory locations is supported.\"\n  example:\n  - \"The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A>methods.  \\n  \\n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#5)]\\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#5)]  \\n  \\n The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> method to read the value of an unmanaged `int` variable.  \\n  \\n [!code-cpp[Runtime.InteropServices.Marshal.ReadInt32-IntPtr-Int#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt32-IntPtr-Int/cpp/sample.cpp#1)]\"\n  syntax:\n    content: public static int ReadInt32 (IntPtr ptr, int ofs);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The base address in unmanaged memory from which to read.\n    - id: ofs\n      type: System.Int32\n      description: An additional byte offset, which is added to the <code>ptr</code> parameter before reading.\n    return:\n      type: System.Int32\n      description: The 32-bit signed integer read from unmanaged memory.\n  overload: System.Runtime.InteropServices.Marshal.ReadInt32*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)\n  id: ReadInt32(System.Object,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ReadInt32(Object, Int32)\n  nameWithType: Marshal.ReadInt32(Object, Int32)\n  fullName: Marshal.ReadInt32(Object, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Reads a 32-bit signed integer at a given offset from unmanaged memory.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \\n  \\n Reading from unaligned memory locations is supported.\"\n  syntax:\n    content: public static int ReadInt32 (object ptr, int ofs);\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: The base address in unmanaged memory of the source object.\n    - id: ofs\n      type: System.Int32\n      description: An additional byte offset, which is added to the <code>ptr</code> parameter before reading.\n    return:\n      type: System.Int32\n      description: The 32-bit signed integer read from unmanaged memory at the given offset.\n  overload: System.Runtime.InteropServices.Marshal.ReadInt32*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)\n  id: ReadInt64(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ReadInt64(IntPtr)\n  nameWithType: Marshal.ReadInt64(IntPtr)\n  fullName: Marshal.ReadInt64(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Reads a 64-bit signed integer from unmanaged memory.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style `Int64` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \\n  \\n Reading from unaligned memory locations is supported.\"\n  example:\n  - \"The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> methods.  \\n  \\n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#6)]\\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#6)]  \\n  \\n The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> method to read the value of an unmanaged `__int64` variable.  \\n  \\n [!code-cpp[Runtime.InteropServices.Marshal.ReadInt64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt64/cpp/sample.cpp#1)]\"\n  syntax:\n    content: public static long ReadInt64 (IntPtr ptr);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The address in unmanaged memory from which to read.\n    return:\n      type: System.Int64\n      description: The 64-bit signed integer read from unmanaged memory.\n  overload: System.Runtime.InteropServices.Marshal.ReadInt64*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"<code>ptr</code> is not a recognized format.  \\n  \\n -or-  \\n  \\n <code>ptr</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>ptr</code> is invalid.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)\n  id: ReadInt64(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ReadInt64(IntPtr, Int32)\n  nameWithType: Marshal.ReadInt64(IntPtr, Int32)\n  fullName: Marshal.ReadInt64(IntPtr, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Reads a 64-bit signed integer at a given offset from unmanaged memory.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \\n  \\n Reading from unaligned memory locations is supported.\"\n  example:\n  - \"The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> methods.  \\n  \\n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#6)]\\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#6)]  \\n  \\n The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> method to read the value of an unmanaged `__int64` variable.  \\n  \\n [!code-cpp[Runtime.InteropServices.Marshal.ReadInt64-IntPtr-Int#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt64-IntPtr-Int/cpp/sample.cpp#1)]\"\n  syntax:\n    content: public static long ReadInt64 (IntPtr ptr, int ofs);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The base address in unmanaged memory from which to read.\n    - id: ofs\n      type: System.Int32\n      description: An additional byte offset, which is added to the <code>ptr</code> parameter before reading.\n    return:\n      type: System.Int64\n      description: The 64-bit signed integer read from unmanaged memory at the given offset.\n  overload: System.Runtime.InteropServices.Marshal.ReadInt64*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)\n  id: ReadInt64(System.Object,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ReadInt64(Object, Int32)\n  nameWithType: Marshal.ReadInt64(Object, Int32)\n  fullName: Marshal.ReadInt64(Object, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Reads a 64-bit signed integer at a given offset from unmanaged memory.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \\n  \\n Reading from unaligned memory locations is supported.\"\n  syntax:\n    content: public static long ReadInt64 (object ptr, int ofs);\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: The base address in unmanaged memory of the source object.\n    - id: ofs\n      type: System.Int32\n      description: An additional byte offset, which is added to the <code>ptr</code> parameter before reading.\n    return:\n      type: System.Int64\n      description: The 64-bit signed integer read from unmanaged memory at the given offset.\n  overload: System.Runtime.InteropServices.Marshal.ReadInt64*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)\n  id: ReadIntPtr(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ReadIntPtr(IntPtr, Int32)\n  nameWithType: Marshal.ReadIntPtr(IntPtr, Int32)\n  fullName: Marshal.ReadIntPtr(IntPtr, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Reads a processor native sized integer at a given offset from unmanaged memory.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \\n  \\n Reading from unaligned memory locations is supported.\"\n  example:\n  - \"The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> methods.  \\n  \\n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#2)]\\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#2)]\"\n  syntax:\n    content: public static IntPtr ReadIntPtr (IntPtr ptr, int ofs);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The base address in unmanaged memory from which to read.\n    - id: ofs\n      type: System.Int32\n      description: An additional byte offset, which is added to the <code>ptr</code> parameter before reading.\n    return:\n      type: System.IntPtr\n      description: The integer read from unmanaged memory at the given offset.\n  overload: System.Runtime.InteropServices.Marshal.ReadIntPtr*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)\n  id: ReadIntPtr(System.Object,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ReadIntPtr(Object, Int32)\n  nameWithType: Marshal.ReadIntPtr(Object, Int32)\n  fullName: Marshal.ReadIntPtr(Object, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Reads a processor native sized integer from unmanaged memory.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \\n  \\n Reading from unaligned memory locations is supported.\"\n  syntax:\n    content: public static IntPtr ReadIntPtr (object ptr, int ofs);\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: The base address in unmanaged memory of the source object.\n    - id: ofs\n      type: System.Int32\n      description: An additional byte offset, which is added to the <code>ptr</code> parameter before reading.\n    return:\n      type: System.IntPtr\n      description: The integer read from unmanaged memory at the given offset.\n  overload: System.Runtime.InteropServices.Marshal.ReadIntPtr*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)\n  id: ReadIntPtr(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ReadIntPtr(IntPtr)\n  nameWithType: Marshal.ReadIntPtr(IntPtr)\n  fullName: Marshal.ReadIntPtr(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Reads a processor native-sized integer from unmanaged memory.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> has an implied offset of 0. This method enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before reading its element values.  \\n  \\n Reading from unaligned memory locations is supported.\"\n  example:\n  - \"The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> methods.  \\n  \\n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#2)]\\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#2)]\"\n  syntax:\n    content: public static IntPtr ReadIntPtr (IntPtr ptr);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The address in unmanaged memory from which to read.\n    return:\n      type: System.IntPtr\n      description: The integer read from unmanaged memory. A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.\n  overload: System.Runtime.InteropServices.Marshal.ReadIntPtr*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"<code>ptr</code> is not a recognized format.  \\n  \\n -or-  \\n  \\n <code>ptr</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>ptr</code> is invalid.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)\n  id: ReAllocCoTaskMem(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ReAllocCoTaskMem(IntPtr, Int32)\n  nameWithType: Marshal.ReAllocCoTaskMem(IntPtr, Int32)\n  fullName: Marshal.ReAllocCoTaskMem(IntPtr, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Resizes a block of memory previously allocated with <xref href=\"System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\"></xref>.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A> is one of two memory reallocation methods in the <xref:System.Runtime.InteropServices.Marshal> class. (<xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A> is the other.) The beginning of the reallocated memory content is the same as the original content; however, the entire memory block can be in a different location. This method exposes the COM [CoTaskMemRealloc](http://go.microsoft.com/fwlink/?LinkId=148778) function, which is referred to as the COM task memory allocator.\n  syntax:\n    content: public static IntPtr ReAllocCoTaskMem (IntPtr pv, int cb);\n    parameters:\n    - id: pv\n      type: System.IntPtr\n      description: A pointer to memory allocated with <xref href=\"System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\"></xref>.\n    - id: cb\n      type: System.Int32\n      description: The new size of the allocated block.\n    return:\n      type: System.IntPtr\n      description: An integer representing the address of the reallocated block of memory. This memory must be released with <xref href=\"System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\"></xref>.\n  overload: System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem*\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory to satisfy the request.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)\n  id: ReAllocHGlobal(System.IntPtr,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ReAllocHGlobal(IntPtr, IntPtr)\n  nameWithType: Marshal.ReAllocHGlobal(IntPtr, IntPtr)\n  fullName: Marshal.ReAllocHGlobal(IntPtr, IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Resizes a block of memory previously allocated with <xref href=\"System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\"></xref>.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A> is one of two memory reallocation API methods in the <xref:System.Runtime.InteropServices.Marshal> class. (<xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A?displayProperty=fullName> is the other.)  \\n  \\n This method exposes the Win32 [GlobalReAlloc](http://go.microsoft.com/fwlink/?LinkId=148780) function from Kernel32.dll. The returned pointer can differ from the original. If it is different, the contents of the original memory block have been copied to the new block, and the original memory block has been freed.\"\n  syntax:\n    content: public static IntPtr ReAllocHGlobal (IntPtr pv, IntPtr cb);\n    parameters:\n    - id: pv\n      type: System.IntPtr\n      description: A pointer to memory allocated with <xref href=\"System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\"></xref>.\n    - id: cb\n      type: System.IntPtr\n      description: The new size of the allocated block. This is not a pointer; it is the byte count you are requesting, cast to type <xref href=\"System.IntPtr\"></xref>. If you pass a pointer, it is treated as a size.\n    return:\n      type: System.IntPtr\n      description: A pointer to the reallocated memory. This memory must be released using <xref href=\"System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\"></xref>.\n  overload: System.Runtime.InteropServices.Marshal.ReAllocHGlobal*\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory to satisfy the request.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.Release(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)\n  id: Release(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: Release(IntPtr)\n  nameWithType: Marshal.Release(IntPtr)\n  fullName: Marshal.Release(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Decrements the reference count on the specified interface.\n  remarks: \"The common language runtime manages the reference count of a COM object for you, making it unnecessary to use this method directly. Use this value only for testing purposes. In rare cases, such as testing a custom marshaler, you might find it necessary to manipulate an object's lifetime manually. Only programs that call <xref:System.Runtime.InteropServices.Marshal.AddRef%2A?displayProperty=fullName> should call <xref:System.Runtime.InteropServices.Marshal.Release%2A>. Calling <xref:System.Runtime.InteropServices.Marshal.Release%2A> after the reference count has reached zero causes undefined behavior.  \\n  \\n You can call <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=fullName>, <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName> to obtain an <xref:System.IntPtr> value that represents a [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface pointer to release. You can also use these methods and the <xref:System.Runtime.InteropServices.Marshal.Release%2A> method on managed objects to release the COM interfaces represented by the managed object's [COM Callable Wrapper](~/docs/framework/interop/com-callable-wrapper.md).\"\n  example:\n  - \"The following example demonstrates how to retrieve an `IUnknown` interface for a managed object using the <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A> method. The example then releases the interface pointer by calling the <xref:System.Runtime.InteropServices.Marshal.Release%2A> method.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.GetIUnknownForObject-release#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObject-release/cs/example.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.GetIUnknownForObject-release#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObject-release/vb/example.vb#1)]\"\n  syntax:\n    content: public static int Release (IntPtr pUnk);\n    parameters:\n    - id: pUnk\n      type: System.IntPtr\n      description: The interface to release.\n    return:\n      type: System.Int32\n      description: The new value of the reference count on the interface specified by the <code>pUnk</code> parameter.\n  overload: System.Runtime.InteropServices.Marshal.Release*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)\n  id: ReleaseComObject(System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ReleaseComObject(Object)\n  nameWithType: Marshal.ReleaseComObject(Object)\n  fullName: Marshal.ReleaseComObject(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Decrements the reference count of the [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW) associated with the specified COM object.\n  remarks: \"This method is used to explicitly control the lifetime of a COM object used from managed code. You should use this method to free the underlying COM object that holds references to resources in a timely manner or when objects must be freed in a specific order.  \\n  \\n Every time a COM interface pointer enters the common language runtime (CLR), it is wrapped in an RCW.  \\n  \\n The RCW has a reference count that is incremented every time a COM interface pointer is mapped to it. The <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method decrements the reference count of an RCW. When the reference count reaches zero, the runtime releases all its references on the unmanaged COM object, and throws a <xref:System.NullReferenceException?displayProperty=fullName> if you attempt to use the object further. If the same COM interface is passed more than one time from unmanaged to managed code, the reference count on the wrapper is incremented every time, and calling <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> returns the number of remaining references.  \\n  \\n This method enables you to force an RCW reference count release so that it occurs precisely when you want it to. However, improper use of <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> may cause your application to fail, or may cause an access violation.  \\n  \\n Consider a scenario in which managed code in an application domain is holding onto an RCW that represents a COM component. If you call the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method on the RCW, the managed code will be unable to access the RCW and will raise an <xref:System.Runtime.InteropServices.InvalidComObjectException> exception.  \\n  \\n A more serious error may occur if a call to the RCW is executing when the RCW is released. In this case, there is a good chance that the thread making the call will cause an access violation. However, process memory may become corrupted, and the process may continue to run until it fails for reasons that are very difficult to debug.  \\n  \\n This risk is compounded when the COM component that is being used is a singleton, for the following reason: The CLR activates COM components by calling the COM [CoCreateInstance](http://go.microsoft.com/fwlink/?LinkID=142894) function, which returns the same interface pointer every time it is called for singleton COM components. Thus, separate and independent pieces of managed code in an application domain can be using the same RCW for a singleton COM component, and if either one calls the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method on the COM component, the other will be broken.  \\n  \\n Therefore, use the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> only if it is absolutely required. If you want to call this method to ensure that a COM component is released at a determined time, consider using the <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method instead. <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> will release the underlying COM component regardless of how many times it has re-entered the CLR. The internal reference count of the RCW is incremented by one every time the COM component re-enters the CLR. Therefore, you could call the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method in a loop until the value returned is zero. This achieves the same result as the <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method.\"\n  syntax:\n    content: public static int ReleaseComObject (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The COM object to release.\n    return:\n      type: System.Int32\n      description: The new value of the reference count of the RCW associated with <code>o</code>. This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.\n  overload: System.Runtime.InteropServices.Marshal.ReleaseComObject*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>o</code> is not a valid COM object.\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: <code>o</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ReleaseThreadCache\n  commentId: M:System.Runtime.InteropServices.Marshal.ReleaseThreadCache\n  id: ReleaseThreadCache\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ReleaseThreadCache()\n  nameWithType: Marshal.ReleaseThreadCache()\n  fullName: Marshal.ReleaseThreadCache()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.InteropServices\n  summary: Releases the thread cache.\n  syntax:\n    content: >-\n      [System.Obsolete]\n\n      public static void ReleaseThreadCache ();\n    parameters: []\n  overload: System.Runtime.InteropServices.Marshal.ReleaseThreadCache*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)\n  commentId: M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)\n  id: SecureStringToBSTR(System.Security.SecureString)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: SecureStringToBSTR(SecureString)\n  nameWithType: Marshal.SecureStringToBSTR(SecureString)\n  fullName: Marshal.SecureStringToBSTR(SecureString)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: Allocates an unmanaged [binary string (BSTR)](https://msdn.microsoft.com/library/ms221069\\(v=vs.85\\).aspx) and copies the contents of a managed <xref href=\"System.Security.SecureString\"></xref> object into it.\n  remarks: The <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the `BSTR` when finished by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A> method.\n  syntax:\n    content: public static IntPtr SecureStringToBSTR (System.Security.SecureString s);\n    parameters:\n    - id: s\n      type: System.Security.SecureString\n      description: The managed object to copy.\n    return:\n      type: System.IntPtr\n      description: The address, in unmanaged memory, where the <code>s</code> parameter was copied to, or 0 if a null object was supplied.\n  overload: System.Runtime.InteropServices.Marshal.SecureStringToBSTR*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>s</code> parameter is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The current computer is not running Windows 2000 Service Pack 3 or later.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory available.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)\n  commentId: M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)\n  id: SecureStringToCoTaskMemAnsi(System.Security.SecureString)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: SecureStringToCoTaskMemAnsi(SecureString)\n  nameWithType: Marshal.SecureStringToCoTaskMemAnsi(SecureString)\n  fullName: Marshal.SecureStringToCoTaskMemAnsi(SecureString)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: Copies the contents of a managed <xref href=\"System.Security.SecureString\"></xref> object to a block of memory allocated from the unmanaged COM task allocator.\n  remarks: The <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A>. The characters of the string are copied as ANSI characters.\n  example:\n  - \"The following example uses the <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> method to marshal and decrypt the contents of a <xref:System.Security.SecureString> object to a block of unmanaged memory. It then uses the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A> method to zero out and dispose the unmanaged block.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi/cs/sample.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi/vb/sample.vb#1)]\"\n  syntax:\n    content: public static IntPtr SecureStringToCoTaskMemAnsi (System.Security.SecureString s);\n    parameters:\n    - id: s\n      type: System.Security.SecureString\n      description: The managed object to copy.\n    return:\n      type: System.IntPtr\n      description: The address, in unmanaged memory, where the <code>s</code> parameter was copied to, or 0 if a null object was supplied.\n  overload: System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>s</code> parameter is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The current computer is not running Windows 2000 Service Pack 3 or later.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory available.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)\n  commentId: M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)\n  id: SecureStringToCoTaskMemUnicode(System.Security.SecureString)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: SecureStringToCoTaskMemUnicode(SecureString)\n  nameWithType: Marshal.SecureStringToCoTaskMemUnicode(SecureString)\n  fullName: Marshal.SecureStringToCoTaskMemUnicode(SecureString)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: Copies the contents of a managed <xref href=\"System.Security.SecureString\"></xref> object to a block of memory allocated from the unmanaged COM task allocator.\n  remarks: The <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A> method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A> method. The characters of the string are copied as Unicode characters.\n  example:\n  - \"The following example uses the <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A> method to marshal and decrypt the contents of a <xref:System.Security.SecureString> object to a block of unmanaged memory. It then uses the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A> method to zero out and dispose the unmanaged block.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode/cs/sample.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode/vb/sample.vb#1)]\"\n  syntax:\n    content: public static IntPtr SecureStringToCoTaskMemUnicode (System.Security.SecureString s);\n    parameters:\n    - id: s\n      type: System.Security.SecureString\n      description: The managed object to copy.\n    return:\n      type: System.IntPtr\n      description: The address, in unmanaged memory, where the <code>s</code> parameter was copied to, or 0 if a null object was supplied.\n  overload: System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>s</code> parameter is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The current computer is not running Windows 2000 Service Pack 3 or later.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory available.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)\n  commentId: M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)\n  id: SecureStringToGlobalAllocAnsi(System.Security.SecureString)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: SecureStringToGlobalAllocAnsi(SecureString)\n  nameWithType: Marshal.SecureStringToGlobalAllocAnsi(SecureString)\n  fullName: Marshal.SecureStringToGlobalAllocAnsi(SecureString)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: Copies the contents of a managed <xref href=\"System.Security.SecureString\"></xref> into unmanaged memory, converting into ANSI format as it copies.\n  remarks: The <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> method.\n  example:\n  - \"The following example uses the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> method to marshal and decrypt the contents of a <xref:System.Security.SecureString> object to a block of unmanaged memory. It then uses the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> method to zero out and dispose the unmanaged block.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi/CS/sample.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi/VB/sample.vb#1)]\"\n  syntax:\n    content: public static IntPtr SecureStringToGlobalAllocAnsi (System.Security.SecureString s);\n    parameters:\n    - id: s\n      type: System.Security.SecureString\n      description: The managed object to copy.\n    return:\n      type: System.IntPtr\n      description: The address, in unmanaged memory, to where the <code>s</code> parameter was copied, or 0 if a null object was supplied.\n  overload: System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>s</code> parameter is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The current computer is not running Windows 2000 Service Pack 3 or later.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory available.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)\n  commentId: M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)\n  id: SecureStringToGlobalAllocUnicode(System.Security.SecureString)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: SecureStringToGlobalAllocUnicode(SecureString)\n  nameWithType: Marshal.SecureStringToGlobalAllocUnicode(SecureString)\n  fullName: Marshal.SecureStringToGlobalAllocUnicode(SecureString)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: Copies the contents of a managed <xref href=\"System.Security.SecureString\"></xref> object into unmanaged memory.\n  remarks: The <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> method is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> method.\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> method with the unmanaged `LogonUser` function to perform impersonation with the <xref:System.Security.SecureString> class. The example then uses the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> method to zero out and free the unmanaged string reference.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToHGlobalUni#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalUni/CS/sample.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.SecureStringToHGlobalUni#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalUni/VB/sample.vb#1)]\"\n  syntax:\n    content: public static IntPtr SecureStringToGlobalAllocUnicode (System.Security.SecureString s);\n    parameters:\n    - id: s\n      type: System.Security.SecureString\n      description: The managed object to copy.\n    return:\n      type: System.IntPtr\n      description: The address, in unmanaged memory, where <code>s</code> was copied, or 0 if <code>s</code> is a <xref href=\"System.Security.SecureString\"></xref> object whose length is 0.\n  overload: System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>s</code> parameter is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The current computer is not running Windows 2000 Service Pack 3 or later.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory available.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)\n  commentId: M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)\n  id: SetComObjectData(System.Object,System.Object,System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: SetComObjectData(Object, Object, Object)\n  nameWithType: Marshal.SetComObjectData(Object, Object, Object)\n  fullName: Marshal.SetComObjectData(Object, Object, Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: Sets data referenced by the specified key in the specified COM object.\n  remarks: All COM objects wrapped in a [Runtime Callable Wrapper](~/docs/framework/interop/runtime-callable-wrapper.md) (RCW) have an associated hash table, to which <xref:System.Runtime.InteropServices.Marshal.SetComObjectData%2A> adds data. <xref:System.Runtime.InteropServices.Marshal.GetComObjectData%2A?displayProperty=fullName> retrieves data from the hash table. You should never have to call either method from your code.\n  syntax:\n    content: public static bool SetComObjectData (object obj, object key, object data);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The COM object in which to store the data.\n    - id: key\n      type: System.Object\n      description: The key in the internal hash table of the COM object in which to store the data.\n    - id: data\n      type: System.Object\n      description: The data to set.\n    return:\n      type: System.Boolean\n      description: '`true` if the data was set successfully; otherwise, `false`.'\n  overload: System.Runtime.InteropServices.Marshal.SetComObjectData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>obj</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>key</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>obj</code> is not a COM object.  \\n  \\n -or-  \\n  \\n <code>obj</code> is a [!INCLUDE[wrt](~/includes/wrt-md.md)] object.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.SizeOf(System.Object)\n  commentId: M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)\n  id: SizeOf(System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: SizeOf(Object)\n  nameWithType: Marshal.SizeOf(Object)\n  fullName: Marshal.SizeOf(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Returns the unmanaged size of an object in bytes.\n  remarks: \"This method accepts an instance of a structure, which can be a reference type or a boxed value type. The layout must be sequential or explicit.  \\n  \\n The size returned is the size of the unmanaged object. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class.  \\n  \\n You can use the <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A> method to determine how much unmanaged memory to allocate using the <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> and <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A> methods.\"\n  example:\n  - \"The following example creates a managed structure, transfers it to unmanaged memory, and then transfers it back to managed memory. This example uses the <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A> method to determine how much unmanaged memory to allocate.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/cs/sample.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/vb/sample.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public static int SizeOf (object structure);\n    parameters:\n    - id: structure\n      type: System.Object\n      description: The object whose size is to be returned.\n    return:\n      type: System.Int32\n      description: The size of the specified object in unmanaged code.\n  overload: System.Runtime.InteropServices.Marshal.SizeOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>structure</code> parameter is `null`.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.SizeOf(System.Type)\n  commentId: M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)\n  id: SizeOf(System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: SizeOf(Type)\n  nameWithType: Marshal.SizeOf(Type)\n  fullName: Marshal.SizeOf(Type)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Returns the size of an unmanaged type in bytes.\n  remarks: \"You can use this method when you do not have a structure. The layout must be sequential or explicit.  \\n  \\n The size returned is the size of the unmanaged type. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class.\"\n  example:\n  - \"The following example demonstrates calling the <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A> method. This code example is part of a larger example provided for the <xref:System.Runtime.InteropServices.Marshal> class.  \\n  \\n [!code-cpp[Marshal#3](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#3)]\\n [!code-csharp[Marshal#3](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#3)]\\n [!code-vb[Marshal#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#3)]\"\n  syntax:\n    content: public static int SizeOf (Type t);\n    parameters:\n    - id: t\n      type: System.Type\n      description: The type whose size is to be returned.\n    return:\n      type: System.Int32\n      description: The size of the specified type in unmanaged code.\n  overload: System.Runtime.InteropServices.Marshal.SizeOf*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>t</code> parameter is a generic type.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>t</code> parameter is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.SizeOf``1\n  commentId: M:System.Runtime.InteropServices.Marshal.SizeOf``1\n  id: SizeOf``1\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: SizeOf<T>()\n  nameWithType: Marshal.SizeOf<T>()\n  fullName: Marshal.SizeOf<T>()\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Returns the size of an unmanaged type in bytes.\"\n  remarks: \"You can use this method when you do not have a structure. The layout must be sequential or explicit.  \\n  \\n The size returned is the size of the unmanaged type. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class.\"\n  syntax:\n    content: public static int SizeOf<T> ();\n    parameters: []\n    typeParameters:\n    - id: T\n      description: The type whose size is to be returned.\n    return:\n      type: System.Int32\n      description: The size, in bytes, of the type that is specified by the <code>T</code> generic type parameter.\n  overload: System.Runtime.InteropServices.Marshal.SizeOf``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.SizeOf``1(``0)\n  commentId: M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)\n  id: SizeOf``1(``0)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: SizeOf<T>(T)\n  nameWithType: Marshal.SizeOf<T>(T)\n  fullName: Marshal.SizeOf<T>(T)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Returns the unmanaged size of an object of a specified type in bytes.\"\n  remarks: \"This method accepts an instance of a structure, which can be a reference type or a boxed value type. The layout must be sequential or explicit.  \\n  \\n The size returned is the size of the unmanaged object. The unmanaged and managed sizes of an object can differ. For character types, the size is affected by the <xref:System.Runtime.InteropServices.CharSet> value applied to that class.  \\n  \\n You can use the <xref:System.Runtime.InteropServices.Marshal.SizeOf%60%601%28%60%600%29> method to determine how much unmanaged memory to allocate by using the <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> and <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A> methods.\"\n  syntax:\n    content: public static int SizeOf<T> (T structure);\n    parameters:\n    - id: structure\n      type: T\n      description: The object whose size is to be returned.\n    typeParameters:\n    - id: T\n      description: The type of the <code>structure</code> parameter.\n    return:\n      type: System.Int32\n      description: The size, in bytes, of the specified object in unmanaged code.\n  overload: System.Runtime.InteropServices.Marshal.SizeOf``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>structure</code> parameter is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)\n  commentId: M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)\n  id: StringToBSTR(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: StringToBSTR(String)\n  nameWithType: Marshal.StringToBSTR(String)\n  fullName: Marshal.StringToBSTR(String)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Allocates a [BSTR](https://msdn.microsoft.com/library/ms221069.aspx) and copies the contents of a managed <xref href=\"System.String\"></xref> into it.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.StringToBSTR%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the `BSTR` when finished by calling <xref:System.Runtime.InteropServices.Marshal.FreeBSTR%2A?displayProperty=fullName>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringBSTR%2A?displayProperty=fullName>.\n  syntax:\n    content: public static IntPtr StringToBSTR (string s);\n    parameters:\n    - id: s\n      type: System.String\n      description: The managed string to be copied.\n    return:\n      type: System.IntPtr\n      description: An unmanaged pointer to the `BSTR`, or 0 if <code>s</code> is null.\n  overload: System.Runtime.InteropServices.Marshal.StringToBSTR*\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory available.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length for <code>s</code> is out of range.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)\n  commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)\n  id: StringToCoTaskMemAnsi(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: StringToCoTaskMemAnsi(String)\n  nameWithType: Marshal.StringToCoTaskMemAnsi(String)\n  fullName: Marshal.StringToCoTaskMemAnsi(String)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Copies the contents of a managed <xref href=\"System.String\"></xref> to a block of memory allocated from the unmanaged COM task allocator.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=fullName>. The characters of the string are copied as ANSI characters.\n  syntax:\n    content: public static IntPtr StringToCoTaskMemAnsi (string s);\n    parameters:\n    - id: s\n      type: System.String\n      description: A managed string to be copied.\n    return:\n      type: System.IntPtr\n      description: An integer representing a pointer to the block of memory allocated for the string, or 0 if <code>s</code> is `null`.\n  overload: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi*\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory available.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>s</code> parameter exceeds the maximum length allowed by the operating system.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)\n  commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)\n  id: StringToCoTaskMemAuto(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: StringToCoTaskMemAuto(String)\n  nameWithType: Marshal.StringToCoTaskMemAuto(String)\n  fullName: Marshal.StringToCoTaskMemAuto(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: Copies the contents of a managed <xref href=\"System.String\"></xref> to a block of memory allocated from the unmanaged COM task allocator.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A?displayProperty=fullName>.  \\n  \\n The characters of the string are copied as either ANSI or Unicode characters, depending on the operating system where the code is executing. On Windows 98, the characters are copied as ANSI characters. On Windows NT 4.0, Windows 2000, Windows XP, and the Windows Server 2003 family, the characters are copied as Unicode characters.\"\n  syntax:\n    content: public static IntPtr StringToCoTaskMemAuto (string s);\n    parameters:\n    - id: s\n      type: System.String\n      description: A managed string to be copied.\n    return:\n      type: System.IntPtr\n      description: The allocated memory block, or 0 if <code>s</code> is `null`.\n  overload: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto*\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory available.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length for <code>s</code> is out of range.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)\n  commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)\n  id: StringToCoTaskMemUni(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: StringToCoTaskMemUni(String)\n  nameWithType: Marshal.StringToCoTaskMemUni(String)\n  fullName: Marshal.StringToCoTaskMemUni(String)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Copies the contents of a managed <xref href=\"System.String\"></xref> to a block of memory allocated from the unmanaged COM task allocator.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A?displayProperty=fullName>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A?displayProperty=fullName>. The characters of the string are copied as Unicode characters.\n  syntax:\n    content: public static IntPtr StringToCoTaskMemUni (string s);\n    parameters:\n    - id: s\n      type: System.String\n      description: A managed string to be copied.\n    return:\n      type: System.IntPtr\n      description: An integer representing a pointer to the block of memory allocated for the string, or 0 if s is `null`.\n  overload: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>s</code> parameter exceeds the maximum length allowed by the operating system.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory available.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)\n  commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)\n  id: StringToCoTaskMemUTF8(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: StringToCoTaskMemUTF8(String)\n  nameWithType: Marshal.StringToCoTaskMemUTF8(String)\n  fullName: Marshal.StringToCoTaskMemUTF8(String)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: public static IntPtr StringToCoTaskMemUTF8 (string s);\n    parameters:\n    - id: s\n      type: System.String\n      description: ''\n    return:\n      type: System.IntPtr\n      description: ''\n  overload: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8*\n  exceptions: []\n  version:\n  - netcore-1.1\n  - netcore-2.0\n  monikers:\n  - netcore-1.1\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)\n  commentId: M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)\n  id: StringToHGlobalAnsi(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: StringToHGlobalAnsi(String)\n  nameWithType: Marshal.StringToHGlobalAnsi(String)\n  fullName: Marshal.StringToHGlobalAnsi(String)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Copies the contents of a managed <xref href=\"System.String\"></xref> into unmanaged memory, converting into ANSI format as it copies.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>. <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=fullName>.  \\n  \\n This method copies embedded null characters, and includes a terminating null character.\"\n  example:\n  - \"The following example demonstrates how to convert the contents of a managed <xref:System.String> class to unmanaged memory and then dispose of the unmanaged memory when done.  \\n  \\n [!code-cpp[Runtime.InteropServices.Marshal.StringToHGlobalAnsi#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.StringToHGlobalAnsi/CPP/stringtohglobalansi.cpp#1)]\\n [!code-csharp[Runtime.InteropServices.Marshal.StringToHGlobalAnsi#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.StringToHGlobalAnsi/cs/stringtohglobalansi.cs#1)]\"\n  syntax:\n    content: public static IntPtr StringToHGlobalAnsi (string s);\n    parameters:\n    - id: s\n      type: System.String\n      description: A managed string to be copied.\n    return:\n      type: System.IntPtr\n      description: The address, in unmanaged memory, to where <code>s</code> was copied, or 0 if <code>s</code> is `null`.\n  overload: System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi*\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory available.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>s</code> parameter exceeds the maximum length allowed by the operating system.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)\n  commentId: M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)\n  id: StringToHGlobalAuto(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: StringToHGlobalAuto(String)\n  nameWithType: Marshal.StringToHGlobalAuto(String)\n  fullName: Marshal.StringToHGlobalAuto(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: Copies the contents of a managed <xref href=\"System.String\"></xref> into unmanaged memory, converting into ANSI format if required.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A?displayProperty=fullName>.  \\n  \\n This method copies embedded null characters, and includes a terminating null character.\"\n  example:\n  - \"The following example demonstrates how to convert the contents of a managed <xref:System.String> class to unmanaged memory and then dispose of the unmanaged memory when done.  \\n  \\n [!code-cpp[Runtime.InteropServices.Marshal.StringToHGlobalAuto#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.StringToHGlobalAuto/CPP/sample.cpp#1)]\"\n  syntax:\n    content: public static IntPtr StringToHGlobalAuto (string s);\n    parameters:\n    - id: s\n      type: System.String\n      description: A managed string to be copied.\n    return:\n      type: System.IntPtr\n      description: The address, in unmanaged memory, to where the string was copied, or 0 if <code>s</code> is `null`.\n  overload: System.Runtime.InteropServices.Marshal.StringToHGlobalAuto*\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is insufficient memory available.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)\n  commentId: M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)\n  id: StringToHGlobalUni(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: StringToHGlobalUni(String)\n  nameWithType: Marshal.StringToHGlobalUni(String)\n  fullName: Marshal.StringToHGlobalUni(String)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Copies the contents of a managed <xref href=\"System.String\"></xref> into unmanaged memory.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A> is useful for custom marshaling or for use when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>. This method provides the opposite functionality of <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A?displayProperty=fullName>.  \\n  \\n This method copies embedded null characters, and includes a terminating null character.\"\n  syntax:\n    content: public static IntPtr StringToHGlobalUni (string s);\n    parameters:\n    - id: s\n      type: System.String\n      description: A managed string to be copied.\n    return:\n      type: System.IntPtr\n      description: The address, in unmanaged memory, to where the <code>s</code> was copied, or 0 if <code>s</code> is `null`.\n  overload: System.Runtime.InteropServices.Marshal.StringToHGlobalUni*\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: The method could not allocate enough native heap memory.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>s</code> parameter exceeds the maximum length allowed by the operating system.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)\n  commentId: M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)\n  id: StructureToPtr(System.Object,System.IntPtr,System.Boolean)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: StructureToPtr(Object, IntPtr, Boolean)\n  nameWithType: Marshal.StructureToPtr(Object, IntPtr, Boolean)\n  fullName: Marshal.StructureToPtr(Object, IntPtr, Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Marshals data from a managed object to an unmanaged block of memory.\n  remarks: \"If `structure` is a value type, it can be boxed or unboxed. If it is boxed, it is unboxed before copying.  \\n  \\n A formatted class is a reference type whose layout is specified by the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute, as either <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> or <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName>.  \\n  \\n <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> copies the contents of `structure` to the pre-allocated block of memory that the `ptr` parameter points to. If `structure` contains reference types that marshal to COM interface pointers (interfaces, classes without layout, and <xref:System.Object?displayProperty=fullName>), the managed objects are kept alive with reference counts. All other reference types (for example, strings and arrays) are marshaled to copies. To release these managed or unmanaged objects, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A?displayProperty=fullName>method before you free the memory block.  \\n  \\n If you use the <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> method to copy a different instance to the memory block at a later time, specify `true` for `fDeleteOld` to remove reference counts for reference types in the previous instance. Otherwise, the managed reference typesand unmanaged copies are effectively leaked.  \\n  \\n The overall pattern for using <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> is as follows:  \\n  \\n1.  On the first call to the <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> method after a memory block has been allocated, `fDeleteOld` must be `false`, because there are no contents to clear.  \\n  \\n    > [!IMPORTANT]\\n    >  Specify `true` for `fDeleteOld` only if the block contains valid data.  \\n  \\n2.  If you copy a different instance to the memory block, and the object contains reference types, `fDeleteOld` must be `true` to free reference types in the old contents.  \\n  \\n3.  If the object contains reference types, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> method before you free the memory block.  \\n  \\n> [!NOTE]\\n>  To pin an existing structure instead of copying it, use the <xref:System.Runtime.InteropServices.GCHandle?displayProperty=fullName> type to create a pinned handle for the structure. For details on how to pin, see [Copying and Pinning](~/docs/framework/interop/copying-and-pinning.md).\"\n  example:\n  - \"The following example creates a managed structure, transfers it to unmanaged memory using the <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> method, and then transfers it back to managed memory using the <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> method.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/cs/sample.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.PtrToStructure-SizeOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/vb/sample.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public static void StructureToPtr (object structure, IntPtr ptr, bool fDeleteOld);\n    parameters:\n    - id: structure\n      type: System.Object\n      description: A managed object that holds the data to be marshaled. This object must be a structure or an instance of a formatted class.\n    - id: ptr\n      type: System.IntPtr\n      description: A pointer to an unmanaged block of memory, which must be allocated before this method is called.\n    - id: fDeleteOld\n      type: System.Boolean\n      description: '`true` to call the <xref href=\"System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)\"></xref> method on the <code>ptr</code> parameter before this method copies the data. The block must contain valid data. Note that passing `false` when the memory block already contains data can lead to a memory leak.'\n  overload: System.Runtime.InteropServices.Marshal.StructureToPtr*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>structure</code> is a reference type that is not a formatted class.  \\n  \\n -or-  \\n  \\n <code>structure</code> is a generic type.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)\n  commentId: M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)\n  id: StructureToPtr``1(``0,System.IntPtr,System.Boolean)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: StructureToPtr<T>(T, IntPtr, Boolean)\n  nameWithType: Marshal.StructureToPtr<T>(T, IntPtr, Boolean)\n  fullName: Marshal.StructureToPtr<T>(T, IntPtr, Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Marshals data from a managed object of a specified type to an unmanaged block of memory.\"\n  remarks: \"A formatted class is a reference type whose layout is specified by the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute, as either <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> or <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName>.  \\n  \\n <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29> copies the contents of `structure` to the pre-allocated block of memory that the `ptr` parameter points to. If `structure` contains reference types that marshal to COM interface pointers (interfaces, classes without layout, and <xref:System.Object?displayProperty=fullName>), the managed objects are kept alive with reference counts. All other reference types (for example, strings and arrays) are marshaled to copies. To release these managed or unmanaged objects, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%60%601%28System.IntPtr%29> method before you free the memory block.  \\n  \\n If you use the<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29> method to copy a different instance to the memory block at a later time, specify `true` for `fDeleteOld` to remove reference counts for reference types in the previous instance. Otherwise, the managed reference types and unmanaged copies are effectively leaked.  \\n  \\n The overall pattern for using<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29> is as follows:  \\n  \\n1.  On the first call to the<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> method after a memory block has been allocated, `fDeleteOld` must be `false`, because there are no contents to clear.  \\n  \\n    > [!IMPORTANT]\\n    >  Specify `true` for `fDeleteOld` only if the block contains valid data.  \\n  \\n2.  If you copy a different instance to the memory block, and the object contains reference types, `fDeleteOld` must be `true` to free reference types in the old contents.  \\n  \\n3.  If the object contains reference types, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> method before you free the memory block.  \\n  \\n> [!NOTE]\\n>  To pin an existing structure instead of copying it, use the <xref:System.Runtime.InteropServices.GCHandle?displayProperty=fullName> type to create a pinned handle for the structure. For details on how to pin, see [Copying and Pinning](~/docs/framework/interop/copying-and-pinning.md).\"\n  syntax:\n    content: public static void StructureToPtr<T> (T structure, IntPtr ptr, bool fDeleteOld);\n    parameters:\n    - id: structure\n      type: T\n      description: A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class.\n    - id: ptr\n      type: System.IntPtr\n      description: A pointer to an unmanaged block of memory, which must be allocated before this method is called.\n    - id: fDeleteOld\n      type: System.Boolean\n      description: '`true` to call the <xref href=\"System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)\"></xref> method on the <code>ptr</code> parameter before this method copies the data. The block must contain valid data. Note that passing `false` when the memory block already contains data can lead to a memory leak.'\n    typeParameters:\n    - id: T\n      description: The type of the managed object.\n  overload: System.Runtime.InteropServices.Marshal.StructureToPtr``1*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>structure</code> is a reference type that is not a formatted class.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.SystemDefaultCharSize\n  commentId: F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize\n  id: SystemDefaultCharSize\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: SystemDefaultCharSize\n  nameWithType: Marshal.SystemDefaultCharSize\n  fullName: Marshal.SystemDefaultCharSize\n  type: Field\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.\n  remarks: ''\n  example:\n  - \"The following example demonstrates the <xref:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize> field. This code example is part of a larger example provided for the <xref:System.Runtime.InteropServices.Marshal> class.  \\n  \\n [!code-cpp[Marshal#2](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#2)]\\n [!code-csharp[Marshal#2](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#2)]\\n [!code-vb[Marshal#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#2)]\"\n  syntax:\n    content: public static readonly int SystemDefaultCharSize;\n    return:\n      type: System.Int32\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize\n  commentId: F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize\n  id: SystemMaxDBCSCharSize\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: SystemMaxDBCSCharSize\n  nameWithType: Marshal.SystemMaxDBCSCharSize\n  fullName: Marshal.SystemMaxDBCSCharSize\n  type: Field\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system. This field is read-only.\n  remarks: ''\n  example:\n  - \"The following example demonstrates the <xref:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize> field. This code example is part of a larger example provided for the <xref:System.Runtime.InteropServices.Marshal> class.  \\n  \\n [!code-cpp[Marshal#2](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#2)]\\n [!code-csharp[Marshal#2](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#2)]\\n [!code-vb[Marshal#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#2)]\"\n  syntax:\n    content: public static readonly int SystemMaxDBCSCharSize;\n    return:\n      type: System.Int32\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)\n  id: ThrowExceptionForHR(System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ThrowExceptionForHR(Int32)\n  nameWithType: Marshal.ThrowExceptionForHR(Int32)\n  fullName: Marshal.ThrowExceptionForHR(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Throws an exception with a specific failure HRESULT value.\n  remarks: \"This method creates an exception object for the specified failure HRESULT. If the HRESULT is 0 or positive (a success code), the method returns without creating or throwing an exception.  \\n  \\n Note that the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%28System.Int32%29> method returns an exception based on the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\\\(v=vs.85\\\\).aspx) interface of the current thread if one is set. When this happens, the `errorCode` parameter is ignored.  \\n  \\n Some failure HRESULTs map to defined exceptions, whereas others do not. If the HRESULT maps to a defined exception, <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> creates an instance of the exception and throws it. Otherwise, it creates an instance of <xref:System.Runtime.InteropServices.COMException>, initializes the error code field with the HRESULT, and throws that exception. When <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> is invoked, it attempts to retrieve extra information regarding the error by using the unmanaged [GetErrorInfo](https://msdn.microsoft.com/library/ms221032\\\\(v=vs.85\\\\).aspx) function.  \\n  \\n For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md).  \\n  \\n Occasionally, <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> might return an exception from a previous COM call. In this case, you can use the following workaround and pass `IntPtr(-1)` as the second parameter (`errorInfo`):  \\n  \\n```  \\n[SecurityPermissionAttribute(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]  \\npublic static void ThrowExceptionForHR(interrorCode,IntPtrerrorInfo)  \\n```\"\n  syntax:\n    content: public static void ThrowExceptionForHR (int errorCode);\n    parameters:\n    - id: errorCode\n      type: System.Int32\n      description: The HRESULT corresponding to the desired exception.\n  overload: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)\n  id: ThrowExceptionForHR(System.Int32,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ThrowExceptionForHR(Int32, IntPtr)\n  nameWithType: Marshal.ThrowExceptionForHR(Int32, IntPtr)\n  fullName: Marshal.ThrowExceptionForHR(Int32, IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Throws an exception with a specific failure HRESULT, based on the specified [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface.\n  remarks: \"This method creates an exception object for the specified failure HRESULT. If the HRESULT is 0 or positive (a success code), the method returns without creating or throwing an exception.  \\n  \\n The <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method releases the `errorInfo` parameter, decreasing the COM reference count of the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\\\(v=vs.85\\\\).aspx) interface.  \\n  \\n Note that the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> method returns an exception based on the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\\\(v=vs.85\\\\).aspx) interface of the current thread if one is set. When this happens, the `errorCode` parameter is ignored.  \\n  \\n Some failure HRESULTs map to defined exceptions, whereas others do not. If the HRESULT maps to a defined exception, <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> creates an instance of the exception and throws it. Otherwise, it creates an instance of <xref:System.Runtime.InteropServices.COMException?displayProperty=fullName>, initializes the error code field with the HRESULT, and throws that exception. The `errorInfo` parameter is used to retrieve extra information regarding the error.  \\n  \\n For the mapping from each HRESULT to its comparable exception class in the .NET Framework, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md).\"\n  syntax:\n    content: public static void ThrowExceptionForHR (int errorCode, IntPtr errorInfo);\n    parameters:\n    - id: errorCode\n      type: System.Int32\n      description: The HRESULT corresponding to the desired exception.\n    - id: errorInfo\n      type: System.IntPtr\n      description: A pointer to the [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface that provides more information about the error. You can specify <code>IntPtr(0)</code> to use the current [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface, or <code>IntPtr(-1)</code> to ignore the current [IErrorInfo](https://msdn.microsoft.com/library/ms221233\\(v=vs.85\\).aspx) interface and construct the exception just from the error code.\n  overload: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)\n  id: UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: UnsafeAddrOfPinnedArrayElement(Array, Int32)\n  nameWithType: Marshal.UnsafeAddrOfPinnedArrayElement(Array, Int32)\n  fullName: Marshal.UnsafeAddrOfPinnedArrayElement(Array, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Gets the address of the element at the specified index inside the specified array.\n  remarks: The array must be pinned using a <xref:System.Runtime.InteropServices.GCHandle> before it is passed to this method. For maximum performance, this method does not validate the array passed to it; this can result in unexpected behavior.\n  syntax:\n    content: public static IntPtr UnsafeAddrOfPinnedArrayElement (Array arr, int index);\n    parameters:\n    - id: arr\n      type: System.Array\n      description: The array that contains the desired element.\n    - id: index\n      type: System.Int32\n      description: The index in the <code>arr</code> parameter of the desired element.\n    return:\n      type: System.IntPtr\n      description: The address of <code>index</code> inside <code>arr</code>.\n  overload: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)\n  id: UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: UnsafeAddrOfPinnedArrayElement<T>(T[], Int32)\n  nameWithType: Marshal.UnsafeAddrOfPinnedArrayElement<T>(T[], Int32)\n  fullName: Marshal.UnsafeAddrOfPinnedArrayElement<T>(T[], Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Gets the address of the element at the specified index in an array of a specified type.\"\n  remarks: The array must be pinned by using a <xref:System.Runtime.InteropServices.GCHandle> before it is passed to this method. For maximum performance, this method does not validate the array passed to it; this can result in unexpected behavior.\n  syntax:\n    content: public static IntPtr UnsafeAddrOfPinnedArrayElement<T> (T[] arr, int index);\n    parameters:\n    - id: arr\n      type: T[]\n      description: The array that contains the desired element.\n    - id: index\n      type: System.Int32\n      description: The index of the desired element in the <code>arr</code> array.\n    typeParameters:\n    - id: T\n      description: The type of the array.\n    return:\n      type: System.IntPtr\n      description: The address of <code>index</code> in <code>arr</code>.\n  overload: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)\n  id: WriteByte(System.Object,System.Int32,System.Byte)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: WriteByte(Object, Int32, Byte)\n  nameWithType: Marshal.WriteByte(Object, Int32, Byte)\n  fullName: Marshal.WriteByte(Object, Int32, Byte)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Writes a single byte value to unmanaged memory at a specified offset.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.\n  syntax:\n    content: public static void WriteByte (object ptr, int ofs, byte val);\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: The base address in unmanaged memory of the target object.\n    - id: ofs\n      type: System.Int32\n      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.\n    - id: val\n      type: System.Byte\n      description: The value to write.\n  overload: System.Runtime.InteropServices.Marshal.WriteByte*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)\n  id: WriteByte(System.IntPtr,System.Int32,System.Byte)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: WriteByte(IntPtr, Int32, Byte)\n  nameWithType: Marshal.WriteByte(IntPtr, Int32, Byte)\n  fullName: Marshal.WriteByte(IntPtr, Int32, Byte)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Writes a single byte value to unmanaged memory at a specified offset.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.\n  example:\n  - \"The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> methods.  \\n  \\n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#3)]\\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#3)]\"\n  syntax:\n    content: public static void WriteByte (IntPtr ptr, int ofs, byte val);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The base address in unmanaged memory to write to.\n    - id: ofs\n      type: System.Int32\n      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.\n    - id: val\n      type: System.Byte\n      description: The value to write.\n  overload: System.Runtime.InteropServices.Marshal.WriteByte*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)\n  id: WriteByte(System.IntPtr,System.Byte)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: WriteByte(IntPtr, Byte)\n  nameWithType: Marshal.WriteByte(IntPtr, Byte)\n  fullName: Marshal.WriteByte(IntPtr, Byte)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Writes a single byte value to unmanaged memory.\n  remarks: <xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.\n  example:\n  - \"The following example creates a block of unmanaged memory, writes a byte to the unmanaged memory, reads the byte back from unmanaged memory, and then disposes the unmanaged memory.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.ReadByte - WriteByte#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte - WriteByte/cs/example.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.ReadByte - WriteByte#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte - WriteByte/vb/example.vb#1)]\"\n  syntax:\n    content: public static void WriteByte (IntPtr ptr, byte val);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The address in unmanaged memory to write to.\n    - id: val\n      type: System.Byte\n      description: The value to write.\n  overload: System.Runtime.InteropServices.Marshal.WriteByte*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"<code>ptr</code> is not a recognized format.  \\n  \\n -or-  \\n  \\n <code>ptr</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>ptr</code> is invalid.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)\n  id: WriteInt16(System.IntPtr,System.Char)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: WriteInt16(IntPtr, Char)\n  nameWithType: Marshal.WriteInt16(IntPtr, Char)\n  fullName: Marshal.WriteInt16(IntPtr, Char)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Writes a character as a 16-bit integer value to unmanaged memory.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \\n  \\n Writing to unaligned memory locations is supported.\"\n  example:\n  - \"The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> methods.  \\n  \\n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]\\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]\"\n  syntax:\n    content: public static void WriteInt16 (IntPtr ptr, char val);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The address in unmanaged memory to write to.\n    - id: val\n      type: System.Char\n      description: The value to write.\n  overload: System.Runtime.InteropServices.Marshal.WriteInt16*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"<code>ptr</code> is not a recognized format.  \\n  \\n -or-  \\n  \\n <code>ptr</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>ptr</code> is invalid.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)\n  id: WriteInt16(System.IntPtr,System.Int16)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: WriteInt16(IntPtr, Int16)\n  nameWithType: Marshal.WriteInt16(IntPtr, Int16)\n  fullName: Marshal.WriteInt16(IntPtr, Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Writes a 16-bit integer value to unmanaged memory.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \\n  \\n Writing to unaligned memory locations is supported.\"\n  example:\n  - \"The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A>methods.  \\n  \\n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]\\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]\"\n  syntax:\n    content: public static void WriteInt16 (IntPtr ptr, short val);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The address in unmanaged memory to write to.\n    - id: val\n      type: System.Int16\n      description: The value to write.\n  overload: System.Runtime.InteropServices.Marshal.WriteInt16*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"<code>ptr</code> is not a recognized format.  \\n  \\n -or-  \\n  \\n <code>ptr</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>ptr</code> is invalid.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)\n  id: WriteInt16(System.IntPtr,System.Int32,System.Char)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: WriteInt16(IntPtr, Int32, Char)\n  nameWithType: Marshal.WriteInt16(IntPtr, Int32, Char)\n  fullName: Marshal.WriteInt16(IntPtr, Int32, Char)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Writes a 16-bit signed integer value to unmanaged memory at a specified offset.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \\n  \\n Writing to unaligned memory locations is supported.\"\n  example:\n  - \"The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> methods.  \\n  \\n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]\\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]\"\n  syntax:\n    content: public static void WriteInt16 (IntPtr ptr, int ofs, char val);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The base address in the native heap to write to.\n    - id: ofs\n      type: System.Int32\n      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.\n    - id: val\n      type: System.Char\n      description: The value to write.\n  overload: System.Runtime.InteropServices.Marshal.WriteInt16*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)\n  id: WriteInt16(System.IntPtr,System.Int32,System.Int16)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: WriteInt16(IntPtr, Int32, Int16)\n  nameWithType: Marshal.WriteInt16(IntPtr, Int32, Int16)\n  fullName: Marshal.WriteInt16(IntPtr, Int32, Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Writes a 16-bit signed integer value into unmanaged memory at a specified offset.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \\n  \\n Writing to unaligned memory locations is supported.\"\n  example:\n  - \"The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> methods.  \\n  \\n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]\\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]\"\n  syntax:\n    content: public static void WriteInt16 (IntPtr ptr, int ofs, short val);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The base address in unmanaged memory to write to.\n    - id: ofs\n      type: System.Int32\n      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.\n    - id: val\n      type: System.Int16\n      description: The value to write.\n  overload: System.Runtime.InteropServices.Marshal.WriteInt16*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)\n  id: WriteInt16(System.Object,System.Int32,System.Char)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: WriteInt16(Object, Int32, Char)\n  nameWithType: Marshal.WriteInt16(Object, Int32, Char)\n  fullName: Marshal.WriteInt16(Object, Int32, Char)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Writes a 16-bit signed integer value to unmanaged memory at a specified offset.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \\n  \\n Writing to unaligned memory locations is supported.\"\n  syntax:\n    content: public static void WriteInt16 (object ptr, int ofs, char val);\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: The base address in unmanaged memory of the target object.\n    - id: ofs\n      type: System.Int32\n      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.\n    - id: val\n      type: System.Char\n      description: The value to write.\n  overload: System.Runtime.InteropServices.Marshal.WriteInt16*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)\n  id: WriteInt16(System.Object,System.Int32,System.Int16)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: WriteInt16(Object, Int32, Int16)\n  nameWithType: Marshal.WriteInt16(Object, Int32, Int16)\n  fullName: Marshal.WriteInt16(Object, Int32, Int16)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Writes a 16-bit signed integer value to unmanaged memory at a specified offset.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> enables direct interaction with an unmanaged 16-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \\n  \\n Writing to unaligned memory locations is supported.\"\n  syntax:\n    content: public static void WriteInt16 (object ptr, int ofs, short val);\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: The base address in unmanaged memory of the target object.\n    - id: ofs\n      type: System.Int32\n      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.\n    - id: val\n      type: System.Int16\n      description: The value to write.\n  overload: System.Runtime.InteropServices.Marshal.WriteInt16*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)\n  id: WriteInt32(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: WriteInt32(IntPtr, Int32)\n  nameWithType: Marshal.WriteInt32(IntPtr, Int32)\n  fullName: Marshal.WriteInt32(IntPtr, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Writes a 32-bit signed integer value to unmanaged memory.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \\n  \\n Writing to unaligned memory locations is supported.\"\n  example:\n  - \"The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> methods.  \\n  \\n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#5)]\\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#5)]\"\n  syntax:\n    content: public static void WriteInt32 (IntPtr ptr, int val);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The address in unmanaged memory to write to.\n    - id: val\n      type: System.Int32\n      description: The value to write.\n  overload: System.Runtime.InteropServices.Marshal.WriteInt32*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"<code>ptr</code> is not a recognized format.  \\n  \\n -or-  \\n  \\n <code>ptr</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>ptr</code> is invalid.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)\n  id: WriteInt32(System.IntPtr,System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: WriteInt32(IntPtr, Int32, Int32)\n  nameWithType: Marshal.WriteInt32(IntPtr, Int32, Int32)\n  fullName: Marshal.WriteInt32(IntPtr, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Writes a 32-bit signed integer value into unmanaged memory at a specified offset.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \\n  \\n Writing to unaligned memory locations is supported.\"\n  example:\n  - \"The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> methods.  \\n  \\n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#5)]\\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#5)]\"\n  syntax:\n    content: public static void WriteInt32 (IntPtr ptr, int ofs, int val);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The base address in unmanaged memory to write to.\n    - id: ofs\n      type: System.Int32\n      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.\n    - id: val\n      type: System.Int32\n      description: The value to write.\n  overload: System.Runtime.InteropServices.Marshal.WriteInt32*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)\n  id: WriteInt32(System.Object,System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: WriteInt32(Object, Int32, Int32)\n  nameWithType: Marshal.WriteInt32(Object, Int32, Int32)\n  fullName: Marshal.WriteInt32(Object, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Writes a 32-bit signed integer value to unmanaged memory at a specified offset.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> enables direct interaction with an unmanaged 32-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \\n  \\n Writing to unaligned memory locations is supported.\"\n  syntax:\n    content: public static void WriteInt32 (object ptr, int ofs, int val);\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: The base address in unmanaged memory of the target object.\n    - id: ofs\n      type: System.Int32\n      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.\n    - id: val\n      type: System.Int32\n      description: The value to write.\n  overload: System.Runtime.InteropServices.Marshal.WriteInt32*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)\n  id: WriteInt64(System.Object,System.Int32,System.Int64)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: WriteInt64(Object, Int32, Int64)\n  nameWithType: Marshal.WriteInt64(Object, Int32, Int64)\n  fullName: Marshal.WriteInt64(Object, Int32, Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Writes a 64-bit signed integer value to unmanaged memory at a specified offset.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \\n  \\n Writing to unaligned memory locations is supported.\"\n  syntax:\n    content: public static void WriteInt64 (object ptr, int ofs, long val);\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: The base address in unmanaged memory of the target object.\n    - id: ofs\n      type: System.Int32\n      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.\n    - id: val\n      type: System.Int64\n      description: The value to write.\n  overload: System.Runtime.InteropServices.Marshal.WriteInt64*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)\n  id: WriteInt64(System.IntPtr,System.Int64)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: WriteInt64(IntPtr, Int64)\n  nameWithType: Marshal.WriteInt64(IntPtr, Int64)\n  fullName: Marshal.WriteInt64(IntPtr, Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Writes a 64-bit signed integer value to unmanaged memory.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \\n  \\n Writing to unaligned memory locations is supported.\"\n  example:\n  - \"The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> methods.  \\n  \\n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#6)]\\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#6)]\"\n  syntax:\n    content: public static void WriteInt64 (IntPtr ptr, long val);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The address in unmanaged memory to write to.\n    - id: val\n      type: System.Int64\n      description: The value to write.\n  overload: System.Runtime.InteropServices.Marshal.WriteInt64*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"<code>ptr</code> is not a recognized format.  \\n  \\n -or-  \\n  \\n <code>ptr</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>ptr</code> is invalid.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)\n  id: WriteInt64(System.IntPtr,System.Int32,System.Int64)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: WriteInt64(IntPtr, Int32, Int64)\n  nameWithType: Marshal.WriteInt64(IntPtr, Int32, Int64)\n  fullName: Marshal.WriteInt64(IntPtr, Int32, Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Writes a 64-bit signed integer value to unmanaged memory at a specified offset.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> enables direct interaction with an unmanaged 64-bit signed array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \\n  \\n Writing to unaligned memory locations is supported.\"\n  example:\n  - \"The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> methods.  \\n  \\n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#6)]\\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#6)]\"\n  syntax:\n    content: public static void WriteInt64 (IntPtr ptr, int ofs, long val);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The base address in unmanaged memory to write.\n    - id: ofs\n      type: System.Int32\n      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.\n    - id: val\n      type: System.Int64\n      description: The value to write.\n  overload: System.Runtime.InteropServices.Marshal.WriteInt64*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)\n  id: WriteIntPtr(System.IntPtr,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: WriteIntPtr(IntPtr, IntPtr)\n  nameWithType: Marshal.WriteIntPtr(IntPtr, IntPtr)\n  fullName: Marshal.WriteIntPtr(IntPtr, IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Writes a processor native sized integer value into unmanaged memory.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \\n  \\n Writing to unaligned memory locations is supported.\"\n  example:\n  - \"The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> methods.  \\n  \\n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#2)]\\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#2)]\"\n  syntax:\n    content: public static void WriteIntPtr (IntPtr ptr, IntPtr val);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The address in unmanaged memory to write to.\n    - id: val\n      type: System.IntPtr\n      description: The value to write.\n  overload: System.Runtime.InteropServices.Marshal.WriteIntPtr*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"<code>ptr</code> is not a recognized format.  \\n  \\n -or-  \\n  \\n <code>ptr</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>ptr</code> is invalid.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)\n  id: WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: WriteIntPtr(IntPtr, Int32, IntPtr)\n  nameWithType: Marshal.WriteIntPtr(IntPtr, Int32, IntPtr)\n  fullName: Marshal.WriteIntPtr(IntPtr, Int32, IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Writes a processor native-sized integer value to unmanaged memory at a specified offset.\n  remarks: \"This method writes a 32 bit integer on 32 bit systems, and a 64 bit integer on 64 bit systems.  \\n  \\n <xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> enables direct interaction with an unmanaged C-style `IntPtr` array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \\n  \\n Writing to unaligned memory locations is supported.\"\n  example:\n  - \"The following example demonstrates how to read and write to an unmanaged array using the <xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> and <xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> methods.  \\n  \\n [!code-csharp[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#2)]\\n [!code-vb[System.Runtime.interopServices.Marshal.Read-Write val#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#2)]\"\n  syntax:\n    content: public static void WriteIntPtr (IntPtr ptr, int ofs, IntPtr val);\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: The base address in unmanaged memory to write to.\n    - id: ofs\n      type: System.Int32\n      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.\n    - id: val\n      type: System.IntPtr\n      description: The value to write.\n  overload: System.Runtime.InteropServices.Marshal.WriteIntPtr*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)\n  id: WriteIntPtr(System.Object,System.Int32,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: WriteIntPtr(Object, Int32, IntPtr)\n  nameWithType: Marshal.WriteIntPtr(Object, Int32, IntPtr)\n  fullName: Marshal.WriteIntPtr(Object, Int32, IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Writes a processor native sized integer value to unmanaged memory.\n  remarks: \"<xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> enables direct interaction with an unmanaged C-style byte array, eliminating the expense of copying an entire unmanaged array (using <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>) to a separate managed array before setting its element values.  \\n  \\n Writing to unaligned memory locations is supported.\"\n  syntax:\n    content: public static void WriteIntPtr (object ptr, int ofs, IntPtr val);\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: The base address in unmanaged memory of the target object.\n    - id: ofs\n      type: System.Int32\n      description: An additional byte offset, which is added to the <code>ptr</code> parameter before writing.\n    - id: val\n      type: System.IntPtr\n      description: The value to write.\n  overload: System.Runtime.InteropServices.Marshal.WriteIntPtr*\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: Base address (<code>ptr</code>) plus offset byte (<code>ofs</code>) produces a null or invalid address.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>ptr</code> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\"></xref> parameters.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)\n  id: ZeroFreeBSTR(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ZeroFreeBSTR(IntPtr)\n  nameWithType: Marshal.ZeroFreeBSTR(IntPtr)\n  fullName: Marshal.ZeroFreeBSTR(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Frees a [BSTR](https://msdn.microsoft.com/library/ms221069.aspx) pointer that was allocated using the <xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)\"></xref> method.\n  remarks: The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A> method first sets the contents of the BSTR to zero, and then frees the BSTR.\n  syntax:\n    content: public static void ZeroFreeBSTR (IntPtr s);\n    parameters:\n    - id: s\n      type: System.IntPtr\n      description: The address of the `BSTR` to free.\n  overload: System.Runtime.InteropServices.Marshal.ZeroFreeBSTR*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)\n  id: ZeroFreeCoTaskMemAnsi(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ZeroFreeCoTaskMemAnsi(IntPtr)\n  nameWithType: Marshal.ZeroFreeCoTaskMemAnsi(IntPtr)\n  fullName: Marshal.ZeroFreeCoTaskMemAnsi(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Frees an unmanaged string pointer that was allocated using the <xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)\"></xref> method.\n  remarks: The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> method.\n  example:\n  - \"The following example uses the <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> method to marshal and decrypt the contents of a <xref:System.Security.SecureString> object to a block of unmanaged memory. It then uses the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A> method to zero out and dispose the unmanaged block.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi/cs/sample.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi/vb/sample.vb#1)]\"\n  syntax:\n    content: public static void ZeroFreeCoTaskMemAnsi (IntPtr s);\n    parameters:\n    - id: s\n      type: System.IntPtr\n      description: The address of the unmanaged string to free.\n  overload: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)\n  id: ZeroFreeCoTaskMemUnicode(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ZeroFreeCoTaskMemUnicode(IntPtr)\n  nameWithType: Marshal.ZeroFreeCoTaskMemUnicode(IntPtr)\n  fullName: Marshal.ZeroFreeCoTaskMemUnicode(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Frees an unmanaged string pointer that was allocated using the <xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)\"></xref> method.\n  remarks: The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A> method.\n  syntax:\n    content: public static void ZeroFreeCoTaskMemUnicode (IntPtr s);\n    parameters:\n    - id: s\n      type: System.IntPtr\n      description: The address of the unmanaged string to free.\n  overload: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)\n  id: ZeroFreeCoTaskMemUTF8(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ZeroFreeCoTaskMemUTF8(IntPtr)\n  nameWithType: Marshal.ZeroFreeCoTaskMemUTF8(IntPtr)\n  fullName: Marshal.ZeroFreeCoTaskMemUTF8(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: public static void ZeroFreeCoTaskMemUTF8 (IntPtr s);\n    parameters:\n    - id: s\n      type: System.IntPtr\n      description: ''\n  overload: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8*\n  exceptions: []\n  version:\n  - netcore-1.1\n  - netcore-2.0\n  monikers:\n  - netcore-1.1\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)\n  id: ZeroFreeGlobalAllocAnsi(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ZeroFreeGlobalAllocAnsi(IntPtr)\n  nameWithType: Marshal.ZeroFreeGlobalAllocAnsi(IntPtr)\n  fullName: Marshal.ZeroFreeGlobalAllocAnsi(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Frees an unmanaged string pointer that was allocated using the <xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)\"></xref> method.\n  remarks: The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> method.\n  example:\n  - \"The following example uses the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> method to marshal and decrypt the contents of a <xref:System.Security.SecureString> object to a block of unmanaged memory. It then uses the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> method to zero out and dispose the unmanaged block.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi/CS/sample.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi/VB/sample.vb#1)]\"\n  syntax:\n    content: public static void ZeroFreeGlobalAllocAnsi (IntPtr s);\n    parameters:\n    - id: s\n      type: System.IntPtr\n      description: The address of the unmanaged string to free.\n  overload: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)\n  id: ZeroFreeGlobalAllocUnicode(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  name: ZeroFreeGlobalAllocUnicode(IntPtr)\n  nameWithType: Marshal.ZeroFreeGlobalAllocUnicode(IntPtr)\n  fullName: Marshal.ZeroFreeGlobalAllocUnicode(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Frees an unmanaged string pointer that was allocated using the <xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)\"></xref> method.\n  remarks: The <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> method first zeros out and then frees unmanaged memory that was allocated using the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> method.\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> method with the unmanaged `LogonUser` function to perform impersonation with the <xref:System.Security.SecureString> class. The example then uses the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> method to zero out and free the unmanaged string reference.  \\n  \\n [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToHGlobalUni#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalUni/CS/sample.cs#1)]\\n [!code-vb[Runtime.InteropServices.Marshal.SecureStringToHGlobalUni#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalUni/VB/sample.vb#1)]\"\n  syntax:\n    content: public static void ZeroFreeGlobalAllocUnicode (IntPtr s);\n    parameters:\n    - id: s\n      type: System.IntPtr\n      description: The address of the unmanaged string to free.\n  overload: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.OutOfMemoryException\n  parent: System\n  isExternal: false\n  name: OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n- uid: System.Runtime.InteropServices.COMException\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: COMException\n  nameWithType: COMException\n  fullName: System.Runtime.InteropServices.COMException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.InvalidCastException\n  parent: System\n  isExternal: false\n  name: InvalidCastException\n  nameWithType: InvalidCastException\n  fullName: System.InvalidCastException\n- uid: System.Runtime.InteropServices.InvalidOleVariantTypeException\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: InvalidOleVariantTypeException\n  nameWithType: InvalidOleVariantTypeException\n  fullName: System.Runtime.InteropServices.InvalidOleVariantTypeException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.MissingMethodException\n  parent: System\n  isExternal: false\n  name: MissingMethodException\n  nameWithType: MissingMethodException\n  fullName: System.MissingMethodException\n- uid: System.AccessViolationException\n  parent: System\n  isExternal: false\n  name: AccessViolationException\n  nameWithType: AccessViolationException\n  fullName: System.AccessViolationException\n- uid: System.NullReferenceException\n  parent: System\n  isExternal: false\n  name: NullReferenceException\n  nameWithType: NullReferenceException\n  fullName: System.NullReferenceException\n- uid: System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: AddRef(IntPtr)\n  nameWithType: Marshal.AddRef(IntPtr)\n  fullName: Marshal.AddRef(IntPtr)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: AllocCoTaskMem(Int32)\n  nameWithType: Marshal.AllocCoTaskMem(Int32)\n  fullName: Marshal.AllocCoTaskMem(Int32)\n- uid: System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: AllocHGlobal(Int32)\n  nameWithType: Marshal.AllocHGlobal(Int32)\n  fullName: Marshal.AllocHGlobal(Int32)\n- uid: System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: AllocHGlobal(IntPtr)\n  nameWithType: Marshal.AllocHGlobal(IntPtr)\n  fullName: Marshal.AllocHGlobal(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: AreComObjectsAvailableForCleanup()\n  nameWithType: Marshal.AreComObjectsAvailableForCleanup()\n  fullName: Marshal.AreComObjectsAvailableForCleanup()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: BindToMoniker(String)\n  nameWithType: Marshal.BindToMoniker(String)\n  fullName: Marshal.BindToMoniker(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Runtime.InteropServices.Marshal.BufferToBSTR(System.Array,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: BufferToBSTR(Array, Int32)\n  nameWithType: Marshal.BufferToBSTR(Array, Int32)\n  fullName: Marshal.BufferToBSTR(Array, Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ChangeWrapperHandleStrength(Object, Boolean)\n  nameWithType: Marshal.ChangeWrapperHandleStrength(Object, Boolean)\n  fullName: Marshal.ChangeWrapperHandleStrength(Object, Boolean)\n- uid: System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: CleanupUnusedObjectsInCurrentContext()\n  nameWithType: Marshal.CleanupUnusedObjectsInCurrentContext()\n  fullName: Marshal.CleanupUnusedObjectsInCurrentContext()\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: Copy(Single[], Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(Single[], Int32, IntPtr, Int32)\n  fullName: Marshal.Copy(Single[], Int32, IntPtr, Int32)\n- uid: System.Single\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Single[]\n  parent: System\n  isExternal: false\n  name: Single[]\n  nameWithType: Single[]\n  fullName: System.Single[]\n  spec.csharp:\n  - uid: System.Single\n    name: Single\n    nameWithType: Single\n    fullName: System.Single\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: Copy(IntPtr[], Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(IntPtr[], Int32, IntPtr, Int32)\n  fullName: Marshal.Copy(IntPtr[], Int32, IntPtr, Int32)\n- uid: System.IntPtr[]\n  parent: System\n  isExternal: false\n  name: IntPtr[]\n  nameWithType: IntPtr[]\n  fullName: System.IntPtr[]\n  spec.csharp:\n  - uid: System.IntPtr\n    name: IntPtr\n    nameWithType: IntPtr\n    fullName: System.IntPtr\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: Copy(IntPtr, Single[], Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, Single[], Int32, Int32)\n  fullName: Marshal.Copy(IntPtr, Single[], Int32, Int32)\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: Copy(IntPtr, Int64[], Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, Int64[], Int32, Int32)\n  fullName: Marshal.Copy(IntPtr, Int64[], Int32, Int32)\n- uid: System.Int64\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Int64[]\n  parent: System\n  isExternal: false\n  name: Int64[]\n  nameWithType: Int64[]\n  fullName: System.Int64[]\n  spec.csharp:\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: Copy(IntPtr, Int32[], Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, Int32[], Int32, Int32)\n  fullName: Marshal.Copy(IntPtr, Int32[], Int32, Int32)\n- uid: System.Int32[]\n  parent: System\n  isExternal: false\n  name: Int32[]\n  nameWithType: Int32[]\n  fullName: System.Int32[]\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: Copy(IntPtr, Int16[], Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, Int16[], Int32, Int32)\n  fullName: Marshal.Copy(IntPtr, Int16[], Int32, Int32)\n- uid: System.Int16\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Int16[]\n  parent: System\n  isExternal: false\n  name: Int16[]\n  nameWithType: Int16[]\n  fullName: System.Int16[]\n  spec.csharp:\n  - uid: System.Int16\n    name: Int16\n    nameWithType: Int16\n    fullName: System.Int16\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: Copy(IntPtr, Double[], Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, Double[], Int32, Int32)\n  fullName: Marshal.Copy(IntPtr, Double[], Int32, Int32)\n- uid: System.Double\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Double[]\n  parent: System\n  isExternal: false\n  name: Double[]\n  nameWithType: Double[]\n  fullName: System.Double[]\n  spec.csharp:\n  - uid: System.Double\n    name: Double\n    nameWithType: Double\n    fullName: System.Double\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: Copy(IntPtr, IntPtr[], Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, IntPtr[], Int32, Int32)\n  fullName: Marshal.Copy(IntPtr, IntPtr[], Int32, Int32)\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: Copy(IntPtr, Byte[], Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, Byte[], Int32, Int32)\n  fullName: Marshal.Copy(IntPtr, Byte[], Int32, Int32)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: Copy(Int64[], Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(Int64[], Int32, IntPtr, Int32)\n  fullName: Marshal.Copy(Int64[], Int32, IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: Copy(Int32[], Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(Int32[], Int32, IntPtr, Int32)\n  fullName: Marshal.Copy(Int32[], Int32, IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: Copy(Int16[], Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(Int16[], Int32, IntPtr, Int32)\n  fullName: Marshal.Copy(Int16[], Int32, IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: Copy(IntPtr, Char[], Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, Char[], Int32, Int32)\n  fullName: Marshal.Copy(IntPtr, Char[], Int32, Int32)\n- uid: System.Char\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Char[]\n  parent: System\n  isExternal: false\n  name: Char[]\n  nameWithType: Char[]\n  fullName: System.Char[]\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: Copy(Double[], Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(Double[], Int32, IntPtr, Int32)\n  fullName: Marshal.Copy(Double[], Int32, IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: Copy(Char[], Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(Char[], Int32, IntPtr, Int32)\n  fullName: Marshal.Copy(Char[], Int32, IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: Copy(Byte[], Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(Byte[], Int32, IntPtr, Int32)\n  fullName: Marshal.Copy(Byte[], Int32, IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: CreateAggregatedObject(IntPtr, Object)\n  nameWithType: Marshal.CreateAggregatedObject(IntPtr, Object)\n  fullName: Marshal.CreateAggregatedObject(IntPtr, Object)\n- uid: System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: CreateAggregatedObject<T>(IntPtr, T)\n  nameWithType: Marshal.CreateAggregatedObject<T>(IntPtr, T)\n  fullName: Marshal.CreateAggregatedObject<T>(IntPtr, T)\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: CreateWrapperOfType(Object, Type)\n  nameWithType: Marshal.CreateWrapperOfType(Object, Type)\n  fullName: Marshal.CreateWrapperOfType(Object, Type)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: CreateWrapperOfType<T,TWrapper>(T)\n  nameWithType: Marshal.CreateWrapperOfType<T,TWrapper>(T)\n  fullName: Marshal.CreateWrapperOfType<T,TWrapper>(T)\n- uid: TWrapper\n  isExternal: true\n  name: TWrapper\n  nameWithType: TWrapper\n  fullName: TWrapper\n- uid: System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: DestroyStructure(IntPtr, Type)\n  nameWithType: Marshal.DestroyStructure(IntPtr, Type)\n  fullName: Marshal.DestroyStructure(IntPtr, Type)\n- uid: System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: DestroyStructure<T>(IntPtr)\n  nameWithType: Marshal.DestroyStructure<T>(IntPtr)\n  fullName: Marshal.DestroyStructure<T>(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: FinalReleaseComObject(Object)\n  nameWithType: Marshal.FinalReleaseComObject(Object)\n  fullName: Marshal.FinalReleaseComObject(Object)\n- uid: System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: FreeBSTR(IntPtr)\n  nameWithType: Marshal.FreeBSTR(IntPtr)\n  fullName: Marshal.FreeBSTR(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: FreeCoTaskMem(IntPtr)\n  nameWithType: Marshal.FreeCoTaskMem(IntPtr)\n  fullName: Marshal.FreeCoTaskMem(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: FreeHGlobal(IntPtr)\n  nameWithType: Marshal.FreeHGlobal(IntPtr)\n  fullName: Marshal.FreeHGlobal(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GenerateGuidForType(Type)\n  nameWithType: Marshal.GenerateGuidForType(Type)\n  fullName: Marshal.GenerateGuidForType(Type)\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GenerateProgIdForType(Type)\n  nameWithType: Marshal.GenerateProgIdForType(Type)\n  fullName: Marshal.GenerateProgIdForType(Type)\n- uid: System.Runtime.InteropServices.Marshal.GetActiveObject(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetActiveObject(String)\n  nameWithType: Marshal.GetActiveObject(String)\n  fullName: Marshal.GetActiveObject(String)\n- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetComInterfaceForObject(Object, Type)\n  nameWithType: Marshal.GetComInterfaceForObject(Object, Type)\n  fullName: Marshal.GetComInterfaceForObject(Object, Type)\n- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode)\n  nameWithType: Marshal.GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode)\n  fullName: Marshal.GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode)\n- uid: System.Runtime.InteropServices.CustomQueryInterfaceMode\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: CustomQueryInterfaceMode\n  nameWithType: CustomQueryInterfaceMode\n  fullName: System.Runtime.InteropServices.CustomQueryInterfaceMode\n- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetComInterfaceForObject<T,TInterface>(T)\n  nameWithType: Marshal.GetComInterfaceForObject<T,TInterface>(T)\n  fullName: Marshal.GetComInterfaceForObject<T,TInterface>(T)\n- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext(System.Object,System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetComInterfaceForObjectInContext(Object, Type)\n  nameWithType: Marshal.GetComInterfaceForObjectInContext(Object, Type)\n  fullName: Marshal.GetComInterfaceForObjectInContext(Object, Type)\n- uid: System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetComObjectData(Object, Object)\n  nameWithType: Marshal.GetComObjectData(Object, Object)\n  fullName: Marshal.GetComObjectData(Object, Object)\n- uid: System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo(System.Reflection.MemberInfo)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetComSlotForMethodInfo(MemberInfo)\n  nameWithType: Marshal.GetComSlotForMethodInfo(MemberInfo)\n  fullName: Marshal.GetComSlotForMethodInfo(MemberInfo)\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo\n- uid: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetDelegateForFunctionPointer(IntPtr, Type)\n  nameWithType: Marshal.GetDelegateForFunctionPointer(IntPtr, Type)\n  fullName: Marshal.GetDelegateForFunctionPointer(IntPtr, Type)\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetDelegateForFunctionPointer<TDelegate>(IntPtr)\n  nameWithType: Marshal.GetDelegateForFunctionPointer<TDelegate>(IntPtr)\n  fullName: Marshal.GetDelegateForFunctionPointer<TDelegate>(IntPtr)\n- uid: TDelegate\n  isExternal: true\n  name: TDelegate\n  nameWithType: TDelegate\n  fullName: TDelegate\n- uid: System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetEndComSlot(Type)\n  nameWithType: Marshal.GetEndComSlot(Type)\n  fullName: Marshal.GetEndComSlot(Type)\n- uid: System.Runtime.InteropServices.Marshal.GetExceptionCode\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetExceptionCode()\n  nameWithType: Marshal.GetExceptionCode()\n  fullName: Marshal.GetExceptionCode()\n- uid: System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetExceptionForHR(Int32)\n  nameWithType: Marshal.GetExceptionForHR(Int32)\n  fullName: Marshal.GetExceptionForHR(Int32)\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetExceptionForHR(Int32, IntPtr)\n  nameWithType: Marshal.GetExceptionForHR(Int32, IntPtr)\n  fullName: Marshal.GetExceptionForHR(Int32, IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.GetExceptionPointers\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetExceptionPointers()\n  nameWithType: Marshal.GetExceptionPointers()\n  fullName: Marshal.GetExceptionPointers()\n- uid: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetFunctionPointerForDelegate(Delegate)\n  nameWithType: Marshal.GetFunctionPointerForDelegate(Delegate)\n  fullName: Marshal.GetFunctionPointerForDelegate(Delegate)\n- uid: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetFunctionPointerForDelegate<TDelegate>(TDelegate)\n  nameWithType: Marshal.GetFunctionPointerForDelegate<TDelegate>(TDelegate)\n  fullName: Marshal.GetFunctionPointerForDelegate<TDelegate>(TDelegate)\n- uid: System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetHINSTANCE(Module)\n  nameWithType: Marshal.GetHINSTANCE(Module)\n  fullName: Marshal.GetHINSTANCE(Module)\n- uid: System.Reflection.Module\n  parent: System.Reflection\n  isExternal: false\n  name: Module\n  nameWithType: Module\n  fullName: System.Reflection.Module\n- uid: System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetHRForException(Exception)\n  nameWithType: Marshal.GetHRForException(Exception)\n  fullName: Marshal.GetHRForException(Exception)\n- uid: System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetHRForLastWin32Error()\n  nameWithType: Marshal.GetHRForLastWin32Error()\n  fullName: Marshal.GetHRForLastWin32Error()\n- uid: System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetIDispatchForObject(Object)\n  nameWithType: Marshal.GetIDispatchForObject(Object)\n  fullName: Marshal.GetIDispatchForObject(Object)\n- uid: System.Runtime.InteropServices.Marshal.GetIDispatchForObjectInContext(System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetIDispatchForObjectInContext(Object)\n  nameWithType: Marshal.GetIDispatchForObjectInContext(Object)\n  fullName: Marshal.GetIDispatchForObjectInContext(Object)\n- uid: System.Runtime.InteropServices.Marshal.GetITypeInfoForType(System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetITypeInfoForType(Type)\n  nameWithType: Marshal.GetITypeInfoForType(Type)\n  fullName: Marshal.GetITypeInfoForType(Type)\n- uid: System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetIUnknownForObject(Object)\n  nameWithType: Marshal.GetIUnknownForObject(Object)\n  fullName: Marshal.GetIUnknownForObject(Object)\n- uid: System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext(System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetIUnknownForObjectInContext(Object)\n  nameWithType: Marshal.GetIUnknownForObjectInContext(Object)\n  fullName: Marshal.GetIUnknownForObjectInContext(Object)\n- uid: System.Runtime.InteropServices.Marshal.GetLastWin32Error\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetLastWin32Error()\n  nameWithType: Marshal.GetLastWin32Error()\n  fullName: Marshal.GetLastWin32Error()\n- uid: System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetManagedThunkForUnmanagedMethodPtr(IntPtr, IntPtr, Int32)\n  nameWithType: Marshal.GetManagedThunkForUnmanagedMethodPtr(IntPtr, IntPtr, Int32)\n  fullName: Marshal.GetManagedThunkForUnmanagedMethodPtr(IntPtr, IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetMethodInfoForComSlot(Type, Int32, ComMemberType)\n  nameWithType: Marshal.GetMethodInfoForComSlot(Type, Int32, ComMemberType)\n  fullName: Marshal.GetMethodInfoForComSlot(Type, Int32, ComMemberType)\n- uid: System.Runtime.InteropServices.ComMemberType\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: ComMemberType\n  nameWithType: ComMemberType\n  fullName: System.Runtime.InteropServices.ComMemberType\n- uid: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetNativeVariantForObject(Object, IntPtr)\n  nameWithType: Marshal.GetNativeVariantForObject(Object, IntPtr)\n  fullName: Marshal.GetNativeVariantForObject(Object, IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetNativeVariantForObject<T>(T, IntPtr)\n  nameWithType: Marshal.GetNativeVariantForObject<T>(T, IntPtr)\n  fullName: Marshal.GetNativeVariantForObject<T>(T, IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetObjectForIUnknown(IntPtr)\n  nameWithType: Marshal.GetObjectForIUnknown(IntPtr)\n  fullName: Marshal.GetObjectForIUnknown(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetObjectForNativeVariant(IntPtr)\n  nameWithType: Marshal.GetObjectForNativeVariant(IntPtr)\n  fullName: Marshal.GetObjectForNativeVariant(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetObjectForNativeVariant<T>(IntPtr)\n  nameWithType: Marshal.GetObjectForNativeVariant<T>(IntPtr)\n  fullName: Marshal.GetObjectForNativeVariant<T>(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetObjectsForNativeVariants(IntPtr, Int32)\n  nameWithType: Marshal.GetObjectsForNativeVariants(IntPtr, Int32)\n  fullName: Marshal.GetObjectsForNativeVariants(IntPtr, Int32)\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetObjectsForNativeVariants<T>(IntPtr, Int32)\n  nameWithType: Marshal.GetObjectsForNativeVariants<T>(IntPtr, Int32)\n  fullName: Marshal.GetObjectsForNativeVariants<T>(IntPtr, Int32)\n- uid: T[]\n  isExternal: true\n  name: T[]\n  nameWithType: T[]\n  fullName: T[]\n  spec.csharp:\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetStartComSlot(Type)\n  nameWithType: Marshal.GetStartComSlot(Type)\n  fullName: Marshal.GetStartComSlot(Type)\n- uid: System.Runtime.InteropServices.Marshal.GetThreadFromFiberCookie(System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetThreadFromFiberCookie(Int32)\n  nameWithType: Marshal.GetThreadFromFiberCookie(Int32)\n  fullName: Marshal.GetThreadFromFiberCookie(Int32)\n- uid: System.Threading.Thread\n  parent: System.Threading\n  isExternal: false\n  name: Thread\n  nameWithType: Thread\n  fullName: System.Threading.Thread\n- uid: System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetTypedObjectForIUnknown(IntPtr, Type)\n  nameWithType: Marshal.GetTypedObjectForIUnknown(IntPtr, Type)\n  fullName: Marshal.GetTypedObjectForIUnknown(IntPtr, Type)\n- uid: System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetTypeForITypeInfo(IntPtr)\n  nameWithType: Marshal.GetTypeForITypeInfo(IntPtr)\n  fullName: Marshal.GetTypeForITypeInfo(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetTypeFromCLSID(Guid)\n  nameWithType: Marshal.GetTypeFromCLSID(Guid)\n  fullName: Marshal.GetTypeFromCLSID(Guid)\n- uid: System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.UCOMITypeInfo)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetTypeInfoName(UCOMITypeInfo)\n  nameWithType: Marshal.GetTypeInfoName(UCOMITypeInfo)\n  fullName: Marshal.GetTypeInfoName(UCOMITypeInfo)\n- uid: System.Runtime.InteropServices.UCOMITypeInfo\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: UCOMITypeInfo\n  nameWithType: UCOMITypeInfo\n  fullName: System.Runtime.InteropServices.UCOMITypeInfo\n- uid: System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetTypeInfoName(ITypeInfo)\n  nameWithType: Marshal.GetTypeInfoName(ITypeInfo)\n  fullName: Marshal.GetTypeInfoName(ITypeInfo)\n- uid: System.Runtime.InteropServices.ComTypes.ITypeInfo\n  parent: System.Runtime.InteropServices.ComTypes\n  isExternal: false\n  name: ITypeInfo\n  nameWithType: ITypeInfo\n  fullName: System.Runtime.InteropServices.ComTypes.ITypeInfo\n- uid: System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.ComTypes.ITypeLib)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetTypeLibGuid(ITypeLib)\n  nameWithType: Marshal.GetTypeLibGuid(ITypeLib)\n  fullName: Marshal.GetTypeLibGuid(ITypeLib)\n- uid: System.Runtime.InteropServices.ComTypes.ITypeLib\n  parent: System.Runtime.InteropServices.ComTypes\n  isExternal: false\n  name: ITypeLib\n  nameWithType: ITypeLib\n  fullName: System.Runtime.InteropServices.ComTypes.ITypeLib\n- uid: System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.UCOMITypeLib)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetTypeLibGuid(UCOMITypeLib)\n  nameWithType: Marshal.GetTypeLibGuid(UCOMITypeLib)\n  fullName: Marshal.GetTypeLibGuid(UCOMITypeLib)\n- uid: System.Runtime.InteropServices.UCOMITypeLib\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: UCOMITypeLib\n  nameWithType: UCOMITypeLib\n  fullName: System.Runtime.InteropServices.UCOMITypeLib\n- uid: System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly(System.Reflection.Assembly)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetTypeLibGuidForAssembly(Assembly)\n  nameWithType: Marshal.GetTypeLibGuidForAssembly(Assembly)\n  fullName: Marshal.GetTypeLibGuidForAssembly(Assembly)\n- uid: System.Reflection.Assembly\n  parent: System.Reflection\n  isExternal: false\n  name: Assembly\n  nameWithType: Assembly\n  fullName: System.Reflection.Assembly\n- uid: System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.ComTypes.ITypeLib)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetTypeLibLcid(ITypeLib)\n  nameWithType: Marshal.GetTypeLibLcid(ITypeLib)\n  fullName: Marshal.GetTypeLibLcid(ITypeLib)\n- uid: System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.UCOMITypeLib)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetTypeLibLcid(UCOMITypeLib)\n  nameWithType: Marshal.GetTypeLibLcid(UCOMITypeLib)\n  fullName: Marshal.GetTypeLibLcid(UCOMITypeLib)\n- uid: System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.ComTypes.ITypeLib)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetTypeLibName(ITypeLib)\n  nameWithType: Marshal.GetTypeLibName(ITypeLib)\n  fullName: Marshal.GetTypeLibName(ITypeLib)\n- uid: System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.UCOMITypeLib)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetTypeLibName(UCOMITypeLib)\n  nameWithType: Marshal.GetTypeLibName(UCOMITypeLib)\n  fullName: Marshal.GetTypeLibName(UCOMITypeLib)\n- uid: System.Runtime.InteropServices.Marshal.GetTypeLibVersionForAssembly(System.Reflection.Assembly,System.Int32@,System.Int32@)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetTypeLibVersionForAssembly(Assembly, Int32, Int32)\n  nameWithType: Marshal.GetTypeLibVersionForAssembly(Assembly, Int32, Int32)\n  fullName: Marshal.GetTypeLibVersionForAssembly(Assembly, Int32, Int32)\n- uid: System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetUniqueObjectForIUnknown(IntPtr)\n  nameWithType: Marshal.GetUniqueObjectForIUnknown(IntPtr)\n  fullName: Marshal.GetUniqueObjectForIUnknown(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetUnmanagedThunkForManagedMethodPtr(IntPtr, IntPtr, Int32)\n  nameWithType: Marshal.GetUnmanagedThunkForManagedMethodPtr(IntPtr, IntPtr, Int32)\n  fullName: Marshal.GetUnmanagedThunkForManagedMethodPtr(IntPtr, IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.IsComObject(System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: IsComObject(Object)\n  nameWithType: Marshal.IsComObject(Object)\n  fullName: Marshal.IsComObject(Object)\n- uid: System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: IsTypeVisibleFromCom(Type)\n  nameWithType: Marshal.IsTypeVisibleFromCom(Type)\n  fullName: Marshal.IsTypeVisibleFromCom(Type)\n- uid: System.Runtime.InteropServices.Marshal.NumParamBytes(System.Reflection.MethodInfo)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: NumParamBytes(MethodInfo)\n  nameWithType: Marshal.NumParamBytes(MethodInfo)\n  fullName: Marshal.NumParamBytes(MethodInfo)\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: OffsetOf(Type, String)\n  nameWithType: Marshal.OffsetOf(Type, String)\n  fullName: Marshal.OffsetOf(Type, String)\n- uid: System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: OffsetOf<T>(String)\n  nameWithType: Marshal.OffsetOf<T>(String)\n  fullName: Marshal.OffsetOf<T>(String)\n- uid: System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: Prelink(MethodInfo)\n  nameWithType: Marshal.Prelink(MethodInfo)\n  fullName: Marshal.Prelink(MethodInfo)\n- uid: System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: PrelinkAll(Type)\n  nameWithType: Marshal.PrelinkAll(Type)\n  fullName: Marshal.PrelinkAll(Type)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: PtrToStringAnsi(IntPtr)\n  nameWithType: Marshal.PtrToStringAnsi(IntPtr)\n  fullName: Marshal.PtrToStringAnsi(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: PtrToStringAnsi(IntPtr, Int32)\n  nameWithType: Marshal.PtrToStringAnsi(IntPtr, Int32)\n  fullName: Marshal.PtrToStringAnsi(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: PtrToStringAuto(IntPtr)\n  nameWithType: Marshal.PtrToStringAuto(IntPtr)\n  fullName: Marshal.PtrToStringAuto(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: PtrToStringAuto(IntPtr, Int32)\n  nameWithType: Marshal.PtrToStringAuto(IntPtr, Int32)\n  fullName: Marshal.PtrToStringAuto(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: PtrToStringBSTR(IntPtr)\n  nameWithType: Marshal.PtrToStringBSTR(IntPtr)\n  fullName: Marshal.PtrToStringBSTR(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: PtrToStringUni(IntPtr)\n  nameWithType: Marshal.PtrToStringUni(IntPtr)\n  fullName: Marshal.PtrToStringUni(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: PtrToStringUni(IntPtr, Int32)\n  nameWithType: Marshal.PtrToStringUni(IntPtr, Int32)\n  fullName: Marshal.PtrToStringUni(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: PtrToStringUTF8(IntPtr)\n  nameWithType: Marshal.PtrToStringUTF8(IntPtr)\n  fullName: Marshal.PtrToStringUTF8(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: PtrToStringUTF8(IntPtr, Int32)\n  nameWithType: Marshal.PtrToStringUTF8(IntPtr, Int32)\n  fullName: Marshal.PtrToStringUTF8(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: PtrToStructure(IntPtr, Object)\n  nameWithType: Marshal.PtrToStructure(IntPtr, Object)\n  fullName: Marshal.PtrToStructure(IntPtr, Object)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: PtrToStructure(IntPtr, Type)\n  nameWithType: Marshal.PtrToStructure(IntPtr, Type)\n  fullName: Marshal.PtrToStructure(IntPtr, Type)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: PtrToStructure<T>(IntPtr)\n  nameWithType: Marshal.PtrToStructure<T>(IntPtr)\n  fullName: Marshal.PtrToStructure<T>(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: PtrToStructure<T>(IntPtr, T)\n  nameWithType: Marshal.PtrToStructure<T>(IntPtr, T)\n  fullName: Marshal.PtrToStructure<T>(IntPtr, T)\n- uid: System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: QueryInterface(IntPtr, Guid, IntPtr)\n  nameWithType: Marshal.QueryInterface(IntPtr, Guid, IntPtr)\n  fullName: Marshal.QueryInterface(IntPtr, Guid, IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReadByte(IntPtr, Int32)\n  nameWithType: Marshal.ReadByte(IntPtr, Int32)\n  fullName: Marshal.ReadByte(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReadByte(Object, Int32)\n  nameWithType: Marshal.ReadByte(Object, Int32)\n  fullName: Marshal.ReadByte(Object, Int32)\n- uid: System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReadByte(IntPtr)\n  nameWithType: Marshal.ReadByte(IntPtr)\n  fullName: Marshal.ReadByte(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReadInt16(IntPtr)\n  nameWithType: Marshal.ReadInt16(IntPtr)\n  fullName: Marshal.ReadInt16(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReadInt16(IntPtr, Int32)\n  nameWithType: Marshal.ReadInt16(IntPtr, Int32)\n  fullName: Marshal.ReadInt16(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReadInt16(Object, Int32)\n  nameWithType: Marshal.ReadInt16(Object, Int32)\n  fullName: Marshal.ReadInt16(Object, Int32)\n- uid: System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReadInt32(IntPtr)\n  nameWithType: Marshal.ReadInt32(IntPtr)\n  fullName: Marshal.ReadInt32(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReadInt32(IntPtr, Int32)\n  nameWithType: Marshal.ReadInt32(IntPtr, Int32)\n  fullName: Marshal.ReadInt32(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReadInt32(Object, Int32)\n  nameWithType: Marshal.ReadInt32(Object, Int32)\n  fullName: Marshal.ReadInt32(Object, Int32)\n- uid: System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReadInt64(IntPtr)\n  nameWithType: Marshal.ReadInt64(IntPtr)\n  fullName: Marshal.ReadInt64(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReadInt64(IntPtr, Int32)\n  nameWithType: Marshal.ReadInt64(IntPtr, Int32)\n  fullName: Marshal.ReadInt64(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReadInt64(Object, Int32)\n  nameWithType: Marshal.ReadInt64(Object, Int32)\n  fullName: Marshal.ReadInt64(Object, Int32)\n- uid: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReadIntPtr(IntPtr, Int32)\n  nameWithType: Marshal.ReadIntPtr(IntPtr, Int32)\n  fullName: Marshal.ReadIntPtr(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReadIntPtr(Object, Int32)\n  nameWithType: Marshal.ReadIntPtr(Object, Int32)\n  fullName: Marshal.ReadIntPtr(Object, Int32)\n- uid: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReadIntPtr(IntPtr)\n  nameWithType: Marshal.ReadIntPtr(IntPtr)\n  fullName: Marshal.ReadIntPtr(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReAllocCoTaskMem(IntPtr, Int32)\n  nameWithType: Marshal.ReAllocCoTaskMem(IntPtr, Int32)\n  fullName: Marshal.ReAllocCoTaskMem(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReAllocHGlobal(IntPtr, IntPtr)\n  nameWithType: Marshal.ReAllocHGlobal(IntPtr, IntPtr)\n  fullName: Marshal.ReAllocHGlobal(IntPtr, IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.Release(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: Release(IntPtr)\n  nameWithType: Marshal.Release(IntPtr)\n  fullName: Marshal.Release(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReleaseComObject(Object)\n  nameWithType: Marshal.ReleaseComObject(Object)\n  fullName: Marshal.ReleaseComObject(Object)\n- uid: System.Runtime.InteropServices.Marshal.ReleaseThreadCache\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReleaseThreadCache()\n  nameWithType: Marshal.ReleaseThreadCache()\n  fullName: Marshal.ReleaseThreadCache()\n- uid: System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: SecureStringToBSTR(SecureString)\n  nameWithType: Marshal.SecureStringToBSTR(SecureString)\n  fullName: Marshal.SecureStringToBSTR(SecureString)\n- uid: System.Security.SecureString\n  parent: System.Security\n  isExternal: false\n  name: SecureString\n  nameWithType: SecureString\n  fullName: System.Security.SecureString\n- uid: System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: SecureStringToCoTaskMemAnsi(SecureString)\n  nameWithType: Marshal.SecureStringToCoTaskMemAnsi(SecureString)\n  fullName: Marshal.SecureStringToCoTaskMemAnsi(SecureString)\n- uid: System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: SecureStringToCoTaskMemUnicode(SecureString)\n  nameWithType: Marshal.SecureStringToCoTaskMemUnicode(SecureString)\n  fullName: Marshal.SecureStringToCoTaskMemUnicode(SecureString)\n- uid: System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: SecureStringToGlobalAllocAnsi(SecureString)\n  nameWithType: Marshal.SecureStringToGlobalAllocAnsi(SecureString)\n  fullName: Marshal.SecureStringToGlobalAllocAnsi(SecureString)\n- uid: System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: SecureStringToGlobalAllocUnicode(SecureString)\n  nameWithType: Marshal.SecureStringToGlobalAllocUnicode(SecureString)\n  fullName: Marshal.SecureStringToGlobalAllocUnicode(SecureString)\n- uid: System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: SetComObjectData(Object, Object, Object)\n  nameWithType: Marshal.SetComObjectData(Object, Object, Object)\n  fullName: Marshal.SetComObjectData(Object, Object, Object)\n- uid: System.Runtime.InteropServices.Marshal.SizeOf(System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: SizeOf(Object)\n  nameWithType: Marshal.SizeOf(Object)\n  fullName: Marshal.SizeOf(Object)\n- uid: System.Runtime.InteropServices.Marshal.SizeOf(System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: SizeOf(Type)\n  nameWithType: Marshal.SizeOf(Type)\n  fullName: Marshal.SizeOf(Type)\n- uid: System.Runtime.InteropServices.Marshal.SizeOf``1\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: SizeOf<T>()\n  nameWithType: Marshal.SizeOf<T>()\n  fullName: Marshal.SizeOf<T>()\n- uid: System.Runtime.InteropServices.Marshal.SizeOf``1(``0)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: SizeOf<T>(T)\n  nameWithType: Marshal.SizeOf<T>(T)\n  fullName: Marshal.SizeOf<T>(T)\n- uid: System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: StringToBSTR(String)\n  nameWithType: Marshal.StringToBSTR(String)\n  fullName: Marshal.StringToBSTR(String)\n- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: StringToCoTaskMemAnsi(String)\n  nameWithType: Marshal.StringToCoTaskMemAnsi(String)\n  fullName: Marshal.StringToCoTaskMemAnsi(String)\n- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: StringToCoTaskMemAuto(String)\n  nameWithType: Marshal.StringToCoTaskMemAuto(String)\n  fullName: Marshal.StringToCoTaskMemAuto(String)\n- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: StringToCoTaskMemUni(String)\n  nameWithType: Marshal.StringToCoTaskMemUni(String)\n  fullName: Marshal.StringToCoTaskMemUni(String)\n- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: StringToCoTaskMemUTF8(String)\n  nameWithType: Marshal.StringToCoTaskMemUTF8(String)\n  fullName: Marshal.StringToCoTaskMemUTF8(String)\n- uid: System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: StringToHGlobalAnsi(String)\n  nameWithType: Marshal.StringToHGlobalAnsi(String)\n  fullName: Marshal.StringToHGlobalAnsi(String)\n- uid: System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: StringToHGlobalAuto(String)\n  nameWithType: Marshal.StringToHGlobalAuto(String)\n  fullName: Marshal.StringToHGlobalAuto(String)\n- uid: System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: StringToHGlobalUni(String)\n  nameWithType: Marshal.StringToHGlobalUni(String)\n  fullName: Marshal.StringToHGlobalUni(String)\n- uid: System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: StructureToPtr(Object, IntPtr, Boolean)\n  nameWithType: Marshal.StructureToPtr(Object, IntPtr, Boolean)\n  fullName: Marshal.StructureToPtr(Object, IntPtr, Boolean)\n- uid: System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: StructureToPtr<T>(T, IntPtr, Boolean)\n  nameWithType: Marshal.StructureToPtr<T>(T, IntPtr, Boolean)\n  fullName: Marshal.StructureToPtr<T>(T, IntPtr, Boolean)\n- uid: System.Runtime.InteropServices.Marshal.SystemDefaultCharSize\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: SystemDefaultCharSize\n  nameWithType: Marshal.SystemDefaultCharSize\n  fullName: Marshal.SystemDefaultCharSize\n- uid: System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: SystemMaxDBCSCharSize\n  nameWithType: Marshal.SystemMaxDBCSCharSize\n  fullName: Marshal.SystemMaxDBCSCharSize\n- uid: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ThrowExceptionForHR(Int32)\n  nameWithType: Marshal.ThrowExceptionForHR(Int32)\n  fullName: Marshal.ThrowExceptionForHR(Int32)\n- uid: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ThrowExceptionForHR(Int32, IntPtr)\n  nameWithType: Marshal.ThrowExceptionForHR(Int32, IntPtr)\n  fullName: Marshal.ThrowExceptionForHR(Int32, IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: UnsafeAddrOfPinnedArrayElement(Array, Int32)\n  nameWithType: Marshal.UnsafeAddrOfPinnedArrayElement(Array, Int32)\n  fullName: Marshal.UnsafeAddrOfPinnedArrayElement(Array, Int32)\n- uid: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: UnsafeAddrOfPinnedArrayElement<T>(T[], Int32)\n  nameWithType: Marshal.UnsafeAddrOfPinnedArrayElement<T>(T[], Int32)\n  fullName: Marshal.UnsafeAddrOfPinnedArrayElement<T>(T[], Int32)\n- uid: System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteByte(Object, Int32, Byte)\n  nameWithType: Marshal.WriteByte(Object, Int32, Byte)\n  fullName: Marshal.WriteByte(Object, Int32, Byte)\n- uid: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteByte(IntPtr, Int32, Byte)\n  nameWithType: Marshal.WriteByte(IntPtr, Int32, Byte)\n  fullName: Marshal.WriteByte(IntPtr, Int32, Byte)\n- uid: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteByte(IntPtr, Byte)\n  nameWithType: Marshal.WriteByte(IntPtr, Byte)\n  fullName: Marshal.WriteByte(IntPtr, Byte)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteInt16(IntPtr, Char)\n  nameWithType: Marshal.WriteInt16(IntPtr, Char)\n  fullName: Marshal.WriteInt16(IntPtr, Char)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteInt16(IntPtr, Int16)\n  nameWithType: Marshal.WriteInt16(IntPtr, Int16)\n  fullName: Marshal.WriteInt16(IntPtr, Int16)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteInt16(IntPtr, Int32, Char)\n  nameWithType: Marshal.WriteInt16(IntPtr, Int32, Char)\n  fullName: Marshal.WriteInt16(IntPtr, Int32, Char)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteInt16(IntPtr, Int32, Int16)\n  nameWithType: Marshal.WriteInt16(IntPtr, Int32, Int16)\n  fullName: Marshal.WriteInt16(IntPtr, Int32, Int16)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteInt16(Object, Int32, Char)\n  nameWithType: Marshal.WriteInt16(Object, Int32, Char)\n  fullName: Marshal.WriteInt16(Object, Int32, Char)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteInt16(Object, Int32, Int16)\n  nameWithType: Marshal.WriteInt16(Object, Int32, Int16)\n  fullName: Marshal.WriteInt16(Object, Int32, Int16)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteInt32(IntPtr, Int32)\n  nameWithType: Marshal.WriteInt32(IntPtr, Int32)\n  fullName: Marshal.WriteInt32(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteInt32(IntPtr, Int32, Int32)\n  nameWithType: Marshal.WriteInt32(IntPtr, Int32, Int32)\n  fullName: Marshal.WriteInt32(IntPtr, Int32, Int32)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteInt32(Object, Int32, Int32)\n  nameWithType: Marshal.WriteInt32(Object, Int32, Int32)\n  fullName: Marshal.WriteInt32(Object, Int32, Int32)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteInt64(Object, Int32, Int64)\n  nameWithType: Marshal.WriteInt64(Object, Int32, Int64)\n  fullName: Marshal.WriteInt64(Object, Int32, Int64)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteInt64(IntPtr, Int64)\n  nameWithType: Marshal.WriteInt64(IntPtr, Int64)\n  fullName: Marshal.WriteInt64(IntPtr, Int64)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteInt64(IntPtr, Int32, Int64)\n  nameWithType: Marshal.WriteInt64(IntPtr, Int32, Int64)\n  fullName: Marshal.WriteInt64(IntPtr, Int32, Int64)\n- uid: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteIntPtr(IntPtr, IntPtr)\n  nameWithType: Marshal.WriteIntPtr(IntPtr, IntPtr)\n  fullName: Marshal.WriteIntPtr(IntPtr, IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteIntPtr(IntPtr, Int32, IntPtr)\n  nameWithType: Marshal.WriteIntPtr(IntPtr, Int32, IntPtr)\n  fullName: Marshal.WriteIntPtr(IntPtr, Int32, IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteIntPtr(Object, Int32, IntPtr)\n  nameWithType: Marshal.WriteIntPtr(Object, Int32, IntPtr)\n  fullName: Marshal.WriteIntPtr(Object, Int32, IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ZeroFreeBSTR(IntPtr)\n  nameWithType: Marshal.ZeroFreeBSTR(IntPtr)\n  fullName: Marshal.ZeroFreeBSTR(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ZeroFreeCoTaskMemAnsi(IntPtr)\n  nameWithType: Marshal.ZeroFreeCoTaskMemAnsi(IntPtr)\n  fullName: Marshal.ZeroFreeCoTaskMemAnsi(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ZeroFreeCoTaskMemUnicode(IntPtr)\n  nameWithType: Marshal.ZeroFreeCoTaskMemUnicode(IntPtr)\n  fullName: Marshal.ZeroFreeCoTaskMemUnicode(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ZeroFreeCoTaskMemUTF8(IntPtr)\n  nameWithType: Marshal.ZeroFreeCoTaskMemUTF8(IntPtr)\n  fullName: Marshal.ZeroFreeCoTaskMemUTF8(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ZeroFreeGlobalAllocAnsi(IntPtr)\n  nameWithType: Marshal.ZeroFreeGlobalAllocAnsi(IntPtr)\n  fullName: Marshal.ZeroFreeGlobalAllocAnsi(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ZeroFreeGlobalAllocUnicode(IntPtr)\n  nameWithType: Marshal.ZeroFreeGlobalAllocUnicode(IntPtr)\n  fullName: Marshal.ZeroFreeGlobalAllocUnicode(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.AddRef*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: AddRef\n  nameWithType: Marshal.AddRef\n  fullName: Marshal.AddRef\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.AllocCoTaskMem*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: AllocCoTaskMem\n  nameWithType: Marshal.AllocCoTaskMem\n  fullName: Marshal.AllocCoTaskMem\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.AllocHGlobal*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: AllocHGlobal\n  nameWithType: Marshal.AllocHGlobal\n  fullName: Marshal.AllocHGlobal\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: AreComObjectsAvailableForCleanup\n  nameWithType: Marshal.AreComObjectsAvailableForCleanup\n  fullName: Marshal.AreComObjectsAvailableForCleanup\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.BindToMoniker*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: BindToMoniker\n  nameWithType: Marshal.BindToMoniker\n  fullName: Marshal.BindToMoniker\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.BufferToBSTR*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: BufferToBSTR\n  nameWithType: Marshal.BufferToBSTR\n  fullName: Marshal.BufferToBSTR\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ChangeWrapperHandleStrength\n  nameWithType: Marshal.ChangeWrapperHandleStrength\n  fullName: Marshal.ChangeWrapperHandleStrength\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: CleanupUnusedObjectsInCurrentContext\n  nameWithType: Marshal.CleanupUnusedObjectsInCurrentContext\n  fullName: Marshal.CleanupUnusedObjectsInCurrentContext\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.Copy*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: Copy\n  nameWithType: Marshal.Copy\n  fullName: Marshal.Copy\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.CreateAggregatedObject*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: CreateAggregatedObject\n  nameWithType: Marshal.CreateAggregatedObject\n  fullName: Marshal.CreateAggregatedObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: CreateAggregatedObject<T>\n  nameWithType: Marshal.CreateAggregatedObject<T>\n  fullName: Marshal.CreateAggregatedObject<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.CreateWrapperOfType*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: CreateWrapperOfType\n  nameWithType: Marshal.CreateWrapperOfType\n  fullName: Marshal.CreateWrapperOfType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: CreateWrapperOfType<T,TWrapper>\n  nameWithType: Marshal.CreateWrapperOfType<T,TWrapper>\n  fullName: Marshal.CreateWrapperOfType<T,TWrapper>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.DestroyStructure*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: DestroyStructure\n  nameWithType: Marshal.DestroyStructure\n  fullName: Marshal.DestroyStructure\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.DestroyStructure``1*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: DestroyStructure<T>\n  nameWithType: Marshal.DestroyStructure<T>\n  fullName: Marshal.DestroyStructure<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.FinalReleaseComObject*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: FinalReleaseComObject\n  nameWithType: Marshal.FinalReleaseComObject\n  fullName: Marshal.FinalReleaseComObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.FreeBSTR*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: FreeBSTR\n  nameWithType: Marshal.FreeBSTR\n  fullName: Marshal.FreeBSTR\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.FreeCoTaskMem*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: FreeCoTaskMem\n  nameWithType: Marshal.FreeCoTaskMem\n  fullName: Marshal.FreeCoTaskMem\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.FreeHGlobal*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: FreeHGlobal\n  nameWithType: Marshal.FreeHGlobal\n  fullName: Marshal.FreeHGlobal\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GenerateGuidForType*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GenerateGuidForType\n  nameWithType: Marshal.GenerateGuidForType\n  fullName: Marshal.GenerateGuidForType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GenerateProgIdForType*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GenerateProgIdForType\n  nameWithType: Marshal.GenerateProgIdForType\n  fullName: Marshal.GenerateProgIdForType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetActiveObject*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetActiveObject\n  nameWithType: Marshal.GetActiveObject\n  fullName: Marshal.GetActiveObject\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetComInterfaceForObject\n  nameWithType: Marshal.GetComInterfaceForObject\n  fullName: Marshal.GetComInterfaceForObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetComInterfaceForObject<T,TInterface>\n  nameWithType: Marshal.GetComInterfaceForObject<T,TInterface>\n  fullName: Marshal.GetComInterfaceForObject<T,TInterface>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetComInterfaceForObjectInContext\n  nameWithType: Marshal.GetComInterfaceForObjectInContext\n  fullName: Marshal.GetComInterfaceForObjectInContext\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetComObjectData*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetComObjectData\n  nameWithType: Marshal.GetComObjectData\n  fullName: Marshal.GetComObjectData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetComSlotForMethodInfo\n  nameWithType: Marshal.GetComSlotForMethodInfo\n  fullName: Marshal.GetComSlotForMethodInfo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetDelegateForFunctionPointer\n  nameWithType: Marshal.GetDelegateForFunctionPointer\n  fullName: Marshal.GetDelegateForFunctionPointer\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetDelegateForFunctionPointer<TDelegate>\n  nameWithType: Marshal.GetDelegateForFunctionPointer<TDelegate>\n  fullName: Marshal.GetDelegateForFunctionPointer<TDelegate>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetEndComSlot*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetEndComSlot\n  nameWithType: Marshal.GetEndComSlot\n  fullName: Marshal.GetEndComSlot\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetExceptionCode*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetExceptionCode\n  nameWithType: Marshal.GetExceptionCode\n  fullName: Marshal.GetExceptionCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetExceptionForHR*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetExceptionForHR\n  nameWithType: Marshal.GetExceptionForHR\n  fullName: Marshal.GetExceptionForHR\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetExceptionPointers*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetExceptionPointers\n  nameWithType: Marshal.GetExceptionPointers\n  fullName: Marshal.GetExceptionPointers\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetFunctionPointerForDelegate\n  nameWithType: Marshal.GetFunctionPointerForDelegate\n  fullName: Marshal.GetFunctionPointerForDelegate\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetFunctionPointerForDelegate<TDelegate>\n  nameWithType: Marshal.GetFunctionPointerForDelegate<TDelegate>\n  fullName: Marshal.GetFunctionPointerForDelegate<TDelegate>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetHINSTANCE*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetHINSTANCE\n  nameWithType: Marshal.GetHINSTANCE\n  fullName: Marshal.GetHINSTANCE\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetHRForException*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetHRForException\n  nameWithType: Marshal.GetHRForException\n  fullName: Marshal.GetHRForException\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetHRForLastWin32Error\n  nameWithType: Marshal.GetHRForLastWin32Error\n  fullName: Marshal.GetHRForLastWin32Error\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetIDispatchForObject*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetIDispatchForObject\n  nameWithType: Marshal.GetIDispatchForObject\n  fullName: Marshal.GetIDispatchForObject\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetIDispatchForObjectInContext*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetIDispatchForObjectInContext\n  nameWithType: Marshal.GetIDispatchForObjectInContext\n  fullName: Marshal.GetIDispatchForObjectInContext\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetITypeInfoForType*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetITypeInfoForType\n  nameWithType: Marshal.GetITypeInfoForType\n  fullName: Marshal.GetITypeInfoForType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetIUnknownForObject*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetIUnknownForObject\n  nameWithType: Marshal.GetIUnknownForObject\n  fullName: Marshal.GetIUnknownForObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetIUnknownForObjectInContext\n  nameWithType: Marshal.GetIUnknownForObjectInContext\n  fullName: Marshal.GetIUnknownForObjectInContext\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetLastWin32Error*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetLastWin32Error\n  nameWithType: Marshal.GetLastWin32Error\n  fullName: Marshal.GetLastWin32Error\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetManagedThunkForUnmanagedMethodPtr\n  nameWithType: Marshal.GetManagedThunkForUnmanagedMethodPtr\n  fullName: Marshal.GetManagedThunkForUnmanagedMethodPtr\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetMethodInfoForComSlot\n  nameWithType: Marshal.GetMethodInfoForComSlot\n  fullName: Marshal.GetMethodInfoForComSlot\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetNativeVariantForObject\n  nameWithType: Marshal.GetNativeVariantForObject\n  fullName: Marshal.GetNativeVariantForObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetNativeVariantForObject<T>\n  nameWithType: Marshal.GetNativeVariantForObject<T>\n  fullName: Marshal.GetNativeVariantForObject<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetObjectForIUnknown*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetObjectForIUnknown\n  nameWithType: Marshal.GetObjectForIUnknown\n  fullName: Marshal.GetObjectForIUnknown\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetObjectForNativeVariant\n  nameWithType: Marshal.GetObjectForNativeVariant\n  fullName: Marshal.GetObjectForNativeVariant\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetObjectForNativeVariant<T>\n  nameWithType: Marshal.GetObjectForNativeVariant<T>\n  fullName: Marshal.GetObjectForNativeVariant<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetObjectsForNativeVariants\n  nameWithType: Marshal.GetObjectsForNativeVariants\n  fullName: Marshal.GetObjectsForNativeVariants\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetObjectsForNativeVariants<T>\n  nameWithType: Marshal.GetObjectsForNativeVariants<T>\n  fullName: Marshal.GetObjectsForNativeVariants<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetStartComSlot*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetStartComSlot\n  nameWithType: Marshal.GetStartComSlot\n  fullName: Marshal.GetStartComSlot\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetThreadFromFiberCookie*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetThreadFromFiberCookie\n  nameWithType: Marshal.GetThreadFromFiberCookie\n  fullName: Marshal.GetThreadFromFiberCookie\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetTypedObjectForIUnknown\n  nameWithType: Marshal.GetTypedObjectForIUnknown\n  fullName: Marshal.GetTypedObjectForIUnknown\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetTypeForITypeInfo\n  nameWithType: Marshal.GetTypeForITypeInfo\n  fullName: Marshal.GetTypeForITypeInfo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetTypeFromCLSID*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetTypeFromCLSID\n  nameWithType: Marshal.GetTypeFromCLSID\n  fullName: Marshal.GetTypeFromCLSID\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetTypeInfoName*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetTypeInfoName\n  nameWithType: Marshal.GetTypeInfoName\n  fullName: Marshal.GetTypeInfoName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetTypeLibGuid*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetTypeLibGuid\n  nameWithType: Marshal.GetTypeLibGuid\n  fullName: Marshal.GetTypeLibGuid\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetTypeLibGuidForAssembly\n  nameWithType: Marshal.GetTypeLibGuidForAssembly\n  fullName: Marshal.GetTypeLibGuidForAssembly\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetTypeLibLcid*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetTypeLibLcid\n  nameWithType: Marshal.GetTypeLibLcid\n  fullName: Marshal.GetTypeLibLcid\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetTypeLibName*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetTypeLibName\n  nameWithType: Marshal.GetTypeLibName\n  fullName: Marshal.GetTypeLibName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetTypeLibVersionForAssembly*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetTypeLibVersionForAssembly\n  nameWithType: Marshal.GetTypeLibVersionForAssembly\n  fullName: Marshal.GetTypeLibVersionForAssembly\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetUniqueObjectForIUnknown\n  nameWithType: Marshal.GetUniqueObjectForIUnknown\n  fullName: Marshal.GetUniqueObjectForIUnknown\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: GetUnmanagedThunkForManagedMethodPtr\n  nameWithType: Marshal.GetUnmanagedThunkForManagedMethodPtr\n  fullName: Marshal.GetUnmanagedThunkForManagedMethodPtr\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.IsComObject*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: IsComObject\n  nameWithType: Marshal.IsComObject\n  fullName: Marshal.IsComObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: IsTypeVisibleFromCom\n  nameWithType: Marshal.IsTypeVisibleFromCom\n  fullName: Marshal.IsTypeVisibleFromCom\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.NumParamBytes*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: NumParamBytes\n  nameWithType: Marshal.NumParamBytes\n  fullName: Marshal.NumParamBytes\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.OffsetOf*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: OffsetOf\n  nameWithType: Marshal.OffsetOf\n  fullName: Marshal.OffsetOf\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.OffsetOf``1*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: OffsetOf<T>\n  nameWithType: Marshal.OffsetOf<T>\n  fullName: Marshal.OffsetOf<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.Prelink*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: Prelink\n  nameWithType: Marshal.Prelink\n  fullName: Marshal.Prelink\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.PrelinkAll*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: PrelinkAll\n  nameWithType: Marshal.PrelinkAll\n  fullName: Marshal.PrelinkAll\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringAnsi*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: PtrToStringAnsi\n  nameWithType: Marshal.PtrToStringAnsi\n  fullName: Marshal.PtrToStringAnsi\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringAuto*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: PtrToStringAuto\n  nameWithType: Marshal.PtrToStringAuto\n  fullName: Marshal.PtrToStringAuto\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringBSTR*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: PtrToStringBSTR\n  nameWithType: Marshal.PtrToStringBSTR\n  fullName: Marshal.PtrToStringBSTR\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringUni*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: PtrToStringUni\n  nameWithType: Marshal.PtrToStringUni\n  fullName: Marshal.PtrToStringUni\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringUTF8*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: PtrToStringUTF8\n  nameWithType: Marshal.PtrToStringUTF8\n  fullName: Marshal.PtrToStringUTF8\n  monikers:\n  - netcore-1.1\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.PtrToStructure*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: PtrToStructure\n  nameWithType: Marshal.PtrToStructure\n  fullName: Marshal.PtrToStructure\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.PtrToStructure``1*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: PtrToStructure<T>\n  nameWithType: Marshal.PtrToStructure<T>\n  fullName: Marshal.PtrToStructure<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.QueryInterface*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: QueryInterface\n  nameWithType: Marshal.QueryInterface\n  fullName: Marshal.QueryInterface\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.ReadByte*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReadByte\n  nameWithType: Marshal.ReadByte\n  fullName: Marshal.ReadByte\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.ReadInt16*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReadInt16\n  nameWithType: Marshal.ReadInt16\n  fullName: Marshal.ReadInt16\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.ReadInt32*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReadInt32\n  nameWithType: Marshal.ReadInt32\n  fullName: Marshal.ReadInt32\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.ReadInt64*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReadInt64\n  nameWithType: Marshal.ReadInt64\n  fullName: Marshal.ReadInt64\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.ReadIntPtr*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReadIntPtr\n  nameWithType: Marshal.ReadIntPtr\n  fullName: Marshal.ReadIntPtr\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReAllocCoTaskMem\n  nameWithType: Marshal.ReAllocCoTaskMem\n  fullName: Marshal.ReAllocCoTaskMem\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.ReAllocHGlobal*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReAllocHGlobal\n  nameWithType: Marshal.ReAllocHGlobal\n  fullName: Marshal.ReAllocHGlobal\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.Release*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: Release\n  nameWithType: Marshal.Release\n  fullName: Marshal.Release\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.ReleaseComObject*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReleaseComObject\n  nameWithType: Marshal.ReleaseComObject\n  fullName: Marshal.ReleaseComObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.ReleaseThreadCache*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ReleaseThreadCache\n  nameWithType: Marshal.ReleaseThreadCache\n  fullName: Marshal.ReleaseThreadCache\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.SecureStringToBSTR*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: SecureStringToBSTR\n  nameWithType: Marshal.SecureStringToBSTR\n  fullName: Marshal.SecureStringToBSTR\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: SecureStringToCoTaskMemAnsi\n  nameWithType: Marshal.SecureStringToCoTaskMemAnsi\n  fullName: Marshal.SecureStringToCoTaskMemAnsi\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: SecureStringToCoTaskMemUnicode\n  nameWithType: Marshal.SecureStringToCoTaskMemUnicode\n  fullName: Marshal.SecureStringToCoTaskMemUnicode\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: SecureStringToGlobalAllocAnsi\n  nameWithType: Marshal.SecureStringToGlobalAllocAnsi\n  fullName: Marshal.SecureStringToGlobalAllocAnsi\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: SecureStringToGlobalAllocUnicode\n  nameWithType: Marshal.SecureStringToGlobalAllocUnicode\n  fullName: Marshal.SecureStringToGlobalAllocUnicode\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.SetComObjectData*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: SetComObjectData\n  nameWithType: Marshal.SetComObjectData\n  fullName: Marshal.SetComObjectData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.SizeOf*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: SizeOf\n  nameWithType: Marshal.SizeOf\n  fullName: Marshal.SizeOf\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.SizeOf``1*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: SizeOf<T>\n  nameWithType: Marshal.SizeOf<T>\n  fullName: Marshal.SizeOf<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.StringToBSTR*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: StringToBSTR\n  nameWithType: Marshal.StringToBSTR\n  fullName: Marshal.StringToBSTR\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: StringToCoTaskMemAnsi\n  nameWithType: Marshal.StringToCoTaskMemAnsi\n  fullName: Marshal.StringToCoTaskMemAnsi\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: StringToCoTaskMemAuto\n  nameWithType: Marshal.StringToCoTaskMemAuto\n  fullName: Marshal.StringToCoTaskMemAuto\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: StringToCoTaskMemUni\n  nameWithType: Marshal.StringToCoTaskMemUni\n  fullName: Marshal.StringToCoTaskMemUni\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: StringToCoTaskMemUTF8\n  nameWithType: Marshal.StringToCoTaskMemUTF8\n  fullName: Marshal.StringToCoTaskMemUTF8\n  monikers:\n  - netcore-1.1\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: StringToHGlobalAnsi\n  nameWithType: Marshal.StringToHGlobalAnsi\n  fullName: Marshal.StringToHGlobalAnsi\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.StringToHGlobalAuto*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: StringToHGlobalAuto\n  nameWithType: Marshal.StringToHGlobalAuto\n  fullName: Marshal.StringToHGlobalAuto\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.StringToHGlobalUni*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: StringToHGlobalUni\n  nameWithType: Marshal.StringToHGlobalUni\n  fullName: Marshal.StringToHGlobalUni\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.StructureToPtr*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: StructureToPtr\n  nameWithType: Marshal.StructureToPtr\n  fullName: Marshal.StructureToPtr\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.StructureToPtr``1*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: StructureToPtr<T>\n  nameWithType: Marshal.StructureToPtr<T>\n  fullName: Marshal.StructureToPtr<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ThrowExceptionForHR\n  nameWithType: Marshal.ThrowExceptionForHR\n  fullName: Marshal.ThrowExceptionForHR\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: UnsafeAddrOfPinnedArrayElement\n  nameWithType: Marshal.UnsafeAddrOfPinnedArrayElement\n  fullName: Marshal.UnsafeAddrOfPinnedArrayElement\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: UnsafeAddrOfPinnedArrayElement<T>\n  nameWithType: Marshal.UnsafeAddrOfPinnedArrayElement<T>\n  fullName: Marshal.UnsafeAddrOfPinnedArrayElement<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.WriteByte*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteByte\n  nameWithType: Marshal.WriteByte\n  fullName: Marshal.WriteByte\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.WriteInt16*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteInt16\n  nameWithType: Marshal.WriteInt16\n  fullName: Marshal.WriteInt16\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.WriteInt32*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteInt32\n  nameWithType: Marshal.WriteInt32\n  fullName: Marshal.WriteInt32\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.WriteInt64*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteInt64\n  nameWithType: Marshal.WriteInt64\n  fullName: Marshal.WriteInt64\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.WriteIntPtr*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: WriteIntPtr\n  nameWithType: Marshal.WriteIntPtr\n  fullName: Marshal.WriteIntPtr\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeBSTR*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ZeroFreeBSTR\n  nameWithType: Marshal.ZeroFreeBSTR\n  fullName: Marshal.ZeroFreeBSTR\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ZeroFreeCoTaskMemAnsi\n  nameWithType: Marshal.ZeroFreeCoTaskMemAnsi\n  fullName: Marshal.ZeroFreeCoTaskMemAnsi\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ZeroFreeCoTaskMemUnicode\n  nameWithType: Marshal.ZeroFreeCoTaskMemUnicode\n  fullName: Marshal.ZeroFreeCoTaskMemUnicode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ZeroFreeCoTaskMemUTF8\n  nameWithType: Marshal.ZeroFreeCoTaskMemUTF8\n  fullName: Marshal.ZeroFreeCoTaskMemUTF8\n  monikers:\n  - netcore-1.1\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ZeroFreeGlobalAllocAnsi\n  nameWithType: Marshal.ZeroFreeGlobalAllocAnsi\n  fullName: Marshal.ZeroFreeGlobalAllocAnsi\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode*\n  parent: System.Runtime.InteropServices.Marshal\n  isExternal: false\n  name: ZeroFreeGlobalAllocUnicode\n  nameWithType: Marshal.ZeroFreeGlobalAllocUnicode\n  fullName: Marshal.ZeroFreeGlobalAllocUnicode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/Marshal.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n","yamlblock":true}