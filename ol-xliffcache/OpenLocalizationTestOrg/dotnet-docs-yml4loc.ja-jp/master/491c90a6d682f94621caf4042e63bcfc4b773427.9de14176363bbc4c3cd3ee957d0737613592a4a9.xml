{"nodes":[{"content":"Represents an asynchronous operation.","nodes":[{"pos":[0,37],"content":"Represents an asynchronous operation.","nodes":[{"content":"Represents an asynchronous operation.","pos":[0,37]}]}],"pos":[8750,8788],"yaml":true},{"content":"> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/threading/Tasks/Task.cs#045a746eb48cbaa9). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n The <xref:System.Threading.Tasks.Task> class represents a single operation that does not return a value and that usually executes asynchronously. <xref:System.Threading.Tasks.Task> objects are one of the central components of the  [task-based asynchronous pattern](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md) first introduced in the .NET Framework 4. Because the work performed by a <xref:System.Threading.Tasks.Task> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <xref:System.Threading.Tasks.Task.Status%2A> property, as well as the <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, and <xref:System.Threading.Tasks.Task.IsFaulted%2A> properties, to determine the   state of a task. Most commonly, a lambda expression is used to specify the work that the task is to perform.  \n  \n For operations that return values, you use the <xref:System.Threading.Tasks.Task%601> class.  \n  \n In this section:  \n  \n [Creating and executing a task](#Creating)   \n [Separating task creation and execution](#Separating)   \n [Waiting for one or more tasks to complete](#WaitingForOne)   \n [Tasks and culture](#Culture)   \n [For debugger developers](#Debugger)  \n  \n<a name=\"Creating\"></a>   \n## Creating and executing a task  \n <xref:System.Threading.Tasks.Task> instances may be created in a variety of ways. The most common approach, which is available starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], is to call the static <xref:System.Threading.Tasks.Task.Run%2A> method. The <xref:System.Threading.Tasks.Task.Run%2A> method provides a simple way to start a task using default values and without requiring additional parameters. The following example uses the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method to start a task that loops and then displays the number of loop iterations:  \n  \n [!code-csharp[System.Threading.Tasks.Task#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/run1.cs#6)]\n [!code-vb[System.Threading.Tasks.Task#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/run1.vb#6)]  \n  \n An alternative, and the most common method to start a task in [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], is the static <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method. The <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=fullName> property returns a <xref:System.Threading.Tasks.TaskFactory> object. Overloads of the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method let you specify parameters to pass to the task creation options and a task scheduler. The following example uses the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method to start a task. It is functionally equivalent to the code in the previous example.  \n  \n [!code-csharp[System.Threading.Tasks.Task#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/startnew1.cs#7)]\n [!code-vb[System.Threading.Tasks.Task#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/startnew1.vb#7)]  \n  \n For more complete examples, see [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md).  \n  \n<a name=\"Separating\"></a>   \n## Separating task creation and execution  \n The <xref:System.Threading.Tasks.Task> class also provides constructors that initialize the task but that do not schedule it for execution. For performance reasons, the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method is the preferred mechanism for creating and scheduling computational tasks, but for scenarios where creation and scheduling must be separated, you can use the constructors and then call the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=fullName> method to schedule the task for execution at a later time.  \n  \n<a name=\"WaitingForOne\"></a>   \n## Waiting for one or more tasks to complete  \n Because tasks typically run asynchronously on a thread pool thread, the thread that creates and starts the task continues execution as soon as the task has been instantiated. In some cases, when the calling thread is the main application thread, the app may terminate before any the task actually begins execution. In others,   your application's logic may require that the calling thread continue execution only when one or more tasks has completed execution. You can synchronize the execution of the calling thread and the asynchronous tasks it launches by calling a `Wait` method to wait for one or more tasks to complete.  \n  \n To wait for a single task to complete, you can call its <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName> method. A call to the  <xref:System.Threading.Tasks.Task.Wait%2A> method blocks the calling thread until the single class instance has completed execution.  \n  \n The following example calls the parameterless <xref:System.Threading.Tasks.Task.Wait> method to wait unconditionally until a task completes. The task simulates work by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName> method to sleep for two seconds.  \n  \n [!code-csharp[System.Threading.Tasks.Task#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/Wait1.cs#8)]\n [!code-vb[System.Threading.Tasks.Task#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/Wait1.vb#8)]  \n  \n You can also conditionally wait for a task to complete. The  <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> and <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> methods block the calling thread until the task finishes or a timeout interval elapses, whichever comes first. Since the following example launches a task that sleeps for two seconds but defines a one-second timeout value, the calling thread blocks until the timeout expires and before the task has completed execution.  \n  \n [!code-csharp[System.Threading.Tasks.Task#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/Wait2.cs#9)]\n [!code-vb[System.Threading.Tasks.Task#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/Wait2.vb#9)]  \n  \n You can also supply a cancellation token by calling the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> and  <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> methods. If the  token's <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true`, the wait is cancelled; if it becomes true while the <xref:System.Threading.Tasks.Task.Wait%2A> method terminates.  \n  \n In some cases, you may want to wait for the first of a series of executing tasks to complete, but don't care which task it is.  For this purpose, you can call one of the overloads of the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=fullName> method.  The following example creates three tasks, each of which sleeps for an interval determine by a random number generator. The <xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29> method waits for the first task to complete. The example then displays information about the status of all three tasks.  \n  \n [!code-csharp[System.Threading.Tasks.Task#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WhenAny1.cs#10)]\n [!code-vb[System.Threading.Tasks.Task#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAny1.vb#10)]  \n  \n You can also wait for all of a series of tasks to complete by calling the <xref:System.Threading.Tasks.Task.WaitAll%2A> method. The following example creates ten tasks, waits for all ten to complete, and then displays their status.  \n  \n [!code-csharp[System.Threading.Tasks.Task#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WaitAll1.cs#11)]\n [!code-vb[System.Threading.Tasks.Task#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAll1.vb#11)]  \n  \n Note that when you wait for one or more tasks to complete, any exceptions thrown in the running tasks are propagated on the thread that calls the `Wait` method, as the following example shows. It launches 12 tasks, three of which complete normally and three of which throw an exception. Of the remaining six tasks, three are cancelled before the start, and three are cancelled while they executing. Exceptions are thrown in the <xref:System.Threading.Tasks.Task.WaitAll%2A> method call and are handled by a `try`/`catch` block.  \n  \n [!code-csharp[System.Threading.Tasks.Task#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WaitAll2.cs#12)]\n [!code-vb[System.Threading.Tasks.Task#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAll2.vb#12)]  \n  \n For more information on exception handling in task-based asynchronous operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).  \n  \n<a name=\"Culture\"></a>   \n## Tasks and culture  \n Starting with desktop apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the thread that creates and invokes a task becomes part of the thread's context. That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread. For apps that target versions of the .NET Framework prior to the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the task is the culture of the thread on which the task executes. For more information, see the \"Culture and task-based asynchronous operations\" section in the <xref:System.Globalization.CultureInfo> topic.  \n  \n> [!NOTE]\n>  Store apps follow the Windows Runtime in setting and getting the default culture.  \n  \n<a name=\"Debugger\"></a>   \n## For debugger developers  \n For developers implementing custom debuggers, several internal and private members of task may be useful (these may change from release to release). The `m_taskId` field serves as the backing store for the <xref:System.Threading.Tasks.Task.Id%2A> property, however accessing this field directly from a debugger may be more efficient than accessing the same value through the property's getter method (the `s_taskIdCounter` counter is used to retrieve the next available ID for a task). Similarly, the `m_stateFlags` field stores information about the current lifecycle stage of the task, information also accessible through the <xref:System.Threading.Tasks.Task.Status%2A> property. The `m_action` field stores a reference to the task's delegate, and the `m_stateObject` field stores the async state passed to the task by the developer. Finally, for debuggers that parse stack frames, the `InternalWait` method serves a potential marker for when a task is entering a wait operation.","nodes":[{"pos":[2,419],"content":"[!NOTE]\n To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/threading/Tasks/Task.cs#045a746eb48cbaa9). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","leadings":["","> "],"nodes":[{"content":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/threading/Tasks/Task.cs#045a746eb48cbaa9). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","pos":[8,415],"nodes":[{"content":"To view the .NET Framework source code for this type, see the <bpt id=\"p1\">[</bpt>Reference Source<ept id=\"p1\">](http://referencesource.microsoft.com/#mscorlib/system/threading/Tasks/Task.cs#045a746eb48cbaa9)</ept>.","pos":[1,178],"source":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/threading/Tasks/Task.cs#045a746eb48cbaa9)."},{"content":"You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id=\"p1\">[</bpt>instructions<ept id=\"p1\">](http://referencesource.microsoft.com/)</ept>.","pos":[179,407],"source":" You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/)."}]}]},{"pos":[426,1391],"content":"The <xref:System.Threading.Tasks.Task> class represents a single operation that does not return a value and that usually executes asynchronously. <xref:System.Threading.Tasks.Task> objects are one of the central components of the  [task-based asynchronous pattern](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md) first introduced in the .NET Framework 4. Because the work performed by a <xref:System.Threading.Tasks.Task> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <xref:System.Threading.Tasks.Task.Status%2A> property, as well as the <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, and <xref:System.Threading.Tasks.Task.IsFaulted%2A> properties, to determine the   state of a task. Most commonly, a lambda expression is used to specify the work that the task is to perform.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> class represents a single operation that does not return a value and that usually executes asynchronously.","pos":[0,145],"source":"The <xref:System.Threading.Tasks.Task> class represents a single operation that does not return a value and that usually executes asynchronously."},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objects are one of the central components of the  <bpt id=\"p1\">[</bpt>task-based asynchronous pattern<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)</ept> first introduced in the .NET Framework 4.","pos":[146,396],"source":" <xref:System.Threading.Tasks.Task> objects are one of the central components of the  [task-based asynchronous pattern](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md) first introduced in the .NET Framework 4."},{"content":"Because the work performed by a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property, as well as the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.IsCanceled%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.Task.IsCompleted%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Threading.Tasks.Task.IsFaulted%2A&gt;</ph> properties, to determine the   state of a task.","pos":[397,873],"source":" Because the work performed by a <xref:System.Threading.Tasks.Task> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <xref:System.Threading.Tasks.Task.Status%2A> property, as well as the <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, and <xref:System.Threading.Tasks.Task.IsFaulted%2A> properties, to determine the   state of a task."},{"content":"Most commonly, a lambda expression is used to specify the work that the task is to perform.","pos":[874,965]}]},{"pos":[1398,1490],"content":"For operations that return values, you use the <xref:System.Threading.Tasks.Task%601> class.","nodes":[{"content":"For operations that return values, you use the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> class.","pos":[0,92],"source":"For operations that return values, you use the <xref:System.Threading.Tasks.Task%601> class."}]},{"pos":[1497,1513],"content":"In this section:","nodes":[{"content":"In this section:","pos":[0,16]}]},{"pos":[1520,1759],"content":"[Creating and executing a task](#Creating)   \n [Separating task creation and execution](#Separating)   \n [Waiting for one or more tasks to complete](#WaitingForOne)   \n [Tasks and culture](#Culture)   \n [For debugger developers](#Debugger)","nodes":[{"content":"<bpt id=\"p1\">[</bpt>Creating and executing a task<ept id=\"p1\">](#Creating)</ept><ph id=\"ph1\"> </ph>","pos":[0,43],"source":"[Creating and executing a task](#Creating) "},{"content":"<bpt id=\"p1\"> [</bpt>Separating task creation and execution<ept id=\"p1\">](#Separating)</ept><ph id=\"ph1\"> </ph>","pos":[46,101],"source":" [Separating task creation and execution](#Separating) "},{"content":"<bpt id=\"p1\"> [</bpt>Waiting for one or more tasks to complete<ept id=\"p1\">](#WaitingForOne)</ept><ph id=\"ph1\"> </ph>","pos":[104,165],"source":" [Waiting for one or more tasks to complete](#WaitingForOne) "},{"content":"<bpt id=\"p1\"> [</bpt>Tasks and culture<ept id=\"p1\">](#Culture)</ept><ph id=\"ph1\"> </ph>","pos":[168,199],"source":" [Tasks and culture](#Culture) "},{"content":"<bpt id=\"p1\"> [</bpt>For debugger developers<ept id=\"p1\">](#Debugger)</ept>","pos":[202,239],"source":" [For debugger developers](#Debugger)"}]},{"pos":[1795,1824],"content":"Creating and executing a task","linkify":"Creating and executing a task","nodes":[{"content":"Creating and executing a task","pos":[0,29]}]},{"pos":[1828,2420],"content":"<xref:System.Threading.Tasks.Task> instances may be created in a variety of ways. The most common approach, which is available starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], is to call the static <xref:System.Threading.Tasks.Task.Run%2A> method. The <xref:System.Threading.Tasks.Task.Run%2A> method provides a simple way to start a task using default values and without requiring additional parameters. The following example uses the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method to start a task that loops and then displays the number of loop iterations:","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> instances may be created in a variety of ways.","pos":[0,81],"source":"<xref:System.Threading.Tasks.Task> instances may be created in a variety of ways."},{"content":"The most common approach, which is available starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, is to call the static <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method.","pos":[82,263],"source":" The most common approach, which is available starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], is to call the static <xref:System.Threading.Tasks.Task.Run%2A> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method provides a simple way to start a task using default values and without requiring additional parameters.","pos":[264,420],"source":" The <xref:System.Threading.Tasks.Task.Run%2A> method provides a simple way to start a task using default values and without requiring additional parameters."},{"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%29&gt;</ph> method to start a task that loops and then displays the number of loop iterations:","pos":[421,592],"source":" The following example uses the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method to start a task that loops and then displays the number of loop iterations:"}]},{"pos":[2427,2702],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Threading.Tasks.Task#6<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/run1.cs#6)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Threading.Tasks.Task#6<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/run1.vb#6)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Threading.Tasks.Task#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/run1.cs#6)]\n [!code-vb[System.Threading.Tasks.Task#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/run1.vb#6)]"},{"pos":[2709,3464],"content":"An alternative, and the most common method to start a task in [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], is the static <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method. The <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=fullName> property returns a <xref:System.Threading.Tasks.TaskFactory> object. Overloads of the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method let you specify parameters to pass to the task creation options and a task scheduler. The following example uses the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method to start a task. It is functionally equivalent to the code in the previous example.","nodes":[{"content":"An alternative, and the most common method to start a task in <ph id=\"ph1\">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, is the static <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,221],"source":"An alternative, and the most common method to start a task in [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], is the static <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=fullName&gt;</ph> property returns a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object.","pos":[222,365],"source":" The <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=fullName> property returns a <xref:System.Threading.Tasks.TaskFactory> object."},{"content":"Overloads of the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName&gt;</ph> method let you specify parameters to pass to the task creation options and a task scheduler.","pos":[366,554],"source":" Overloads of the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method let you specify parameters to pass to the task creation options and a task scheduler."},{"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName&gt;</ph> method to start a task.","pos":[555,688],"source":" The following example uses the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method to start a task."},{"content":"It is functionally equivalent to the code in the previous example.","pos":[689,755]}]},{"pos":[3471,3756],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Threading.Tasks.Task#7<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/startnew1.cs#7)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Threading.Tasks.Task#7<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/startnew1.vb#7)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Threading.Tasks.Task#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/startnew1.cs#7)]\n [!code-vb[System.Threading.Tasks.Task#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/startnew1.vb#7)]"},{"pos":[3763,3910],"content":"For more complete examples, see <bpt id=\"p1\">[</bpt>Task-based Asynchronous Programming<ept id=\"p1\">](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)</ept>.","source":"For more complete examples, see [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)."},{"pos":[3948,3986],"content":"Separating task creation and execution","linkify":"Separating task creation and execution","nodes":[{"content":"Separating task creation and execution","pos":[0,38]}]},{"pos":[3990,4632],"content":"The <xref:System.Threading.Tasks.Task> class also provides constructors that initialize the task but that do not schedule it for execution. For performance reasons, the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method is the preferred mechanism for creating and scheduling computational tasks, but for scenarios where creation and scheduling must be separated, you can use the constructors and then call the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=fullName> method to schedule the task for execution at a later time.","nodes":[{"content":"The <xref:System.Threading.Tasks.Task> class also provides constructors that initialize the task but that do not schedule it for execution. For performance reasons, the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method is the preferred mechanism for creating and scheduling computational tasks, but for scenarios where creation and scheduling must be separated, you can use the constructors and then call the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=fullName> method to schedule the task for execution at a later time.","pos":[0,642],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> class also provides constructors that initialize the task but that do not schedule it for execution.","pos":[0,139],"source":"The <xref:System.Threading.Tasks.Task> class also provides constructors that initialize the task but that do not schedule it for execution."},{"content":"For performance reasons, the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName&gt;</ph> method is the preferred mechanism for creating and scheduling computational tasks, but for scenarios where creation and scheduling must be separated, you can use the constructors and then call the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.Start%2A?displayProperty=fullName&gt;</ph> method to schedule the task for execution at a later time.","pos":[140,642],"source":" For performance reasons, the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method is the preferred mechanism for creating and scheduling computational tasks, but for scenarios where creation and scheduling must be separated, you can use the constructors and then call the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=fullName> method to schedule the task for execution at a later time."}]}]},{"pos":[4673,4714],"content":"Waiting for one or more tasks to complete","linkify":"Waiting for one or more tasks to complete","nodes":[{"content":"Waiting for one or more tasks to complete","pos":[0,41]}]},{"pos":[4718,5343],"content":"Because tasks typically run asynchronously on a thread pool thread, the thread that creates and starts the task continues execution as soon as the task has been instantiated. In some cases, when the calling thread is the main application thread, the app may terminate before any the task actually begins execution. In others,   your application's logic may require that the calling thread continue execution only when one or more tasks has completed execution. You can synchronize the execution of the calling thread and the asynchronous tasks it launches by calling a `Wait` method to wait for one or more tasks to complete.","nodes":[{"content":"Because tasks typically run asynchronously on a thread pool thread, the thread that creates and starts the task continues execution as soon as the task has been instantiated.","pos":[0,174]},{"content":"In some cases, when the calling thread is the main application thread, the app may terminate before any the task actually begins execution.","pos":[175,314]},{"content":"In others,   your application's logic may require that the calling thread continue execution only when one or more tasks has completed execution.","pos":[315,460]},{"content":"You can synchronize the execution of the calling thread and the asynchronous tasks it launches by calling a <ph id=\"ph1\">`Wait`</ph> method to wait for one or more tasks to complete.","pos":[461,625],"source":" You can synchronize the execution of the calling thread and the asynchronous tasks it launches by calling a `Wait` method to wait for one or more tasks to complete."}]},{"pos":[5350,5629],"content":"To wait for a single task to complete, you can call its <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName> method. A call to the  <xref:System.Threading.Tasks.Task.Wait%2A> method blocks the calling thread until the single class instance has completed execution.","nodes":[{"content":"To wait for a single task to complete, you can call its <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName> method. A call to the  <xref:System.Threading.Tasks.Task.Wait%2A> method blocks the calling thread until the single class instance has completed execution.","pos":[0,279],"nodes":[{"content":"To wait for a single task to complete, you can call its <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,131],"source":"To wait for a single task to complete, you can call its <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName> method."},{"content":"A call to the  <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> method blocks the calling thread until the single class instance has completed execution.","pos":[132,279],"source":" A call to the  <xref:System.Threading.Tasks.Task.Wait%2A> method blocks the calling thread until the single class instance has completed execution."}]}]},{"pos":[5636,5913],"content":"The following example calls the parameterless <xref:System.Threading.Tasks.Task.Wait> method to wait unconditionally until a task completes. The task simulates work by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName> method to sleep for two seconds.","nodes":[{"content":"The following example calls the parameterless <xref:System.Threading.Tasks.Task.Wait> method to wait unconditionally until a task completes. The task simulates work by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName> method to sleep for two seconds.","pos":[0,277],"nodes":[{"content":"The following example calls the parameterless <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Wait&gt;</ph> method to wait unconditionally until a task completes.","pos":[0,140],"source":"The following example calls the parameterless <xref:System.Threading.Tasks.Task.Wait> method to wait unconditionally until a task completes."},{"content":"The task simulates work by calling the <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt;</ph> method to sleep for two seconds.","pos":[141,277],"source":" The task simulates work by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName> method to sleep for two seconds."}]}]},{"pos":[5920,6197],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Threading.Tasks.Task#8<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/Wait1.cs#8)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Threading.Tasks.Task#8<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/Wait1.vb#8)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Threading.Tasks.Task#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/Wait1.cs#8)]\n [!code-vb[System.Threading.Tasks.Task#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/Wait1.vb#8)]"},{"pos":[6204,6707],"content":"You can also conditionally wait for a task to complete. The  <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> and <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> methods block the calling thread until the task finishes or a timeout interval elapses, whichever comes first. Since the following example launches a task that sleeps for two seconds but defines a one-second timeout value, the calling thread blocks until the timeout expires and before the task has completed execution.","nodes":[{"content":"You can also conditionally wait for a task to complete. The  <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> and <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> methods block the calling thread until the task finishes or a timeout interval elapses, whichever comes first. Since the following example launches a task that sleeps for two seconds but defines a one-second timeout value, the calling thread blocks until the timeout expires and before the task has completed execution.","pos":[0,503],"nodes":[{"content":"You can also conditionally wait for a task to complete.","pos":[0,55]},{"content":"The  <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Int32%29&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29&gt;</ph> methods block the calling thread until the task finishes or a timeout interval elapses, whichever comes first.","pos":[56,294],"source":" The  <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> and <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> methods block the calling thread until the task finishes or a timeout interval elapses, whichever comes first."},{"content":"Since the following example launches a task that sleeps for two seconds but defines a one-second timeout value, the calling thread blocks until the timeout expires and before the task has completed execution.","pos":[295,503]}]}]},{"pos":[6714,6991],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Threading.Tasks.Task#9<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/Wait2.cs#9)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Threading.Tasks.Task#9<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/Wait2.vb#9)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Threading.Tasks.Task#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/Wait2.cs#9)]\n [!code-vb[System.Threading.Tasks.Task#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/Wait2.vb#9)]"},{"pos":[6998,7461],"content":"You can also supply a cancellation token by calling the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> and  <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> methods. If the  token's <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true`, the wait is cancelled; if it becomes true while the <xref:System.Threading.Tasks.Task.Wait%2A> method terminates.","nodes":[{"content":"You can also supply a cancellation token by calling the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29&gt;</ph> and  <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29&gt;</ph> methods.","pos":[0,244],"source":"You can also supply a cancellation token by calling the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> and  <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> methods."},{"content":"If the  token's <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, the wait is cancelled; if it becomes true while the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> method terminates.","pos":[245,463],"source":" If the  token's <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true`, the wait is cancelled; if it becomes true while the <xref:System.Threading.Tasks.Task.Wait%2A> method terminates."}]},{"pos":[7468,8060],"content":"In some cases, you may want to wait for the first of a series of executing tasks to complete, but don't care which task it is.  For this purpose, you can call one of the overloads of the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=fullName> method.  The following example creates three tasks, each of which sleeps for an interval determine by a random number generator. The <xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29> method waits for the first task to complete. The example then displays information about the status of all three tasks.","nodes":[{"content":"In some cases, you may want to wait for the first of a series of executing tasks to complete, but don't care which task it is.  For this purpose, you can call one of the overloads of the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=fullName> method.  The following example creates three tasks, each of which sleeps for an interval determine by a random number generator. The <xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29> method waits for the first task to complete. The example then displays information about the status of all three tasks.","pos":[0,592],"nodes":[{"content":"In some cases, you may want to wait for the first of a series of executing tasks to complete, but don't care which task it is.","pos":[0,126]},{"content":"For this purpose, you can call one of the overloads of the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=fullName&gt;</ph> method.","pos":[128,265],"source":"  For this purpose, you can call one of the overloads of the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=fullName> method."},{"content":"The following example creates three tasks, each of which sleeps for an interval determine by a random number generator.","pos":[267,386]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29&gt;</ph> method waits for the first task to complete.","pos":[387,517],"source":" The <xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29> method waits for the first task to complete."},{"content":"The example then displays information about the status of all three tasks.","pos":[518,592]}]}]},{"pos":[8067,8354],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Threading.Tasks.Task#10<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WhenAny1.cs#10)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Threading.Tasks.Task#10<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAny1.vb#10)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Threading.Tasks.Task#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WhenAny1.cs#10)]\n [!code-vb[System.Threading.Tasks.Task#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAny1.vb#10)]"},{"pos":[8361,8592],"content":"You can also wait for all of a series of tasks to complete by calling the <xref:System.Threading.Tasks.Task.WaitAll%2A> method. The following example creates ten tasks, waits for all ten to complete, and then displays their status.","nodes":[{"content":"You can also wait for all of a series of tasks to complete by calling the <xref:System.Threading.Tasks.Task.WaitAll%2A> method. The following example creates ten tasks, waits for all ten to complete, and then displays their status.","pos":[0,231],"nodes":[{"content":"You can also wait for all of a series of tasks to complete by calling the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.WaitAll%2A&gt;</ph> method.","pos":[0,127],"source":"You can also wait for all of a series of tasks to complete by calling the <xref:System.Threading.Tasks.Task.WaitAll%2A> method."},{"content":"The following example creates ten tasks, waits for all ten to complete, and then displays their status.","pos":[128,231]}]}]},{"pos":[8599,8886],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Threading.Tasks.Task#11<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WaitAll1.cs#11)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Threading.Tasks.Task#11<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAll1.vb#11)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Threading.Tasks.Task#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WaitAll1.cs#11)]\n [!code-vb[System.Threading.Tasks.Task#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAll1.vb#11)]"},{"pos":[8893,9420],"content":"Note that when you wait for one or more tasks to complete, any exceptions thrown in the running tasks are propagated on the thread that calls the `Wait` method, as the following example shows. It launches 12 tasks, three of which complete normally and three of which throw an exception. Of the remaining six tasks, three are cancelled before the start, and three are cancelled while they executing. Exceptions are thrown in the <xref:System.Threading.Tasks.Task.WaitAll%2A> method call and are handled by a `try`/`catch` block.","nodes":[{"content":"Note that when you wait for one or more tasks to complete, any exceptions thrown in the running tasks are propagated on the thread that calls the <ph id=\"ph1\">`Wait`</ph> method, as the following example shows.","pos":[0,192],"source":"Note that when you wait for one or more tasks to complete, any exceptions thrown in the running tasks are propagated on the thread that calls the `Wait` method, as the following example shows."},{"content":"It launches 12 tasks, three of which complete normally and three of which throw an exception.","pos":[193,286]},{"content":"Of the remaining six tasks, three are cancelled before the start, and three are cancelled while they executing.","pos":[287,398]},{"content":"Exceptions are thrown in the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.WaitAll%2A&gt;</ph> method call and are handled by a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[399,527],"source":" Exceptions are thrown in the <xref:System.Threading.Tasks.Task.WaitAll%2A> method call and are handled by a `try`/`catch` block."}]},{"pos":[9427,9714],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Threading.Tasks.Task#12<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WaitAll2.cs#12)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Threading.Tasks.Task#12<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAll2.vb#12)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Threading.Tasks.Task#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WaitAll2.cs#12)]\n [!code-vb[System.Threading.Tasks.Task#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAll2.vb#12)]"},{"pos":[9721,9910],"content":"For more information on exception handling in task-based asynchronous operations, see <bpt id=\"p1\">[</bpt>Exception Handling<ept id=\"p1\">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.","source":"For more information on exception handling in task-based asynchronous operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)."},{"pos":[9945,9962],"content":"Tasks and culture","linkify":"Tasks and culture","nodes":[{"content":"Tasks and culture","pos":[0,17]}]},{"pos":[9966,10640],"content":"Starting with desktop apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the thread that creates and invokes a task becomes part of the thread's context. That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread. For apps that target versions of the .NET Framework prior to the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the task is the culture of the thread on which the task executes. For more information, see the \"Culture and task-based asynchronous operations\" section in the <xref:System.Globalization.CultureInfo> topic.","nodes":[{"content":"Starting with desktop apps that target the <ph id=\"ph1\">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>, the culture of the thread that creates and invokes a task becomes part of the thread's context.","pos":[0,185],"source":"Starting with desktop apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the thread that creates and invokes a task becomes part of the thread's context."},{"content":"That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread.","pos":[186,340]},{"content":"For apps that target versions of the .NET Framework prior to the <ph id=\"ph1\">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>, the culture of the task is the culture of the thread on which the task executes.","pos":[341,533],"source":" For apps that target versions of the .NET Framework prior to the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the task is the culture of the thread on which the task executes."},{"content":"For more information, see the \"Culture and task-based asynchronous operations\" section in the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> topic.","pos":[534,674],"source":" For more information, see the \"Culture and task-based asynchronous operations\" section in the <xref:System.Globalization.CultureInfo> topic."}]},{"pos":[10648,10740],"content":"[!NOTE]\n Store apps follow the Windows Runtime in setting and getting the default culture.","leadings":["","> "],"nodes":[{"content":"Store apps follow the Windows Runtime in setting and getting the default culture.","pos":[9,90]}]},{"pos":[10776,10799],"content":"For debugger developers","linkify":"For debugger developers","nodes":[{"content":"For debugger developers","pos":[0,23]}]},{"pos":[10803,11785],"content":"For developers implementing custom debuggers, several internal and private members of task may be useful (these may change from release to release). The `m_taskId` field serves as the backing store for the <xref:System.Threading.Tasks.Task.Id%2A> property, however accessing this field directly from a debugger may be more efficient than accessing the same value through the property's getter method (the `s_taskIdCounter` counter is used to retrieve the next available ID for a task). Similarly, the `m_stateFlags` field stores information about the current lifecycle stage of the task, information also accessible through the <xref:System.Threading.Tasks.Task.Status%2A> property. The `m_action` field stores a reference to the task's delegate, and the `m_stateObject` field stores the async state passed to the task by the developer. Finally, for debuggers that parse stack frames, the `InternalWait` method serves a potential marker for when a task is entering a wait operation.","nodes":[{"content":"For developers implementing custom debuggers, several internal and private members of task may be useful (these may change from release to release).","pos":[0,148]},{"content":"The <ph id=\"ph1\">`m_taskId`</ph> field serves as the backing store for the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Id%2A&gt;</ph> property, however accessing this field directly from a debugger may be more efficient than accessing the same value through the property's getter method (the <ph id=\"ph3\">`s_taskIdCounter`</ph> counter is used to retrieve the next available ID for a task).","pos":[149,485],"source":" The `m_taskId` field serves as the backing store for the <xref:System.Threading.Tasks.Task.Id%2A> property, however accessing this field directly from a debugger may be more efficient than accessing the same value through the property's getter method (the `s_taskIdCounter` counter is used to retrieve the next available ID for a task)."},{"content":"Similarly, the <ph id=\"ph1\">`m_stateFlags`</ph> field stores information about the current lifecycle stage of the task, information also accessible through the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.","pos":[486,682],"source":" Similarly, the `m_stateFlags` field stores information about the current lifecycle stage of the task, information also accessible through the <xref:System.Threading.Tasks.Task.Status%2A> property."},{"content":"The <ph id=\"ph1\">`m_action`</ph> field stores a reference to the task's delegate, and the <ph id=\"ph2\">`m_stateObject`</ph> field stores the async state passed to the task by the developer.","pos":[683,836],"source":" The `m_action` field stores a reference to the task's delegate, and the `m_stateObject` field stores the async state passed to the task by the developer."},{"content":"Finally, for debuggers that parse stack frames, the <ph id=\"ph1\">`InternalWait`</ph> method serves a potential marker for when a task is entering a wait operation.","pos":[837,982],"source":" Finally, for debuggers that parse stack frames, the `InternalWait` method serves a potential marker for when a task is entering a wait operation."}]}],"pos":[8799,20676],"yaml":true,"extradata":"MT"},{"content":"Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action.","nodes":[{"pos":[0,93],"content":"Initializes a new <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> with the specified action.","source":"Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action."}],"pos":[24593,24687],"yaml":true},{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"pos":[0,472],"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[0,472],"nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object and launch a task is by calling the static <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=fullName&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=fullName&gt;</ph> method.","pos":[0,348],"source":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=fullName> method."},{"content":"The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[349,472]}]}]}],"pos":[24698,25171],"yaml":true,"extradata":"MT"},{"content":"The delegate that represents the code to execute in the task.","nodes":[{"pos":[0,61],"content":"The delegate that represents the code to execute in the task.","nodes":[{"content":"The delegate that represents the code to execute in the task.","pos":[0,61]}]}],"pos":[26781,26843],"yaml":true},{"content":"The <code>action</code> argument is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>action</code> argument is `null`."}],"pos":[27006,27050],"yaml":true},{"content":"Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action and <xref href=\"System.Threading.CancellationToken\"></xref>.","nodes":[{"pos":[0,153],"content":"Initializes a new <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> with the specified action and <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action and <xref href=\"System.Threading.CancellationToken\"></xref>."}],"pos":[28688,28842],"yaml":true},{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> and <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> methods. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.  \n  \n For more information, see [Task Parallelism (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).","nodes":[{"pos":[0,548],"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> and <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> methods. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> and <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> methods. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[0,548],"nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object and launch a task is by calling the static <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName&gt;</ph> methods.","pos":[0,424],"source":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> and <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> methods."},{"content":"The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[425,548]}]}]},{"pos":[555,801],"content":"For more information, see <bpt id=\"p1\">[</bpt>Task Parallelism (Task Parallel Library)<ept id=\"p1\">](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)</ept> and <bpt id=\"p2\">[</bpt>Cancellation in Managed Threads<ept id=\"p2\">](~/docs/standard/threading/cancellation-in-managed-threads.md)</ept>.","source":"For more information, see [Task Parallelism (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md)."}],"pos":[28853,29659],"yaml":true,"extradata":"MT"},{"content":"The delegate that represents the code to execute in the task.","nodes":[{"pos":[0,61],"content":"The delegate that represents the code to execute in the task.","nodes":[{"content":"The delegate that represents the code to execute in the task.","pos":[0,61]}]}],"pos":[31317,31379],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> that the new  task will observe.","nodes":[{"pos":[0,92],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> that the new  task will observe.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> that the new  task will observe."}],"pos":[31473,31566],"yaml":true},{"content":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.","nodes":[{"pos":[0,95],"content":"The provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."}],"pos":[31733,31829],"yaml":true},{"content":"The <code>action</code> argument is null.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>action</code> argument is null."}],"pos":[31931,31973],"yaml":true},{"content":"Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action and creation options.","nodes":[{"pos":[0,114],"content":"Initializes a new <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> with the specified action and creation options.","source":"Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action and creation options."}],"pos":[33641,33756],"yaml":true},{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"pos":[0,431],"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[0,431],"nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object and launch a task is by calling the static <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName&gt;</ph> method.","pos":[0,307],"source":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method."},{"content":"The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[308,431]}]}]}],"pos":[33767,34199],"yaml":true,"extradata":"MT"},{"content":"The delegate that represents the code to execute in the task.","nodes":[{"pos":[0,61],"content":"The delegate that represents the code to execute in the task.","nodes":[{"content":"The delegate that represents the code to execute in the task.","pos":[0,61]}]}],"pos":[34389,34451],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph> used to customize the task's behavior.","source":"The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior."}],"pos":[34551,34658],"yaml":true},{"content":"The <code>action</code> argument is null.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>action</code> argument is null."}],"pos":[34821,34863],"yaml":true},{"content":"The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>.","nodes":[{"pos":[0,137],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>."}],"pos":[34977,35115],"yaml":true},{"content":"Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action and state.","nodes":[{"pos":[0,103],"content":"Initializes a new <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> with the specified action and state.","source":"Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action and state."}],"pos":[36726,36830],"yaml":true},{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"pos":[0,421],"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[0,421],"nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object and launch a task is by calling the static <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=fullName&gt;</ph> method.","pos":[0,297],"source":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=fullName> method."},{"content":"The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[298,421]}]}]}],"pos":[36841,37263],"yaml":true,"extradata":"MT"},{"content":"The delegate that represents the code to execute in the task.","nodes":[{"pos":[0,61],"content":"The delegate that represents the code to execute in the task.","nodes":[{"content":"The delegate that represents the code to execute in the task.","pos":[0,61]}]}],"pos":[38114,38176],"yaml":true},{"content":"An object representing data to be used by the action.","nodes":[{"pos":[0,53],"content":"An object representing data to be used by the action.","nodes":[{"content":"An object representing data to be used by the action.","pos":[0,53]}]}],"pos":[38237,38291],"yaml":true},{"content":"The <code>action</code> argument is null.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>action</code> argument is null."}],"pos":[38454,38496],"yaml":true},{"content":"Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action and creation options.","nodes":[{"pos":[0,114],"content":"Initializes a new <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> with the specified action and creation options.","source":"Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action and creation options."}],"pos":[40326,40441],"yaml":true},{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.  \n  \n For more information, see [Task Parallelism (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Task Cancellation](~/docs/standard/parallel-programming/task-cancellation.md).","nodes":[{"pos":[0,507],"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[0,507],"nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object and launch a task is by calling the static <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName&gt;</ph> method.","pos":[0,383],"source":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method."},{"content":"The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[384,507]}]}]},{"pos":[514,743],"content":"For more information, see <bpt id=\"p1\">[</bpt>Task Parallelism (Task Parallel Library)<ept id=\"p1\">](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)</ept> and <bpt id=\"p2\">[</bpt>Task Cancellation<ept id=\"p2\">](~/docs/standard/parallel-programming/task-cancellation.md)</ept>.","source":"For more information, see [Task Parallelism (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Task Cancellation](~/docs/standard/parallel-programming/task-cancellation.md)."}],"pos":[40452,41200],"yaml":true,"extradata":"MT"},{"content":"The delegate that represents the code to execute in the task.","nodes":[{"pos":[0,61],"content":"The delegate that represents the code to execute in the task.","nodes":[{"content":"The delegate that represents the code to execute in the task.","pos":[0,61]}]}],"pos":[41444,41506],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that the new task will observe.","nodes":[{"pos":[0,109],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"&gt;&lt;/xref&gt;</ph> that the new task will observe.","source":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that the new task will observe."}],"pos":[41600,41710],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph> used to customize the task's behavior.","source":"The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior."}],"pos":[41810,41917],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,136],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[42084,42221],"yaml":true},{"content":"The <code>action</code> argument is null.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>action</code> argument is null."}],"pos":[42323,42365],"yaml":true},{"content":"The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>.","nodes":[{"pos":[0,137],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>."}],"pos":[42479,42617],"yaml":true},{"content":"Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action, state, and options.","nodes":[{"pos":[0,113],"content":"Initializes a new <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> with the specified action, state, and options.","source":"Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action, state, and options."}],"pos":[44390,44504],"yaml":true},{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"pos":[0,458],"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[0,458],"nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object and launch a task is by calling the static <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=fullName&gt;</ph> method.","pos":[0,334],"source":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method."},{"content":"The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[335,458]}]}]}],"pos":[44515,44974],"yaml":true,"extradata":"MT"},{"content":"The delegate that represents the code to execute in the task.","nodes":[{"pos":[0,61],"content":"The delegate that represents the code to execute in the task.","nodes":[{"content":"The delegate that represents the code to execute in the task.","pos":[0,61]}]}],"pos":[45195,45257],"yaml":true},{"content":"An object representing data to be used by the action.","nodes":[{"pos":[0,53],"content":"An object representing data to be used by the action.","nodes":[{"content":"An object representing data to be used by the action.","pos":[0,53]}]}],"pos":[45318,45372],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that that the new task will observe.","nodes":[{"pos":[0,114],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"&gt;&lt;/xref&gt;</ph> that that the new task will observe.","source":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that that the new task will observe."}],"pos":[45466,45581],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,136],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[45748,45885],"yaml":true},{"content":"The <code>action</code> argument is null.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>action</code> argument is null."}],"pos":[45987,46029],"yaml":true},{"content":"Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action, state, and options.","nodes":[{"pos":[0,113],"content":"Initializes a new <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> with the specified action, state, and options.","source":"Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action, state, and options."}],"pos":[47832,47946],"yaml":true},{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"pos":[0,466],"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[0,466],"nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object and launch a task is by calling the static <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName&gt;</ph> method.","pos":[0,342],"source":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method."},{"content":"The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[343,466]}]}]}],"pos":[47957,48424],"yaml":true,"extradata":"MT"},{"content":"The delegate that represents the code to execute in the task.","nodes":[{"pos":[0,61],"content":"The delegate that represents the code to execute in the task.","nodes":[{"content":"The delegate that represents the code to execute in the task.","pos":[0,61]}]}],"pos":[48651,48713],"yaml":true},{"content":"An object representing data to be used by the action.","nodes":[{"pos":[0,53],"content":"An object representing data to be used by the action.","nodes":[{"content":"An object representing data to be used by the action.","pos":[0,53]}]}],"pos":[48774,48828],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph> used to customize the task's behavior.","source":"The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior."}],"pos":[48928,49035],"yaml":true},{"content":"The <code>action</code> argument is null.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>action</code> argument is null."}],"pos":[49198,49240],"yaml":true},{"content":"The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>.","nodes":[{"pos":[0,137],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>."}],"pos":[49354,49492],"yaml":true},{"content":"Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action, state, and options.","nodes":[{"pos":[0,113],"content":"Initializes a new <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> with the specified action, state, and options.","source":"Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action, state, and options."}],"pos":[51457,51571],"yaml":true},{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"pos":[0,542],"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[0,542],"nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object and launch a task is by calling the static <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName&gt;</ph> method.","pos":[0,418],"source":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method."},{"content":"The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[419,542]}]}]}],"pos":[51582,52125],"yaml":true,"extradata":"MT"},{"content":"The delegate that represents the code to execute in the task.","nodes":[{"pos":[0,61],"content":"The delegate that represents the code to execute in the task.","nodes":[{"content":"The delegate that represents the code to execute in the task.","pos":[0,61]}]}],"pos":[52406,52468],"yaml":true},{"content":"An object representing data to be used by the action.","nodes":[{"pos":[0,53],"content":"An object representing data to be used by the action.","nodes":[{"content":"An object representing data to be used by the action.","pos":[0,53]}]}],"pos":[52529,52583],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that that the new task will observe..","nodes":[{"pos":[0,115],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"&gt;&lt;/xref&gt;</ph> that that the new task will observe..","source":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that that the new task will observe.."}],"pos":[52677,52793],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph> used to customize the task's behavior.","source":"The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior."}],"pos":[52893,53000],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,136],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[53167,53304],"yaml":true},{"content":"The <code>action</code> argument is null.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>action</code> argument is null."}],"pos":[53406,53448],"yaml":true},{"content":"The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>.","nodes":[{"pos":[0,137],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>."}],"pos":[53562,53700],"yaml":true},{"content":"Gets the state object supplied when the <xref href=\"System.Threading.Tasks.Task\"></xref> was created, or null if none was supplied.","nodes":[{"pos":[0,131],"content":"Gets the state object supplied when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> was created, or null if none was supplied.","source":"Gets the state object supplied when the <xref href=\"System.Threading.Tasks.Task\"></xref> was created, or null if none was supplied."}],"pos":[55135,55267],"yaml":true},{"content":"Cast the object back to the original type to retrieve its data.","nodes":[{"pos":[0,63],"content":"Cast the object back to the original type to retrieve its data.","nodes":[{"content":"Cast the object back to the original type to retrieve its data.","pos":[0,63]}]}],"pos":[55278,55342],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Object\"></xref> that represents the state data that was passed in to the task when it was created.","nodes":[{"pos":[0,120],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> that represents the state data that was passed in to the task when it was created.","source":"An <xref href=\"System.Object\"></xref> that represents the state data that was passed in to the task when it was created."}],"pos":[55456,55577],"yaml":true},{"content":"Gets a task that has already completed successfully.","nodes":[{"pos":[0,52],"content":"Gets a task that has already completed successfully.","nodes":[{"content":"Gets a task that has already completed successfully.","pos":[0,52]}]}],"pos":[57099,57152],"yaml":true},{"content":"This property returns a task whose <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName>. To create task that returns a value and runs to completion, call the <xref:System.Threading.Tasks.Task.FromResult%2A> method.  \n  \n Repeated attempts to retrieve this property value may not always return the same instance.","nodes":[{"pos":[0,291],"content":"This property returns a task whose <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName>. To create task that returns a value and runs to completion, call the <xref:System.Threading.Tasks.Task.FromResult%2A> method.","nodes":[{"content":"This property returns a task whose <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName>. To create task that returns a value and runs to completion, call the <xref:System.Threading.Tasks.Task.FromResult%2A> method.","pos":[0,291],"nodes":[{"content":"This property returns a task whose <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property is set to <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph>.","pos":[0,165],"source":"This property returns a task whose <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName>."},{"content":"To create task that returns a value and runs to completion, call the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.FromResult%2A&gt;</ph> method.","pos":[166,291],"source":" To create task that returns a value and runs to completion, call the <xref:System.Threading.Tasks.Task.FromResult%2A> method."}]}]},{"pos":[298,388],"content":"Repeated attempts to retrieve this property value may not always return the same instance.","nodes":[{"content":"Repeated attempts to retrieve this property value may not always return the same instance.","pos":[0,90]}]}],"pos":[57163,57556],"yaml":true,"extradata":"MT"},{"content":"The successfully completed task.","nodes":[{"pos":[0,32],"content":"The successfully completed task.","nodes":[{"content":"The successfully completed task.","pos":[0,32]}]}],"pos":[57715,57748],"yaml":true},{"content":"Configures an awaiter used to await this <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,90],"content":"Configures an awaiter used to await this <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"Configures an awaiter used to await this <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[59098,59189],"yaml":true},{"content":"`true` to attempt to marshal the continuation back to the original context captured; otherwise, `false`.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">`true`</ph> to attempt to marshal the continuation back to the original context captured; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to attempt to marshal the continuation back to the original context captured; otherwise, `false`."}],"pos":[59422,59529],"yaml":true},{"content":"An object used to await this task.","nodes":[{"pos":[0,34],"content":"An object used to await this task.","nodes":[{"content":"An object used to await this task.","pos":[0,34]}]}],"pos":[59628,59663],"yaml":true},{"content":"Creates a continuation that receives caller-supplied state information and a cancellation token and that executes when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes. The continuation executes based on a set of specified conditions and uses a specified scheduler.","nodes":[{"pos":[0,286],"content":"Creates a continuation that receives caller-supplied state information and a cancellation token and that executes when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes. The continuation executes based on a set of specified conditions and uses a specified scheduler.","nodes":[{"content":"Creates a continuation that receives caller-supplied state information and a cancellation token and that executes when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,189],"source":"Creates a continuation that receives caller-supplied state information and a cancellation token and that executes when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes."},{"content":"The continuation executes based on a set of specified conditions and uses a specified scheduler.","pos":[190,286]}]}],"pos":[62018,62305],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed. If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.","nodes":[{"pos":[0,267],"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed. If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has  completed.","pos":[0,122],"source":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed."},{"content":"If the criteria specified through the <ph id=\"ph1\">`continuationOptions`</ph> parameter  are not met, the continuation task will be canceled instead of scheduled.","pos":[123,267],"source":" If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled."}]}],"pos":[62316,62584],"yaml":true,"extradata":"MT"},{"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"pos":[0,194],"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"content":"An action to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,85],"source":"An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes."},{"content":"When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","pos":[86,194]}]}],"pos":[63037,63232],"yaml":true},{"content":"An object representing data to be used by the continuation action.","nodes":[{"pos":[0,66],"content":"An object representing data to be used by the continuation action.","nodes":[{"content":"An object representing data to be used by the continuation action.","pos":[0,66]}]}],"pos":[63293,63360],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.","nodes":[{"pos":[0,111],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new continuation task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task."}],"pos":[63454,63566],"yaml":true},{"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"pos":[0,310],"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"content":"Options for when the continuation is scheduled and how it behaves.","pos":[0,66]},{"content":"This includes criteria, such as <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"&gt;&lt;/xref&gt;</ph>, as well as execution options, such as <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"&gt;&lt;/xref&gt;</ph>.","pos":[67,310],"source":" This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>."}]}],"pos":[63674,63985],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its  execution.","nodes":[{"pos":[0,132],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> to associate with the continuation task and to use for its  execution.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its  execution."}],"pos":[64073,64206],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,68],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[64277,64346],"yaml":true},{"content":"The <code>scheduler</code> argument is `null`.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>scheduler</code> argument is `null`."}],"pos":[64516,64563],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.","nodes":[{"pos":[0,145],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>."}],"pos":[64677,64823],"yaml":true},{"content":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.","nodes":[{"pos":[0,95],"content":"The provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."}],"pos":[64929,65025],"yaml":true},{"content":"Creates a continuation that executes when the target task competes according to the specified <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>. The continuation receives a cancellation token and uses a specified scheduler.","nodes":[{"pos":[0,241],"content":"Creates a continuation that executes when the target task competes according to the specified <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>. The continuation receives a cancellation token and uses a specified scheduler.","nodes":[{"content":"Creates a continuation that executes when the target task competes according to the specified <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph>.","pos":[0,162],"source":"Creates a continuation that executes when the target task competes according to the specified <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>."},{"content":"The continuation receives a cancellation token and uses a specified scheduler.","pos":[163,241]}]}],"pos":[67178,67420],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.","nodes":[{"pos":[0,265],"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed.","pos":[0,121],"source":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed."},{"content":"If the criteria specified through the <ph id=\"ph1\">`continuationOptions`</ph> parameter are not met, the continuation task will be canceled instead of scheduled.","pos":[122,265],"source":" If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled."}]}],"pos":[67431,67697],"yaml":true,"extradata":"MT"},{"content":"An action to run according to the specified <code>continuationOptions</code>. When run, the delegate will be passed the completed task as an argument.","nodes":[{"pos":[0,150],"content":"An action to run according to the specified <code>continuationOptions</code>. When run, the delegate will be passed the completed task as an argument.","nodes":[{"content":"An action to run according to the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,77],"source":"An action to run according to the specified <code>continuationOptions</code>."},{"content":"When run, the delegate will be passed the completed task as an argument.","pos":[78,150]}]}],"pos":[69702,69853],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new continuation task.","nodes":[{"pos":[0,129],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new continuation task.","source":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new continuation task."}],"pos":[69947,70077],"yaml":true},{"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"pos":[0,310],"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"content":"Options for when the continuation is scheduled and how it behaves.","pos":[0,66]},{"content":"This includes criteria, such as <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"&gt;&lt;/xref&gt;</ph>, as well as execution options, such as <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"&gt;&lt;/xref&gt;</ph>.","pos":[67,310],"source":" This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>."}]}],"pos":[70185,70496],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.","nodes":[{"pos":[0,131],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> to associate with the continuation task and to use for its execution.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution."}],"pos":[70584,70716],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,68],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[70787,70856],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created the token has already been disposed.","nodes":[{"pos":[0,115],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created the token has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created the token has already been disposed."}],"pos":[71030,71146],"yaml":true},{"content":"The <code>continuationAction</code> argument is null.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is null.","nodes":[{"pos":[0,53],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationAction</code> argument is null."},{"pos":[60,64],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[71,115],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>scheduler</code> argument is null."}],"pos":[71248,71370],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.","nodes":[{"pos":[0,145],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>."}],"pos":[71484,71630],"yaml":true},{"content":"Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes. The continuation uses a specified scheduler.","nodes":[{"pos":[0,219],"content":"Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes. The continuation uses a specified scheduler.","nodes":[{"content":"Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,174],"source":"Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes."},{"content":"The continuation uses a specified scheduler.","pos":[175,219]}]}],"pos":[73534,73754],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","nodes":[{"pos":[0,271],"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","pos":[0,271],"source":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled."}]}],"pos":[73765,74037],"yaml":true,"extradata":"MT"},{"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes.  When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"pos":[0,195],"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes.  When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"content":"An action to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,85],"source":"An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes."},{"content":"When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","pos":[87,195]}]}],"pos":[74368,74564],"yaml":true},{"content":"An object representing data to be used by the continuation action.","nodes":[{"pos":[0,66],"content":"An object representing data to be used by the continuation action.","nodes":[{"content":"An object representing data to be used by the continuation action.","pos":[0,66]}]}],"pos":[74625,74692],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.","nodes":[{"pos":[0,131],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> to associate with the continuation task and to use for its execution.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution."}],"pos":[74780,74912],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,68],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[74983,75052],"yaml":true},{"content":"The <code>scheduler</code> argument is `null`.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>scheduler</code> argument is `null`."}],"pos":[75222,75269],"yaml":true},{"content":"Creates a continuation that receives caller-supplied state information and executes when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes. The continuation executes based on a set of specified conditions.","nodes":[{"pos":[0,225],"content":"Creates a continuation that receives caller-supplied state information and executes when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes. The continuation executes based on a set of specified conditions.","nodes":[{"content":"Creates a continuation that receives caller-supplied state information and executes when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,159],"source":"Creates a continuation that receives caller-supplied state information and executes when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes."},{"content":"The continuation executes based on a set of specified conditions.","pos":[160,225]}]}],"pos":[77233,77459],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.","nodes":[{"pos":[0,278],"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed.","pos":[0,121],"source":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed."},{"content":"If the continuation criteria specified through the <ph id=\"ph1\">`continuationOptions`</ph> parameter are not met, the continuation task will be canceled instead of scheduled.","pos":[122,278],"source":" If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled."}]}],"pos":[77470,77749],"yaml":true,"extradata":"MT"},{"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"pos":[0,194],"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"content":"An action to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,85],"source":"An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes."},{"content":"When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","pos":[86,194]}]}],"pos":[78100,78295],"yaml":true},{"content":"An object representing data to be used by the continuation action.","nodes":[{"pos":[0,66],"content":"An object representing data to be used by the continuation action.","nodes":[{"content":"An object representing data to be used by the continuation action.","pos":[0,66]}]}],"pos":[78356,78423],"yaml":true},{"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"pos":[0,310],"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"content":"Options for when the continuation is scheduled and how it behaves.","pos":[0,66]},{"content":"This includes criteria, such as <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"&gt;&lt;/xref&gt;</ph>, as well as execution options, such as <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"&gt;&lt;/xref&gt;</ph>.","pos":[67,310],"source":" This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>."}]}],"pos":[78531,78842],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,68],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[78913,78982],"yaml":true},{"content":"The <code>continuationAction</code> argument is `null`.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationAction</code> argument is `null`."}],"pos":[79152,79208],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.","nodes":[{"pos":[0,145],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>."}],"pos":[79322,79468],"yaml":true},{"content":"Creates a continuation that receives caller-supplied state information and a cancellation token and that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes.","nodes":[{"pos":[0,204],"content":"Creates a continuation that receives caller-supplied state information and a cancellation token and that executes asynchronously when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a continuation that receives caller-supplied state information and a cancellation token and that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes."}],"pos":[81378,81583],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","nodes":[{"pos":[0,271],"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","pos":[0,271],"source":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled."}]}],"pos":[81594,81866],"yaml":true,"extradata":"MT"},{"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.","nodes":[{"pos":[0,193],"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.","nodes":[{"content":"An action to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,85],"source":"An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes."},{"content":"When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.","pos":[86,193]}]}],"pos":[82203,82397],"yaml":true},{"content":"An object representing data to be used by the continuation action.","nodes":[{"pos":[0,66],"content":"An object representing data to be used by the continuation action.","nodes":[{"content":"An object representing data to be used by the continuation action.","pos":[0,66]}]}],"pos":[82458,82525],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.","nodes":[{"pos":[0,111],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new continuation task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task."}],"pos":[82619,82731],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,68],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[82802,82871],"yaml":true},{"content":"The <code>continuationAction</code> argument is `null`.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationAction</code> argument is `null`."}],"pos":[83041,83097],"yaml":true},{"content":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.","nodes":[{"pos":[0,95],"content":"The provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."}],"pos":[83203,83299],"yaml":true},{"content":"Creates a continuation that receives caller-supplied state information and executes when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes.","nodes":[{"pos":[0,159],"content":"Creates a continuation that receives caller-supplied state information and executes when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a continuation that receives caller-supplied state information and executes when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes."}],"pos":[85047,85207],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to cancellation.","nodes":[{"pos":[0,263],"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to cancellation.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to cancellation.","pos":[0,263],"source":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to cancellation."}]}],"pos":[85218,85482],"yaml":true,"extradata":"MT"},{"content":"An action to run when the task completes. When run, the delegate is passed the completed task and a caller-supplied state object as arguments.","nodes":[{"pos":[0,142],"content":"An action to run when the task completes. When run, the delegate is passed the completed task and a caller-supplied state object as arguments.","nodes":[{"content":"An action to run when the task completes. When run, the delegate is passed the completed task and a caller-supplied state object as arguments.","pos":[0,142],"nodes":[{"content":"An action to run when the task completes.","pos":[0,41]},{"content":"When run, the delegate is passed the completed task and a caller-supplied state object as arguments.","pos":[42,142]}]}]}],"pos":[85765,85908],"yaml":true},{"content":"An object representing data to be used by the continuation action.","nodes":[{"pos":[0,66],"content":"An object representing data to be used by the continuation action.","nodes":[{"content":"An object representing data to be used by the continuation action.","pos":[0,66]}]}],"pos":[85969,86036],"yaml":true},{"content":"A new continuation task.","nodes":[{"pos":[0,24],"content":"A new continuation task.","nodes":[{"content":"A new continuation task.","pos":[0,24]}]}],"pos":[86107,86132],"yaml":true},{"content":"The <code>continuationAction</code> argument is `null`.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationAction</code> argument is `null`."}],"pos":[86302,86358],"yaml":true},{"content":"Creates a continuation that executes when the target task completes according to the specified <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.","nodes":[{"pos":[0,163],"content":"Creates a continuation that executes when the target task completes according to the specified <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a continuation that executes when the target task completes according to the specified <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>."}],"pos":[88193,88357],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.","nodes":[{"pos":[0,278],"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed.","pos":[0,121],"source":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed."},{"content":"If the continuation criteria specified through the <ph id=\"ph1\">`continuationOptions`</ph> parameter are not met, the continuation task will be canceled instead of scheduled.","pos":[122,278],"source":" If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled."}]}],"pos":[88368,88647],"yaml":true,"extradata":"MT"},{"content":"An action to run according to the specified <code>continuationOptions</code>. When run, the delegate will be passed the completed task as an argument.","nodes":[{"pos":[0,150],"content":"An action to run according to the specified <code>continuationOptions</code>. When run, the delegate will be passed the completed task as an argument.","nodes":[{"content":"An action to run according to the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,77],"source":"An action to run according to the specified <code>continuationOptions</code>."},{"content":"When run, the delegate will be passed the completed task as an argument.","pos":[78,150]}]}],"pos":[90449,90600],"yaml":true},{"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"pos":[0,310],"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"content":"Options for when the continuation is scheduled and how it behaves.","pos":[0,66]},{"content":"This includes criteria, such as <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"&gt;&lt;/xref&gt;</ph>, as well as execution options, such as <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"&gt;&lt;/xref&gt;</ph>.","pos":[67,310],"source":" This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>."}]}],"pos":[90708,91019],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,68],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[91090,91159],"yaml":true},{"content":"The <code>continuationAction</code> argument is null.","nodes":[{"pos":[0,53],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationAction</code> argument is null."}],"pos":[91329,91383],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.","nodes":[{"pos":[0,145],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>."}],"pos":[91497,91643],"yaml":true},{"content":"Creates a continuation that receives a cancellation token and executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes.","nodes":[{"pos":[0,161],"content":"Creates a continuation that receives a cancellation token and executes asynchronously when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a continuation that receives a cancellation token and executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes."}],"pos":[93424,93586],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"pos":[0,269],"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","pos":[0,269],"source":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled."}]}],"pos":[93597,93867],"yaml":true,"extradata":"MT"},{"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be passed the completed task as an argument.","nodes":[{"pos":[0,158],"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be passed the completed task as an argument.","nodes":[{"content":"An action to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,85],"source":"An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes."},{"content":"When run, the delegate will be passed the completed task as an argument.","pos":[86,158]}]}],"pos":[94169,94328],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new continuation task.","nodes":[{"pos":[0,129],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new continuation task.","source":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new continuation task."}],"pos":[94422,94552],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,68],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[94623,94692],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created the token has already been disposed.","nodes":[{"pos":[0,115],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created the token has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created the token has already been disposed."}],"pos":[94866,94982],"yaml":true},{"content":"The <code>continuationAction</code> argument is null.","nodes":[{"pos":[0,53],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationAction</code> argument is null."}],"pos":[95084,95138],"yaml":true},{"content":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes.","nodes":[{"pos":[0,127],"content":"Creates a continuation that executes asynchronously when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes."}],"pos":[96757,96885],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"pos":[0,269],"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","pos":[0,269],"source":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled."}]}],"pos":[96896,97166],"yaml":true,"extradata":"MT"},{"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be passed the completed task as an argument.","nodes":[{"pos":[0,158],"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be passed the completed task as an argument.","nodes":[{"content":"An action to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,85],"source":"An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes."},{"content":"When run, the delegate will be passed the completed task as an argument.","pos":[86,158]}]}],"pos":[98486,98645],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,68],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[98716,98785],"yaml":true},{"content":"The <code>continuationAction</code> argument is `null`.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationAction</code> argument is `null`."}],"pos":[98955,99011],"yaml":true},{"content":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes. The continuation uses a specified scheduler.","nodes":[{"pos":[0,172],"content":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes. The continuation uses a specified scheduler.","nodes":[{"content":"Creates a continuation that executes asynchronously when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,127],"source":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes."},{"content":"The continuation uses a specified scheduler.","pos":[128,172]}]}],"pos":[100786,100959],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"pos":[0,269],"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","pos":[0,269],"source":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled."}]}],"pos":[100970,101240],"yaml":true,"extradata":"MT"},{"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be passed the completed task as an argument.","nodes":[{"pos":[0,158],"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be passed the completed task as an argument.","nodes":[{"content":"An action to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,85],"source":"An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes."},{"content":"When run, the delegate will be passed the completed task as an argument.","pos":[86,158]}]}],"pos":[101536,101695],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.","nodes":[{"pos":[0,131],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> to associate with the continuation task and to use for its execution.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution."}],"pos":[101783,101915],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,68],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[101986,102055],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed."}],"pos":[102229,102301],"yaml":true},{"content":"The <code>continuationAction</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is null.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationAction</code> argument is `null`."},{"pos":[62,66],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[73,117],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>scheduler</code> argument is null."}],"pos":[102403,102527],"yaml":true},{"content":"Creates a continuation that executes based on the specified task continuation options when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes. The continuation receives caller-supplied state information.","nodes":[{"pos":[0,222],"content":"Creates a continuation that executes based on the specified task continuation options when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes. The continuation receives caller-supplied state information.","nodes":[{"content":"Creates a continuation that executes based on the specified task continuation options when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,161],"source":"Creates a continuation that executes based on the specified task continuation options when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes."},{"content":"The continuation receives caller-supplied state information.","pos":[162,222]}]}],"pos":[104551,104774],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.","nodes":[{"pos":[0,282],"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has completed.","pos":[0,125],"source":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed."},{"content":"If the continuation criteria specified through the <ph id=\"ph1\">`continuationOptions`</ph> parameter are not met, the continuation task will be canceled instead of scheduled.","pos":[126,282],"source":" If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled."}]}],"pos":[104785,105068],"yaml":true,"extradata":"MT"},{"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"pos":[0,195],"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"content":"A function to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,86],"source":"A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes."},{"content":"When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","pos":[87,195]}]}],"pos":[105453,105649],"yaml":true},{"content":"An object representing data to be used by the continuation function.","nodes":[{"pos":[0,68],"content":"An object representing data to be used by the continuation function.","nodes":[{"content":"An object representing data to be used by the continuation function.","pos":[0,68]}]}],"pos":[105710,105779],"yaml":true},{"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"pos":[0,310],"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"content":"Options for when the continuation is scheduled and how it behaves.","pos":[0,66]},{"content":"This includes criteria, such as <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"&gt;&lt;/xref&gt;</ph>, as well as execution options, such as <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"&gt;&lt;/xref&gt;</ph>.","pos":[67,310],"source":" This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>."}]}],"pos":[105887,106198],"yaml":true},{"content":"The type of the result produced by the continuation.","nodes":[{"pos":[0,52],"content":"The type of the result produced by the continuation.","nodes":[{"content":"The type of the result produced by the continuation.","pos":[0,52]}]}],"pos":[106255,106308],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,70],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[106381,106452],"yaml":true},{"content":"The <code>continuationFunction</code> argument is `null`.","nodes":[{"pos":[0,57],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."}],"pos":[106625,106683],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.","nodes":[{"pos":[0,145],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>."}],"pos":[106797,106943],"yaml":true},{"content":"Creates a continuation that executes based on the specified task continuation options when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes and returns a value. The continuation receives caller-supplied state information and a cancellation token and uses the specified scheduler.","nodes":[{"pos":[0,300],"content":"Creates a continuation that executes based on the specified task continuation options when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes and returns a value. The continuation receives caller-supplied state information and a cancellation token and uses the specified scheduler.","nodes":[{"content":"Creates a continuation that executes based on the specified task continuation options when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes and returns a value.","pos":[0,181],"source":"Creates a continuation that executes based on the specified task continuation options when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes and returns a value."},{"content":"The continuation receives caller-supplied state information and a cancellation token and uses the specified scheduler.","pos":[182,300]}]}],"pos":[109285,109586],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed. If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.","nodes":[{"pos":[0,271],"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed. If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has  completed.","pos":[0,126],"source":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed."},{"content":"If the criteria specified through the <ph id=\"ph1\">`continuationOptions`</ph> parameter  are not met, the continuation task will be canceled instead of scheduled.","pos":[127,271],"source":" If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled."}]}],"pos":[109597,109869],"yaml":true,"extradata":"MT"},{"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"pos":[0,195],"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"content":"A function to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,86],"source":"A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes."},{"content":"When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","pos":[87,195]}]}],"pos":[110356,110552],"yaml":true},{"content":"An object representing data to be used by the continuation function.","nodes":[{"pos":[0,68],"content":"An object representing data to be used by the continuation function.","nodes":[{"content":"An object representing data to be used by the continuation function.","pos":[0,68]}]}],"pos":[110613,110682],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.","nodes":[{"pos":[0,111],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new continuation task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task."}],"pos":[110776,110888],"yaml":true},{"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"pos":[0,310],"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"content":"Options for when the continuation is scheduled and how it behaves.","pos":[0,66]},{"content":"This includes criteria, such as <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"&gt;&lt;/xref&gt;</ph>, as well as execution options, such as <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"&gt;&lt;/xref&gt;</ph>.","pos":[67,310],"source":" This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>."}]}],"pos":[110996,111307],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its  execution.","nodes":[{"pos":[0,132],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> to associate with the continuation task and to use for its  execution.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its  execution."}],"pos":[111395,111528],"yaml":true},{"content":"The type of the result produced by the continuation.","nodes":[{"pos":[0,52],"content":"The type of the result produced by the continuation.","nodes":[{"content":"The type of the result produced by the continuation.","pos":[0,52]}]}],"pos":[111585,111638],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,70],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[111711,111782],"yaml":true},{"content":"The <code>scheduler</code> argument is `null`.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>scheduler</code> argument is `null`."}],"pos":[111955,112002],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.","nodes":[{"pos":[0,145],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>."}],"pos":[112116,112262],"yaml":true},{"content":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.","nodes":[{"pos":[0,95],"content":"The provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."}],"pos":[112368,112464],"yaml":true},{"content":"Creates a continuation that executes according to the specified continuation options and returns a value. The continuation is passed a cancellation token and uses a specified scheduler.","nodes":[{"pos":[0,185],"content":"Creates a continuation that executes according to the specified continuation options and returns a value. The continuation is passed a cancellation token and uses a specified scheduler.","nodes":[{"content":"Creates a continuation that executes according to the specified continuation options and returns a value. The continuation is passed a cancellation token and uses a specified scheduler.","pos":[0,185],"nodes":[{"content":"Creates a continuation that executes according to the specified continuation options and returns a value.","pos":[0,105]},{"content":"The continuation is passed a cancellation token and uses a specified scheduler.","pos":[106,185]}]}]}],"pos":[114677,114863],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed. If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.","nodes":[{"pos":[0,269],"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed. If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has completed.","pos":[0,125],"source":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed."},{"content":"If the criteria specified through the <ph id=\"ph1\">`continuationOptions`</ph> parameter are not met, the continuation task will be canceled instead of scheduled.","pos":[126,269],"source":" If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled."}]}],"pos":[114874,115144],"yaml":true,"extradata":"MT"},{"content":"A function to run according to the specified <code>continuationOptions.</code> When run, the delegate will be passed the completed task as an argument.","nodes":[{"pos":[0,151],"content":"A function to run according to the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions.</ph><ept id=\"p1\">&lt;/code&gt;</ept> When run, the delegate will be passed the completed task as an argument.","source":"A function to run according to the specified <code>continuationOptions.</code> When run, the delegate will be passed the completed task as an argument."}],"pos":[116022,116174],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new continuation task.","nodes":[{"pos":[0,129],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new continuation task.","source":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new continuation task."}],"pos":[116268,116398],"yaml":true},{"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"pos":[0,310],"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"content":"Options for when the continuation is scheduled and how it behaves.","pos":[0,66]},{"content":"This includes criteria, such as <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"&gt;&lt;/xref&gt;</ph>, as well as execution options, such as <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"&gt;&lt;/xref&gt;</ph>.","pos":[67,310],"source":" This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>."}]}],"pos":[116506,116817],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.","nodes":[{"pos":[0,131],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> to associate with the continuation task and to use for its execution.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution."}],"pos":[116905,117037],"yaml":true},{"content":"The type of the result produced by the continuation.","nodes":[{"pos":[0,52],"content":"The type of the result produced by the continuation.","nodes":[{"content":"The type of the result produced by the continuation.","pos":[0,52]}]}],"pos":[117094,117147],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,70],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[117220,117291],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created the token has already been disposed.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed."},{"pos":[78,82],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[89,204],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created the token has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created the token has already been disposed."}],"pos":[117468,117683],"yaml":true},{"content":"The <code>continuationFunction</code> argument is null.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is null.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationFunction</code> argument is null."},{"pos":[62,66],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[73,117],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>scheduler</code> argument is null."}],"pos":[117785,117909],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.","nodes":[{"pos":[0,145],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>."}],"pos":[118023,118169],"yaml":true},{"content":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes. The continuation receives caller-supplied state information and uses a specified scheduler.","nodes":[{"pos":[0,219],"content":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes. The continuation receives caller-supplied state information and uses a specified scheduler.","nodes":[{"content":"Creates a continuation that executes asynchronously when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,127],"source":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes."},{"content":"The continuation receives caller-supplied state information and uses a specified scheduler.","pos":[128,219]}]}],"pos":[120133,120353],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","nodes":[{"pos":[0,275],"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","pos":[0,275],"source":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled."}]}],"pos":[120364,120640],"yaml":true,"extradata":"MT"},{"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes.  When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"pos":[0,196],"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes.  When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"content":"A function to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,86],"source":"A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes."},{"content":"When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","pos":[88,196]}]}],"pos":[121005,121202],"yaml":true},{"content":"An object representing data to be used by the continuation function.","nodes":[{"pos":[0,68],"content":"An object representing data to be used by the continuation function.","nodes":[{"content":"An object representing data to be used by the continuation function.","pos":[0,68]}]}],"pos":[121263,121332],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.","nodes":[{"pos":[0,131],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> to associate with the continuation task and to use for its execution.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution."}],"pos":[121420,121552],"yaml":true},{"content":"The type of the result produced by the continuation.","nodes":[{"pos":[0,52],"content":"The type of the result produced by the continuation.","nodes":[{"content":"The type of the result produced by the continuation.","pos":[0,52]}]}],"pos":[121609,121662],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,70],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[121735,121806],"yaml":true},{"content":"The <code>scheduler</code> argument is `null`.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>scheduler</code> argument is `null`."}],"pos":[121979,122026],"yaml":true},{"content":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes and returns a value. The continuation receives caller-supplied state information and a cancellation token.","nodes":[{"pos":[0,233],"content":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes and returns a value. The continuation receives caller-supplied state information and a cancellation token.","nodes":[{"content":"Creates a continuation that executes asynchronously when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes and returns a value.","pos":[0,147],"source":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes and returns a value."},{"content":"The continuation receives caller-supplied state information and a cancellation token.","pos":[148,233]}]}],"pos":[123996,124230],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","nodes":[{"pos":[0,275],"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","pos":[0,275],"source":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled."}]}],"pos":[124241,124517],"yaml":true,"extradata":"MT"},{"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"pos":[0,195],"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"content":"A function to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,86],"source":"A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes."},{"content":"When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","pos":[87,195]}]}],"pos":[124888,125084],"yaml":true},{"content":"An object representing data to be used by the continuation function.","nodes":[{"pos":[0,68],"content":"An object representing data to be used by the continuation function.","nodes":[{"content":"An object representing data to be used by the continuation function.","pos":[0,68]}]}],"pos":[125145,125214],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.","nodes":[{"pos":[0,111],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new continuation task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task."}],"pos":[125308,125420],"yaml":true},{"content":"The type of the result produced by the continuation.","nodes":[{"pos":[0,52],"content":"The type of the result produced by the continuation.","nodes":[{"content":"The type of the result produced by the continuation.","pos":[0,52]}]}],"pos":[125477,125530],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,70],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[125603,125674],"yaml":true},{"content":"The <code>continuationFunction</code> argument is `null`.","nodes":[{"pos":[0,57],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."}],"pos":[125847,125905],"yaml":true},{"content":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.","nodes":[{"pos":[0,95],"content":"The provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."}],"pos":[126011,126107],"yaml":true},{"content":"Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes and returns a value.","nodes":[{"pos":[0,194],"content":"Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes and returns a value.","source":"Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes and returns a value."}],"pos":[127915,128110],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","nodes":[{"pos":[0,275],"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","pos":[0,275],"source":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled."}]}],"pos":[128121,128397],"yaml":true,"extradata":"MT"},{"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.","nodes":[{"pos":[0,194],"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.","nodes":[{"content":"A function to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,86],"source":"A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes."},{"content":"When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.","pos":[87,194]}]}],"pos":[128714,128909],"yaml":true},{"content":"An object representing data to be used by the continuation function.","nodes":[{"pos":[0,68],"content":"An object representing data to be used by the continuation function.","nodes":[{"content":"An object representing data to be used by the continuation function.","pos":[0,68]}]}],"pos":[128970,129039],"yaml":true},{"content":"The type of the result produced by the continuation.","nodes":[{"pos":[0,52],"content":"The type of the result produced by the continuation.","nodes":[{"content":"The type of the result produced by the continuation.","pos":[0,52]}]}],"pos":[129096,129149],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,70],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[129222,129293],"yaml":true},{"content":"The <code>continuationFunction</code> argument is `null`.","nodes":[{"pos":[0,57],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationFunction</code> argument is `null`."}],"pos":[129466,129524],"yaml":true},{"content":"Creates a continuation that executes according to the specified continuation options and returns a value.","nodes":[{"pos":[0,105],"content":"Creates a continuation that executes according to the specified continuation options and returns a value.","nodes":[{"content":"Creates a continuation that executes according to the specified continuation options and returns a value.","pos":[0,105]}]}],"pos":[131419,131525],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.","nodes":[{"pos":[0,282],"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has completed.","pos":[0,125],"source":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed."},{"content":"If the continuation criteria specified through the <ph id=\"ph1\">`continuationOptions`</ph> parameter are not met, the continuation task will be canceled instead of scheduled.","pos":[126,282],"source":" If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled."}]}],"pos":[131536,131819],"yaml":true,"extradata":"MT"},{"content":"A function to run according to the condition specified in <code>continuationOptions</code>. When run, the delegate will be passed the completed task as an argument.","nodes":[{"pos":[0,164],"content":"A function to run according to the condition specified in <code>continuationOptions</code>. When run, the delegate will be passed the completed task as an argument.","nodes":[{"content":"A function to run according to the condition specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,91],"source":"A function to run according to the condition specified in <code>continuationOptions</code>."},{"content":"When run, the delegate will be passed the completed task as an argument.","pos":[92,164]}]}],"pos":[132169,132334],"yaml":true},{"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"pos":[0,310],"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"content":"Options for when the continuation is scheduled and how it behaves.","pos":[0,66]},{"content":"This includes criteria, such as <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"&gt;&lt;/xref&gt;</ph>, as well as execution options, such as <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"&gt;&lt;/xref&gt;</ph>.","pos":[67,310],"source":" This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>."}]}],"pos":[132442,132753],"yaml":true},{"content":"The type of the result produced by the continuation.","nodes":[{"pos":[0,52],"content":"The type of the result produced by the continuation.","nodes":[{"content":"The type of the result produced by the continuation.","pos":[0,52]}]}],"pos":[132810,132863],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,70],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[132936,133007],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed."}],"pos":[133184,133256],"yaml":true},{"content":"The <code>continuationFunction</code> argument is null.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationFunction</code> argument is null."}],"pos":[133358,133414],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.","nodes":[{"pos":[0,145],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>."}],"pos":[133528,133674],"yaml":true},{"content":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes and returns a value. The continuation receives a cancellation token.","nodes":[{"pos":[0,195],"content":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes and returns a value. The continuation receives a cancellation token.","nodes":[{"content":"Creates a continuation that executes asynchronously when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes and returns a value.","pos":[0,147],"source":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes and returns a value."},{"content":"The continuation receives a cancellation token.","pos":[148,195]}]}],"pos":[135515,135711],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"pos":[0,273],"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","pos":[0,273],"source":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled."}]}],"pos":[135722,135996],"yaml":true,"extradata":"MT"},{"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be passed the completed task as an argument.","nodes":[{"pos":[0,159],"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be passed the completed task as an argument.","nodes":[{"content":"A function to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,86],"source":"A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes."},{"content":"When run, the delegate will be passed the completed task as an argument.","pos":[87,159]}]}],"pos":[136332,136492],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new continuation task.","nodes":[{"pos":[0,129],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new continuation task.","source":"The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new continuation task."}],"pos":[136586,136716],"yaml":true},{"content":"The type of the result produced by the continuation.","nodes":[{"pos":[0,52],"content":"The type of the result produced by the continuation.","nodes":[{"content":"The type of the result produced by the continuation.","pos":[0,52]}]}],"pos":[136773,136826],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,70],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[136899,136970],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created the token has already been disposed.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed."},{"pos":[78,82],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[89,204],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created the token has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created the token has already been disposed."}],"pos":[137147,137362],"yaml":true},{"content":"The <code>continuationFunction</code> argument is null.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationFunction</code> argument is null."}],"pos":[137464,137520],"yaml":true},{"content":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes and returns a value.","nodes":[{"pos":[0,149],"content":"Creates a continuation that executes asynchronously when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes and returns a value.","source":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes and returns a value."}],"pos":[139199,139349],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"pos":[0,273],"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","pos":[0,273],"source":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled."}]}],"pos":[139360,139634],"yaml":true,"extradata":"MT"},{"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task as an argument.","nodes":[{"pos":[0,161],"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task as an argument.","nodes":[{"content":"A function to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,88],"source":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."},{"content":"When run, the delegate will be passed the completed task as an argument.","pos":[89,161]}]}],"pos":[140314,140476],"yaml":true},{"content":"The type of the result produced by the continuation.","nodes":[{"pos":[0,52],"content":"The type of the result produced by the continuation.","nodes":[{"content":"The type of the result produced by the continuation.","pos":[0,52]}]}],"pos":[140533,140586],"yaml":true},{"content":"A new continuation task.","nodes":[{"pos":[0,24],"content":"A new continuation task.","nodes":[{"content":"A new continuation task.","pos":[0,24]}]}],"pos":[140659,140684],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed."}],"pos":[140861,140933],"yaml":true},{"content":"The <code>continuationFunction</code> argument is null.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationFunction</code> argument is null."}],"pos":[141035,141091],"yaml":true},{"content":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes and returns a value. The continuation uses a specified scheduler.","nodes":[{"pos":[0,192],"content":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes and returns a value. The continuation uses a specified scheduler.","nodes":[{"content":"Creates a continuation that executes asynchronously when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes and returns a value.","pos":[0,147],"source":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes and returns a value."},{"content":"The continuation uses a specified scheduler.","pos":[148,192]}]}],"pos":[142926,143119],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"pos":[0,273],"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","pos":[0,273],"source":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled."}]}],"pos":[143130,143404],"yaml":true,"extradata":"MT"},{"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be passed the completed task as an argument.","nodes":[{"pos":[0,159],"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be passed the completed task as an argument.","nodes":[{"content":"A function to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,86],"source":"A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes."},{"content":"When run, the delegate will be passed the completed task as an argument.","pos":[87,159]}]}],"pos":[143734,143894],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.","nodes":[{"pos":[0,131],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> to associate with the continuation task and to use for its execution.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution."}],"pos":[143982,144114],"yaml":true},{"content":"The type of the result produced by the continuation.","nodes":[{"pos":[0,52],"content":"The type of the result produced by the continuation.","nodes":[{"content":"The type of the result produced by the continuation.","pos":[0,52]}]}],"pos":[144171,144224],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,70],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[144297,144368],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed."}],"pos":[144545,144617],"yaml":true},{"content":"The <code>continuationFunction</code> argument is null.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is null.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationFunction</code> argument is null."},{"pos":[62,66],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[73,117],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>scheduler</code> argument is null."}],"pos":[144719,144843],"yaml":true},{"content":"Gets the <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to create this task.","nodes":[{"pos":[0,98],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph> used to create this task.","source":"Gets the <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to create this task."}],"pos":[146308,146407],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to create this task.","nodes":[{"pos":[0,93],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph> used to create this task.","source":"The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to create this task."}],"pos":[146591,146685],"yaml":true},{"content":"Returns the ID of the currently executing <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,91],"content":"Returns the ID of the currently executing <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the ID of the currently executing <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[148188,148280],"yaml":true},{"content":"<xref:System.Threading.Tasks.Task.CurrentId%2A> is a `static` (`Shared` in Visual Basic) property that is used to get the identifier of the currently executing task from the code that the task is executing. It differs from the <xref:System.Threading.Tasks.Task.Id%2A> property, which returns the identifier of a particular <xref:System.Threading.Tasks.Task> instance. If you attempt to retrieve the <xref:System.Threading.Tasks.Task.CurrentId%2A> value from outside the code that a task is executing, the property returns `null`.  \n  \n Note that although collisions are very rare, task identifiers are not guaranteed to be unique.","nodes":[{"pos":[0,529],"content":"<xref:System.Threading.Tasks.Task.CurrentId%2A> is a `static` (`Shared` in Visual Basic) property that is used to get the identifier of the currently executing task from the code that the task is executing. It differs from the <xref:System.Threading.Tasks.Task.Id%2A> property, which returns the identifier of a particular <xref:System.Threading.Tasks.Task> instance. If you attempt to retrieve the <xref:System.Threading.Tasks.Task.CurrentId%2A> value from outside the code that a task is executing, the property returns `null`.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.CurrentId%2A&gt;</ph> is a <ph id=\"ph2\">`static`</ph> (<ph id=\"ph3\">`Shared`</ph> in Visual Basic) property that is used to get the identifier of the currently executing task from the code that the task is executing.","pos":[0,206],"source":"<xref:System.Threading.Tasks.Task.CurrentId%2A> is a `static` (`Shared` in Visual Basic) property that is used to get the identifier of the currently executing task from the code that the task is executing."},{"content":"It differs from the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Id%2A&gt;</ph> property, which returns the identifier of a particular <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> instance.","pos":[207,367],"source":" It differs from the <xref:System.Threading.Tasks.Task.Id%2A> property, which returns the identifier of a particular <xref:System.Threading.Tasks.Task> instance."},{"content":"If you attempt to retrieve the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.CurrentId%2A&gt;</ph> value from outside the code that a task is executing, the property returns <ph id=\"ph2\">`null`</ph>.","pos":[368,529],"source":" If you attempt to retrieve the <xref:System.Threading.Tasks.Task.CurrentId%2A> value from outside the code that a task is executing, the property returns `null`."}]},{"pos":[536,630],"content":"Note that although collisions are very rare, task identifiers are not guaranteed to be unique.","nodes":[{"content":"Note that although collisions are very rare, task identifiers are not guaranteed to be unique.","pos":[0,94]}]}],"pos":[148291,148926],"yaml":true,"extradata":"MT"},{"content":"An integer that was assigned by the system to the currently-executing task.","nodes":[{"pos":[0,75],"content":"An integer that was assigned by the system to the currently-executing task.","nodes":[{"content":"An integer that was assigned by the system to the currently-executing task.","pos":[0,75]}]}],"pos":[149069,149145],"yaml":true},{"content":"Creates a cancellable task that completes after a specified time interval.","nodes":[{"pos":[0,74],"content":"Creates a cancellable task that completes after a specified time interval.","nodes":[{"content":"Creates a cancellable task that completes after a specified time interval.","pos":[0,74]}]}],"pos":[150859,150934],"yaml":true},{"content":"If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state once the specified time delay has elapsed.  \n  \n For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.  \n  \n This method depends on the system clock. This means that the time delay will approximately equal the resolution of the system clock if the `delay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.","nodes":[{"pos":[0,405],"content":"If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state once the specified time delay has elapsed.","nodes":[{"content":"If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state once the specified time delay has elapsed.","pos":[0,405],"nodes":[{"content":"If the cancellation token is signaled before the specified time delay, a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskCanceledException&gt;</ph> exception results, and the task is completed in the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state.","pos":[0,249],"source":"If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state."},{"content":"Otherwise, the task is completed in the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state once the specified time delay has elapsed.","pos":[251,405],"source":"  Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state once the specified time delay has elapsed."}]}]},{"pos":[412,555],"content":"For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.","nodes":[{"content":"For usage scenarios and additional examples, see the documentation for the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Delay%28System.Int32%29&gt;</ph> overload.","pos":[0,143],"source":"For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload."}]},{"pos":[562,825],"content":"This method depends on the system clock. This means that the time delay will approximately equal the resolution of the system clock if the `delay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.","nodes":[{"content":"This method depends on the system clock.","pos":[0,40]},{"content":"This means that the time delay will approximately equal the resolution of the system clock if the <ph id=\"ph1\">`delay`</ph> argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.","pos":[41,263],"source":" This means that the time delay will approximately equal the resolution of the system clock if the `delay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems."}]}],"pos":[150945,151777],"yaml":true,"extradata":"MT"},{"content":"The time span to wait before completing the returned task, or `TimeSpan.FromMilliseconds(-1)` to wait indefinitely.","nodes":[{"pos":[0,115],"content":"The time span to wait before completing the returned task, or <ph id=\"ph1\">`TimeSpan.FromMilliseconds(-1)`</ph> to wait indefinitely.","source":"The time span to wait before completing the returned task, or `TimeSpan.FromMilliseconds(-1)` to wait indefinitely."}],"pos":[153522,153638],"yaml":true},{"content":"The cancellation token that will be checked prior to completing the returned task.","nodes":[{"pos":[0,82],"content":"The cancellation token that will be checked prior to completing the returned task.","nodes":[{"content":"The cancellation token that will be checked prior to completing the returned task.","pos":[0,82]}]}],"pos":[153732,153815],"yaml":true},{"content":"A task that represents the time delay.","nodes":[{"pos":[0,38],"content":"A task that represents the time delay.","nodes":[{"content":"A task that represents the time delay.","pos":[0,38]}]}],"pos":[153886,153925],"yaml":true},{"content":"<code>delay</code> represents a negative time interval other than `TimeSpan.FromMillseconds(-1)`.  \n  \n -or-  \n  \n The <code>delay</code> argument's <xref href=\"System.TimeSpan.TotalMilliseconds\"></xref> property is greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">&lt;code&gt;delay&lt;/code&gt;</ph> represents a negative time interval other than <ph id=\"ph2\">`TimeSpan.FromMillseconds(-1)`</ph>.","source":"<code>delay</code> represents a negative time interval other than `TimeSpan.FromMillseconds(-1)`."},{"pos":[104,108],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[115,272],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">delay</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument's <ph id=\"ph2\">&lt;xref href=\"System.TimeSpan.TotalMilliseconds\"&gt;&lt;/xref&gt;</ph> property is greater than <ph id=\"ph3\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>delay</code> argument's <xref href=\"System.TimeSpan.TotalMilliseconds\"></xref> property is greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[154100,154383],"yaml":true},{"content":"The task has been canceled.","nodes":[{"pos":[0,27],"content":"The task has been canceled.","nodes":[{"content":"The task has been canceled.","pos":[0,27]}]}],"pos":[154517,154545],"yaml":true},{"content":"The provided <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,70],"content":"The provided <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The provided <code>cancellationToken</code> has already been disposed."}],"pos":[154651,154722],"yaml":true},{"content":"Creates a cancellable task that completes after a time delay.","nodes":[{"pos":[0,61],"content":"Creates a cancellable task that completes after a time delay.","nodes":[{"content":"Creates a cancellable task that completes after a time delay.","pos":[0,61]}]}],"pos":[156350,156412],"yaml":true},{"content":"If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state once the specified time delay has elapsed.  \n  \n For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.  \n  \n This method depends on the system clock. This means that the time delay will approximately equal the resolution of the system clock if the `millisecondsDelay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.","nodes":[{"pos":[0,405],"content":"If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state once the specified time delay has elapsed.","nodes":[{"content":"If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state once the specified time delay has elapsed.","pos":[0,405],"nodes":[{"content":"If the cancellation token is signaled before the specified time delay, a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskCanceledException&gt;</ph> exception results, and the task is completed in the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state.","pos":[0,249],"source":"If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state."},{"content":"Otherwise, the task is completed in the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state once the specified time delay has elapsed.","pos":[251,405],"source":"  Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state once the specified time delay has elapsed."}]}]},{"pos":[412,555],"content":"For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.","nodes":[{"content":"For usage scenarios and additional examples, see the documentation for the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Delay%28System.Int32%29&gt;</ph> overload.","pos":[0,143],"source":"For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload."}]},{"pos":[562,837],"content":"This method depends on the system clock. This means that the time delay will approximately equal the resolution of the system clock if the `millisecondsDelay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.","nodes":[{"content":"This method depends on the system clock.","pos":[0,40]},{"content":"This means that the time delay will approximately equal the resolution of the system clock if the <ph id=\"ph1\">`millisecondsDelay`</ph> argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.","pos":[41,275],"source":" This means that the time delay will approximately equal the resolution of the system clock if the `millisecondsDelay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems."}]}],"pos":[156423,157267],"yaml":true,"extradata":"MT"},{"content":"The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.","nodes":[{"pos":[0,99],"content":"The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.","nodes":[{"content":"The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.","pos":[0,99]}]}],"pos":[158352,158452],"yaml":true},{"content":"The cancellation token that will be checked prior to completing the returned task.","nodes":[{"pos":[0,82],"content":"The cancellation token that will be checked prior to completing the returned task.","nodes":[{"content":"The cancellation token that will be checked prior to completing the returned task.","pos":[0,82]}]}],"pos":[158546,158629],"yaml":true},{"content":"A task that represents the time delay.","nodes":[{"pos":[0,38],"content":"A task that represents the time delay.","nodes":[{"content":"A task that represents the time delay.","pos":[0,38]}]}],"pos":[158700,158739],"yaml":true},{"content":"The <code>millisecondsDelay</code> argument is less than -1.","nodes":[{"pos":[0,60],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">millisecondsDelay</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is less than -1.","source":"The <code>millisecondsDelay</code> argument is less than -1."}],"pos":[158914,158975],"yaml":true},{"content":"The task has been canceled.","nodes":[{"pos":[0,27],"content":"The task has been canceled.","nodes":[{"content":"The task has been canceled.","pos":[0,27]}]}],"pos":[159109,159137],"yaml":true},{"content":"The provided <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,70],"content":"The provided <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The provided <code>cancellationToken</code> has already been disposed."}],"pos":[159243,159314],"yaml":true},{"content":"Creates a task that completes after a time delay.","nodes":[{"pos":[0,49],"content":"Creates a task that completes after a time delay.","nodes":[{"content":"Creates a task that completes after a time delay.","pos":[0,49]}]}],"pos":[160780,160830],"yaml":true},{"content":"The <xref:System.Threading.Tasks.Task.Delay%2A> method is typically used to delay the operation of all or part of a task for a specified time interval. Most commonly, the time delay is introduced:  \n  \n-   At the beginning of the task, as the following example shows.  \n  \n     [!code-csharp[System.Threading.Tasks.Task.Delay#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay5.cs#5)]\n     [!code-vb[System.Threading.Tasks.Task.Delay#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay5.vb#5)]  \n  \n-   Sometime while the task is executing. In this case, the call to the <xref:System.Threading.Tasks.Task.Delay%2A> method executes as a child task within a task, as the following example shows. Note that since the task that calls the <xref:System.Threading.Tasks.Task.Delay%2A> method executes asynchronously, the parent task must wait for it to complete by using the `await` keyword.  \n  \n     [!code-csharp[System.Threading.Tasks.Task.Delay#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay5.cs#7)]\n     [!code-vb[System.Threading.Tasks.Task.Delay#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay5.vb#7)]  \n  \n After the specified time delay, the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \n  \n This method depends on the system clock. This means that the time delay will approximately equal the resolution of the system clock if the `millisecondsDelay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.","nodes":[{"pos":[0,196],"content":"The <xref:System.Threading.Tasks.Task.Delay%2A> method is typically used to delay the operation of all or part of a task for a specified time interval. Most commonly, the time delay is introduced:","nodes":[{"content":"The <xref:System.Threading.Tasks.Task.Delay%2A> method is typically used to delay the operation of all or part of a task for a specified time interval. Most commonly, the time delay is introduced:","pos":[0,196],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Delay%2A&gt;</ph> method is typically used to delay the operation of all or part of a task for a specified time interval.","pos":[0,151],"source":"The <xref:System.Threading.Tasks.Task.Delay%2A> method is typically used to delay the operation of all or part of a task for a specified time interval."},{"content":"Most commonly, the time delay is introduced:","pos":[152,196]}]}]},{"pos":[206,267],"content":"At the beginning of the task, as the following example shows.","nodes":[{"content":"At the beginning of the task, as the following example shows.","pos":[0,61]}]},{"pos":[278,585],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Threading.Tasks.Task.Delay#5<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay5.cs#5)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Threading.Tasks.Task.Delay#5<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay5.vb#5)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.Threading.Tasks.Task.Delay#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay5.cs#5)]\n [!code-vb[System.Threading.Tasks.Task.Delay#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay5.vb#5)]"},{"pos":[595,976],"content":"Sometime while the task is executing. In this case, the call to the <xref:System.Threading.Tasks.Task.Delay%2A> method executes as a child task within a task, as the following example shows. Note that since the task that calls the <xref:System.Threading.Tasks.Task.Delay%2A> method executes asynchronously, the parent task must wait for it to complete by using the `await` keyword.","nodes":[{"content":"Sometime while the task is executing.","pos":[0,37]},{"content":"In this case, the call to the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Delay%2A&gt;</ph> method executes as a child task within a task, as the following example shows.","pos":[38,190],"source":" In this case, the call to the <xref:System.Threading.Tasks.Task.Delay%2A> method executes as a child task within a task, as the following example shows."},{"content":"Note that since the task that calls the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Delay%2A&gt;</ph> method executes asynchronously, the parent task must wait for it to complete by using the <ph id=\"ph2\">`await`</ph> keyword.","pos":[191,381],"source":" Note that since the task that calls the <xref:System.Threading.Tasks.Task.Delay%2A> method executes asynchronously, the parent task must wait for it to complete by using the `await` keyword."}]},{"pos":[987,1294],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Threading.Tasks.Task.Delay#7<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay5.cs#7)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Threading.Tasks.Task.Delay#7<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay5.vb#7)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.Threading.Tasks.Task.Delay#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay5.cs#7)]\n [!code-vb[System.Threading.Tasks.Task.Delay#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay5.vb#7)]"},{"pos":[1301,1434],"content":"After the specified time delay, the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.","nodes":[{"content":"After the specified time delay, the task is completed in the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state.","pos":[0,133],"source":"After the specified time delay, the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state."}]},{"pos":[1441,1716],"content":"This method depends on the system clock. This means that the time delay will approximately equal the resolution of the system clock if the `millisecondsDelay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.","nodes":[{"content":"This method depends on the system clock.","pos":[0,40]},{"content":"This means that the time delay will approximately equal the resolution of the system clock if the <ph id=\"ph1\">`millisecondsDelay`</ph> argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.","pos":[41,275],"source":" This means that the time delay will approximately equal the resolution of the system clock if the `millisecondsDelay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems."}]}],"pos":[160841,162574],"yaml":true,"extradata":"MT"},{"content":"The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.","nodes":[{"pos":[0,99],"content":"The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.","nodes":[{"content":"The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.","pos":[0,99]}]}],"pos":[163188,163288],"yaml":true},{"content":"A task that represents the time delay.","nodes":[{"pos":[0,38],"content":"A task that represents the time delay.","nodes":[{"content":"A task that represents the time delay.","pos":[0,38]}]}],"pos":[163359,163398],"yaml":true},{"content":"The <code>millisecondsDelay</code> argument is less than -1.","nodes":[{"pos":[0,60],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">millisecondsDelay</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is less than -1.","source":"The <code>millisecondsDelay</code> argument is less than -1."}],"pos":[163573,163634],"yaml":true},{"content":"Creates a task that completes after a specified time interval.","nodes":[{"pos":[0,62],"content":"Creates a task that completes after a specified time interval.","nodes":[{"content":"Creates a task that completes after a specified time interval.","pos":[0,62]}]}],"pos":[165118,165181],"yaml":true},{"content":"After the specified time delay, the task is completed in <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \n  \n For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.  \n  \n This method depends on the system clock. This means that the time delay will approximately equal the resolution of the system clock if the `delay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.","nodes":[{"pos":[0,129],"content":"After the specified time delay, the task is completed in <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.","nodes":[{"content":"After the specified time delay, the task is completed in <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state.","pos":[0,129],"source":"After the specified time delay, the task is completed in <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state."}]},{"pos":[136,279],"content":"For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.","nodes":[{"content":"For usage scenarios and additional examples, see the documentation for the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Delay%28System.Int32%29&gt;</ph> overload.","pos":[0,143],"source":"For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload."}]},{"pos":[286,549],"content":"This method depends on the system clock. This means that the time delay will approximately equal the resolution of the system clock if the `delay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.","nodes":[{"content":"This method depends on the system clock.","pos":[0,40]},{"content":"This means that the time delay will approximately equal the resolution of the system clock if the <ph id=\"ph1\">`delay`</ph> argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.","pos":[41,263],"source":" This means that the time delay will approximately equal the resolution of the system clock if the `delay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems."}]}],"pos":[165192,165748],"yaml":true,"extradata":"MT"},{"content":"The time span to wait before completing the returned task, or `TimeSpan.FromMilliseconds(-1)` to wait indefinitely.","nodes":[{"pos":[0,115],"content":"The time span to wait before completing the returned task, or <ph id=\"ph1\">`TimeSpan.FromMilliseconds(-1)`</ph> to wait indefinitely.","source":"The time span to wait before completing the returned task, or `TimeSpan.FromMilliseconds(-1)` to wait indefinitely."}],"pos":[166346,166462],"yaml":true},{"content":"A task that represents the time delay.","nodes":[{"pos":[0,38],"content":"A task that represents the time delay.","nodes":[{"content":"A task that represents the time delay.","pos":[0,38]}]}],"pos":[166533,166572],"yaml":true},{"content":"<code>delay</code> represents a negative time interval other than `TimeSpan.FromMillseconds(-1)`.  \n  \n -or-  \n  \n The <code>delay</code> argument's <xref href=\"System.TimeSpan.TotalMilliseconds\"></xref> property is greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">&lt;code&gt;delay&lt;/code&gt;</ph> represents a negative time interval other than <ph id=\"ph2\">`TimeSpan.FromMillseconds(-1)`</ph>.","source":"<code>delay</code> represents a negative time interval other than `TimeSpan.FromMillseconds(-1)`."},{"pos":[104,108],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[115,272],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">delay</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument's <ph id=\"ph2\">&lt;xref href=\"System.TimeSpan.TotalMilliseconds\"&gt;&lt;/xref&gt;</ph> property is greater than <ph id=\"ph3\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>delay</code> argument's <xref href=\"System.TimeSpan.TotalMilliseconds\"></xref> property is greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[166747,167030],"yaml":true},{"content":"Releases all resources used by the current instance of the <xref href=\"System.Threading.Tasks.Task\"></xref> class.","nodes":[{"pos":[0,114],"content":"Releases all resources used by the current instance of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> class.","source":"Releases all resources used by the current instance of the <xref href=\"System.Threading.Tasks.Task\"></xref> class."}],"pos":[168424,168539],"yaml":true},{"content":"The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>. However, particularly if your app targets the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks. For more information, see [Do I need to dispose of Tasks?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) in the Parallel Programming with .NET blog.","nodes":[{"pos":[0,673],"content":"The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>. However, particularly if your app targets the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks. For more information, see [Do I need to dispose of Tasks?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) in the Parallel Programming with .NET blog.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> class implements the <ph id=\"ph2\">&lt;xref:System.IDisposable&gt;</ph> interface because internally it uses resources that also implement <ph id=\"ph3\">&lt;xref:System.IDisposable&gt;</ph>.","pos":[0,179],"source":"The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>."},{"content":"However, particularly if your app targets the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> or later, there is no need to call <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Dispose%2A&gt;</ph> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks.","pos":[180,504],"source":" However, particularly if your app targets the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Do I need to dispose of Tasks?<ept id=\"p1\">](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx)</ept> in the Parallel Programming with .NET blog.","pos":[505,673],"source":" For more information, see [Do I need to dispose of Tasks?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) in the Parallel Programming with .NET blog."}]}],"pos":[168550,169224],"yaml":true,"extradata":"MT"},{"content":"The task is not in one of the final states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\"></xref>.","nodes":[{"pos":[0,247],"content":"The task is not in one of the final states: <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskStatus.Faulted\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph3\">&lt;xref href=\"System.Threading.Tasks.TaskStatus.Canceled\"&gt;&lt;/xref&gt;</ph>.","source":"The task is not in one of the final states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\"></xref>."}],"pos":[169463,169713],"yaml":true},{"content":"Disposes the <xref href=\"System.Threading.Tasks.Task\"></xref>, releasing all of its unmanaged resources.","nodes":[{"pos":[0,104],"content":"Disposes the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>, releasing all of its unmanaged resources.","source":"Disposes the <xref href=\"System.Threading.Tasks.Task\"></xref>, releasing all of its unmanaged resources."}],"pos":[170872,170977],"yaml":true},{"content":"The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>. However, particularly if your app targets the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks. For more information, see [Do I need to dispose of Tasks?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) in the Parallel Programming with .NET blog.","nodes":[{"pos":[0,673],"content":"The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>. However, particularly if your app targets the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks. For more information, see [Do I need to dispose of Tasks?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) in the Parallel Programming with .NET blog.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> class implements the <ph id=\"ph2\">&lt;xref:System.IDisposable&gt;</ph> interface because internally it uses resources that also implement <ph id=\"ph3\">&lt;xref:System.IDisposable&gt;</ph>.","pos":[0,179],"source":"The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>."},{"content":"However, particularly if your app targets the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> or later, there is no need to call <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Dispose%2A&gt;</ph> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks.","pos":[180,504],"source":" However, particularly if your app targets the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Do I need to dispose of Tasks?<ept id=\"p1\">](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx)</ept> in the Parallel Programming with .NET blog.","pos":[505,673],"source":" For more information, see [Do I need to dispose of Tasks?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) in the Parallel Programming with .NET blog."}]}],"pos":[170988,171662],"yaml":true,"extradata":"MT"},{"content":"A Boolean value that indicates whether this method is being called due to a call to <xref href=\"System.Threading.Tasks.Task.Dispose\"></xref>.","nodes":[{"pos":[0,141],"content":"A Boolean value that indicates whether this method is being called due to a call to <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task.Dispose\"&gt;&lt;/xref&gt;</ph>.","source":"A Boolean value that indicates whether this method is being called due to a call to <xref href=\"System.Threading.Tasks.Task.Dispose\"></xref>."}],"pos":[171816,171958],"yaml":true},{"content":"The task is not in one of the final states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\"></xref>.","nodes":[{"pos":[0,247],"content":"The task is not in one of the final states: <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskStatus.Faulted\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph3\">&lt;xref href=\"System.Threading.Tasks.TaskStatus.Canceled\"&gt;&lt;/xref&gt;</ph>.","source":"The task is not in one of the final states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\"></xref>."}],"pos":[172131,172381],"yaml":true},{"content":"Gets the <xref href=\"System.AggregateException\"></xref> that caused the <xref href=\"System.Threading.Tasks.Task\"></xref> to end prematurely. If the <xref href=\"System.Threading.Tasks.Task\"></xref> completed successfully or has not yet thrown any exceptions, this will return `null`.","nodes":[{"pos":[0,282],"content":"Gets the <xref href=\"System.AggregateException\"></xref> that caused the <xref href=\"System.Threading.Tasks.Task\"></xref> to end prematurely. If the <xref href=\"System.Threading.Tasks.Task\"></xref> completed successfully or has not yet thrown any exceptions, this will return `null`.","nodes":[{"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.AggregateException\"&gt;&lt;/xref&gt;</ph> that caused the <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> to end prematurely.","pos":[0,140],"source":"Gets the <xref href=\"System.AggregateException\"></xref> that caused the <xref href=\"System.Threading.Tasks.Task\"></xref> to end prematurely."},{"content":"If the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completed successfully or has not yet thrown any exceptions, this will return <ph id=\"ph2\">`null`</ph>.","pos":[141,282],"source":" If the <xref href=\"System.Threading.Tasks.Task\"></xref> completed successfully or has not yet thrown any exceptions, this will return `null`."}]}],"pos":[173506,173789],"yaml":true},{"content":"Tasks that throw unhandled exceptions store the resulting exception and propagate it wrapped in a <xref:System.AggregateException> in calls to <xref:System.Threading.Tasks.Task.Wait%2A> or in accesses to the <xref:System.Threading.Tasks.Task.Exception%2A> property. Any exceptions not observed by the time the task instance is garbage collected will be propagated on the finalizer thread. For more information and an example, see [Exception Handling (Task Parallel Library)](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).","nodes":[{"pos":[0,557],"content":"Tasks that throw unhandled exceptions store the resulting exception and propagate it wrapped in a <xref:System.AggregateException> in calls to <xref:System.Threading.Tasks.Task.Wait%2A> or in accesses to the <xref:System.Threading.Tasks.Task.Exception%2A> property. Any exceptions not observed by the time the task instance is garbage collected will be propagated on the finalizer thread. For more information and an example, see [Exception Handling (Task Parallel Library)](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).","nodes":[{"content":"Tasks that throw unhandled exceptions store the resulting exception and propagate it wrapped in a <ph id=\"ph1\">&lt;xref:System.AggregateException&gt;</ph> in calls to <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> or in accesses to the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;</ph> property.","pos":[0,265],"source":"Tasks that throw unhandled exceptions store the resulting exception and propagate it wrapped in a <xref:System.AggregateException> in calls to <xref:System.Threading.Tasks.Task.Wait%2A> or in accesses to the <xref:System.Threading.Tasks.Task.Exception%2A> property."},{"content":"Any exceptions not observed by the time the task instance is garbage collected will be propagated on the finalizer thread.","pos":[266,388]},{"content":"For more information and an example, see <bpt id=\"p1\">[</bpt>Exception Handling (Task Parallel Library)<ept id=\"p1\">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.","pos":[389,557],"source":" For more information and an example, see [Exception Handling (Task Parallel Library)](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)."}]}],"pos":[173800,174358],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.AggregateException\"></xref> that caused the <xref href=\"System.Threading.Tasks.Task\"></xref> to end prematurely.","nodes":[{"pos":[0,135],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.AggregateException\"&gt;&lt;/xref&gt;</ph> that caused the <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> to end prematurely.","source":"The <xref href=\"System.AggregateException\"></xref> that caused the <xref href=\"System.Threading.Tasks.Task\"></xref> to end prematurely."}],"pos":[174495,174631],"yaml":true},{"content":"Provides access to factory methods for creating and configuring <xref href=\"System.Threading.Tasks.Task\"></xref> and <xref href=\"System.Threading.Tasks.Task`1\"></xref> instances.","nodes":[{"pos":[0,178],"content":"Provides access to factory methods for creating and configuring <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> instances.","source":"Provides access to factory methods for creating and configuring <xref href=\"System.Threading.Tasks.Task\"></xref> and <xref href=\"System.Threading.Tasks.Task`1\"></xref> instances."}],"pos":[176116,176295],"yaml":true},{"content":"This property returns a default instance of the <xref:System.Threading.Tasks.TaskFactory> class that is identical to the one created by calling the parameterless <xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=fullName> constructor. It has the following property values:  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A?displayProperty=fullName>|<xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName>|  \n|<xref:System.Threading.Tasks.TaskFactory.ContinuationOptions%2A?displayProperty=fullName>|<xref:System.Threading.Tasks.TaskContinuationOptions?displayProperty=fullName>|  \n|<xref:System.Threading.Tasks.TaskFactory.CreationOptions%2A?displayProperty=fullName>|<xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>|  \n|<xref:System.Threading.Tasks.TaskFactory.Scheduler%2A?displayProperty=fullName>|`null`, or <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=fullName>|  \n  \n The most common use of this property is to create and start a new task in a single call to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a <xref:System.Threading.Tasks.Task> object with default configuration values.  \n  \n The following example uses the static <xref:System.Threading.Tasks.Task.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method. The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory. It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=fullName> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.  \n  \n [!code-csharp[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory1.cs#1)]\n [!code-vb[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory1.vb#1)]","nodes":[{"pos":[0,287],"content":"This property returns a default instance of the <xref:System.Threading.Tasks.TaskFactory> class that is identical to the one created by calling the parameterless <xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=fullName> constructor. It has the following property values:","nodes":[{"content":"This property returns a default instance of the <xref:System.Threading.Tasks.TaskFactory> class that is identical to the one created by calling the parameterless <xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=fullName> constructor. It has the following property values:","pos":[0,287],"nodes":[{"content":"This property returns a default instance of the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> class that is identical to the one created by calling the parameterless <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=fullName&gt;</ph> constructor.","pos":[0,249],"source":"This property returns a default instance of the <xref:System.Threading.Tasks.TaskFactory> class that is identical to the one created by calling the parameterless <xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=fullName> constructor."},{"content":"It has the following property values:","pos":[250,287]}]}]},{"pos":[294,302],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[303,308],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[344,431],"content":"<xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A?displayProperty=fullName>","nodes":[]},{"pos":[432,506],"content":"<xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName>","nodes":[]},{"pos":[511,600],"content":"<xref:System.Threading.Tasks.TaskFactory.ContinuationOptions%2A?displayProperty=fullName>","nodes":[]},{"pos":[601,679],"content":"<xref:System.Threading.Tasks.TaskContinuationOptions?displayProperty=fullName>","nodes":[]},{"pos":[684,769],"content":"<xref:System.Threading.Tasks.TaskFactory.CreationOptions%2A?displayProperty=fullName>","nodes":[]},{"pos":[770,844],"content":"<xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>","nodes":[]},{"pos":[849,928],"content":"<xref:System.Threading.Tasks.TaskFactory.Scheduler%2A?displayProperty=fullName>","nodes":[]},{"pos":[929,1019],"content":"<ph id=\"ph1\">`null`</ph>, or <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=fullName&gt;</ph>","source":"`null`, or <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=fullName>"},{"pos":[1027,1208],"content":"The most common use of this property is to create and start a new task in a single call to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method.","nodes":[{"content":"The most common use of this property is to create and start a new task in a single call to the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,181],"source":"The most common use of this property is to create and start a new task in a single call to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method."}]},{"pos":[1216,1483],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a <xref:System.Threading.Tasks.Task> object with default configuration values.","leadings":["","> "],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName&gt;</ph> method provides the easiest way to create a <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object with default configuration values.","pos":[9,265],"source":" Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a <xref:System.Threading.Tasks.Task> object with default configuration values."}]},{"pos":[1490,2232],"content":"The following example uses the static <xref:System.Threading.Tasks.Task.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method. The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory. It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=fullName> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.","nodes":[{"content":"The following example uses the static <xref:System.Threading.Tasks.Task.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method. The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory. It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=fullName> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.","pos":[0,742],"nodes":[{"content":"The following example uses the static <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Factory%2A&gt;</ph> property to make two calls to the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,204],"source":"The following example uses the static <xref:System.Threading.Tasks.Task.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method."},{"content":"The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory.","pos":[205,400]},{"content":"It then calls the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=fullName&gt;</ph> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.","pos":[401,742],"source":" It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=fullName> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution."}]}]},{"pos":[2239,2554],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Threading.Tasks.Task.Factory#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Threading.Tasks.Task.Factory#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory1.cs#1)]\n [!code-vb[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory1.vb#1)]"}],"pos":[176306,178880],"yaml":true,"extradata":"MT"},{"content":"A factory object that can create a variety of <xref href=\"System.Threading.Tasks.Task\"></xref> and <xref href=\"System.Threading.Tasks.Task`1\"></xref> objects.","nodes":[{"pos":[0,158],"content":"A factory object that can create a variety of <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> objects.","source":"A factory object that can create a variety of <xref href=\"System.Threading.Tasks.Task\"></xref> and <xref href=\"System.Threading.Tasks.Task`1\"></xref> objects."}],"pos":[179047,179206],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that's completed due to cancellation with a specified cancellation token.","nodes":[{"pos":[0,132],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that's completed due to cancellation with a specified cancellation token.","source":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that's completed due to cancellation with a specified cancellation token."}],"pos":[180882,181015],"yaml":true},{"content":"The cancellation token with which to complete the task.","nodes":[{"pos":[0,55],"content":"The cancellation token with which to complete the task.","nodes":[{"content":"The cancellation token with which to complete the task.","pos":[0,55]}]}],"pos":[181259,181315],"yaml":true},{"content":"The canceled task.","nodes":[{"pos":[0,18],"content":"The canceled task.","nodes":[{"content":"The canceled task.","pos":[0,18]}]}],"pos":[181386,181405],"yaml":true},{"content":"Cancellation has not been requested for <code>cancellationToken</code>; its <xref href=\"System.Threading.CancellationToken.IsCancellationRequested\"></xref> property is `false`.","nodes":[{"pos":[0,176],"content":"Cancellation has not been requested for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept>; its <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken.IsCancellationRequested\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph3\">`false`</ph>.","source":"Cancellation has not been requested for <code>cancellationToken</code>; its <xref href=\"System.Threading.CancellationToken.IsCancellationRequested\"></xref> property is `false`."}],"pos":[181587,181764],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that's completed due to cancellation with a specified cancellation token.","nodes":[{"pos":[0,134],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that's completed due to cancellation with a specified cancellation token.","source":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that's completed due to cancellation with a specified cancellation token."}],"pos":[183156,183291],"yaml":true},{"content":"The cancellation token with which to complete the task.","nodes":[{"pos":[0,55],"content":"The cancellation token with which to complete the task.","nodes":[{"content":"The cancellation token with which to complete the task.","pos":[0,55]}]}],"pos":[183553,183609],"yaml":true},{"content":"The type of the result returned by the task.","nodes":[{"pos":[0,44],"content":"The type of the result returned by the task.","nodes":[{"content":"The type of the result returned by the task.","pos":[0,44]}]}],"pos":[183666,183711],"yaml":true},{"content":"The canceled task.","nodes":[{"pos":[0,18],"content":"The canceled task.","nodes":[{"content":"The canceled task.","pos":[0,18]}]}],"pos":[183784,183803],"yaml":true},{"content":"Cancellation has not been requested for <code>cancellationToken</code>; its <xref href=\"System.Threading.CancellationToken.IsCancellationRequested\"></xref> property is `false`.","nodes":[{"pos":[0,176],"content":"Cancellation has not been requested for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept>; its <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken.IsCancellationRequested\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph3\">`false`</ph>.","source":"Cancellation has not been requested for <code>cancellationToken</code>; its <xref href=\"System.Threading.CancellationToken.IsCancellationRequested\"></xref> property is `false`."}],"pos":[183988,184165],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that has completed with a specified exception.","nodes":[{"pos":[0,105],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> that has completed with a specified exception.","source":"Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that has completed with a specified exception."}],"pos":[185449,185555],"yaml":true},{"content":"This method creates a <xref:System.Threading.Tasks.Task> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains `exception`. The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path. For an example, see the <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> overload.","nodes":[{"pos":[0,543],"content":"This method creates a <xref:System.Threading.Tasks.Task> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains `exception`. The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path. For an example, see the <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> overload.","nodes":[{"content":"This method creates a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object whose <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property is <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> and whose <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;</ph> property contains <ph id=\"ph5\">`exception`</ph>.","pos":[0,281],"source":"This method creates a <xref:System.Threading.Tasks.Task> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains `exception`."},{"content":"The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path.","pos":[282,431]},{"content":"For an example, see the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29&gt;</ph> overload.","pos":[432,543],"source":" For an example, see the <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> overload."}]}],"pos":[185566,186110],"yaml":true,"extradata":"MT"},{"content":"The exception with which to complete the task.","nodes":[{"pos":[0,46],"content":"The exception with which to complete the task.","nodes":[{"content":"The exception with which to complete the task.","pos":[0,46]}]}],"pos":[186296,186343],"yaml":true},{"content":"The faulted task.","nodes":[{"pos":[0,17],"content":"The faulted task.","nodes":[{"content":"The faulted task.","pos":[0,17]}]}],"pos":[186414,186432],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that's completed with a specified exception.","nodes":[{"pos":[0,105],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that's completed with a specified exception.","source":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that's completed with a specified exception."}],"pos":[187824,187930],"yaml":true},{"content":"This method creates a <xref:System.Threading.Tasks.Task%601> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains `exception`. The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path. The example provides an illustration.","nodes":[{"pos":[0,473],"content":"This method creates a <xref:System.Threading.Tasks.Task%601> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains `exception`. The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path. The example provides an illustration.","nodes":[{"content":"This method creates a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object whose <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property is <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> and whose <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;</ph> property contains <ph id=\"ph5\">`exception`</ph>.","pos":[0,285],"source":"This method creates a <xref:System.Threading.Tasks.Task%601> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains `exception`."},{"content":"The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path.","pos":[286,435]},{"content":"The example provides an illustration.","pos":[436,473]}]}],"pos":[187941,188415],"yaml":true,"extradata":"MT"},{"content":"The exception with which to complete the task.","nodes":[{"pos":[0,46],"content":"The exception with which to complete the task.","nodes":[{"content":"The exception with which to complete the task.","pos":[0,46]}]}],"pos":[189554,189601],"yaml":true},{"content":"The type of the result returned by the task.","nodes":[{"pos":[0,44],"content":"The type of the result returned by the task.","nodes":[{"content":"The type of the result returned by the task.","pos":[0,44]}]}],"pos":[189658,189703],"yaml":true},{"content":"The faulted task.","nodes":[{"pos":[0,17],"content":"The faulted task.","nodes":[{"content":"The faulted task.","pos":[0,17]}]}],"pos":[189776,189794],"yaml":true},{"content":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that's completed successfully with the specified result.","nodes":[{"pos":[0,117],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that's completed successfully with the specified result.","source":"Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that's completed successfully with the specified result."}],"pos":[191126,191244],"yaml":true},{"content":"This method creates a <xref:System.Threading.Tasks.Task%601> object whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=fullName> property is `result` and whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName>. The method is commonly used when the return value of a task is immediately known without executing a longer code path. The example provides an illustration.  \n  \n To create a Task object that does not return a value, retrieve the Task object from the <xref:System.Threading.Tasks.Task.CompletedTask%2A> property.","nodes":[{"pos":[0,459],"content":"This method creates a <xref:System.Threading.Tasks.Task%601> object whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=fullName> property is `result` and whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName>. The method is commonly used when the return value of a task is immediately known without executing a longer code path. The example provides an illustration.","nodes":[{"content":"This method creates a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object whose <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=fullName&gt;</ph> property is <ph id=\"ph3\">`result`</ph> and whose <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property is <ph id=\"ph5\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph>.","pos":[0,302],"source":"This method creates a <xref:System.Threading.Tasks.Task%601> object whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=fullName> property is `result` and whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName>."},{"content":"The method is commonly used when the return value of a task is immediately known without executing a longer code path.","pos":[303,421]},{"content":"The example provides an illustration.","pos":[422,459]}]},{"pos":[466,615],"content":"To create a Task object that does not return a value, retrieve the Task object from the <xref:System.Threading.Tasks.Task.CompletedTask%2A> property.","nodes":[{"content":"To create a Task object that does not return a value, retrieve the Task object from the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.CompletedTask%2A&gt;</ph> property.","pos":[0,149],"source":"To create a Task object that does not return a value, retrieve the Task object from the <xref:System.Threading.Tasks.Task.CompletedTask%2A> property."}]}],"pos":[191255,191875],"yaml":true,"extradata":"MT"},{"content":"The result to store into the completed task.","nodes":[{"pos":[0,44],"content":"The result to store into the completed task.","nodes":[{"content":"The result to store into the completed task.","pos":[0,44]}]}],"pos":[193046,193091],"yaml":true},{"content":"The type of the result returned by the task.","nodes":[{"pos":[0,44],"content":"The type of the result returned by the task.","nodes":[{"content":"The type of the result returned by the task.","pos":[0,44]}]}],"pos":[193148,193193],"yaml":true},{"content":"The successfully completed task.","nodes":[{"pos":[0,32],"content":"The successfully completed task.","nodes":[{"content":"The successfully completed task.","pos":[0,32]}]}],"pos":[193266,193299],"yaml":true},{"content":"Gets an awaiter used to await this <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,84],"content":"Gets an awaiter used to await this <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"Gets an awaiter used to await this <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[194810,194895],"yaml":true},{"content":"This method is intended for compiler use rather than for use in application code.","nodes":[{"pos":[0,81],"content":"This method is intended for compiler use rather than for use in application code.","nodes":[{"content":"This method is intended for compiler use rather than for use in application code.","pos":[0,81]}]}],"pos":[194906,194988],"yaml":true,"extradata":"MT"},{"content":"An awaiter instance.","nodes":[{"pos":[0,20],"content":"An awaiter instance.","nodes":[{"content":"An awaiter instance.","pos":[0,20]}]}],"pos":[195183,195204],"yaml":true},{"content":"Gets an ID for this <xref href=\"System.Threading.Tasks.Task\"></xref> instance.","nodes":[{"pos":[0,78],"content":"Gets an ID for this <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instance.","source":"Gets an ID for this <xref href=\"System.Threading.Tasks.Task\"></xref> instance."}],"pos":[196660,196739],"yaml":true},{"content":"Task IDs are assigned on-demand and do not necessarily represent the order in which task instances are created. Note that although collisions are very rare, task identifiers are not guaranteed to be unique.  \n  \n To get the task ID of the currently executing task from within code that that task is executing, use the <xref:System.Threading.Tasks.Task.CurrentId%2A> property.","nodes":[{"pos":[0,206],"content":"Task IDs are assigned on-demand and do not necessarily represent the order in which task instances are created. Note that although collisions are very rare, task identifiers are not guaranteed to be unique.","nodes":[{"content":"Task IDs are assigned on-demand and do not necessarily represent the order in which task instances are created. Note that although collisions are very rare, task identifiers are not guaranteed to be unique.","pos":[0,206],"nodes":[{"content":"Task IDs are assigned on-demand and do not necessarily represent the order in which task instances are created.","pos":[0,111]},{"content":"Note that although collisions are very rare, task identifiers are not guaranteed to be unique.","pos":[112,206]}]}]},{"pos":[213,375],"content":"To get the task ID of the currently executing task from within code that that task is executing, use the <xref:System.Threading.Tasks.Task.CurrentId%2A> property.","nodes":[{"content":"To get the task ID of the currently executing task from within code that that task is executing, use the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.CurrentId%2A&gt;</ph> property.","pos":[0,162],"source":"To get the task ID of the currently executing task from within code that that task is executing, use the <xref:System.Threading.Tasks.Task.CurrentId%2A> property."}]}],"pos":[196750,197130],"yaml":true,"extradata":"MT"},{"content":"The identifier that is assigned by the system to this <xref href=\"System.Threading.Tasks.Task\"></xref> instance.","nodes":[{"pos":[0,112],"content":"The identifier that is assigned by the system to this <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instance.","source":"The identifier that is assigned by the system to this <xref href=\"System.Threading.Tasks.Task\"></xref> instance."}],"pos":[197232,197345],"yaml":true},{"content":"Gets whether this <xref href=\"System.Threading.Tasks.Task\"></xref> instance has completed execution due to being canceled.","nodes":[{"pos":[0,122],"content":"Gets whether this <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instance has completed execution due to being canceled.","source":"Gets whether this <xref href=\"System.Threading.Tasks.Task\"></xref> instance has completed execution due to being canceled."}],"pos":[198841,198964],"yaml":true},{"content":"A <xref:System.Threading.Tasks.Task> will complete in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state under any of the following conditions:  \n  \n-   Its <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> was marked for cancellation before the task started executing,  \n  \n-   The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by throwing an <xref:System.OperationCanceledException> that bears the same <xref:System.Threading.CancellationToken>.  \n  \n-   The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by calling the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A> method on the <xref:System.Threading.CancellationToken>.  \n  \n> [!IMPORTANT]\n>  Retrieving the value of the <xref:System.Threading.Tasks.Task.IsCanceled%2A> property does not block the calling thread until the task has completed.","nodes":[{"pos":[0,168],"content":"A <xref:System.Threading.Tasks.Task> will complete in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state under any of the following conditions:","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will complete in the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state under any of the following conditions:","pos":[0,168],"source":"A <xref:System.Threading.Tasks.Task> will complete in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state under any of the following conditions:"}]},{"pos":[178,307],"content":"Its <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> was marked for cancellation before the task started executing,","nodes":[{"content":"Its <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A&gt;</ph> was marked for cancellation before the task started executing,","pos":[0,129],"source":"Its <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> was marked for cancellation before the task started executing,"}]},{"pos":[317,569],"content":"The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by throwing an <xref:System.OperationCanceledException> that bears the same <xref:System.Threading.CancellationToken>.","nodes":[{"content":"The task acknowledged the cancellation request on its already signaled <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A&gt;</ph> by throwing an <ph id=\"ph2\">&lt;xref:System.OperationCanceledException&gt;</ph> that bears the same <ph id=\"ph3\">&lt;xref:System.Threading.CancellationToken&gt;</ph>.","pos":[0,252],"source":"The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by throwing an <xref:System.OperationCanceledException> that bears the same <xref:System.Threading.CancellationToken>."}]},{"pos":[579,858],"content":"The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by calling the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A> method on the <xref:System.Threading.CancellationToken>.","nodes":[{"content":"The task acknowledged the cancellation request on its already signaled <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A&gt;</ph> by calling the <ph id=\"ph2\">&lt;xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A&gt;</ph> method on the <ph id=\"ph3\">&lt;xref:System.Threading.CancellationToken&gt;</ph>.","pos":[0,279],"source":"The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by calling the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A> method on the <xref:System.Threading.CancellationToken>."}]},{"pos":[866,1031],"content":"[!IMPORTANT]\n Retrieving the value of the <xref:System.Threading.Tasks.Task.IsCanceled%2A> property does not block the calling thread until the task has completed.","leadings":["","> "],"nodes":[{"content":"Retrieving the value of the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.IsCanceled%2A&gt;</ph> property does not block the calling thread until the task has completed.","pos":[14,163],"source":" Retrieving the value of the <xref:System.Threading.Tasks.Task.IsCanceled%2A> property does not block the calling thread until the task has completed."}]}],"pos":[198975,200018],"yaml":true,"extradata":"MT"},{"content":"`true` if the task has completed due to being canceled; otherwise `false`.","nodes":[{"pos":[0,74],"content":"<ph id=\"ph1\">`true`</ph> if the task has completed due to being canceled; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if the task has completed due to being canceled; otherwise `false`."}],"pos":[200131,200208],"yaml":true},{"content":"Gets whether this <xref href=\"System.Threading.Tasks.Task\"></xref> has completed.","nodes":[{"pos":[0,81],"content":"Gets whether this <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> has completed.","source":"Gets whether this <xref href=\"System.Threading.Tasks.Task\"></xref> has completed."}],"pos":[201718,201800],"yaml":true},{"content":"<xref:System.Threading.Tasks.Task.IsCompleted%2A> will return `true` when the task is in one of the three final states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled>.  \n  \n> [!IMPORTANT]\n>  Retrieving the value of the <xref:System.Threading.Tasks.Task.IsCompleted%2A?displayProperty=fullName> property does not block the calling thread until the task has completed.","nodes":[{"pos":[0,281],"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.IsCompleted%2A&gt;</ph> will return <ph id=\"ph2\">`true`</ph> when the task is in one of the three final states: <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, or <ph id=\"ph5\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>.","source":"<xref:System.Threading.Tasks.Task.IsCompleted%2A> will return `true` when the task is in one of the three final states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled>."},{"pos":[289,480],"content":"[!IMPORTANT]\n Retrieving the value of the <xref:System.Threading.Tasks.Task.IsCompleted%2A?displayProperty=fullName> property does not block the calling thread until the task has completed.","leadings":["","> "],"nodes":[{"content":"Retrieving the value of the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.IsCompleted%2A?displayProperty=fullName&gt;</ph> property does not block the calling thread until the task has completed.","pos":[14,189],"source":" Retrieving the value of the <xref:System.Threading.Tasks.Task.IsCompleted%2A?displayProperty=fullName> property does not block the calling thread until the task has completed."}]}],"pos":[201811,202297],"yaml":true,"extradata":"MT"},{"content":"`true` if the task has completed; otherwise `false`.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">`true`</ph> if the task has completed; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if the task has completed; otherwise `false`."}],"pos":[202411,202466],"yaml":true},{"content":"Gets whether the <xref href=\"System.Threading.Tasks.Task\"></xref> completed due to an unhandled exception.","nodes":[{"pos":[0,106],"content":"Gets whether the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completed due to an unhandled exception.","source":"Gets whether the <xref href=\"System.Threading.Tasks.Task\"></xref> completed due to an unhandled exception."}],"pos":[204747,204854],"yaml":true},{"content":"If <xref:System.Threading.Tasks.Task.IsFaulted%2A> is `true`, the task's <xref:System.Threading.Tasks.Task.Status%2A> is equal to <xref:System.Threading.Tasks.TaskStatus.Faulted>, and its <xref:System.Threading.Tasks.Task.Exception%2A> property will be non-null.  \n  \n> [!IMPORTANT]\n>  Retrieving the value of the <xref:System.Threading.Tasks.Task.IsFaulted%2A?displayProperty=fullName> property does not block the calling thread until the task has completed.","nodes":[{"pos":[0,262],"content":"If <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.IsFaulted%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>, the task's <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> is equal to <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskStatus.Faulted&gt;</ph>, and its <ph id=\"ph5\">&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;</ph> property will be non-null.","source":"If <xref:System.Threading.Tasks.Task.IsFaulted%2A> is `true`, the task's <xref:System.Threading.Tasks.Task.Status%2A> is equal to <xref:System.Threading.Tasks.TaskStatus.Faulted>, and its <xref:System.Threading.Tasks.Task.Exception%2A> property will be non-null."},{"pos":[270,459],"content":"[!IMPORTANT]\n Retrieving the value of the <xref:System.Threading.Tasks.Task.IsFaulted%2A?displayProperty=fullName> property does not block the calling thread until the task has completed.","leadings":["","> "],"nodes":[{"content":"Retrieving the value of the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.IsFaulted%2A?displayProperty=fullName&gt;</ph> property does not block the calling thread until the task has completed.","pos":[14,187],"source":" Retrieving the value of the <xref:System.Threading.Tasks.Task.IsFaulted%2A?displayProperty=fullName> property does not block the calling thread until the task has completed."}]}],"pos":[204865,205330],"yaml":true,"extradata":"MT"},{"content":"`true` if the task has thrown an unhandled exception; otherwise `false`.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">`true`</ph> if the task has thrown an unhandled exception; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if the task has thrown an unhandled exception; otherwise `false`."}],"pos":[205442,205517],"yaml":true},{"content":"Queues the specified work to run on the thread pool and returns a <xref href=\"System.Threading.Tasks.Task\"></xref> object that represents that work.","nodes":[{"pos":[0,148],"content":"Queues the specified work to run on the thread pool and returns a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> object that represents that work.","source":"Queues the specified work to run on the thread pool and returns a <xref href=\"System.Threading.Tasks.Task\"></xref> object that represents that work."}],"pos":[207045,207194],"yaml":true},{"content":"The <xref:System.Threading.Tasks.Task.Run%2A> method allows you to create and execute a task in a single method call and is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method. It creates a task with the following default values:  \n  \n-   Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName>.  \n  \n-   Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>.  \n  \n-   It uses the default task scheduler.  \n  \n For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).","nodes":[{"pos":[0,267],"content":"The <xref:System.Threading.Tasks.Task.Run%2A> method allows you to create and execute a task in a single method call and is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method. It creates a task with the following default values:","nodes":[{"content":"The <xref:System.Threading.Tasks.Task.Run%2A> method allows you to create and execute a task in a single method call and is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method. It creates a task with the following default values:","pos":[0,267],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method allows you to create and execute a task in a single method call and is a simpler alternative to the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> method.","pos":[0,214],"source":"The <xref:System.Threading.Tasks.Task.Run%2A> method allows you to create and execute a task in a single method call and is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method."},{"content":"It creates a task with the following default values:","pos":[215,267]}]}]},{"pos":[277,378],"content":"Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName>.","nodes":[{"content":"Its cancellation token is <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName&gt;</ph>.","pos":[0,101],"source":"Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName>."}]},{"pos":[388,539],"content":"Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>.","nodes":[{"content":"Its <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.CreationOptions%2A&gt;</ph> property value is <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName&gt;</ph>.","pos":[0,151],"source":"Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>."}]},{"pos":[549,584],"content":"It uses the default task scheduler.","nodes":[{"content":"It uses the default task scheduler.","pos":[0,35]}]},{"pos":[591,764],"content":"For information on handling exceptions thrown by task operations, see <bpt id=\"p1\">[</bpt>Exception Handling<ept id=\"p1\">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.","source":"For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)."}],"pos":[207205,207980],"yaml":true,"extradata":"MT"},{"content":"The work to execute asynchronously","nodes":[{"pos":[0,34],"content":"The work to execute asynchronously","nodes":[{"content":"The work to execute asynchronously","pos":[0,34]}]}],"pos":[210567,210602],"yaml":true},{"content":"A task that represents the work queued to execute in the ThreadPool.","nodes":[{"pos":[0,68],"content":"A task that represents the work queued to execute in the ThreadPool.","nodes":[{"content":"A task that represents the work queued to execute in the ThreadPool.","pos":[0,68]}]}],"pos":[210673,210742],"yaml":true},{"content":"The <code>action</code> parameter was `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was <ph id=\"ph2\">`null`</ph>.","source":"The <code>action</code> parameter was `null`."}],"pos":[210903,210949],"yaml":true},{"content":"Queues the specified work to run on the thread pool and returns a proxy for the  task returned by <code>function</code>.","nodes":[{"pos":[0,120],"content":"Queues the specified work to run on the thread pool and returns a proxy for the  task returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"Queues the specified work to run on the thread pool and returns a proxy for the  task returned by <code>function</code>."}],"pos":[212502,212623],"yaml":true},{"content":"For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).","nodes":[{"pos":[0,173],"content":"For information on handling exceptions thrown by task operations, see <bpt id=\"p1\">[</bpt>Exception Handling<ept id=\"p1\">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.","source":"For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)."}],"pos":[212634,212808],"yaml":true,"extradata":"MT"},{"content":"The work to execute asynchronously","nodes":[{"pos":[0,34],"content":"The work to execute asynchronously","nodes":[{"content":"The work to execute asynchronously","pos":[0,34]}]}],"pos":[213030,213065],"yaml":true},{"content":"A task that represents a proxy for the task returned by <code>function</code>.","nodes":[{"pos":[0,78],"content":"A task that represents a proxy for the task returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A task that represents a proxy for the task returned by <code>function</code>."}],"pos":[213136,213215],"yaml":true},{"content":"The <code>function</code> parameter was `null`.","nodes":[{"pos":[0,47],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was <ph id=\"ph2\">`null`</ph>.","source":"The <code>function</code> parameter was `null`."}],"pos":[213376,213424],"yaml":true},{"content":"Queues the specified work to run on the thread pool and returns a <xref href=\"System.Threading.Tasks.Task\"></xref> object that represents that work. A cancellation token allows the work to be cancelled.","nodes":[{"pos":[0,202],"content":"Queues the specified work to run on the thread pool and returns a <xref href=\"System.Threading.Tasks.Task\"></xref> object that represents that work. A cancellation token allows the work to be cancelled.","nodes":[{"content":"Queues the specified work to run on the thread pool and returns a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> object that represents that work.","pos":[0,148],"source":"Queues the specified work to run on the thread pool and returns a <xref href=\"System.Threading.Tasks.Task\"></xref> object that represents that work."},{"content":"A cancellation token allows the work to be cancelled.","pos":[149,202]}]}],"pos":[215046,215249],"yaml":true},{"content":"If cancellation is requested before the task begins execution, the task does not execute. Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.  \n  \n The <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method. It creates a task with the following default values:  \n  \n-   Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>.  \n  \n-   It uses the default task scheduler.  \n  \n For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).","nodes":[{"pos":[0,246],"content":"If cancellation is requested before the task begins execution, the task does not execute. Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.","nodes":[{"content":"If cancellation is requested before the task begins execution, the task does not execute. Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.","pos":[0,246],"nodes":[{"content":"If cancellation is requested before the task begins execution, the task does not execute.","pos":[0,89]},{"content":"Instead it is set to the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> state and throws a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskCanceledException&gt;</ph> exception.","pos":[90,246],"source":" Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception."}]}]},{"pos":[253,583],"content":"The <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method. It creates a task with the following default values:","nodes":[{"content":"The <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method. It creates a task with the following default values:","pos":[0,330],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29&gt;</ph> method is a simpler alternative to the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName&gt;</ph> method.","pos":[0,277],"source":"The <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method."},{"content":"It creates a task with the following default values:","pos":[278,330]}]}]},{"pos":[593,744],"content":"Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>.","nodes":[{"content":"Its <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.CreationOptions%2A&gt;</ph> property value is <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName&gt;</ph>.","pos":[0,151],"source":"Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>."}]},{"pos":[754,789],"content":"It uses the default task scheduler.","nodes":[{"content":"It uses the default task scheduler.","pos":[0,35]}]},{"pos":[796,969],"content":"For information on handling exceptions thrown by task operations, see <bpt id=\"p1\">[</bpt>Exception Handling<ept id=\"p1\">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.","source":"For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)."}],"pos":[215260,216240],"yaml":true,"extradata":"MT"},{"content":"The work to execute asynchronously","nodes":[{"pos":[0,34],"content":"The work to execute asynchronously","nodes":[{"content":"The work to execute asynchronously","pos":[0,34]}]}],"pos":[217829,217864],"yaml":true},{"content":"A cancellation token that can be used to cancel the work","nodes":[{"pos":[0,56],"content":"A cancellation token that can be used to cancel the work","nodes":[{"content":"A cancellation token that can be used to cancel the work","pos":[0,56]}]}],"pos":[217958,218015],"yaml":true},{"content":"A task that represents the work queued to execute in the thread pool.","nodes":[{"pos":[0,69],"content":"A task that represents the work queued to execute in the thread pool.","nodes":[{"content":"A task that represents the work queued to execute in the thread pool.","pos":[0,69]}]}],"pos":[218086,218156],"yaml":true},{"content":"The <code>action</code> parameter was `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was <ph id=\"ph2\">`null`</ph>.","source":"The <code>action</code> parameter was `null`."}],"pos":[218317,218363],"yaml":true},{"content":"The task has been canceled.","nodes":[{"pos":[0,27],"content":"The task has been canceled.","nodes":[{"content":"The task has been canceled.","pos":[0,27]}]}],"pos":[218497,218525],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with <code>cancellationToken</code> was disposed.","nodes":[{"pos":[0,126],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> was disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with <code>cancellationToken</code> was disposed."}],"pos":[218631,218758],"yaml":true},{"content":"Queues the specified work to run on the thread pool and returns a proxy for the task returned by <code>function</code>.","nodes":[{"pos":[0,119],"content":"Queues the specified work to run on the thread pool and returns a proxy for the task returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"Queues the specified work to run on the thread pool and returns a proxy for the task returned by <code>function</code>."}],"pos":[220473,220593],"yaml":true},{"content":"For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).","nodes":[{"pos":[0,173],"content":"For information on handling exceptions thrown by task operations, see <bpt id=\"p1\">[</bpt>Exception Handling<ept id=\"p1\">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.","source":"For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)."}],"pos":[220604,220778],"yaml":true,"extradata":"MT"},{"content":"The work to execute asynchronously.","nodes":[{"pos":[0,35],"content":"The work to execute asynchronously.","nodes":[{"content":"The work to execute asynchronously.","pos":[0,35]}]}],"pos":[221054,221090],"yaml":true},{"content":"A cancellation token that should be used to cancel the work.","nodes":[{"pos":[0,60],"content":"A cancellation token that should be used to cancel the work.","nodes":[{"content":"A cancellation token that should be used to cancel the work.","pos":[0,60]}]}],"pos":[221184,221245],"yaml":true},{"content":"A task that represents a proxy for the task returned by <code>function</code>.","nodes":[{"pos":[0,78],"content":"A task that represents a proxy for the task returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A task that represents a proxy for the task returned by <code>function</code>."}],"pos":[221316,221395],"yaml":true},{"content":"The <code>function</code> parameter was `null`.","nodes":[{"pos":[0,47],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was <ph id=\"ph2\">`null`</ph>.","source":"The <code>function</code> parameter was `null`."}],"pos":[221556,221604],"yaml":true},{"content":"The task has been canceled.","nodes":[{"pos":[0,27],"content":"The task has been canceled.","nodes":[{"content":"The task has been canceled.","pos":[0,27]}]}],"pos":[221738,221766],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with <code>cancellationToken</code> was disposed.","nodes":[{"pos":[0,126],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> was disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with <code>cancellationToken</code> was disposed."}],"pos":[221872,221999],"yaml":true},{"content":"Queues the specified work to run on the thread pool and returns a `Task(TResult)` object that represents that work. A cancellation token allows the work to be cancelled.","nodes":[{"pos":[0,169],"content":"Queues the specified work to run on the thread pool and returns a `Task(TResult)` object that represents that work. A cancellation token allows the work to be cancelled.","nodes":[{"content":"Queues the specified work to run on the thread pool and returns a <ph id=\"ph1\">`Task(TResult)`</ph> object that represents that work.","pos":[0,115],"source":"Queues the specified work to run on the thread pool and returns a `Task(TResult)` object that represents that work."},{"content":"A cancellation token allows the work to be cancelled.","pos":[116,169]}]}],"pos":[223687,223857],"yaml":true},{"content":"If cancellation is requested before the task begins execution, the task does not execute. Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.  \n  \n The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method. It creates a task with the following default values:  \n  \n-   Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>.  \n  \n-   It uses the default task scheduler.  \n  \n For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).","nodes":[{"pos":[0,246],"content":"If cancellation is requested before the task begins execution, the task does not execute. Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.","nodes":[{"content":"If cancellation is requested before the task begins execution, the task does not execute. Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.","pos":[0,246],"nodes":[{"content":"If cancellation is requested before the task begins execution, the task does not execute.","pos":[0,89]},{"content":"Instead it is set to the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> state and throws a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskCanceledException&gt;</ph> exception.","pos":[90,246],"source":" Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception."}]}]},{"pos":[253,452],"content":"The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method. It creates a task with the following default values:","nodes":[{"content":"The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method. It creates a task with the following default values:","pos":[0,199],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method is a simpler alternative to the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> method.","pos":[0,146],"source":"The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method."},{"content":"It creates a task with the following default values:","pos":[147,199]}]}]},{"pos":[462,613],"content":"Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>.","nodes":[{"content":"Its <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.CreationOptions%2A&gt;</ph> property value is <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName&gt;</ph>.","pos":[0,151],"source":"Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>."}]},{"pos":[623,658],"content":"It uses the default task scheduler.","nodes":[{"content":"It uses the default task scheduler.","pos":[0,35]}]},{"pos":[665,838],"content":"For information on handling exceptions thrown by task operations, see <bpt id=\"p1\">[</bpt>Exception Handling<ept id=\"p1\">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.","source":"For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)."}],"pos":[223868,224717],"yaml":true,"extradata":"MT"},{"content":"The work to execute asynchronously","nodes":[{"pos":[0,34],"content":"The work to execute asynchronously","nodes":[{"content":"The work to execute asynchronously","pos":[0,34]}]}],"pos":[226634,226669],"yaml":true},{"content":"A cancellation token that should be used to cancel the work","nodes":[{"pos":[0,59],"content":"A cancellation token that should be used to cancel the work","nodes":[{"content":"A cancellation token that should be used to cancel the work","pos":[0,59]}]}],"pos":[226763,226823],"yaml":true},{"content":"The result type of the task.","nodes":[{"pos":[0,28],"content":"The result type of the task.","nodes":[{"content":"The result type of the task.","pos":[0,28]}]}],"pos":[226880,226909],"yaml":true},{"content":"A `Task(TResult)` that represents the work queued to execute in the thread pool.","nodes":[{"pos":[0,80],"content":"A <ph id=\"ph1\">`Task(TResult)`</ph> that represents the work queued to execute in the thread pool.","source":"A `Task(TResult)` that represents the work queued to execute in the thread pool."}],"pos":[226982,227063],"yaml":true},{"content":"The <code>function</code> parameter is `null`.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>function</code> parameter is `null`."}],"pos":[227227,227274],"yaml":true},{"content":"The task has been canceled.","nodes":[{"pos":[0,27],"content":"The task has been canceled.","nodes":[{"content":"The task has been canceled.","pos":[0,27]}]}],"pos":[227408,227436],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with <code>cancellationToken</code> was disposed.","nodes":[{"pos":[0,126],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> was disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with <code>cancellationToken</code> was disposed."}],"pos":[227542,227669],"yaml":true},{"content":"Queues the specified work to run on the thread pool and returns a proxy for the `Task(TResult)` returned by <code>function</code>.","nodes":[{"pos":[0,130],"content":"Queues the specified work to run on the thread pool and returns a proxy for the <ph id=\"ph1\">`Task(TResult)`</ph> returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"Queues the specified work to run on the thread pool and returns a proxy for the `Task(TResult)` returned by <code>function</code>."}],"pos":[229462,229593],"yaml":true},{"content":"For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).","nodes":[{"pos":[0,173],"content":"For information on handling exceptions thrown by task operations, see <bpt id=\"p1\">[</bpt>Exception Handling<ept id=\"p1\">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.","source":"For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)."}],"pos":[229604,229778],"yaml":true,"extradata":"MT"},{"content":"The work to execute asynchronously","nodes":[{"pos":[0,34],"content":"The work to execute asynchronously","nodes":[{"content":"The work to execute asynchronously","pos":[0,34]}]}],"pos":[230090,230125],"yaml":true},{"content":"A cancellation token that should be used to cancel the work","nodes":[{"pos":[0,59],"content":"A cancellation token that should be used to cancel the work","nodes":[{"content":"A cancellation token that should be used to cancel the work","pos":[0,59]}]}],"pos":[230219,230279],"yaml":true},{"content":"The type of the result returned by the proxy task.","nodes":[{"pos":[0,50],"content":"The type of the result returned by the proxy task.","nodes":[{"content":"The type of the result returned by the proxy task.","pos":[0,50]}]}],"pos":[230336,230387],"yaml":true},{"content":"A `Task(TResult)` that represents a proxy for the `Task(TResult)` returned by <code>function</code>.","nodes":[{"pos":[0,100],"content":"A <ph id=\"ph1\">`Task(TResult)`</ph> that represents a proxy for the <ph id=\"ph2\">`Task(TResult)`</ph> returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A `Task(TResult)` that represents a proxy for the `Task(TResult)` returned by <code>function</code>."}],"pos":[230460,230561],"yaml":true},{"content":"The <code>function</code> parameter was `null`.","nodes":[{"pos":[0,47],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was <ph id=\"ph2\">`null`</ph>.","source":"The <code>function</code> parameter was `null`."}],"pos":[230725,230773],"yaml":true},{"content":"The task has been canceled.","nodes":[{"pos":[0,27],"content":"The task has been canceled.","nodes":[{"content":"The task has been canceled.","pos":[0,27]}]}],"pos":[230907,230935],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with <code>cancellationToken</code> was disposed.","nodes":[{"pos":[0,126],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> was disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with <code>cancellationToken</code> was disposed."}],"pos":[231041,231168],"yaml":true},{"content":"Queues the specified work to run on the thread pool and returns a proxy for the `Task(TResult)` returned by <code>function</code>.","nodes":[{"pos":[0,130],"content":"Queues the specified work to run on the thread pool and returns a proxy for the <ph id=\"ph1\">`Task(TResult)`</ph> returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"Queues the specified work to run on the thread pool and returns a proxy for the `Task(TResult)` returned by <code>function</code>."}],"pos":[232799,232930],"yaml":true},{"content":"For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).","nodes":[{"pos":[0,173],"content":"For information on handling exceptions thrown by task operations, see <bpt id=\"p1\">[</bpt>Exception Handling<ept id=\"p1\">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.","source":"For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)."}],"pos":[232941,233115],"yaml":true,"extradata":"MT"},{"content":"The work to execute asynchronously","nodes":[{"pos":[0,34],"content":"The work to execute asynchronously","nodes":[{"content":"The work to execute asynchronously","pos":[0,34]}]}],"pos":[233373,233408],"yaml":true},{"content":"The type of the result returned by the proxy task.","nodes":[{"pos":[0,50],"content":"The type of the result returned by the proxy task.","nodes":[{"content":"The type of the result returned by the proxy task.","pos":[0,50]}]}],"pos":[233465,233516],"yaml":true},{"content":"A `Task(TResult)` that represents a proxy for the `Task(TResult)` returned by <code>function</code>.","nodes":[{"pos":[0,100],"content":"A <ph id=\"ph1\">`Task(TResult)`</ph> that represents a proxy for the <ph id=\"ph2\">`Task(TResult)`</ph> returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A `Task(TResult)` that represents a proxy for the `Task(TResult)` returned by <code>function</code>."}],"pos":[233589,233690],"yaml":true},{"content":"The <code>function</code> parameter was `null`.","nodes":[{"pos":[0,47],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was <ph id=\"ph2\">`null`</ph>.","source":"The <code>function</code> parameter was `null`."}],"pos":[233854,233902],"yaml":true},{"content":"Queues the specified work to run on the thread pool and returns a <xref href=\"System.Threading.Tasks.Task`1\"></xref> object that represents that work.","nodes":[{"pos":[0,150],"content":"Queues the specified work to run on the thread pool and returns a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> object that represents that work.","source":"Queues the specified work to run on the thread pool and returns a <xref href=\"System.Threading.Tasks.Task`1\"></xref> object that represents that work."}],"pos":[235428,235579],"yaml":true},{"content":"The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=fullName> method. It creates a task with the following default values:  \n  \n-   Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName>.  \n  \n-   Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>.  \n  \n-   It uses the default task scheduler.  \n  \n For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).","nodes":[{"pos":[0,240],"content":"The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=fullName> method. It creates a task with the following default values:","nodes":[{"content":"The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=fullName> method. It creates a task with the following default values:","pos":[0,240],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> method is a simpler alternative to the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=fullName&gt;</ph> method.","pos":[0,187],"source":"The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=fullName> method."},{"content":"It creates a task with the following default values:","pos":[188,240]}]}]},{"pos":[250,351],"content":"Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName>.","nodes":[{"content":"Its cancellation token is <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName&gt;</ph>.","pos":[0,101],"source":"Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName>."}]},{"pos":[361,512],"content":"Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>.","nodes":[{"content":"Its <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.CreationOptions%2A&gt;</ph> property value is <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName&gt;</ph>.","pos":[0,151],"source":"Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>."}]},{"pos":[522,557],"content":"It uses the default task scheduler.","nodes":[{"content":"It uses the default task scheduler.","pos":[0,35]}]},{"pos":[564,737],"content":"For information on handling exceptions thrown by task operations, see <bpt id=\"p1\">[</bpt>Exception Handling<ept id=\"p1\">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.","source":"For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)."}],"pos":[235590,236338],"yaml":true,"extradata":"MT"},{"content":"The work to execute asynchronously.","nodes":[{"pos":[0,35],"content":"The work to execute asynchronously.","nodes":[{"content":"The work to execute asynchronously.","pos":[0,35]}]}],"pos":[237534,237570],"yaml":true},{"content":"The return type of the task.","nodes":[{"pos":[0,28],"content":"The return type of the task.","nodes":[{"content":"The return type of the task.","pos":[0,28]}]}],"pos":[237627,237656],"yaml":true},{"content":"A task object that represents the work queued to execute in the thread pool.","nodes":[{"pos":[0,76],"content":"A task object that represents the work queued to execute in the thread pool.","nodes":[{"content":"A task object that represents the work queued to execute in the thread pool.","pos":[0,76]}]}],"pos":[237729,237806],"yaml":true},{"content":"The <code>function</code> parameter is `null`.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>function</code> parameter is `null`."}],"pos":[237970,238017],"yaml":true},{"content":"Runs the <xref href=\"System.Threading.Tasks.Task\"></xref> synchronously on the current <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref>.","nodes":[{"pos":[0,145],"content":"Runs the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> synchronously on the current <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph>.","source":"Runs the <xref href=\"System.Threading.Tasks.Task\"></xref> synchronously on the current <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref>."}],"pos":[239492,239638],"yaml":true},{"content":"Ordinarily, tasks are executed asynchronously on a thread pool thread and do not block the calling thread. Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously> method are associated with the current <xref:System.Threading.Tasks.TaskScheduler> and are run on the calling thread. If the target scheduler does not support running this task on the calling thread, the task will be scheduled for execution on the scheduler, and the calling thread will block until the task has completed execution. Even though the task runs synchronously, the calling thread should still call <xref:System.Threading.Tasks.Task.Wait%2A> to handle any exceptions that the task might throw.  For more information on exception handling, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).  \n  \n Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor. The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state. A task may be started and run only once. Any attempts to schedule a task a second time results in an exception.","nodes":[{"pos":[0,847],"content":"Ordinarily, tasks are executed asynchronously on a thread pool thread and do not block the calling thread. Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously> method are associated with the current <xref:System.Threading.Tasks.TaskScheduler> and are run on the calling thread. If the target scheduler does not support running this task on the calling thread, the task will be scheduled for execution on the scheduler, and the calling thread will block until the task has completed execution. Even though the task runs synchronously, the calling thread should still call <xref:System.Threading.Tasks.Task.Wait%2A> to handle any exceptions that the task might throw.  For more information on exception handling, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).","nodes":[{"content":"Ordinarily, tasks are executed asynchronously on a thread pool thread and do not block the calling thread.","pos":[0,106]},{"content":"Tasks executed by calling the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.RunSynchronously&gt;</ph> method are associated with the current <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> and are run on the calling thread.","pos":[107,306],"source":" Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously> method are associated with the current <xref:System.Threading.Tasks.TaskScheduler> and are run on the calling thread."},{"content":"If the target scheduler does not support running this task on the calling thread, the task will be scheduled for execution on the scheduler, and the calling thread will block until the task has completed execution.","pos":[307,521]},{"content":"Even though the task runs synchronously, the calling thread should still call <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> to handle any exceptions that the task might throw.","pos":[522,694],"source":" Even though the task runs synchronously, the calling thread should still call <xref:System.Threading.Tasks.Task.Wait%2A> to handle any exceptions that the task might throw."},{"content":"For more information on exception handling, see <bpt id=\"p1\">[</bpt>Exception Handling<ept id=\"p1\">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.","pos":[696,847],"source":"  For more information on exception handling, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)."}]},{"pos":[854,1304],"content":"Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor. The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state. A task may be started and run only once. Any attempts to schedule a task a second time results in an exception.","nodes":[{"content":"Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor. The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state. A task may be started and run only once. Any attempts to schedule a task a second time results in an exception.","pos":[0,450],"nodes":[{"content":"Tasks executed by calling the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.RunSynchronously%2A&gt;</ph> method are instantiated by calling a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> class constructor.","pos":[0,217],"source":"Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor."},{"content":"The task to be run synchronously must be in the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state.","pos":[218,338],"source":" The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state."},{"content":"A task may be started and run only once.","pos":[339,379]},{"content":"Any attempts to schedule a task a second time results in an exception.","pos":[380,450]}]}]}],"pos":[239649,240958],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> instance has been disposed.","nodes":[{"pos":[0,80],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instance has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> instance has been disposed."}],"pos":[242179,242260],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.","nodes":[{"pos":[0,228],"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> is not in a valid state to be started.","pos":[0,91],"source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> is not in a valid state to be started."},{"content":"It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.","pos":[92,228]}]}],"pos":[242370,242599],"yaml":true},{"content":"Runs the <xref href=\"System.Threading.Tasks.Task\"></xref> synchronously on the <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> provided.","nodes":[{"pos":[0,146],"content":"Runs the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> synchronously on the <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> provided.","source":"Runs the <xref href=\"System.Threading.Tasks.Task\"></xref> synchronously on the <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> provided."}],"pos":[244227,244374],"yaml":true},{"content":"Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor. The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state. A task may be started and run only once. Any attempts to schedule a task a second time results in an exception.  \n  \n If the target scheduler does not support running this task on the current thread, the task will be scheduled for execution on the scheduler, and the current thread will block until the task has completed execution. Because of this, the calling thread does not need to call a method such as <xref:System.Threading.Tasks.Task.Wait%2A> to ensure that the task has completed execution. For more information on exception handling for task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).","nodes":[{"pos":[0,450],"content":"Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor. The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state. A task may be started and run only once. Any attempts to schedule a task a second time results in an exception.","nodes":[{"content":"Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor. The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state. A task may be started and run only once. Any attempts to schedule a task a second time results in an exception.","pos":[0,450],"nodes":[{"content":"Tasks executed by calling the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.RunSynchronously%2A&gt;</ph> method are instantiated by calling a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> class constructor.","pos":[0,217],"source":"Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor."},{"content":"The task to be run synchronously must be in the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state.","pos":[218,338],"source":" The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state."},{"content":"A task may be started and run only once.","pos":[339,379]},{"content":"Any attempts to schedule a task a second time results in an exception.","pos":[380,450]}]}]},{"pos":[457,1010],"content":"If the target scheduler does not support running this task on the current thread, the task will be scheduled for execution on the scheduler, and the current thread will block until the task has completed execution. Because of this, the calling thread does not need to call a method such as <xref:System.Threading.Tasks.Task.Wait%2A> to ensure that the task has completed execution. For more information on exception handling for task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).","nodes":[{"content":"If the target scheduler does not support running this task on the current thread, the task will be scheduled for execution on the scheduler, and the current thread will block until the task has completed execution.","pos":[0,214]},{"content":"Because of this, the calling thread does not need to call a method such as <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> to ensure that the task has completed execution.","pos":[215,381],"source":" Because of this, the calling thread does not need to call a method such as <xref:System.Threading.Tasks.Task.Wait%2A> to ensure that the task has completed execution."},{"content":"For more information on exception handling for task operations, see <bpt id=\"p1\">[</bpt>Exception Handling<ept id=\"p1\">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.","pos":[382,553],"source":" For more information on exception handling for task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)."}]}],"pos":[244385,245400],"yaml":true,"extradata":"MT"},{"content":"The scheduler on which to attempt to run this task inline.","nodes":[{"pos":[0,58],"content":"The scheduler on which to attempt to run this task inline.","nodes":[{"content":"The scheduler on which to attempt to run this task inline.","pos":[0,58]}]}],"pos":[245606,245665],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> instance has been disposed.","nodes":[{"pos":[0,80],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instance has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> instance has been disposed."}],"pos":[245843,245924],"yaml":true},{"content":"The <code>scheduler</code> argument is `null`.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>scheduler</code> argument is `null`."}],"pos":[246026,246073],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.","nodes":[{"pos":[0,228],"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> is not in a valid state to be started.","pos":[0,91],"source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> is not in a valid state to be started."},{"content":"It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.","pos":[92,228]}]}],"pos":[246183,246412],"yaml":true},{"content":"Starts the <xref href=\"System.Threading.Tasks.Task\"></xref>, scheduling it for execution to the current <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref>.","nodes":[{"pos":[0,162],"content":"Starts the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>, scheduling it for execution to the current <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph>.","source":"Starts the <xref href=\"System.Threading.Tasks.Task\"></xref>, scheduling it for execution to the current <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref>."}],"pos":[247821,247984],"yaml":true},{"content":"A task may be started and run only once. Any attempts to schedule a task a second time will result in an exception.  \n  \n The <xref:System.Threading.Tasks.Task.Start%2A> is used to execute a task that has been created by calling one of the <xref:System.Threading.Tasks.Task> constructors. Typically, you do this when you need to separate the task's creation from its execution, such as when you conditionally execute tasks that you've created. For the more common case in which you don't need to separate  task instantiation from execution, we recommend that you call an overload of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method.  \n  \n For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).","nodes":[{"pos":[0,115],"content":"A task may be started and run only once. Any attempts to schedule a task a second time will result in an exception.","nodes":[{"content":"A task may be started and run only once. Any attempts to schedule a task a second time will result in an exception.","pos":[0,115],"nodes":[{"content":"A task may be started and run only once.","pos":[0,40]},{"content":"Any attempts to schedule a task a second time will result in an exception.","pos":[41,115]}]}]},{"pos":[122,743],"content":"The <xref:System.Threading.Tasks.Task.Start%2A> is used to execute a task that has been created by calling one of the <xref:System.Threading.Tasks.Task> constructors. Typically, you do this when you need to separate the task's creation from its execution, such as when you conditionally execute tasks that you've created. For the more common case in which you don't need to separate  task instantiation from execution, we recommend that you call an overload of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method.","nodes":[{"content":"The <xref:System.Threading.Tasks.Task.Start%2A> is used to execute a task that has been created by calling one of the <xref:System.Threading.Tasks.Task> constructors. Typically, you do this when you need to separate the task's creation from its execution, such as when you conditionally execute tasks that you've created. For the more common case in which you don't need to separate  task instantiation from execution, we recommend that you call an overload of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method.","pos":[0,621],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> is used to execute a task that has been created by calling one of the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> constructors.","pos":[0,166],"source":"The <xref:System.Threading.Tasks.Task.Start%2A> is used to execute a task that has been created by calling one of the <xref:System.Threading.Tasks.Task> constructors."},{"content":"Typically, you do this when you need to separate the task's creation from its execution, such as when you conditionally execute tasks that you've created.","pos":[167,321]},{"content":"For the more common case in which you don't need to separate  task instantiation from execution, we recommend that you call an overload of the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName&gt;</ph> method.","pos":[322,621],"source":" For the more common case in which you don't need to separate  task instantiation from execution, we recommend that you call an overload of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method."}]}]},{"pos":[750,923],"content":"For information on handling exceptions thrown by task operations, see <bpt id=\"p1\">[</bpt>Exception Handling<ept id=\"p1\">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.","source":"For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)."}],"pos":[247995,248925],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> instance has been disposed.","nodes":[{"pos":[0,80],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instance has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> instance has been disposed."}],"pos":[250000,250081],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.","nodes":[{"pos":[0,228],"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> is not in a valid state to be started.","pos":[0,91],"source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> is not in a valid state to be started."},{"content":"It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.","pos":[92,228]}]}],"pos":[250191,250420],"yaml":true},{"content":"Starts the <xref href=\"System.Threading.Tasks.Task\"></xref>, scheduling it for execution to the specified <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref>.","nodes":[{"pos":[0,164],"content":"Starts the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>, scheduling it for execution to the specified <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph>.","source":"Starts the <xref href=\"System.Threading.Tasks.Task\"></xref>, scheduling it for execution to the specified <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref>."}],"pos":[251982,252147],"yaml":true},{"content":"A task may only be started and run only once. Any attempts to schedule a task a second time will result in an exception.  \n  \n For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).","nodes":[{"pos":[0,120],"content":"A task may only be started and run only once. Any attempts to schedule a task a second time will result in an exception.","nodes":[{"content":"A task may only be started and run only once. Any attempts to schedule a task a second time will result in an exception.","pos":[0,120],"nodes":[{"content":"A task may only be started and run only once.","pos":[0,45]},{"content":"Any attempts to schedule a task a second time will result in an exception.","pos":[46,120]}]}]},{"pos":[127,300],"content":"For information on handling exceptions thrown by task operations, see <bpt id=\"p1\">[</bpt>Exception Handling<ept id=\"p1\">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.","source":"For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)."}],"pos":[252158,252463],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> with which to associate and execute this task.","nodes":[{"pos":[0,108],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> with which to associate and execute this task.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> with which to associate and execute this task."}],"pos":[252658,252767],"yaml":true},{"content":"The <code>scheduler</code> argument is `null`.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>scheduler</code> argument is `null`."}],"pos":[252930,252977],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.","nodes":[{"pos":[0,228],"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> is not in a valid state to be started.","pos":[0,91],"source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> is not in a valid state to be started."},{"content":"It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.","pos":[92,228]}]}],"pos":[253087,253316],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> instance has been disposed.","nodes":[{"pos":[0,80],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instance has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> instance has been disposed."}],"pos":[253422,253503],"yaml":true},{"content":"The scheduler was unable to queue this task.","nodes":[{"pos":[0,44],"content":"The scheduler was unable to queue this task.","nodes":[{"content":"The scheduler was unable to queue this task.","pos":[0,44]}]}],"pos":[253639,253684],"yaml":true},{"content":"Gets the <xref href=\"System.Threading.Tasks.TaskStatus\"></xref> of this task.","nodes":[{"pos":[0,77],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskStatus\"&gt;&lt;/xref&gt;</ph> of this task.","source":"Gets the <xref href=\"System.Threading.Tasks.TaskStatus\"></xref> of this task."}],"pos":[255095,255173],"yaml":true},{"content":"Retrieving the value of the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=fullName> property does not block the calling thread until the task has completed.  \n  \n For more information and an example, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md) and [How to: Cancel a Task and Its Children](~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md).","nodes":[{"pos":[0,170],"content":"Retrieving the value of the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=fullName> property does not block the calling thread until the task has completed.","nodes":[{"content":"Retrieving the value of the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Status%2A?displayProperty=fullName&gt;</ph> property does not block the calling thread until the task has completed.","pos":[0,170],"source":"Retrieving the value of the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=fullName> property does not block the calling thread until the task has completed."}]},{"pos":[177,471],"content":"For more information and an example, see <bpt id=\"p1\">[</bpt>Chaining Tasks by Using Continuation Tasks<ept id=\"p1\">](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)</ept> and <bpt id=\"p2\">[</bpt>How to: Cancel a Task and Its Children<ept id=\"p2\">](~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md)</ept>.","source":"For more information and an example, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md) and [How to: Cancel a Task and Its Children](~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md)."}],"pos":[255184,255660],"yaml":true,"extradata":"MT"},{"content":"The current <xref href=\"System.Threading.Tasks.TaskStatus\"></xref> of this task instance.","nodes":[{"pos":[0,89],"content":"The current <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskStatus\"&gt;&lt;/xref&gt;</ph> of this task instance.","source":"The current <xref href=\"System.Threading.Tasks.TaskStatus\"></xref> of this task instance."}],"pos":[256625,256715],"yaml":true},{"content":"Waits for the <xref href=\"System.Threading.Tasks.Task\"></xref> to complete execution within a specified time interval.","nodes":[{"pos":[0,118],"content":"Waits for the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> to complete execution within a specified time interval.","source":"Waits for the <xref href=\"System.Threading.Tasks.Task\"></xref> to complete execution within a specified time interval."}],"pos":[258258,258377],"yaml":true},{"content":"<xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:  \n  \n-   The task completes successfully.  \n  \n-   The task itself is canceled or throws an exception. In this case, you handle an <xref:System.AggregateException> exception. The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=fullName> property contains details about the exception or exceptions.  \n  \n-   The interval defined by `timeout` elapses. In this case, the current thread resumes execution and the method returns `false`.","nodes":[{"pos":[0,204],"content":"<xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29&gt;</ph> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:","pos":[0,204],"source":"<xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:"}]},{"pos":[214,246],"content":"The task completes successfully.","nodes":[{"content":"The task completes successfully.","pos":[0,32]}]},{"pos":[256,521],"content":"The task itself is canceled or throws an exception. In this case, you handle an <xref:System.AggregateException> exception. The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=fullName> property contains details about the exception or exceptions.","nodes":[{"content":"The task itself is canceled or throws an exception. In this case, you handle an <xref:System.AggregateException> exception. The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=fullName> property contains details about the exception or exceptions.","pos":[0,265],"nodes":[{"content":"The task itself is canceled or throws an exception.","pos":[0,51]},{"content":"In this case, you handle an <ph id=\"ph1\">&lt;xref:System.AggregateException&gt;</ph> exception.","pos":[52,123],"source":" In this case, you handle an <xref:System.AggregateException> exception."},{"content":"The <ph id=\"ph1\">&lt;xref:System.AggregateException.InnerExceptions%2A?displayProperty=fullName&gt;</ph> property contains details about the exception or exceptions.","pos":[124,265],"source":" The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=fullName> property contains details about the exception or exceptions."}]}]},{"pos":[531,656],"content":"The interval defined by `timeout` elapses. In this case, the current thread resumes execution and the method returns `false`.","nodes":[{"content":"The interval defined by <ph id=\"ph1\">`timeout`</ph> elapses.","pos":[0,42],"source":"The interval defined by `timeout` elapses."},{"content":"In this case, the current thread resumes execution and the method returns <ph id=\"ph1\">`false`</ph>.","pos":[43,125],"source":" In this case, the current thread resumes execution and the method returns `false`."}]}],"pos":[258388,259053],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely.","nodes":[{"pos":[0,186],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that represents the number of milliseconds to wait, or a <ph id=\"ph2\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that represents -1 milliseconds to wait indefinitely.","source":"A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely."}],"pos":[260004,260191],"yaml":true},{"content":"`true` if the <xref href=\"System.Threading.Tasks.Task\"></xref> completed execution within the allotted time; otherwise, `false`.","nodes":[{"pos":[0,128],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completed execution within the allotted time; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Threading.Tasks.Task\"></xref> completed execution within the allotted time; otherwise, `false`."}],"pos":[260249,260380],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed."}],"pos":[260546,260618],"yaml":true},{"content":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out.  \n  \n -or-  \n  \n <code>timeout</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,108],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.","source":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out."},{"pos":[115,119],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[126,206],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>timeout</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[260732,260947],"yaml":true},{"content":"The task was canceled. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\"></xref> object.  \n  \n -or-  \n  \n An exception was thrown during the execution of the task. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains information about the exception or exceptions.","nodes":[{"pos":[0,185],"content":"The task was canceled. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\"></xref> object.","nodes":[{"content":"The task was canceled.","pos":[0,22]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.AggregateException.InnerExceptions\"&gt;&lt;/xref&gt;</ph> collection contains a <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskCanceledException\"&gt;&lt;/xref&gt;</ph> object.","pos":[23,185],"source":" The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\"></xref> object."}]},{"pos":[192,196],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[203,394],"content":"An exception was thrown during the execution of the task. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains information about the exception or exceptions.","nodes":[{"content":"An exception was thrown during the execution of the task.","pos":[0,57]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.AggregateException.InnerExceptions\"&gt;&lt;/xref&gt;</ph> collection contains information about the exception or exceptions.","pos":[58,191],"source":" The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains information about the exception or exceptions."}]}],"pos":[261043,261450],"yaml":true},{"content":"Waits for the <xref href=\"System.Threading.Tasks.Task\"></xref> to complete execution. The wait terminates if a timeout interval elapses or a cancellation token is canceled before the task completes.","nodes":[{"pos":[0,198],"content":"Waits for the <xref href=\"System.Threading.Tasks.Task\"></xref> to complete execution. The wait terminates if a timeout interval elapses or a cancellation token is canceled before the task completes.","nodes":[{"content":"Waits for the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> to complete execution.","pos":[0,85],"source":"Waits for the <xref href=\"System.Threading.Tasks.Task\"></xref> to complete execution."},{"content":"The wait terminates if a timeout interval elapses or a cancellation token is canceled before the task completes.","pos":[86,198]}]}],"pos":[263072,263271],"yaml":true},{"content":"<xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:  \n  \n-   The task completes successfully.  \n  \n-   The task itself is canceled or throws an exception. In this case, you handle an <xref:System.AggregateException> exception. The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=fullName> property contains details about the exception or exceptions.  \n  \n-   The `cancellationToken` cancellation token is canceled. In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>.  \n  \n-   The interval defined by `millisecondsTimeout` elapses. In this case, the current thread resumes execution and the method returns `false`.  \n  \n> [!NOTE]\n>  Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation. Passing the `cancellationToken` object to this method simply allows the wait to be canceled based on some condition.","nodes":[{"pos":[0,238],"content":"<xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29&gt;</ph> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:","pos":[0,238],"source":"<xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:"}]},{"pos":[248,280],"content":"The task completes successfully.","nodes":[{"content":"The task completes successfully.","pos":[0,32]}]},{"pos":[290,555],"content":"The task itself is canceled or throws an exception. In this case, you handle an <xref:System.AggregateException> exception. The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=fullName> property contains details about the exception or exceptions.","nodes":[{"content":"The task itself is canceled or throws an exception. In this case, you handle an <xref:System.AggregateException> exception. The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=fullName> property contains details about the exception or exceptions.","pos":[0,265],"nodes":[{"content":"The task itself is canceled or throws an exception.","pos":[0,51]},{"content":"In this case, you handle an <ph id=\"ph1\">&lt;xref:System.AggregateException&gt;</ph> exception.","pos":[52,123],"source":" In this case, you handle an <xref:System.AggregateException> exception."},{"content":"The <ph id=\"ph1\">&lt;xref:System.AggregateException.InnerExceptions%2A?displayProperty=fullName&gt;</ph> property contains details about the exception or exceptions.","pos":[124,265],"source":" The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=fullName> property contains details about the exception or exceptions."}]}]},{"pos":[565,804],"content":"The `cancellationToken` cancellation token is canceled. In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>.","nodes":[{"content":"The <ph id=\"ph1\">`cancellationToken`</ph> cancellation token is canceled.","pos":[0,55],"source":"The `cancellationToken` cancellation token is canceled."},{"content":"In this case, the call to the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29&gt;</ph> method throws an <ph id=\"ph2\">&lt;xref:System.OperationCanceledException&gt;</ph>.","pos":[56,239],"source":" In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>."}]},{"pos":[814,951],"content":"The interval defined by `millisecondsTimeout` elapses. In this case, the current thread resumes execution and the method returns `false`.","nodes":[{"content":"The interval defined by <ph id=\"ph1\">`millisecondsTimeout`</ph> elapses.","pos":[0,54],"source":"The interval defined by `millisecondsTimeout` elapses."},{"content":"In this case, the current thread resumes execution and the method returns <ph id=\"ph1\">`false`</ph>.","pos":[55,137],"source":" In this case, the current thread resumes execution and the method returns `false`."}]},{"pos":[959,1267],"content":"[!NOTE]\n Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation. Passing the `cancellationToken` object to this method simply allows the wait to be canceled based on some condition.","leadings":["","> "],"nodes":[{"content":" Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation. Passing the `cancellationToken` object to this method simply allows the wait to be canceled based on some condition.","pos":[8,306],"nodes":[{"content":"Canceling the <ph id=\"ph1\">`cancellationToken`</ph> cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation.","pos":[1,181],"source":" Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation."},{"content":"Passing the <ph id=\"ph1\">`cancellationToken`</ph> object to this method simply allows the wait to be canceled based on some condition.","pos":[182,298],"source":" Passing the `cancellationToken` object to this method simply allows the wait to be canceled based on some condition."}]}]}],"pos":[263282,264563],"yaml":true,"extradata":"MT"},{"content":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.","nodes":[{"pos":[0,120],"content":"The number of milliseconds to wait, or <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> (-1) to wait indefinitely.","source":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely."}],"pos":[265948,266069],"yaml":true},{"content":"A cancellation token to observe while waiting for the task to complete.","nodes":[{"pos":[0,71],"content":"A cancellation token to observe while waiting for the task to complete.","nodes":[{"content":"A cancellation token to observe while waiting for the task to complete.","pos":[0,71]}]}],"pos":[266163,266235],"yaml":true},{"content":"`true` if the <xref href=\"System.Threading.Tasks.Task\"></xref> completed execution within the allotted time; otherwise, `false`.","nodes":[{"pos":[0,128],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completed execution within the allotted time; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Threading.Tasks.Task\"></xref> completed execution within the allotted time; otherwise, `false`."}],"pos":[266293,266424],"yaml":true},{"content":"The <code>cancellationToken</code> was canceled.","nodes":[{"pos":[0,48],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> was canceled.","source":"The <code>cancellationToken</code> was canceled."}],"pos":[266596,266645],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed."}],"pos":[266751,266823],"yaml":true},{"content":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.","source":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out."}],"pos":[266937,267045],"yaml":true},{"content":"The task was canceled. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\"></xref> object.  \n  \n -or-  \n  \n An exception was thrown during the execution of the task. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains information about the exception or exceptions.","nodes":[{"pos":[0,185],"content":"The task was canceled. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\"></xref> object.","nodes":[{"content":"The task was canceled.","pos":[0,22]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.AggregateException.InnerExceptions\"&gt;&lt;/xref&gt;</ph> collection contains a <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskCanceledException\"&gt;&lt;/xref&gt;</ph> object.","pos":[23,185],"source":" The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\"></xref> object."}]},{"pos":[192,196],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[203,394],"content":"An exception was thrown during the execution of the task. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains information about the exception or exceptions.","nodes":[{"content":"An exception was thrown during the execution of the task.","pos":[0,57]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.AggregateException.InnerExceptions\"&gt;&lt;/xref&gt;</ph> collection contains information about the exception or exceptions.","pos":[58,191],"source":" The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains information about the exception or exceptions."}]}],"pos":[267141,267548],"yaml":true},{"content":"Waits for the <xref href=\"System.Threading.Tasks.Task\"></xref> to complete execution. The wait terminates if a cancellation token is canceled before the task completes.","nodes":[{"pos":[0,168],"content":"Waits for the <xref href=\"System.Threading.Tasks.Task\"></xref> to complete execution. The wait terminates if a cancellation token is canceled before the task completes.","nodes":[{"content":"Waits for the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> to complete execution.","pos":[0,85],"source":"Waits for the <xref href=\"System.Threading.Tasks.Task\"></xref> to complete execution."},{"content":"The wait terminates if a cancellation token is canceled before the task completes.","pos":[86,168]}]}],"pos":[269110,269279],"yaml":true},{"content":"The <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method creates a cancelable wait; that is, it causes the current thread to wait until one of the following occurs:  \n  \n-   The task completes.  \n  \n-   The cancellation token is canceled. In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>.  \n  \n> [!NOTE]\n>  Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation. Passing the `cancellationToken` object to this method simply allows the wait to be canceled.","nodes":[{"pos":[0,198],"content":"The <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method creates a cancelable wait; that is, it causes the current thread to wait until one of the following occurs:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29&gt;</ph> method creates a cancelable wait; that is, it causes the current thread to wait until one of the following occurs:","pos":[0,198],"source":"The <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method creates a cancelable wait; that is, it causes the current thread to wait until one of the following occurs:"}]},{"pos":[208,227],"content":"The task completes.","nodes":[{"content":"The task completes.","pos":[0,19]}]},{"pos":[237,441],"content":"The cancellation token is canceled. In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>.","nodes":[{"content":"The cancellation token is canceled. In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>.","pos":[0,204],"nodes":[{"content":"The cancellation token is canceled.","pos":[0,35]},{"content":"In this case, the call to the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29&gt;</ph> method throws an <ph id=\"ph2\">&lt;xref:System.OperationCanceledException&gt;</ph>.","pos":[36,204],"source":" In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>."}]}]},{"pos":[449,733],"content":"[!NOTE]\n Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation. Passing the `cancellationToken` object to this method simply allows the wait to be canceled.","leadings":["","> "],"nodes":[{"content":" Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation. Passing the `cancellationToken` object to this method simply allows the wait to be canceled.","pos":[8,282],"nodes":[{"content":"Canceling the <ph id=\"ph1\">`cancellationToken`</ph> cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation.","pos":[1,181],"source":" Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation."},{"content":"Passing the <ph id=\"ph1\">`cancellationToken`</ph> object to this method simply allows the wait to be canceled.","pos":[182,274],"source":" Passing the `cancellationToken` object to this method simply allows the wait to be canceled."}]}]}],"pos":[269290,270033],"yaml":true,"extradata":"MT"},{"content":"A cancellation token to observe while waiting for the task to complete.","nodes":[{"pos":[0,71],"content":"A cancellation token to observe while waiting for the task to complete.","nodes":[{"content":"A cancellation token to observe while waiting for the task to complete.","pos":[0,71]}]}],"pos":[271490,271562],"yaml":true},{"content":"The <code>cancellationToken</code> was canceled.","nodes":[{"pos":[0,48],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> was canceled.","source":"The <code>cancellationToken</code> was canceled."}],"pos":[271734,271783],"yaml":true},{"content":"The task has been disposed.","nodes":[{"pos":[0,27],"content":"The task has been disposed.","nodes":[{"content":"The task has been disposed.","pos":[0,27]}]}],"pos":[271889,271917],"yaml":true},{"content":"The task was canceled. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\"></xref> object.  \n  \n -or-  \n  \n An exception was thrown during the execution of the task. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains information about the exception or exceptions.","nodes":[{"pos":[0,185],"content":"The task was canceled. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\"></xref> object.","nodes":[{"content":"The task was canceled.","pos":[0,22]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.AggregateException.InnerExceptions\"&gt;&lt;/xref&gt;</ph> collection contains a <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskCanceledException\"&gt;&lt;/xref&gt;</ph> object.","pos":[23,185],"source":" The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\"></xref> object."}]},{"pos":[192,196],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[203,394],"content":"An exception was thrown during the execution of the task. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains information about the exception or exceptions.","nodes":[{"content":"An exception was thrown during the execution of the task.","pos":[0,57]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.AggregateException.InnerExceptions\"&gt;&lt;/xref&gt;</ph> collection contains information about the exception or exceptions.","pos":[58,191],"source":" The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains information about the exception or exceptions."}]}],"pos":[272013,272420],"yaml":true},{"content":"Waits for the <xref href=\"System.Threading.Tasks.Task\"></xref> to complete execution within a specified number of milliseconds.","nodes":[{"pos":[0,127],"content":"Waits for the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> to complete execution within a specified number of milliseconds.","source":"Waits for the <xref href=\"System.Threading.Tasks.Task\"></xref> to complete execution within a specified number of milliseconds."}],"pos":[273880,274008],"yaml":true},{"content":"<xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:  \n  \n-   The task completes successfully.  \n  \n-   The task itself is canceled or throws an exception. In this case, you handle an <xref:System.AggregateException> exception. The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=fullName> property contains details about the exception or exceptions.  \n  \n-   The interval defined by `millisecondsTimeout` elapses. In this case, the current thread resumes execution and the method returns `false`.","nodes":[{"pos":[0,201],"content":"<xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Wait%28System.Int32%29&gt;</ph> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:","pos":[0,201],"source":"<xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:"}]},{"pos":[211,243],"content":"The task completes successfully.","nodes":[{"content":"The task completes successfully.","pos":[0,32]}]},{"pos":[253,518],"content":"The task itself is canceled or throws an exception. In this case, you handle an <xref:System.AggregateException> exception. The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=fullName> property contains details about the exception or exceptions.","nodes":[{"content":"The task itself is canceled or throws an exception. In this case, you handle an <xref:System.AggregateException> exception. The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=fullName> property contains details about the exception or exceptions.","pos":[0,265],"nodes":[{"content":"The task itself is canceled or throws an exception.","pos":[0,51]},{"content":"In this case, you handle an <ph id=\"ph1\">&lt;xref:System.AggregateException&gt;</ph> exception.","pos":[52,123],"source":" In this case, you handle an <xref:System.AggregateException> exception."},{"content":"The <ph id=\"ph1\">&lt;xref:System.AggregateException.InnerExceptions%2A?displayProperty=fullName&gt;</ph> property contains details about the exception or exceptions.","pos":[124,265],"source":" The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=fullName> property contains details about the exception or exceptions."}]}]},{"pos":[528,665],"content":"The interval defined by `millisecondsTimeout` elapses. In this case, the current thread resumes execution and the method returns `false`.","nodes":[{"content":"The interval defined by <ph id=\"ph1\">`millisecondsTimeout`</ph> elapses.","pos":[0,54],"source":"The interval defined by `millisecondsTimeout` elapses."},{"content":"In this case, the current thread resumes execution and the method returns <ph id=\"ph1\">`false`</ph>.","pos":[55,137],"source":" In this case, the current thread resumes execution and the method returns `false`."}]}],"pos":[274019,274693],"yaml":true,"extradata":"MT"},{"content":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.","nodes":[{"pos":[0,120],"content":"The number of milliseconds to wait, or <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> (-1) to wait indefinitely.","source":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely."}],"pos":[275657,275778],"yaml":true},{"content":"`true` if the <xref href=\"System.Threading.Tasks.Task\"></xref> completed execution within the allotted time; otherwise, `false`.","nodes":[{"pos":[0,128],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> completed execution within the allotted time; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Threading.Tasks.Task\"></xref> completed execution within the allotted time; otherwise, `false`."}],"pos":[275836,275967],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed."}],"pos":[276133,276205],"yaml":true},{"content":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.","source":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out."}],"pos":[276319,276427],"yaml":true},{"content":"The task was canceled. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\"></xref> object.  \n  \n -or-  \n  \n An exception was thrown during the execution of the task. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains information about the exception or exceptions.","nodes":[{"pos":[0,185],"content":"The task was canceled. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\"></xref> object.","nodes":[{"content":"The task was canceled.","pos":[0,22]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.AggregateException.InnerExceptions\"&gt;&lt;/xref&gt;</ph> collection contains a <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskCanceledException\"&gt;&lt;/xref&gt;</ph> object.","pos":[23,185],"source":" The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\"></xref> object."}]},{"pos":[192,196],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[203,394],"content":"An exception was thrown during the execution of the task. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains information about the exception or exceptions.","nodes":[{"content":"An exception was thrown during the execution of the task.","pos":[0,57]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.AggregateException.InnerExceptions\"&gt;&lt;/xref&gt;</ph> collection contains information about the exception or exceptions.","pos":[58,191],"source":" The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains information about the exception or exceptions."}]}],"pos":[276523,276930],"yaml":true},{"content":"Waits for the <xref href=\"System.Threading.Tasks.Task\"></xref> to complete execution.","nodes":[{"pos":[0,85],"content":"Waits for the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> to complete execution.","source":"Waits for the <xref href=\"System.Threading.Tasks.Task\"></xref> to complete execution."}],"pos":[278333,278419],"yaml":true},{"content":"<xref:System.Threading.Tasks.Task.Wait%2A> is a synchronization method that causes the calling thread to wait until the current task has completed. If the current task has not started execution, the Wait method attempts to remove the task from the scheduler and execute it inline on the current thread. If it is unable to do that, or if the current task has already started execution, it blocks the calling thread until the task completes. For more information, see [Task.Wait and \"Inlining\"](http://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx) in the Parallel Programming with .NET blog.  \n  \n For more information and an example, see [How to: Wait on One or More Tasks to Complete](http://msdn.microsoft.com/library/79cb522b-9c93-46ed-b23a-c06908f3a374).","nodes":[{"pos":[0,601],"content":"<xref:System.Threading.Tasks.Task.Wait%2A> is a synchronization method that causes the calling thread to wait until the current task has completed. If the current task has not started execution, the Wait method attempts to remove the task from the scheduler and execute it inline on the current thread. If it is unable to do that, or if the current task has already started execution, it blocks the calling thread until the task completes. For more information, see [Task.Wait and \"Inlining\"](http://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx) in the Parallel Programming with .NET blog.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> is a synchronization method that causes the calling thread to wait until the current task has completed.","pos":[0,147],"source":"<xref:System.Threading.Tasks.Task.Wait%2A> is a synchronization method that causes the calling thread to wait until the current task has completed."},{"content":"If the current task has not started execution, the Wait method attempts to remove the task from the scheduler and execute it inline on the current thread.","pos":[148,302]},{"content":"If it is unable to do that, or if the current task has already started execution, it blocks the calling thread until the task completes.","pos":[303,439]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Task.Wait and \"Inlining\"<ept id=\"p1\">](http://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx)</ept> in the Parallel Programming with .NET blog.","pos":[440,601],"source":" For more information, see [Task.Wait and \"Inlining\"](http://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx) in the Parallel Programming with .NET blog."}]},{"pos":[608,769],"content":"For more information and an example, see <bpt id=\"p1\">[</bpt>How to: Wait on One or More Tasks to Complete<ept id=\"p1\">](http://msdn.microsoft.com/library/79cb522b-9c93-46ed-b23a-c06908f3a374)</ept>.","source":"For more information and an example, see [How to: Wait on One or More Tasks to Complete](http://msdn.microsoft.com/library/79cb522b-9c93-46ed-b23a-c06908f3a374)."}],"pos":[278430,279206],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed."}],"pos":[280149,280221],"yaml":true},{"content":"The task was canceled. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\"></xref> object.  \n  \n -or-  \n  \n An exception was thrown during the execution of the task. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains information about the exception or exceptions.","nodes":[{"pos":[0,185],"content":"The task was canceled. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\"></xref> object.","nodes":[{"content":"The task was canceled.","pos":[0,22]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.AggregateException.InnerExceptions\"&gt;&lt;/xref&gt;</ph> collection contains a <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskCanceledException\"&gt;&lt;/xref&gt;</ph> object.","pos":[23,185],"source":" The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\"></xref> object."}]},{"pos":[192,196],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[203,394],"content":"An exception was thrown during the execution of the task. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains information about the exception or exceptions.","nodes":[{"content":"An exception was thrown during the execution of the task.","pos":[0,57]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.AggregateException.InnerExceptions\"&gt;&lt;/xref&gt;</ph> collection contains information about the exception or exceptions.","pos":[58,191],"source":" The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains information about the exception or exceptions."}]}],"pos":[280317,280724],"yaml":true},{"content":"Waits for all of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution.","nodes":[{"pos":[0,109],"content":"Waits for all of the provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> objects to complete execution.","source":"Waits for all of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution."}],"pos":[282256,282366],"yaml":true},{"content":"An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait.","nodes":[{"pos":[0,88],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances on which to wait.","source":"An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait."}],"pos":[283197,283286],"yaml":true},{"content":"One or more of the <xref href=\"System.Threading.Tasks.Task\"></xref> objects in <code>tasks</code> has been disposed.","nodes":[{"pos":[0,116],"content":"One or more of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> objects in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"One or more of the <xref href=\"System.Threading.Tasks.Task\"></xref> objects in <code>tasks</code> has been disposed."}],"pos":[283455,283572],"yaml":true},{"content":"The <code>tasks</code> argument is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> argument is `null`."}],"pos":[283674,283717],"yaml":true},{"content":"The <code>tasks</code> argument contains a null element.  \n  \n -or-  \n  \n The <code>tasks</code> argument is an empty array.","nodes":[{"pos":[0,56],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument contains a null element.","source":"The <code>tasks</code> argument contains a null element."},{"pos":[63,67],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[74,124],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is an empty array.","source":"The <code>tasks</code> argument is an empty array."}],"pos":[283811,283942],"yaml":true},{"content":"At least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances was canceled. If a task was canceled, the <xref href=\"System.AggregateException\"></xref> exception contains an <xref href=\"System.OperationCanceledException\"></xref> exception in its <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection.  \n  \n -or-  \n  \n An exception was thrown during the execution of at least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances.","nodes":[{"pos":[0,336],"content":"At least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances was canceled. If a task was canceled, the <xref href=\"System.AggregateException\"></xref> exception contains an <xref href=\"System.OperationCanceledException\"></xref> exception in its <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection.","nodes":[{"content":"At least one of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances was canceled.","pos":[0,92],"source":"At least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances was canceled."},{"content":"If a task was canceled, the <ph id=\"ph1\">&lt;xref href=\"System.AggregateException\"&gt;&lt;/xref&gt;</ph> exception contains an <ph id=\"ph2\">&lt;xref href=\"System.OperationCanceledException\"&gt;&lt;/xref&gt;</ph> exception in its <ph id=\"ph3\">&lt;xref href=\"System.AggregateException.InnerExceptions\"&gt;&lt;/xref&gt;</ph> collection.","pos":[93,336],"source":" If a task was canceled, the <xref href=\"System.AggregateException\"></xref> exception contains an <xref href=\"System.OperationCanceledException\"></xref> exception in its <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection."}]},{"pos":[343,347],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[354,481],"content":"An exception was thrown during the execution of at least one of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances.","source":"An exception was thrown during the execution of at least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances."}],"pos":[284038,284536],"yaml":true},{"content":"Waits for all of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution within a specified number of milliseconds.","nodes":[{"pos":[0,151],"content":"Waits for all of the provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> objects to complete execution within a specified number of milliseconds.","source":"Waits for all of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution within a specified number of milliseconds."}],"pos":[286128,286280],"yaml":true},{"content":"An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait.","nodes":[{"pos":[0,88],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances on which to wait.","source":"An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait."}],"pos":[286487,286576],"yaml":true},{"content":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.","nodes":[{"pos":[0,120],"content":"The number of milliseconds to wait, or <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> (-1) to wait indefinitely.","source":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely."}],"pos":[286650,286771],"yaml":true},{"content":"`true` if all of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances completed execution within the allotted time; otherwise, `false`.","nodes":[{"pos":[0,145],"content":"<ph id=\"ph1\">`true`</ph> if all of the <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances completed execution within the allotted time; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if all of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances completed execution within the allotted time; otherwise, `false`."}],"pos":[286829,286977],"yaml":true},{"content":"One or more of the <xref href=\"System.Threading.Tasks.Task\"></xref> objects in <code>tasks</code> has been disposed.","nodes":[{"pos":[0,116],"content":"One or more of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> objects in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"One or more of the <xref href=\"System.Threading.Tasks.Task\"></xref> objects in <code>tasks</code> has been disposed."}],"pos":[287146,287263],"yaml":true},{"content":"The <code>tasks</code> argument is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> argument is `null`."}],"pos":[287365,287408],"yaml":true},{"content":"At least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances was canceled. If a task was canceled, the <xref href=\"System.AggregateException\"></xref> contains an <xref href=\"System.OperationCanceledException\"></xref> in its <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection.  \n  \n -or-  \n  \n An exception was thrown during the execution of at least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances.","nodes":[{"pos":[0,316],"content":"At least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances was canceled. If a task was canceled, the <xref href=\"System.AggregateException\"></xref> contains an <xref href=\"System.OperationCanceledException\"></xref> in its <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection.","nodes":[{"content":"At least one of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances was canceled.","pos":[0,92],"source":"At least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances was canceled."},{"content":"If a task was canceled, the <ph id=\"ph1\">&lt;xref href=\"System.AggregateException\"&gt;&lt;/xref&gt;</ph> contains an <ph id=\"ph2\">&lt;xref href=\"System.OperationCanceledException\"&gt;&lt;/xref&gt;</ph> in its <ph id=\"ph3\">&lt;xref href=\"System.AggregateException.InnerExceptions\"&gt;&lt;/xref&gt;</ph> collection.","pos":[93,316],"source":" If a task was canceled, the <xref href=\"System.AggregateException\"></xref> contains an <xref href=\"System.OperationCanceledException\"></xref> in its <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection."}]},{"pos":[323,327],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[334,461],"content":"An exception was thrown during the execution of at least one of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances.","source":"An exception was thrown during the execution of at least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances."}],"pos":[287504,287982],"yaml":true},{"content":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.","source":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out."}],"pos":[288096,288204],"yaml":true},{"content":"The <code>tasks</code> argument contains a null element.  \n  \n -or-  \n  \n The <code>tasks</code> argument is an empty array.","nodes":[{"pos":[0,56],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument contains a null element.","source":"The <code>tasks</code> argument contains a null element."},{"pos":[63,67],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[74,124],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is an empty array.","source":"The <code>tasks</code> argument is an empty array."}],"pos":[288298,288429],"yaml":true},{"content":"Waits for all of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution unless the wait is cancelled.","nodes":[{"pos":[0,138],"content":"Waits for all of the provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> objects to complete execution unless the wait is cancelled.","source":"Waits for all of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution unless the wait is cancelled."}],"pos":[290123,290262],"yaml":true},{"content":"The `cancellationToken` argument is used to cancel the wait operation. Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> as noted above.","nodes":[{"pos":[0,193],"content":"The `cancellationToken` argument is used to cancel the wait operation. Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> as noted above.","nodes":[{"content":"The <ph id=\"ph1\">`cancellationToken`</ph> argument is used to cancel the wait operation.","pos":[0,70],"source":"The `cancellationToken` argument is used to cancel the wait operation."},{"content":"Cancellation of the tasks is a distinct operation, and is signaled by the <ph id=\"ph1\">&lt;xref:System.AggregateException&gt;</ph> as noted above.","pos":[71,193],"source":" Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> as noted above."}]}],"pos":[290273,290467],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait.","nodes":[{"pos":[0,88],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances on which to wait.","source":"An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait."}],"pos":[290703,290792],"yaml":true},{"content":"A <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> to observe while waiting for the tasks to complete.","nodes":[{"pos":[0,127],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"&gt;&lt;/xref&gt;</ph> to observe while waiting for the tasks to complete.","source":"A <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> to observe while waiting for the tasks to complete."}],"pos":[290886,291014],"yaml":true},{"content":"The <code>cancellationToken</code> was canceled.","nodes":[{"pos":[0,48],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> was canceled.","source":"The <code>cancellationToken</code> was canceled."}],"pos":[291189,291238],"yaml":true},{"content":"The <code>tasks</code> argument is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> argument is `null`."}],"pos":[291340,291383],"yaml":true},{"content":"At least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances was canceled. If a task was canceled, the <xref href=\"System.AggregateException\"></xref> contains an <xref href=\"System.OperationCanceledException\"></xref> in its <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection.  \n  \n -or-  \n  \n An exception was thrown during the execution of at least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances.","nodes":[{"pos":[0,316],"content":"At least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances was canceled. If a task was canceled, the <xref href=\"System.AggregateException\"></xref> contains an <xref href=\"System.OperationCanceledException\"></xref> in its <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection.","nodes":[{"content":"At least one of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances was canceled.","pos":[0,92],"source":"At least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances was canceled."},{"content":"If a task was canceled, the <ph id=\"ph1\">&lt;xref href=\"System.AggregateException\"&gt;&lt;/xref&gt;</ph> contains an <ph id=\"ph2\">&lt;xref href=\"System.OperationCanceledException\"&gt;&lt;/xref&gt;</ph> in its <ph id=\"ph3\">&lt;xref href=\"System.AggregateException.InnerExceptions\"&gt;&lt;/xref&gt;</ph> collection.","pos":[93,316],"source":" If a task was canceled, the <xref href=\"System.AggregateException\"></xref> contains an <xref href=\"System.OperationCanceledException\"></xref> in its <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection."}]},{"pos":[323,327],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[334,461],"content":"An exception was thrown during the execution of at least one of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances.","source":"An exception was thrown during the execution of at least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances."}],"pos":[291479,291957],"yaml":true},{"content":"The <code>tasks</code> argument contains a null element.  \n  \n -or-  \n  \n The <code>tasks</code> argument is an empty array.","nodes":[{"pos":[0,56],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument contains a null element.","source":"The <code>tasks</code> argument contains a null element."},{"pos":[63,67],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[74,124],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is an empty array.","source":"The <code>tasks</code> argument is an empty array."}],"pos":[292051,292182],"yaml":true},{"content":"One or more of the <xref href=\"System.Threading.Tasks.Task\"></xref> objects in <code>tasks</code> has been disposed.","nodes":[{"pos":[0,116],"content":"One or more of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> objects in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"One or more of the <xref href=\"System.Threading.Tasks.Task\"></xref> objects in <code>tasks</code> has been disposed."}],"pos":[292288,292405],"yaml":true},{"content":"Waits for all of the provided cancellable <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution within a specified time interval.","nodes":[{"pos":[0,154],"content":"Waits for all of the provided cancellable <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> objects to complete execution within a specified time interval.","source":"Waits for all of the provided cancellable <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution within a specified time interval."}],"pos":[294015,294170],"yaml":true},{"content":"An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait.","nodes":[{"pos":[0,88],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances on which to wait.","source":"An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait."}],"pos":[294370,294459],"yaml":true},{"content":"A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely.","nodes":[{"pos":[0,186],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that represents the number of milliseconds to wait, or a <ph id=\"ph2\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that represents -1 milliseconds to wait indefinitely.","source":"A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely."}],"pos":[294524,294711],"yaml":true},{"content":"`true` if all of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances completed execution within the allotted time; otherwise, `false`.","nodes":[{"pos":[0,145],"content":"<ph id=\"ph1\">`true`</ph> if all of the <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances completed execution within the allotted time; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if all of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances completed execution within the allotted time; otherwise, `false`."}],"pos":[294769,294917],"yaml":true},{"content":"One or more of the <xref href=\"System.Threading.Tasks.Task\"></xref> objects in <code>tasks</code> has been disposed.","nodes":[{"pos":[0,116],"content":"One or more of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> objects in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"One or more of the <xref href=\"System.Threading.Tasks.Task\"></xref> objects in <code>tasks</code> has been disposed."}],"pos":[295086,295203],"yaml":true},{"content":"The <code>tasks</code> argument is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> argument is `null`."}],"pos":[295305,295348],"yaml":true},{"content":"At least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances was canceled. If a task was canceled, the <xref href=\"System.AggregateException\"></xref> contains an <xref href=\"System.OperationCanceledException\"></xref> in its <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection.  \n  \n -or-  \n  \n An exception was thrown during the execution of at least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances.","nodes":[{"pos":[0,316],"content":"At least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances was canceled. If a task was canceled, the <xref href=\"System.AggregateException\"></xref> contains an <xref href=\"System.OperationCanceledException\"></xref> in its <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection.","nodes":[{"content":"At least one of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances was canceled.","pos":[0,92],"source":"At least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances was canceled."},{"content":"If a task was canceled, the <ph id=\"ph1\">&lt;xref href=\"System.AggregateException\"&gt;&lt;/xref&gt;</ph> contains an <ph id=\"ph2\">&lt;xref href=\"System.OperationCanceledException\"&gt;&lt;/xref&gt;</ph> in its <ph id=\"ph3\">&lt;xref href=\"System.AggregateException.InnerExceptions\"&gt;&lt;/xref&gt;</ph> collection.","pos":[93,316],"source":" If a task was canceled, the <xref href=\"System.AggregateException\"></xref> contains an <xref href=\"System.OperationCanceledException\"></xref> in its <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection."}]},{"pos":[323,327],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[334,461],"content":"An exception was thrown during the execution of at least one of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances.","source":"An exception was thrown during the execution of at least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances."}],"pos":[295444,295922],"yaml":true},{"content":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out.  \n  \n -or-  \n  \n <code>timeout</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,108],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.","source":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out."},{"pos":[115,119],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[126,206],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>timeout</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[296036,296251],"yaml":true},{"content":"The <code>tasks</code> argument contains a null element.  \n  \n -or-  \n  \n The <code>tasks</code> argument is an empty array.","nodes":[{"pos":[0,56],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument contains a null element.","source":"The <code>tasks</code> argument contains a null element."},{"pos":[63,67],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[74,124],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is an empty array.","source":"The <code>tasks</code> argument is an empty array."}],"pos":[296345,296476],"yaml":true},{"content":"Waits for all of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution within a specified number of milliseconds or until the wait is cancelled.","nodes":[{"pos":[0,182],"content":"Waits for all of the provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> objects to complete execution within a specified number of milliseconds or until the wait is cancelled.","source":"Waits for all of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution within a specified number of milliseconds or until the wait is cancelled."}],"pos":[298230,298413],"yaml":true},{"content":"The `cancellationToken` argument is used to cancel the wait operation. Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> noted above.","nodes":[{"pos":[0,190],"content":"The `cancellationToken` argument is used to cancel the wait operation. Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> noted above.","nodes":[{"content":"The <ph id=\"ph1\">`cancellationToken`</ph> argument is used to cancel the wait operation.","pos":[0,70],"source":"The `cancellationToken` argument is used to cancel the wait operation."},{"content":"Cancellation of the tasks is a distinct operation, and is signaled by the <ph id=\"ph1\">&lt;xref:System.AggregateException&gt;</ph> noted above.","pos":[71,190],"source":" Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> noted above."}]}],"pos":[298424,298615],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait.","nodes":[{"pos":[0,88],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances on which to wait.","source":"An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait."}],"pos":[298876,298965],"yaml":true},{"content":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.","nodes":[{"pos":[0,120],"content":"The number of milliseconds to wait, or <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> (-1) to wait indefinitely.","source":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely."}],"pos":[299039,299160],"yaml":true},{"content":"A <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> to observe while waiting for the tasks to complete.","nodes":[{"pos":[0,127],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"&gt;&lt;/xref&gt;</ph> to observe while waiting for the tasks to complete.","source":"A <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> to observe while waiting for the tasks to complete."}],"pos":[299254,299382],"yaml":true},{"content":"`true` if all of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances completed execution within the allotted time; otherwise, `false`.","nodes":[{"pos":[0,145],"content":"<ph id=\"ph1\">`true`</ph> if all of the <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances completed execution within the allotted time; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if all of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances completed execution within the allotted time; otherwise, `false`."}],"pos":[299440,299588],"yaml":true},{"content":"One or more of the <xref href=\"System.Threading.Tasks.Task\"></xref> objects in <code>tasks</code> has been disposed.","nodes":[{"pos":[0,116],"content":"One or more of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> objects in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"One or more of the <xref href=\"System.Threading.Tasks.Task\"></xref> objects in <code>tasks</code> has been disposed."}],"pos":[299757,299874],"yaml":true},{"content":"The <code>tasks</code> argument is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> argument is `null`."}],"pos":[299976,300019],"yaml":true},{"content":"At least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances was canceled. If a task was canceled, the <xref href=\"System.AggregateException\"></xref> contains an <xref href=\"System.OperationCanceledException\"></xref> in its <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection.  \n  \n -or-  \n  \n An exception was thrown during the execution of at least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances.","nodes":[{"pos":[0,316],"content":"At least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances was canceled. If a task was canceled, the <xref href=\"System.AggregateException\"></xref> contains an <xref href=\"System.OperationCanceledException\"></xref> in its <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection.","nodes":[{"content":"At least one of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances was canceled.","pos":[0,92],"source":"At least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances was canceled."},{"content":"If a task was canceled, the <ph id=\"ph1\">&lt;xref href=\"System.AggregateException\"&gt;&lt;/xref&gt;</ph> contains an <ph id=\"ph2\">&lt;xref href=\"System.OperationCanceledException\"&gt;&lt;/xref&gt;</ph> in its <ph id=\"ph3\">&lt;xref href=\"System.AggregateException.InnerExceptions\"&gt;&lt;/xref&gt;</ph> collection.","pos":[93,316],"source":" If a task was canceled, the <xref href=\"System.AggregateException\"></xref> contains an <xref href=\"System.OperationCanceledException\"></xref> in its <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection."}]},{"pos":[323,327],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[334,461],"content":"An exception was thrown during the execution of at least one of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances.","source":"An exception was thrown during the execution of at least one of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances."}],"pos":[300115,300593],"yaml":true},{"content":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.","source":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out."}],"pos":[300707,300815],"yaml":true},{"content":"The <code>tasks</code> argument contains a null element.  \n  \n -or-  \n  \n The <code>tasks</code> argument is an empty array.","nodes":[{"pos":[0,56],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument contains a null element.","source":"The <code>tasks</code> argument contains a null element."},{"pos":[63,67],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[74,124],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is an empty array.","source":"The <code>tasks</code> argument is an empty array."}],"pos":[300909,301040],"yaml":true},{"content":"The <code>cancellationToken</code> was canceled.","nodes":[{"pos":[0,48],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> was canceled.","source":"The <code>cancellationToken</code> was canceled."}],"pos":[301152,301201],"yaml":true},{"content":"Waits for any of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution within a specified number of milliseconds or until a cancellation token is cancelled.","nodes":[{"pos":[0,194],"content":"Waits for any of the provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> objects to complete execution within a specified number of milliseconds or until a cancellation token is cancelled.","source":"Waits for any of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution within a specified number of milliseconds or until a cancellation token is cancelled."}],"pos":[302955,303150],"yaml":true},{"content":"An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait.","nodes":[{"pos":[0,88],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances on which to wait.","source":"An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait."}],"pos":[303410,303499],"yaml":true},{"content":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.","nodes":[{"pos":[0,120],"content":"The number of milliseconds to wait, or <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> (-1) to wait indefinitely.","source":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely."}],"pos":[303573,303694],"yaml":true},{"content":"A <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> to observe while waiting for a task to complete.","nodes":[{"pos":[0,124],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"&gt;&lt;/xref&gt;</ph> to observe while waiting for a task to complete.","source":"A <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> to observe while waiting for a task to complete."}],"pos":[303788,303913],"yaml":true},{"content":"The index of the completed task in the <code>tasks</code> array argument, or -1 if the timeout occurred.","nodes":[{"pos":[0,104],"content":"The index of the completed task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array argument, or -1 if the timeout occurred.","source":"The index of the completed task in the <code>tasks</code> array argument, or -1 if the timeout occurred."}],"pos":[303969,304074],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed."}],"pos":[304243,304315],"yaml":true},{"content":"The <code>tasks</code> argument is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> argument is `null`."}],"pos":[304417,304460],"yaml":true},{"content":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.","source":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out."}],"pos":[304574,304682],"yaml":true},{"content":"The <code>tasks</code> argument contains a null element.","nodes":[{"pos":[0,56],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument contains a null element.","source":"The <code>tasks</code> argument contains a null element."}],"pos":[304776,304833],"yaml":true},{"content":"The <code>cancellationToken</code> was canceled.","nodes":[{"pos":[0,48],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> was canceled.","source":"The <code>cancellationToken</code> was canceled."}],"pos":[304945,304994],"yaml":true},{"content":"Waits for any of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution within a specified time interval.","nodes":[{"pos":[0,142],"content":"Waits for any of the provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> objects to complete execution within a specified time interval.","source":"Waits for any of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution within a specified time interval."}],"pos":[306604,306747],"yaml":true},{"content":"An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait.","nodes":[{"pos":[0,88],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances on which to wait.","source":"An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait."}],"pos":[306946,307035],"yaml":true},{"content":"A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely.","nodes":[{"pos":[0,186],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that represents the number of milliseconds to wait, or a <ph id=\"ph2\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that represents -1 milliseconds to wait indefinitely.","source":"A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely."}],"pos":[307100,307287],"yaml":true},{"content":"The index of the completed task in the <code>tasks</code> array argument, or -1 if the timeout occurred.","nodes":[{"pos":[0,104],"content":"The index of the completed task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array argument, or -1 if the timeout occurred.","source":"The index of the completed task in the <code>tasks</code> array argument, or -1 if the timeout occurred."}],"pos":[307343,307448],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed."}],"pos":[307617,307689],"yaml":true},{"content":"The <code>tasks</code> argument is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> argument is `null`."}],"pos":[307791,307834],"yaml":true},{"content":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out.  \n  \n -or-  \n  \n <code>timeout</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,108],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.","source":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out."},{"pos":[115,119],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[126,206],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>timeout</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[307948,308163],"yaml":true},{"content":"The <code>tasks</code> argument contains a null element.","nodes":[{"pos":[0,56],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument contains a null element.","source":"The <code>tasks</code> argument contains a null element."}],"pos":[308257,308314],"yaml":true},{"content":"Waits for any of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution within a specified number of milliseconds.","nodes":[{"pos":[0,151],"content":"Waits for any of the provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> objects to complete execution within a specified number of milliseconds.","source":"Waits for any of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution within a specified number of milliseconds."}],"pos":[309906,310058],"yaml":true},{"content":"An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait.","nodes":[{"pos":[0,88],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances on which to wait.","source":"An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait."}],"pos":[310264,310353],"yaml":true},{"content":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.","nodes":[{"pos":[0,120],"content":"The number of milliseconds to wait, or <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> (-1) to wait indefinitely.","source":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely."}],"pos":[310427,310548],"yaml":true},{"content":"The index of the completed task in the <code>tasks</code> array argument, or -1 if the timeout occurred.","nodes":[{"pos":[0,104],"content":"The index of the completed task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array argument, or -1 if the timeout occurred.","source":"The index of the completed task in the <code>tasks</code> array argument, or -1 if the timeout occurred."}],"pos":[310604,310709],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed."}],"pos":[310878,310950],"yaml":true},{"content":"The <code>tasks</code> argument is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> argument is `null`."}],"pos":[311052,311095],"yaml":true},{"content":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.","source":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out."}],"pos":[311209,311317],"yaml":true},{"content":"The <code>tasks</code> argument contains a null element.","nodes":[{"pos":[0,56],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument contains a null element.","source":"The <code>tasks</code> argument contains a null element."}],"pos":[311411,311468],"yaml":true},{"content":"Waits for any of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution unless the wait is cancelled.","nodes":[{"pos":[0,138],"content":"Waits for any of the provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> objects to complete execution unless the wait is cancelled.","source":"Waits for any of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution unless the wait is cancelled."}],"pos":[313162,313301],"yaml":true},{"content":"An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait.","nodes":[{"pos":[0,88],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances on which to wait.","source":"An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait."}],"pos":[313536,313625],"yaml":true},{"content":"A <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> to observe while waiting for a task to complete.","nodes":[{"pos":[0,124],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"&gt;&lt;/xref&gt;</ph> to observe while waiting for a task to complete.","source":"A <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> to observe while waiting for a task to complete."}],"pos":[313719,313844],"yaml":true},{"content":"The index of the completed task in the <code>tasks</code> array argument.","nodes":[{"pos":[0,73],"content":"The index of the completed task in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array argument.","source":"The index of the completed task in the <code>tasks</code> array argument."}],"pos":[313900,313974],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed."}],"pos":[314143,314215],"yaml":true},{"content":"The <code>tasks</code> argument is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> argument is `null`."}],"pos":[314317,314360],"yaml":true},{"content":"The <code>tasks</code> argument contains a null element.","nodes":[{"pos":[0,56],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument contains a null element.","source":"The <code>tasks</code> argument contains a null element."}],"pos":[314454,314511],"yaml":true},{"content":"The <code>cancellationToken</code> was canceled.","nodes":[{"pos":[0,48],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> was canceled.","source":"The <code>cancellationToken</code> was canceled."}],"pos":[314623,314672],"yaml":true},{"content":"Waits for any of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution.","nodes":[{"pos":[0,109],"content":"Waits for any of the provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> objects to complete execution.","source":"Waits for any of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution."}],"pos":[316204,316314],"yaml":true},{"content":"An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait.","nodes":[{"pos":[0,88],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> instances on which to wait.","source":"An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait."}],"pos":[317200,317289],"yaml":true},{"content":"The index of the completed <xref href=\"System.Threading.Tasks.Task\"></xref> object in the <code>tasks</code> array.","nodes":[{"pos":[0,115],"content":"The index of the completed <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> object in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array.","source":"The index of the completed <xref href=\"System.Threading.Tasks.Task\"></xref> object in the <code>tasks</code> array."}],"pos":[317345,317461],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed."}],"pos":[317630,317702],"yaml":true},{"content":"The <code>tasks</code> argument is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> argument is `null`."}],"pos":[317804,317847],"yaml":true},{"content":"The <code>tasks</code> argument contains a null element.","nodes":[{"pos":[0,56],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument contains a null element.","source":"The <code>tasks</code> argument contains a null element."}],"pos":[317941,317998],"yaml":true},{"content":"Creates a task that will complete when all of the <xref href=\"System.Threading.Tasks.Task\"></xref> objects in an enumerable collection have completed.","nodes":[{"pos":[0,150],"content":"Creates a task that will complete when all of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> objects in an enumerable collection have completed.","source":"Creates a task that will complete when all of the <xref href=\"System.Threading.Tasks.Task\"></xref> objects in an enumerable collection have completed."}],"pos":[319677,319828],"yaml":true},{"content":"The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.  \n  \n> [!NOTE]\n>  The call to <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method does not block the calling thread.  \n  \n If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state,  where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.  \n  \n If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \n  \n If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \n  \n If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state before it's returned to the caller.","nodes":[{"pos":[0,253],"content":"The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.","nodes":[{"content":"The overloads of the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A&gt;</ph> method that return a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.","pos":[0,253],"source":"The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks."}]},{"pos":[261,445],"content":"[!NOTE]\n The call to <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method does not block the calling thread.","leadings":["","> "],"nodes":[{"content":"The call to <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29&gt;</ph> method does not block the calling thread.","pos":[9,182],"source":" The call to <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method does not block the calling thread."}]},{"pos":[452,744],"content":"If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state,  where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.","nodes":[{"content":"If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state,  where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.","pos":[0,292],"source":"If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state,  where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks."}]},{"pos":[751,934],"content":"If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.","nodes":[{"content":"If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state.","pos":[0,183],"source":"If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state."}]},{"pos":[941,1114],"content":"If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.","nodes":[{"content":"If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state.","pos":[0,173],"source":"If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state."}]},{"pos":[1121,1331],"content":"If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state before it's returned to the caller.","nodes":[{"content":"If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state before it's returned to the caller.","pos":[0,210],"source":"If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state before it's returned to the caller."}]}],"pos":[319839,321184],"yaml":true,"extradata":"MT"},{"content":"The tasks to wait on for completion.","nodes":[{"pos":[0,36],"content":"The tasks to wait on for completion.","nodes":[{"content":"The tasks to wait on for completion.","pos":[0,36]}]}],"pos":[322346,322383],"yaml":true},{"content":"A task that represents the completion of all of the supplied tasks.","nodes":[{"pos":[0,67],"content":"A task that represents the completion of all of the supplied tasks.","nodes":[{"content":"A task that represents the completion of all of the supplied tasks.","pos":[0,67]}]}],"pos":[322454,322522],"yaml":true},{"content":"The <code>tasks</code> argument was `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument was <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> argument was `null`."}],"pos":[322687,322731],"yaml":true},{"content":"The <code>tasks</code> collection contained a `null` task.","nodes":[{"pos":[0,58],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> collection contained a <ph id=\"ph2\">`null`</ph> task.","source":"The <code>tasks</code> collection contained a `null` task."}],"pos":[322825,322884],"yaml":true},{"content":"Creates a task that will complete when all of the <xref href=\"System.Threading.Tasks.Task\"></xref> objects in an array have completed.","nodes":[{"pos":[0,134],"content":"Creates a task that will complete when all of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> objects in an array have completed.","source":"Creates a task that will complete when all of the <xref href=\"System.Threading.Tasks.Task\"></xref> objects in an array have completed."}],"pos":[324416,324551],"yaml":true},{"content":"The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.  \n  \n> [!NOTE]\n>  The call to <xref:System.Threading.Tasks.Task.WhenAll%28System.Threading.Tasks.Task%5B%5D%29> method does not block the calling thread.  \n  \n If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.  \n  \n If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \n  \n If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \n  \n If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state before it's returned to the caller.","nodes":[{"pos":[0,253],"content":"The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.","nodes":[{"content":"The overloads of the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A&gt;</ph> method that return a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.","pos":[0,253],"source":"The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks."}]},{"pos":[261,407],"content":"[!NOTE]\n The call to <xref:System.Threading.Tasks.Task.WhenAll%28System.Threading.Tasks.Task%5B%5D%29> method does not block the calling thread.","leadings":["","> "],"nodes":[{"content":"The call to <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.WhenAll%28System.Threading.Tasks.Task%5B%5D%29&gt;</ph> method does not block the calling thread.","pos":[9,144],"source":" The call to <xref:System.Threading.Tasks.Task.WhenAll%28System.Threading.Tasks.Task%5B%5D%29> method does not block the calling thread."}]},{"pos":[414,705],"content":"If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.","nodes":[{"content":"If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.","pos":[0,291],"source":"If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks."}]},{"pos":[712,895],"content":"If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.","nodes":[{"content":"If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state.","pos":[0,183],"source":"If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state."}]},{"pos":[902,1075],"content":"If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.","nodes":[{"content":"If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state.","pos":[0,173],"source":"If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state."}]},{"pos":[1082,1292],"content":"If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state before it's returned to the caller.","nodes":[{"content":"If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state before it's returned to the caller.","pos":[0,210],"source":"If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state before it's returned to the caller."}]}],"pos":[324562,325868],"yaml":true,"extradata":"MT"},{"content":"The tasks to wait on for completion.","nodes":[{"pos":[0,36],"content":"The tasks to wait on for completion.","nodes":[{"content":"The tasks to wait on for completion.","pos":[0,36]}]}],"pos":[326980,327017],"yaml":true},{"content":"A task that represents the completion of all of the supplied tasks.","nodes":[{"pos":[0,67],"content":"A task that represents the completion of all of the supplied tasks.","nodes":[{"content":"A task that represents the completion of all of the supplied tasks.","pos":[0,67]}]}],"pos":[327088,327156],"yaml":true},{"content":"The <code>tasks</code> argument was `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument was <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> argument was `null`."}],"pos":[327321,327365],"yaml":true},{"content":"The <code>tasks</code> array contained a `null` task.","nodes":[{"pos":[0,53],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contained a <ph id=\"ph2\">`null`</ph> task.","source":"The <code>tasks</code> array contained a `null` task."}],"pos":[327459,327513],"yaml":true},{"content":"Creates a task that will complete when all of the <xref href=\"System.Threading.Tasks.Task`1\"></xref> objects in an enumerable collection have completed.","nodes":[{"pos":[0,152],"content":"Creates a task that will complete when all of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> objects in an enumerable collection have completed.","source":"Creates a task that will complete when all of the <xref href=\"System.Threading.Tasks.Task`1\"></xref> objects in an enumerable collection have completed."}],"pos":[329270,329423],"yaml":true},{"content":"The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7B%60%600%7D%7D%29> method does not block the calling thread. However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread.  \n  \n If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.  \n  \n If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \n  \n If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  The <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=fullName> property of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output task's <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=fullName> property will return an `TResult[]` where `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.  \n  \n If the `tasks` argument contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state before it's returned to the caller. The returned `TResult[]` will be an array of 0 elements.","nodes":[{"pos":[0,314],"content":"The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7B%60%600%7D%7D%29> method does not block the calling thread. However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread.","nodes":[{"content":"The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7B%60%600%7D%7D%29> method does not block the calling thread. However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread.","pos":[0,314],"nodes":[{"content":"The call to <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7B%60%600%7D%7D%29&gt;</ph> method does not block the calling thread.","pos":[0,193],"source":"The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7B%60%600%7D%7D%29> method does not block the calling thread."},{"content":"However, a call to the returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property does block the calling thread.","pos":[194,314],"source":" However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread."}]}]},{"pos":[321,612],"content":"If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.","nodes":[{"content":"If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.","pos":[0,291],"source":"If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks."}]},{"pos":[619,802],"content":"If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.","nodes":[{"content":"If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state.","pos":[0,183],"source":"If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state."}]},{"pos":[809,1464],"content":"If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  The <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=fullName> property of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output task's <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=fullName> property will return an `TResult[]` where `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.","nodes":[{"content":"If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state.","pos":[0,173],"source":"If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=fullName&gt;</ph> property of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output task's <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=fullName&gt;</ph> property will return an <ph id=\"ph3\">`TResult[]`</ph> where <ph id=\"ph4\">`arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`</ph>.","pos":[175,655],"source":"  The <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=fullName> property of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output task's <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=fullName> property will return an `TResult[]` where `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`."}]},{"pos":[1471,1729],"content":"If the `tasks` argument contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state before it's returned to the caller. The returned `TResult[]` will be an array of 0 elements.","nodes":[{"content":"If the <ph id=\"ph1\">`tasks`</ph> argument contains no tasks, the returned task will immediately transition to a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state before it's returned to the caller.","pos":[0,201],"source":"If the `tasks` argument contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state before it's returned to the caller."},{"content":"The returned <ph id=\"ph1\">`TResult[]`</ph> will be an array of 0 elements.","pos":[202,258],"source":" The returned `TResult[]` will be an array of 0 elements."}]}],"pos":[329434,331174],"yaml":true,"extradata":"MT"},{"content":"The tasks to wait on for completion.","nodes":[{"pos":[0,36],"content":"The tasks to wait on for completion.","nodes":[{"content":"The tasks to wait on for completion.","pos":[0,36]}]}],"pos":[332639,332676],"yaml":true},{"content":"The type of the completed task.","nodes":[{"pos":[0,31],"content":"The type of the completed task.","nodes":[{"content":"The type of the completed task.","pos":[0,31]}]}],"pos":[332733,332765],"yaml":true},{"content":"A task that represents the completion of all of the supplied tasks.","nodes":[{"pos":[0,67],"content":"A task that represents the completion of all of the supplied tasks.","nodes":[{"content":"A task that represents the completion of all of the supplied tasks.","pos":[0,67]}]}],"pos":[332847,332915],"yaml":true},{"content":"The <code>tasks</code> argument was `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument was <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> argument was `null`."}],"pos":[333083,333127],"yaml":true},{"content":"The <code>tasks</code> collection contained a `null` task.","nodes":[{"pos":[0,58],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> collection contained a <ph id=\"ph2\">`null`</ph> task.","source":"The <code>tasks</code> collection contained a `null` task."}],"pos":[333221,333280],"yaml":true},{"content":"Creates a task that will complete when all of the <xref href=\"System.Threading.Tasks.Task`1\"></xref> objects in an array have completed.","nodes":[{"pos":[0,136],"content":"Creates a task that will complete when all of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> objects in an array have completed.","source":"Creates a task that will complete when all of the <xref href=\"System.Threading.Tasks.Task`1\"></xref> objects in an array have completed."}],"pos":[334890,335027],"yaml":true},{"content":"The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%29> method does not block the calling thread. However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread.  \n  \n If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.  \n  \n If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \n  \n If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  The <xref:System.Threading.Tasks.Task%601.Result%2A> of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output   task's <xref:System.Threading.Tasks.Task%601.Result%2A> will return an `TResult[]` where `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.  \n  \n If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state before it's returned to the caller.  The returned `TResult[]` will be an array of 0 elements.","nodes":[{"pos":[0,276],"content":"The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%29> method does not block the calling thread. However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread.","nodes":[{"content":"The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%29> method does not block the calling thread. However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread.","pos":[0,276],"nodes":[{"content":"The call to <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%29&gt;</ph> method does not block the calling thread.","pos":[0,155],"source":"The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%29> method does not block the calling thread."},{"content":"However, a call to the returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property does block the calling thread.","pos":[156,276],"source":" However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread."}]}]},{"pos":[283,574],"content":"If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.","nodes":[{"content":"If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.","pos":[0,291],"source":"If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks."}]},{"pos":[581,764],"content":"If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.","nodes":[{"content":"If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state.","pos":[0,183],"source":"If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state."}]},{"pos":[771,1360],"content":"If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  The <xref:System.Threading.Tasks.Task%601.Result%2A> of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output   task's <xref:System.Threading.Tasks.Task%601.Result%2A> will return an `TResult[]` where `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.","nodes":[{"content":"If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state.","pos":[0,173],"source":"If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output   task's <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> will return an <ph id=\"ph3\">`TResult[]`</ph> where <ph id=\"ph4\">`arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`</ph>.","pos":[175,589],"source":"  The <xref:System.Threading.Tasks.Task%601.Result%2A> of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output   task's <xref:System.Threading.Tasks.Task%601.Result%2A> will return an `TResult[]` where `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`."}]},{"pos":[1367,1635],"content":"If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state before it's returned to the caller.  The returned `TResult[]` will be an array of 0 elements.","nodes":[{"content":"If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state before it's returned to the caller.","pos":[0,210],"source":"If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state before it's returned to the caller."},{"content":"The returned <ph id=\"ph1\">`TResult[]`</ph> will be an array of 0 elements.","pos":[212,268],"source":"  The returned `TResult[]` will be an array of 0 elements."}]}],"pos":[335038,336684],"yaml":true,"extradata":"MT"},{"content":"The tasks to wait on for completion.","nodes":[{"pos":[0,36],"content":"The tasks to wait on for completion.","nodes":[{"content":"The tasks to wait on for completion.","pos":[0,36]}]}],"pos":[337917,337954],"yaml":true},{"content":"The type of the completed task.","nodes":[{"pos":[0,31],"content":"The type of the completed task.","nodes":[{"content":"The type of the completed task.","pos":[0,31]}]}],"pos":[338011,338043],"yaml":true},{"content":"A task that represents the completion of all of the supplied tasks.","nodes":[{"pos":[0,67],"content":"A task that represents the completion of all of the supplied tasks.","nodes":[{"content":"A task that represents the completion of all of the supplied tasks.","pos":[0,67]}]}],"pos":[338125,338193],"yaml":true},{"content":"The <code>tasks</code> argument was `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument was <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> argument was `null`."}],"pos":[338361,338405],"yaml":true},{"content":"The <code>tasks</code> array contained a `null` task.","nodes":[{"pos":[0,53],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contained a <ph id=\"ph2\">`null`</ph> task.","source":"The <code>tasks</code> array contained a `null` task."}],"pos":[338499,338553],"yaml":true},{"content":"Creates a task that will complete when any of the supplied tasks have completed.","nodes":[{"pos":[0,80],"content":"Creates a task that will complete when any of the supplied tasks have completed.","nodes":[{"content":"Creates a task that will complete when any of the supplied tasks have completed.","pos":[0,80]}]}],"pos":[340232,340313],"yaml":true},{"content":"The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the `RanToCompletion` state  with its Result set to the first task to complete.  This is true even if the first task to complete ended in the `Canceled` or `Faulted` state.","nodes":[{"pos":[0,288],"content":"The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the `RanToCompletion` state  with its Result set to the first task to complete.  This is true even if the first task to complete ended in the `Canceled` or `Faulted` state.","nodes":[{"content":"The returned task will complete when any of the supplied tasks has completed.","pos":[0,77]},{"content":"The returned task will always end in the <ph id=\"ph1\">`RanToCompletion`</ph> state  with its Result set to the first task to complete.","pos":[79,195],"source":"  The returned task will always end in the `RanToCompletion` state  with its Result set to the first task to complete."},{"content":"This is true even if the first task to complete ended in the <ph id=\"ph1\">`Canceled`</ph> or <ph id=\"ph2\">`Faulted`</ph> state.","pos":[197,288],"source":"  This is true even if the first task to complete ended in the `Canceled` or `Faulted` state."}]}],"pos":[340324,340613],"yaml":true,"extradata":"MT"},{"content":"The tasks to wait on for completion.","nodes":[{"pos":[0,36],"content":"The tasks to wait on for completion.","nodes":[{"content":"The tasks to wait on for completion.","pos":[0,36]}]}],"pos":[340923,340960],"yaml":true},{"content":"A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.","nodes":[{"pos":[0,121],"content":"A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.","nodes":[{"content":"A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.","pos":[0,121],"nodes":[{"content":"A task that represents the completion of one of the supplied tasks.","pos":[0,67]},{"content":"The return task's Result is the task that completed.","pos":[69,121]}]}]}],"pos":[341060,341182],"yaml":true},{"content":"The <code>tasks</code> argument was `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument was <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> argument was `null`."}],"pos":[341347,341391],"yaml":true},{"content":"The <code>tasks</code> array contained a null task, or was empty.","nodes":[{"pos":[0,65],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contained a null task, or was empty.","source":"The <code>tasks</code> array contained a null task, or was empty."}],"pos":[341485,341551],"yaml":true},{"content":"Creates a task that will complete when any of the supplied tasks have completed.","nodes":[{"pos":[0,80],"content":"Creates a task that will complete when any of the supplied tasks have completed.","nodes":[{"content":"Creates a task that will complete when any of the supplied tasks have completed.","pos":[0,80]}]}],"pos":[343083,343164],"yaml":true},{"content":"The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the `RanToCompletion` state   with its `Result` set to the first task to complete.  This is true even if the first task to complete ended in the `Canceled` or `Faulted` state.","nodes":[{"pos":[0,291],"content":"The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the `RanToCompletion` state   with its `Result` set to the first task to complete.  This is true even if the first task to complete ended in the `Canceled` or `Faulted` state.","nodes":[{"content":"The returned task will complete when any of the supplied tasks has completed.","pos":[0,77]},{"content":"The returned task will always end in the <ph id=\"ph1\">`RanToCompletion`</ph> state   with its <ph id=\"ph2\">`Result`</ph> set to the first task to complete.","pos":[79,198],"source":"  The returned task will always end in the `RanToCompletion` state   with its `Result` set to the first task to complete."},{"content":"This is true even if the first task to complete ended in the <ph id=\"ph1\">`Canceled`</ph> or <ph id=\"ph2\">`Faulted`</ph> state.","pos":[200,291],"source":"  This is true even if the first task to complete ended in the `Canceled` or `Faulted` state."}]}],"pos":[343175,343467],"yaml":true,"extradata":"MT"},{"content":"The tasks to wait on for completion.","nodes":[{"pos":[0,36],"content":"The tasks to wait on for completion.","nodes":[{"content":"The tasks to wait on for completion.","pos":[0,36]}]}],"pos":[343701,343738],"yaml":true},{"content":"A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.","nodes":[{"pos":[0,121],"content":"A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.","nodes":[{"content":"A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.","pos":[0,121],"nodes":[{"content":"A task that represents the completion of one of the supplied tasks.","pos":[0,67]},{"content":"The return task's Result is the task that completed.","pos":[69,121]}]}]}],"pos":[343838,343960],"yaml":true},{"content":"The <code>tasks</code> argument was null.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument was null.","source":"The <code>tasks</code> argument was null."}],"pos":[344125,344167],"yaml":true},{"content":"The <code>tasks</code> array contained a null task, or was empty.","nodes":[{"pos":[0,65],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contained a null task, or was empty.","source":"The <code>tasks</code> array contained a null task, or was empty."}],"pos":[344261,344327],"yaml":true},{"content":"Creates a task that will complete when any of the supplied tasks have completed.","nodes":[{"pos":[0,80],"content":"Creates a task that will complete when any of the supplied tasks have completed.","nodes":[{"content":"Creates a task that will complete when any of the supplied tasks have completed.","pos":[0,80]}]}],"pos":[345937,346018],"yaml":true},{"content":"The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the RanToCompletion state with its Result set to the first task to complete. This is true even if the first task to complete ended in the Canceled or Faulted state.","nodes":[{"pos":[0,280],"content":"The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the RanToCompletion state with its Result set to the first task to complete. This is true even if the first task to complete ended in the Canceled or Faulted state.","nodes":[{"content":"The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the RanToCompletion state with its Result set to the first task to complete. This is true even if the first task to complete ended in the Canceled or Faulted state.","pos":[0,280],"nodes":[{"content":"The returned task will complete when any of the supplied tasks has completed.","pos":[0,77]},{"content":"The returned task will always end in the RanToCompletion state with its Result set to the first task to complete.","pos":[79,192]},{"content":"This is true even if the first task to complete ended in the Canceled or Faulted state.","pos":[193,280]}]}]}],"pos":[346029,346310],"yaml":true,"extradata":"MT"},{"content":"The tasks to wait on for completion.","nodes":[{"pos":[0,36],"content":"The tasks to wait on for completion.","nodes":[{"content":"The tasks to wait on for completion.","pos":[0,36]}]}],"pos":[346580,346617],"yaml":true},{"content":"The type of the completed task.","nodes":[{"pos":[0,31],"content":"The type of the completed task.","nodes":[{"content":"The type of the completed task.","pos":[0,31]}]}],"pos":[346674,346706],"yaml":true},{"content":"A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.","nodes":[{"pos":[0,121],"content":"A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.","nodes":[{"content":"A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.","pos":[0,121],"nodes":[{"content":"A task that represents the completion of one of the supplied tasks.","pos":[0,67]},{"content":"The return task's Result is the task that completed.","pos":[69,121]}]}]}],"pos":[346815,346937],"yaml":true},{"content":"The <code>tasks</code> argument was null.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument was null.","source":"The <code>tasks</code> argument was null."}],"pos":[347105,347147],"yaml":true},{"content":"The <code>tasks</code> array contained a null task, or was empty.","nodes":[{"pos":[0,65],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contained a null task, or was empty.","source":"The <code>tasks</code> array contained a null task, or was empty."}],"pos":[347241,347307],"yaml":true},{"content":"Creates a task that will complete when any of the supplied tasks have completed.","nodes":[{"pos":[0,80],"content":"Creates a task that will complete when any of the supplied tasks have completed.","nodes":[{"content":"Creates a task that will complete when any of the supplied tasks have completed.","pos":[0,80]}]}],"pos":[349064,349145],"yaml":true},{"content":"The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the RanToCompletion state with its Result set to the first task to complete. This is true even if the first task to complete ended in the Canceled or Faulted state.","nodes":[{"pos":[0,280],"content":"The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the RanToCompletion state with its Result set to the first task to complete. This is true even if the first task to complete ended in the Canceled or Faulted state.","nodes":[{"content":"The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the RanToCompletion state with its Result set to the first task to complete. This is true even if the first task to complete ended in the Canceled or Faulted state.","pos":[0,280],"nodes":[{"content":"The returned task will complete when any of the supplied tasks has completed.","pos":[0,77]},{"content":"The returned task will always end in the RanToCompletion state with its Result set to the first task to complete.","pos":[79,192]},{"content":"This is true even if the first task to complete ended in the Canceled or Faulted state.","pos":[193,280]}]}]}],"pos":[349156,349437],"yaml":true,"extradata":"MT"},{"content":"The tasks to wait on for completion.","nodes":[{"pos":[0,36],"content":"The tasks to wait on for completion.","nodes":[{"content":"The tasks to wait on for completion.","pos":[0,36]}]}],"pos":[349783,349820],"yaml":true},{"content":"The type of the completed task.","nodes":[{"pos":[0,31],"content":"The type of the completed task.","nodes":[{"content":"The type of the completed task.","pos":[0,31]}]}],"pos":[349877,349909],"yaml":true},{"content":"A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.","nodes":[{"pos":[0,121],"content":"A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.","nodes":[{"content":"A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.","pos":[0,121],"nodes":[{"content":"A task that represents the completion of one of the supplied tasks.","pos":[0,67]},{"content":"The return task's Result is the task that completed.","pos":[69,121]}]}]}],"pos":[350018,350140],"yaml":true},{"content":"The <code>tasks</code> argument was `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument was <ph id=\"ph2\">`null`</ph>.","source":"The <code>tasks</code> argument was `null`."}],"pos":[350308,350352],"yaml":true},{"content":"The <code>tasks</code> array contained a null task, or was empty.","nodes":[{"pos":[0,65],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tasks</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contained a null task, or was empty.","source":"The <code>tasks</code> array contained a null task, or was empty."}],"pos":[350446,350512],"yaml":true},{"content":"Creates an awaitable task that asynchronously yields back to the current context when awaited.","nodes":[{"pos":[0,94],"content":"Creates an awaitable task that asynchronously yields back to the current context when awaited.","nodes":[{"content":"Creates an awaitable task that asynchronously yields back to the current context when awaited.","pos":[0,94]}]}],"pos":[351921,352016],"yaml":true},{"content":"You can use `await Task.Yield();` in an asynchronous method to force the method to complete asynchronously. If there is a current synchronization context (<xref:System.Threading.SynchronizationContext> object), this will post the remainder of the method’s execution back to that context. However, the context will decide how to prioritize this work relative to other work that may be pending. The synchronization context that is present on a UI thread in most UI environments will often prioritize work posted to the context higher than input and rendering work. For this reason, do not rely on `await Task.Yield();` to keep a UI responsive.  For more information, see the entry [Useful Abstractions Enabled with ContinueWith](http://blogs.msdn.com/b/pfxteam/archive/2008/07/23/8768673.aspx) in the Parallel Programming with .NET blog.","nodes":[{"pos":[0,835],"content":"You can use `await Task.Yield();` in an asynchronous method to force the method to complete asynchronously. If there is a current synchronization context (<xref:System.Threading.SynchronizationContext> object), this will post the remainder of the method’s execution back to that context. However, the context will decide how to prioritize this work relative to other work that may be pending. The synchronization context that is present on a UI thread in most UI environments will often prioritize work posted to the context higher than input and rendering work. For this reason, do not rely on `await Task.Yield();` to keep a UI responsive.  For more information, see the entry [Useful Abstractions Enabled with ContinueWith](http://blogs.msdn.com/b/pfxteam/archive/2008/07/23/8768673.aspx) in the Parallel Programming with .NET blog.","nodes":[{"content":"You can use <ph id=\"ph1\">`await Task.Yield();`</ph> in an asynchronous method to force the method to complete asynchronously.","pos":[0,107],"source":"You can use `await Task.Yield();` in an asynchronous method to force the method to complete asynchronously."},{"content":"If there is a current synchronization context (<ph id=\"ph1\">&lt;xref:System.Threading.SynchronizationContext&gt;</ph> object), this will post the remainder of the method’s execution back to that context.","pos":[108,287],"source":" If there is a current synchronization context (<xref:System.Threading.SynchronizationContext> object), this will post the remainder of the method’s execution back to that context."},{"content":"However, the context will decide how to prioritize this work relative to other work that may be pending.","pos":[288,392]},{"content":"The synchronization context that is present on a UI thread in most UI environments will often prioritize work posted to the context higher than input and rendering work.","pos":[393,562]},{"content":"For this reason, do not rely on <ph id=\"ph1\">`await Task.Yield();`</ph> to keep a UI responsive.","pos":[563,641],"source":" For this reason, do not rely on `await Task.Yield();` to keep a UI responsive."},{"content":"For more information, see the entry <bpt id=\"p1\">[</bpt>Useful Abstractions Enabled with ContinueWith<ept id=\"p1\">](http://blogs.msdn.com/b/pfxteam/archive/2008/07/23/8768673.aspx)</ept> in the Parallel Programming with .NET blog.","pos":[643,835],"source":"  For more information, see the entry [Useful Abstractions Enabled with ContinueWith](http://blogs.msdn.com/b/pfxteam/archive/2008/07/23/8768673.aspx) in the Parallel Programming with .NET blog."}]}],"pos":[352027,352863],"yaml":true,"extradata":"MT"},{"content":"A context that, when awaited, will asynchronously transition back into the current context at the time of the await. If the current <xref href=\"System.Threading.SynchronizationContext\"></xref> is non-null, it is treated as the current context. Otherwise, the task scheduler that is associated with the currently executing task is treated as the current context.","nodes":[{"pos":[0,361],"content":"A context that, when awaited, will asynchronously transition back into the current context at the time of the await. If the current <xref href=\"System.Threading.SynchronizationContext\"></xref> is non-null, it is treated as the current context. Otherwise, the task scheduler that is associated with the currently executing task is treated as the current context.","nodes":[{"content":"A context that, when awaited, will asynchronously transition back into the current context at the time of the await.","pos":[0,116]},{"content":"If the current <ph id=\"ph1\">&lt;xref href=\"System.Threading.SynchronizationContext\"&gt;&lt;/xref&gt;</ph> is non-null, it is treated as the current context.","pos":[117,243],"source":" If the current <xref href=\"System.Threading.SynchronizationContext\"></xref> is non-null, it is treated as the current context."},{"content":"Otherwise, the task scheduler that is associated with the currently executing task is treated as the current context.","pos":[244,361]}]}],"pos":[353066,353428],"yaml":true},{"content":"Gets a <xref href=\"System.Threading.WaitHandle\"></xref> that can be used to wait for the task to complete.","nodes":[{"pos":[0,106],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitHandle\"&gt;&lt;/xref&gt;</ph> that can be used to wait for the task to complete.","source":"Gets a <xref href=\"System.Threading.WaitHandle\"></xref> that can be used to wait for the task to complete."}],"pos":[355070,355177],"yaml":true},{"content":"Using the wait functionality provided by <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName> is preferable to using <xref:System.IAsyncResult.AsyncWaitHandle%2A> for similar functionality. For more information, see the \"Waiting on Tasks\" section in [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Using TPL with Other Asynchronous Patterns](~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md).","nodes":[{"pos":[0,513],"content":"Using the wait functionality provided by <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName> is preferable to using <xref:System.IAsyncResult.AsyncWaitHandle%2A> for similar functionality. For more information, see the \"Waiting on Tasks\" section in [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Using TPL with Other Asynchronous Patterns](~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md).","nodes":[{"content":"Using the wait functionality provided by <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName&gt;</ph> is preferable to using <ph id=\"ph2\">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph> for similar functionality.","pos":[0,204],"source":"Using the wait functionality provided by <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName> is preferable to using <xref:System.IAsyncResult.AsyncWaitHandle%2A> for similar functionality."},{"content":"For more information, see the \"Waiting on Tasks\" section in <bpt id=\"p1\">[</bpt>Task-based Asynchronous Programming<ept id=\"p1\">](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)</ept> and <bpt id=\"p2\">[</bpt>Using TPL with Other Asynchronous Patterns<ept id=\"p2\">](~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md)</ept>.","pos":[205,513],"source":" For more information, see the \"Waiting on Tasks\" section in [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Using TPL with Other Asynchronous Patterns](~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md)."}]}],"pos":[355188,355702],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Threading.WaitHandle\"></xref> that can be used to wait for the task to complete.","nodes":[{"pos":[0,101],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitHandle\"&gt;&lt;/xref&gt;</ph> that can be used to wait for the task to complete.","source":"A <xref href=\"System.Threading.WaitHandle\"></xref> that can be used to wait for the task to complete."}],"pos":[355869,355971],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed."}],"pos":[356168,356240],"yaml":true},{"content":"Gets an indication of whether the operation completed synchronously.","nodes":[{"pos":[0,68],"content":"Gets an indication of whether the operation completed synchronously.","nodes":[{"content":"Gets an indication of whether the operation completed synchronously.","pos":[0,68]}]}],"pos":[357860,357929],"yaml":true},{"content":"`true` if the operation completed synchronously; otherwise, `false`.","nodes":[{"pos":[0,68],"content":"<ph id=\"ph1\">`true`</ph> if the operation completed synchronously; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the operation completed synchronously; otherwise, `false`."}],"pos":[358067,358138],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.Tasks.Task\n  commentId: T:System.Threading.Tasks.Task\n  id: Task\n  children:\n  - System.Threading.Tasks.Task.#ctor(System.Action)\n  - System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)\n  - System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.Task.AsyncState\n  - System.Threading.Tasks.Task.CompletedTask\n  - System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.CreationOptions\n  - System.Threading.Tasks.Task.CurrentId\n  - System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Delay(System.Int32)\n  - System.Threading.Tasks.Task.Delay(System.TimeSpan)\n  - System.Threading.Tasks.Task.Dispose\n  - System.Threading.Tasks.Task.Dispose(System.Boolean)\n  - System.Threading.Tasks.Task.Exception\n  - System.Threading.Tasks.Task.Factory\n  - System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.FromException(System.Exception)\n  - System.Threading.Tasks.Task.FromException``1(System.Exception)\n  - System.Threading.Tasks.Task.FromResult``1(``0)\n  - System.Threading.Tasks.Task.GetAwaiter\n  - System.Threading.Tasks.Task.Id\n  - System.Threading.Tasks.Task.IsCanceled\n  - System.Threading.Tasks.Task.IsCompleted\n  - System.Threading.Tasks.Task.IsCompletedSuccessfully\n  - System.Threading.Tasks.Task.IsFaulted\n  - System.Threading.Tasks.Task.Run(System.Action)\n  - System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})\n  - System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})\n  - System.Threading.Tasks.Task.Run``1(System.Func{``0})\n  - System.Threading.Tasks.Task.RunSynchronously\n  - System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.Start\n  - System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.Status\n  - System.Threading.Tasks.Task.Wait(System.TimeSpan)\n  - System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Wait(System.Int32)\n  - System.Threading.Tasks.Task.Wait\n  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])\n  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)\n  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)\n  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)\n  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)\n  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])\n  - System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  - System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])\n  - System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  - System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])\n  - System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  - System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])\n  - System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])\n  - System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  - System.Threading.Tasks.Task.Yield\n  - System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle\n  - System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously\n  langs:\n  - csharp\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n  type: Class\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Represents an asynchronous operation.\n  remarks: \"> [!NOTE]\\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/threading/Tasks/Task.cs#045a746eb48cbaa9). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \\n  \\n The <xref:System.Threading.Tasks.Task> class represents a single operation that does not return a value and that usually executes asynchronously. <xref:System.Threading.Tasks.Task> objects are one of the central components of the  [task-based asynchronous pattern](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md) first introduced in the .NET Framework 4. Because the work performed by a <xref:System.Threading.Tasks.Task> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <xref:System.Threading.Tasks.Task.Status%2A> property, as well as the <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, and <xref:System.Threading.Tasks.Task.IsFaulted%2A> properties, to determine the   state of a task. Most commonly, a lambda expression is used to specify the work that the task is to perform.  \\n  \\n For operations that return values, you use the <xref:System.Threading.Tasks.Task%601> class.  \\n  \\n In this section:  \\n  \\n [Creating and executing a task](#Creating)   \\n [Separating task creation and execution](#Separating)   \\n [Waiting for one or more tasks to complete](#WaitingForOne)   \\n [Tasks and culture](#Culture)   \\n [For debugger developers](#Debugger)  \\n  \\n<a name=\\\"Creating\\\"></a>   \\n## Creating and executing a task  \\n <xref:System.Threading.Tasks.Task> instances may be created in a variety of ways. The most common approach, which is available starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], is to call the static <xref:System.Threading.Tasks.Task.Run%2A> method. The <xref:System.Threading.Tasks.Task.Run%2A> method provides a simple way to start a task using default values and without requiring additional parameters. The following example uses the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method to start a task that loops and then displays the number of loop iterations:  \\n  \\n [!code-csharp[System.Threading.Tasks.Task#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/run1.cs#6)]\\n [!code-vb[System.Threading.Tasks.Task#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/run1.vb#6)]  \\n  \\n An alternative, and the most common method to start a task in [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], is the static <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method. The <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=fullName> property returns a <xref:System.Threading.Tasks.TaskFactory> object. Overloads of the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method let you specify parameters to pass to the task creation options and a task scheduler. The following example uses the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method to start a task. It is functionally equivalent to the code in the previous example.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/startnew1.cs#7)]\\n [!code-vb[System.Threading.Tasks.Task#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/startnew1.vb#7)]  \\n  \\n For more complete examples, see [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md).  \\n  \\n<a name=\\\"Separating\\\"></a>   \\n## Separating task creation and execution  \\n The <xref:System.Threading.Tasks.Task> class also provides constructors that initialize the task but that do not schedule it for execution. For performance reasons, the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method is the preferred mechanism for creating and scheduling computational tasks, but for scenarios where creation and scheduling must be separated, you can use the constructors and then call the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=fullName> method to schedule the task for execution at a later time.  \\n  \\n<a name=\\\"WaitingForOne\\\"></a>   \\n## Waiting for one or more tasks to complete  \\n Because tasks typically run asynchronously on a thread pool thread, the thread that creates and starts the task continues execution as soon as the task has been instantiated. In some cases, when the calling thread is the main application thread, the app may terminate before any the task actually begins execution. In others,   your application's logic may require that the calling thread continue execution only when one or more tasks has completed execution. You can synchronize the execution of the calling thread and the asynchronous tasks it launches by calling a `Wait` method to wait for one or more tasks to complete.  \\n  \\n To wait for a single task to complete, you can call its <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName> method. A call to the  <xref:System.Threading.Tasks.Task.Wait%2A> method blocks the calling thread until the single class instance has completed execution.  \\n  \\n The following example calls the parameterless <xref:System.Threading.Tasks.Task.Wait> method to wait unconditionally until a task completes. The task simulates work by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName> method to sleep for two seconds.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/Wait1.cs#8)]\\n [!code-vb[System.Threading.Tasks.Task#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/Wait1.vb#8)]  \\n  \\n You can also conditionally wait for a task to complete. The  <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> and <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> methods block the calling thread until the task finishes or a timeout interval elapses, whichever comes first. Since the following example launches a task that sleeps for two seconds but defines a one-second timeout value, the calling thread blocks until the timeout expires and before the task has completed execution.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/Wait2.cs#9)]\\n [!code-vb[System.Threading.Tasks.Task#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/Wait2.vb#9)]  \\n  \\n You can also supply a cancellation token by calling the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> and  <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> methods. If the  token's <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true`, the wait is cancelled; if it becomes true while the <xref:System.Threading.Tasks.Task.Wait%2A> method terminates.  \\n  \\n In some cases, you may want to wait for the first of a series of executing tasks to complete, but don't care which task it is.  For this purpose, you can call one of the overloads of the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=fullName> method.  The following example creates three tasks, each of which sleeps for an interval determine by a random number generator. The <xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29> method waits for the first task to complete. The example then displays information about the status of all three tasks.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WhenAny1.cs#10)]\\n [!code-vb[System.Threading.Tasks.Task#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAny1.vb#10)]  \\n  \\n You can also wait for all of a series of tasks to complete by calling the <xref:System.Threading.Tasks.Task.WaitAll%2A> method. The following example creates ten tasks, waits for all ten to complete, and then displays their status.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WaitAll1.cs#11)]\\n [!code-vb[System.Threading.Tasks.Task#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAll1.vb#11)]  \\n  \\n Note that when you wait for one or more tasks to complete, any exceptions thrown in the running tasks are propagated on the thread that calls the `Wait` method, as the following example shows. It launches 12 tasks, three of which complete normally and three of which throw an exception. Of the remaining six tasks, three are cancelled before the start, and three are cancelled while they executing. Exceptions are thrown in the <xref:System.Threading.Tasks.Task.WaitAll%2A> method call and are handled by a `try`/`catch` block.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WaitAll2.cs#12)]\\n [!code-vb[System.Threading.Tasks.Task#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAll2.vb#12)]  \\n  \\n For more information on exception handling in task-based asynchronous operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).  \\n  \\n<a name=\\\"Culture\\\"></a>   \\n## Tasks and culture  \\n Starting with desktop apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the thread that creates and invokes a task becomes part of the thread's context. That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread. For apps that target versions of the .NET Framework prior to the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the task is the culture of the thread on which the task executes. For more information, see the \\\"Culture and task-based asynchronous operations\\\" section in the <xref:System.Globalization.CultureInfo> topic.  \\n  \\n> [!NOTE]\\n>  Store apps follow the Windows Runtime in setting and getting the default culture.  \\n  \\n<a name=\\\"Debugger\\\"></a>   \\n## For debugger developers  \\n For developers implementing custom debuggers, several internal and private members of task may be useful (these may change from release to release). The `m_taskId` field serves as the backing store for the <xref:System.Threading.Tasks.Task.Id%2A> property, however accessing this field directly from a debugger may be more efficient than accessing the same value through the property's getter method (the `s_taskIdCounter` counter is used to retrieve the next available ID for a task). Similarly, the `m_stateFlags` field stores information about the current lifecycle stage of the task, information also accessible through the <xref:System.Threading.Tasks.Task.Status%2A> property. The `m_action` field stores a reference to the task's delegate, and the `m_stateObject` field stores the async state passed to the task by the developer. Finally, for debuggers that parse stack frames, the `InternalWait` method serves a potential marker for when a task is entering a wait operation.\"\n  example:\n  - \"The following example creates and executes four tasks. Three tasks execute an <xref:System.Action%601> delegate named `action`, which accepts an argument of type <xref:System.Object>. A fourth task executes a lambda expression (an <xref:System.Action> delegate) that is defined inline in the call to the task creation method. Each task is instantiated and run in a different way:  \\n  \\n-   Task `t1` is instantiated by calling a Task class constructor, but is started by calling its <xref:System.Threading.Tasks.Task.Start> method only after task `t2` has started.  \\n  \\n-   Task `t2` is instantiated and started in a single method call by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=fullName> method.  \\n  \\n-   Task `t3` is instantiated and started in a single method call by calling the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.  \\n  \\n-   Task `t4` is executed synchronously on the main thread by calling the <xref:System.Threading.Tasks.Task.RunSynchronously> method.  \\n  \\n Because task `t4` executes synchronously, it executes on the main application thread. The remaining tasks execute asynchronously typically on one or more thread pool threads.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/startnew.cs#01)]\\n [!code-vb[System.Threading.Tasks.Task#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/startnew.vb#01)]\"\n  syntax:\n    content: 'public class Task : IAsyncResult, IDisposable'\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Threading.Tasks.Task`1\n  implements:\n  - System.IAsyncResult\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Windows.Threading.TaskExtensions.DispatcherOperationWait(System.Threading.Tasks.Task)\n  - System.Windows.Threading.TaskExtensions.DispatcherOperationWait(System.Threading.Tasks.Task,System.TimeSpan)\n  - System.Windows.Threading.TaskExtensions.IsDispatcherOperationTask(System.Threading.Tasks.Task)\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.#ctor(System.Action)\n  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action)\n  id: '#ctor(System.Action)'\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Task(Action)\n  nameWithType: Task.Task(Action)\n  fullName: Task.Task(Action)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action.\n  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.\n  example:\n  - \"The following example uses the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> constructor to create tasks that retrieve the filenames in specified directories. All tasks write the file names to a single <xref:System.Collections.Concurrent.ConcurrentBag%601> object. The example then calls the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method to ensure that all tasks have completed, and then displays a count of the total number of file names written to the <xref:System.Collections.Concurrent.ConcurrentBag%601> object.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/ctor1.cs#1)]\\n [!code-vb[System.Threading.Tasks.Task.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/ctor1.vb#1)]  \\n  \\n The following example is identical, except that it used the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method to instantiate and run the task in a single operation. The method returns the <xref:System.Threading.Tasks.Task> object that represents the task.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Run#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run2.cs#1)]\\n [!code-vb[System.Threading.Tasks.Task.Run#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run2.vb#1)]\"\n  syntax:\n    content: public Task (Action action);\n    parameters:\n    - id: action\n      type: System.Action\n      description: The delegate that represents the code to execute in the task.\n  overload: System.Threading.Tasks.Task.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>action</code> argument is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)\n  id: '#ctor(System.Action,System.Threading.CancellationToken)'\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Task(Action, CancellationToken)\n  nameWithType: Task.Task(Action, CancellationToken)\n  fullName: Task.Task(Action, CancellationToken)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action and <xref href=\"System.Threading.CancellationToken\"></xref>.\n  remarks: \"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> and <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> methods. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.  \\n  \\n For more information, see [Task Parallelism (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).\"\n  example:\n  - \"The following example calls the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%2CSystem.Threading.CancellationToken%29> constructor to create a task that iterates the files in the C:\\\\Windows\\\\System32 directory. The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object. Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=fullName> method. The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=fullName> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName> method.  The <xref:System.Threading.Tasks.Task.Start%2A> method is then called to start the task.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/run4.cs#4)]\\n [!code-vb[System.Threading.Tasks.Task.ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/run4.vb#4)]\"\n  syntax:\n    content: public Task (Action action, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: action\n      type: System.Action\n      description: The delegate that represents the code to execute in the task.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> that the new  task will observe.\n  overload: System.Threading.Tasks.Task.#ctor*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>action</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)\n  id: '#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)'\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Task(Action, TaskCreationOptions)\n  nameWithType: Task.Task(Action, TaskCreationOptions)\n  fullName: Task.Task(Action, TaskCreationOptions)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action and creation options.\n  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.\n  syntax:\n    content: public Task (Action action, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: action\n      type: System.Action\n      description: The delegate that represents the code to execute in the task.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior.\n  overload: System.Threading.Tasks.Task.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>action</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)\n  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)\n  id: '#ctor(System.Action{System.Object},System.Object)'\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Task(Action<Object>, Object)\n  nameWithType: Task.Task(Action<Object>, Object)\n  fullName: Task.Task(Action<Object>, Object)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action and state.\n  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.\n  example:\n  - \"The following example defines an array of 6-letter words. Each word is then passed as an argument to the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%7BSystem.Object%7D%2CSystem.Object%29> constructor, whose <xref:System.Action%601> delegate scrambles the characters in the word, then displays the original word and its scrambled version.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/startnew3.cs#3)]\\n [!code-vb[System.Threading.Tasks.Task.ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/startnew3.vb#3)]\"\n  syntax:\n    content: public Task (Action<object> action, object state);\n    parameters:\n    - id: action\n      type: System.Action{System.Object}\n      description: The delegate that represents the code to execute in the task.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the action.\n  overload: System.Threading.Tasks.Task.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>action</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  id: '#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)'\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Task(Action, CancellationToken, TaskCreationOptions)\n  nameWithType: Task.Task(Action, CancellationToken, TaskCreationOptions)\n  fullName: Task.Task(Action, CancellationToken, TaskCreationOptions)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action and creation options.\n  remarks: \"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.  \\n  \\n For more information, see [Task Parallelism (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Task Cancellation](~/docs/standard/parallel-programming/task-cancellation.md).\"\n  syntax:\n    content: public Task (Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: action\n      type: System.Action\n      description: The delegate that represents the code to execute in the task.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that the new task will observe.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior.\n  overload: System.Threading.Tasks.Task.#ctor*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>action</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)\n  id: '#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)'\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Task(Action<Object>, Object, CancellationToken)\n  nameWithType: Task.Task(Action<Object>, Object, CancellationToken)\n  fullName: Task.Task(Action<Object>, Object, CancellationToken)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action, state, and options.\n  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.\n  syntax:\n    content: public Task (Action<object> action, object state, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: action\n      type: System.Action{System.Object}\n      description: The delegate that represents the code to execute in the task.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the action.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that that the new task will observe.\n  overload: System.Threading.Tasks.Task.#ctor*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>action</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: '#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)'\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Task(Action<Object>, Object, TaskCreationOptions)\n  nameWithType: Task.Task(Action<Object>, Object, TaskCreationOptions)\n  fullName: Task.Task(Action<Object>, Object, TaskCreationOptions)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action, state, and options.\n  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.\n  syntax:\n    content: public Task (Action<object> action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: action\n      type: System.Action{System.Object}\n      description: The delegate that represents the code to execute in the task.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the action.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior.\n  overload: System.Threading.Tasks.Task.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>action</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  id: '#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)'\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Task(Action<Object>, Object, CancellationToken, TaskCreationOptions)\n  nameWithType: Task.Task(Action<Object>, Object, CancellationToken, TaskCreationOptions)\n  fullName: Task.Task(Action<Object>, Object, CancellationToken, TaskCreationOptions)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a new <xref href=\"System.Threading.Tasks.Task\"></xref> with the specified action, state, and options.\n  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.\n  syntax:\n    content: public Task (Action<object> action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: action\n      type: System.Action{System.Object}\n      description: The delegate that represents the code to execute in the task.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the action.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that that the new task will observe..\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior.\n  overload: System.Threading.Tasks.Task.#ctor*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>action</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.AsyncState\n  commentId: P:System.Threading.Tasks.Task.AsyncState\n  id: AsyncState\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: AsyncState\n  nameWithType: Task.AsyncState\n  fullName: Task.AsyncState\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Gets the state object supplied when the <xref href=\"System.Threading.Tasks.Task\"></xref> was created, or null if none was supplied.\n  remarks: Cast the object back to the original type to retrieve its data.\n  syntax:\n    content: public object AsyncState { get; }\n    return:\n      type: System.Object\n      description: An <xref href=\"System.Object\"></xref> that represents the state data that was passed in to the task when it was created.\n  overload: System.Threading.Tasks.Task.AsyncState*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.CompletedTask\n  commentId: P:System.Threading.Tasks.Task.CompletedTask\n  id: CompletedTask\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: CompletedTask\n  nameWithType: Task.CompletedTask\n  fullName: Task.CompletedTask\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Gets a task that has already completed successfully.\n  remarks: \"This property returns a task whose <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName>. To create task that returns a value and runs to completion, call the <xref:System.Threading.Tasks.Task.FromResult%2A> method.  \\n  \\n Repeated attempts to retrieve this property value may not always return the same instance.\"\n  syntax:\n    content: public static System.Threading.Tasks.Task CompletedTask { get; }\n    return:\n      type: System.Threading.Tasks.Task\n      description: The successfully completed task.\n  overload: System.Threading.Tasks.Task.CompletedTask*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)\n  commentId: M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)\n  id: ConfigureAwait(System.Boolean)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: ConfigureAwait(Boolean)\n  nameWithType: Task.ConfigureAwait(Boolean)\n  fullName: Task.ConfigureAwait(Boolean)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Configures an awaiter used to await this <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  syntax:\n    content: public System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait (bool continueOnCapturedContext);\n    parameters:\n    - id: continueOnCapturedContext\n      type: System.Boolean\n      description: '`true` to attempt to marshal the continuation back to the original context captured; otherwise, `false`.'\n    return:\n      type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable\n      description: An object used to await this task.\n  overload: System.Threading.Tasks.Task.ConfigureAwait*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: ContinueWith(Action<Task,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task.ContinueWith(Action<Task,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: Task.ContinueWith(Action<Task,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that receives caller-supplied state information and a cancellation token and that executes when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes. The continuation executes based on a set of specified conditions and uses a specified scheduler.\n  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed. If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task,object> continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task,System.Object}\n      description: An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the continuation action.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its  execution.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.Task.ContinueWith*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>scheduler</code> argument is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task.ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: Task.ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes when the target task competes according to the specified <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>. The continuation receives a cancellation token and uses a specified scheduler.\n  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.\n  example:\n  - \"The following is an example of using ContinueWith to run work both in the background and on the user interface threads.  \\n  \\n```csharp  \\n  \\nprivate void Button1_Click(object sender, EventArgs e)  \\n{  \\n   var backgroundScheduler = TaskScheduler.Default;  \\n   var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();  \\n   Task.Factory.StartNew(delegate { DoBackgroundComputation(); },  \\n                         backgroundScheduler).  \\n   ContinueWith(delegate { UpdateUI(); }, uiScheduler).  \\n                ContinueWith(delegate { DoAnotherBackgroundComputation(); },  \\n                             backgroundScheduler).  \\n                ContinueWith(delegate { UpdateUIAgain(); }, uiScheduler);  \\n}  \\n  \\n```  \\n  \\n```vb  \\n  \\nPrivate Sub Button1_Click(ByVal sender As System.Object,   \\n                          ByVal e As System.EventArgs) Handles Button1.Click  \\n   Dim backgroundScheduler = TaskScheduler.Default  \\n   Dim uiScheduler = TaskScheduler.FromCurrentSynchronizationContext()  \\n  \\n   Task.Factory.StartNew(Sub()  \\n                           DoBackgroundComputation()  \\n                         End Sub, backgroundScheduler).ContinueWith(Sub(t)  \\n                            UpdateUI()  \\n                         End Sub, uiScheduler).ContinueWith(Sub(t)  \\n                            DoAnotherBackgroundComputation()  \\n                         End Sub, backgroundScheduler).ContinueWith(Sub(t)  \\n                            UpdateUIAgain()  \\n                         End Sub, uiScheduler)  \\nEnd Sub  \\n  \\n```\"\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task}\n      description: An action to run according to the specified <code>continuationOptions</code>. When run, the delegate will be passed the completed task as an argument.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new continuation task.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.Task.ContinueWith*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created the token has already been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>continuationAction</code> argument is null.  \\n  \\n -or-  \\n  \\n The <code>scheduler</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: ContinueWith(Action<Task,Object>, Object, TaskScheduler)\n  nameWithType: Task.ContinueWith(Action<Task,Object>, Object, TaskScheduler)\n  fullName: Task.ContinueWith(Action<Task,Object>, Object, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes. The continuation uses a specified scheduler.\n  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task,object> continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task,System.Object}\n      description: An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes.  When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the continuation action.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.Task.ContinueWith*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>scheduler</code> argument is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: ContinueWith(Action<Task,Object>, Object, TaskContinuationOptions)\n  nameWithType: Task.ContinueWith(Action<Task,Object>, Object, TaskContinuationOptions)\n  fullName: Task.ContinueWith(Action<Task,Object>, Object, TaskContinuationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that receives caller-supplied state information and executes when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes. The continuation executes based on a set of specified conditions.\n  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task,object> continuationAction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task,System.Object}\n      description: An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the continuation action.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.Task.ContinueWith*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationAction</code> argument is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: ContinueWith(Action<Task,Object>, Object, CancellationToken)\n  nameWithType: Task.ContinueWith(Action<Task,Object>, Object, CancellationToken)\n  fullName: Task.ContinueWith(Action<Task,Object>, Object, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that receives caller-supplied state information and a cancellation token and that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes.\n  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task,object> continuationAction, object state, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task,System.Object}\n      description: An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the continuation action.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.Task.ContinueWith*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationAction</code> argument is `null`.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: ContinueWith(Action<Task,Object>, Object)\n  nameWithType: Task.ContinueWith(Action<Task,Object>, Object)\n  fullName: Task.ContinueWith(Action<Task,Object>, Object)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that receives caller-supplied state information and executes when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes.\n  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to cancellation.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task,object> continuationAction, object state);\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task,System.Object}\n      description: An action to run when the task completes. When run, the delegate is passed the completed task and a caller-supplied state object as arguments.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the continuation action.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A new continuation task.\n  overload: System.Threading.Tasks.Task.ContinueWith*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationAction</code> argument is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: ContinueWith(Action<Task>, TaskContinuationOptions)\n  nameWithType: Task.ContinueWith(Action<Task>, TaskContinuationOptions)\n  fullName: Task.ContinueWith(Action<Task>, TaskContinuationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes when the target task completes according to the specified <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.\n  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.\n  example:\n  - \"The following example demonstrates using <xref:System.Threading.Tasks.TaskContinuationOptions> to specify that a continuation task should run synchronously when the antecedent task completes. (If the specified task has already completed by the time <xref:System.Threading.Tasks.Task.ContinueWith%2A> is called, the synchronous continuation will run on the thread calling <xref:System.Threading.Tasks.Task.ContinueWith%2A>.)  \\n  \\n```csharp  \\n  \\npublic class TaskCounter  \\n{  \\n   private volatile int _count;  \\n  \\n   public void Track(Task t)  \\n   {  \\n      if (t == null) throw new ArgumentNullException(\\\"t\\\");  \\n      Interlocked.Increment(ref _count);  \\n      t.ContinueWith(ct => Interlocked.Decrement(ref _count), TaskContinuationOptions.ExecuteSynchronously);  \\n   }  \\n  \\n   public int NumberOfActiveTasks { get { return _count; } }  \\n}  \\n  \\n```  \\n  \\n```vb  \\n  \\nPublic Class TaskCounter  \\n   Private _count as Integer  \\n  \\n   Public Sub Track(ByVal t as Task)  \\n      If t is Nothing Then Throw New ArgumentNullException(\\\"t\\\")  \\n      Interlocked.Increment(_count)  \\n      t.ContinueWith(Sub(ct)  \\n                        Interlocked.Decrement(_count)  \\n                     End Sub,  \\n                     TaskContinuationOptions.ExecuteSynchronously)  \\n   End Sub  \\n  \\n   Public ReadOnly Property NumberOfActiveTasks As Integer  \\n      Get  \\n         Return _count  \\n      End Get  \\n   End Property  \\nEnd Class  \\n  \\n```\"\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task}\n      description: An action to run according to the specified <code>continuationOptions</code>. When run, the delegate will be passed the completed task as an argument.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.Task.ContinueWith*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationAction</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: ContinueWith(Action<Task>, CancellationToken)\n  nameWithType: Task.ContinueWith(Action<Task>, CancellationToken)\n  fullName: Task.ContinueWith(Action<Task>, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that receives a cancellation token and executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes.\n  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task}\n      description: An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be passed the completed task as an argument.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new continuation task.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.Task.ContinueWith*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created the token has already been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationAction</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: ContinueWith(Action<Task>)\n  nameWithType: Task.ContinueWith(Action<Task>)\n  fullName: Task.ContinueWith(Action<Task>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes.\n  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.\n  example:\n  - \"The following example defines a task that populates an array with 100 random date and time values. It uses the <xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%7D%29> method to select the earliest and the latest date values once the array is fully populated.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.ContinueWith#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.continuewith/cs/continuewith1.cs#1)]\\n [!code-vb[System.Threading.Tasks.Task.ContinueWith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.continuewith/vb/continuewith1.vb#1)]  \\n  \\n Because a console application may terminate before the continuation task executes, the <xref:System.Threading.Tasks.Task.Wait> method is called to ensure that the continuation finishes executing before the example ends.  \\n  \\n For an additional example, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).\"\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task> continuationAction);\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task}\n      description: An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be passed the completed task as an argument.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.Task.ContinueWith*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationAction</code> argument is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: ContinueWith(Action<Task>, TaskScheduler)\n  nameWithType: Task.ContinueWith(Action<Task>, TaskScheduler)\n  fullName: Task.ContinueWith(Action<Task>, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes. The continuation uses a specified scheduler.\n  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task}\n      description: An action to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be passed the completed task as an argument.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.Task.ContinueWith*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>continuationAction</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>scheduler</code> argument is null.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskContinuationOptions)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskContinuationOptions)\n  fullName: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskContinuationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes based on the specified task continuation options when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes. The continuation receives caller-supplied state information.\n  remarks: The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,object,TResult> continuationFunction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,System.Object,TResult}\n      description: A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the continuation function.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.\n    typeParameters:\n    - id: TResult\n      description: The type of the result produced by the continuation.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.Task.ContinueWith``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationFunction</code> argument is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes based on the specified task continuation options when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes and returns a value. The continuation receives caller-supplied state information and a cancellation token and uses the specified scheduler.\n  remarks: The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed. If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,object,TResult> continuationFunction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,System.Object,TResult}\n      description: A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the continuation function.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its  execution.\n    typeParameters:\n    - id: TResult\n      description: The type of the result produced by the continuation.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.Task.ContinueWith``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>scheduler</code> argument is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: ContinueWith<TResult>(Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: Task.ContinueWith<TResult>(Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes according to the specified continuation options and returns a value. The continuation is passed a cancellation token and uses a specified scheduler.\n  remarks: The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed. If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.\n  example:\n  - \"The following example shows how to use the ContinueWith method with continuation options:  \\n  \\n [!code-csharp[System.Threading.Tasks.Task#04](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuationoptions.cs#04)]\\n [!code-vb[System.Threading.Tasks.Task#04](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuationoptions.vb#04)]\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,TResult}\n      description: A function to run according to the specified <code>continuationOptions.</code> When run, the delegate will be passed the completed task as an argument.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new continuation task.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.\n    typeParameters:\n    - id: TResult\n      description: The type of the result produced by the continuation.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.Task.ContinueWith``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"The <xref href=\\\"System.Threading.Tasks.Task\\\"></xref> has been disposed.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.CancellationTokenSource\\\"></xref> that created the token has already been disposed.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>continuationFunction</code> argument is null.  \\n  \\n -or-  \\n  \\n The <code>scheduler</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskScheduler)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskScheduler)\n  fullName: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes. The continuation receives caller-supplied state information and uses a specified scheduler.\n  remarks: The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,object,TResult> continuationFunction, object state, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,System.Object,TResult}\n      description: A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes.  When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the continuation function.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.\n    typeParameters:\n    - id: TResult\n      description: The type of the result produced by the continuation.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.Task.ContinueWith``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>scheduler</code> argument is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken)\n  fullName: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes and returns a value. The continuation receives caller-supplied state information and a cancellation token.\n  remarks: The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,object,TResult> continuationFunction, object state, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,System.Object,TResult}\n      description: A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the continuation function.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.\n    typeParameters:\n    - id: TResult\n      description: The type of the result produced by the continuation.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.Task.ContinueWith``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationFunction</code> argument is `null`.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: ContinueWith<TResult>(Func<Task,Object,TResult>, Object)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object)\n  fullName: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes and returns a value.\n  remarks: The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,object,TResult> continuationFunction, object state);\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,System.Object,TResult}\n      description: A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the continuation function.\n    typeParameters:\n    - id: TResult\n      description: The type of the result produced by the continuation.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.Task.ContinueWith``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationFunction</code> argument is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: ContinueWith<TResult>(Func<Task,TResult>, TaskContinuationOptions)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,TResult>, TaskContinuationOptions)\n  fullName: Task.ContinueWith<TResult>(Func<Task,TResult>, TaskContinuationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes according to the specified continuation options and returns a value.\n  remarks: The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,TResult}\n      description: A function to run according to the condition specified in <code>continuationOptions</code>. When run, the delegate will be passed the completed task as an argument.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.\n    typeParameters:\n    - id: TResult\n      description: The type of the result produced by the continuation.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.Task.ContinueWith``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationFunction</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: ContinueWith<TResult>(Func<Task,TResult>, CancellationToken)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,TResult>, CancellationToken)\n  fullName: Task.ContinueWith<TResult>(Func<Task,TResult>, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes and returns a value. The continuation receives a cancellation token.\n  remarks: The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,TResult}\n      description: A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be passed the completed task as an argument.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> that will be assigned to the new continuation task.\n    typeParameters:\n    - id: TResult\n      description: The type of the result produced by the continuation.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.Task.ContinueWith``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"The <xref href=\\\"System.Threading.Tasks.Task\\\"></xref> has been disposed.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.CancellationTokenSource\\\"></xref> that created the token has already been disposed.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationFunction</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: ContinueWith<TResult>(Func<Task,TResult>)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,TResult>)\n  fullName: Task.ContinueWith<TResult>(Func<Task,TResult>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes and returns a value.\n  remarks: The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.\n  example:\n  - \"The following example shows how to use the ContinueWith method:  \\n  \\n [!code-csharp[System.Threading.Tasks.Task#03](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuationsimple.cs#03)]\\n [!code-vb[System.Threading.Tasks.Task#03](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuationsimple.vb#03)]\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,TResult> continuationFunction);\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,TResult}\n      description: A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task as an argument.\n    typeParameters:\n    - id: TResult\n      description: The type of the result produced by the continuation.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: A new continuation task.\n  overload: System.Threading.Tasks.Task.ContinueWith``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationFunction</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: ContinueWith<TResult>(Func<Task,TResult>, TaskScheduler)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,TResult>, TaskScheduler)\n  fullName: Task.ContinueWith<TResult>(Func<Task,TResult>, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\"></xref> completes and returns a value. The continuation uses a specified scheduler.\n  remarks: The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.\n  syntax:\n    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,TResult}\n      description: A function to run when the <xref href=\"System.Threading.Tasks.Task\"></xref> completes. When run, the delegate will be passed the completed task as an argument.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.\n    typeParameters:\n    - id: TResult\n      description: The type of the result produced by the continuation.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.Task.ContinueWith``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>continuationFunction</code> argument is null.  \\n  \\n -or-  \\n  \\n The <code>scheduler</code> argument is null.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.CreationOptions\n  commentId: P:System.Threading.Tasks.Task.CreationOptions\n  id: CreationOptions\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: CreationOptions\n  nameWithType: Task.CreationOptions\n  fullName: Task.CreationOptions\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Gets the <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to create this task.\n  syntax:\n    content: public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }\n    return:\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to create this task.\n  overload: System.Threading.Tasks.Task.CreationOptions*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.CurrentId\n  commentId: P:System.Threading.Tasks.Task.CurrentId\n  id: CurrentId\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: CurrentId\n  nameWithType: Task.CurrentId\n  fullName: Task.CurrentId\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Returns the ID of the currently executing <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  remarks: \"<xref:System.Threading.Tasks.Task.CurrentId%2A> is a `static` (`Shared` in Visual Basic) property that is used to get the identifier of the currently executing task from the code that the task is executing. It differs from the <xref:System.Threading.Tasks.Task.Id%2A> property, which returns the identifier of a particular <xref:System.Threading.Tasks.Task> instance. If you attempt to retrieve the <xref:System.Threading.Tasks.Task.CurrentId%2A> value from outside the code that a task is executing, the property returns `null`.  \\n  \\n Note that although collisions are very rare, task identifiers are not guaranteed to be unique.\"\n  syntax:\n    content: public static Nullable<int> CurrentId { get; }\n    return:\n      type: System.Nullable{System.Int32}\n      description: An integer that was assigned by the system to the currently-executing task.\n  overload: System.Threading.Tasks.Task.CurrentId*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)\n  id: Delay(System.TimeSpan,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Delay(TimeSpan, CancellationToken)\n  nameWithType: Task.Delay(TimeSpan, CancellationToken)\n  fullName: Task.Delay(TimeSpan, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a cancellable task that completes after a specified time interval.\n  remarks: \"If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state once the specified time delay has elapsed.  \\n  \\n For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.  \\n  \\n This method depends on the system clock. This means that the time delay will approximately equal the resolution of the system clock if the `delay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.\"\n  example:\n  - \"The following example launches a task that includes a call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method with a one-and-a-half second delay. Before the delay interval elapses, the token is cancelled. The output from the example shows that, as a result, a <xref:System.Threading.Tasks.TaskCanceledException> is thrown, and the tasks' <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName>.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Delay#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay4.cs#4)]\\n [!code-vb[System.Threading.Tasks.Task.Delay#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay4.vb#4)]  \\n  \\n Note that this example includes a potential race condition: it depends on the task asynchronously executing the delay when the token is cancelled. Although the 1.5 second delay from the call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method makes that assumption likely, it is nevertheless possible that the call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method could return before the token is cancelled. In that case, the example produces the following output:  \\n  \\n```  \\nTask t Status: RanToCompletion, Result: 42  \\n```\"\n  syntax:\n    content: public static System.Threading.Tasks.Task Delay (TimeSpan delay, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: delay\n      type: System.TimeSpan\n      description: The time span to wait before completing the returned task, or `TimeSpan.FromMilliseconds(-1)` to wait indefinitely.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token that will be checked prior to completing the returned task.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the time delay.\n  overload: System.Threading.Tasks.Task.Delay*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>delay</code> represents a negative time interval other than `TimeSpan.FromMillseconds(-1)`.  \\n  \\n -or-  \\n  \\n The <code>delay</code> argument's <xref href=\\\"System.TimeSpan.TotalMilliseconds\\\"></xref> property is greater than <xref href=\\\"System.Int32.MaxValue\\\"></xref>.\"\n  - type: System.Threading.Tasks.TaskCanceledException\n    commentId: T:System.Threading.Tasks.TaskCanceledException\n    description: The task has been canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The provided <code>cancellationToken</code> has already been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)\n  id: Delay(System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Delay(Int32, CancellationToken)\n  nameWithType: Task.Delay(Int32, CancellationToken)\n  fullName: Task.Delay(Int32, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a cancellable task that completes after a time delay.\n  remarks: \"If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state once the specified time delay has elapsed.  \\n  \\n For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.  \\n  \\n This method depends on the system clock. This means that the time delay will approximately equal the resolution of the system clock if the `millisecondsDelay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.\"\n  example:\n  - \"The following example launches a task that includes a call to the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%2CSystem.Threading.CancellationToken%29> method with a one second delay. Before the delay interval elapses, the token is cancelled. The output from the example shows that, as a result, a <xref:System.Threading.Tasks.TaskCanceledException> is thrown, and the tasks' <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName>.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Delay#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay3.cs#3)]\\n [!code-vb[System.Threading.Tasks.Task.Delay#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay3.vb#3)]\"\n  syntax:\n    content: public static System.Threading.Tasks.Task Delay (int millisecondsDelay, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: millisecondsDelay\n      type: System.Int32\n      description: The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token that will be checked prior to completing the returned task.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the time delay.\n  overload: System.Threading.Tasks.Task.Delay*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>millisecondsDelay</code> argument is less than -1.\n  - type: System.Threading.Tasks.TaskCanceledException\n    commentId: T:System.Threading.Tasks.TaskCanceledException\n    description: The task has been canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The provided <code>cancellationToken</code> has already been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Delay(System.Int32)\n  commentId: M:System.Threading.Tasks.Task.Delay(System.Int32)\n  id: Delay(System.Int32)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Delay(Int32)\n  nameWithType: Task.Delay(Int32)\n  fullName: Task.Delay(Int32)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a task that completes after a time delay.\n  remarks: \"The <xref:System.Threading.Tasks.Task.Delay%2A> method is typically used to delay the operation of all or part of a task for a specified time interval. Most commonly, the time delay is introduced:  \\n  \\n-   At the beginning of the task, as the following example shows.  \\n  \\n     [!code-csharp[System.Threading.Tasks.Task.Delay#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay5.cs#5)]\\n     [!code-vb[System.Threading.Tasks.Task.Delay#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay5.vb#5)]  \\n  \\n-   Sometime while the task is executing. In this case, the call to the <xref:System.Threading.Tasks.Task.Delay%2A> method executes as a child task within a task, as the following example shows. Note that since the task that calls the <xref:System.Threading.Tasks.Task.Delay%2A> method executes asynchronously, the parent task must wait for it to complete by using the `await` keyword.  \\n  \\n     [!code-csharp[System.Threading.Tasks.Task.Delay#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay5.cs#7)]\\n     [!code-vb[System.Threading.Tasks.Task.Delay#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay5.vb#7)]  \\n  \\n After the specified time delay, the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \\n  \\n This method depends on the system clock. This means that the time delay will approximately equal the resolution of the system clock if the `millisecondsDelay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.\"\n  example:\n  - \"The following example shows a simple use of the <xref:System.Threading.Tasks.Task.Delay%2A> method.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Delay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay1.cs#1)]\\n [!code-vb[System.Threading.Tasks.Task.Delay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay1.vb#1)]\"\n  syntax:\n    content: public static System.Threading.Tasks.Task Delay (int millisecondsDelay);\n    parameters:\n    - id: millisecondsDelay\n      type: System.Int32\n      description: The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the time delay.\n  overload: System.Threading.Tasks.Task.Delay*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>millisecondsDelay</code> argument is less than -1.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan)\n  commentId: M:System.Threading.Tasks.Task.Delay(System.TimeSpan)\n  id: Delay(System.TimeSpan)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Delay(TimeSpan)\n  nameWithType: Task.Delay(TimeSpan)\n  fullName: Task.Delay(TimeSpan)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a task that completes after a specified time interval.\n  remarks: \"After the specified time delay, the task is completed in <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \\n  \\n For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.  \\n  \\n This method depends on the system clock. This means that the time delay will approximately equal the resolution of the system clock if the `delay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.\"\n  example:\n  - \"The following example shows a simple use of the <xref:System.Threading.Tasks.Task.Delay%2A> method.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Delay#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay2.cs#2)]\\n [!code-vb[System.Threading.Tasks.Task.Delay#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay2.vb#2)]\"\n  syntax:\n    content: public static System.Threading.Tasks.Task Delay (TimeSpan delay);\n    parameters:\n    - id: delay\n      type: System.TimeSpan\n      description: The time span to wait before completing the returned task, or `TimeSpan.FromMilliseconds(-1)` to wait indefinitely.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the time delay.\n  overload: System.Threading.Tasks.Task.Delay*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>delay</code> represents a negative time interval other than `TimeSpan.FromMillseconds(-1)`.  \\n  \\n -or-  \\n  \\n The <code>delay</code> argument's <xref href=\\\"System.TimeSpan.TotalMilliseconds\\\"></xref> property is greater than <xref href=\\\"System.Int32.MaxValue\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Dispose\n  commentId: M:System.Threading.Tasks.Task.Dispose\n  id: Dispose\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: Task.Dispose()\n  fullName: Task.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Releases all resources used by the current instance of the <xref href=\"System.Threading.Tasks.Task\"></xref> class.\n  remarks: The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>. However, particularly if your app targets the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks. For more information, see [Do I need to dispose of Tasks?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) in the Parallel Programming with .NET blog.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Threading.Tasks.Task.Dispose*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: 'The task is not in one of the final states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\"></xref>.'\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Dispose(System.Boolean)\n  commentId: M:System.Threading.Tasks.Task.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: Task.Dispose(Boolean)\n  fullName: Task.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Disposes the <xref href=\"System.Threading.Tasks.Task\"></xref>, releasing all of its unmanaged resources.\n  remarks: The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>. However, particularly if your app targets the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks. For more information, see [Do I need to dispose of Tasks?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) in the Parallel Programming with .NET blog.\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: A Boolean value that indicates whether this method is being called due to a call to <xref href=\"System.Threading.Tasks.Task.Dispose\"></xref>.\n  overload: System.Threading.Tasks.Task.Dispose*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: 'The task is not in one of the final states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\"></xref>.'\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Exception\n  commentId: P:System.Threading.Tasks.Task.Exception\n  id: Exception\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Exception\n  nameWithType: Task.Exception\n  fullName: Task.Exception\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Gets the <xref href=\"System.AggregateException\"></xref> that caused the <xref href=\"System.Threading.Tasks.Task\"></xref> to end prematurely. If the <xref href=\"System.Threading.Tasks.Task\"></xref> completed successfully or has not yet thrown any exceptions, this will return `null`.\n  remarks: Tasks that throw unhandled exceptions store the resulting exception and propagate it wrapped in a <xref:System.AggregateException> in calls to <xref:System.Threading.Tasks.Task.Wait%2A> or in accesses to the <xref:System.Threading.Tasks.Task.Exception%2A> property. Any exceptions not observed by the time the task instance is garbage collected will be propagated on the finalizer thread. For more information and an example, see [Exception Handling (Task Parallel Library)](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).\n  syntax:\n    content: public AggregateException Exception { get; }\n    return:\n      type: System.AggregateException\n      description: The <xref href=\"System.AggregateException\"></xref> that caused the <xref href=\"System.Threading.Tasks.Task\"></xref> to end prematurely.\n  overload: System.Threading.Tasks.Task.Exception*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Factory\n  commentId: P:System.Threading.Tasks.Task.Factory\n  id: Factory\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Factory\n  nameWithType: Task.Factory\n  fullName: Task.Factory\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Provides access to factory methods for creating and configuring <xref href=\"System.Threading.Tasks.Task\"></xref> and <xref href=\"System.Threading.Tasks.Task`1\"></xref> instances.\n  remarks: \"This property returns a default instance of the <xref:System.Threading.Tasks.TaskFactory> class that is identical to the one created by calling the parameterless <xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=fullName> constructor. It has the following property values:  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A?displayProperty=fullName>|<xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName>|  \\n|<xref:System.Threading.Tasks.TaskFactory.ContinuationOptions%2A?displayProperty=fullName>|<xref:System.Threading.Tasks.TaskContinuationOptions?displayProperty=fullName>|  \\n|<xref:System.Threading.Tasks.TaskFactory.CreationOptions%2A?displayProperty=fullName>|<xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>|  \\n|<xref:System.Threading.Tasks.TaskFactory.Scheduler%2A?displayProperty=fullName>|`null`, or <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=fullName>|  \\n  \\n The most common use of this property is to create and start a new task in a single call to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a <xref:System.Threading.Tasks.Task> object with default configuration values.  \\n  \\n The following example uses the static <xref:System.Threading.Tasks.Task.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method. The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory. It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=fullName> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory1.cs#1)]\\n [!code-vb[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory1.vb#1)]\"\n  syntax:\n    content: public static System.Threading.Tasks.TaskFactory Factory { get; }\n    return:\n      type: System.Threading.Tasks.TaskFactory\n      description: A factory object that can create a variety of <xref href=\"System.Threading.Tasks.Task\"></xref> and <xref href=\"System.Threading.Tasks.Task`1\"></xref> objects.\n  overload: System.Threading.Tasks.Task.Factory*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)\n  id: FromCanceled(System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: FromCanceled(CancellationToken)\n  nameWithType: Task.FromCanceled(CancellationToken)\n  fullName: Task.FromCanceled(CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that's completed due to cancellation with a specified cancellation token.\n  syntax:\n    content: public static System.Threading.Tasks.Task FromCanceled (System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token with which to complete the task.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The canceled task.\n  overload: System.Threading.Tasks.Task.FromCanceled*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Cancellation has not been requested for <code>cancellationToken</code>; its <xref href=\"System.Threading.CancellationToken.IsCancellationRequested\"></xref> property is `false`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)\n  id: FromCanceled``1(System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: FromCanceled<TResult>(CancellationToken)\n  nameWithType: Task.FromCanceled<TResult>(CancellationToken)\n  fullName: Task.FromCanceled<TResult>(CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that's completed due to cancellation with a specified cancellation token.\n  syntax:\n    content: public static System.Threading.Tasks.Task<TResult> FromCanceled<TResult> (System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token with which to complete the task.\n    typeParameters:\n    - id: TResult\n      description: The type of the result returned by the task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The canceled task.\n  overload: System.Threading.Tasks.Task.FromCanceled``1*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Cancellation has not been requested for <code>cancellationToken</code>; its <xref href=\"System.Threading.CancellationToken.IsCancellationRequested\"></xref> property is `false`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.FromException(System.Exception)\n  commentId: M:System.Threading.Tasks.Task.FromException(System.Exception)\n  id: FromException(System.Exception)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: FromException(Exception)\n  nameWithType: Task.FromException(Exception)\n  fullName: Task.FromException(Exception)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task\"></xref> that has completed with a specified exception.\n  remarks: This method creates a <xref:System.Threading.Tasks.Task> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains `exception`. The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path. For an example, see the <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> overload.\n  syntax:\n    content: public static System.Threading.Tasks.Task FromException (Exception exception);\n    parameters:\n    - id: exception\n      type: System.Exception\n      description: The exception with which to complete the task.\n    return:\n      type: System.Threading.Tasks.Task\n      description: The faulted task.\n  overload: System.Threading.Tasks.Task.FromException*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.FromException``1(System.Exception)\n  commentId: M:System.Threading.Tasks.Task.FromException``1(System.Exception)\n  id: FromException``1(System.Exception)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: FromException<TResult>(Exception)\n  nameWithType: Task.FromException<TResult>(Exception)\n  fullName: Task.FromException<TResult>(Exception)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that's completed with a specified exception.\n  remarks: This method creates a <xref:System.Threading.Tasks.Task%601> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains `exception`. The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path. The example provides an illustration.\n  example:\n  - \"The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument. Rather than executing a longer code path that instantiates a <xref:System.IO.FileInfo> object and retrieves the value of its <xref:System.IO.FileInfo.Length%2A?displayProperty=fullName> property for each file in the directory, the example simply calls the <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> method to create a faulted task if a particular subdirectory does not exist.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/cs/fromresult1.cs#1)]\\n [!code-vb[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/vb/fromresult1.vb#1)]\"\n  syntax:\n    content: public static System.Threading.Tasks.Task<TResult> FromException<TResult> (Exception exception);\n    parameters:\n    - id: exception\n      type: System.Exception\n      description: The exception with which to complete the task.\n    typeParameters:\n    - id: TResult\n      description: The type of the result returned by the task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The faulted task.\n  overload: System.Threading.Tasks.Task.FromException``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.FromResult``1(``0)\n  commentId: M:System.Threading.Tasks.Task.FromResult``1(``0)\n  id: FromResult``1(``0)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: FromResult<TResult>(TResult)\n  nameWithType: Task.FromResult<TResult>(TResult)\n  fullName: Task.FromResult<TResult>(TResult)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that's completed successfully with the specified result.\n  remarks: \"This method creates a <xref:System.Threading.Tasks.Task%601> object whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=fullName> property is `result` and whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName>. The method is commonly used when the return value of a task is immediately known without executing a longer code path. The example provides an illustration.  \\n  \\n To create a Task object that does not return a value, retrieve the Task object from the <xref:System.Threading.Tasks.Task.CompletedTask%2A> property.\"\n  example:\n  - \"The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument. Rather than executing a longer code path that instantiates a <xref:System.IO.FileStream> object and retrieves the value of its <xref:System.IO.FileStream.Length%2A?displayProperty=fullName> property for each file in the directory, the example simply calls the <xref:System.Threading.Tasks.Task.FromResult%2A> method to create a task whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=fullName> property is zero (0) if a directory has no files.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/cs/fromresult1.cs#1)]\\n [!code-vb[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/vb/fromresult1.vb#1)]\"\n  syntax:\n    content: public static System.Threading.Tasks.Task<TResult> FromResult<TResult> (TResult result);\n    parameters:\n    - id: result\n      type: TResult\n      description: The result to store into the completed task.\n    typeParameters:\n    - id: TResult\n      description: The type of the result returned by the task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: The successfully completed task.\n  overload: System.Threading.Tasks.Task.FromResult``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.GetAwaiter\n  commentId: M:System.Threading.Tasks.Task.GetAwaiter\n  id: GetAwaiter\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: GetAwaiter()\n  nameWithType: Task.GetAwaiter()\n  fullName: Task.GetAwaiter()\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Gets an awaiter used to await this <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  remarks: This method is intended for compiler use rather than for use in application code.\n  syntax:\n    content: public System.Runtime.CompilerServices.TaskAwaiter GetAwaiter ();\n    parameters: []\n    return:\n      type: System.Runtime.CompilerServices.TaskAwaiter\n      description: An awaiter instance.\n  overload: System.Threading.Tasks.Task.GetAwaiter*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Id\n  commentId: P:System.Threading.Tasks.Task.Id\n  id: Id\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Id\n  nameWithType: Task.Id\n  fullName: Task.Id\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Gets an ID for this <xref href=\"System.Threading.Tasks.Task\"></xref> instance.\n  remarks: \"Task IDs are assigned on-demand and do not necessarily represent the order in which task instances are created. Note that although collisions are very rare, task identifiers are not guaranteed to be unique.  \\n  \\n To get the task ID of the currently executing task from within code that that task is executing, use the <xref:System.Threading.Tasks.Task.CurrentId%2A> property.\"\n  syntax:\n    content: public int Id { get; }\n    return:\n      type: System.Int32\n      description: The identifier that is assigned by the system to this <xref href=\"System.Threading.Tasks.Task\"></xref> instance.\n  overload: System.Threading.Tasks.Task.Id*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.IsCanceled\n  commentId: P:System.Threading.Tasks.Task.IsCanceled\n  id: IsCanceled\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: IsCanceled\n  nameWithType: Task.IsCanceled\n  fullName: Task.IsCanceled\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Gets whether this <xref href=\"System.Threading.Tasks.Task\"></xref> instance has completed execution due to being canceled.\n  remarks: \"A <xref:System.Threading.Tasks.Task> will complete in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state under any of the following conditions:  \\n  \\n-   Its <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> was marked for cancellation before the task started executing,  \\n  \\n-   The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by throwing an <xref:System.OperationCanceledException> that bears the same <xref:System.Threading.CancellationToken>.  \\n  \\n-   The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by calling the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A> method on the <xref:System.Threading.CancellationToken>.  \\n  \\n> [!IMPORTANT]\\n>  Retrieving the value of the <xref:System.Threading.Tasks.Task.IsCanceled%2A> property does not block the calling thread until the task has completed.\"\n  syntax:\n    content: public bool IsCanceled { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the task has completed due to being canceled; otherwise `false`.'\n  overload: System.Threading.Tasks.Task.IsCanceled*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.IsCompleted\n  commentId: P:System.Threading.Tasks.Task.IsCompleted\n  id: IsCompleted\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: IsCompleted\n  nameWithType: Task.IsCompleted\n  fullName: Task.IsCompleted\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Gets whether this <xref href=\"System.Threading.Tasks.Task\"></xref> has completed.\n  remarks: \"<xref:System.Threading.Tasks.Task.IsCompleted%2A> will return `true` when the task is in one of the three final states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled>.  \\n  \\n> [!IMPORTANT]\\n>  Retrieving the value of the <xref:System.Threading.Tasks.Task.IsCompleted%2A?displayProperty=fullName> property does not block the calling thread until the task has completed.\"\n  syntax:\n    content: public bool IsCompleted { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the task has completed; otherwise `false`.'\n  overload: System.Threading.Tasks.Task.IsCompleted*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.IsCompletedSuccessfully\n  commentId: P:System.Threading.Tasks.Task.IsCompletedSuccessfully\n  id: IsCompletedSuccessfully\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: IsCompletedSuccessfully\n  nameWithType: Task.IsCompletedSuccessfully\n  fullName: Task.IsCompletedSuccessfully\n  type: Property\n  assemblies:\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  syntax:\n    content: public bool IsCompletedSuccessfully { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Threading.Tasks.Task.IsCompletedSuccessfully*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.IsFaulted\n  commentId: P:System.Threading.Tasks.Task.IsFaulted\n  id: IsFaulted\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: IsFaulted\n  nameWithType: Task.IsFaulted\n  fullName: Task.IsFaulted\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Gets whether the <xref href=\"System.Threading.Tasks.Task\"></xref> completed due to an unhandled exception.\n  remarks: \"If <xref:System.Threading.Tasks.Task.IsFaulted%2A> is `true`, the task's <xref:System.Threading.Tasks.Task.Status%2A> is equal to <xref:System.Threading.Tasks.TaskStatus.Faulted>, and its <xref:System.Threading.Tasks.Task.Exception%2A> property will be non-null.  \\n  \\n> [!IMPORTANT]\\n>  Retrieving the value of the <xref:System.Threading.Tasks.Task.IsFaulted%2A?displayProperty=fullName> property does not block the calling thread until the task has completed.\"\n  syntax:\n    content: public bool IsFaulted { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the task has thrown an unhandled exception; otherwise `false`.'\n  overload: System.Threading.Tasks.Task.IsFaulted*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Run(System.Action)\n  commentId: M:System.Threading.Tasks.Task.Run(System.Action)\n  id: Run(System.Action)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Run(Action)\n  nameWithType: Task.Run(Action)\n  fullName: Task.Run(Action)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Queues the specified work to run on the thread pool and returns a <xref href=\"System.Threading.Tasks.Task\"></xref> object that represents that work.\n  remarks: \"The <xref:System.Threading.Tasks.Task.Run%2A> method allows you to create and execute a task in a single method call and is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method. It creates a task with the following default values:  \\n  \\n-   Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName>.  \\n  \\n-   Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>.  \\n  \\n-   It uses the default task scheduler.  \\n  \\n For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).\"\n  example:\n  - \"The following example defines a `ShowThreadInfo` method  that displays the <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=fullName>of the current thread. It is called directly from the application thread, and is called from the <xref:System.Action> delegate passed to the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Run#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run11.cs#11)]\\n [!code-vb[System.Threading.Tasks.Task.Run#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run11.vb#11)]  \\n  \\n The following example is similar to the previous one, except that it uses a lambda expression to define the code that the task is to execute.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Run#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run6.cs#3)]\\n [!code-vb[System.Threading.Tasks.Task.Run#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run6.vb#3)]  \\n  \\n The examples show that the asynchronous task executes on a different thread than the main application thread.  \\n  \\n The call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that the task completes and displays its output before the application ends. Otherwise, it is possible that the `Main` method will complete before the task finishes.  \\n  \\n The following example illustrates the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method. It defines an array of directory names and starts a separate task to retrieve the file names in each directory. All tasks write the file names to a single <xref:System.Collections.Concurrent.ConcurrentBag%601> object. The example then calls the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method to ensure that all tasks have completed, and then displays a count of the total number of file names written to the <xref:System.Collections.Concurrent.ConcurrentBag%601> object.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Run#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run2.cs#1)]\\n [!code-vb[System.Threading.Tasks.Task.Run#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run2.vb#1)]\"\n  syntax:\n    content: public static System.Threading.Tasks.Task Run (Action action);\n    parameters:\n    - id: action\n      type: System.Action\n      description: The work to execute asynchronously\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the work queued to execute in the ThreadPool.\n  overload: System.Threading.Tasks.Task.Run*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>action</code> parameter was `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})\n  commentId: M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})\n  id: Run(System.Func{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Run(Func<Task>)\n  nameWithType: Task.Run(Func<Task>)\n  fullName: Task.Run(Func<Task>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Queues the specified work to run on the thread pool and returns a proxy for the  task returned by <code>function</code>.\n  remarks: For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).\n  syntax:\n    content: public static System.Threading.Tasks.Task Run (Func<System.Threading.Tasks.Task> function);\n    parameters:\n    - id: function\n      type: System.Func{System.Threading.Tasks.Task}\n      description: The work to execute asynchronously\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents a proxy for the task returned by <code>function</code>.\n  overload: System.Threading.Tasks.Task.Run*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>function</code> parameter was `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)\n  id: Run(System.Action,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Run(Action, CancellationToken)\n  nameWithType: Task.Run(Action, CancellationToken)\n  fullName: Task.Run(Action, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Queues the specified work to run on the thread pool and returns a <xref href=\"System.Threading.Tasks.Task\"></xref> object that represents that work. A cancellation token allows the work to be cancelled.\n  remarks: \"If cancellation is requested before the task begins execution, the task does not execute. Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.  \\n  \\n The <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method. It creates a task with the following default values:  \\n  \\n-   Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>.  \\n  \\n-   It uses the default task scheduler.  \\n  \\n For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).\"\n  example:\n  - \"The following example calls the <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> method to create a task that iterates the files in the C:\\\\Windows\\\\System32 directory. The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object. Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=fullName> method. The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=fullName> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName> method.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Run#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run4.cs#4)]\\n [!code-vb[System.Threading.Tasks.Task.Run#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run4.vb#4)]\"\n  syntax:\n    content: public static System.Threading.Tasks.Task Run (Action action, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: action\n      type: System.Action\n      description: The work to execute asynchronously\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token that can be used to cancel the work\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the work queued to execute in the thread pool.\n  overload: System.Threading.Tasks.Task.Run*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>action</code> parameter was `null`.\n  - type: System.Threading.Tasks.TaskCanceledException\n    commentId: T:System.Threading.Tasks.TaskCanceledException\n    description: The task has been canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with <code>cancellationToken</code> was disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  id: Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Run(Func<Task>, CancellationToken)\n  nameWithType: Task.Run(Func<Task>, CancellationToken)\n  fullName: Task.Run(Func<Task>, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Queues the specified work to run on the thread pool and returns a proxy for the task returned by <code>function</code>.\n  remarks: For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).\n  syntax:\n    content: public static System.Threading.Tasks.Task Run (Func<System.Threading.Tasks.Task> function, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: function\n      type: System.Func{System.Threading.Tasks.Task}\n      description: The work to execute asynchronously.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token that should be used to cancel the work.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents a proxy for the task returned by <code>function</code>.\n  overload: System.Threading.Tasks.Task.Run*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>function</code> parameter was `null`.\n  - type: System.Threading.Tasks.TaskCanceledException\n    commentId: T:System.Threading.Tasks.TaskCanceledException\n    description: The task has been canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with <code>cancellationToken</code> was disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)\n  id: Run``1(System.Func{``0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Run<TResult>(Func<TResult>, CancellationToken)\n  nameWithType: Task.Run<TResult>(Func<TResult>, CancellationToken)\n  fullName: Task.Run<TResult>(Func<TResult>, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Queues the specified work to run on the thread pool and returns a `Task(TResult)` object that represents that work. A cancellation token allows the work to be cancelled.\n  remarks: \"If cancellation is requested before the task begins execution, the task does not execute. Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.  \\n  \\n The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method. It creates a task with the following default values:  \\n  \\n-   Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>.  \\n  \\n-   It uses the default task scheduler.  \\n  \\n For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).\"\n  example:\n  - \"The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million. When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled. The example shows possible output.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Run#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run7.cs#7)]\\n [!code-vb[System.Threading.Tasks.Task.Run#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run7.vb#7)]  \\n  \\n Instead of using the <xref:System.AggregateException.InnerExceptions%2A> property to   examine exceptions, the example iterates all tasks to determine which have completed successfully and which have been cancelled. For those that have completed, it displays the value returned by the task.  \\n  \\n Because cancellation is cooperative, each task can decide how to respond to cancellation. The following example is like the first, except that, once the token is cancelled, tasks return the number of iterations they've completed rather than throw an exception.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Run#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run28.cs#28)]\\n [!code-vb[System.Threading.Tasks.Task.Run#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run28.vb#28)]  \\n  \\n The example still must handle the <xref:System.AggregateException> exception,   since any tasks that have not started when cancellation is requested still throw an exception.\"\n  syntax:\n    content: public static System.Threading.Tasks.Task<TResult> Run<TResult> (Func<TResult> function, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: function\n      type: System.Func`1\n      description: The work to execute asynchronously\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token that should be used to cancel the work\n    typeParameters:\n    - id: TResult\n      description: The result type of the task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: A `Task(TResult)` that represents the work queued to execute in the thread pool.\n  overload: System.Threading.Tasks.Task.Run``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>function</code> parameter is `null`.\n  - type: System.Threading.Tasks.TaskCanceledException\n    commentId: T:System.Threading.Tasks.TaskCanceledException\n    description: The task has been canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with <code>cancellationToken</code> was disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n  id: Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Run<TResult>(Func<Task<TResult>>, CancellationToken)\n  nameWithType: Task.Run<TResult>(Func<Task<TResult>>, CancellationToken)\n  fullName: Task.Run<TResult>(Func<Task<TResult>>, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Queues the specified work to run on the thread pool and returns a proxy for the `Task(TResult)` returned by <code>function</code>.\n  remarks: For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).\n  syntax:\n    content: public static System.Threading.Tasks.Task<TResult> Run<TResult> (Func<System.Threading.Tasks.Task<TResult>> function, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: function\n      type: System.Func{System.Threading.Tasks.Task{TResult}}\n      description: The work to execute asynchronously\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token that should be used to cancel the work\n    typeParameters:\n    - id: TResult\n      description: The type of the result returned by the proxy task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: A `Task(TResult)` that represents a proxy for the `Task(TResult)` returned by <code>function</code>.\n  overload: System.Threading.Tasks.Task.Run``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>function</code> parameter was `null`.\n  - type: System.Threading.Tasks.TaskCanceledException\n    commentId: T:System.Threading.Tasks.TaskCanceledException\n    description: The task has been canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with <code>cancellationToken</code> was disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})\n  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})\n  id: Run``1(System.Func{System.Threading.Tasks.Task{``0}})\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Run<TResult>(Func<Task<TResult>>)\n  nameWithType: Task.Run<TResult>(Func<Task<TResult>>)\n  fullName: Task.Run<TResult>(Func<Task<TResult>>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Queues the specified work to run on the thread pool and returns a proxy for the `Task(TResult)` returned by <code>function</code>.\n  remarks: For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).\n  syntax:\n    content: public static System.Threading.Tasks.Task<TResult> Run<TResult> (Func<System.Threading.Tasks.Task<TResult>> function);\n    parameters:\n    - id: function\n      type: System.Func{System.Threading.Tasks.Task{TResult}}\n      description: The work to execute asynchronously\n    typeParameters:\n    - id: TResult\n      description: The type of the result returned by the proxy task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: A `Task(TResult)` that represents a proxy for the `Task(TResult)` returned by <code>function</code>.\n  overload: System.Threading.Tasks.Task.Run``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>function</code> parameter was `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{``0})\n  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{``0})\n  id: Run``1(System.Func{``0})\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Run<TResult>(Func<TResult>)\n  nameWithType: Task.Run<TResult>(Func<TResult>)\n  fullName: Task.Run<TResult>(Func<TResult>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Queues the specified work to run on the thread pool and returns a <xref href=\"System.Threading.Tasks.Task`1\"></xref> object that represents that work.\n  remarks: \"The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=fullName> method. It creates a task with the following default values:  \\n  \\n-   Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName>.  \\n  \\n-   Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>.  \\n  \\n-   It uses the default task scheduler.  \\n  \\n For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).\"\n  example:\n  - \"The following example counts the approximate number of words in text files that represent published books. Each task is responsible for opening a file, reading its entire contents asynchronously, and calculating the word count by using a regular expression. The <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method is called to ensure that all tasks have completed before  displaying the word count of each book to the console.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Run#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run3.cs#2)]\\n [!code-vb[System.Threading.Tasks.Task.Run#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run3.vb#2)]  \\n  \\n The regular expression `\\\\p{P}*\\\\s+` matches zero, one, or more punctuation characters followed by one or more whitespace characters. It assumes that the total number of matches equals the approximate word count.\"\n  syntax:\n    content: public static System.Threading.Tasks.Task<TResult> Run<TResult> (Func<TResult> function);\n    parameters:\n    - id: function\n      type: System.Func`1\n      description: The work to execute asynchronously.\n    typeParameters:\n    - id: TResult\n      description: The return type of the task.\n    return:\n      type: System.Threading.Tasks.Task`1\n      description: A task object that represents the work queued to execute in the thread pool.\n  overload: System.Threading.Tasks.Task.Run``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>function</code> parameter is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.RunSynchronously\n  commentId: M:System.Threading.Tasks.Task.RunSynchronously\n  id: RunSynchronously\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: RunSynchronously()\n  nameWithType: Task.RunSynchronously()\n  fullName: Task.RunSynchronously()\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Runs the <xref href=\"System.Threading.Tasks.Task\"></xref> synchronously on the current <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref>.\n  remarks: \"Ordinarily, tasks are executed asynchronously on a thread pool thread and do not block the calling thread. Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously> method are associated with the current <xref:System.Threading.Tasks.TaskScheduler> and are run on the calling thread. If the target scheduler does not support running this task on the calling thread, the task will be scheduled for execution on the scheduler, and the calling thread will block until the task has completed execution. Even though the task runs synchronously, the calling thread should still call <xref:System.Threading.Tasks.Task.Wait%2A> to handle any exceptions that the task might throw.  For more information on exception handling, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).  \\n  \\n Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor. The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state. A task may be started and run only once. Any attempts to schedule a task a second time results in an exception.\"\n  example:\n  - \"The following example compares a task executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method with one executed asynchronously. In both cases, the tasks execute identical lambda expressions that display the task ID and the ID of the thread on which the task is running. The task calculates the sum of the integers between 1 and 1,000,000. As the output from the example shows, the task executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method runs on the application thread, while the asynchronous task does not.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.RunSynchronously#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.runsynchronously/cs/runsynchronously1.cs#1)]\\n [!code-vb[System.Threading.Tasks.Task.RunSynchronously#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.runsynchronously/vb/runsynchronously1.vb#1)]\"\n  syntax:\n    content: public void RunSynchronously ();\n    parameters: []\n  overload: System.Threading.Tasks.Task.RunSynchronously*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task\"></xref> instance has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Threading.Tasks.Task\"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)\n  id: RunSynchronously(System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: RunSynchronously(TaskScheduler)\n  nameWithType: Task.RunSynchronously(TaskScheduler)\n  fullName: Task.RunSynchronously(TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Runs the <xref href=\"System.Threading.Tasks.Task\"></xref> synchronously on the <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> provided.\n  remarks: \"Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor. The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state. A task may be started and run only once. Any attempts to schedule a task a second time results in an exception.  \\n  \\n If the target scheduler does not support running this task on the current thread, the task will be scheduled for execution on the scheduler, and the current thread will block until the task has completed execution. Because of this, the calling thread does not need to call a method such as <xref:System.Threading.Tasks.Task.Wait%2A> to ensure that the task has completed execution. For more information on exception handling for task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).\"\n  syntax:\n    content: public void RunSynchronously (System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The scheduler on which to attempt to run this task inline.\n  overload: System.Threading.Tasks.Task.RunSynchronously*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task\"></xref> instance has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>scheduler</code> argument is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Threading.Tasks.Task\"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Start\n  commentId: M:System.Threading.Tasks.Task.Start\n  id: Start\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Start()\n  nameWithType: Task.Start()\n  fullName: Task.Start()\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Starts the <xref href=\"System.Threading.Tasks.Task\"></xref>, scheduling it for execution to the current <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref>.\n  remarks: \"A task may be started and run only once. Any attempts to schedule a task a second time will result in an exception.  \\n  \\n The <xref:System.Threading.Tasks.Task.Start%2A> is used to execute a task that has been created by calling one of the <xref:System.Threading.Tasks.Task> constructors. Typically, you do this when you need to separate the task's creation from its execution, such as when you conditionally execute tasks that you've created. For the more common case in which you don't need to separate  task instantiation from execution, we recommend that you call an overload of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method.  \\n  \\n For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).\"\n  example:\n  - \"The following example calls the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> constructor to instantiate a new <xref:System.Threading.Tasks.Task> object that displays its task ID and managed thread ID and then executes a loop. It then calls the <xref:System.Threading.Tasks.Task.Start%2A> method to execute the task.  Since this is a console app, the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method is necessary to prevent the app from terminating before the task finishes execution.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Start#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.start/cs/Start1.cs#1)]\\n [!code-vb[System.Threading.Tasks.Task.Start#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.start/vb/Start1.vb#1)]\"\n  syntax:\n    content: public void Start ();\n    parameters: []\n  overload: System.Threading.Tasks.Task.Start*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task\"></xref> instance has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Threading.Tasks.Task\"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)\n  id: Start(System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Start(TaskScheduler)\n  nameWithType: Task.Start(TaskScheduler)\n  fullName: Task.Start(TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Starts the <xref href=\"System.Threading.Tasks.Task\"></xref>, scheduling it for execution to the specified <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref>.\n  remarks: \"A task may only be started and run only once. Any attempts to schedule a task a second time will result in an exception.  \\n  \\n For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).\"\n  syntax:\n    content: public void Start (System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> with which to associate and execute this task.\n  overload: System.Threading.Tasks.Task.Start*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>scheduler</code> argument is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Threading.Tasks.Task\"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task\"></xref> instance has been disposed.\n  - type: System.Threading.Tasks.TaskSchedulerException\n    commentId: T:System.Threading.Tasks.TaskSchedulerException\n    description: The scheduler was unable to queue this task.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Status\n  commentId: P:System.Threading.Tasks.Task.Status\n  id: Status\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Status\n  nameWithType: Task.Status\n  fullName: Task.Status\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Gets the <xref href=\"System.Threading.Tasks.TaskStatus\"></xref> of this task.\n  remarks: \"Retrieving the value of the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=fullName> property does not block the calling thread until the task has completed.  \\n  \\n For more information and an example, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md) and [How to: Cancel a Task and Its Children](~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md).\"\n  example:\n  - \"The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million. When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled. The example then examines the <xref:System.Threading.Tasks.Task.Status%2A> property of each task to indicate whether it completed successfully or was cancelled. For those that completed, it displays the value returned by the task.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Run#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run7.cs#7)]\\n [!code-vb[System.Threading.Tasks.Task.Run#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run7.vb#7)]\"\n  syntax:\n    content: public System.Threading.Tasks.TaskStatus Status { get; }\n    return:\n      type: System.Threading.Tasks.TaskStatus\n      description: The current <xref href=\"System.Threading.Tasks.TaskStatus\"></xref> of this task instance.\n  overload: System.Threading.Tasks.Task.Status*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Wait(System.TimeSpan)\n  commentId: M:System.Threading.Tasks.Task.Wait(System.TimeSpan)\n  id: Wait(System.TimeSpan)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Wait(TimeSpan)\n  nameWithType: Task.Wait(TimeSpan)\n  fullName: Task.Wait(TimeSpan)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Waits for the <xref href=\"System.Threading.Tasks.Task\"></xref> to complete execution within a specified time interval.\n  remarks: \"<xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:  \\n  \\n-   The task completes successfully.  \\n  \\n-   The task itself is canceled or throws an exception. In this case, you handle an <xref:System.AggregateException> exception. The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=fullName> property contains details about the exception or exceptions.  \\n  \\n-   The interval defined by `timeout` elapses. In this case, the current thread resumes execution and the method returns `false`.\"\n  example:\n  - \"The following example starts a task that generates five million random integers between 0 and 100 and computes their mean. The example uses the <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> method to wait for the application to complete within 150 milliseconds. If the application completes normally, the task displays the sum and mean of the random numbers that it has generated. If the timeout interval has elapsed, the example displays a message before it terminates.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Wait#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/Wait6.cs#6)]\\n [!code-vb[System.Threading.Tasks.Task.Wait#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/Wait6.vb#6)]\"\n  syntax:\n    content: public bool Wait (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Threading.Tasks.Task\"></xref> completed execution within the allotted time; otherwise, `false`.'\n  overload: System.Threading.Tasks.Task.Wait*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out.  \\n  \\n -or-  \\n  \\n <code>timeout</code> is greater than <xref href=\\\"System.Int32.MaxValue\\\"></xref>.\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"The task was canceled. The <xref href=\\\"System.AggregateException.InnerExceptions\\\"></xref> collection contains a <xref href=\\\"System.Threading.Tasks.TaskCanceledException\\\"></xref> object.  \\n  \\n -or-  \\n  \\n An exception was thrown during the execution of the task. The <xref href=\\\"System.AggregateException.InnerExceptions\\\"></xref> collection contains information about the exception or exceptions.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)\n  id: Wait(System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Wait(Int32, CancellationToken)\n  nameWithType: Task.Wait(Int32, CancellationToken)\n  fullName: Task.Wait(Int32, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Waits for the <xref href=\"System.Threading.Tasks.Task\"></xref> to complete execution. The wait terminates if a timeout interval elapses or a cancellation token is canceled before the task completes.\n  remarks: \"<xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:  \\n  \\n-   The task completes successfully.  \\n  \\n-   The task itself is canceled or throws an exception. In this case, you handle an <xref:System.AggregateException> exception. The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=fullName> property contains details about the exception or exceptions.  \\n  \\n-   The `cancellationToken` cancellation token is canceled. In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>.  \\n  \\n-   The interval defined by `millisecondsTimeout` elapses. In this case, the current thread resumes execution and the method returns `false`.  \\n  \\n> [!NOTE]\\n>  Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation. Passing the `cancellationToken` object to this method simply allows the wait to be canceled based on some condition.\"\n  example:\n  - \"The following example calls the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> method to provide both a timeout value and a cancellation token that can end the wait for a task's completion. A new thread is started and executes the `CancelToken` method, which pauses and then calls the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=fullName> method to cancel the cancellation tokens. A task is then launched and delays for 5 seconds. The <xref:System.Threading.Tasks.Task.Wait%2A> method is then called to wait for the task's completion and is provided both a brief timeout value and a cancellation token.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Wait#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait4.cs#4)]\\n [!code-vb[System.Threading.Tasks.Task.Wait#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait4.vb#4)]  \\n  \\n Note that the precise output from the example depends on whether the wait was canceled because of the cancellation token or because the timeout interval elapsed.\"\n  syntax:\n    content: public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token to observe while waiting for the task to complete.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Threading.Tasks.Task\"></xref> completed execution within the allotted time; otherwise, `false`.'\n  overload: System.Threading.Tasks.Task.Wait*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <code>cancellationToken</code> was canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"The task was canceled. The <xref href=\\\"System.AggregateException.InnerExceptions\\\"></xref> collection contains a <xref href=\\\"System.Threading.Tasks.TaskCanceledException\\\"></xref> object.  \\n  \\n -or-  \\n  \\n An exception was thrown during the execution of the task. The <xref href=\\\"System.AggregateException.InnerExceptions\\\"></xref> collection contains information about the exception or exceptions.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)\n  id: Wait(System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Wait(CancellationToken)\n  nameWithType: Task.Wait(CancellationToken)\n  fullName: Task.Wait(CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Waits for the <xref href=\"System.Threading.Tasks.Task\"></xref> to complete execution. The wait terminates if a cancellation token is canceled before the task completes.\n  remarks: \"The <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method creates a cancelable wait; that is, it causes the current thread to wait until one of the following occurs:  \\n  \\n-   The task completes.  \\n  \\n-   The cancellation token is canceled. In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>.  \\n  \\n> [!NOTE]\\n>  Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation. Passing the `cancellationToken` object to this method simply allows the wait to be canceled.\"\n  example:\n  - \"The following example illustrates the simple use of a cancellation token to cancel waiting for a task's completion. A task is launched, calls the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=fullName> method to cancel any of the token source's cancellation tokens, and then delays for five seconds. Note that the task itself has not been passed the cancellation token and is not cancelable. The application thread calls the task's <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName> method to wait for the task to complete, but the wait is canceled once the cancellation token is cancelled and an <xref:System.OperationCanceledException> is thrown. The exception handler reports the exception and then sleeps for six seconds. As the output from the example shows, that delay allows the task to complete in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Wait#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait3.cs#3)]\\n [!code-vb[System.Threading.Tasks.Task.Wait#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait3.vb#3)]\"\n  syntax:\n    content: public void Wait (System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token to observe while waiting for the task to complete.\n  overload: System.Threading.Tasks.Task.Wait*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <code>cancellationToken</code> was canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The task has been disposed.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"The task was canceled. The <xref href=\\\"System.AggregateException.InnerExceptions\\\"></xref> collection contains a <xref href=\\\"System.Threading.Tasks.TaskCanceledException\\\"></xref> object.  \\n  \\n -or-  \\n  \\n An exception was thrown during the execution of the task. The <xref href=\\\"System.AggregateException.InnerExceptions\\\"></xref> collection contains information about the exception or exceptions.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Wait(System.Int32)\n  commentId: M:System.Threading.Tasks.Task.Wait(System.Int32)\n  id: Wait(System.Int32)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Wait(Int32)\n  nameWithType: Task.Wait(Int32)\n  fullName: Task.Wait(Int32)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Waits for the <xref href=\"System.Threading.Tasks.Task\"></xref> to complete execution within a specified number of milliseconds.\n  remarks: \"<xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:  \\n  \\n-   The task completes successfully.  \\n  \\n-   The task itself is canceled or throws an exception. In this case, you handle an <xref:System.AggregateException> exception. The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=fullName> property contains details about the exception or exceptions.  \\n  \\n-   The interval defined by `millisecondsTimeout` elapses. In this case, the current thread resumes execution and the method returns `false`.\"\n  example:\n  - \"The following example starts a task that generates five million random integers between 0 and 100 and computes their mean. The example uses the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> method to wait for the application to complete within 150 milliseconds. If the application completes normally, the task displays the sum and mean of the random numbers that it has generated. If the timeout interval has elapsed, the example displays a message before it terminates.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Wait#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/Wait5.cs#5)]\\n [!code-vb[System.Threading.Tasks.Task.Wait#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/Wait5.vb#5)]\"\n  syntax:\n    content: public bool Wait (int millisecondsTimeout);\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Threading.Tasks.Task\"></xref> completed execution within the allotted time; otherwise, `false`.'\n  overload: System.Threading.Tasks.Task.Wait*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"The task was canceled. The <xref href=\\\"System.AggregateException.InnerExceptions\\\"></xref> collection contains a <xref href=\\\"System.Threading.Tasks.TaskCanceledException\\\"></xref> object.  \\n  \\n -or-  \\n  \\n An exception was thrown during the execution of the task. The <xref href=\\\"System.AggregateException.InnerExceptions\\\"></xref> collection contains information about the exception or exceptions.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Wait\n  commentId: M:System.Threading.Tasks.Task.Wait\n  id: Wait\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Wait()\n  nameWithType: Task.Wait()\n  fullName: Task.Wait()\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Waits for the <xref href=\"System.Threading.Tasks.Task\"></xref> to complete execution.\n  remarks: \"<xref:System.Threading.Tasks.Task.Wait%2A> is a synchronization method that causes the calling thread to wait until the current task has completed. If the current task has not started execution, the Wait method attempts to remove the task from the scheduler and execute it inline on the current thread. If it is unable to do that, or if the current task has already started execution, it blocks the calling thread until the task completes. For more information, see [Task.Wait and \\\"Inlining\\\"](http://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx) in the Parallel Programming with .NET blog.  \\n  \\n For more information and an example, see [How to: Wait on One or More Tasks to Complete](http://msdn.microsoft.com/library/79cb522b-9c93-46ed-b23a-c06908f3a374).\"\n  example:\n  - \"The following example starts a task that generates one million random integers between 0 and 100 and computes their mean. The example uses the <xref:System.Threading.Tasks.Task.Wait%2A> method to ensure that the task completes before the application terminates. Otherwise, because this is a console application, the example would terminate before the task can compute and display the mean.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.Wait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait1.cs#1)]\\n [!code-vb[System.Threading.Tasks.Task.Wait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait1.vb#1)]\"\n  syntax:\n    content: public void Wait ();\n    parameters: []\n  overload: System.Threading.Tasks.Task.Wait*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"The task was canceled. The <xref href=\\\"System.AggregateException.InnerExceptions\\\"></xref> collection contains a <xref href=\\\"System.Threading.Tasks.TaskCanceledException\\\"></xref> object.  \\n  \\n -or-  \\n  \\n An exception was thrown during the execution of the task. The <xref href=\\\"System.AggregateException.InnerExceptions\\\"></xref> collection contains information about the exception or exceptions.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])\n  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])\n  id: WaitAll(System.Threading.Tasks.Task[])\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: WaitAll(Task[])\n  nameWithType: Task.WaitAll(Task[])\n  fullName: Task.WaitAll(Task[])\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Waits for all of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution.\n  remarks: ''\n  example:\n  - \"The following example starts 10 tasks, each of which is passed an index as a state object. Tasks with an index from two to five throw exceptions. The call to the <xref:System.Threading.Tasks.Task.WaitAll%2A> method wraps all exceptions in an <xref:System.AggregateException> object and propagates it to the calling thread.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/waitall.cs#02)]\\n [!code-vb[System.Threading.Tasks.Task#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/waitall.vb#02)]\"\n  syntax:\n    content: public static void WaitAll (System.Threading.Tasks.Task[] tasks);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait.\n  overload: System.Threading.Tasks.Task.WaitAll*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: One or more of the <xref href=\"System.Threading.Tasks.Task\"></xref> objects in <code>tasks</code> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>tasks</code> argument is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>tasks</code> argument contains a null element.  \\n  \\n -or-  \\n  \\n The <code>tasks</code> argument is an empty array.\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"At least one of the <xref href=\\\"System.Threading.Tasks.Task\\\"></xref> instances was canceled. If a task was canceled, the <xref href=\\\"System.AggregateException\\\"></xref> exception contains an <xref href=\\\"System.OperationCanceledException\\\"></xref> exception in its <xref href=\\\"System.AggregateException.InnerExceptions\\\"></xref> collection.  \\n  \\n -or-  \\n  \\n An exception was thrown during the execution of at least one of the <xref href=\\\"System.Threading.Tasks.Task\\\"></xref> instances.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)\n  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)\n  id: WaitAll(System.Threading.Tasks.Task[],System.Int32)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: WaitAll(Task[], Int32)\n  nameWithType: Task.WaitAll(Task[], Int32)\n  fullName: Task.WaitAll(Task[], Int32)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Waits for all of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution within a specified number of milliseconds.\n  syntax:\n    content: public static bool WaitAll (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait.\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.\n    return:\n      type: System.Boolean\n      description: '`true` if all of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances completed execution within the allotted time; otherwise, `false`.'\n  overload: System.Threading.Tasks.Task.WaitAll*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: One or more of the <xref href=\"System.Threading.Tasks.Task\"></xref> objects in <code>tasks</code> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>tasks</code> argument is `null`.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"At least one of the <xref href=\\\"System.Threading.Tasks.Task\\\"></xref> instances was canceled. If a task was canceled, the <xref href=\\\"System.AggregateException\\\"></xref> contains an <xref href=\\\"System.OperationCanceledException\\\"></xref> in its <xref href=\\\"System.AggregateException.InnerExceptions\\\"></xref> collection.  \\n  \\n -or-  \\n  \\n An exception was thrown during the execution of at least one of the <xref href=\\\"System.Threading.Tasks.Task\\\"></xref> instances.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>tasks</code> argument contains a null element.  \\n  \\n -or-  \\n  \\n The <code>tasks</code> argument is an empty array.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  id: WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: WaitAll(Task[], CancellationToken)\n  nameWithType: Task.WaitAll(Task[], CancellationToken)\n  fullName: Task.WaitAll(Task[], CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Waits for all of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution unless the wait is cancelled.\n  remarks: The `cancellationToken` argument is used to cancel the wait operation. Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> as noted above.\n  syntax:\n    content: public static void WaitAll (System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> to observe while waiting for the tasks to complete.\n  overload: System.Threading.Tasks.Task.WaitAll*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <code>cancellationToken</code> was canceled.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>tasks</code> argument is `null`.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"At least one of the <xref href=\\\"System.Threading.Tasks.Task\\\"></xref> instances was canceled. If a task was canceled, the <xref href=\\\"System.AggregateException\\\"></xref> contains an <xref href=\\\"System.OperationCanceledException\\\"></xref> in its <xref href=\\\"System.AggregateException.InnerExceptions\\\"></xref> collection.  \\n  \\n -or-  \\n  \\n An exception was thrown during the execution of at least one of the <xref href=\\\"System.Threading.Tasks.Task\\\"></xref> instances.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>tasks</code> argument contains a null element.  \\n  \\n -or-  \\n  \\n The <code>tasks</code> argument is an empty array.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: One or more of the <xref href=\"System.Threading.Tasks.Task\"></xref> objects in <code>tasks</code> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)\n  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)\n  id: WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: WaitAll(Task[], TimeSpan)\n  nameWithType: Task.WaitAll(Task[], TimeSpan)\n  fullName: Task.WaitAll(Task[], TimeSpan)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Waits for all of the provided cancellable <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution within a specified time interval.\n  syntax:\n    content: public static bool WaitAll (System.Threading.Tasks.Task[] tasks, TimeSpan timeout);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait.\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely.\n    return:\n      type: System.Boolean\n      description: '`true` if all of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances completed execution within the allotted time; otherwise, `false`.'\n  overload: System.Threading.Tasks.Task.WaitAll*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: One or more of the <xref href=\"System.Threading.Tasks.Task\"></xref> objects in <code>tasks</code> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>tasks</code> argument is `null`.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"At least one of the <xref href=\\\"System.Threading.Tasks.Task\\\"></xref> instances was canceled. If a task was canceled, the <xref href=\\\"System.AggregateException\\\"></xref> contains an <xref href=\\\"System.OperationCanceledException\\\"></xref> in its <xref href=\\\"System.AggregateException.InnerExceptions\\\"></xref> collection.  \\n  \\n -or-  \\n  \\n An exception was thrown during the execution of at least one of the <xref href=\\\"System.Threading.Tasks.Task\\\"></xref> instances.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out.  \\n  \\n -or-  \\n  \\n <code>timeout</code> is greater than <xref href=\\\"System.Int32.MaxValue\\\"></xref>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>tasks</code> argument contains a null element.  \\n  \\n -or-  \\n  \\n The <code>tasks</code> argument is an empty array.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  id: WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: WaitAll(Task[], Int32, CancellationToken)\n  nameWithType: Task.WaitAll(Task[], Int32, CancellationToken)\n  fullName: Task.WaitAll(Task[], Int32, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Waits for all of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution within a specified number of milliseconds or until the wait is cancelled.\n  remarks: The `cancellationToken` argument is used to cancel the wait operation. Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> noted above.\n  syntax:\n    content: public static bool WaitAll (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait.\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> to observe while waiting for the tasks to complete.\n    return:\n      type: System.Boolean\n      description: '`true` if all of the <xref href=\"System.Threading.Tasks.Task\"></xref> instances completed execution within the allotted time; otherwise, `false`.'\n  overload: System.Threading.Tasks.Task.WaitAll*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: One or more of the <xref href=\"System.Threading.Tasks.Task\"></xref> objects in <code>tasks</code> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>tasks</code> argument is `null`.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"At least one of the <xref href=\\\"System.Threading.Tasks.Task\\\"></xref> instances was canceled. If a task was canceled, the <xref href=\\\"System.AggregateException\\\"></xref> contains an <xref href=\\\"System.OperationCanceledException\\\"></xref> in its <xref href=\\\"System.AggregateException.InnerExceptions\\\"></xref> collection.  \\n  \\n -or-  \\n  \\n An exception was thrown during the execution of at least one of the <xref href=\\\"System.Threading.Tasks.Task\\\"></xref> instances.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>tasks</code> argument contains a null element.  \\n  \\n -or-  \\n  \\n The <code>tasks</code> argument is an empty array.\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <code>cancellationToken</code> was canceled.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  id: WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: WaitAny(Task[], Int32, CancellationToken)\n  nameWithType: Task.WaitAny(Task[], Int32, CancellationToken)\n  fullName: Task.WaitAny(Task[], Int32, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Waits for any of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution within a specified number of milliseconds or until a cancellation token is cancelled.\n  syntax:\n    content: public static int WaitAny (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait.\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> to observe while waiting for a task to complete.\n    return:\n      type: System.Int32\n      description: The index of the completed task in the <code>tasks</code> array argument, or -1 if the timeout occurred.\n  overload: System.Threading.Tasks.Task.WaitAny*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>tasks</code> argument is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> argument contains a null element.\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <code>cancellationToken</code> was canceled.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)\n  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)\n  id: WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: WaitAny(Task[], TimeSpan)\n  nameWithType: Task.WaitAny(Task[], TimeSpan)\n  fullName: Task.WaitAny(Task[], TimeSpan)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Waits for any of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution within a specified time interval.\n  syntax:\n    content: public static int WaitAny (System.Threading.Tasks.Task[] tasks, TimeSpan timeout);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait.\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely.\n    return:\n      type: System.Int32\n      description: The index of the completed task in the <code>tasks</code> array argument, or -1 if the timeout occurred.\n  overload: System.Threading.Tasks.Task.WaitAny*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>tasks</code> argument is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out.  \\n  \\n -or-  \\n  \\n <code>timeout</code> is greater than <xref href=\\\"System.Int32.MaxValue\\\"></xref>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> argument contains a null element.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)\n  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)\n  id: WaitAny(System.Threading.Tasks.Task[],System.Int32)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: WaitAny(Task[], Int32)\n  nameWithType: Task.WaitAny(Task[], Int32)\n  fullName: Task.WaitAny(Task[], Int32)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Waits for any of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution within a specified number of milliseconds.\n  syntax:\n    content: public static int WaitAny (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait.\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.\n    return:\n      type: System.Int32\n      description: The index of the completed task in the <code>tasks</code> array argument, or -1 if the timeout occurred.\n  overload: System.Threading.Tasks.Task.WaitAny*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>tasks</code> argument is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> argument contains a null element.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  id: WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: WaitAny(Task[], CancellationToken)\n  nameWithType: Task.WaitAny(Task[], CancellationToken)\n  fullName: Task.WaitAny(Task[], CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Waits for any of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution unless the wait is cancelled.\n  syntax:\n    content: public static int WaitAny (System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\"></xref> to observe while waiting for a task to complete.\n    return:\n      type: System.Int32\n      description: The index of the completed task in the <code>tasks</code> array argument.\n  overload: System.Threading.Tasks.Task.WaitAny*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>tasks</code> argument is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> argument contains a null element.\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <code>cancellationToken</code> was canceled.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])\n  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])\n  id: WaitAny(System.Threading.Tasks.Task[])\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: WaitAny(Task[])\n  nameWithType: Task.WaitAny(Task[])\n  fullName: Task.WaitAny(Task[])\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Waits for any of the provided <xref href=\"System.Threading.Tasks.Task\"></xref> objects to complete execution.\n  remarks: ''\n  example:\n  - \"The following example launches five tasks, each of which sleeps for a minimum of 50 milliseconds or a maximum of 1,050 milliseconds. The <xref:System.Threading.Tasks.Task.WaitAny%2A> method then waits for any of the tasks to complete. The example displays the task ID of the task that ended the wait, as well as the current status of all the tasks.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.WaitAny#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Tasks.Task.WaitAny/cs/WaitAny1.cs#1)]\\n [!code-vb[System.Threading.Tasks.Task.WaitAny#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Tasks.Task.WaitAny/vb/WaitAny1.vb#1)]\"\n  syntax:\n    content: public static int WaitAny (System.Threading.Tasks.Task[] tasks);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: An array of <xref href=\"System.Threading.Tasks.Task\"></xref> instances on which to wait.\n    return:\n      type: System.Int32\n      description: The index of the completed <xref href=\"System.Threading.Tasks.Task\"></xref> object in the <code>tasks</code> array.\n  overload: System.Threading.Tasks.Task.WaitAny*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>tasks</code> argument is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> argument contains a null element.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  commentId: M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  id: WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: WhenAll(IEnumerable<Task>)\n  nameWithType: Task.WhenAll(IEnumerable<Task>)\n  fullName: Task.WhenAll(IEnumerable<Task>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a task that will complete when all of the <xref href=\"System.Threading.Tasks.Task\"></xref> objects in an enumerable collection have completed.\n  remarks: \"The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.  \\n  \\n> [!NOTE]\\n>  The call to <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method does not block the calling thread.  \\n  \\n If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state,  where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.  \\n  \\n If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \\n  \\n If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \\n  \\n If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state before it's returned to the caller.\"\n  example:\n  - \"The following example creates a set of tasks that ping the URLs in an array. The tasks are stored in a `List<Task>` collection that is passed to the <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method. After the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that all threads have completed, the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=fullName> property to determine whether any tasks have faulted.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.WhenAll#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/WhenAll4.cs#4)]\\n [!code-vb[System.Threading.Tasks.Task.WhenAll#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/WhenAll4.vb#4)]\"\n  syntax:\n    content: public static System.Threading.Tasks.Task WhenAll (System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task> tasks);\n    parameters:\n    - id: tasks\n      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}\n      description: The tasks to wait on for completion.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the completion of all of the supplied tasks.\n  overload: System.Threading.Tasks.Task.WhenAll*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>tasks</code> argument was `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> collection contained a `null` task.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])\n  commentId: M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])\n  id: WhenAll(System.Threading.Tasks.Task[])\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: WhenAll(Task[])\n  nameWithType: Task.WhenAll(Task[])\n  fullName: Task.WhenAll(Task[])\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a task that will complete when all of the <xref href=\"System.Threading.Tasks.Task\"></xref> objects in an array have completed.\n  remarks: \"The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.  \\n  \\n> [!NOTE]\\n>  The call to <xref:System.Threading.Tasks.Task.WhenAll%28System.Threading.Tasks.Task%5B%5D%29> method does not block the calling thread.  \\n  \\n If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.  \\n  \\n If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \\n  \\n If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \\n  \\n If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state before it's returned to the caller.\"\n  example:\n  - \"The following example creates a set of tasks that ping the URLs in an array. The tasks are stored in a `List<Task>` collection that is converted to an array and passed to the <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method. After the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that all threads have completed, the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=fullName> property to determine whether any tasks have faulted.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.WhenAll#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/WhenAll3.cs#3)]\\n [!code-vb[System.Threading.Tasks.Task.WhenAll#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/WhenAll3.vb#3)]\"\n  syntax:\n    content: public static System.Threading.Tasks.Task WhenAll (System.Threading.Tasks.Task[] tasks);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The tasks to wait on for completion.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the completion of all of the supplied tasks.\n  overload: System.Threading.Tasks.Task.WhenAll*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>tasks</code> argument was `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array contained a `null` task.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  commentId: M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  id: WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: WhenAll<TResult>(IEnumerable<Task<TResult>>)\n  nameWithType: Task.WhenAll<TResult>(IEnumerable<Task<TResult>>)\n  fullName: Task.WhenAll<TResult>(IEnumerable<Task<TResult>>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a task that will complete when all of the <xref href=\"System.Threading.Tasks.Task`1\"></xref> objects in an enumerable collection have completed.\n  remarks: \"The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7B%60%600%7D%7D%29> method does not block the calling thread. However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread.  \\n  \\n If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.  \\n  \\n If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \\n  \\n If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  The <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=fullName> property of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output task's <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=fullName> property will return an `TResult[]` where `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.  \\n  \\n If the `tasks` argument contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state before it's returned to the caller. The returned `TResult[]` will be an array of 0 elements.\"\n  example:\n  - \"The following example creates ten tasks, each of which instantiates a random number generator that creates 1,000 random numbers between 1 and 1,000 and computes their mean. The <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> method is used to delay instantiation of the random number generators so that they are not created with identical seed values. The call to the <xref:System.Threading.Tasks.Task.WhenAll%2A> method then returns an <xref:System.Int64> array that contains the mean computed by each task. These are then used to calculate the overall mean.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.WhenAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/whenall1.cs#1)]\\n [!code-vb[System.Threading.Tasks.Task.WhenAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/whenall1.vb#1)]  \\n  \\n In this case, the ten individual tasks are stored in a <xref:System.Collections.Generic.List%601> object. <xref:System.Collections.Generic.List%601> implements the <xref:System.Collections.Generic.IEnumerable%601> interface.\"\n  syntax:\n    content: public static System.Threading.Tasks.Task<TResult[]> WhenAll<TResult> (System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>> tasks);\n    parameters:\n    - id: tasks\n      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{TResult}}\n      description: The tasks to wait on for completion.\n    typeParameters:\n    - id: TResult\n      description: The type of the completed task.\n    return:\n      type: System.Threading.Tasks.Task{TResult[]}\n      description: A task that represents the completion of all of the supplied tasks.\n  overload: System.Threading.Tasks.Task.WhenAll``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>tasks</code> argument was `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> collection contained a `null` task.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])\n  commentId: M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])\n  id: WhenAll``1(System.Threading.Tasks.Task{``0}[])\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: WhenAll<TResult>(Task<TResult>[])\n  nameWithType: Task.WhenAll<TResult>(Task<TResult>[])\n  fullName: Task.WhenAll<TResult>(Task<TResult>[])\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a task that will complete when all of the <xref href=\"System.Threading.Tasks.Task`1\"></xref> objects in an array have completed.\n  remarks: \"The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%29> method does not block the calling thread. However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread.  \\n  \\n If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.  \\n  \\n If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \\n  \\n If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  The <xref:System.Threading.Tasks.Task%601.Result%2A> of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output   task's <xref:System.Threading.Tasks.Task%601.Result%2A> will return an `TResult[]` where `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.  \\n  \\n If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state before it's returned to the caller.  The returned `TResult[]` will be an array of 0 elements.\"\n  example:\n  - \"The following example creates ten tasks, each of which instantiates a random number generator that creates 1,000 random numbers between 1 and 1,000 and computes their mean. In this case, the ten individual tasks are stored in a `Task<Int64>` array.  The <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> method is used to delay instantiation of the random number generators so that they are not created with identical seed values. The call to the <xref:System.Threading.Tasks.Task.WhenAll%2A> method then returns an <xref:System.Int64> array that contains the mean computed by each task. These are then used to calculate the overall mean.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.WhenAll#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/whenall2.cs#2)]\\n [!code-vb[System.Threading.Tasks.Task.WhenAll#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/whenall2.vb#2)]\"\n  syntax:\n    content: public static System.Threading.Tasks.Task<TResult[]> WhenAll<TResult> (System.Threading.Tasks.Task<TResult>[] tasks);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TResult}[]\n      description: The tasks to wait on for completion.\n    typeParameters:\n    - id: TResult\n      description: The type of the completed task.\n    return:\n      type: System.Threading.Tasks.Task{TResult[]}\n      description: A task that represents the completion of all of the supplied tasks.\n  overload: System.Threading.Tasks.Task.WhenAll``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>tasks</code> argument was `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array contained a `null` task.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  commentId: M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  id: WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: WhenAny(IEnumerable<Task>)\n  nameWithType: Task.WhenAny(IEnumerable<Task>)\n  fullName: Task.WhenAny(IEnumerable<Task>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a task that will complete when any of the supplied tasks have completed.\n  remarks: The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the `RanToCompletion` state  with its Result set to the first task to complete.  This is true even if the first task to complete ended in the `Canceled` or `Faulted` state.\n  syntax:\n    content: public static System.Threading.Tasks.Task<System.Threading.Tasks.Task> WhenAny (System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task> tasks);\n    parameters:\n    - id: tasks\n      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}\n      description: The tasks to wait on for completion.\n    return:\n      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task}\n      description: A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.\n  overload: System.Threading.Tasks.Task.WhenAny*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>tasks</code> argument was `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array contained a null task, or was empty.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])\n  commentId: M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])\n  id: WhenAny(System.Threading.Tasks.Task[])\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: WhenAny(Task[])\n  nameWithType: Task.WhenAny(Task[])\n  fullName: Task.WhenAny(Task[])\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a task that will complete when any of the supplied tasks have completed.\n  remarks: The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the `RanToCompletion` state   with its `Result` set to the first task to complete.  This is true even if the first task to complete ended in the `Canceled` or `Faulted` state.\n  syntax:\n    content: public static System.Threading.Tasks.Task<System.Threading.Tasks.Task> WhenAny (System.Threading.Tasks.Task[] tasks);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: The tasks to wait on for completion.\n    return:\n      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task}\n      description: A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.\n  overload: System.Threading.Tasks.Task.WhenAny*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>tasks</code> argument was null.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array contained a null task, or was empty.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])\n  commentId: M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])\n  id: WhenAny``1(System.Threading.Tasks.Task{``0}[])\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: WhenAny<TResult>(Task<TResult>[])\n  nameWithType: Task.WhenAny<TResult>(Task<TResult>[])\n  fullName: Task.WhenAny<TResult>(Task<TResult>[])\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a task that will complete when any of the supplied tasks have completed.\n  remarks: The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the RanToCompletion state with its Result set to the first task to complete. This is true even if the first task to complete ended in the Canceled or Faulted state.\n  syntax:\n    content: public static System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>> WhenAny<TResult> (System.Threading.Tasks.Task<TResult>[] tasks);\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{TResult}[]\n      description: The tasks to wait on for completion.\n    typeParameters:\n    - id: TResult\n      description: The type of the completed task.\n    return:\n      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task{TResult}}\n      description: A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.\n  overload: System.Threading.Tasks.Task.WhenAny``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>tasks</code> argument was null.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array contained a null task, or was empty.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  commentId: M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  id: WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: WhenAny<TResult>(IEnumerable<Task<TResult>>)\n  nameWithType: Task.WhenAny<TResult>(IEnumerable<Task<TResult>>)\n  fullName: Task.WhenAny<TResult>(IEnumerable<Task<TResult>>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a task that will complete when any of the supplied tasks have completed.\n  remarks: The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the RanToCompletion state with its Result set to the first task to complete. This is true even if the first task to complete ended in the Canceled or Faulted state.\n  syntax:\n    content: public static System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>> WhenAny<TResult> (System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>> tasks);\n    parameters:\n    - id: tasks\n      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{TResult}}\n      description: The tasks to wait on for completion.\n    typeParameters:\n    - id: TResult\n      description: The type of the completed task.\n    return:\n      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task{TResult}}\n      description: A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.\n  overload: System.Threading.Tasks.Task.WhenAny``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>tasks</code> argument was `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>tasks</code> array contained a null task, or was empty.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.Yield\n  commentId: M:System.Threading.Tasks.Task.Yield\n  id: Yield\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: Yield()\n  nameWithType: Task.Yield()\n  fullName: Task.Yield()\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates an awaitable task that asynchronously yields back to the current context when awaited.\n  remarks: You can use `await Task.Yield();` in an asynchronous method to force the method to complete asynchronously. If there is a current synchronization context (<xref:System.Threading.SynchronizationContext> object), this will post the remainder of the method’s execution back to that context. However, the context will decide how to prioritize this work relative to other work that may be pending. The synchronization context that is present on a UI thread in most UI environments will often prioritize work posted to the context higher than input and rendering work. For this reason, do not rely on `await Task.Yield();` to keep a UI responsive.  For more information, see the entry [Useful Abstractions Enabled with ContinueWith](http://blogs.msdn.com/b/pfxteam/archive/2008/07/23/8768673.aspx) in the Parallel Programming with .NET blog.\n  syntax:\n    content: public static System.Runtime.CompilerServices.YieldAwaitable Yield ();\n    parameters: []\n    return:\n      type: System.Runtime.CompilerServices.YieldAwaitable\n      description: A context that, when awaited, will asynchronously transition back into the current context at the time of the await. If the current <xref href=\"System.Threading.SynchronizationContext\"></xref> is non-null, it is treated as the current context. Otherwise, the task scheduler that is associated with the currently executing task is treated as the current context.\n  overload: System.Threading.Tasks.Task.Yield*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle\n  commentId: P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle\n  id: System#IAsyncResult#AsyncWaitHandle\n  isEii: true\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: IAsyncResult.AsyncWaitHandle\n  nameWithType: Task.IAsyncResult.AsyncWaitHandle\n  fullName: Task.IAsyncResult.AsyncWaitHandle\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Gets a <xref href=\"System.Threading.WaitHandle\"></xref> that can be used to wait for the task to complete.\n  remarks: Using the wait functionality provided by <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName> is preferable to using <xref:System.IAsyncResult.AsyncWaitHandle%2A> for similar functionality. For more information, see the \"Waiting on Tasks\" section in [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Using TPL with Other Asynchronous Patterns](~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md).\n  syntax:\n    content: System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }\n    return:\n      type: System.Threading.WaitHandle\n      description: A <xref href=\"System.Threading.WaitHandle\"></xref> that can be used to wait for the task to complete.\n  overload: System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task\"></xref> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously\n  commentId: P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously\n  id: System#IAsyncResult#CompletedSynchronously\n  isEii: true\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  name: IAsyncResult.CompletedSynchronously\n  nameWithType: Task.IAsyncResult.CompletedSynchronously\n  fullName: Task.IAsyncResult.CompletedSynchronously\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Gets an indication of whether the operation completed synchronously.\n  syntax:\n    content: bool System.IAsyncResult.CompletedSynchronously { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the operation completed synchronously; otherwise, `false`.'\n  overload: System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Threading.Tasks.TaskCanceledException\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskCanceledException\n  nameWithType: TaskCanceledException\n  fullName: System.Threading.Tasks.TaskCanceledException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Threading.Tasks.TaskSchedulerException\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskSchedulerException\n  nameWithType: TaskSchedulerException\n  fullName: System.Threading.Tasks.TaskSchedulerException\n- uid: System.AggregateException\n  parent: System\n  isExternal: false\n  name: AggregateException\n  nameWithType: AggregateException\n  fullName: System.AggregateException\n- uid: System.OperationCanceledException\n  parent: System\n  isExternal: false\n  name: OperationCanceledException\n  nameWithType: OperationCanceledException\n  fullName: System.OperationCanceledException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Threading.Tasks.Task.#ctor(System.Action)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Task(Action)\n  nameWithType: Task.Task(Action)\n  fullName: Task.Task(Action)\n- uid: System.Action\n  parent: System\n  isExternal: false\n  name: Action\n  nameWithType: Action\n  fullName: System.Action\n- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Task(Action, CancellationToken)\n  nameWithType: Task.Task(Action, CancellationToken)\n  fullName: Task.Task(Action, CancellationToken)\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Task(Action, TaskCreationOptions)\n  nameWithType: Task.Task(Action, TaskCreationOptions)\n  fullName: Task.Task(Action, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskCreationOptions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskCreationOptions\n  nameWithType: TaskCreationOptions\n  fullName: System.Threading.Tasks.TaskCreationOptions\n- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Task(Action<Object>, Object)\n  nameWithType: Task.Task(Action<Object>, Object)\n  fullName: Task.Task(Action<Object>, Object)\n- uid: System.Action`1\n  name: Action<T>\n  nameWithType: Action<T>\n  fullName: System.Action<T>\n- uid: System.Action{System.Object}\n  parent: System\n  isExternal: false\n  name: Action<Object>\n  nameWithType: Action<Object>\n  fullName: System.Action<System.Object>\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Task(Action, CancellationToken, TaskCreationOptions)\n  nameWithType: Task.Task(Action, CancellationToken, TaskCreationOptions)\n  fullName: Task.Task(Action, CancellationToken, TaskCreationOptions)\n- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Task(Action<Object>, Object, CancellationToken)\n  nameWithType: Task.Task(Action<Object>, Object, CancellationToken)\n  fullName: Task.Task(Action<Object>, Object, CancellationToken)\n- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Task(Action<Object>, Object, TaskCreationOptions)\n  nameWithType: Task.Task(Action<Object>, Object, TaskCreationOptions)\n  fullName: Task.Task(Action<Object>, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Task(Action<Object>, Object, CancellationToken, TaskCreationOptions)\n  nameWithType: Task.Task(Action<Object>, Object, CancellationToken, TaskCreationOptions)\n  fullName: Task.Task(Action<Object>, Object, CancellationToken, TaskCreationOptions)\n- uid: System.Threading.Tasks.Task.AsyncState\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: AsyncState\n  nameWithType: Task.AsyncState\n  fullName: Task.AsyncState\n- uid: System.Threading.Tasks.Task.CompletedTask\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: CompletedTask\n  nameWithType: Task.CompletedTask\n  fullName: Task.CompletedTask\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ConfigureAwait(Boolean)\n  nameWithType: Task.ConfigureAwait(Boolean)\n  fullName: Task.ConfigureAwait(Boolean)\n- uid: System.Runtime.CompilerServices.ConfiguredTaskAwaitable\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: ConfiguredTaskAwaitable\n  nameWithType: ConfiguredTaskAwaitable\n  fullName: System.Runtime.CompilerServices.ConfiguredTaskAwaitable\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith(Action<Task,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task.ContinueWith(Action<Task,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: Task.ContinueWith(Action<Task,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Action`2\n  name: Action<T1,T2>\n  nameWithType: Action<T1,T2>\n  fullName: System.Action<T1,T2>\n- uid: System.Action{System.Threading.Tasks.Task,System.Object}\n  parent: System\n  isExternal: false\n  name: Action<Task,Object>\n  nameWithType: Action<Task,Object>\n  fullName: System.Action<System.Threading.Tasks.Task,System.Object>\n  spec.csharp:\n  - uid: System.Action`2\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskContinuationOptions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskContinuationOptions\n  nameWithType: TaskContinuationOptions\n  fullName: System.Threading.Tasks.TaskContinuationOptions\n- uid: System.Threading.Tasks.TaskScheduler\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskScheduler\n  nameWithType: TaskScheduler\n  fullName: System.Threading.Tasks.TaskScheduler\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task.ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: Task.ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Action{System.Threading.Tasks.Task}\n  parent: System\n  isExternal: false\n  name: Action<Task>\n  nameWithType: Action<Task>\n  fullName: System.Action<System.Threading.Tasks.Task>\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith(Action<Task,Object>, Object, TaskScheduler)\n  nameWithType: Task.ContinueWith(Action<Task,Object>, Object, TaskScheduler)\n  fullName: Task.ContinueWith(Action<Task,Object>, Object, TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith(Action<Task,Object>, Object, TaskContinuationOptions)\n  nameWithType: Task.ContinueWith(Action<Task,Object>, Object, TaskContinuationOptions)\n  fullName: Task.ContinueWith(Action<Task,Object>, Object, TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith(Action<Task,Object>, Object, CancellationToken)\n  nameWithType: Task.ContinueWith(Action<Task,Object>, Object, CancellationToken)\n  fullName: Task.ContinueWith(Action<Task,Object>, Object, CancellationToken)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith(Action<Task,Object>, Object)\n  nameWithType: Task.ContinueWith(Action<Task,Object>, Object)\n  fullName: Task.ContinueWith(Action<Task,Object>, Object)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith(Action<Task>, TaskContinuationOptions)\n  nameWithType: Task.ContinueWith(Action<Task>, TaskContinuationOptions)\n  fullName: Task.ContinueWith(Action<Task>, TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith(Action<Task>, CancellationToken)\n  nameWithType: Task.ContinueWith(Action<Task>, CancellationToken)\n  fullName: Task.ContinueWith(Action<Task>, CancellationToken)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith(Action<Task>)\n  nameWithType: Task.ContinueWith(Action<Task>)\n  fullName: Task.ContinueWith(Action<Task>)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith(Action<Task>, TaskScheduler)\n  nameWithType: Task.ContinueWith(Action<Task>, TaskScheduler)\n  fullName: Task.ContinueWith(Action<Task>, TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskContinuationOptions)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskContinuationOptions)\n  fullName: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task`1\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n- uid: System.Func`3\n  name: Func<T1,T2,TResult>\n  nameWithType: Func<T1,T2,TResult>\n  fullName: System.Func<T1,T2,TResult>\n- uid: TResult\n  name: TResult\n  nameWithType: TResult\n  fullName: TResult\n- uid: System.Func{System.Threading.Tasks.Task,System.Object,TResult}\n  parent: System\n  isExternal: false\n  name: Func<Task,Object,TResult>\n  nameWithType: Func<Task,Object,TResult>\n  fullName: System.Func<System.Threading.Tasks.Task,System.Object,TResult>\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith<TResult>(Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: Task.ContinueWith<TResult>(Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Func`2\n  name: Func<T,TResult>\n  nameWithType: Func<T,TResult>\n  fullName: System.Func<T,TResult>\n- uid: System.Func{System.Threading.Tasks.Task,TResult}\n  parent: System\n  isExternal: false\n  name: Func<Task,TResult>\n  nameWithType: Func<Task,TResult>\n  fullName: System.Func<System.Threading.Tasks.Task,TResult>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskScheduler)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskScheduler)\n  fullName: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken)\n  fullName: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith<TResult>(Func<Task,Object,TResult>, Object)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object)\n  fullName: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith<TResult>(Func<Task,TResult>, TaskContinuationOptions)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,TResult>, TaskContinuationOptions)\n  fullName: Task.ContinueWith<TResult>(Func<Task,TResult>, TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith<TResult>(Func<Task,TResult>, CancellationToken)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,TResult>, CancellationToken)\n  fullName: Task.ContinueWith<TResult>(Func<Task,TResult>, CancellationToken)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith<TResult>(Func<Task,TResult>)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,TResult>)\n  fullName: Task.ContinueWith<TResult>(Func<Task,TResult>)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith<TResult>(Func<Task,TResult>, TaskScheduler)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,TResult>, TaskScheduler)\n  fullName: Task.ContinueWith<TResult>(Func<Task,TResult>, TaskScheduler)\n- uid: System.Threading.Tasks.Task.CreationOptions\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: CreationOptions\n  nameWithType: Task.CreationOptions\n  fullName: Task.CreationOptions\n- uid: System.Threading.Tasks.Task.CurrentId\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: CurrentId\n  nameWithType: Task.CurrentId\n  fullName: Task.CurrentId\n- uid: System.Nullable`1\n  name: Nullable<T>\n  nameWithType: Nullable<T>\n  fullName: System.Nullable<T>\n- uid: System.Int32\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Nullable{System.Int32}\n  parent: System\n  isExternal: false\n  name: Nullable<Int32>\n  nameWithType: Nullable<Int32>\n  fullName: System.Nullable<System.Int32>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Delay(TimeSpan, CancellationToken)\n  nameWithType: Task.Delay(TimeSpan, CancellationToken)\n  fullName: Task.Delay(TimeSpan, CancellationToken)\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Delay(Int32, CancellationToken)\n  nameWithType: Task.Delay(Int32, CancellationToken)\n  fullName: Task.Delay(Int32, CancellationToken)\n- uid: System.Threading.Tasks.Task.Delay(System.Int32)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Delay(Int32)\n  nameWithType: Task.Delay(Int32)\n  fullName: Task.Delay(Int32)\n- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Delay(TimeSpan)\n  nameWithType: Task.Delay(TimeSpan)\n  fullName: Task.Delay(TimeSpan)\n- uid: System.Threading.Tasks.Task.Dispose\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Dispose()\n  nameWithType: Task.Dispose()\n  fullName: Task.Dispose()\n- uid: System.Threading.Tasks.Task.Dispose(System.Boolean)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: Task.Dispose(Boolean)\n  fullName: Task.Dispose(Boolean)\n- uid: System.Threading.Tasks.Task.Exception\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Exception\n  nameWithType: Task.Exception\n  fullName: Task.Exception\n- uid: System.Threading.Tasks.Task.Factory\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Factory\n  nameWithType: Task.Factory\n  fullName: Task.Factory\n- uid: System.Threading.Tasks.TaskFactory\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskFactory\n  nameWithType: TaskFactory\n  fullName: System.Threading.Tasks.TaskFactory\n- uid: System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: FromCanceled(CancellationToken)\n  nameWithType: Task.FromCanceled(CancellationToken)\n  fullName: Task.FromCanceled(CancellationToken)\n- uid: System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: FromCanceled<TResult>(CancellationToken)\n  nameWithType: Task.FromCanceled<TResult>(CancellationToken)\n  fullName: Task.FromCanceled<TResult>(CancellationToken)\n- uid: System.Threading.Tasks.Task.FromException(System.Exception)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: FromException(Exception)\n  nameWithType: Task.FromException(Exception)\n  fullName: Task.FromException(Exception)\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Threading.Tasks.Task.FromException``1(System.Exception)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: FromException<TResult>(Exception)\n  nameWithType: Task.FromException<TResult>(Exception)\n  fullName: Task.FromException<TResult>(Exception)\n- uid: System.Threading.Tasks.Task.FromResult``1(``0)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: FromResult<TResult>(TResult)\n  nameWithType: Task.FromResult<TResult>(TResult)\n  fullName: Task.FromResult<TResult>(TResult)\n- uid: System.Threading.Tasks.Task.GetAwaiter\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: GetAwaiter()\n  nameWithType: Task.GetAwaiter()\n  fullName: Task.GetAwaiter()\n- uid: System.Runtime.CompilerServices.TaskAwaiter\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: TaskAwaiter\n  nameWithType: TaskAwaiter\n  fullName: System.Runtime.CompilerServices.TaskAwaiter\n- uid: System.Threading.Tasks.Task.Id\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Id\n  nameWithType: Task.Id\n  fullName: Task.Id\n- uid: System.Threading.Tasks.Task.IsCanceled\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: IsCanceled\n  nameWithType: Task.IsCanceled\n  fullName: Task.IsCanceled\n- uid: System.Threading.Tasks.Task.IsCompleted\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: IsCompleted\n  nameWithType: Task.IsCompleted\n  fullName: Task.IsCompleted\n- uid: System.Threading.Tasks.Task.IsCompletedSuccessfully\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: IsCompletedSuccessfully\n  nameWithType: Task.IsCompletedSuccessfully\n  fullName: Task.IsCompletedSuccessfully\n- uid: System.Threading.Tasks.Task.IsFaulted\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: IsFaulted\n  nameWithType: Task.IsFaulted\n  fullName: Task.IsFaulted\n- uid: System.Threading.Tasks.Task.Run(System.Action)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Run(Action)\n  nameWithType: Task.Run(Action)\n  fullName: Task.Run(Action)\n- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Run(Func<Task>)\n  nameWithType: Task.Run(Func<Task>)\n  fullName: Task.Run(Func<Task>)\n- uid: System.Func`1\n  name: Func<TResult>\n  nameWithType: Func<TResult>\n  fullName: System.Func<TResult>\n- uid: System.Func{System.Threading.Tasks.Task}\n  parent: System\n  isExternal: false\n  name: Func<Task>\n  nameWithType: Func<Task>\n  fullName: System.Func<System.Threading.Tasks.Task>\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Run(Action, CancellationToken)\n  nameWithType: Task.Run(Action, CancellationToken)\n  fullName: Task.Run(Action, CancellationToken)\n- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Run(Func<Task>, CancellationToken)\n  nameWithType: Task.Run(Func<Task>, CancellationToken)\n  fullName: Task.Run(Func<Task>, CancellationToken)\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Run<TResult>(Func<TResult>, CancellationToken)\n  nameWithType: Task.Run<TResult>(Func<TResult>, CancellationToken)\n  fullName: Task.Run<TResult>(Func<TResult>, CancellationToken)\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Run<TResult>(Func<Task<TResult>>, CancellationToken)\n  nameWithType: Task.Run<TResult>(Func<Task<TResult>>, CancellationToken)\n  fullName: Task.Run<TResult>(Func<Task<TResult>>, CancellationToken)\n- uid: System.Func{System.Threading.Tasks.Task{TResult}}\n  parent: System\n  isExternal: false\n  name: Func<Task<TResult>>\n  nameWithType: Func<Task<TResult>>\n  fullName: System.Func<System.Threading.Tasks.Task<TResult>>\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Run<TResult>(Func<Task<TResult>>)\n  nameWithType: Task.Run<TResult>(Func<Task<TResult>>)\n  fullName: Task.Run<TResult>(Func<Task<TResult>>)\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{``0})\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Run<TResult>(Func<TResult>)\n  nameWithType: Task.Run<TResult>(Func<TResult>)\n  fullName: Task.Run<TResult>(Func<TResult>)\n- uid: System.Threading.Tasks.Task.RunSynchronously\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: RunSynchronously()\n  nameWithType: Task.RunSynchronously()\n  fullName: Task.RunSynchronously()\n- uid: System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: RunSynchronously(TaskScheduler)\n  nameWithType: Task.RunSynchronously(TaskScheduler)\n  fullName: Task.RunSynchronously(TaskScheduler)\n- uid: System.Threading.Tasks.Task.Start\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Start()\n  nameWithType: Task.Start()\n  fullName: Task.Start()\n- uid: System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Start(TaskScheduler)\n  nameWithType: Task.Start(TaskScheduler)\n  fullName: Task.Start(TaskScheduler)\n- uid: System.Threading.Tasks.Task.Status\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Status\n  nameWithType: Task.Status\n  fullName: Task.Status\n- uid: System.Threading.Tasks.TaskStatus\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskStatus\n  nameWithType: TaskStatus\n  fullName: System.Threading.Tasks.TaskStatus\n- uid: System.Threading.Tasks.Task.Wait(System.TimeSpan)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Wait(TimeSpan)\n  nameWithType: Task.Wait(TimeSpan)\n  fullName: Task.Wait(TimeSpan)\n- uid: System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Wait(Int32, CancellationToken)\n  nameWithType: Task.Wait(Int32, CancellationToken)\n  fullName: Task.Wait(Int32, CancellationToken)\n- uid: System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Wait(CancellationToken)\n  nameWithType: Task.Wait(CancellationToken)\n  fullName: Task.Wait(CancellationToken)\n- uid: System.Threading.Tasks.Task.Wait(System.Int32)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Wait(Int32)\n  nameWithType: Task.Wait(Int32)\n  fullName: Task.Wait(Int32)\n- uid: System.Threading.Tasks.Task.Wait\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Wait()\n  nameWithType: Task.Wait()\n  fullName: Task.Wait()\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAll(Task[])\n  nameWithType: Task.WaitAll(Task[])\n  fullName: Task.WaitAll(Task[])\n- uid: System.Threading.Tasks.Task[]\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task[]\n  nameWithType: Task[]\n  fullName: System.Threading.Tasks.Task[]\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAll(Task[], Int32)\n  nameWithType: Task.WaitAll(Task[], Int32)\n  fullName: Task.WaitAll(Task[], Int32)\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAll(Task[], CancellationToken)\n  nameWithType: Task.WaitAll(Task[], CancellationToken)\n  fullName: Task.WaitAll(Task[], CancellationToken)\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAll(Task[], TimeSpan)\n  nameWithType: Task.WaitAll(Task[], TimeSpan)\n  fullName: Task.WaitAll(Task[], TimeSpan)\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAll(Task[], Int32, CancellationToken)\n  nameWithType: Task.WaitAll(Task[], Int32, CancellationToken)\n  fullName: Task.WaitAll(Task[], Int32, CancellationToken)\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAny(Task[], Int32, CancellationToken)\n  nameWithType: Task.WaitAny(Task[], Int32, CancellationToken)\n  fullName: Task.WaitAny(Task[], Int32, CancellationToken)\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAny(Task[], TimeSpan)\n  nameWithType: Task.WaitAny(Task[], TimeSpan)\n  fullName: Task.WaitAny(Task[], TimeSpan)\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAny(Task[], Int32)\n  nameWithType: Task.WaitAny(Task[], Int32)\n  fullName: Task.WaitAny(Task[], Int32)\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAny(Task[], CancellationToken)\n  nameWithType: Task.WaitAny(Task[], CancellationToken)\n  fullName: Task.WaitAny(Task[], CancellationToken)\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAny(Task[])\n  nameWithType: Task.WaitAny(Task[])\n  fullName: Task.WaitAny(Task[])\n- uid: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WhenAll(IEnumerable<Task>)\n  nameWithType: Task.WhenAll(IEnumerable<Task>)\n  fullName: Task.WhenAll(IEnumerable<Task>)\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Task>\n  nameWithType: IEnumerable<Task>\n  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WhenAll(Task[])\n  nameWithType: Task.WhenAll(Task[])\n  fullName: Task.WhenAll(Task[])\n- uid: System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WhenAll<TResult>(IEnumerable<Task<TResult>>)\n  nameWithType: Task.WhenAll<TResult>(IEnumerable<Task<TResult>>)\n  fullName: Task.WhenAll<TResult>(IEnumerable<Task<TResult>>)\n- uid: System.Threading.Tasks.Task{TResult[]}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<TResult[]>\n  nameWithType: Task<TResult[]>\n  fullName: System.Threading.Tasks.Task<TResult[]>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{TResult}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Task<TResult>>\n  nameWithType: IEnumerable<Task<TResult>>\n  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WhenAll<TResult>(Task<TResult>[])\n  nameWithType: Task.WhenAll<TResult>(Task<TResult>[])\n  fullName: Task.WhenAll<TResult>(Task<TResult>[])\n- uid: System.Threading.Tasks.Task{TResult}[]\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<TResult>[]\n  nameWithType: Task<TResult>[]\n  fullName: System.Threading.Tasks.Task<TResult>[]\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WhenAny(IEnumerable<Task>)\n  nameWithType: Task.WhenAny(IEnumerable<Task>)\n  fullName: Task.WhenAny(IEnumerable<Task>)\n- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<Task>\n  nameWithType: Task<Task>\n  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WhenAny(Task[])\n  nameWithType: Task.WhenAny(Task[])\n  fullName: Task.WhenAny(Task[])\n- uid: System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WhenAny<TResult>(Task<TResult>[])\n  nameWithType: Task.WhenAny<TResult>(Task<TResult>[])\n  fullName: Task.WhenAny<TResult>(Task<TResult>[])\n- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task{TResult}}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<Task<TResult>>\n  nameWithType: Task<Task<TResult>>\n  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WhenAny<TResult>(IEnumerable<Task<TResult>>)\n  nameWithType: Task.WhenAny<TResult>(IEnumerable<Task<TResult>>)\n  fullName: Task.WhenAny<TResult>(IEnumerable<Task<TResult>>)\n- uid: System.Threading.Tasks.Task.Yield\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Yield()\n  nameWithType: Task.Yield()\n  fullName: Task.Yield()\n- uid: System.Runtime.CompilerServices.YieldAwaitable\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: YieldAwaitable\n  nameWithType: YieldAwaitable\n  fullName: System.Runtime.CompilerServices.YieldAwaitable\n- uid: System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: IAsyncResult.AsyncWaitHandle\n  nameWithType: Task.IAsyncResult.AsyncWaitHandle\n  fullName: Task.IAsyncResult.AsyncWaitHandle\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandle\n  nameWithType: WaitHandle\n  fullName: System.Threading.WaitHandle\n- uid: System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: IAsyncResult.CompletedSynchronously\n  nameWithType: Task.IAsyncResult.CompletedSynchronously\n  fullName: Task.IAsyncResult.CompletedSynchronously\n- uid: System.Threading.Tasks.Task.Run*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Run\n  nameWithType: Task.Run\n  fullName: Task.Run\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.#ctor*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Task\n  nameWithType: Task.Task\n  fullName: Task.Task\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.AsyncState*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: AsyncState\n  nameWithType: Task.AsyncState\n  fullName: Task.AsyncState\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.CompletedTask*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: CompletedTask\n  nameWithType: Task.CompletedTask\n  fullName: Task.CompletedTask\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.ConfigureAwait*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ConfigureAwait\n  nameWithType: Task.ConfigureAwait\n  fullName: Task.ConfigureAwait\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.ContinueWith*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith\n  nameWithType: Task.ContinueWith\n  fullName: Task.ContinueWith\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.ContinueWith``1*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith<TResult>\n  nameWithType: Task.ContinueWith<TResult>\n  fullName: Task.ContinueWith<TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.CreationOptions*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: CreationOptions\n  nameWithType: Task.CreationOptions\n  fullName: Task.CreationOptions\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.CurrentId*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: CurrentId\n  nameWithType: Task.CurrentId\n  fullName: Task.CurrentId\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.Delay*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Delay\n  nameWithType: Task.Delay\n  fullName: Task.Delay\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.Dispose*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Dispose\n  nameWithType: Task.Dispose\n  fullName: Task.Dispose\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.Exception*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Exception\n  nameWithType: Task.Exception\n  fullName: Task.Exception\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.Factory*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Factory\n  nameWithType: Task.Factory\n  fullName: Task.Factory\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.FromCanceled*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: FromCanceled\n  nameWithType: Task.FromCanceled\n  fullName: Task.FromCanceled\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.FromCanceled``1*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: FromCanceled<TResult>\n  nameWithType: Task.FromCanceled<TResult>\n  fullName: Task.FromCanceled<TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.FromException*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: FromException\n  nameWithType: Task.FromException\n  fullName: Task.FromException\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.FromException``1*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: FromException<TResult>\n  nameWithType: Task.FromException<TResult>\n  fullName: Task.FromException<TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.FromResult``1*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: FromResult<TResult>\n  nameWithType: Task.FromResult<TResult>\n  fullName: Task.FromResult<TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.GetAwaiter*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: GetAwaiter\n  nameWithType: Task.GetAwaiter\n  fullName: Task.GetAwaiter\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.Id*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Id\n  nameWithType: Task.Id\n  fullName: Task.Id\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.IsCanceled*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: IsCanceled\n  nameWithType: Task.IsCanceled\n  fullName: Task.IsCanceled\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.IsCompleted*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: IsCompleted\n  nameWithType: Task.IsCompleted\n  fullName: Task.IsCompleted\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.IsCompletedSuccessfully*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: IsCompletedSuccessfully\n  nameWithType: Task.IsCompletedSuccessfully\n  fullName: Task.IsCompletedSuccessfully\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.IsFaulted*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: IsFaulted\n  nameWithType: Task.IsFaulted\n  fullName: Task.IsFaulted\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.Run``1*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Run<TResult>\n  nameWithType: Task.Run<TResult>\n  fullName: Task.Run<TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.RunSynchronously*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: RunSynchronously\n  nameWithType: Task.RunSynchronously\n  fullName: Task.RunSynchronously\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.Start*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Start\n  nameWithType: Task.Start\n  fullName: Task.Start\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.Status*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Status\n  nameWithType: Task.Status\n  fullName: Task.Status\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.Wait*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Wait\n  nameWithType: Task.Wait\n  fullName: Task.Wait\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.WaitAll*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAll\n  nameWithType: Task.WaitAll\n  fullName: Task.WaitAll\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.WaitAny*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAny\n  nameWithType: Task.WaitAny\n  fullName: Task.WaitAny\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.WhenAll*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WhenAll\n  nameWithType: Task.WhenAll\n  fullName: Task.WhenAll\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.WhenAll``1*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WhenAll<TResult>\n  nameWithType: Task.WhenAll<TResult>\n  fullName: Task.WhenAll<TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.WhenAny*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WhenAny\n  nameWithType: Task.WhenAny\n  fullName: Task.WhenAny\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.WhenAny``1*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WhenAny<TResult>\n  nameWithType: Task.WhenAny<TResult>\n  fullName: Task.WhenAny<TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.Yield*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Yield\n  nameWithType: Task.Yield\n  fullName: Task.Yield\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: System.IAsyncResult.AsyncWaitHandle\n  nameWithType: Task.System.IAsyncResult.AsyncWaitHandle\n  fullName: Task.System.IAsyncResult.AsyncWaitHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously*\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: System.IAsyncResult.CompletedSynchronously\n  nameWithType: Task.System.IAsyncResult.CompletedSynchronously\n  fullName: Task.System.IAsyncResult.CompletedSynchronously\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Windows.Threading.TaskExtensions.DispatcherOperationWait(System.Threading.Tasks.Task)\n  parent: System.Windows.Threading.TaskExtensions\n  isExternal: false\n  name: DispatcherOperationWait(Task)\n  nameWithType: TaskExtensions.DispatcherOperationWait(Task)\n  fullName: TaskExtensions.DispatcherOperationWait(Task)\n- uid: System.Windows.Threading.TaskExtensions.DispatcherOperationWait(System.Threading.Tasks.Task,System.TimeSpan)\n  parent: System.Windows.Threading.TaskExtensions\n  isExternal: false\n  name: DispatcherOperationWait(Task, TimeSpan)\n  nameWithType: TaskExtensions.DispatcherOperationWait(Task, TimeSpan)\n  fullName: TaskExtensions.DispatcherOperationWait(Task, TimeSpan)\n- uid: System.Windows.Threading.TaskExtensions.IsDispatcherOperationTask(System.Threading.Tasks.Task)\n  parent: System.Windows.Threading.TaskExtensions\n  isExternal: false\n  name: IsDispatcherOperationTask(Task)\n  nameWithType: TaskExtensions.IsDispatcherOperationTask(Task)\n  fullName: TaskExtensions.IsDispatcherOperationTask(Task)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}