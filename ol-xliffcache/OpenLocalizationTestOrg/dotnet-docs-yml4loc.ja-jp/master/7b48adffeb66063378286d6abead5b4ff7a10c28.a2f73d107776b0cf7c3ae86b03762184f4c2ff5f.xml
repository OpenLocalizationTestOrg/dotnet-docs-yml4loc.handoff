{"nodes":[{"content":"The ManagementReferenceAttribute marks a class member, property or method parameter as a reference to another management object or class.  \n  \n Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries. The [MI APIs](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.","nodes":[{"pos":[0,137],"content":"The ManagementReferenceAttribute marks a class member, property or method parameter as a reference to another management object or class.","nodes":[{"content":"The ManagementReferenceAttribute marks a class member, property or method parameter as a reference to another management object or class.","pos":[0,137]}]},{"pos":[144,460],"content":"Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries. The [MI APIs](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.","nodes":[{"content":"Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.","pos":[0,193]},{"content":"The <bpt id=\"p1\">[</bpt>MI APIs<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx)</ept> should be used for all new development.","pos":[194,316],"source":" The [MI APIs](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx) should be used for all new development."}]}],"pos":[655,1120],"yaml":true},{"content":"You can use this attribute to create association classes as demonstrated in the following example.","nodes":[{"pos":[0,98],"content":"You can use this attribute to create association classes as demonstrated in the following example.","nodes":[{"content":"You can use this attribute to create association classes as demonstrated in the following example.","pos":[0,98]}]}],"pos":[1131,1230],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Management.ManagementReferenceAttribute\"></xref> class. This is the default constructor.","nodes":[{"pos":[0,141],"content":"Initializes a new instance of the <xref href=\"System.Management.ManagementReferenceAttribute\"></xref> class. This is the default constructor.","nodes":[{"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Management.ManagementReferenceAttribute\"&gt;&lt;/xref&gt;</ph> class.","pos":[0,108],"source":"Initializes a new instance of the <xref href=\"System.Management.ManagementReferenceAttribute\"></xref> class."},{"content":"This is the default constructor.","pos":[109,141]}]}],"pos":[10893,11035],"yaml":true},{"content":"Gets or sets the name of the referenced type.","nodes":[{"pos":[0,45],"content":"Gets or sets the name of the referenced type.","nodes":[{"content":"Gets or sets the name of the referenced type.","pos":[0,45]}]}],"pos":[12214,12260],"yaml":true},{"content":"The default type is object.","nodes":[{"pos":[0,27],"content":"The default type is object.","nodes":[{"content":"The default type is object.","pos":[0,27]}]}],"pos":[12271,12299],"yaml":true,"extradata":"MT"},{"content":"A string containing the name of the referenced type.","nodes":[{"pos":[0,52],"content":"A string containing the name of the referenced type.","nodes":[{"content":"A string containing the name of the referenced type.","pos":[0,52]}]}],"pos":[12412,12465],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Management.Instrumentation.ManagementReferenceAttribute\n  commentId: T:System.Management.Instrumentation.ManagementReferenceAttribute\n  id: ManagementReferenceAttribute\n  children:\n  - System.Management.Instrumentation.ManagementReferenceAttribute.#ctor\n  - System.Management.Instrumentation.ManagementReferenceAttribute.Type\n  langs:\n  - csharp\n  name: ManagementReferenceAttribute\n  nameWithType: ManagementReferenceAttribute\n  fullName: System.Management.Instrumentation.ManagementReferenceAttribute\n  type: Class\n  assemblies:\n  - System.Core\n  namespace: System.Management.Instrumentation\n  summary: \"The ManagementReferenceAttribute marks a class member, property or method parameter as a reference to another management object or class.  \\n  \\n Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries. The [MI APIs](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.\"\n  remarks: You can use this attribute to create association classes as demonstrated in the following example.\n  example:\n  - \"This example demonstrates how to use the <xref:System.Management.Instrumentation.ManagementReferenceAttribute> attribute together with the <xref:System.Management.Instrumentation.ManagementQualifierAttribute> to create an association WMI class that links two other WMI classes. The example is a decoupled provider that exposes three WMI classes in the root/assoc namespace. The first two classes, NumberPhonetic and NumberLetter, are linked by the last class, LetterPhonetic.  \\n  \\n To compile the example, you will need to include references to both System.Management.Instrumentation and System.Configuration.Install. You must run installutil.exe against the resulting executable and ensure that the program is running in order to use the implemented WMI classes.  \\n  \\n```  \\nusing System;  \\nusing System.Collections;  \\nusing System.Management.Instrumentation;  \\n  \\n[assembly: WmiConfiguration(\\\"root/assoc\\\", HostingModel = ManagementHostingModel.Decoupled)]  \\n  \\n[System.ComponentModel.RunInstaller(true)]  \\npublic class TheInstaller : DefaultManagementInstaller  \\n{ }  \\n  \\nnamespace AssocExample  \\n{  \\n    class Program  \\n    {  \\n        static void Main(string[] args)  \\n        {  \\n            InstrumentationManager.RegisterType(typeof(NumberPhonetic));  \\n            InstrumentationManager.RegisterType(typeof(NumberLetter));  \\n            InstrumentationManager.RegisterType(typeof(LetterPhonetic));  \\n  \\n            Console.WriteLine(\\\"Press enter to exit\\\");  \\n            Console.ReadLine();  \\n  \\n            InstrumentationManager.UnregisterType(typeof(NumberPhonetic));  \\n            InstrumentationManager.UnregisterType(typeof(NumberLetter));  \\n            InstrumentationManager.UnregisterType(typeof(LetterPhonetic));  \\n  \\n        }  \\n    }  \\n  \\n  [ManagementEntity]  \\n    public class NumberPhonetic  \\n    {  \\n        [ManagementKey]  \\n        public int Number;  \\n  \\n        [ManagementProbe]  \\n        public string Name;  \\n  \\n        [ManagementBind]  \\n        public NumberPhonetic(int Number)  \\n        {  \\n           this.Number = Number;  \\n           if(Number == 1)  \\n           {  \\n              Name = \\\"alpha\\\";  \\n           }  \\n           else if(Number == 2)  \\n           {  \\n              Name = \\\"bravo\\\";  \\n           }  \\n           else  \\n           {  \\n              throw new InstanceNotFoundException();  \\n           }  \\n        }  \\n  \\n        [ManagementEnumerator]  \\n        static public IEnumerable EnumerateInstances()  \\n        {  \\n            for (int i = 1; i < 3; i++)  \\n            {  \\n                yield return new NumberPhonetic(i);  \\n            }  \\n        }  \\n  \\n    }  \\n  \\n    [ManagementEntity]  \\n    public class NumberLetter  \\n    {  \\n        [ManagementKey]  \\n        public int Number;  \\n  \\n        [ManagementProbe]  \\n        public string Letter;  \\n  \\n        [ManagementBind]  \\n        public NumberLetter(int Number)  \\n        {  \\n           this.Number = Number;  \\n           if(Number == 1)  \\n           {  \\n              Letter = \\\"A\\\";  \\n           }  \\n           else if(Number == 2)  \\n           {  \\n              Letter = \\\"B\\\";  \\n           }  \\n           else  \\n           {  \\n              throw new InstanceNotFoundException();  \\n           }  \\n        }  \\n  \\n        [ManagementEnumerator]  \\n        static public IEnumerable EnumerateInstances()  \\n        {  \\n            for (int i = 1; i < 3; i++)  \\n            {  \\n                yield return new NumberLetter(i);  \\n            }  \\n        }  \\n  \\n    }  \\n  \\n    [ManagementEntity]  \\n    [ManagementQualifier(\\\"Association\\\", Flavor = ManagementQualifierFlavors.DisableOverride)]  \\n    public class LetterPhonetic  \\n    {  \\n        [ManagementReference(Type = \\\"NumberLetter\\\")]  \\n        [ManagementKey]  \\n        public string LetterNumber;  \\n  \\n        [ManagementReference(Type = \\\"NumberPhonetic\\\")]  \\n        [ManagementKey]  \\n        public string PhoneticNumber;  \\n  \\n        [ManagementEnumerator]  \\n        static public IEnumerable EnumerateInstances()  \\n        {  \\n            ArrayList insts = new ArrayList();  \\n            for (int i = 1; i < 3; i++)  \\n            {  \\n                LetterPhonetic inst = new LetterPhonetic();  \\n                inst.LetterNumber = \\\"Letter = \\\" + i;  \\n                inst.PhoneticNumber = \\\"Phonetic = \\\" + i;  \\n                insts.Add(inst);  \\n            }  \\n            return insts;  \\n        }  \\n  \\n    }  \\n  \\n}  \\n```\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter, AllowMultiple=false)]\n\n      public sealed class ManagementReferenceAttribute : Attribute\n  inheritance:\n  - System.Object\n  - System.Attribute\n  implements: []\n  inheritedMembers:\n  - System.Attribute.Equals(System.Object)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetHashCode\n  - System.Attribute.IsDefaultAttribute\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.Match(System.Object)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Attribute.TypeId\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.AttributeUsageAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management.Instrumentation/ManagementReferenceAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  manager: jillfra\n- uid: System.Management.Instrumentation.ManagementReferenceAttribute.#ctor\n  commentId: M:System.Management.Instrumentation.ManagementReferenceAttribute.#ctor\n  id: '#ctor'\n  parent: System.Management.Instrumentation.ManagementReferenceAttribute\n  langs:\n  - csharp\n  name: ManagementReferenceAttribute()\n  nameWithType: ManagementReferenceAttribute.ManagementReferenceAttribute()\n  fullName: ManagementReferenceAttribute.ManagementReferenceAttribute()\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Management.Instrumentation\n  summary: Initializes a new instance of the <xref href=\"System.Management.ManagementReferenceAttribute\"></xref> class. This is the default constructor.\n  syntax:\n    content: public ManagementReferenceAttribute ();\n    parameters: []\n  overload: System.Management.Instrumentation.ManagementReferenceAttribute.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management.Instrumentation/ManagementReferenceAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  manager: jillfra\n- uid: System.Management.Instrumentation.ManagementReferenceAttribute.Type\n  commentId: P:System.Management.Instrumentation.ManagementReferenceAttribute.Type\n  id: Type\n  parent: System.Management.Instrumentation.ManagementReferenceAttribute\n  langs:\n  - csharp\n  name: Type\n  nameWithType: ManagementReferenceAttribute.Type\n  fullName: ManagementReferenceAttribute.Type\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Management.Instrumentation\n  summary: Gets or sets the name of the referenced type.\n  remarks: The default type is object.\n  syntax:\n    content: public string Type { get; set; }\n    return:\n      type: System.String\n      description: A string containing the name of the referenced type.\n  overload: System.Management.Instrumentation.ManagementReferenceAttribute.Type*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management.Instrumentation/ManagementReferenceAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  manager: jillfra\nreferences:\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  nameWithType: Attribute\n  fullName: System.Attribute\n- uid: System.Management.Instrumentation.ManagementReferenceAttribute.#ctor\n  parent: System.Management.Instrumentation.ManagementReferenceAttribute\n  isExternal: false\n  name: ManagementReferenceAttribute()\n  nameWithType: ManagementReferenceAttribute.ManagementReferenceAttribute()\n  fullName: ManagementReferenceAttribute.ManagementReferenceAttribute()\n- uid: System.Management.Instrumentation.ManagementReferenceAttribute.Type\n  parent: System.Management.Instrumentation.ManagementReferenceAttribute\n  isExternal: false\n  name: Type\n  nameWithType: ManagementReferenceAttribute.Type\n  fullName: ManagementReferenceAttribute.Type\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Management.Instrumentation.ManagementReferenceAttribute.#ctor*\n  parent: System.Management.Instrumentation.ManagementReferenceAttribute\n  isExternal: false\n  name: ManagementReferenceAttribute\n  nameWithType: ManagementReferenceAttribute.ManagementReferenceAttribute\n  fullName: ManagementReferenceAttribute.ManagementReferenceAttribute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management.Instrumentation/ManagementReferenceAttribute.xml\n- uid: System.Management.Instrumentation.ManagementReferenceAttribute.Type*\n  parent: System.Management.Instrumentation.ManagementReferenceAttribute\n  isExternal: false\n  name: Type\n  nameWithType: ManagementReferenceAttribute.Type\n  fullName: ManagementReferenceAttribute.Type\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management.Instrumentation/ManagementReferenceAttribute.xml\n- uid: System.Attribute.Equals(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Attribute.Equals(Object)\n  fullName: Attribute.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Attribute.GetHashCode\n  parent: System.Attribute\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Attribute.GetHashCode()\n  fullName: Attribute.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type)\n  fullName: Attribute.GetCustomAttribute(Module, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type)\n  fullName: Attribute.GetCustomAttributes(Module, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module)\n  nameWithType: Attribute.GetCustomAttributes(Module)\n  fullName: Attribute.GetCustomAttributes(Module)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo)\n  fullName: Attribute.GetCustomAttributes(MemberInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly)\n  nameWithType: Attribute.GetCustomAttributes(Assembly)\n  fullName: Attribute.GetCustomAttributes(Assembly)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Attribute.IsDefaultAttribute\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefaultAttribute()\n  nameWithType: Attribute.IsDefaultAttribute()\n  fullName: Attribute.IsDefaultAttribute()\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Module, Type, Boolean)\n  fullName: Attribute.IsDefined(Module, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Assembly, Type, Boolean)\n  fullName: Attribute.IsDefined(Assembly, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type)\n  fullName: Attribute.IsDefined(MemberInfo, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type)\n  nameWithType: Attribute.IsDefined(Module, Type)\n  fullName: Attribute.IsDefined(Module, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type)\n  nameWithType: Attribute.IsDefined(Assembly, Type)\n  fullName: Attribute.IsDefined(Assembly, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type)\n  fullName: Attribute.IsDefined(ParameterInfo, Type)\n- uid: System.Attribute.Match(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Match(Object)\n  nameWithType: Attribute.Match(Object)\n  fullName: Attribute.Match(Object)\n- uid: System.Attribute.TypeId\n  parent: System.Attribute\n  isExternal: false\n  name: TypeId\n  nameWithType: Attribute.TypeId\n  fullName: Attribute.TypeId\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfoCount(UInt32)\n  nameWithType: Attribute._Attribute.GetTypeInfoCount(UInt32)\n  fullName: Attribute._Attribute.GetTypeInfoCount(UInt32)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n"}