{"nodes":[{"content":"Specifies the transaction locking behavior for the connection.","nodes":[{"pos":[0,62],"content":"Specifies the transaction locking behavior for the connection.","nodes":[{"content":"Specifies the transaction locking behavior for the connection.","pos":[0,62]}]}],"pos":[678,741],"yaml":true},{"content":"The <xref:System.Data.IsolationLevel> values are used by a .NET Framework data provider when performing a transaction.  \n  \n The <xref:System.Data.IsolationLevel> remains in effect until explicitly changed, but it can be changed at any time. The new value is used at execution time, not parse time. If changed during a transaction, the expected behavior of the server is to apply the new locking level to all statements remaining.","nodes":[{"pos":[0,118],"content":"The <xref:System.Data.IsolationLevel> values are used by a .NET Framework data provider when performing a transaction.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.IsolationLevel&gt;</ph> values are used by a .NET Framework data provider when performing a transaction.","pos":[0,118],"source":"The <xref:System.Data.IsolationLevel> values are used by a .NET Framework data provider when performing a transaction."}]},{"pos":[125,430],"content":"The <xref:System.Data.IsolationLevel> remains in effect until explicitly changed, but it can be changed at any time. The new value is used at execution time, not parse time. If changed during a transaction, the expected behavior of the server is to apply the new locking level to all statements remaining.","nodes":[{"content":"The <xref:System.Data.IsolationLevel> remains in effect until explicitly changed, but it can be changed at any time. The new value is used at execution time, not parse time. If changed during a transaction, the expected behavior of the server is to apply the new locking level to all statements remaining.","pos":[0,305],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.IsolationLevel&gt;</ph> remains in effect until explicitly changed, but it can be changed at any time.","pos":[0,116],"source":"The <xref:System.Data.IsolationLevel> remains in effect until explicitly changed, but it can be changed at any time."},{"content":"The new value is used at execution time, not parse time.","pos":[117,173]},{"content":"If changed during a transaction, the expected behavior of the server is to apply the new locking level to all statements remaining.","pos":[174,305]}]}]}],"pos":[752,1187],"yaml":true,"extradata":"MT"},{"content":"The pending changes from more highly isolated transactions cannot be overwritten.","nodes":[{"pos":[0,81],"content":"The pending changes from more highly isolated transactions cannot be overwritten.","nodes":[{"content":"The pending changes from more highly isolated transactions cannot be overwritten.","pos":[0,81]}]}],"pos":[6811,6893],"yaml":true},{"content":"Shared locks are held while the data is being read to avoid dirty reads, but the data can be changed before the end of the transaction, resulting in non-repeatable reads or phantom data.","nodes":[{"pos":[0,186],"content":"Shared locks are held while the data is being read to avoid dirty reads, but the data can be changed before the end of the transaction, resulting in non-repeatable reads or phantom data.","nodes":[{"content":"Shared locks are held while the data is being read to avoid dirty reads, but the data can be changed before the end of the transaction, resulting in non-repeatable reads or phantom data.","pos":[0,186]}]}],"pos":[8110,8297],"yaml":true},{"content":"A dirty read is possible, meaning that no shared locks are issued and no exclusive locks are honored.","nodes":[{"pos":[0,101],"content":"A dirty read is possible, meaning that no shared locks are issued and no exclusive locks are honored.","nodes":[{"content":"A dirty read is possible, meaning that no shared locks are issued and no exclusive locks are honored.","pos":[0,101]}]}],"pos":[9534,9636],"yaml":true},{"content":"Locks are placed on all data that is used in a query, preventing other users from updating the data. Prevents non-repeatable reads but phantom rows are still possible.","nodes":[{"pos":[0,167],"content":"Locks are placed on all data that is used in a query, preventing other users from updating the data. Prevents non-repeatable reads but phantom rows are still possible.","nodes":[{"content":"Locks are placed on all data that is used in a query, preventing other users from updating the data. Prevents non-repeatable reads but phantom rows are still possible.","pos":[0,167],"nodes":[{"content":"Locks are placed on all data that is used in a query, preventing other users from updating the data.","pos":[0,100]},{"content":"Prevents non-repeatable reads but phantom rows are still possible.","pos":[101,167]}]}]}],"pos":[10869,11037],"yaml":true},{"content":"A range lock is placed on the <xref href=\"System.Data.DataSet\"></xref>, preventing other users from updating or inserting rows into the dataset until the transaction is complete.","nodes":[{"pos":[0,178],"content":"A range lock is placed on the <ph id=\"ph1\">&lt;xref href=\"System.Data.DataSet\"&gt;&lt;/xref&gt;</ph>, preventing other users from updating or inserting rows into the dataset until the transaction is complete.","source":"A range lock is placed on the <xref href=\"System.Data.DataSet\"></xref>, preventing other users from updating or inserting rows into the dataset until the transaction is complete."}],"pos":[12257,12436],"yaml":true},{"content":"Reduces blocking by storing a version of data that one application can read while another is modifying the same data. Indicates that from one transaction you cannot see changes made in other transactions, even if you requery.","nodes":[{"pos":[0,225],"content":"Reduces blocking by storing a version of data that one application can read while another is modifying the same data. Indicates that from one transaction you cannot see changes made in other transactions, even if you requery.","nodes":[{"content":"Reduces blocking by storing a version of data that one application can read while another is modifying the same data. Indicates that from one transaction you cannot see changes made in other transactions, even if you requery.","pos":[0,225],"nodes":[{"content":"Reduces blocking by storing a version of data that one application can read while another is modifying the same data.","pos":[0,117]},{"content":"Indicates that from one transaction you cannot see changes made in other transactions, even if you requery.","pos":[118,225]}]}]}],"pos":[13630,13856],"yaml":true},{"content":"A different isolation level than the one specified is being used, but the level cannot be determined.","nodes":[{"pos":[0,101],"content":"A different isolation level than the one specified is being used, but the level cannot be determined.","nodes":[{"content":"A different isolation level than the one specified is being used, but the level cannot be determined.","pos":[0,101]}]}],"pos":[15064,15166],"yaml":true},{"content":"When using <xref:System.Data.Odbc.OdbcTransaction>, if you do not set <xref:System.Data.IsolationLevel> or you set <xref:System.Data.IsolationLevel> to `Unspecified`, the transaction executes according to the isolation level that is determined by the driver that is being used.","nodes":[{"pos":[0,277],"content":"When using <ph id=\"ph1\">&lt;xref:System.Data.Odbc.OdbcTransaction&gt;</ph>, if you do not set <ph id=\"ph2\">&lt;xref:System.Data.IsolationLevel&gt;</ph> or you set <ph id=\"ph3\">&lt;xref:System.Data.IsolationLevel&gt;</ph> to <ph id=\"ph4\">`Unspecified`</ph>, the transaction executes according to the isolation level that is determined by the driver that is being used.","source":"When using <xref:System.Data.Odbc.OdbcTransaction>, if you do not set <xref:System.Data.IsolationLevel> or you set <xref:System.Data.IsolationLevel> to `Unspecified`, the transaction executes according to the isolation level that is determined by the driver that is being used."}],"pos":[15177,15455],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.IsolationLevel\n  commentId: T:System.Data.IsolationLevel\n  id: IsolationLevel\n  children:\n  - System.Data.IsolationLevel.Chaos\n  - System.Data.IsolationLevel.ReadCommitted\n  - System.Data.IsolationLevel.ReadUncommitted\n  - System.Data.IsolationLevel.RepeatableRead\n  - System.Data.IsolationLevel.Serializable\n  - System.Data.IsolationLevel.Snapshot\n  - System.Data.IsolationLevel.Unspecified\n  langs:\n  - csharp\n  name: IsolationLevel\n  nameWithType: IsolationLevel\n  fullName: System.Data.IsolationLevel\n  type: Enum\n  assemblies:\n  - System.Data.Common\n  - System.Data\n  - netstandard\n  namespace: System.Data\n  summary: Specifies the transaction locking behavior for the connection.\n  remarks: \"The <xref:System.Data.IsolationLevel> values are used by a .NET Framework data provider when performing a transaction.  \\n  \\n The <xref:System.Data.IsolationLevel> remains in effect until explicitly changed, but it can be changed at any time. The new value is used at execution time, not parse time. If changed during a transaction, the expected behavior of the server is to apply the new locking level to all statements remaining.\"\n  example:\n  - \"This application demonstrates how to use <xref:System.Data.IsolationLevel> in <xref:System.Data.Common.DbTransaction>. The sample will demonstrate which of the following behaviors are allowed in the different isolation levels:  \\n  \\n-   Dirty reads.  \\n  \\n-   Non-repeatable reads.  \\n  \\n-   Phantoms.  \\n  \\n This application will execute in the following isolation levels:  \\n  \\n-   ReadUncommitted  \\n  \\n-   ReadCommitted  \\n  \\n-   RepeatableRead  \\n  \\n-   Serializable  \\n  \\n-   Snapshot  \\n  \\n The PhantomReadThreads class demonstrates if the specific transaction allows the Phantom Read behavior. If the transaction allows the behavior, the threads will operate in the following order:  \\n  \\n-   In first thread, select the products(All).  \\n  \\n-   In the second thread, insert a new product.  \\n  \\n-   Commit the transaction in second thread.  \\n  \\n-   Select the products again.  \\n  \\n-   Commit the transaction in first thread.  \\n  \\n If the transaction allows the behavior, the two Select operations will get the different results.  \\n  \\n The NonrepeatableReadThreads class demonstrates if the specific transaction allows the Nonrepeatable Read behavior. If the transaction allows the behavior, the threads will operate in the following order:  \\n  \\n-   In first thread, select the product(ProductId=1).  \\n  \\n-   In the second thread, update the Quantity value(ProductId=1).  \\n  \\n-   Commit the transaction in second thread.  \\n  \\n-   Select the product again.  \\n  \\n-   Commit the transaction in first thread.  \\n  \\n If the transaction allows the behavior, the two Select operations will get the different results.  \\n  \\n The ExchangeValuesThreads class demonstrates the difference between the Serializable and Snapshot transaction. For the the Serializable transaction, threads will operate in the following order:  \\n  \\n-   In first thread, get the Price of product(ProductId=2) and store in the variable.  \\n  \\n-   In first thread, update the Price of product(ProductId=1) with the price of product(ProductId=2).  \\n  \\n-   Commit the transaction in first thread.  \\n  \\n-   In second thread, get the Price of product(ProductId=1) and store in the variable.  \\n  \\n-   In second thread, update the Price of product(ProductId=2) with the price of product(ProductId=1).  \\n  \\n-   Commit the transaction in second thread.  \\n  \\n Now the values of the Price(ProductId=1 and ProductId=2) are as same as the original Price of Product(ProductId=2).  \\n  \\n For the Snapshot transaction, threads will operate in the following order:  \\n  \\n-   In first thread, get the Price of product(ProductId=2) and store in the variable;  \\n  \\n-   In first thread, update the Price of product(ProductId=1) with the price of product(ProductId=2).  \\n  \\n-   In second thread, get the Price of product(ProductId=1) from the snapshot and store in the variable.  \\n  \\n-   In second thread, update the Price of product(ProductId=2) with the price of product(ProductId=1).  \\n  \\n-   Commit the transaction in second thread.  \\n  \\n-   Commit the transaction in first thread.  \\n  \\n Now exchange the Price of products(ProductId=1 and ProductId=2).  \\n  \\n The DirtyReadThreads class demonstrates if the specific transaction allows the Dirty Read behavior. If the transaction allows the behavior, the threads will operate in the following order:  \\n  \\n-   In first thread, begin a transaction and add the Quantity value(ProductId=1).  \\n  \\n-   In the second thread, read the Quantity value and add the value again.  \\n  \\n-   Commit the transaction in second thread.  \\n  \\n-   Roll back the transaction in first thread.  \\n  \\n If the transaction allows the behavior, the Quantity value will be added twice.  \\n  \\n C# and Visual Basic projects with this code sample can be found on [Developer Code Samples](http://code.msdn.microsoft.com/site/search?query=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Value=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Type=SearchText&ac=4).  \\n  \\n [!code-csharp[system_data_IsolationLevel#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/system_data_isolationlevel/cs/source.cs#1)]\\n [!code-vb[system_data_IsolationLevel#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/system_data_isolationlevel/vb/source.vb#1)]\"\n  syntax:\n    content: public enum IsolationLevel\n  inheritance:\n  - System.Object\n  - System.ValueType\n  - System.Enum\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/IsolationLevel.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.IsolationLevel.Chaos\n  commentId: F:System.Data.IsolationLevel.Chaos\n  id: Chaos\n  parent: System.Data.IsolationLevel\n  langs:\n  - csharp\n  name: Chaos\n  nameWithType: IsolationLevel.Chaos\n  fullName: IsolationLevel.Chaos\n  type: Field\n  assemblies:\n  - System.Data.Common\n  - System.Data\n  - netstandard\n  namespace: System.Data\n  summary: The pending changes from more highly isolated transactions cannot be overwritten.\n  syntax:\n    content: Chaos\n    return:\n      type: System.Data.IsolationLevel\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/IsolationLevel.xml\n- uid: System.Data.IsolationLevel.ReadCommitted\n  commentId: F:System.Data.IsolationLevel.ReadCommitted\n  id: ReadCommitted\n  parent: System.Data.IsolationLevel\n  langs:\n  - csharp\n  name: ReadCommitted\n  nameWithType: IsolationLevel.ReadCommitted\n  fullName: IsolationLevel.ReadCommitted\n  type: Field\n  assemblies:\n  - System.Data.Common\n  - System.Data\n  - netstandard\n  namespace: System.Data\n  summary: Shared locks are held while the data is being read to avoid dirty reads, but the data can be changed before the end of the transaction, resulting in non-repeatable reads or phantom data.\n  syntax:\n    content: ReadCommitted\n    return:\n      type: System.Data.IsolationLevel\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/IsolationLevel.xml\n- uid: System.Data.IsolationLevel.ReadUncommitted\n  commentId: F:System.Data.IsolationLevel.ReadUncommitted\n  id: ReadUncommitted\n  parent: System.Data.IsolationLevel\n  langs:\n  - csharp\n  name: ReadUncommitted\n  nameWithType: IsolationLevel.ReadUncommitted\n  fullName: IsolationLevel.ReadUncommitted\n  type: Field\n  assemblies:\n  - System.Data.Common\n  - System.Data\n  - netstandard\n  namespace: System.Data\n  summary: A dirty read is possible, meaning that no shared locks are issued and no exclusive locks are honored.\n  syntax:\n    content: ReadUncommitted\n    return:\n      type: System.Data.IsolationLevel\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/IsolationLevel.xml\n- uid: System.Data.IsolationLevel.RepeatableRead\n  commentId: F:System.Data.IsolationLevel.RepeatableRead\n  id: RepeatableRead\n  parent: System.Data.IsolationLevel\n  langs:\n  - csharp\n  name: RepeatableRead\n  nameWithType: IsolationLevel.RepeatableRead\n  fullName: IsolationLevel.RepeatableRead\n  type: Field\n  assemblies:\n  - System.Data.Common\n  - System.Data\n  - netstandard\n  namespace: System.Data\n  summary: Locks are placed on all data that is used in a query, preventing other users from updating the data. Prevents non-repeatable reads but phantom rows are still possible.\n  syntax:\n    content: RepeatableRead\n    return:\n      type: System.Data.IsolationLevel\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/IsolationLevel.xml\n- uid: System.Data.IsolationLevel.Serializable\n  commentId: F:System.Data.IsolationLevel.Serializable\n  id: Serializable\n  parent: System.Data.IsolationLevel\n  langs:\n  - csharp\n  name: Serializable\n  nameWithType: IsolationLevel.Serializable\n  fullName: IsolationLevel.Serializable\n  type: Field\n  assemblies:\n  - System.Data.Common\n  - System.Data\n  - netstandard\n  namespace: System.Data\n  summary: A range lock is placed on the <xref href=\"System.Data.DataSet\"></xref>, preventing other users from updating or inserting rows into the dataset until the transaction is complete.\n  syntax:\n    content: Serializable\n    return:\n      type: System.Data.IsolationLevel\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/IsolationLevel.xml\n- uid: System.Data.IsolationLevel.Snapshot\n  commentId: F:System.Data.IsolationLevel.Snapshot\n  id: Snapshot\n  parent: System.Data.IsolationLevel\n  langs:\n  - csharp\n  name: Snapshot\n  nameWithType: IsolationLevel.Snapshot\n  fullName: IsolationLevel.Snapshot\n  type: Field\n  assemblies:\n  - System.Data.Common\n  - System.Data\n  - netstandard\n  namespace: System.Data\n  summary: Reduces blocking by storing a version of data that one application can read while another is modifying the same data. Indicates that from one transaction you cannot see changes made in other transactions, even if you requery.\n  syntax:\n    content: Snapshot\n    return:\n      type: System.Data.IsolationLevel\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/IsolationLevel.xml\n- uid: System.Data.IsolationLevel.Unspecified\n  commentId: F:System.Data.IsolationLevel.Unspecified\n  id: Unspecified\n  parent: System.Data.IsolationLevel\n  langs:\n  - csharp\n  name: Unspecified\n  nameWithType: IsolationLevel.Unspecified\n  fullName: IsolationLevel.Unspecified\n  type: Field\n  assemblies:\n  - System.Data.Common\n  - System.Data\n  - netstandard\n  namespace: System.Data\n  summary: A different isolation level than the one specified is being used, but the level cannot be determined.\n  remarks: When using <xref:System.Data.Odbc.OdbcTransaction>, if you do not set <xref:System.Data.IsolationLevel> or you set <xref:System.Data.IsolationLevel> to `Unspecified`, the transaction executes according to the isolation level that is determined by the driver that is being used.\n  syntax:\n    content: Unspecified\n    return:\n      type: System.Data.IsolationLevel\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/IsolationLevel.xml\nreferences:\n- uid: System.Enum\n  parent: System\n  isExternal: false\n  name: Enum\n  nameWithType: Enum\n  fullName: System.Enum\n- uid: System.Data.IsolationLevel.Chaos\n  parent: System.Data.IsolationLevel\n  isExternal: false\n  name: Chaos\n  nameWithType: IsolationLevel.Chaos\n  fullName: IsolationLevel.Chaos\n- uid: System.Data.IsolationLevel\n  parent: System.Data\n  isExternal: false\n  name: IsolationLevel\n  nameWithType: IsolationLevel\n  fullName: System.Data.IsolationLevel\n- uid: System.Data.IsolationLevel.ReadCommitted\n  parent: System.Data.IsolationLevel\n  isExternal: false\n  name: ReadCommitted\n  nameWithType: IsolationLevel.ReadCommitted\n  fullName: IsolationLevel.ReadCommitted\n- uid: System.Data.IsolationLevel.ReadUncommitted\n  parent: System.Data.IsolationLevel\n  isExternal: false\n  name: ReadUncommitted\n  nameWithType: IsolationLevel.ReadUncommitted\n  fullName: IsolationLevel.ReadUncommitted\n- uid: System.Data.IsolationLevel.RepeatableRead\n  parent: System.Data.IsolationLevel\n  isExternal: false\n  name: RepeatableRead\n  nameWithType: IsolationLevel.RepeatableRead\n  fullName: IsolationLevel.RepeatableRead\n- uid: System.Data.IsolationLevel.Serializable\n  parent: System.Data.IsolationLevel\n  isExternal: false\n  name: Serializable\n  nameWithType: IsolationLevel.Serializable\n  fullName: IsolationLevel.Serializable\n- uid: System.Data.IsolationLevel.Snapshot\n  parent: System.Data.IsolationLevel\n  isExternal: false\n  name: Snapshot\n  nameWithType: IsolationLevel.Snapshot\n  fullName: IsolationLevel.Snapshot\n- uid: System.Data.IsolationLevel.Unspecified\n  parent: System.Data.IsolationLevel\n  isExternal: false\n  name: Unspecified\n  nameWithType: IsolationLevel.Unspecified\n  fullName: IsolationLevel.Unspecified\n"}