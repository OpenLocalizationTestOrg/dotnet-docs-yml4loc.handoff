{"nodes":[{"content":"Represents a service that reports situational object-property relationships for markup extension evaluation.","nodes":[{"pos":[0,108],"content":"Represents a service that reports situational object-property relationships for markup extension evaluation.","nodes":[{"content":"Represents a service that reports situational object-property relationships for markup extension evaluation.","pos":[0,108]}]}],"pos":[532,641],"yaml":true},{"content":"<xref:System.Windows.Markup.IProvideValueTarget> represents a service that reports information regarding the object-property structure surrounding where a value converter is invoked.  \n  \n Type converters and markup extensions can query for <xref:System.Windows.Markup.IProvideValueTarget> as a service on the service context that is provided by a XAML object writer, when the XAML object writer invokes value conversion behavior. For more information, see [Type Converters and Markup Extensions for XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md) and [Service Contexts Available to Type Converters and Markup Extensions](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md).  \n  \n For markup extensions specifically, a scenario where <xref:System.Windows.Markup.IProvideValueTarget> is useful is to determine the validity of your markup extension's situational usage. For example, your markup extension might implement a value deferral mechanism, but using that mechanism might only be appropriate if the target object is capable of using other components of your deferral mechanism at run time. You could check the type system characteristics of the object returned as <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> and make sure that object supports your deferral technique. If so, your markup extension returns a value, and if not, your markup extension throws an exception that will be picked up as an inner exception by a XAML object writer. A similar scenario is assuring that a particular property supports a capability, by checking type system characteristics of the <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A>.  \n  \n Although the API name <xref:System.Windows.Markup.IProvideValueTarget> might imply an association with <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A?displayProperty=fullName>, the information reported by <xref:System.Windows.Markup.IProvideValueTarget> can also be useful to a <xref:System.ComponentModel.TypeConverter> or <xref:System.Windows.Markup.ValueSerializer>. A <xref:System.ComponentModel.TypeConverter> or <xref:System.Windows.Markup.ValueSerializer> typically have more context than a markup extension because they are dedicated to a particular target type or target property, and thus the situational validity is usually predictable in the type system. However, other scenarios exist. The following is a list of some scenarios that might be implemented by either a type converter or a markup extension:  \n  \n-   Get <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> to read instance values of other properties on that object. Note that your handling here might need to be robust for unset values, because the processing order of XAML members on the target object can be nondeterministic.  \n  \n-   Get <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> to read type-level metadata, or to verify that required interfaces are implemented by the type.  \n  \n-   Get <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> to read property metadata.  \n  \n One scenario is to use <xref:System.Windows.Markup.IProvideValueTarget> information to limit which objects or properties are permitted to be set by your markup extension.  \n  \n Before attempting to use the service, make sure that the service itself is not `null` when returned by the relevant service provider parameter you are using for context.  \n  \n> [!IMPORTANT]\n>  When using the service, it is particularly important not to modify the object referenced by the <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> property, or other objects referenced by that object. For WPF specifically, these changes could cause unexpected changes that would invalidate the WPF property system.  \n  \n> [!NOTE]\n>  Do not use the type of <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> to determine which precise type a markup extension or type converter should return. That is not a best practice. Your return type should be consistent with attributing (<xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> for markup extensions) or patterns (class name of the type converter).  \n  \n In previous versions of the .NET Framework, this interface existed in the WPF-specific assembly WindowsBase. In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.IProvideValueTarget> is in the System.Xaml assembly. For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  \n  \n## WPF Usage Notes  \n This service supports framework features such as binding on a dependency property.  \n  \n In WPF, the service represented by <xref:System.Windows.Markup.IProvideValueTarget> can return objects and properties for situations where the value to return from a markup extension or type converter depends on context.  \n  \n <xref:System.Windows.Markup.IProvideValueTarget> is leveraged heavily in the internal implementation of <xref:System.Windows.Data.BindingBase>, the class that implements the binding mechanism for dependency properties in WPF.  \n  \n A default internal service provider for WPF implements <xref:System.Windows.Markup.IProvideValueTarget> for usage by a custom markup extension or type converter. The object and property reported by <xref:System.Windows.Markup.IProvideValueTarget> can only be set by the internal WPF service. Going beyond this definition of how <xref:System.Windows.Markup.IProvideValueTarget> operates would require defining your own service provider for markup extension and type converter usages that implements at the very least the <xref:System.Windows.Markup.IProvideValueTarget> and <xref:System.Windows.Markup.IXamlTypeResolver> services, and that is an advanced scenario that is not described here.  \n  \n A null value for <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> or <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> does not necessarily mean that a markup extension or type converter cannot act, although that depends on your implementation. An example case where the values from <xref:System.Windows.Markup.IProvideValueTarget> are null even if the service is available is if your markup extension is nested within another markup extension, such as a <xref:System.Windows.Data.Binding>. An implementation that relies on <xref:System.Windows.Markup.IProvideValueTarget> should always check for null values if only for the purpose of throwing a specific exception, if that is your intended design.","nodes":[{"pos":[0,182],"content":"<xref:System.Windows.Markup.IProvideValueTarget> represents a service that reports information regarding the object-property structure surrounding where a value converter is invoked.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> represents a service that reports information regarding the object-property structure surrounding where a value converter is invoked.","pos":[0,182],"source":"<xref:System.Windows.Markup.IProvideValueTarget> represents a service that reports information regarding the object-property structure surrounding where a value converter is invoked."}]},{"pos":[189,765],"content":"Type converters and markup extensions can query for <xref:System.Windows.Markup.IProvideValueTarget> as a service on the service context that is provided by a XAML object writer, when the XAML object writer invokes value conversion behavior. For more information, see [Type Converters and Markup Extensions for XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md) and [Service Contexts Available to Type Converters and Markup Extensions](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md).","nodes":[{"content":"Type converters and markup extensions can query for <ph id=\"ph1\">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> as a service on the service context that is provided by a XAML object writer, when the XAML object writer invokes value conversion behavior.","pos":[0,241],"source":"Type converters and markup extensions can query for <xref:System.Windows.Markup.IProvideValueTarget> as a service on the service context that is provided by a XAML object writer, when the XAML object writer invokes value conversion behavior."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Type Converters and Markup Extensions for XAML<ept id=\"p1\">](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)</ept> and <bpt id=\"p2\">[</bpt>Service Contexts Available to Type Converters and Markup Extensions<ept id=\"p2\">](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)</ept>.","pos":[242,576],"source":" For more information, see [Type Converters and Markup Extensions for XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md) and [Service Contexts Available to Type Converters and Markup Extensions](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)."}]},{"pos":[772,1751],"content":"For markup extensions specifically, a scenario where <xref:System.Windows.Markup.IProvideValueTarget> is useful is to determine the validity of your markup extension's situational usage. For example, your markup extension might implement a value deferral mechanism, but using that mechanism might only be appropriate if the target object is capable of using other components of your deferral mechanism at run time. You could check the type system characteristics of the object returned as <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> and make sure that object supports your deferral technique. If so, your markup extension returns a value, and if not, your markup extension throws an exception that will be picked up as an inner exception by a XAML object writer. A similar scenario is assuring that a particular property supports a capability, by checking type system characteristics of the <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A>.","nodes":[{"content":"For markup extensions specifically, a scenario where <xref:System.Windows.Markup.IProvideValueTarget> is useful is to determine the validity of your markup extension's situational usage. For example, your markup extension might implement a value deferral mechanism, but using that mechanism might only be appropriate if the target object is capable of using other components of your deferral mechanism at run time. You could check the type system characteristics of the object returned as <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> and make sure that object supports your deferral technique. If so, your markup extension returns a value, and if not, your markup extension throws an exception that will be picked up as an inner exception by a XAML object writer. A similar scenario is assuring that a particular property supports a capability, by checking type system characteristics of the <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A>.","pos":[0,979],"nodes":[{"content":"For markup extensions specifically, a scenario where <ph id=\"ph1\">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> is useful is to determine the validity of your markup extension's situational usage.","pos":[0,186],"source":"For markup extensions specifically, a scenario where <xref:System.Windows.Markup.IProvideValueTarget> is useful is to determine the validity of your markup extension's situational usage."},{"content":"For example, your markup extension might implement a value deferral mechanism, but using that mechanism might only be appropriate if the target object is capable of using other components of your deferral mechanism at run time.","pos":[187,414]},{"content":"You could check the type system characteristics of the object returned as <ph id=\"ph1\">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> and make sure that object supports your deferral technique.","pos":[415,613],"source":" You could check the type system characteristics of the object returned as <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> and make sure that object supports your deferral technique."},{"content":"If so, your markup extension returns a value, and if not, your markup extension throws an exception that will be picked up as an inner exception by a XAML object writer.","pos":[614,783]},{"content":"A similar scenario is assuring that a particular property supports a capability, by checking type system characteristics of the <ph id=\"ph1\">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph>.","pos":[784,979],"source":" A similar scenario is assuring that a particular property supports a capability, by checking type system characteristics of the <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A>."}]}]},{"pos":[1758,2587],"content":"Although the API name <xref:System.Windows.Markup.IProvideValueTarget> might imply an association with <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A?displayProperty=fullName>, the information reported by <xref:System.Windows.Markup.IProvideValueTarget> can also be useful to a <xref:System.ComponentModel.TypeConverter> or <xref:System.Windows.Markup.ValueSerializer>. A <xref:System.ComponentModel.TypeConverter> or <xref:System.Windows.Markup.ValueSerializer> typically have more context than a markup extension because they are dedicated to a particular target type or target property, and thus the situational validity is usually predictable in the type system. However, other scenarios exist. The following is a list of some scenarios that might be implemented by either a type converter or a markup extension:","nodes":[{"content":"Although the API name <xref:System.Windows.Markup.IProvideValueTarget> might imply an association with <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A?displayProperty=fullName>, the information reported by <xref:System.Windows.Markup.IProvideValueTarget> can also be useful to a <xref:System.ComponentModel.TypeConverter> or <xref:System.Windows.Markup.ValueSerializer>. A <xref:System.ComponentModel.TypeConverter> or <xref:System.Windows.Markup.ValueSerializer> typically have more context than a markup extension because they are dedicated to a particular target type or target property, and thus the situational validity is usually predictable in the type system. However, other scenarios exist. The following is a list of some scenarios that might be implemented by either a type converter or a markup extension:","pos":[0,829],"nodes":[{"content":"Although the API name <ph id=\"ph1\">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> might imply an association with <ph id=\"ph2\">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A?displayProperty=fullName&gt;</ph>, the information reported by <ph id=\"ph3\">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> can also be useful to a <ph id=\"ph4\">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> or <ph id=\"ph5\">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph>.","pos":[0,382],"source":"Although the API name <xref:System.Windows.Markup.IProvideValueTarget> might imply an association with <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A?displayProperty=fullName>, the information reported by <xref:System.Windows.Markup.IProvideValueTarget> can also be useful to a <xref:System.ComponentModel.TypeConverter> or <xref:System.Windows.Markup.ValueSerializer>."},{"content":"A <ph id=\"ph1\">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> typically have more context than a markup extension because they are dedicated to a particular target type or target property, and thus the situational validity is usually predictable in the type system.","pos":[383,679],"source":" A <xref:System.ComponentModel.TypeConverter> or <xref:System.Windows.Markup.ValueSerializer> typically have more context than a markup extension because they are dedicated to a particular target type or target property, and thus the situational validity is usually predictable in the type system."},{"content":"However, other scenarios exist.","pos":[680,711]},{"content":"The following is a list of some scenarios that might be implemented by either a type converter or a markup extension:","pos":[712,829]}]}]},{"pos":[2597,2887],"content":"Get <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> to read instance values of other properties on that object. Note that your handling here might need to be robust for unset values, because the processing order of XAML members on the target object can be nondeterministic.","nodes":[{"content":"Get <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> to read instance values of other properties on that object. Note that your handling here might need to be robust for unset values, because the processing order of XAML members on the target object can be nondeterministic.","pos":[0,290],"nodes":[{"content":"Get <ph id=\"ph1\">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> to read instance values of other properties on that object.","pos":[0,128],"source":"Get <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> to read instance values of other properties on that object."},{"content":"Note that your handling here might need to be robust for unset values, because the processing order of XAML members on the target object can be nondeterministic.","pos":[129,290]}]}]},{"pos":[2897,3061],"content":"Get <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> to read type-level metadata, or to verify that required interfaces are implemented by the type.","nodes":[{"content":"Get <ph id=\"ph1\">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> to read type-level metadata, or to verify that required interfaces are implemented by the type.","pos":[0,164],"source":"Get <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> to read type-level metadata, or to verify that required interfaces are implemented by the type."}]},{"pos":[3071,3168],"content":"Get <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> to read property metadata.","nodes":[{"content":"Get <ph id=\"ph1\">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph> to read property metadata.","pos":[0,97],"source":"Get <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> to read property metadata."}]},{"pos":[3175,3345],"content":"One scenario is to use <xref:System.Windows.Markup.IProvideValueTarget> information to limit which objects or properties are permitted to be set by your markup extension.","nodes":[{"content":"One scenario is to use <ph id=\"ph1\">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> information to limit which objects or properties are permitted to be set by your markup extension.","pos":[0,170],"source":"One scenario is to use <xref:System.Windows.Markup.IProvideValueTarget> information to limit which objects or properties are permitted to be set by your markup extension."}]},{"pos":[3352,3521],"content":"Before attempting to use the service, make sure that the service itself is not <ph id=\"ph1\">`null`</ph> when returned by the relevant service provider parameter you are using for context.","source":"Before attempting to use the service, make sure that the service itself is not `null` when returned by the relevant service provider parameter you are using for context."},{"pos":[3529,3873],"content":"[!IMPORTANT]\n When using the service, it is particularly important not to modify the object referenced by the <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> property, or other objects referenced by that object. For WPF specifically, these changes could cause unexpected changes that would invalidate the WPF property system.","leadings":["","> "],"nodes":[{"content":" When using the service, it is particularly important not to modify the object referenced by the <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> property, or other objects referenced by that object. For WPF specifically, these changes could cause unexpected changes that would invalidate the WPF property system.","pos":[13,342],"nodes":[{"content":"When using the service, it is particularly important not to modify the object referenced by the <ph id=\"ph1\">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> property, or other objects referenced by that object.","pos":[1,215],"source":" When using the service, it is particularly important not to modify the object referenced by the <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> property, or other objects referenced by that object."},{"content":"For WPF specifically, these changes could cause unexpected changes that would invalidate the WPF property system.","pos":[216,329]}]}]},{"pos":[3881,4285],"content":"[!NOTE]\n Do not use the type of <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> to determine which precise type a markup extension or type converter should return. That is not a best practice. Your return type should be consistent with attributing (<xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> for markup extensions) or patterns (class name of the type converter).","leadings":["","> "],"nodes":[{"content":" Do not use the type of <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> to determine which precise type a markup extension or type converter should return. That is not a best practice. Your return type should be consistent with attributing (<xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> for markup extensions) or patterns (class name of the type converter).","pos":[8,402],"nodes":[{"content":"Do not use the type of <ph id=\"ph1\">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph> to determine which precise type a markup extension or type converter should return.","pos":[1,174],"source":" Do not use the type of <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> to determine which precise type a markup extension or type converter should return."},{"content":"That is not a best practice.","pos":[175,203]},{"content":"Your return type should be consistent with attributing (<ph id=\"ph1\">&lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;</ph> for markup extensions) or patterns (class name of the type converter).","pos":[204,394],"source":" Your return type should be consistent with attributing (<xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> for markup extensions) or patterns (class name of the type converter)."}]}]},{"pos":[4292,4683],"content":"In previous versions of the .NET Framework, this interface existed in the WPF-specific assembly WindowsBase. In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.IProvideValueTarget> is in the System.Xaml assembly. For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).","nodes":[{"content":"In previous versions of the .NET Framework, this interface existed in the WPF-specific assembly WindowsBase.","pos":[0,108]},{"content":"In <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> is in the System.Xaml assembly.","pos":[109,249],"source":" In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.IProvideValueTarget> is in the System.Xaml assembly."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Types Migrated from WPF to System.Xaml<ept id=\"p1\">](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept>.","pos":[250,391],"source":" For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)."}]},{"pos":[4692,4707],"content":"WPF Usage Notes","linkify":"WPF Usage Notes","nodes":[{"content":"WPF Usage Notes","pos":[0,15]}]},{"pos":[4711,4793],"content":"This service supports framework features such as binding on a dependency property.","nodes":[{"content":"This service supports framework features such as binding on a dependency property.","pos":[0,82]}]},{"pos":[4800,5020],"content":"In WPF, the service represented by <xref:System.Windows.Markup.IProvideValueTarget> can return objects and properties for situations where the value to return from a markup extension or type converter depends on context.","nodes":[{"content":"In WPF, the service represented by <ph id=\"ph1\">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> can return objects and properties for situations where the value to return from a markup extension or type converter depends on context.","pos":[0,220],"source":"In WPF, the service represented by <xref:System.Windows.Markup.IProvideValueTarget> can return objects and properties for situations where the value to return from a markup extension or type converter depends on context."}]},{"pos":[5027,5252],"content":"<xref:System.Windows.Markup.IProvideValueTarget> is leveraged heavily in the internal implementation of <xref:System.Windows.Data.BindingBase>, the class that implements the binding mechanism for dependency properties in WPF.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> is leveraged heavily in the internal implementation of <ph id=\"ph2\">&lt;xref:System.Windows.Data.BindingBase&gt;</ph>, the class that implements the binding mechanism for dependency properties in WPF.","pos":[0,225],"source":"<xref:System.Windows.Markup.IProvideValueTarget> is leveraged heavily in the internal implementation of <xref:System.Windows.Data.BindingBase>, the class that implements the binding mechanism for dependency properties in WPF."}]},{"pos":[5259,5949],"content":"A default internal service provider for WPF implements <xref:System.Windows.Markup.IProvideValueTarget> for usage by a custom markup extension or type converter. The object and property reported by <xref:System.Windows.Markup.IProvideValueTarget> can only be set by the internal WPF service. Going beyond this definition of how <xref:System.Windows.Markup.IProvideValueTarget> operates would require defining your own service provider for markup extension and type converter usages that implements at the very least the <xref:System.Windows.Markup.IProvideValueTarget> and <xref:System.Windows.Markup.IXamlTypeResolver> services, and that is an advanced scenario that is not described here.","nodes":[{"content":"A default internal service provider for WPF implements <xref:System.Windows.Markup.IProvideValueTarget> for usage by a custom markup extension or type converter. The object and property reported by <xref:System.Windows.Markup.IProvideValueTarget> can only be set by the internal WPF service. Going beyond this definition of how <xref:System.Windows.Markup.IProvideValueTarget> operates would require defining your own service provider for markup extension and type converter usages that implements at the very least the <xref:System.Windows.Markup.IProvideValueTarget> and <xref:System.Windows.Markup.IXamlTypeResolver> services, and that is an advanced scenario that is not described here.","pos":[0,690],"nodes":[{"content":"A default internal service provider for WPF implements <ph id=\"ph1\">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> for usage by a custom markup extension or type converter.","pos":[0,161],"source":"A default internal service provider for WPF implements <xref:System.Windows.Markup.IProvideValueTarget> for usage by a custom markup extension or type converter."},{"content":"The object and property reported by <ph id=\"ph1\">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> can only be set by the internal WPF service.","pos":[162,291],"source":" The object and property reported by <xref:System.Windows.Markup.IProvideValueTarget> can only be set by the internal WPF service."},{"content":"Going beyond this definition of how <ph id=\"ph1\">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> operates would require defining your own service provider for markup extension and type converter usages that implements at the very least the <ph id=\"ph2\">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Markup.IXamlTypeResolver&gt;</ph> services, and that is an advanced scenario that is not described here.","pos":[292,690],"source":" Going beyond this definition of how <xref:System.Windows.Markup.IProvideValueTarget> operates would require defining your own service provider for markup extension and type converter usages that implements at the very least the <xref:System.Windows.Markup.IProvideValueTarget> and <xref:System.Windows.Markup.IXamlTypeResolver> services, and that is an advanced scenario that is not described here."}]}]},{"pos":[5956,6688],"content":"A null value for <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> or <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> does not necessarily mean that a markup extension or type converter cannot act, although that depends on your implementation. An example case where the values from <xref:System.Windows.Markup.IProvideValueTarget> are null even if the service is available is if your markup extension is nested within another markup extension, such as a <xref:System.Windows.Data.Binding>. An implementation that relies on <xref:System.Windows.Markup.IProvideValueTarget> should always check for null values if only for the purpose of throwing a specific exception, if that is your intended design.","nodes":[{"content":"A null value for <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> or <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> does not necessarily mean that a markup extension or type converter cannot act, although that depends on your implementation. An example case where the values from <xref:System.Windows.Markup.IProvideValueTarget> are null even if the service is available is if your markup extension is nested within another markup extension, such as a <xref:System.Windows.Data.Binding>. An implementation that relies on <xref:System.Windows.Markup.IProvideValueTarget> should always check for null values if only for the purpose of throwing a specific exception, if that is your intended design.","pos":[0,732],"nodes":[{"content":"A null value for <ph id=\"ph1\">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> does not necessarily mean that a markup extension or type converter cannot act, although that depends on your implementation.","pos":[0,277],"source":"A null value for <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> or <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> does not necessarily mean that a markup extension or type converter cannot act, although that depends on your implementation."},{"content":"An example case where the values from <ph id=\"ph1\">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> are null even if the service is available is if your markup extension is nested within another markup extension, such as a <ph id=\"ph2\">&lt;xref:System.Windows.Data.Binding&gt;</ph>.","pos":[278,523],"source":" An example case where the values from <xref:System.Windows.Markup.IProvideValueTarget> are null even if the service is available is if your markup extension is nested within another markup extension, such as a <xref:System.Windows.Data.Binding>."},{"content":"An implementation that relies on <ph id=\"ph1\">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> should always check for null values if only for the purpose of throwing a specific exception, if that is your intended design.","pos":[524,732],"source":" An implementation that relies on <xref:System.Windows.Markup.IProvideValueTarget> should always check for null values if only for the purpose of throwing a specific exception, if that is your intended design."}]}]}],"pos":[652,7378],"yaml":true,"extradata":"MT"},{"content":"Gets the target object being reported.","nodes":[{"pos":[0,38],"content":"Gets the target object being reported.","nodes":[{"content":"Gets the target object being reported.","pos":[0,38]}]}],"pos":[8400,8439],"yaml":true},{"content":"The value returned by <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> is the actual reference, not a type system identifier or other identifier. The value can also be `null`; see <xref:System.Windows.Markup.IProvideValueTarget>.  \n  \n> [!IMPORTANT]\n>  When using the service, it is particularly important not to modify the object referenced by the <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> property, or other objects referenced by that object as properties that are not specifically the value-conversion case you are handling. For WPF specifically, changing the target object could cause unexpected changes that would invalidate the WPF  property system.","nodes":[{"pos":[0,245],"content":"The value returned by <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> is the actual reference, not a type system identifier or other identifier. The value can also be `null`; see <xref:System.Windows.Markup.IProvideValueTarget>.","nodes":[{"content":"The value returned by <ph id=\"ph1\">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> is the actual reference, not a type system identifier or other identifier.","pos":[0,161],"source":"The value returned by <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> is the actual reference, not a type system identifier or other identifier."},{"content":"The value can also be <ph id=\"ph1\">`null`</ph>; see <ph id=\"ph2\">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>.","pos":[162,245],"source":" The value can also be `null`; see <xref:System.Windows.Markup.IProvideValueTarget>."}]},{"pos":[253,694],"content":"[!IMPORTANT]\n When using the service, it is particularly important not to modify the object referenced by the <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> property, or other objects referenced by that object as properties that are not specifically the value-conversion case you are handling. For WPF specifically, changing the target object could cause unexpected changes that would invalidate the WPF  property system.","leadings":["","> "],"nodes":[{"content":" When using the service, it is particularly important not to modify the object referenced by the <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> property, or other objects referenced by that object as properties that are not specifically the value-conversion case you are handling. For WPF specifically, changing the target object could cause unexpected changes that would invalidate the WPF  property system.","pos":[13,439],"nodes":[{"content":"When using the service, it is particularly important not to modify the object referenced by the <ph id=\"ph1\">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph> property, or other objects referenced by that object as properties that are not specifically the value-conversion case you are handling.","pos":[1,298],"source":" When using the service, it is particularly important not to modify the object referenced by the <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> property, or other objects referenced by that object as properties that are not specifically the value-conversion case you are handling."},{"content":"For WPF specifically, changing the target object could cause unexpected changes that would invalidate the WPF  property system.","pos":[299,426]}]}]}],"pos":[8450,9150],"yaml":true,"extradata":"MT"},{"content":"The target object being reported.","nodes":[{"pos":[0,33],"content":"The target object being reported.","nodes":[{"content":"The target object being reported.","pos":[0,33]}]}],"pos":[9266,9300],"yaml":true},{"content":"Gets an identifier for the target property being reported.","nodes":[{"pos":[0,58],"content":"Gets an identifier for the target property being reported.","nodes":[{"content":"Gets an identifier for the target property being reported.","pos":[0,58]}]}],"pos":[10325,10384],"yaml":true},{"content":"The value can also be `null`; see <xref:System.Windows.Markup.IProvideValueTarget>.  \n  \n## WPF Usage Notes  \n For a dependency property, the default WPF service may return a <xref:System.Windows.DependencyProperty>, such that the markup extension or type converter can use metadata. Otherwise, the returned object can be a <xref:System.Reflection.PropertyInfo> for a CLR property.","nodes":[{"pos":[0,83],"content":"The value can also be <ph id=\"ph1\">`null`</ph>; see <ph id=\"ph2\">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph>.","source":"The value can also be `null`; see <xref:System.Windows.Markup.IProvideValueTarget>."},{"pos":[92,107],"content":"WPF Usage Notes","linkify":"WPF Usage Notes","nodes":[{"content":"WPF Usage Notes","pos":[0,15]}]},{"pos":[111,381],"content":"For a dependency property, the default WPF service may return a <xref:System.Windows.DependencyProperty>, such that the markup extension or type converter can use metadata. Otherwise, the returned object can be a <xref:System.Reflection.PropertyInfo> for a CLR property.","nodes":[{"content":"For a dependency property, the default WPF service may return a <xref:System.Windows.DependencyProperty>, such that the markup extension or type converter can use metadata. Otherwise, the returned object can be a <xref:System.Reflection.PropertyInfo> for a CLR property.","pos":[0,270],"nodes":[{"content":"For a dependency property, the default WPF service may return a <ph id=\"ph1\">&lt;xref:System.Windows.DependencyProperty&gt;</ph>, such that the markup extension or type converter can use metadata.","pos":[0,172],"source":"For a dependency property, the default WPF service may return a <xref:System.Windows.DependencyProperty>, such that the markup extension or type converter can use metadata."},{"content":"Otherwise, the returned object can be a <ph id=\"ph1\">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> for a CLR property.","pos":[173,270],"source":" Otherwise, the returned object can be a <xref:System.Reflection.PropertyInfo> for a CLR property."}]}]}],"pos":[10395,10782],"yaml":true,"extradata":"MT"},{"content":"An identifier for the target property being reported.","nodes":[{"pos":[0,53],"content":"An identifier for the target property being reported.","nodes":[{"content":"An identifier for the target property being reported.","pos":[0,53]}]}],"pos":[10900,10954],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Markup.IProvideValueTarget\n  commentId: T:System.Windows.Markup.IProvideValueTarget\n  id: IProvideValueTarget\n  children:\n  - System.Windows.Markup.IProvideValueTarget.TargetObject\n  - System.Windows.Markup.IProvideValueTarget.TargetProperty\n  langs:\n  - csharp\n  name: IProvideValueTarget\n  nameWithType: IProvideValueTarget\n  fullName: System.Windows.Markup.IProvideValueTarget\n  type: Interface\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Represents a service that reports situational object-property relationships for markup extension evaluation.\n  remarks: \"<xref:System.Windows.Markup.IProvideValueTarget> represents a service that reports information regarding the object-property structure surrounding where a value converter is invoked.  \\n  \\n Type converters and markup extensions can query for <xref:System.Windows.Markup.IProvideValueTarget> as a service on the service context that is provided by a XAML object writer, when the XAML object writer invokes value conversion behavior. For more information, see [Type Converters and Markup Extensions for XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md) and [Service Contexts Available to Type Converters and Markup Extensions](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md).  \\n  \\n For markup extensions specifically, a scenario where <xref:System.Windows.Markup.IProvideValueTarget> is useful is to determine the validity of your markup extension's situational usage. For example, your markup extension might implement a value deferral mechanism, but using that mechanism might only be appropriate if the target object is capable of using other components of your deferral mechanism at run time. You could check the type system characteristics of the object returned as <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> and make sure that object supports your deferral technique. If so, your markup extension returns a value, and if not, your markup extension throws an exception that will be picked up as an inner exception by a XAML object writer. A similar scenario is assuring that a particular property supports a capability, by checking type system characteristics of the <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A>.  \\n  \\n Although the API name <xref:System.Windows.Markup.IProvideValueTarget> might imply an association with <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A?displayProperty=fullName>, the information reported by <xref:System.Windows.Markup.IProvideValueTarget> can also be useful to a <xref:System.ComponentModel.TypeConverter> or <xref:System.Windows.Markup.ValueSerializer>. A <xref:System.ComponentModel.TypeConverter> or <xref:System.Windows.Markup.ValueSerializer> typically have more context than a markup extension because they are dedicated to a particular target type or target property, and thus the situational validity is usually predictable in the type system. However, other scenarios exist. The following is a list of some scenarios that might be implemented by either a type converter or a markup extension:  \\n  \\n-   Get <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> to read instance values of other properties on that object. Note that your handling here might need to be robust for unset values, because the processing order of XAML members on the target object can be nondeterministic.  \\n  \\n-   Get <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> to read type-level metadata, or to verify that required interfaces are implemented by the type.  \\n  \\n-   Get <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> to read property metadata.  \\n  \\n One scenario is to use <xref:System.Windows.Markup.IProvideValueTarget> information to limit which objects or properties are permitted to be set by your markup extension.  \\n  \\n Before attempting to use the service, make sure that the service itself is not `null` when returned by the relevant service provider parameter you are using for context.  \\n  \\n> [!IMPORTANT]\\n>  When using the service, it is particularly important not to modify the object referenced by the <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> property, or other objects referenced by that object. For WPF specifically, these changes could cause unexpected changes that would invalidate the WPF property system.  \\n  \\n> [!NOTE]\\n>  Do not use the type of <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> to determine which precise type a markup extension or type converter should return. That is not a best practice. Your return type should be consistent with attributing (<xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> for markup extensions) or patterns (class name of the type converter).  \\n  \\n In previous versions of the .NET Framework, this interface existed in the WPF-specific assembly WindowsBase. In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.IProvideValueTarget> is in the System.Xaml assembly. For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  \\n  \\n## WPF Usage Notes  \\n This service supports framework features such as binding on a dependency property.  \\n  \\n In WPF, the service represented by <xref:System.Windows.Markup.IProvideValueTarget> can return objects and properties for situations where the value to return from a markup extension or type converter depends on context.  \\n  \\n <xref:System.Windows.Markup.IProvideValueTarget> is leveraged heavily in the internal implementation of <xref:System.Windows.Data.BindingBase>, the class that implements the binding mechanism for dependency properties in WPF.  \\n  \\n A default internal service provider for WPF implements <xref:System.Windows.Markup.IProvideValueTarget> for usage by a custom markup extension or type converter. The object and property reported by <xref:System.Windows.Markup.IProvideValueTarget> can only be set by the internal WPF service. Going beyond this definition of how <xref:System.Windows.Markup.IProvideValueTarget> operates would require defining your own service provider for markup extension and type converter usages that implements at the very least the <xref:System.Windows.Markup.IProvideValueTarget> and <xref:System.Windows.Markup.IXamlTypeResolver> services, and that is an advanced scenario that is not described here.  \\n  \\n A null value for <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> or <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> does not necessarily mean that a markup extension or type converter cannot act, although that depends on your implementation. An example case where the values from <xref:System.Windows.Markup.IProvideValueTarget> are null even if the service is available is if your markup extension is nested within another markup extension, such as a <xref:System.Windows.Data.Binding>. An implementation that relies on <xref:System.Windows.Markup.IProvideValueTarget> should always check for null values if only for the purpose of throwing a specific exception, if that is your intended design.\"\n  syntax:\n    content: public interface IProvideValueTarget\n  implements: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/IProvideValueTarget.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\n- uid: System.Windows.Markup.IProvideValueTarget.TargetObject\n  commentId: P:System.Windows.Markup.IProvideValueTarget.TargetObject\n  id: TargetObject\n  parent: System.Windows.Markup.IProvideValueTarget\n  langs:\n  - csharp\n  name: TargetObject\n  nameWithType: IProvideValueTarget.TargetObject\n  fullName: IProvideValueTarget.TargetObject\n  type: Property\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Gets the target object being reported.\n  remarks: \"The value returned by <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> is the actual reference, not a type system identifier or other identifier. The value can also be `null`; see <xref:System.Windows.Markup.IProvideValueTarget>.  \\n  \\n> [!IMPORTANT]\\n>  When using the service, it is particularly important not to modify the object referenced by the <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> property, or other objects referenced by that object as properties that are not specifically the value-conversion case you are handling. For WPF specifically, changing the target object could cause unexpected changes that would invalidate the WPF  property system.\"\n  syntax:\n    content: public object TargetObject { get; }\n    return:\n      type: System.Object\n      description: The target object being reported.\n  overload: System.Windows.Markup.IProvideValueTarget.TargetObject*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/IProvideValueTarget.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\n- uid: System.Windows.Markup.IProvideValueTarget.TargetProperty\n  commentId: P:System.Windows.Markup.IProvideValueTarget.TargetProperty\n  id: TargetProperty\n  parent: System.Windows.Markup.IProvideValueTarget\n  langs:\n  - csharp\n  name: TargetProperty\n  nameWithType: IProvideValueTarget.TargetProperty\n  fullName: IProvideValueTarget.TargetProperty\n  type: Property\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Gets an identifier for the target property being reported.\n  remarks: \"The value can also be `null`; see <xref:System.Windows.Markup.IProvideValueTarget>.  \\n  \\n## WPF Usage Notes  \\n For a dependency property, the default WPF service may return a <xref:System.Windows.DependencyProperty>, such that the markup extension or type converter can use metadata. Otherwise, the returned object can be a <xref:System.Reflection.PropertyInfo> for a CLR property.\"\n  syntax:\n    content: public object TargetProperty { get; }\n    return:\n      type: System.Object\n      description: An identifier for the target property being reported.\n  overload: System.Windows.Markup.IProvideValueTarget.TargetProperty*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/IProvideValueTarget.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\nreferences:\n- uid: System.Windows.Markup.IProvideValueTarget.TargetObject\n  parent: System.Windows.Markup.IProvideValueTarget\n  isExternal: false\n  name: TargetObject\n  nameWithType: IProvideValueTarget.TargetObject\n  fullName: IProvideValueTarget.TargetObject\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Markup.IProvideValueTarget.TargetProperty\n  parent: System.Windows.Markup.IProvideValueTarget\n  isExternal: false\n  name: TargetProperty\n  nameWithType: IProvideValueTarget.TargetProperty\n  fullName: IProvideValueTarget.TargetProperty\n- uid: System.Windows.Markup.IProvideValueTarget.TargetObject*\n  parent: System.Windows.Markup.IProvideValueTarget\n  isExternal: false\n  name: TargetObject\n  nameWithType: IProvideValueTarget.TargetObject\n  fullName: IProvideValueTarget.TargetObject\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/IProvideValueTarget.xml\n- uid: System.Windows.Markup.IProvideValueTarget.TargetProperty*\n  parent: System.Windows.Markup.IProvideValueTarget\n  isExternal: false\n  name: TargetProperty\n  nameWithType: IProvideValueTarget.TargetProperty\n  fullName: IProvideValueTarget.TargetProperty\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/IProvideValueTarget.xml\n"}