{"nodes":[{"content":"Allows you to subscribe to incoming events. Each time a desired event is published to an event log, the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised, and the method that handles this event will be executed.","nodes":[{"pos":[0,268],"content":"Allows you to subscribe to incoming events. Each time a desired event is published to an event log, the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised, and the method that handles this event will be executed.","nodes":[{"content":"Allows you to subscribe to incoming events.","pos":[0,43]},{"content":"Each time a desired event is published to an event log, the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"&gt;&lt;/xref&gt;</ph> event is raised, and the method that handles this event will be executed.","pos":[44,268],"source":" Each time a desired event is published to an event log, the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised, and the method that handles this event will be executed."}]}],"pos":[1237,1506],"yaml":true},{"content":"The instances of this class are created from <xref:System.Diagnostics.Eventing.Reader.EventLogQuery> objects, which specify a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten> event is raised.","nodes":[{"pos":[0,336],"content":"The instances of this class are created from <xref:System.Diagnostics.Eventing.Reader.EventLogQuery> objects, which specify a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten> event is raised.","nodes":[{"content":"The instances of this class are created from <xref:System.Diagnostics.Eventing.Reader.EventLogQuery> objects, which specify a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten> event is raised.","pos":[0,336],"nodes":[{"content":"The instances of this class are created from <ph id=\"ph1\">&lt;xref:System.Diagnostics.Eventing.Reader.EventLogQuery&gt;</ph> objects, which specify a query for the event subscription.","pos":[0,159],"source":"The instances of this class are created from <xref:System.Diagnostics.Eventing.Reader.EventLogQuery> objects, which specify a query for the event subscription."},{"content":"When an event is logged that matches the criteria expressed in the query, then the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten&gt;</ph> event is raised.","pos":[160,336],"source":" When an event is logged that matches the criteria expressed in the query, then the <xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten> event is raised."}]}]}],"pos":[1517,1854],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"></xref> class by specifying an event query.","nodes":[{"pos":[0,141],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"&gt;&lt;/xref&gt;</ph> class by specifying an event query.","source":"Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"></xref> class by specifying an event query."}],"pos":[3641,3783],"yaml":true},{"content":"Specifies a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised.","nodes":[{"pos":[0,236],"content":"Specifies a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised.","nodes":[{"content":"Specifies a query for the event subscription.","pos":[0,45]},{"content":"When an event is logged that matches the criteria expressed in the query, then the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"&gt;&lt;/xref&gt;</ph> event is raised.","pos":[46,236],"source":" When an event is logged that matches the criteria expressed in the query, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised."}]}],"pos":[4009,4246],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"></xref> class by specifying the name or path to an event log.","nodes":[{"pos":[0,159],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"&gt;&lt;/xref&gt;</ph> class by specifying the name or path to an event log.","source":"Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"></xref> class by specifying the name or path to an event log."}],"pos":[5389,5549],"yaml":true},{"content":"The path or name of the event log monitor for events. If any event is logged in this event log, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised.","nodes":[{"pos":[0,212],"content":"The path or name of the event log monitor for events. If any event is logged in this event log, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised.","nodes":[{"content":"The path or name of the event log monitor for events.","pos":[0,53]},{"content":"If any event is logged in this event log, then the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"&gt;&lt;/xref&gt;</ph> event is raised.","pos":[54,212],"source":" If any event is logged in this event log, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised."}]}],"pos":[5686,5899],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"></xref> class by specifying an event query and a bookmark that is used as starting position for the query.","nodes":[{"pos":[0,204],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"&gt;&lt;/xref&gt;</ph> class by specifying an event query and a bookmark that is used as starting position for the query.","source":"Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"></xref> class by specifying an event query and a bookmark that is used as starting position for the query."}],"pos":[7360,7565],"yaml":true},{"content":"Specifies a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised.","nodes":[{"pos":[0,236],"content":"Specifies a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised.","nodes":[{"content":"Specifies a query for the event subscription.","pos":[0,45]},{"content":"When an event is logged that matches the criteria expressed in the query, then the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"&gt;&lt;/xref&gt;</ph> event is raised.","pos":[46,236],"source":" When an event is logged that matches the criteria expressed in the query, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised."}]}],"pos":[7850,8087],"yaml":true},{"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.","nodes":[{"pos":[0,182],"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.","nodes":[{"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.","pos":[0,182],"nodes":[{"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events.","pos":[0,92]},{"content":"Only events that have been logged after the bookmark event will be returned by the query.","pos":[93,182]}]}]}],"pos":[8186,8369],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"></xref> class by specifying an event query, a bookmark that is used as starting position for the query, and a Boolean value that determines whether to read the events that already exist in the event log.","nodes":[{"pos":[0,301],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"&gt;&lt;/xref&gt;</ph> class by specifying an event query, a bookmark that is used as starting position for the query, and a Boolean value that determines whether to read the events that already exist in the event log.","source":"Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"></xref> class by specifying an event query, a bookmark that is used as starting position for the query, and a Boolean value that determines whether to read the events that already exist in the event log."}],"pos":[9902,10204],"yaml":true},{"content":"Specifies a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised.","nodes":[{"pos":[0,236],"content":"Specifies a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised.","nodes":[{"content":"Specifies a query for the event subscription.","pos":[0,45]},{"content":"When an event is logged that matches the criteria expressed in the query, then the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"&gt;&lt;/xref&gt;</ph> event is raised.","pos":[46,236],"source":" When an event is logged that matches the criteria expressed in the query, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised."}]}],"pos":[10514,10751],"yaml":true},{"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.","nodes":[{"pos":[0,182],"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.","nodes":[{"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.","pos":[0,182],"nodes":[{"content":"The bookmark (placeholder) used as a starting position in the event log or stream of events.","pos":[0,92]},{"content":"Only events that have been logged after the bookmark event will be returned by the query.","pos":[93,182]}]}]}],"pos":[10850,11033],"yaml":true},{"content":"A Boolean value that determines whether to read the events that already exist in the event log. If this value is `true`, then the existing events are read and if this value is `false`, then the existing events are not read.","nodes":[{"pos":[0,223],"content":"A Boolean value that determines whether to read the events that already exist in the event log. If this value is `true`, then the existing events are read and if this value is `false`, then the existing events are not read.","nodes":[{"content":"A Boolean value that determines whether to read the events that already exist in the event log.","pos":[0,95]},{"content":"If this value is <ph id=\"ph1\">`true`</ph>, then the existing events are read and if this value is <ph id=\"ph2\">`false`</ph>, then the existing events are not read.","pos":[96,223],"source":" If this value is `true`, then the existing events are read and if this value is `false`, then the existing events are not read."}]}],"pos":[11108,11332],"yaml":true},{"content":"Releases all the resources used by this object.","nodes":[{"pos":[0,47],"content":"Releases all the resources used by this object.","nodes":[{"content":"Releases all the resources used by this object.","pos":[0,47]}]}],"pos":[12387,12435],"yaml":true},{"content":"Releases the unmanaged resources used by this object, and optionally releases the managed resources.","nodes":[{"pos":[0,100],"content":"Releases the unmanaged resources used by this object, and optionally releases the managed resources.","nodes":[{"content":"Releases the unmanaged resources used by this object, and optionally releases the managed resources.","pos":[0,100]}]}],"pos":[13627,13728],"yaml":true},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[13882,13985],"yaml":true},{"content":"Determines whether this object starts delivering events to the event delegate.","nodes":[{"pos":[0,78],"content":"Determines whether this object starts delivering events to the event delegate.","nodes":[{"content":"Determines whether this object starts delivering events to the event delegate.","pos":[0,78]}]}],"pos":[15055,15134],"yaml":true},{"content":"Returns `true` when this object can deliver events to the event delegate, and returns `false` when this object has stopped delivery.","nodes":[{"pos":[0,132],"content":"Returns <ph id=\"ph1\">`true`</ph> when this object can deliver events to the event delegate, and returns <ph id=\"ph2\">`false`</ph> when this object has stopped delivery.","source":"Returns `true` when this object can deliver events to the event delegate, and returns `false` when this object has stopped delivery."}],"pos":[15249,15382],"yaml":true},{"content":"Allows setting a delegate (event handler method) that gets called every time an event is published that matches the criteria specified in the event query for this object.","nodes":[{"pos":[0,170],"content":"Allows setting a delegate (event handler method) that gets called every time an event is published that matches the criteria specified in the event query for this object.","nodes":[{"content":"Allows setting a delegate (event handler method) that gets called every time an event is published that matches the criteria specified in the event query for this object.","pos":[0,170]}]}],"pos":[16498,16669],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  commentId: T:System.Diagnostics.Eventing.Reader.EventLogWatcher\n  id: EventLogWatcher\n  children:\n  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)\n  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)\n  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)\n  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)\n  - System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose\n  - System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)\n  - System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled\n  - System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\n  langs:\n  - csharp\n  name: EventLogWatcher\n  nameWithType: EventLogWatcher\n  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  type: Class\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Allows you to subscribe to incoming events. Each time a desired event is published to an event log, the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised, and the method that handles this event will be executed.\n  remarks: The instances of this class are created from <xref:System.Diagnostics.Eventing.Reader.EventLogQuery> objects, which specify a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten> event is raised.\n  example:\n  - 'For example code using this class, see [How to: Subscribe to Events in an Event Log](http://msdn.microsoft.com/en-us/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).'\n  syntax:\n    content: 'public class EventLogWatcher : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Eventing.Reader/EventLogWatcher.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: jgalasyn\n  manager: ghogen\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)\n  commentId: M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)\n  id: '#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)'\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  langs:\n  - csharp\n  name: EventLogWatcher(EventLogQuery)\n  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery)\n  fullName: EventLogWatcher.EventLogWatcher(EventLogQuery)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"></xref> class by specifying an event query.\n  syntax:\n    content: public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery);\n    parameters:\n    - id: eventQuery\n      type: System.Diagnostics.Eventing.Reader.EventLogQuery\n      description: Specifies a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised.\n  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Eventing.Reader/EventLogWatcher.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: jgalasyn\n  manager: ghogen\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)\n  commentId: M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  langs:\n  - csharp\n  name: EventLogWatcher(String)\n  nameWithType: EventLogWatcher.EventLogWatcher(String)\n  fullName: EventLogWatcher.EventLogWatcher(String)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"></xref> class by specifying the name or path to an event log.\n  syntax:\n    content: public EventLogWatcher (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The path or name of the event log monitor for events. If any event is logged in this event log, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised.\n  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Eventing.Reader/EventLogWatcher.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: jgalasyn\n  manager: ghogen\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)\n  commentId: M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)\n  id: '#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)'\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  langs:\n  - csharp\n  name: EventLogWatcher(EventLogQuery, EventBookmark)\n  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery, EventBookmark)\n  fullName: EventLogWatcher.EventLogWatcher(EventLogQuery, EventBookmark)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"></xref> class by specifying an event query and a bookmark that is used as starting position for the query.\n  syntax:\n    content: public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, System.Diagnostics.Eventing.Reader.EventBookmark bookmark);\n    parameters:\n    - id: eventQuery\n      type: System.Diagnostics.Eventing.Reader.EventLogQuery\n      description: Specifies a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised.\n    - id: bookmark\n      type: System.Diagnostics.Eventing.Reader.EventBookmark\n      description: The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.\n  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Eventing.Reader/EventLogWatcher.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: jgalasyn\n  manager: ghogen\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)\n  commentId: M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)\n  id: '#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)'\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  langs:\n  - csharp\n  name: EventLogWatcher(EventLogQuery, EventBookmark, Boolean)\n  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery, EventBookmark, Boolean)\n  fullName: EventLogWatcher.EventLogWatcher(EventLogQuery, EventBookmark, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher\"></xref> class by specifying an event query, a bookmark that is used as starting position for the query, and a Boolean value that determines whether to read the events that already exist in the event log.\n  syntax:\n    content: public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, System.Diagnostics.Eventing.Reader.EventBookmark bookmark, bool readExistingEvents);\n    parameters:\n    - id: eventQuery\n      type: System.Diagnostics.Eventing.Reader.EventLogQuery\n      description: Specifies a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <xref href=\"System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\"></xref> event is raised.\n    - id: bookmark\n      type: System.Diagnostics.Eventing.Reader.EventBookmark\n      description: The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.\n    - id: readExistingEvents\n      type: System.Boolean\n      description: A Boolean value that determines whether to read the events that already exist in the event log. If this value is `true`, then the existing events are read and if this value is `false`, then the existing events are not read.\n  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Eventing.Reader/EventLogWatcher.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: jgalasyn\n  manager: ghogen\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose\n  commentId: M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose\n  id: Dispose\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: EventLogWatcher.Dispose()\n  fullName: EventLogWatcher.Dispose()\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Releases all the resources used by this object.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Eventing.Reader/EventLogWatcher.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: jgalasyn\n  manager: ghogen\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)\n  commentId: M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: EventLogWatcher.Dispose(Boolean)\n  fullName: EventLogWatcher.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Releases the unmanaged resources used by this object, and optionally releases the managed resources.\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Eventing.Reader/EventLogWatcher.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: jgalasyn\n  manager: ghogen\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled\n  commentId: P:System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled\n  id: Enabled\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  langs:\n  - csharp\n  name: Enabled\n  nameWithType: EventLogWatcher.Enabled\n  fullName: EventLogWatcher.Enabled\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Determines whether this object starts delivering events to the event delegate.\n  syntax:\n    content: public bool Enabled { get; set; }\n    return:\n      type: System.Boolean\n      description: Returns `true` when this object can deliver events to the event delegate, and returns `false` when this object has stopped delivery.\n  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Eventing.Reader/EventLogWatcher.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: jgalasyn\n  manager: ghogen\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\n  commentId: E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\n  id: EventRecordWritten\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  langs:\n  - csharp\n  name: EventRecordWritten\n  nameWithType: EventLogWatcher.EventRecordWritten\n  fullName: EventLogWatcher.EventRecordWritten\n  type: Event\n  assemblies:\n  - System.Core\n  namespace: System.Diagnostics.Eventing.Reader\n  summary: Allows setting a delegate (event handler method) that gets called every time an event is published that matches the criteria specified in the event query for this object.\n  remarks: ''\n  example:\n  - 'For example code using this class, see [How to: Subscribe to Events in an Event Log](http://msdn.microsoft.com/en-us/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).'\n  syntax:\n    content: public event EventHandler<System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs> EventRecordWritten;\n    return:\n      type: System.EventHandler{System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Eventing.Reader/EventLogWatcher.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: jgalasyn\n  manager: ghogen\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  isExternal: false\n  name: EventLogWatcher(EventLogQuery)\n  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery)\n  fullName: EventLogWatcher.EventLogWatcher(EventLogQuery)\n- uid: System.Diagnostics.Eventing.Reader.EventLogQuery\n  parent: System.Diagnostics.Eventing.Reader\n  isExternal: false\n  name: EventLogQuery\n  nameWithType: EventLogQuery\n  fullName: System.Diagnostics.Eventing.Reader.EventLogQuery\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  isExternal: false\n  name: EventLogWatcher(String)\n  nameWithType: EventLogWatcher.EventLogWatcher(String)\n  fullName: EventLogWatcher.EventLogWatcher(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  isExternal: false\n  name: EventLogWatcher(EventLogQuery, EventBookmark)\n  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery, EventBookmark)\n  fullName: EventLogWatcher.EventLogWatcher(EventLogQuery, EventBookmark)\n- uid: System.Diagnostics.Eventing.Reader.EventBookmark\n  parent: System.Diagnostics.Eventing.Reader\n  isExternal: false\n  name: EventBookmark\n  nameWithType: EventBookmark\n  fullName: System.Diagnostics.Eventing.Reader.EventBookmark\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  isExternal: false\n  name: EventLogWatcher(EventLogQuery, EventBookmark, Boolean)\n  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery, EventBookmark, Boolean)\n  fullName: EventLogWatcher.EventLogWatcher(EventLogQuery, EventBookmark, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  isExternal: false\n  name: Dispose()\n  nameWithType: EventLogWatcher.Dispose()\n  fullName: EventLogWatcher.Dispose()\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: EventLogWatcher.Dispose(Boolean)\n  fullName: EventLogWatcher.Dispose(Boolean)\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  isExternal: false\n  name: Enabled\n  nameWithType: EventLogWatcher.Enabled\n  fullName: EventLogWatcher.Enabled\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  isExternal: false\n  name: EventRecordWritten\n  nameWithType: EventLogWatcher.EventRecordWritten\n  fullName: EventLogWatcher.EventRecordWritten\n- uid: System.EventHandler`1\n  name: EventHandler<TEventArgs>\n  nameWithType: EventHandler<TEventArgs>\n  fullName: System.EventHandler<TEventArgs>\n- uid: System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs\n  name: EventRecordWrittenEventArgs\n  nameWithType: EventRecordWrittenEventArgs\n  fullName: System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs\n- uid: System.EventHandler{System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<EventRecordWrittenEventArgs>\n  nameWithType: EventHandler<EventRecordWrittenEventArgs>\n  fullName: System.EventHandler<System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs\n    name: EventRecordWrittenEventArgs\n    nameWithType: EventRecordWrittenEventArgs\n    fullName: System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  isExternal: false\n  name: EventLogWatcher\n  nameWithType: EventLogWatcher.EventLogWatcher\n  fullName: EventLogWatcher.EventLogWatcher\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Eventing.Reader/EventLogWatcher.xml\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose*\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  isExternal: false\n  name: Dispose\n  nameWithType: EventLogWatcher.Dispose\n  fullName: EventLogWatcher.Dispose\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Eventing.Reader/EventLogWatcher.xml\n- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled*\n  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher\n  isExternal: false\n  name: Enabled\n  nameWithType: EventLogWatcher.Enabled\n  fullName: EventLogWatcher.Enabled\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Eventing.Reader/EventLogWatcher.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}