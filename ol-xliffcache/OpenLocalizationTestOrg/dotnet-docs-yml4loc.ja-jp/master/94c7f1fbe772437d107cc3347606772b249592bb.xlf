<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94c7f1fbe772437d107cc3347606772b249592bb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Xaml.IAmbientProvider.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">27c1b9c4cf46b77e7a64ec3112a140e10308e058</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1bd25b9ecd042d8f07e73e475b1199fccf196769</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a service that can return information items about ambient properties or ambient types to type converters and markup extensions.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>This interface represents the service that can help type converters and markup extensions to get the ambient property identifiers for the XAML type system (<ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> objects).</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The service can also get the ambient property values from classes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Types can also be ambient; any member that uses that type as its value should be considered ambient.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This service is typically returned through a call to <ph id="ph1">&lt;xref:System.IServiceProvider.GetService%2A&gt;</ph>, which is made against a context-specific service provider.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The service provider is generally available to contexts that need it, such as the execution code of a value converter.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Type Converters and Markup Extensions for XAML<ept id="p1">](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md)</ept> and <bpt id="p2">[</bpt>Service Contexts Available to Type Converters and Markup Extensions<ept id="p2">](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>About Ambient Properties</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>An ambient property is a property whose property value should be available to type converter and markup extension usages that exist in the XAML node structure and in the object graph created from it.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is relevant for a XAML processor during the object-writing phase of the load path or the serialization phase of a save path.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the load path case, the ambient property value might influence the value in the object graph of other properties that exist underneath it in a XAML node structure.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>When processed as a XAML node stream, the ambient concept means the ambient property value must be available to type converters and markup extensions from <ph id="ph1">`StartObject`</ph> to <ph id="ph2">`EndObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Similarly, a type converter that is used for the save path can use knowledge of the ambient property and its value.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the XAML that is produced is a better round-trip representation.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>For members in general, XAML does not specify the order in which members of an object must be processed.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, any ambient property value must be processed first by the XAML reader so that the type converter and markup extension usages that are contained in other properties can access it through the <ph id="ph1">&lt;xref:System.Xaml.IAmbientProvider&gt;</ph> service.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> is a similar concept that also influences XAML node-processing order.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> can only be used for peer member and node relationships; it cannot influence all descendants.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> directly influences object graph property setting; whereas the ambient technique relies on type converters or markup extensions.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the ambient technique, there must also be a specific type converter or markup extension definition that specifies how the ambient property value should be interpreted and applied to the object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>WPF Usage Notes</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>An ambient property scenario that is illustrated in the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> feature set is <ph id="ph2">&lt;xref:System.Windows.Style.TargetType%2A?displayProperty=fullName&gt;</ph>, which can qualify the necessary property name lookups for other values.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Windows.Style.TargetType%2A?displayProperty=fullName&gt;</ph> value qualifies the <ph id="ph2">&lt;xref:System.Windows.Setter.Property%2A?displayProperty=fullName&gt;</ph> values that are located in the XAML nodes underneath it.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Setter.Property%2A?displayProperty=fullName&gt;</ph> uses the type converter behavior for a <ph id="ph2">&lt;xref:System.Windows.DependencyProperty&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior accesses the ambient <ph id="ph1">&lt;xref:System.Windows.Style.TargetType%2A?displayProperty=fullName&gt;</ph> value by querying <ph id="ph2">&lt;xref:System.Xaml.IAmbientProvider.GetFirstAmbientValue%2A&gt;</ph> from a service context that is available to type converters and markup extensions.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>An ambient type scenario that is illustrated in the WPF feature set is <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> has a <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary.MergedDictionaries%2A&gt;</ph> property that can contain other <ph id="ph3">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> objects to merge, and the intended order of resource resolution for the merged scenario clashes with the order that types are loaded.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> applies <ph id="ph2">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> so that a XAML processor can correctly process the references in a merged dictionary with <ph id="ph3">`StaticResource`</ph> usages.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specifically, <ph id="ph1">`StaticResource`</ph> is a markup extension, which calls <ph id="ph2">&lt;xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns an enumerable set of object instances of possible ambient types for the requested types.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The set of types from which to retrieve ambient type information.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>An enumerable set of objects that represent the values for the requested set of <ph id="ph1">&lt;xref href="System.Xaml.XamlType"&gt;&lt;/xref&gt;</ph> identifiers.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Returns an enumerable set of ambient property information items for the requested set of properties.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each <ph id="ph1">&lt;xref:System.Xaml.AmbientPropertyValue&gt;</ph> that is returned contains the <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> identifier and a property value.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Specifies one or more types that should stop the evaluation when they are encountered traversing upward in the object graph.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This type holds the desired ambient property.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>May be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Specifies one or more property identifier objects that identify the properties to be considered ambient.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>An enumerable set of ambient property information items for the requested set of properties.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The property information for each <ph id="ph1">&lt;xref href="System.Xaml.AmbientPropertyValue"&gt;&lt;/xref&gt;</ph> that is returned will match one of the input <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">properties</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Returns an enumerable set of ambient property information items for the requested set of types and properties.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each <ph id="ph1">&lt;xref:System.Xaml.AmbientPropertyValue&gt;</ph> that is returned contains the <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> identifier and a property value.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>This particular <ph id="ph1">&lt;xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%2A&gt;</ph> overload can search for ambient types and ambient properties in the same pass through a tree.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using this overload results in an ordering of items in the return value that is different from <ph id="ph1">&lt;xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%28System.Collections.Generic.IEnumerable%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlMember%5B%5D%29&gt;</ph> or <ph id="ph2">&lt;xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%28System.Xaml.XamlType%5B%5D%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>This overload also permits the search to not use any saved context.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%28System.Collections.Generic.IEnumerable%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlMember%5B%5D%29&gt;</ph> or <ph id="ph2">&lt;xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%28System.Xaml.XamlType%5B%5D%29&gt;</ph> overloads implicitly use a saved context if it is available (they always act as if an implicit <ph id="ph3">`searchLiveStackOnly`</ph> parameter is <ph id="ph4">`false`</ph>).</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The concept of a saved context is potentially handled differently by particular XAML schema contexts, or by frameworks that incorporate XAML.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the WPF XAML implementation, saved contexts are used for template expansion, as well as other feature areas.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Specifies one or more types that should stop the evaluation when they are encountered traversing upward in the object graph.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This type holds the desired ambient property.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>May be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to not use a saved context; <ph id="ph2">`false`</ph> to use a saved context.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Specifies one or more property identifier objects that identify the properties to be considered ambient.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>An enumerable set of ambient property information items for the requested set of types and properties.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The property information for each <ph id="ph1">&lt;xref href="System.Xaml.AmbientPropertyValue"&gt;&lt;/xref&gt;</ph> that is returned will match one of the input <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">types</ph><ept id="p1">&lt;/code&gt;</ept> or <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">properties</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Returns the first matching object that is a possible ambient type for the requested types.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The set of types from which to retrieve ambient type information.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The first result object for the requested set.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Returns a single ambient property information item from the requested set of properties, based on which property is first encountered.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each <ph id="ph1">&lt;xref:System.Xaml.AmbientPropertyValue&gt;</ph> that is returned contains the <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> identifier and a property value.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Specifies one or more types that should stop the evaluation when they are encountered traversing upward in the object graph.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This type holds the desired ambient property.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Specifies one or more objects that identify the properties to be considered ambient.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A single ambient property information item for the first ambient property value from the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">properties</ph><ept id="p1">&lt;/code&gt;</ept> list that is found.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>