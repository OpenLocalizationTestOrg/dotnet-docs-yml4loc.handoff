{"nodes":[{"content":"Represents a significant event in the lifetime of an application.","nodes":[{"pos":[0,65],"content":"Represents a significant event in the lifetime of an application.","nodes":[{"content":"Represents a significant event in the lifetime of an application.","pos":[0,65]}]}],"pos":[748,814],"yaml":true},{"content":"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.  \n  \n Application lifetime events include events such as application startup and shutdown events. If an application is terminated, you can determine why by viewing the related event message field.  \n  \n When a <xref:System.Web.Management.WebApplicationLifetimeEvent> instance occurs, ASP.NET health monitoring updates the Application Lifetime Events performance counter. You can log these events by adding the <xref:System.Web.Management.WebApplicationLifetimeEvent> object to the `rules` subsection of the `healthMonitoring` section of the configuration file, as shown in the following example.  \n  \n```  \n<rules>  \n  <add name=\"Application Events\"  \n    eventName=\"Application Lifetime Events\"  \n    provider=\"EventLogProvider\"  \n    profile=\"Default\"  \n    minInterval=\"00:01:00\" />  \n</rules>  \n  \n```  \n  \n The Application Lifetime Events performance counter contains the sum total of all ASP.NET lifetime events. To view this performance counter in System Monitor (PerfMon), in the **Add Counters** window select **ASP.NET** from the **Performance object** drop-down list. Select the **Application Lifetime Events** performance counter, and click the **Add** button. For more information, see \"Using the System Monitor (PerfMon) with ASP.NET Applications\" on [MSDN](http://go.microsoft.com/fwlink/?linkid=37118). If you allow events to be logged by the standard <xref:System.Web.Management.EventLogWebEventProvider>, you can view them in Event Viewer by selecting the **Application** log. For more information, see [Event Viewer](http://go.microsoft.com/fwlink/?linkid=24845&clcid=0x409) in the Windows Server 2003 documentation on TechNet.  \n  \n> [!CAUTION]\n>  Because the <xref:System.Web.Management.WebApplicationLifetimeEvent> object is a high-volume event, logging it is resource-intensive and might slow down your system. It can also cause other events to be overwritten in the case of the <xref:System.Web.Management.EventLogWebEventProvider> class due to the high volume of events and the way the event logging works.  \n  \n> [!NOTE]\n>  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of deriving from the <xref:System.Web.Management.WebApplicationLifetimeEvent> class, see the example provided in this topic.","nodes":[{"pos":[0,378],"content":"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.","nodes":[{"content":"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.","pos":[0,378],"nodes":[{"content":"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications.","pos":[0,101]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.Management&gt;</ph> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data.","pos":[102,294],"source":" The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data."},{"content":"It also contains supporting types that help during the management of health events.","pos":[295,378]}]}]},{"pos":[385,575],"content":"Application lifetime events include events such as application startup and shutdown events. If an application is terminated, you can determine why by viewing the related event message field.","nodes":[{"content":"Application lifetime events include events such as application startup and shutdown events. If an application is terminated, you can determine why by viewing the related event message field.","pos":[0,190],"nodes":[{"content":"Application lifetime events include events such as application startup and shutdown events.","pos":[0,91]},{"content":"If an application is terminated, you can determine why by viewing the related event message field.","pos":[92,190]}]}]},{"pos":[582,974],"content":"When a <xref:System.Web.Management.WebApplicationLifetimeEvent> instance occurs, ASP.NET health monitoring updates the Application Lifetime Events performance counter. You can log these events by adding the <xref:System.Web.Management.WebApplicationLifetimeEvent> object to the `rules` subsection of the `healthMonitoring` section of the configuration file, as shown in the following example.","nodes":[{"content":"When a <ph id=\"ph1\">&lt;xref:System.Web.Management.WebApplicationLifetimeEvent&gt;</ph> instance occurs, ASP.NET health monitoring updates the Application Lifetime Events performance counter.","pos":[0,167],"source":"When a <xref:System.Web.Management.WebApplicationLifetimeEvent> instance occurs, ASP.NET health monitoring updates the Application Lifetime Events performance counter."},{"content":"You can log these events by adding the <ph id=\"ph1\">&lt;xref:System.Web.Management.WebApplicationLifetimeEvent&gt;</ph> object to the <ph id=\"ph2\">`rules`</ph> subsection of the <ph id=\"ph3\">`healthMonitoring`</ph> section of the configuration file, as shown in the following example.","pos":[168,392],"source":" You can log these events by adding the <xref:System.Web.Management.WebApplicationLifetimeEvent> object to the `rules` subsection of the `healthMonitoring` section of the configuration file, as shown in the following example."}]},{"pos":[1191,2025],"content":"The Application Lifetime Events performance counter contains the sum total of all ASP.NET lifetime events. To view this performance counter in System Monitor (PerfMon), in the **Add Counters** window select **ASP.NET** from the **Performance object** drop-down list. Select the **Application Lifetime Events** performance counter, and click the **Add** button. For more information, see \"Using the System Monitor (PerfMon) with ASP.NET Applications\" on [MSDN](http://go.microsoft.com/fwlink/?linkid=37118). If you allow events to be logged by the standard <xref:System.Web.Management.EventLogWebEventProvider>, you can view them in Event Viewer by selecting the **Application** log. For more information, see [Event Viewer](http://go.microsoft.com/fwlink/?linkid=24845&clcid=0x409) in the Windows Server 2003 documentation on TechNet.","nodes":[{"content":"The Application Lifetime Events performance counter contains the sum total of all ASP.NET lifetime events.","pos":[0,106]},{"content":"To view this performance counter in System Monitor (PerfMon), in the <bpt id=\"p1\">**</bpt>Add Counters<ept id=\"p1\">**</ept> window select <bpt id=\"p2\">**</bpt>ASP.NET<ept id=\"p2\">**</ept> from the <bpt id=\"p3\">**</bpt>Performance object<ept id=\"p3\">**</ept> drop-down list.","pos":[107,266],"source":" To view this performance counter in System Monitor (PerfMon), in the **Add Counters** window select **ASP.NET** from the **Performance object** drop-down list."},{"content":"Select the <bpt id=\"p1\">**</bpt>Application Lifetime Events<ept id=\"p1\">**</ept> performance counter, and click the <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept> button.","pos":[267,360],"source":" Select the **Application Lifetime Events** performance counter, and click the **Add** button."},{"content":"For more information, see \"Using the System Monitor (PerfMon) with ASP.NET Applications\" on <bpt id=\"p1\">[</bpt>MSDN<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=37118)</ept>.","pos":[361,506],"source":" For more information, see \"Using the System Monitor (PerfMon) with ASP.NET Applications\" on [MSDN](http://go.microsoft.com/fwlink/?linkid=37118)."},{"content":"If you allow events to be logged by the standard <ph id=\"ph1\">&lt;xref:System.Web.Management.EventLogWebEventProvider&gt;</ph>, you can view them in Event Viewer by selecting the <bpt id=\"p1\">**</bpt>Application<ept id=\"p1\">**</ept> log.","pos":[507,682],"source":" If you allow events to be logged by the standard <xref:System.Web.Management.EventLogWebEventProvider>, you can view them in Event Viewer by selecting the **Application** log."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Event Viewer<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=24845&amp;clcid=0x409)</ept> in the Windows Server 2003 documentation on TechNet.","pos":[683,834],"source":" For more information, see [Event Viewer](http://go.microsoft.com/fwlink/?linkid=24845&clcid=0x409) in the Windows Server 2003 documentation on TechNet."}]},{"pos":[2033,2410],"content":"[!CAUTION]\n Because the <xref:System.Web.Management.WebApplicationLifetimeEvent> object is a high-volume event, logging it is resource-intensive and might slow down your system. It can also cause other events to be overwritten in the case of the <xref:System.Web.Management.EventLogWebEventProvider> class due to the high volume of events and the way the event logging works.","leadings":["","> "],"nodes":[{"content":" Because the <xref:System.Web.Management.WebApplicationLifetimeEvent> object is a high-volume event, logging it is resource-intensive and might slow down your system. It can also cause other events to be overwritten in the case of the <xref:System.Web.Management.EventLogWebEventProvider> class due to the high volume of events and the way the event logging works.","pos":[11,375],"nodes":[{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Web.Management.WebApplicationLifetimeEvent&gt;</ph> object is a high-volume event, logging it is resource-intensive and might slow down your system.","pos":[1,166],"source":" Because the <xref:System.Web.Management.WebApplicationLifetimeEvent> object is a high-volume event, logging it is resource-intensive and might slow down your system."},{"content":"It can also cause other events to be overwritten in the case of the <ph id=\"ph1\">&lt;xref:System.Web.Management.EventLogWebEventProvider&gt;</ph> class due to the high volume of events and the way the event logging works.","pos":[167,364],"source":" It can also cause other events to be overwritten in the case of the <xref:System.Web.Management.EventLogWebEventProvider> class due to the high volume of events and the way the event logging works."}]}]},{"pos":[2418,2879],"content":"[!NOTE]\n In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of deriving from the <xref:System.Web.Management.WebApplicationLifetimeEvent> class, see the example provided in this topic.","leadings":["","> "],"nodes":[{"content":" In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of deriving from the <xref:System.Web.Management.WebApplicationLifetimeEvent> class, see the example provided in this topic.","pos":[8,459],"nodes":[{"content":"In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the <ph id=\"ph1\">`healthMonitoring`</ph> configuration section.","pos":[1,210],"source":" In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section."},{"content":"You can also derive from the health-monitoring types to create your own custom events and providers.","pos":[211,311]},{"content":"For an example of deriving from the <ph id=\"ph1\">&lt;xref:System.Web.Management.WebApplicationLifetimeEvent&gt;</ph> class, see the example provided in this topic.","pos":[312,451],"source":" For an example of deriving from the <xref:System.Web.Management.WebApplicationLifetimeEvent> class, see the example provided in this topic."}]}]}],"pos":[825,3742],"yaml":true,"extradata":"MT"},{"content":"Initializes the <xref href=\"System.Web.Management.WebApplicationLifetimeEvent\"></xref> class using the supplied parameters.","nodes":[{"pos":[0,123],"content":"Initializes the <ph id=\"ph1\">&lt;xref href=\"System.Web.Management.WebApplicationLifetimeEvent\"&gt;&lt;/xref&gt;</ph> class using the supplied parameters.","source":"Initializes the <xref href=\"System.Web.Management.WebApplicationLifetimeEvent\"></xref> class using the supplied parameters."}],"pos":[8415,8539],"yaml":true},{"content":"This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to create an instance of the <xref:System.Web.Management.WebApplicationLifetimeEvent> class, but you can call this constructor when implementing your own event type that inherits from this class.  \n  \n> [!NOTE]\n>  The <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> constructor is not intended to be used directly from your code. It is called by ASP.NET. You can call the <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> constructor when deriving from the <xref:System.Web.Management.WebApplicationLifetimeEvent> class.","nodes":[{"pos":[0,294],"content":"This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to create an instance of the <xref:System.Web.Management.WebApplicationLifetimeEvent> class, but you can call this constructor when implementing your own event type that inherits from this class.","nodes":[{"content":"This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to create an instance of the <xref:System.Web.Management.WebApplicationLifetimeEvent> class, but you can call this constructor when implementing your own event type that inherits from this class.","pos":[0,294],"nodes":[{"content":"This constructor is used internally by the ASP.NET health-monitoring system.","pos":[0,76]},{"content":"You will never use it to create an instance of the <ph id=\"ph1\">&lt;xref:System.Web.Management.WebApplicationLifetimeEvent&gt;</ph> class, but you can call this constructor when implementing your own event type that inherits from this class.","pos":[77,294],"source":" You will never use it to create an instance of the <xref:System.Web.Management.WebApplicationLifetimeEvent> class, but you can call this constructor when implementing your own event type that inherits from this class."}]}]},{"pos":[302,657],"content":"[!NOTE]\n The <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> constructor is not intended to be used directly from your code. It is called by ASP.NET. You can call the <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> constructor when deriving from the <xref:System.Web.Management.WebApplicationLifetimeEvent> class.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> constructor is not intended to be used directly from your code. It is called by ASP.NET. You can call the <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> constructor when deriving from the <xref:System.Web.Management.WebApplicationLifetimeEvent> class.","pos":[8,353],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A&gt;</ph> constructor is not intended to be used directly from your code.","pos":[1,136],"source":" The <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> constructor is not intended to be used directly from your code."},{"content":"It is called by ASP.NET.","pos":[137,161]},{"content":"You can call the <ph id=\"ph1\">&lt;xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A&gt;</ph> constructor when deriving from the <ph id=\"ph2\">&lt;xref:System.Web.Management.WebApplicationLifetimeEvent&gt;</ph> class.","pos":[162,345],"source":" You can call the <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> constructor when deriving from the <xref:System.Web.Management.WebApplicationLifetimeEvent> class."}]}]}],"pos":[8550,9213],"yaml":true,"extradata":"MT"},{"content":"The message associated with the event.","nodes":[{"pos":[0,38],"content":"The message associated with the event.","nodes":[{"content":"The message associated with the event.","pos":[0,38]}]}],"pos":[10057,10096],"yaml":true},{"content":"The object that is the source of the event.","nodes":[{"pos":[0,43],"content":"The object that is the source of the event.","nodes":[{"content":"The object that is the source of the event.","pos":[0,43]}]}],"pos":[10163,10207],"yaml":true},{"content":"The code associated with the event. When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>.","nodes":[{"pos":[0,180],"content":"The code associated with the event. When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>.","nodes":[{"content":"The code associated with the event.","pos":[0,35]},{"content":"When you implement a custom event, the event code must be greater than <ph id=\"ph1\">&lt;xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"&gt;&lt;/xref&gt;</ph>.","pos":[36,180],"source":" When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>."}]}],"pos":[10271,10452],"yaml":true},{"content":"Initializes the <xref href=\"System.Web.Management.WebApplicationLifetimeEvent\"></xref> class using the supplied parameters.","nodes":[{"pos":[0,123],"content":"Initializes the <ph id=\"ph1\">&lt;xref href=\"System.Web.Management.WebApplicationLifetimeEvent\"&gt;&lt;/xref&gt;</ph> class using the supplied parameters.","source":"Initializes the <xref href=\"System.Web.Management.WebApplicationLifetimeEvent\"></xref> class using the supplied parameters."}],"pos":[11843,11967],"yaml":true},{"content":"This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to create an instance of the <xref:System.Web.Management.WebApplicationLifetimeEvent> class, but you can call this constructor when implementing your own event type that inherits from this class.  \n  \n> [!NOTE]\n>  The <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> constructor is not intended to be used directly from your code. It is called by ASP.NET. You can call the <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> constructor when deriving from the <xref:System.Web.Management.WebApplicationLifetimeEvent> class.","nodes":[{"pos":[0,294],"content":"This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to create an instance of the <xref:System.Web.Management.WebApplicationLifetimeEvent> class, but you can call this constructor when implementing your own event type that inherits from this class.","nodes":[{"content":"This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to create an instance of the <xref:System.Web.Management.WebApplicationLifetimeEvent> class, but you can call this constructor when implementing your own event type that inherits from this class.","pos":[0,294],"nodes":[{"content":"This constructor is used internally by the ASP.NET health-monitoring system.","pos":[0,76]},{"content":"You will never use it to create an instance of the <ph id=\"ph1\">&lt;xref:System.Web.Management.WebApplicationLifetimeEvent&gt;</ph> class, but you can call this constructor when implementing your own event type that inherits from this class.","pos":[77,294],"source":" You will never use it to create an instance of the <xref:System.Web.Management.WebApplicationLifetimeEvent> class, but you can call this constructor when implementing your own event type that inherits from this class."}]}]},{"pos":[302,657],"content":"[!NOTE]\n The <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> constructor is not intended to be used directly from your code. It is called by ASP.NET. You can call the <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> constructor when deriving from the <xref:System.Web.Management.WebApplicationLifetimeEvent> class.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> constructor is not intended to be used directly from your code. It is called by ASP.NET. You can call the <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> constructor when deriving from the <xref:System.Web.Management.WebApplicationLifetimeEvent> class.","pos":[8,353],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A&gt;</ph> constructor is not intended to be used directly from your code.","pos":[1,136],"source":" The <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> constructor is not intended to be used directly from your code."},{"content":"It is called by ASP.NET.","pos":[137,161]},{"content":"You can call the <ph id=\"ph1\">&lt;xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A&gt;</ph> constructor when deriving from the <ph id=\"ph2\">&lt;xref:System.Web.Management.WebApplicationLifetimeEvent&gt;</ph> class.","pos":[162,345],"source":" You can call the <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> constructor when deriving from the <xref:System.Web.Management.WebApplicationLifetimeEvent> class."}]}]}],"pos":[11978,12641],"yaml":true,"extradata":"MT"},{"content":"The message associated with the event.","nodes":[{"pos":[0,38],"content":"The message associated with the event.","nodes":[{"content":"The message associated with the event.","pos":[0,38]}]}],"pos":[13506,13545],"yaml":true},{"content":"The object that is the source of the event.","nodes":[{"pos":[0,43],"content":"The object that is the source of the event.","nodes":[{"content":"The object that is the source of the event.","pos":[0,43]}]}],"pos":[13612,13656],"yaml":true},{"content":"The code associated with the event. When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>.","nodes":[{"pos":[0,180],"content":"The code associated with the event. When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>.","nodes":[{"content":"The code associated with the event.","pos":[0,35]},{"content":"When you implement a custom event, the event code must be greater than <ph id=\"ph1\">&lt;xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"&gt;&lt;/xref&gt;</ph>.","pos":[36,180],"source":" When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>."}]}],"pos":[13720,13901],"yaml":true},{"content":"The <xref href=\"System.Web.Management.WebEventCodes\"></xref> value that specifies the detailed identifier for the event.","nodes":[{"pos":[0,120],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Web.Management.WebEventCodes\"&gt;&lt;/xref&gt;</ph> value that specifies the detailed identifier for the event.","source":"The <xref href=\"System.Web.Management.WebEventCodes\"></xref> value that specifies the detailed identifier for the event."}],"pos":[13971,14092],"yaml":true},{"content":"Used internally to increment performance counters.","nodes":[{"pos":[0,50],"content":"Used internally to increment performance counters.","nodes":[{"content":"Used internally to increment performance counters.","pos":[0,50]}]}],"pos":[15257,15308],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Management.WebApplicationLifetimeEvent\n  commentId: T:System.Web.Management.WebApplicationLifetimeEvent\n  id: WebApplicationLifetimeEvent\n  children:\n  - System.Web.Management.WebApplicationLifetimeEvent.#ctor(System.String,System.Object,System.Int32)\n  - System.Web.Management.WebApplicationLifetimeEvent.#ctor(System.String,System.Object,System.Int32,System.Int32)\n  - System.Web.Management.WebApplicationLifetimeEvent.IncrementPerfCounters\n  langs:\n  - csharp\n  name: WebApplicationLifetimeEvent\n  nameWithType: WebApplicationLifetimeEvent\n  fullName: System.Web.Management.WebApplicationLifetimeEvent\n  type: Class\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Represents a significant event in the lifetime of an application.\n  remarks: \"ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <xref:System.Web.Management> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.  \\n  \\n Application lifetime events include events such as application startup and shutdown events. If an application is terminated, you can determine why by viewing the related event message field.  \\n  \\n When a <xref:System.Web.Management.WebApplicationLifetimeEvent> instance occurs, ASP.NET health monitoring updates the Application Lifetime Events performance counter. You can log these events by adding the <xref:System.Web.Management.WebApplicationLifetimeEvent> object to the `rules` subsection of the `healthMonitoring` section of the configuration file, as shown in the following example.  \\n  \\n```  \\n<rules>  \\n  <add name=\\\"Application Events\\\"  \\n    eventName=\\\"Application Lifetime Events\\\"  \\n    provider=\\\"EventLogProvider\\\"  \\n    profile=\\\"Default\\\"  \\n    minInterval=\\\"00:01:00\\\" />  \\n</rules>  \\n  \\n```  \\n  \\n The Application Lifetime Events performance counter contains the sum total of all ASP.NET lifetime events. To view this performance counter in System Monitor (PerfMon), in the **Add Counters** window select **ASP.NET** from the **Performance object** drop-down list. Select the **Application Lifetime Events** performance counter, and click the **Add** button. For more information, see \\\"Using the System Monitor (PerfMon) with ASP.NET Applications\\\" on [MSDN](http://go.microsoft.com/fwlink/?linkid=37118). If you allow events to be logged by the standard <xref:System.Web.Management.EventLogWebEventProvider>, you can view them in Event Viewer by selecting the **Application** log. For more information, see [Event Viewer](http://go.microsoft.com/fwlink/?linkid=24845&clcid=0x409) in the Windows Server 2003 documentation on TechNet.  \\n  \\n> [!CAUTION]\\n>  Because the <xref:System.Web.Management.WebApplicationLifetimeEvent> object is a high-volume event, logging it is resource-intensive and might slow down your system. It can also cause other events to be overwritten in the case of the <xref:System.Web.Management.EventLogWebEventProvider> class due to the high volume of events and the way the event logging works.  \\n  \\n> [!NOTE]\\n>  In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the `healthMonitoring` configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of deriving from the <xref:System.Web.Management.WebApplicationLifetimeEvent> class, see the example provided in this topic.\"\n  example:\n  - \"The following code example shows how to derive from the <xref:System.Web.Management.WebApplicationLifetimeEvent> class to create a custom event.  \\n  \\n [!code-csharp[System.Web.Management.WebApplicationLifetimeEvent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.management.WebApplicationLifetimeEvent/CS/webapplicationlifetimeevent.cs#1)]\\n [!code-vb[System.Web.Management.WebApplicationLifetimeEvent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.management.WebApplicationLifetimeEvent/VB/webapplicationlifetimeevent.vb#1)]  \\n  \\n The following configuration-file excerpt shows how to configure the `healthMonitoring` section of a configuration file to add the `SampleWebApplicationLifetimeEvent` code defined above to the ASP.NET health-monitoring system. To add the event to the system, you must define the event by adding a new entry to the `eventMappings` section and map the event to a provider by adding a new entry to the `rules` section.  \\n  \\n```  \\n<healthMonitoring  \\n  enabled=\\\"true\\\"  \\n  heartBeatInterval=\\\"0\\\">  \\n  \\n    <eventMappings>  \\n       <clear />  \\n       <!-- Configure the application lifetime event -->  \\n       <!-- object to handle the Web application events. -->  \\n       <add name=\\\"SampleApplicationLifetimeEvents\\\"  \\n         type=\\\"System.Web.Management.SampleWebApplicationLifetimeEvent,  \\n         System.Web,Version=2.0.3600.0,  \\n         Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a\\\" />  \\n     </eventMappings>  \\n  \\n    <rules>  \\n      <clear/>  \\n       // Configure the connection between the   \\n       // application lifetime event object   \\n       // and the provider that must process it.  \\n       <add name=\\\"Custom Application Events\\\"  \\n         eventName=\\\"SampleApplicationLifetimeEvents\\\"  \\n         provider=\\\"EventLogProvider\\\"  \\n         profile=\\\"Default\\\"  \\n         minInterval=\\\"00:01:00\\\" />  \\n    </rules>  \\n  \\n</healthMonitoring>  \\n```\"\n  syntax:\n    content: 'public class WebApplicationLifetimeEvent : System.Web.Management.WebManagementEvent'\n  inheritance:\n  - System.Object\n  - System.Web.Management.WebBaseEvent\n  - System.Web.Management.WebManagementEvent\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Web.Management.WebBaseEvent.ApplicationInformation\n  - System.Web.Management.WebBaseEvent.EventCode\n  - System.Web.Management.WebBaseEvent.EventDetailCode\n  - System.Web.Management.WebBaseEvent.EventID\n  - System.Web.Management.WebBaseEvent.EventOccurrence\n  - System.Web.Management.WebBaseEvent.EventSequence\n  - System.Web.Management.WebBaseEvent.EventSource\n  - System.Web.Management.WebBaseEvent.EventTime\n  - System.Web.Management.WebBaseEvent.EventTimeUtc\n  - System.Web.Management.WebBaseEvent.FormatCustomEventDetails(System.Web.Management.WebEventFormatter)\n  - System.Web.Management.WebBaseEvent.Message\n  - System.Web.Management.WebBaseEvent.Raise\n  - System.Web.Management.WebBaseEvent.Raise(System.Web.Management.WebBaseEvent)\n  - System.Web.Management.WebBaseEvent.ToString\n  - System.Web.Management.WebBaseEvent.ToString(System.Boolean,System.Boolean)\n  - System.Web.Management.WebManagementEvent.ProcessInformation\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Management/WebApplicationLifetimeEvent.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Management.WebApplicationLifetimeEvent.#ctor(System.String,System.Object,System.Int32)\n  commentId: M:System.Web.Management.WebApplicationLifetimeEvent.#ctor(System.String,System.Object,System.Int32)\n  id: '#ctor(System.String,System.Object,System.Int32)'\n  parent: System.Web.Management.WebApplicationLifetimeEvent\n  langs:\n  - csharp\n  name: WebApplicationLifetimeEvent(String, Object, Int32)\n  nameWithType: WebApplicationLifetimeEvent.WebApplicationLifetimeEvent(String, Object, Int32)\n  fullName: WebApplicationLifetimeEvent.WebApplicationLifetimeEvent(String, Object, Int32)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Initializes the <xref href=\"System.Web.Management.WebApplicationLifetimeEvent\"></xref> class using the supplied parameters.\n  remarks: \"This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to create an instance of the <xref:System.Web.Management.WebApplicationLifetimeEvent> class, but you can call this constructor when implementing your own event type that inherits from this class.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> constructor is not intended to be used directly from your code. It is called by ASP.NET. You can call the <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> constructor when deriving from the <xref:System.Web.Management.WebApplicationLifetimeEvent> class.\"\n  example:\n  - \"The following code example shows how to use the <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> in an ASP.NET custom health event. This code example is mainly intended to show the correct syntax to use.  \\n  \\n [!code-csharp[System.Web.Management.WebApplicationLifetimeEvent#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.management.WebApplicationLifetimeEvent/CS/webapplicationlifetimeevent.cs#2)]\\n [!code-vb[System.Web.Management.WebApplicationLifetimeEvent#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.management.WebApplicationLifetimeEvent/VB/webapplicationlifetimeevent.vb#2)]\"\n  syntax:\n    content: protected WebApplicationLifetimeEvent (string message, object eventSource, int eventCode);\n    parameters:\n    - id: message\n      type: System.String\n      description: The message associated with the event.\n    - id: eventSource\n      type: System.Object\n      description: The object that is the source of the event.\n    - id: eventCode\n      type: System.Int32\n      description: The code associated with the event. When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>.\n  overload: System.Web.Management.WebApplicationLifetimeEvent.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Management/WebApplicationLifetimeEvent.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Management.WebApplicationLifetimeEvent.#ctor(System.String,System.Object,System.Int32,System.Int32)\n  commentId: M:System.Web.Management.WebApplicationLifetimeEvent.#ctor(System.String,System.Object,System.Int32,System.Int32)\n  id: '#ctor(System.String,System.Object,System.Int32,System.Int32)'\n  parent: System.Web.Management.WebApplicationLifetimeEvent\n  langs:\n  - csharp\n  name: WebApplicationLifetimeEvent(String, Object, Int32, Int32)\n  nameWithType: WebApplicationLifetimeEvent.WebApplicationLifetimeEvent(String, Object, Int32, Int32)\n  fullName: WebApplicationLifetimeEvent.WebApplicationLifetimeEvent(String, Object, Int32, Int32)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Initializes the <xref href=\"System.Web.Management.WebApplicationLifetimeEvent\"></xref> class using the supplied parameters.\n  remarks: \"This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to create an instance of the <xref:System.Web.Management.WebApplicationLifetimeEvent> class, but you can call this constructor when implementing your own event type that inherits from this class.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> constructor is not intended to be used directly from your code. It is called by ASP.NET. You can call the <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> constructor when deriving from the <xref:System.Web.Management.WebApplicationLifetimeEvent> class.\"\n  example:\n  - \"The following code example shows how to use the <xref:System.Web.Management.WebApplicationLifetimeEvent.%23ctor%2A> in an ASP.NET custom health event. This code example is mainly intended to show the correct syntax to use.  \\n  \\n [!code-csharp[System.Web.Management.WebApplicationLifetimeEvent#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.management.WebApplicationLifetimeEvent/CS/webapplicationlifetimeevent.cs#3)]\\n [!code-vb[System.Web.Management.WebApplicationLifetimeEvent#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.management.WebApplicationLifetimeEvent/VB/webapplicationlifetimeevent.vb#3)]\"\n  syntax:\n    content: protected WebApplicationLifetimeEvent (string message, object eventSource, int eventCode, int eventDetailCode);\n    parameters:\n    - id: message\n      type: System.String\n      description: The message associated with the event.\n    - id: eventSource\n      type: System.Object\n      description: The object that is the source of the event.\n    - id: eventCode\n      type: System.Int32\n      description: The code associated with the event. When you implement a custom event, the event code must be greater than <xref href=\"System.Web.Management.WebEventCodes.WebExtendedBase\"></xref>.\n    - id: eventDetailCode\n      type: System.Int32\n      description: The <xref href=\"System.Web.Management.WebEventCodes\"></xref> value that specifies the detailed identifier for the event.\n  overload: System.Web.Management.WebApplicationLifetimeEvent.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Management/WebApplicationLifetimeEvent.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\n- uid: System.Web.Management.WebApplicationLifetimeEvent.IncrementPerfCounters\n  commentId: M:System.Web.Management.WebApplicationLifetimeEvent.IncrementPerfCounters\n  id: IncrementPerfCounters\n  parent: System.Web.Management.WebApplicationLifetimeEvent\n  langs:\n  - csharp\n  name: IncrementPerfCounters()\n  nameWithType: WebApplicationLifetimeEvent.IncrementPerfCounters()\n  fullName: WebApplicationLifetimeEvent.IncrementPerfCounters()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Management\n  summary: Used internally to increment performance counters.\n  syntax:\n    content: protected override void IncrementPerfCounters ();\n    parameters: []\n  overload: System.Web.Management.WebApplicationLifetimeEvent.IncrementPerfCounters*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Management/WebApplicationLifetimeEvent.xml\n  ms.technology:\n  - dotnet-webforms\n  author: tdykstra\n  ms.author: tdykstra\n  manager: wpickett\nreferences:\n- uid: System.Web.Management.WebManagementEvent\n  parent: System.Web.Management\n  isExternal: false\n  name: WebManagementEvent\n  nameWithType: WebManagementEvent\n  fullName: System.Web.Management.WebManagementEvent\n- uid: System.Web.Management.WebApplicationLifetimeEvent.#ctor(System.String,System.Object,System.Int32)\n  parent: System.Web.Management.WebApplicationLifetimeEvent\n  isExternal: false\n  name: WebApplicationLifetimeEvent(String, Object, Int32)\n  nameWithType: WebApplicationLifetimeEvent.WebApplicationLifetimeEvent(String, Object, Int32)\n  fullName: WebApplicationLifetimeEvent.WebApplicationLifetimeEvent(String, Object, Int32)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Web.Management.WebApplicationLifetimeEvent.#ctor(System.String,System.Object,System.Int32,System.Int32)\n  parent: System.Web.Management.WebApplicationLifetimeEvent\n  isExternal: false\n  name: WebApplicationLifetimeEvent(String, Object, Int32, Int32)\n  nameWithType: WebApplicationLifetimeEvent.WebApplicationLifetimeEvent(String, Object, Int32, Int32)\n  fullName: WebApplicationLifetimeEvent.WebApplicationLifetimeEvent(String, Object, Int32, Int32)\n- uid: System.Web.Management.WebApplicationLifetimeEvent.IncrementPerfCounters\n  parent: System.Web.Management.WebApplicationLifetimeEvent\n  isExternal: false\n  name: IncrementPerfCounters()\n  nameWithType: WebApplicationLifetimeEvent.IncrementPerfCounters()\n  fullName: WebApplicationLifetimeEvent.IncrementPerfCounters()\n- uid: System.Web.Management.WebApplicationLifetimeEvent.#ctor*\n  parent: System.Web.Management.WebApplicationLifetimeEvent\n  isExternal: false\n  name: WebApplicationLifetimeEvent\n  nameWithType: WebApplicationLifetimeEvent.WebApplicationLifetimeEvent\n  fullName: WebApplicationLifetimeEvent.WebApplicationLifetimeEvent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Management/WebApplicationLifetimeEvent.xml\n- uid: System.Web.Management.WebApplicationLifetimeEvent.IncrementPerfCounters*\n  parent: System.Web.Management.WebApplicationLifetimeEvent\n  isExternal: false\n  name: IncrementPerfCounters\n  nameWithType: WebApplicationLifetimeEvent.IncrementPerfCounters\n  fullName: WebApplicationLifetimeEvent.IncrementPerfCounters\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Management/WebApplicationLifetimeEvent.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Web.Management.WebBaseEvent.ToString\n  parent: System.Web.Management.WebBaseEvent\n  isExternal: false\n  name: ToString()\n  nameWithType: WebBaseEvent.ToString()\n  fullName: WebBaseEvent.ToString()\n- uid: System.Web.Management.WebBaseEvent.ApplicationInformation\n  parent: System.Web.Management.WebBaseEvent\n  isExternal: false\n  name: ApplicationInformation\n  nameWithType: WebBaseEvent.ApplicationInformation\n  fullName: WebBaseEvent.ApplicationInformation\n- uid: System.Web.Management.WebBaseEvent.EventCode\n  parent: System.Web.Management.WebBaseEvent\n  isExternal: false\n  name: EventCode\n  nameWithType: WebBaseEvent.EventCode\n  fullName: WebBaseEvent.EventCode\n- uid: System.Web.Management.WebBaseEvent.EventDetailCode\n  parent: System.Web.Management.WebBaseEvent\n  isExternal: false\n  name: EventDetailCode\n  nameWithType: WebBaseEvent.EventDetailCode\n  fullName: WebBaseEvent.EventDetailCode\n- uid: System.Web.Management.WebBaseEvent.EventID\n  parent: System.Web.Management.WebBaseEvent\n  isExternal: false\n  name: EventID\n  nameWithType: WebBaseEvent.EventID\n  fullName: WebBaseEvent.EventID\n- uid: System.Web.Management.WebBaseEvent.EventOccurrence\n  parent: System.Web.Management.WebBaseEvent\n  isExternal: false\n  name: EventOccurrence\n  nameWithType: WebBaseEvent.EventOccurrence\n  fullName: WebBaseEvent.EventOccurrence\n- uid: System.Web.Management.WebBaseEvent.EventSequence\n  parent: System.Web.Management.WebBaseEvent\n  isExternal: false\n  name: EventSequence\n  nameWithType: WebBaseEvent.EventSequence\n  fullName: WebBaseEvent.EventSequence\n- uid: System.Web.Management.WebBaseEvent.EventSource\n  parent: System.Web.Management.WebBaseEvent\n  isExternal: false\n  name: EventSource\n  nameWithType: WebBaseEvent.EventSource\n  fullName: WebBaseEvent.EventSource\n- uid: System.Web.Management.WebBaseEvent.EventTime\n  parent: System.Web.Management.WebBaseEvent\n  isExternal: false\n  name: EventTime\n  nameWithType: WebBaseEvent.EventTime\n  fullName: WebBaseEvent.EventTime\n- uid: System.Web.Management.WebBaseEvent.EventTimeUtc\n  parent: System.Web.Management.WebBaseEvent\n  isExternal: false\n  name: EventTimeUtc\n  nameWithType: WebBaseEvent.EventTimeUtc\n  fullName: WebBaseEvent.EventTimeUtc\n- uid: System.Web.Management.WebBaseEvent.FormatCustomEventDetails(System.Web.Management.WebEventFormatter)\n  parent: System.Web.Management.WebBaseEvent\n  isExternal: false\n  name: FormatCustomEventDetails(WebEventFormatter)\n  nameWithType: WebBaseEvent.FormatCustomEventDetails(WebEventFormatter)\n  fullName: WebBaseEvent.FormatCustomEventDetails(WebEventFormatter)\n- uid: System.Web.Management.WebBaseEvent.Message\n  parent: System.Web.Management.WebBaseEvent\n  isExternal: false\n  name: Message\n  nameWithType: WebBaseEvent.Message\n  fullName: WebBaseEvent.Message\n- uid: System.Web.Management.WebBaseEvent.Raise\n  parent: System.Web.Management.WebBaseEvent\n  isExternal: false\n  name: Raise()\n  nameWithType: WebBaseEvent.Raise()\n  fullName: WebBaseEvent.Raise()\n- uid: System.Web.Management.WebBaseEvent.Raise(System.Web.Management.WebBaseEvent)\n  parent: System.Web.Management.WebBaseEvent\n  isExternal: false\n  name: Raise(WebBaseEvent)\n  nameWithType: WebBaseEvent.Raise(WebBaseEvent)\n  fullName: WebBaseEvent.Raise(WebBaseEvent)\n- uid: System.Web.Management.WebBaseEvent.ToString(System.Boolean,System.Boolean)\n  parent: System.Web.Management.WebBaseEvent\n  isExternal: false\n  name: ToString(Boolean, Boolean)\n  nameWithType: WebBaseEvent.ToString(Boolean, Boolean)\n  fullName: WebBaseEvent.ToString(Boolean, Boolean)\n- uid: System.Web.Management.WebManagementEvent.ProcessInformation\n  parent: System.Web.Management.WebManagementEvent\n  isExternal: false\n  name: ProcessInformation\n  nameWithType: WebManagementEvent.ProcessInformation\n  fullName: WebManagementEvent.ProcessInformation\n"}