{"nodes":[{"content":"Represents structured exception handling (SEH) errors.","nodes":[{"pos":[0,54],"content":"Represents structured exception handling (SEH) errors.","nodes":[{"content":"Represents structured exception handling (SEH) errors.","pos":[0,54]}]}],"pos":[865,920],"yaml":true},{"content":"The <xref:System.Runtime.InteropServices.SEHException> class handles SEH errors that are thrown from unmanaged code, but that have not been mapped to another .NET Framework exception. The <xref:System.Runtime.InteropServices.SEHException> class also corresponds to the `HRESULT` `E_FAIL` (0x80004005).  \n  \n The .NET Framework often encounters unmanaged SEH exceptions that are automatically mapped to managed equivalents. There are two common unmanaged SEH exceptions:  \n  \n-   `STATUS_NO_MEMORY` exceptions are automatically mapped to the <xref:System.OutOfMemoryException> class.  \n  \n-   `STATUS_ACCESS_VIOLATION` exceptions are automatically mapped as follows:  \n  \n    -   If `legacyNullReferencePolicy` is applied, all access violations are mapped to the <xref:System.NullReferenceException> class.  \n  \n    -   If the address at which the read/write was attempted is not in JIT-compiled code, the exception is mapped to the <xref:System.AccessViolationException> class.  \n  \n    -   If the address at which the read/write was attempted is in JIT-compiled code, but it is not in the OS Null partition area, the exception is mapped to the <xref:System.AccessViolationException> class.  \n  \n    -   If there is no `legacyNullReferencePolicy`, and the address at which the read/write was attempted is in JIT-compiled code and in the OS Null partition area, the exception is mapped to the <xref:System.NullReferenceException> class.  \n  \n Any SEH exception that is not automatically mapped to a specific exception is mapped to the <xref:System.Runtime.InteropServices.SEHException> class by default.  \n  \n For more information, search on \"unmanaged exceptions\" and \"Structured Exception Handling\" in the MSDN Library.  \n  \n Note that the <xref:System.Runtime.InteropServices.SEHException> class does not cause unmanaged C++ exception destructors to be called. To ensure that unmanaged C++ exception destructors are called, use the following syntax in the `catch` block.  \n  \n```vb  \nCatch   \n     ' Handle catch here.  \nEnd Try  \n```  \n  \n```csharp  \ncatch  \n{  \n     // Handle catch here.  \n}  \n```  \n  \n```cpp  \ncatch(â€¦)  \n{  \n     // Handle catch here.  \n}   \n```","nodes":[{"pos":[0,301],"content":"The <xref:System.Runtime.InteropServices.SEHException> class handles SEH errors that are thrown from unmanaged code, but that have not been mapped to another .NET Framework exception. The <xref:System.Runtime.InteropServices.SEHException> class also corresponds to the `HRESULT` `E_FAIL` (0x80004005).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.SEHException&gt;</ph> class handles SEH errors that are thrown from unmanaged code, but that have not been mapped to another .NET Framework exception.","pos":[0,183],"source":"The <xref:System.Runtime.InteropServices.SEHException> class handles SEH errors that are thrown from unmanaged code, but that have not been mapped to another .NET Framework exception."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.SEHException&gt;</ph> class also corresponds to the <ph id=\"ph2\">`HRESULT`</ph> <ph id=\"ph3\">`E_FAIL`</ph> (0x80004005).","pos":[184,301],"source":" The <xref:System.Runtime.InteropServices.SEHException> class also corresponds to the `HRESULT` `E_FAIL` (0x80004005)."}]},{"pos":[308,469],"content":"The .NET Framework often encounters unmanaged SEH exceptions that are automatically mapped to managed equivalents. There are two common unmanaged SEH exceptions:","nodes":[{"content":"The .NET Framework often encounters unmanaged SEH exceptions that are automatically mapped to managed equivalents. There are two common unmanaged SEH exceptions:","pos":[0,161],"nodes":[{"content":"The .NET Framework often encounters unmanaged SEH exceptions that are automatically mapped to managed equivalents.","pos":[0,114]},{"content":"There are two common unmanaged SEH exceptions:","pos":[115,161]}]}]},{"pos":[479,582],"content":"<ph id=\"ph1\">`STATUS_NO_MEMORY`</ph> exceptions are automatically mapped to the <ph id=\"ph2\">&lt;xref:System.OutOfMemoryException&gt;</ph> class.","source":"`STATUS_NO_MEMORY` exceptions are automatically mapped to the <xref:System.OutOfMemoryException> class."},{"pos":[592,665],"content":"<ph id=\"ph1\">`STATUS_ACCESS_VIOLATION`</ph> exceptions are automatically mapped as follows:","source":"`STATUS_ACCESS_VIOLATION` exceptions are automatically mapped as follows:"},{"pos":[679,805],"content":"If <ph id=\"ph1\">`legacyNullReferencePolicy`</ph> is applied, all access violations are mapped to the <ph id=\"ph2\">&lt;xref:System.NullReferenceException&gt;</ph> class.","source":"If `legacyNullReferencePolicy` is applied, all access violations are mapped to the <xref:System.NullReferenceException> class."},{"pos":[819,977],"content":"If the address at which the read/write was attempted is not in JIT-compiled code, the exception is mapped to the <xref:System.AccessViolationException> class.","nodes":[{"content":"If the address at which the read/write was attempted is not in JIT-compiled code, the exception is mapped to the <ph id=\"ph1\">&lt;xref:System.AccessViolationException&gt;</ph> class.","pos":[0,158],"source":"If the address at which the read/write was attempted is not in JIT-compiled code, the exception is mapped to the <xref:System.AccessViolationException> class."}]},{"pos":[991,1190],"content":"If the address at which the read/write was attempted is in JIT-compiled code, but it is not in the OS Null partition area, the exception is mapped to the <xref:System.AccessViolationException> class.","nodes":[{"content":"If the address at which the read/write was attempted is in JIT-compiled code, but it is not in the OS Null partition area, the exception is mapped to the <ph id=\"ph1\">&lt;xref:System.AccessViolationException&gt;</ph> class.","pos":[0,199],"source":"If the address at which the read/write was attempted is in JIT-compiled code, but it is not in the OS Null partition area, the exception is mapped to the <xref:System.AccessViolationException> class."}]},{"pos":[1204,1435],"content":"If there is no <ph id=\"ph1\">`legacyNullReferencePolicy`</ph>, and the address at which the read/write was attempted is in JIT-compiled code and in the OS Null partition area, the exception is mapped to the <ph id=\"ph2\">&lt;xref:System.NullReferenceException&gt;</ph> class.","source":"If there is no `legacyNullReferencePolicy`, and the address at which the read/write was attempted is in JIT-compiled code and in the OS Null partition area, the exception is mapped to the <xref:System.NullReferenceException> class."},{"pos":[1442,1602],"content":"Any SEH exception that is not automatically mapped to a specific exception is mapped to the <xref:System.Runtime.InteropServices.SEHException> class by default.","nodes":[{"content":"Any SEH exception that is not automatically mapped to a specific exception is mapped to the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.SEHException&gt;</ph> class by default.","pos":[0,160],"source":"Any SEH exception that is not automatically mapped to a specific exception is mapped to the <xref:System.Runtime.InteropServices.SEHException> class by default."}]},{"pos":[1609,1720],"content":"For more information, search on \"unmanaged exceptions\" and \"Structured Exception Handling\" in the MSDN Library.","nodes":[{"content":"For more information, search on \"unmanaged exceptions\" and \"Structured Exception Handling\" in the MSDN Library.","pos":[0,111]}]},{"pos":[1727,1972],"content":"Note that the <xref:System.Runtime.InteropServices.SEHException> class does not cause unmanaged C++ exception destructors to be called. To ensure that unmanaged C++ exception destructors are called, use the following syntax in the `catch` block.","nodes":[{"content":"Note that the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.SEHException&gt;</ph> class does not cause unmanaged C++ exception destructors to be called.","pos":[0,135],"source":"Note that the <xref:System.Runtime.InteropServices.SEHException> class does not cause unmanaged C++ exception destructors to be called."},{"content":"To ensure that unmanaged C++ exception destructors are called, use the following syntax in the <ph id=\"ph1\">`catch`</ph> block.","pos":[136,245],"source":" To ensure that unmanaged C++ exception destructors are called, use the following syntax in the `catch` block."}]}],"pos":[931,3147],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.SEHException\"></xref> class.","nodes":[{"pos":[0,105],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.SEHException\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.SEHException\"></xref> class."}],"pos":[5724,5830],"yaml":true},{"content":"The <xref:System.Runtime.InteropServices.SEHException> class inherits from the <xref:System.Runtime.InteropServices.ExternalException> class. This constructor sets the properties of the <xref:System.Exception> object to the values in the following table.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \n|<xref:System.Exception.Message%2A>|A localized error message string.|","nodes":[{"pos":[0,254],"content":"The <xref:System.Runtime.InteropServices.SEHException> class inherits from the <xref:System.Runtime.InteropServices.ExternalException> class. This constructor sets the properties of the <xref:System.Exception> object to the values in the following table.","nodes":[{"content":"The <xref:System.Runtime.InteropServices.SEHException> class inherits from the <xref:System.Runtime.InteropServices.ExternalException> class. This constructor sets the properties of the <xref:System.Exception> object to the values in the following table.","pos":[0,254],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.SEHException&gt;</ph> class inherits from the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.ExternalException&gt;</ph> class.","pos":[0,141],"source":"The <xref:System.Runtime.InteropServices.SEHException> class inherits from the <xref:System.Runtime.InteropServices.ExternalException> class."},{"content":"This constructor sets the properties of the <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph> object to the values in the following table.","pos":[142,254],"source":" This constructor sets the properties of the <xref:System.Exception> object to the values in the following table."}]}]},{"pos":[261,269],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[270,275],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[311,352],"content":"<xref:System.Exception.InnerException%2A>","nodes":[]},{"pos":[353,398],"content":"A null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic).","source":"A null reference (`Nothing` in Visual Basic)."},{"pos":[403,437],"content":"<xref:System.Exception.Message%2A>","nodes":[]},{"pos":[438,471],"content":"A localized error message string.","nodes":[{"content":"A localized error message string.","pos":[0,33]}]}],"pos":[5841,6321],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.SEHException\"></xref> class with a specified message.","nodes":[{"pos":[0,130],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.SEHException\"&gt;&lt;/xref&gt;</ph> class with a specified message.","source":"Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.SEHException\"></xref> class with a specified message."}],"pos":[8044,8175],"yaml":true},{"content":"<xref:System.Runtime.InteropServices.SEHException> inherits from <xref:System.Runtime.InteropServices.ExternalException>. This constructor sets the properties of the <xref:System.Exception> object as shown in the following table.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \n|<xref:System.Exception.Message%2A>|`message`.|","nodes":[{"pos":[0,229],"content":"<xref:System.Runtime.InteropServices.SEHException> inherits from <xref:System.Runtime.InteropServices.ExternalException>. This constructor sets the properties of the <xref:System.Exception> object as shown in the following table.","nodes":[{"content":"<xref:System.Runtime.InteropServices.SEHException> inherits from <xref:System.Runtime.InteropServices.ExternalException>. This constructor sets the properties of the <xref:System.Exception> object as shown in the following table.","pos":[0,229],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.SEHException&gt;</ph> inherits from <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.ExternalException&gt;</ph>.","pos":[0,121],"source":"<xref:System.Runtime.InteropServices.SEHException> inherits from <xref:System.Runtime.InteropServices.ExternalException>."},{"content":"This constructor sets the properties of the <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph> object as shown in the following table.","pos":[122,229],"source":" This constructor sets the properties of the <xref:System.Exception> object as shown in the following table."}]}]},{"pos":[236,244],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[245,250],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[286,327],"content":"<xref:System.Exception.InnerException%2A>","nodes":[]},{"pos":[328,373],"content":"A null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic).","source":"A null reference (`Nothing` in Visual Basic)."},{"pos":[378,412],"content":"<xref:System.Exception.Message%2A>","nodes":[]},{"pos":[413,423],"content":"<ph id=\"ph1\">`message`</ph>.","source":"`message`."}],"pos":[8186,8618],"yaml":true,"extradata":"MT"},{"content":"The message that indicates the reason for the exception.","nodes":[{"pos":[0,56],"content":"The message that indicates the reason for the exception.","nodes":[{"content":"The message that indicates the reason for the exception.","pos":[0,56]}]}],"pos":[8758,8815],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.SEHException\"></xref> class from serialization data.","nodes":[{"pos":[0,129],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.SEHException\"&gt;&lt;/xref&gt;</ph> class from serialization data.","source":"Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.SEHException\"></xref> class from serialization data."}],"pos":[10796,10926],"yaml":true},{"content":"This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see the <xref:System.Runtime.Serialization> namespace.  \n  \n <xref:System.Runtime.InteropServices.SEHException> inherits from <xref:System.Runtime.InteropServices.ExternalException>.","nodes":[{"pos":[0,190],"content":"This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see the <xref:System.Runtime.Serialization> namespace.","nodes":[{"content":"This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see the <xref:System.Runtime.Serialization> namespace.","pos":[0,190],"nodes":[{"content":"This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.","pos":[0,113]},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization&gt;</ph> namespace.","pos":[114,190],"source":" For more information, see the <xref:System.Runtime.Serialization> namespace."}]}]},{"pos":[197,318],"content":"<xref:System.Runtime.InteropServices.SEHException> inherits from <xref:System.Runtime.InteropServices.ExternalException>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.SEHException&gt;</ph> inherits from <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.ExternalException&gt;</ph>.","pos":[0,121],"source":"<xref:System.Runtime.InteropServices.SEHException> inherits from <xref:System.Runtime.InteropServices.ExternalException>."}]}],"pos":[10937,11260],"yaml":true,"extradata":"MT"},{"content":"The object that holds the serialized object data.","nodes":[{"pos":[0,49],"content":"The object that holds the serialized object data.","nodes":[{"content":"The object that holds the serialized object data.","pos":[0,49]}]}],"pos":[11525,11575],"yaml":true},{"content":"The contextual information about the source or destination.","nodes":[{"pos":[0,59],"content":"The contextual information about the source or destination.","nodes":[{"content":"The contextual information about the source or destination.","pos":[0,59]}]}],"pos":[11670,11730],"yaml":true},{"content":"<code>info</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;info&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>info</code> is `null`."}],"pos":[11909,11938],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.SEHException\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.","nodes":[{"pos":[0,211],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.SEHException\"&gt;&lt;/xref&gt;</ph> class with a specified error message and a reference to the inner exception that is the cause of this exception.","source":"Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.SEHException\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception."}],"pos":[13295,13507],"yaml":true},{"content":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.  \n  \n The following table shows the initial property values for an instance of <xref:System.Runtime.InteropServices.SEHException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|The inner exception reference.|  \n|<xref:System.Exception.Message%2A>|The error message string.|","nodes":[{"pos":[0,427],"content":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.","nodes":[{"content":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.","pos":[0,182],"source":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or <ph id=\"ph2\">`null`</ph> if the <ph id=\"ph3\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.","pos":[183,427],"source":" The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor."}]},{"pos":[434,558],"content":"The following table shows the initial property values for an instance of <xref:System.Runtime.InteropServices.SEHException>.","nodes":[{"content":"The following table shows the initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.SEHException&gt;</ph>.","pos":[0,124],"source":"The following table shows the initial property values for an instance of <xref:System.Runtime.InteropServices.SEHException>."}]},{"pos":[565,573],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[574,579],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[615,656],"content":"<xref:System.Exception.InnerException%2A>","nodes":[]},{"pos":[657,687],"content":"The inner exception reference.","nodes":[{"content":"The inner exception reference.","pos":[0,30]}]},{"pos":[692,726],"content":"<xref:System.Exception.Message%2A>","nodes":[]},{"pos":[727,752],"content":"The error message string.","nodes":[{"content":"The error message string.","pos":[0,25]}]}],"pos":[13518,14281],"yaml":true,"extradata":"MT"},{"content":"The error message that explains the reason for the exception.","nodes":[{"pos":[0,61],"content":"The error message that explains the reason for the exception.","nodes":[{"content":"The error message that explains the reason for the exception.","pos":[0,61]}]}],"pos":[14438,14500],"yaml":true},{"content":"The exception that is the cause of the current exception. If the <code>inner</code> parameter is not `null`, the current exception is raised in a `catch` block that handles the inner exception.","nodes":[{"pos":[0,193],"content":"The exception that is the cause of the current exception. If the <code>inner</code> parameter is not `null`, the current exception is raised in a `catch` block that handles the inner exception.","nodes":[{"content":"The exception that is the cause of the current exception.","pos":[0,57]},{"content":"If the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inner</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <ph id=\"ph2\">`null`</ph>, the current exception is raised in a <ph id=\"ph3\">`catch`</ph> block that handles the inner exception.","pos":[58,193],"source":" If the <code>inner</code> parameter is not `null`, the current exception is raised in a `catch` block that handles the inner exception."}]}],"pos":[14564,14758],"yaml":true},{"content":"Indicates whether the exception can be recovered from, and whether the code can continue from the point at which the exception was thrown.","nodes":[{"pos":[0,138],"content":"Indicates whether the exception can be recovered from, and whether the code can continue from the point at which the exception was thrown.","nodes":[{"content":"Indicates whether the exception can be recovered from, and whether the code can continue from the point at which the exception was thrown.","pos":[0,138]}]}],"pos":[16348,16487],"yaml":true},{"content":"If <xref:System.Runtime.InteropServices.SEHException.CanResume%2A> returns `true`, then a filtered exception handler can correct the problem that caused the exception, and the code will continue from the point at which the exception was thrown.","nodes":[{"pos":[0,244],"content":"If <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.SEHException.CanResume%2A&gt;</ph> returns <ph id=\"ph2\">`true`</ph>, then a filtered exception handler can correct the problem that caused the exception, and the code will continue from the point at which the exception was thrown.","source":"If <xref:System.Runtime.InteropServices.SEHException.CanResume%2A> returns `true`, then a filtered exception handler can correct the problem that caused the exception, and the code will continue from the point at which the exception was thrown."}],"pos":[16498,16743],"yaml":true,"extradata":"MT"},{"content":"Always `false`, because resumable exceptions are not implemented.","nodes":[{"pos":[0,65],"content":"Always <ph id=\"ph1\">`false`</ph>, because resumable exceptions are not implemented.","source":"Always `false`, because resumable exceptions are not implemented."}],"pos":[16877,16943],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.InteropServices.SEHException\n  commentId: T:System.Runtime.InteropServices.SEHException\n  id: SEHException\n  children:\n  - System.Runtime.InteropServices.SEHException.#ctor\n  - System.Runtime.InteropServices.SEHException.#ctor(System.String)\n  - System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)\n  - System.Runtime.InteropServices.SEHException.CanResume\n  langs:\n  - csharp\n  name: SEHException\n  nameWithType: SEHException\n  fullName: System.Runtime.InteropServices.SEHException\n  type: Class\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Represents structured exception handling (SEH) errors.\n  remarks: \"The <xref:System.Runtime.InteropServices.SEHException> class handles SEH errors that are thrown from unmanaged code, but that have not been mapped to another .NET Framework exception. The <xref:System.Runtime.InteropServices.SEHException> class also corresponds to the `HRESULT` `E_FAIL` (0x80004005).  \\n  \\n The .NET Framework often encounters unmanaged SEH exceptions that are automatically mapped to managed equivalents. There are two common unmanaged SEH exceptions:  \\n  \\n-   `STATUS_NO_MEMORY` exceptions are automatically mapped to the <xref:System.OutOfMemoryException> class.  \\n  \\n-   `STATUS_ACCESS_VIOLATION` exceptions are automatically mapped as follows:  \\n  \\n    -   If `legacyNullReferencePolicy` is applied, all access violations are mapped to the <xref:System.NullReferenceException> class.  \\n  \\n    -   If the address at which the read/write was attempted is not in JIT-compiled code, the exception is mapped to the <xref:System.AccessViolationException> class.  \\n  \\n    -   If the address at which the read/write was attempted is in JIT-compiled code, but it is not in the OS Null partition area, the exception is mapped to the <xref:System.AccessViolationException> class.  \\n  \\n    -   If there is no `legacyNullReferencePolicy`, and the address at which the read/write was attempted is in JIT-compiled code and in the OS Null partition area, the exception is mapped to the <xref:System.NullReferenceException> class.  \\n  \\n Any SEH exception that is not automatically mapped to a specific exception is mapped to the <xref:System.Runtime.InteropServices.SEHException> class by default.  \\n  \\n For more information, search on \\\"unmanaged exceptions\\\" and \\\"Structured Exception Handling\\\" in the MSDN Library.  \\n  \\n Note that the <xref:System.Runtime.InteropServices.SEHException> class does not cause unmanaged C++ exception destructors to be called. To ensure that unmanaged C++ exception destructors are called, use the following syntax in the `catch` block.  \\n  \\n```vb  \\nCatch   \\n     ' Handle catch here.  \\nEnd Try  \\n```  \\n  \\n```csharp  \\ncatch  \\n{  \\n     // Handle catch here.  \\n}  \\n```  \\n  \\n```cpp  \\ncatch(â€¦)  \\n{  \\n     // Handle catch here.  \\n}   \\n```\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class SEHException : System.Runtime.InteropServices.ExternalException\n  inheritance:\n  - System.Object\n  - System.Exception\n  implements: []\n  inheritedMembers:\n  - System.Exception.Data\n  - System.Exception.GetBaseException\n  - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Exception.GetType\n  - System.Exception.HelpLink\n  - System.Exception.HResult\n  - System.Exception.InnerException\n  - System.Exception.Message\n  - System.Exception.SerializeObjectState\n  - System.Exception.Source\n  - System.Exception.StackTrace\n  - System.Exception.TargetSite\n  - System.Exception.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SEHException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.SEHException.#ctor\n  commentId: M:System.Runtime.InteropServices.SEHException.#ctor\n  id: '#ctor'\n  parent: System.Runtime.InteropServices.SEHException\n  langs:\n  - csharp\n  name: SEHException()\n  nameWithType: SEHException.SEHException()\n  fullName: SEHException.SEHException()\n  type: Constructor\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.SEHException\"></xref> class.\n  remarks: \"The <xref:System.Runtime.InteropServices.SEHException> class inherits from the <xref:System.Runtime.InteropServices.ExternalException> class. This constructor sets the properties of the <xref:System.Exception> object to the values in the following table.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \\n|<xref:System.Exception.Message%2A>|A localized error message string.|\"\n  syntax:\n    content: public SEHException ();\n    parameters: []\n  overload: System.Runtime.InteropServices.SEHException.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SEHException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.SEHException.#ctor(System.String)\n  commentId: M:System.Runtime.InteropServices.SEHException.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Runtime.InteropServices.SEHException\n  langs:\n  - csharp\n  name: SEHException(String)\n  nameWithType: SEHException.SEHException(String)\n  fullName: SEHException.SEHException(String)\n  type: Constructor\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.SEHException\"></xref> class with a specified message.\n  remarks: \"<xref:System.Runtime.InteropServices.SEHException> inherits from <xref:System.Runtime.InteropServices.ExternalException>. This constructor sets the properties of the <xref:System.Exception> object as shown in the following table.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \\n|<xref:System.Exception.Message%2A>|`message`.|\"\n  syntax:\n    content: public SEHException (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: The message that indicates the reason for the exception.\n  overload: System.Runtime.InteropServices.SEHException.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SEHException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'\n  parent: System.Runtime.InteropServices.SEHException\n  langs:\n  - csharp\n  name: SEHException(SerializationInfo, StreamingContext)\n  nameWithType: SEHException.SEHException(SerializationInfo, StreamingContext)\n  fullName: SEHException.SEHException(SerializationInfo, StreamingContext)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.SEHException\"></xref> class from serialization data.\n  remarks: \"This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see the <xref:System.Runtime.Serialization> namespace.  \\n  \\n <xref:System.Runtime.InteropServices.SEHException> inherits from <xref:System.Runtime.InteropServices.ExternalException>.\"\n  syntax:\n    content: protected SEHException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The object that holds the serialized object data.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The contextual information about the source or destination.\n  overload: System.Runtime.InteropServices.SEHException.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>info</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SEHException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)\n  commentId: M:System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)\n  id: '#ctor(System.String,System.Exception)'\n  parent: System.Runtime.InteropServices.SEHException\n  langs:\n  - csharp\n  name: SEHException(String, Exception)\n  nameWithType: SEHException.SEHException(String, Exception)\n  fullName: SEHException.SEHException(String, Exception)\n  type: Constructor\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.SEHException\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.\n  remarks: \"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.  \\n  \\n The following table shows the initial property values for an instance of <xref:System.Runtime.InteropServices.SEHException>.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|The inner exception reference.|  \\n|<xref:System.Exception.Message%2A>|The error message string.|\"\n  syntax:\n    content: public SEHException (string message, Exception inner);\n    parameters:\n    - id: message\n      type: System.String\n      description: The error message that explains the reason for the exception.\n    - id: inner\n      type: System.Exception\n      description: The exception that is the cause of the current exception. If the <code>inner</code> parameter is not `null`, the current exception is raised in a `catch` block that handles the inner exception.\n  overload: System.Runtime.InteropServices.SEHException.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SEHException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.SEHException.CanResume\n  commentId: M:System.Runtime.InteropServices.SEHException.CanResume\n  id: CanResume\n  parent: System.Runtime.InteropServices.SEHException\n  langs:\n  - csharp\n  name: CanResume()\n  nameWithType: SEHException.CanResume()\n  fullName: SEHException.CanResume()\n  type: Method\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Indicates whether the exception can be recovered from, and whether the code can continue from the point at which the exception was thrown.\n  remarks: If <xref:System.Runtime.InteropServices.SEHException.CanResume%2A> returns `true`, then a filtered exception handler can correct the problem that caused the exception, and the code will continue from the point at which the exception was thrown.\n  syntax:\n    content: public virtual bool CanResume ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: Always `false`, because resumable exceptions are not implemented.\n  overload: System.Runtime.InteropServices.SEHException.CanResume*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SEHException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Runtime.InteropServices.SEHException.#ctor\n  parent: System.Runtime.InteropServices.SEHException\n  isExternal: false\n  name: SEHException()\n  nameWithType: SEHException.SEHException()\n  fullName: SEHException.SEHException()\n- uid: System.Runtime.InteropServices.SEHException.#ctor(System.String)\n  parent: System.Runtime.InteropServices.SEHException\n  isExternal: false\n  name: SEHException(String)\n  nameWithType: SEHException.SEHException(String)\n  fullName: SEHException.SEHException(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Runtime.InteropServices.SEHException\n  isExternal: false\n  name: SEHException(SerializationInfo, StreamingContext)\n  nameWithType: SEHException.SEHException(SerializationInfo, StreamingContext)\n  fullName: SEHException.SEHException(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)\n  parent: System.Runtime.InteropServices.SEHException\n  isExternal: false\n  name: SEHException(String, Exception)\n  nameWithType: SEHException.SEHException(String, Exception)\n  fullName: SEHException.SEHException(String, Exception)\n- uid: System.Runtime.InteropServices.SEHException.CanResume\n  parent: System.Runtime.InteropServices.SEHException\n  isExternal: false\n  name: CanResume()\n  nameWithType: SEHException.CanResume()\n  fullName: SEHException.CanResume()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.InteropServices.SEHException.#ctor*\n  parent: System.Runtime.InteropServices.SEHException\n  isExternal: false\n  name: SEHException\n  nameWithType: SEHException.SEHException\n  fullName: SEHException.SEHException\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SEHException.xml\n- uid: System.Runtime.InteropServices.SEHException.CanResume*\n  parent: System.Runtime.InteropServices.SEHException\n  isExternal: false\n  name: CanResume\n  nameWithType: SEHException.CanResume\n  fullName: SEHException.CanResume\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/SEHException.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Exception.GetType\n  parent: System.Exception\n  isExternal: false\n  name: GetType()\n  nameWithType: Exception.GetType()\n  fullName: Exception.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Exception.ToString\n  parent: System.Exception\n  isExternal: false\n  name: ToString()\n  nameWithType: Exception.ToString()\n  fullName: Exception.ToString()\n- uid: System.Exception.Data\n  parent: System.Exception\n  isExternal: false\n  name: Data\n  nameWithType: Exception.Data\n  fullName: Exception.Data\n- uid: System.Exception.GetBaseException\n  parent: System.Exception\n  isExternal: false\n  name: GetBaseException()\n  nameWithType: Exception.GetBaseException()\n  fullName: Exception.GetBaseException()\n- uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Exception\n  isExternal: false\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: Exception.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: Exception.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Exception.HelpLink\n  parent: System.Exception\n  isExternal: false\n  name: HelpLink\n  nameWithType: Exception.HelpLink\n  fullName: Exception.HelpLink\n- uid: System.Exception.HResult\n  parent: System.Exception\n  isExternal: false\n  name: HResult\n  nameWithType: Exception.HResult\n  fullName: Exception.HResult\n- uid: System.Exception.InnerException\n  parent: System.Exception\n  isExternal: false\n  name: InnerException\n  nameWithType: Exception.InnerException\n  fullName: Exception.InnerException\n- uid: System.Exception.Message\n  parent: System.Exception\n  isExternal: false\n  name: Message\n  nameWithType: Exception.Message\n  fullName: Exception.Message\n- uid: System.Exception.SerializeObjectState\n  parent: System.Exception\n  isExternal: false\n  name: SerializeObjectState\n  nameWithType: Exception.SerializeObjectState\n  fullName: Exception.SerializeObjectState\n- uid: System.Exception.Source\n  parent: System.Exception\n  isExternal: false\n  name: Source\n  nameWithType: Exception.Source\n  fullName: Exception.Source\n- uid: System.Exception.StackTrace\n  parent: System.Exception\n  isExternal: false\n  name: StackTrace\n  nameWithType: Exception.StackTrace\n  fullName: Exception.StackTrace\n- uid: System.Exception.TargetSite\n  parent: System.Exception\n  isExternal: false\n  name: TargetSite\n  nameWithType: Exception.TargetSite\n  fullName: Exception.TargetSite\n"}