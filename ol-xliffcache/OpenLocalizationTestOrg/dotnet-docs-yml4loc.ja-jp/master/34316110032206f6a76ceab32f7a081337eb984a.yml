### YamlMime:ManagedReference
items:
- uid: System.Reflection.Module
  commentId: T:System.Reflection.Module
  id: Module
  children:
  - System.Reflection.Module.#ctor
  - System.Reflection.Module.Assembly
  - System.Reflection.Module.CustomAttributes
  - System.Reflection.Module.Equals(System.Object)
  - System.Reflection.Module.FilterTypeName
  - System.Reflection.Module.FilterTypeNameIgnoreCase
  - System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)
  - System.Reflection.Module.FullyQualifiedName
  - System.Reflection.Module.GetCustomAttributes(System.Boolean)
  - System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.Module.GetCustomAttributesData
  - System.Reflection.Module.GetField(System.String)
  - System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)
  - System.Reflection.Module.GetFields(System.Reflection.BindingFlags)
  - System.Reflection.Module.GetFields
  - System.Reflection.Module.GetHashCode
  - System.Reflection.Module.GetMethod(System.String)
  - System.Reflection.Module.GetMethod(System.String,System.Type[])
  - System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.Module.GetMethods
  - System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)
  - System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
  - System.Reflection.Module.GetSignerCertificate
  - System.Reflection.Module.GetType(System.String)
  - System.Reflection.Module.GetType(System.String,System.Boolean)
  - System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)
  - System.Reflection.Module.GetTypes
  - System.Reflection.Module.IsDefined(System.Type,System.Boolean)
  - System.Reflection.Module.IsResource
  - System.Reflection.Module.MDStreamVersion
  - System.Reflection.Module.MetadataToken
  - System.Reflection.Module.ModuleHandle
  - System.Reflection.Module.ModuleVersionId
  - System.Reflection.Module.Name
  - System.Reflection.Module.op_Equality(System.Reflection.Module,System.Reflection.Module)
  - System.Reflection.Module.op_Inequality(System.Reflection.Module,System.Reflection.Module)
  - System.Reflection.Module.ResolveField(System.Int32)
  - System.Reflection.Module.ResolveField(System.Int32,System.Type[],System.Type[])
  - System.Reflection.Module.ResolveMember(System.Int32)
  - System.Reflection.Module.ResolveMember(System.Int32,System.Type[],System.Type[])
  - System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])
  - System.Reflection.Module.ResolveMethod(System.Int32)
  - System.Reflection.Module.ResolveSignature(System.Int32)
  - System.Reflection.Module.ResolveString(System.Int32)
  - System.Reflection.Module.ResolveType(System.Int32)
  - System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])
  - System.Reflection.Module.ScopeName
  - System.Reflection.Module.ToString
  - System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  - System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.Module.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  - System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  langs:
  - csharp
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
  type: Class
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Performs reflection on a module.
  remarks: "A module is a portable executable file, such as type.dll or application.exe, consisting of one or more classes and interfaces. There may be multiple namespaces contained in a single module, and a namespace may span multiple modules.  \n  \n One or more modules deployed as a unit compose an assembly. For information about creating an assembly with more than one module, see [Multifile Assemblies](~/docs/framework/app-domains/multifile-assemblies.md).  \n  \n Note that a .NET Framework module is not the same as a module in Visual Basic, which is used by a programmers to organize functions and subroutines in an application."
  example:
  - "The following code examples show how to use reflection to get information about modules:  \n  \n [!code-csharp[System.Reflection.Module#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module/CS/source.cs#1)]\n [!code-vb[System.Reflection.Module#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class Module : System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._Module, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  derivedClasses:
  - System.Reflection.Emit.ModuleBuilder
  implements:
  - System.Reflection.ICustomAttributeProvider
  - System.Runtime.InteropServices._Module
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)
  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)
  - System.Reflection.ModuleExtensions.GetModuleVersionId(System.Reflection.Module)
  - System.Reflection.ModuleExtensions.HasModuleVersionId(System.Reflection.Module)
  attributes:
  - type: System.Runtime.InteropServices.ClassInterfaceAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.#ctor
  commentId: M:System.Reflection.Module.#ctor
  id: '#ctor'
  parent: System.Reflection.Module
  langs:
  - csharp
  name: Module()
  nameWithType: Module.Module()
  fullName: Module.Module()
  type: Constructor
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Initializes a new instance of the <xref href="System.Reflection.Module"></xref> class.
  remarks: This constructor is invoked by derived classes during the construction of <xref:System.Reflection.Module> objects.
  syntax:
    content: protected Module ();
    parameters: []
  overload: System.Reflection.Module.#ctor*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.Assembly
  commentId: P:System.Reflection.Module.Assembly
  id: Assembly
  parent: System.Reflection.Module
  langs:
  - csharp
  name: Assembly
  nameWithType: Module.Assembly
  fullName: Module.Assembly
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the appropriate <xref href="System.Reflection.Assembly"></xref> for this instance of <xref href="System.Reflection.Module"></xref>.
  remarks: ''
  example:
  - "The following example displays the full name of the specified assembly in the specified module.  \n  \n [!code-cpp[System.Reflection.Module.Assembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.Assembly Example/CPP/class1.cpp#1)]\n [!code-csharp[System.Reflection.Module.Assembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.Assembly Example/CS/class1.cs#1)]\n [!code-vb[System.Reflection.Module.Assembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.Assembly Example/VB/class1.vb#1)]"
  syntax:
    content: public virtual System.Reflection.Assembly Assembly { get; }
    return:
      type: System.Reflection.Assembly
      description: An `Assembly` object.
  overload: System.Reflection.Module.Assembly*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.CustomAttributes
  commentId: P:System.Reflection.Module.CustomAttributes
  id: CustomAttributes
  parent: System.Reflection.Module
  langs:
  - csharp
  name: CustomAttributes
  nameWithType: Module.CustomAttributes
  fullName: Module.CustomAttributes
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a collection that contains this module's custom attributes.
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData> CustomAttributes { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
      description: A collection that contains this module's custom attributes.
  overload: System.Reflection.Module.CustomAttributes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.Equals(System.Object)
  commentId: M:System.Reflection.Module.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Module.Equals(Object)
  fullName: Module.Equals(Object)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Determines whether this module and the specified object are equal.
  syntax:
    content: public override bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: The object to compare with this instance.
    return:
      type: System.Boolean
      description: '`true` if <code>o</code> is equal to this instance; otherwise, `false`.'
  overload: System.Reflection.Module.Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.FilterTypeName
  commentId: F:System.Reflection.Module.FilterTypeName
  id: FilterTypeName
  parent: System.Reflection.Module
  langs:
  - csharp
  name: FilterTypeName
  nameWithType: Module.FilterTypeName
  fullName: Module.FilterTypeName
  type: Field
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: A `TypeFilter` object that filters the list of types defined in this module based upon the name. This field is case-sensitive and read-only.
  remarks: The filter supports a trailing "*" wildcard.
  example:
  - "The following example displays the module names that match the specified search criteria.  \n  \n [!code-cpp[System.Reflection.Module.FilterTypeName Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.FilterTypeName Example/CPP/class1.cpp#1)]\n [!code-csharp[System.Reflection.Module.FilterTypeName Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.FilterTypeName Example/CS/class1.cs#1)]\n [!code-vb[System.Reflection.Module.FilterTypeName Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.FilterTypeName Example/VB/class1.vb#1)]"
  syntax:
    content: public static readonly System.Reflection.TypeFilter FilterTypeName;
    return:
      type: System.Reflection.TypeFilter
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.FilterTypeNameIgnoreCase
  commentId: F:System.Reflection.Module.FilterTypeNameIgnoreCase
  id: FilterTypeNameIgnoreCase
  parent: System.Reflection.Module
  langs:
  - csharp
  name: FilterTypeNameIgnoreCase
  nameWithType: Module.FilterTypeNameIgnoreCase
  fullName: Module.FilterTypeNameIgnoreCase
  type: Field
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: A `TypeFilter` object that filters the list of types defined in this module based upon the name. This field is case-insensitive and read-only.
  remarks: The filter supports a trailing "*" wildcard.
  example:
  - "The following example displays the module names that match the specified search criteria, ignoring the case.  \n  \n [!code-cpp[System.Reflection.Module.FilterTypeNameIgnoreCase Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.FilterTypeNameIgnoreCase Example/CPP/class1.cpp#1)]\n [!code-csharp[System.Reflection.Module.FilterTypeNameIgnoreCase Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.FilterTypeNameIgnoreCase Example/CS/class1.cs#1)]\n [!code-vb[System.Reflection.Module.FilterTypeNameIgnoreCase Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.FilterTypeNameIgnoreCase Example/VB/class1.vb#1)]"
  syntax:
    content: public static readonly System.Reflection.TypeFilter FilterTypeNameIgnoreCase;
    return:
      type: System.Reflection.TypeFilter
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)
  commentId: M:System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)
  id: FindTypes(System.Reflection.TypeFilter,System.Object)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: FindTypes(TypeFilter, Object)
  nameWithType: Module.FindTypes(TypeFilter, Object)
  fullName: Module.FindTypes(TypeFilter, Object)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns an array of classes accepted by the given filter and filter criteria.
  remarks: "<xref:System.Reflection.ReflectionTypeLoadException> is a special class load exception. The `ReflectionTypeLoadException.Types` property contains the array of classes that were defined in the module and were loaded. This array may contain some null values. The `ReflectionTypeLoadException.LoaderExceptions` property is an array of exceptions that represent the exceptions that were thrown by the class loader. The holes in the class array line up with the exceptions.  \n  \n The delegate given by `filter` is called for each class in the module, passing along the `Type` object representing the class as well as the given `filterCriteria`. If `filter` returns a particular class, that class will be included in the returned array. If `filter` returns `null`, all classes are returned and `filterCriteria` is ignored.  \n  \n `FindTypes` cannot be used to look up parameterized types such as arrays."
  example:
  - "The following example demonstrates the `FindTypes` method.  \n  \n [!code-cpp[System.Reflection.Module.FilterTypeName Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.FilterTypeName Example/CPP/class1.cpp#1)]\n [!code-csharp[System.Reflection.Module.FilterTypeName Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.FilterTypeName Example/CS/class1.cs#1)]\n [!code-vb[System.Reflection.Module.FilterTypeName Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.FilterTypeName Example/VB/class1.vb#1)]"
  syntax:
    content: public virtual Type[] FindTypes (System.Reflection.TypeFilter filter, object filterCriteria);
    parameters:
    - id: filter
      type: System.Reflection.TypeFilter
      description: The delegate used to filter the classes.
    - id: filterCriteria
      type: System.Object
      description: An Object used to filter the classes.
    return:
      type: System.Type[]
      description: An array of type `Type` containing classes that were accepted by the filter.
  overload: System.Reflection.Module.FindTypes*
  exceptions:
  - type: System.Reflection.ReflectionTypeLoadException
    commentId: T:System.Reflection.ReflectionTypeLoadException
    description: One or more classes in a module could not be loaded.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.FullyQualifiedName
  commentId: P:System.Reflection.Module.FullyQualifiedName
  id: FullyQualifiedName
  parent: System.Reflection.Module
  langs:
  - csharp
  name: FullyQualifiedName
  nameWithType: Module.FullyQualifiedName
  fullName: Module.FullyQualifiedName
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a string representing the fully qualified name and path to this module.
  remarks: "To get the name without the path, use <xref:System.Reflection.Module.Name%2A>.  \n  \n If the assembly for this module was loaded from a byte array then the `FullyQualifiedName` for the module will be: \\<Unknown>.  \n  \n> [!NOTE]\n>  The case of module name is platform-dependent."
  example:
  - "The following example displays the fully qualified name of the specified module.  \n  \n [!code-cpp[System.Reflection.Module.FullyQualifiedName#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.FullyQualifiedName/CPP/class1.cpp#1)]\n [!code-csharp[System.Reflection.Module.FullyQualifiedName#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.FullyQualifiedName/CS/class1.cs#1)]\n [!code-vb[System.Reflection.Module.FullyQualifiedName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.FullyQualifiedName/VB/class1.vb#1)]"
  syntax:
    content: public virtual string FullyQualifiedName { get; }
    return:
      type: System.String
      description: The fully qualified module name.
  overload: System.Reflection.Module.FullyQualifiedName*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have the required permissions.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.GetCustomAttributes(System.Boolean)
  commentId: M:System.Reflection.Module.GetCustomAttributes(System.Boolean)
  id: GetCustomAttributes(System.Boolean)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: GetCustomAttributes(Boolean)
  nameWithType: Module.GetCustomAttributes(Boolean)
  fullName: Module.GetCustomAttributes(Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns all custom attributes.
  remarks: ''
  example:
  - "The following example displays the module names that match the specified search criteria.  \n  \n [!code-cpp[System.Reflection.Module.GetCustomAttributes 1Arg Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.GetCustomAttributes 1Arg Example/CPP/class1.cpp#1)]\n [!code-csharp[System.Reflection.Module.GetCustomAttributes 1Arg Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.GetCustomAttributes 1Arg Example/CS/class1.cs#1)]\n [!code-vb[System.Reflection.Module.GetCustomAttributes 1Arg Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.GetCustomAttributes 1Arg Example/VB/class1.vb#1)]"
  syntax:
    content: public virtual object[] GetCustomAttributes (bool inherit);
    parameters:
    - id: inherit
      type: System.Boolean
      description: This argument is ignored for objects of this type.
    return:
      type: System.Object[]
      description: An array of type `Object` containing all custom attributes.
  overload: System.Reflection.Module.GetCustomAttributes*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)
  commentId: M:System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)
  id: GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: GetCustomAttributes(Type, Boolean)
  nameWithType: Module.GetCustomAttributes(Type, Boolean)
  fullName: Module.GetCustomAttributes(Type, Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets custom attributes of the specified type.
  remarks: ''
  example:
  - "The following example displays the module names of the specified type that match the specified search criteria.  \n  \n [!code-cpp[System.Reflection.Module.GetCustomAttributes 2Arg Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.GetCustomAttributes 2Arg Example/CPP/class1.cpp#1)]\n [!code-csharp[System.Reflection.Module.GetCustomAttributes 2Arg Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.GetCustomAttributes 2Arg Example/CS/class1.cs#1)]\n [!code-vb[System.Reflection.Module.GetCustomAttributes 2Arg Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.GetCustomAttributes 2Arg Example/VB/class1.vb#1)]"
  syntax:
    content: public virtual object[] GetCustomAttributes (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: The type of attribute to get.
    - id: inherit
      type: System.Boolean
      description: This argument is ignored for objects of this type.
    return:
      type: System.Object[]
      description: An array of type `Object` containing all custom attributes of the specified type.
  overload: System.Reflection.Module.GetCustomAttributes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>attributeType</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>attributeType</code> is not a <xref href="System.Type"></xref> object supplied by the runtime. For example, <code>attributeType</code> is a <xref href="System.Reflection.Emit.TypeBuilder"></xref> object.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.GetCustomAttributesData
  commentId: M:System.Reflection.Module.GetCustomAttributesData
  id: GetCustomAttributesData
  parent: System.Reflection.Module
  langs:
  - csharp
  name: GetCustomAttributesData()
  nameWithType: Module.GetCustomAttributesData()
  fullName: Module.GetCustomAttributesData()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns a list of <xref href="System.Reflection.CustomAttributeData"></xref> objects for the current module, which can be used in the reflection-only context.
  remarks: Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context. Methods such as <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName> and <xref:System.Reflection.Module.GetCustomAttributes%2A?displayProperty=fullName> cannot be used in such cases, because they create instances of the attributes. Code in the reflection-only context cannot be executed. For more information and example code, see the <xref:System.Reflection.CustomAttributeData> class.
  syntax:
    content: public virtual System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
      description: A generic list of <xref href="System.Reflection.CustomAttributeData"></xref> objects representing data about the attributes that have been applied to the current module.
  overload: System.Reflection.Module.GetCustomAttributesData*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.GetField(System.String)
  commentId: M:System.Reflection.Module.GetField(System.String)
  id: GetField(System.String)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: GetField(String)
  nameWithType: Module.GetField(String)
  fullName: Module.GetField(String)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns a field having the specified name.
  syntax:
    content: public System.Reflection.FieldInfo GetField (string name);
    parameters:
    - id: name
      type: System.String
      description: The field name.
    return:
      type: System.Reflection.FieldInfo
      description: A `FieldInfo` object having the specified name, or `null` if the field does not exist.
  overload: System.Reflection.Module.GetField*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>name</code> parameter is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)
  id: GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: GetField(String, BindingFlags)
  nameWithType: Module.GetField(String, BindingFlags)
  fullName: Module.GetField(String, BindingFlags)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns a field having the specified name and binding attributes.
  syntax:
    content: public virtual System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: The field name.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: One of the `BindingFlags` bit flags used to control the search.
    return:
      type: System.Reflection.FieldInfo
      description: A `FieldInfo` object having the specified name and binding attributes, or `null` if the field does not exist.
  overload: System.Reflection.Module.GetField*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>name</code> parameter is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.GetFields(System.Reflection.BindingFlags)
  commentId: M:System.Reflection.Module.GetFields(System.Reflection.BindingFlags)
  id: GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: GetFields(BindingFlags)
  nameWithType: Module.GetFields(BindingFlags)
  fullName: Module.GetFields(BindingFlags)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the global fields defined on the module that match the specified binding flags.
  remarks: The <xref:System.Reflection.Module.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.
  syntax:
    content: public virtual System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingFlags);
    parameters:
    - id: bindingFlags
      type: System.Reflection.BindingFlags
      description: A bitwise combination of <xref href="System.Reflection.BindingFlags"></xref> values that limit the search.
    return:
      type: System.Reflection.FieldInfo[]
      description: An array of type <xref href="System.Reflection.FieldInfo"></xref> representing the global fields defined on the module that match the specified binding flags; if no global fields match the binding flags, an empty array is returned.
  overload: System.Reflection.Module.GetFields*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.GetFields
  commentId: M:System.Reflection.Module.GetFields
  id: GetFields
  parent: System.Reflection.Module
  langs:
  - csharp
  name: GetFields()
  nameWithType: Module.GetFields()
  fullName: Module.GetFields()
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the global fields defined on the module.
  remarks: The <xref:System.Reflection.Module.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.
  syntax:
    content: public System.Reflection.FieldInfo[] GetFields ();
    parameters: []
    return:
      type: System.Reflection.FieldInfo[]
      description: An array of <xref href="System.Reflection.FieldInfo"></xref> objects representing the global fields defined on the module; if there are no global fields, an empty array is returned.
  overload: System.Reflection.Module.GetFields*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.GetHashCode
  commentId: M:System.Reflection.Module.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Module
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Module.GetHashCode()
  fullName: Module.GetHashCode()
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the hash code for this instance.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overload: System.Reflection.Module.GetHashCode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.GetMethod(System.String)
  commentId: M:System.Reflection.Module.GetMethod(System.String)
  id: GetMethod(System.String)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: GetMethod(String)
  nameWithType: Module.GetMethod(String)
  fullName: Module.GetMethod(String)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns a method having the specified name.
  syntax:
    content: public System.Reflection.MethodInfo GetMethod (string name);
    parameters:
    - id: name
      type: System.String
      description: The method name.
    return:
      type: System.Reflection.MethodInfo
      description: A `MethodInfo` object having the specified name, or `null` if the method does not exist.
  overload: System.Reflection.Module.GetMethod*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.GetMethod(System.String,System.Type[])
  commentId: M:System.Reflection.Module.GetMethod(System.String,System.Type[])
  id: GetMethod(System.String,System.Type[])
  parent: System.Reflection.Module
  langs:
  - csharp
  name: GetMethod(String, Type[])
  nameWithType: Module.GetMethod(String, Type[])
  fullName: Module.GetMethod(String, Type[])
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns a method having the specified name and parameter types.
  syntax:
    content: public System.Reflection.MethodInfo GetMethod (string name, Type[] types);
    parameters:
    - id: name
      type: System.String
      description: The method name.
    - id: types
      type: System.Type[]
      description: The parameter types to search for.
    return:
      type: System.Reflection.MethodInfo
      description: A `MethodInfo` object in accordance with the specified criteria, or `null` if the method does not exist.
  overload: System.Reflection.Module.GetMethod*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`, <code>types</code> is `null`, or <code>types</code> (i) is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  commentId: M:System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  id: GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Module
  langs:
  - csharp
  name: GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  nameWithType: Module.GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  fullName: Module.GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns a method having the specified name, binding information, calling convention, and parameter types and modifiers.
  syntax:
    content: public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: The method name.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: One of the `BindingFlags` bit flags used to control the search.
    - id: binder
      type: System.Reflection.Binder
      description: An object that implements `Binder`, containing properties related to this method.
    - id: callConvention
      type: System.Reflection.CallingConventions
      description: The calling convention for the method.
    - id: types
      type: System.Type[]
      description: The parameter types to search for.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.
    return:
      type: System.Reflection.MethodInfo
      description: A `MethodInfo` object in accordance with the specified criteria, or `null` if the method does not exist.
  overload: System.Reflection.Module.GetMethod*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`, <code>types</code> is `null`, or <code>types</code> (i) is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  commentId: M:System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  id: GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Module
  langs:
  - csharp
  name: GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  nameWithType: Module.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  fullName: Module.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the method implementation in accordance with the specified criteria.
  syntax:
    content: protected virtual System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: The method name.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: One of the `BindingFlags` bit flags used to control the search.
    - id: binder
      type: System.Reflection.Binder
      description: An object that implements `Binder`, containing properties related to this method.
    - id: callConvention
      type: System.Reflection.CallingConventions
      description: The calling convention for the method.
    - id: types
      type: System.Type[]
      description: The parameter types to search for.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.
    return:
      type: System.Reflection.MethodInfo
      description: A `MethodInfo` object containing implementation information as specified, or `null` if the method does not exist.
  overload: System.Reflection.Module.GetMethodImpl*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: <code>types</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.GetMethods
  commentId: M:System.Reflection.Module.GetMethods
  id: GetMethods
  parent: System.Reflection.Module
  langs:
  - csharp
  name: GetMethods()
  nameWithType: Module.GetMethods()
  fullName: Module.GetMethods()
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the global methods defined on the module.
  syntax:
    content: public System.Reflection.MethodInfo[] GetMethods ();
    parameters: []
    return:
      type: System.Reflection.MethodInfo[]
      description: An array of <xref href="System.Reflection.MethodInfo"></xref> objects representing all the global methods defined on the module; if there are no global methods, an empty array is returned.
  overload: System.Reflection.Module.GetMethods*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)
  commentId: M:System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)
  id: GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: GetMethods(BindingFlags)
  nameWithType: Module.GetMethods(BindingFlags)
  fullName: Module.GetMethods(BindingFlags)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the global methods defined on the module that match the specified binding flags.
  syntax:
    content: public virtual System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingFlags);
    parameters:
    - id: bindingFlags
      type: System.Reflection.BindingFlags
      description: A bitwise combination of <xref href="System.Reflection.BindingFlags"></xref> values that limit the search.
    return:
      type: System.Reflection.MethodInfo[]
      description: An array of type <xref href="System.Reflection.MethodInfo"></xref> representing the global methods defined on the module that match the specified binding flags; if no global methods match the binding flags, an empty array is returned.
  overload: System.Reflection.Module.GetMethods*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: Module.GetObjectData(SerializationInfo, StreamingContext)
  fullName: Module.GetObjectData(SerializationInfo, StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Provides an <xref href="System.Runtime.Serialization.ISerializable"></xref> implementation for serialized objects.
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The information and data needed to serialize or deserialize an object.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The context for the serialization.
  overload: System.Reflection.Module.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>info</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
  commentId: M:System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
  id: GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: GetPEKind(PortableExecutableKinds, ImageFileMachine)
  nameWithType: Module.GetPEKind(PortableExecutableKinds, ImageFileMachine)
  fullName: Module.GetPEKind(PortableExecutableKinds, ImageFileMachine)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a pair of values indicating the nature of the code in a module and the platform targeted by the module.
  syntax:
    content: public virtual void GetPEKind (out System.Reflection.PortableExecutableKinds peKind, out System.Reflection.ImageFileMachine machine);
    parameters:
    - id: peKind
      type: System.Reflection.PortableExecutableKinds
      description: When this method returns, a combination of the <xref href="System.Reflection.PortableExecutableKinds"></xref> values indicating the nature of the code in the module.
    - id: machine
      type: System.Reflection.ImageFileMachine
      description: When this method returns, one of the <xref href="System.Reflection.ImageFileMachine"></xref> values indicating the platform targeted by the module.
  overload: System.Reflection.Module.GetPEKind*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.GetSignerCertificate
  commentId: M:System.Reflection.Module.GetSignerCertificate
  id: GetSignerCertificate
  parent: System.Reflection.Module
  langs:
  - csharp
  name: GetSignerCertificate()
  nameWithType: Module.GetSignerCertificate()
  fullName: Module.GetSignerCertificate()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns an `X509Certificate` object corresponding to the certificate included in the Authenticode signature of the assembly which this module belongs to. If the assembly has not been Authenticode signed, `null` is returned.
  syntax:
    content: public virtual System.Security.Cryptography.X509Certificates.X509Certificate GetSignerCertificate ();
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: An `X509Certificate` object, or `null` if the assembly to which this module belongs has not been Authenticode signed.
  overload: System.Reflection.Module.GetSignerCertificate*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.GetType(System.String)
  commentId: M:System.Reflection.Module.GetType(System.String)
  id: GetType(System.String)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: GetType(String)
  nameWithType: Module.GetType(String)
  fullName: Module.GetType(String)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the specified type, performing a case-sensitive search.
  remarks: "> [!NOTE]\n>  If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).  \n  \n A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>. Calling <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName> on the module that contains the manifest will not search the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>."
  example:
  - "The following example displays the name of a type in the specified module.  \n  \n [!code-cpp[System.Reflection.Module.GetType 1Arg Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.GetType 1Arg Example/CPP/class1.cpp#1)]\n [!code-csharp[System.Reflection.Module.GetType 1Arg Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.GetType 1Arg Example/CS/class1.cs#1)]\n [!code-vb[System.Reflection.Module.GetType 1Arg Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.GetType 1Arg Example/VB/class1.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public virtual Type GetType (string className);
    parameters:
    - id: className
      type: System.String
      description: The name of the type to locate. The name must be fully qualified with the namespace.
    return:
      type: System.Type
      description: A `Type` object representing the given type, if the type is in this module; otherwise, `null`.
  overload: System.Reflection.Module.GetType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>className</code> is `null`.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The class initializers are invoked and an exception is thrown.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>className</code> is a zero-length string.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>className</code> requires a dependent assembly that could not be found.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "<code>className</code> requires a dependent assembly that was found but could not be loaded.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context, and <code>className</code> requires a dependent assembly that was not preloaded."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>className</code> requires a dependent assembly, but the file is not a valid assembly.  \n  \n -or-  \n  \n <code>className</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.GetType(System.String,System.Boolean)
  commentId: M:System.Reflection.Module.GetType(System.String,System.Boolean)
  id: GetType(System.String,System.Boolean)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: GetType(String, Boolean)
  nameWithType: Module.GetType(String, Boolean)
  fullName: Module.GetType(String, Boolean)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the specified type, searching the module with the specified case sensitivity.
  remarks: "> [!NOTE]\n>  If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).  \n  \n A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>. Calling <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName> on the module that contains the manifest will not search the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>."
  example:
  - "The following example displays the name of a type in the specified module, specifying `false` for the `ignoreCase` parameter so that case will not be ignored.  \n  \n [!code-cpp[System.Reflection.Module.GetType 2Arg Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.GetType 2Arg Example/CPP/class1.cpp#1)]\n [!code-csharp[System.Reflection.Module.GetType 2Arg Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.GetType 2Arg Example/CS/class1.cs#1)]\n [!code-vb[System.Reflection.Module.GetType 2Arg Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.GetType 2Arg Example/VB/class1.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public virtual Type GetType (string className, bool ignoreCase);
    parameters:
    - id: className
      type: System.String
      description: The name of the type to locate. The name must be fully qualified with the namespace.
    - id: ignoreCase
      type: System.Boolean
      description: '`true` for case-insensitive search; otherwise, `false`.'
    return:
      type: System.Type
      description: A `Type` object representing the given type, if the type is in this module; otherwise, `null`.
  overload: System.Reflection.Module.GetType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>className</code> is `null`.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The class initializers are invoked and an exception is thrown.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>className</code> is a zero-length string.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>className</code> requires a dependent assembly that could not be found.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "<code>className</code> requires a dependent assembly that was found but could not be loaded.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context, and <code>className</code> requires a dependent assembly that was not preloaded."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>className</code> requires a dependent assembly, but the file is not a valid assembly.  \n  \n -or-  \n  \n <code>className</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)
  commentId: M:System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)
  id: GetType(System.String,System.Boolean,System.Boolean)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: GetType(String, Boolean, Boolean)
  nameWithType: Module.GetType(String, Boolean, Boolean)
  fullName: Module.GetType(String, Boolean, Boolean)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the specified type, specifying whether to make a case-sensitive search of the module and whether to throw an exception if the type cannot be found.
  remarks: "The `throwOnError` parameter affects only what happens when the type is not found. It does not affect any other exceptions that might be thrown. In particular, if the type is found but cannot be loaded, <xref:System.TypeLoadException> can be thrown even if `throwOnError` is `false`.  \n  \n> [!NOTE]\n>  If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).  \n  \n A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>. Calling <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName> on the module that contains the manifest will not search the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>."
  example:
  - "The following example displays the name of a type in the specified module. The `throwOnError` and `ignoreCase` parameters are specified as `false`.  \n  \n [!code-cpp[System.Reflection.Module.GetType 3Arg Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.GetType 3Arg Example/CPP/class1.cpp#1)]\n [!code-csharp[System.Reflection.Module.GetType 3Arg Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.GetType 3Arg Example/CS/class1.cs#1)]\n [!code-vb[System.Reflection.Module.GetType 3Arg Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.GetType 3Arg Example/VB/class1.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public virtual Type GetType (string className, bool throwOnError, bool ignoreCase);
    parameters:
    - id: className
      type: System.String
      description: The name of the type to locate. The name must be fully qualified with the namespace.
    - id: throwOnError
      type: System.Boolean
      description: '`true` to throw an exception if the type cannot be found; `false` to return `null`.'
    - id: ignoreCase
      type: System.Boolean
      description: '`true` for case-insensitive search; otherwise, `false`.'
    return:
      type: System.Type
      description: A <xref href="System.Type"></xref> object representing the specified type, if the type is declared in this module; otherwise, `null`.
  overload: System.Reflection.Module.GetType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>className</code> is `null`.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The class initializers are invoked and an exception is thrown.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>className</code> is a zero-length string.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>throwOnError</code> is `true`, and the type cannot be found.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>className</code> requires a dependent assembly that could not be found.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "<code>className</code> requires a dependent assembly that was found but could not be loaded.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context, and <code>className</code> requires a dependent assembly that was not preloaded."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>className</code> requires a dependent assembly, but the file is not a valid assembly.  \n  \n -or-  \n  \n <code>className</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.GetTypes
  commentId: M:System.Reflection.Module.GetTypes
  id: GetTypes
  parent: System.Reflection.Module
  langs:
  - csharp
  name: GetTypes()
  nameWithType: Module.GetTypes()
  fullName: Module.GetTypes()
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns all the types defined within this module.
  remarks: "`ReflectionTypeLoadException` is a special load exception. The `ReflectionTypeLoadException.Types` property contains the array of types that were defined in the module and were loaded. This array may contain some null values. The `ReflectionTypeLoadException.LoaderExceptions` property is an array of exceptions that represent the exceptions that were thrown by the loader. The holes in the class array line up with the exceptions.  \n  \n For example, if the class initializers of one of the classes throws an exception while it is being loaded, a `TargetInvocationException` is stored in the corresponding element of the `LoaderExceptions` array.  \n  \n> [!NOTE]\n>  If a type has been forwarded to another assembly, it is not included in the returned array. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)."
  syntax:
    content: public virtual Type[] GetTypes ();
    parameters: []
    return:
      type: System.Type[]
      description: An array of type `Type` containing types defined within the module that is reflected by this instance.
  overload: System.Reflection.Module.GetTypes*
  exceptions:
  - type: System.Reflection.ReflectionTypeLoadException
    commentId: T:System.Reflection.ReflectionTypeLoadException
    description: One or more classes in a module could not be loaded.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have the required permission.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.IsDefined(System.Type,System.Boolean)
  commentId: M:System.Reflection.Module.IsDefined(System.Type,System.Boolean)
  id: IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: IsDefined(Type, Boolean)
  nameWithType: Module.IsDefined(Type, Boolean)
  fullName: Module.IsDefined(Type, Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns a value that indicates whether the specified attribute type has been applied to this module.
  remarks: ''
  example:
  - "The following example demonstrates a use of the `IsDefined` method.  \n  \n [!code-cpp[System.Reflection.Module.IsDefined Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.IsDefined Example/CPP/class1.cpp#1)]\n [!code-csharp[System.Reflection.Module.IsDefined Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.IsDefined Example/CS/class1.cs#1)]\n [!code-vb[System.Reflection.Module.IsDefined Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.IsDefined Example/VB/class1.vb#1)]"
  syntax:
    content: public virtual bool IsDefined (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: The type of custom attribute to test for.
    - id: inherit
      type: System.Boolean
      description: This argument is ignored for objects of this type.
    return:
      type: System.Boolean
      description: '`true` if one or more instances of <code>attributeType</code> have been applied to this module; otherwise, `false`.'
  overload: System.Reflection.Module.IsDefined*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>attributeType</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>attributeType</code> is not a <xref href="System.Type"></xref> object supplied by the runtime. For example, <code>attributeType</code> is a <xref href="System.Reflection.Emit.TypeBuilder"></xref> object.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.IsResource
  commentId: M:System.Reflection.Module.IsResource
  id: IsResource
  parent: System.Reflection.Module
  langs:
  - csharp
  name: IsResource()
  nameWithType: Module.IsResource()
  fullName: Module.IsResource()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a value indicating whether the object is a resource.
  remarks: ''
  example:
  - "The following example demonstrates a use of the `IsResource` method.  \n  \n [!code-cpp[System.Reflection.Module.IsResource Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.IsResource Example/CPP/class1.cpp#1)]\n [!code-csharp[System.Reflection.Module.IsResource Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.IsResource Example/CS/class1.cs#1)]\n [!code-vb[System.Reflection.Module.IsResource Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.IsResource Example/VB/class1.vb#1)]"
  syntax:
    content: public virtual bool IsResource ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the object is a resource; otherwise, `false`.'
  overload: System.Reflection.Module.IsResource*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.MDStreamVersion
  commentId: P:System.Reflection.Module.MDStreamVersion
  id: MDStreamVersion
  parent: System.Reflection.Module
  langs:
  - csharp
  name: MDStreamVersion
  nameWithType: Module.MDStreamVersion
  fullName: Module.MDStreamVersion
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the metadata stream version.
  remarks: >-
    > [!NOTE]

    >  For more information on the metadata header, see "Partition II: Metadata Definition and Semantics" in the Common Language Infrastructure (CLI) documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.
  syntax:
    content: public virtual int MDStreamVersion { get; }
    return:
      type: System.Int32
      description: A 32-bit integer representing the metadata stream version. The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number.
  overload: System.Reflection.Module.MDStreamVersion*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.MetadataToken
  commentId: P:System.Reflection.Module.MetadataToken
  id: MetadataToken
  parent: System.Reflection.Module
  langs:
  - csharp
  name: MetadataToken
  nameWithType: Module.MetadataToken
  fullName: Module.MetadataToken
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a token that identifies the module in metadata.
  remarks: "The tokens obtained using this property can be passed to the unmanaged Reflection API. For more information, see [Unmanaged Reflection API](http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8).  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site."
  syntax:
    content: public virtual int MetadataToken { get; }
    return:
      type: System.Int32
      description: An integer token that identifies the current module in metadata.
  overload: System.Reflection.Module.MetadataToken*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.ModuleHandle
  commentId: P:System.Reflection.Module.ModuleHandle
  id: ModuleHandle
  parent: System.Reflection.Module
  langs:
  - csharp
  name: ModuleHandle
  nameWithType: Module.ModuleHandle
  fullName: Module.ModuleHandle
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a handle for the module.
  syntax:
    content: public ModuleHandle ModuleHandle { get; }
    return:
      type: System.ModuleHandle
      description: A <xref href="System.ModuleHandle"></xref> structure for the current module.
  overload: System.Reflection.Module.ModuleHandle*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.ModuleVersionId
  commentId: P:System.Reflection.Module.ModuleVersionId
  id: ModuleVersionId
  parent: System.Reflection.Module
  langs:
  - csharp
  name: ModuleVersionId
  nameWithType: Module.ModuleVersionId
  fullName: Module.ModuleVersionId
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a universally unique identifier (UUID) that can be used to distinguish between two versions of a module.
  remarks: "In unmanaged metadata, the GUID returned by the <xref:System.Reflection.Module.ModuleVersionId%2A> property is referred to as the `mvid`, and is stored in the GUID heap.  \n  \n> [!NOTE]\n>  More information about metadata can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site."
  syntax:
    content: public virtual Guid ModuleVersionId { get; }
    return:
      type: System.Guid
      description: A <xref href="System.Guid"></xref> that can be used to distinguish between two versions of a module.
  overload: System.Reflection.Module.ModuleVersionId*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.Name
  commentId: P:System.Reflection.Module.Name
  id: Name
  parent: System.Reflection.Module
  langs:
  - csharp
  name: Name
  nameWithType: Module.Name
  fullName: Module.Name
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a `String` representing the name of the module with the path removed.
  remarks: "`Name` is a platform-dependent string.  \n  \n If the assembly for this module was loaded from a byte array then the `FullyQualifiedName` for the module will be: \\<Unknown>.  \n  \n To get the name and the path, use <xref:System.Reflection.Module.FullyQualifiedName%2A>."
  example:
  - "This example shows the effect of the `ScopeName`, `FullyQualifiedName`, and `Name` properties.  \n  \n [!code-cpp[Classic Module.Name Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Module.Name Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Module.Name Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Module.Name Example/CS/source.cs#1)]\n [!code-vb[Classic Module.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Module.Name Example/VB/source.vb#1)]"
  syntax:
    content: public virtual string Name { get; }
    return:
      type: System.String
      description: The module name with no path.
  overload: System.Reflection.Module.Name*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.op_Equality(System.Reflection.Module,System.Reflection.Module)
  commentId: M:System.Reflection.Module.op_Equality(System.Reflection.Module,System.Reflection.Module)
  id: op_Equality(System.Reflection.Module,System.Reflection.Module)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: op_Equality(Module, Module)
  nameWithType: Module.op_Equality(Module, Module)
  fullName: Module.op_Equality(Module, Module)
  type: Operator
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Indicates whether two <xref href="System.Reflection.Module"></xref> objects are equal.
  syntax:
    content: public static bool op_Equality (System.Reflection.Module left, System.Reflection.Module right);
    parameters:
    - id: left
      type: System.Reflection.Module
      description: The first object to compare.
    - id: right
      type: System.Reflection.Module
      description: The second object to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`.'
  overload: System.Reflection.Module.op_Equality*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.op_Inequality(System.Reflection.Module,System.Reflection.Module)
  commentId: M:System.Reflection.Module.op_Inequality(System.Reflection.Module,System.Reflection.Module)
  id: op_Inequality(System.Reflection.Module,System.Reflection.Module)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: op_Inequality(Module, Module)
  nameWithType: Module.op_Inequality(Module, Module)
  fullName: Module.op_Inequality(Module, Module)
  type: Operator
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Indicates whether two <xref href="System.Reflection.Module"></xref> objects are not equal.
  syntax:
    content: public static bool op_Inequality (System.Reflection.Module left, System.Reflection.Module right);
    parameters:
    - id: left
      type: System.Reflection.Module
      description: The first object to compare.
    - id: right
      type: System.Reflection.Module
      description: The second object to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`.'
  overload: System.Reflection.Module.op_Inequality*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.ResolveField(System.Int32)
  commentId: M:System.Reflection.Module.ResolveField(System.Int32)
  id: ResolveField(System.Int32)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: ResolveField(Int32)
  nameWithType: Module.ResolveField(Int32)
  fullName: Module.ResolveField(Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the field identified by the specified metadata token.
  remarks: "To resolve a metadata token that identifies a field whose parent `TypeSpec` has a signature containing element type `ELEMENT_TYPE_VAR` or `ELEMENT_TYPE_MVAR`, use the <xref:System.Reflection.Module.ResolveField%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, which allows you to supply the necessary context. That is, when you are resolving a metadata token for a field that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.  \n  \n For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method."
  syntax:
    content: public System.Reflection.FieldInfo ResolveField (int metadataToken);
    parameters:
    - id: metadataToken
      type: System.Int32
      description: A metadata token that identifies a field in the module.
    return:
      type: System.Reflection.FieldInfo
      description: A <xref href="System.Reflection.FieldInfo"></xref> object representing the field that is identified by the specified metadata token.
  overload: System.Reflection.Module.ResolveField*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>metadataToken</code> is not a token for a field in the scope of the current module.  \n  \n -or-  \n  \n <code>metadataToken</code> identifies a field whose parent `TypeSpec` has a signature containing element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method)."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>metadataToken</code> is not a valid token in the scope of the current module.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.ResolveField(System.Int32,System.Type[],System.Type[])
  commentId: M:System.Reflection.Module.ResolveField(System.Int32,System.Type[],System.Type[])
  id: ResolveField(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Module
  langs:
  - csharp
  name: ResolveField(Int32, Type[], Type[])
  nameWithType: Module.ResolveField(Int32, Type[], Type[])
  fullName: Module.ResolveField(Int32, Type[], Type[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the field identified by the specified metadata token, in the context defined by the specified generic type parameters.
  remarks: "Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. It is always safe to provide these arguments, even when they are not needed.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.  \n  \n For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method."
  syntax:
    content: public virtual System.Reflection.FieldInfo ResolveField (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
    parameters:
    - id: metadataToken
      type: System.Int32
      description: A metadata token that identifies a field in the module.
    - id: genericTypeArguments
      type: System.Type[]
      description: An array of <xref href="System.Type"></xref> objects representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic.
    - id: genericMethodArguments
      type: System.Type[]
      description: An array of <xref href="System.Type"></xref> objects representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic.
    return:
      type: System.Reflection.FieldInfo
      description: A <xref href="System.Reflection.FieldInfo"></xref> object representing the field that is identified by the specified metadata token.
  overload: System.Reflection.Module.ResolveField*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>metadataToken</code> is not a token for a field in the scope of the current module.  \n  \n -or-  \n  \n <code>metadataToken</code> identifies a field whose parent `TypeSpec` has a signature containing element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>metadataToken</code> is not a valid token in the scope of the current module.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.ResolveMember(System.Int32)
  commentId: M:System.Reflection.Module.ResolveMember(System.Int32)
  id: ResolveMember(System.Int32)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: ResolveMember(Int32)
  nameWithType: Module.ResolveMember(Int32)
  fullName: Module.ResolveMember(Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the type or member identified by the specified metadata token.
  remarks: "To resolve a metadata token for a `MethodSpec` or `TypeSpec` whose signature contains element type `ELEMENT_TYPE_VAR` or `ELEMENT_TYPE_MVAR`, use the <xref:System.Reflection.Module.ResolveMember%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, which allows you to supply the necessary context. That is, when you are resolving a metadata token for a member that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.  \n  \n For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method."
  syntax:
    content: public System.Reflection.MemberInfo ResolveMember (int metadataToken);
    parameters:
    - id: metadataToken
      type: System.Int32
      description: A metadata token that identifies a type or member in the module.
    return:
      type: System.Reflection.MemberInfo
      description: A <xref href="System.Reflection.MemberInfo"></xref> object representing the type or member that is identified by the specified metadata token.
  overload: System.Reflection.Module.ResolveMember*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>metadataToken</code> is not a token for a type or member in the scope of the current module.  \n  \n -or-  \n  \n <code>metadataToken</code> is a `MethodSpec` or `TypeSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method).  \n  \n -or-  \n  \n <code>metadataToken</code> identifies a property or event."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>metadataToken</code> is not a valid token in the scope of the current module.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.ResolveMember(System.Int32,System.Type[],System.Type[])
  commentId: M:System.Reflection.Module.ResolveMember(System.Int32,System.Type[],System.Type[])
  id: ResolveMember(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Module
  langs:
  - csharp
  name: ResolveMember(Int32, Type[], Type[])
  nameWithType: Module.ResolveMember(Int32, Type[], Type[])
  fullName: Module.ResolveMember(Int32, Type[], Type[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the type or member identified by the specified metadata token, in the context defined by the specified generic type parameters.
  remarks: "Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. It is always safe to provide these arguments, even when they are not needed.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.  \n  \n For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method."
  syntax:
    content: public virtual System.Reflection.MemberInfo ResolveMember (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
    parameters:
    - id: metadataToken
      type: System.Int32
      description: A metadata token that identifies a type or member in the module.
    - id: genericTypeArguments
      type: System.Type[]
      description: An array of <xref href="System.Type"></xref> objects representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic.
    - id: genericMethodArguments
      type: System.Type[]
      description: An array of <xref href="System.Type"></xref> objects representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic.
    return:
      type: System.Reflection.MemberInfo
      description: A <xref href="System.Reflection.MemberInfo"></xref> object representing the type or member that is identified by the specified metadata token.
  overload: System.Reflection.Module.ResolveMember*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>metadataToken</code> is not a token for a type or member in the scope of the current module.  \n  \n -or-  \n  \n <code>metadataToken</code> is a `MethodSpec` or `TypeSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>.  \n  \n -or-  \n  \n <code>metadataToken</code> identifies a property or event."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>metadataToken</code> is not a valid token in the scope of the current module.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])
  commentId: M:System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])
  id: ResolveMethod(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Module
  langs:
  - csharp
  name: ResolveMethod(Int32, Type[], Type[])
  nameWithType: Module.ResolveMethod(Int32, Type[], Type[])
  fullName: Module.ResolveMethod(Int32, Type[], Type[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the method or constructor identified by the specified metadata token, in the context defined by the specified generic type parameters.
  remarks: "Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where `metadataToken` is in scope to obtain an array of generic type arguments for `genericMethodArguments`. It is always safe to provide these arguments, even when they are not needed.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site."
  example:
  - "The following example shows how to use the two overloads of the <xref:System.Reflection.Module.ResolveMethod%2A> method to resolve metadata tokens from call sites in generic and non-generic contexts.  \n  \n The code example defines two generic types, `G1<Tg1>` and `G2<Tg2>`, each of which has a generic method. `G1<Tg1>` also has a non-generic method that uses the type parameter `Tg1` for its parameter. The generic method `GM2<Tgm2>` in type `G2<Tg2>` contains several method calls:  \n  \n-   Case 1: The generic method `GM1<Tgm1>` is called, using the type parameters of `G2<Tg2>` and `GM2<Tgm2>` as the type arguments. In other words, the parameter types of the called method will depend on the types that are used to construct a closed generic type from the type definition for `G2<Tg2>`.  \n  \n-   Case 2: The non-generic method `M1` is called. The parameter of this method uses the type parameter of the defining type, `G1<Tg1>`, which is replaced in this case by the type parameter of the enclosing type, `G2<Tg2>`.  \n  \n-   Case 3: The generic method `GM1<Tgm1>` is called, specifying <xref:System.Int32> and <xref:System.Object> for the type arguments of the generic type and the generic method, respectively. This method call does not depend on the type parameters of the enclosing type or method.  \n  \n-   Case 4: The non-generic method `M1` of the `Example` class is called. This method call does not depend on the type parameters of the enclosing type or method.  \n  \n In addition, the example defines the non-generic `Example` class. This class has a method `M` that makes a call to a generic method.  \n  \n-   Case 5: The generic method `GM1<Tgm1>` is called, specifying <xref:System.Int32> and <xref:System.Object> for the type arguments of the generic type and the generic method, respectively. The context for this method has no enclosing generic type or generic method.  \n  \n For each case, the example first constructs a <xref:System.Reflection.MethodInfo> that represents the called method, and then resolves the token using the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, using the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> methods to get the values for the `genericTypeArguments` and `genericMethodArguments` parameters. This technique works in all cases, because the methods return <xref:System.Type.EmptyTypes?displayProperty=fullName> for non-generic contexts. The example compares the resolved <xref:System.Reflection.MethodInfo> with the constructed <xref:System.Reflection.MethodInfo>.  \n  \n The example then attempts to use the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%29> method overload to resolve the token. This works in cases 3, 4, and 5, because the method calls do not depend on the generic context. In cases 1 and 2, an exception is thrown because there is insufficient information to resolve the token.  \n  \n The metadata token values are hard-coded as an enumeration. If you change this code example, the token values are likely to change. To determine the new token values, compile the code and use Ildasm.exe with the **/TOKENS** option to examine the assembly. The tokens can be found at the points of call. Insert the new values into the enumeration, and recompile the example.  \n  \n [!code-csharp[Module.MethodResolve#1](~/samples/snippets/csharp/VS_Snippets_CLR/Module.MethodResolve/cs/source.cs#1)]\n [!code-vb[Module.MethodResolve#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Module.MethodResolve/vb/source.vb#1)]"
  syntax:
    content: public virtual System.Reflection.MethodBase ResolveMethod (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
    parameters:
    - id: metadataToken
      type: System.Int32
      description: A metadata token that identifies a method or constructor in the module.
    - id: genericTypeArguments
      type: System.Type[]
      description: An array of <xref href="System.Type"></xref> objects representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic.
    - id: genericMethodArguments
      type: System.Type[]
      description: An array of <xref href="System.Type"></xref> objects representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic.
    return:
      type: System.Reflection.MethodBase
      description: A <xref href="System.Reflection.MethodBase"></xref> object representing the method that is identified by the specified metadata token.
  overload: System.Reflection.Module.ResolveMethod*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>metadataToken</code> is not a token for a method or constructor in the scope of the current module.  \n  \n -or-  \n  \n <code>metadataToken</code> is a `MethodSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>metadataToken</code> is not a valid token in the scope of the current module.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.ResolveMethod(System.Int32)
  commentId: M:System.Reflection.Module.ResolveMethod(System.Int32)
  id: ResolveMethod(System.Int32)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: ResolveMethod(Int32)
  nameWithType: Module.ResolveMethod(Int32)
  fullName: Module.ResolveMethod(Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the method or constructor identified by the specified metadata token.
  remarks: "To resolve a metadata token for a `MethodSpec` whose signature contains element type `ELEMENT_TYPE_VAR` or `ELEMENT_TYPE_MVAR`, use the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, which allows you to supply the necessary context. That is, when you are resolving a metadata token for a method that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site."
  example:
  - "The following example shows how to use the two overloads of the <xref:System.Reflection.Module.ResolveMethod%2A> method to resolve metadata tokens from call sites in generic and non-generic contexts.  \n  \n The code example defines two generic types, `G1<Tg1>` and `G2<Tg2>` (`G1(Of Tg1)` and `G2(Of Tg2)` in Visual Basic), each of which has a generic method. `G1<Tg1>` also has a non-generic method that uses the type parameter `Tg1` for its parameter. The generic method `GM2<Tgm2>` in type `G2<Tg2>` contains several method calls:  \n  \n-   Case 1: The generic method `GM1<Tgm1>` is called, using the type parameters of `G2<Tg2>` and `GM2<Tgm2>` as the type arguments. In other words, the parameter types of the called method will depend on the types that are used to construct a closed generic type from the type definition for `G2<Tg2>`.  \n  \n-   Case 2: The non-generic method `M1` is called. The parameter of this method uses the type parameter of the defining type, `G1<Tg1>`, which is replaced in this case by the type parameter of the enclosing type, `G2<Tg2>`.  \n  \n-   Case 3: The generic method `GM1<Tgm1>` is called, specifying <xref:System.Int32> and <xref:System.Object> for the type arguments of the generic type and the generic method, respectively. This method call does not depend on the type parameters of the enclosing type or method.  \n  \n-   Case 4: The non-generic method `M1` of the `Example` class is called. This method call does not depend on the type parameters of the enclosing type or method.  \n  \n In addition, the example defines the non-generic `Example` class. This class has a method `M` that makes a call to a generic method:  \n  \n-   Case 5: The generic method `GM1` is called, specifying <xref:System.Int32> and <xref:System.Object> for the type arguments of the generic type and the generic method, respectively. The context for this method has no enclosing generic type or generic method.  \n  \n For each case, the example first constructs a <xref:System.Reflection.MethodInfo> that represents the called method, and then resolves the token using the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, using the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> methods to get the values for the `genericTypeArguments` and `genericMethodArguments` parameters. This technique works in all cases, because the methods return <xref:System.Type.EmptyTypes?displayProperty=fullName> for non-generic contexts. The example compares the resolved <xref:System.Reflection.MethodInfo> with the constructed <xref:System.Reflection.MethodInfo>.  \n  \n The example then attempts to use the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%29> method overload to resolve the token. This works in cases 3, 4, and 5, because the method calls do not depend on the generic context. In cases 1 and 2, an exception is thrown because there is insufficient information to resolve the token.  \n  \n The metadata token values are hard-coded as an enumeration. If you change this code example, the token values are likely to change. To determine the new token values, compile the code and use Ildasm.exe with the **/TOKENS** option to examine the assembly. The tokens can be found at the points of call. Insert the new values into the enumeration, and recompile the example.  \n  \n [!code-csharp[Module.MethodResolve#1](~/samples/snippets/csharp/VS_Snippets_CLR/Module.MethodResolve/cs/source.cs#1)]\n [!code-vb[Module.MethodResolve#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Module.MethodResolve/vb/source.vb#1)]"
  syntax:
    content: public System.Reflection.MethodBase ResolveMethod (int metadataToken);
    parameters:
    - id: metadataToken
      type: System.Int32
      description: A metadata token that identifies a method or constructor in the module.
    return:
      type: System.Reflection.MethodBase
      description: A <xref href="System.Reflection.MethodBase"></xref> object representing the method or constructor that is identified by the specified metadata token.
  overload: System.Reflection.Module.ResolveMethod*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>metadataToken</code> is not a token for a method or constructor in the scope of the current module.  \n  \n -or-  \n  \n <code>metadataToken</code> is a `MethodSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method)."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>metadataToken</code> is not a valid token in the scope of the current module.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.ResolveSignature(System.Int32)
  commentId: M:System.Reflection.Module.ResolveSignature(System.Int32)
  id: ResolveSignature(System.Int32)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: ResolveSignature(Int32)
  nameWithType: Module.ResolveSignature(Int32)
  fullName: Module.ResolveSignature(Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the signature blob identified by a metadata token.
  remarks: >-
    > [!NOTE]

    >  Information about metadata tokens and signatures can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.
  syntax:
    content: public virtual byte[] ResolveSignature (int metadataToken);
    parameters:
    - id: metadataToken
      type: System.Int32
      description: A metadata token that identifies a signature in the module.
    return:
      type: System.Byte[]
      description: An array of bytes representing the signature blob.
  overload: System.Reflection.Module.ResolveSignature*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>metadataToken</code> is not a valid `MemberRef`, `MethodDef`, `TypeSpec`, signature, or `FieldDef` token in the scope of the current module.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>metadataToken</code> is not a valid token in the scope of the current module.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.ResolveString(System.Int32)
  commentId: M:System.Reflection.Module.ResolveString(System.Int32)
  id: ResolveString(System.Int32)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: ResolveString(Int32)
  nameWithType: Module.ResolveString(Int32)
  fullName: Module.ResolveString(Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the string identified by the specified metadata token.
  remarks: >-
    > [!NOTE]

    >  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.
  syntax:
    content: public virtual string ResolveString (int metadataToken);
    parameters:
    - id: metadataToken
      type: System.Int32
      description: A metadata token that identifies a string in the string heap of the module.
    return:
      type: System.String
      description: A <xref href="System.String"></xref> containing a string value from the metadata string heap.
  overload: System.Reflection.Module.ResolveString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>metadataToken</code> is not a token for a string in the scope of the current module.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>metadataToken</code> is not a valid token in the scope of the current module.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.ResolveType(System.Int32)
  commentId: M:System.Reflection.Module.ResolveType(System.Int32)
  id: ResolveType(System.Int32)
  parent: System.Reflection.Module
  langs:
  - csharp
  name: ResolveType(Int32)
  nameWithType: Module.ResolveType(Int32)
  fullName: Module.ResolveType(Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the type identified by the specified metadata token.
  remarks: "To resolve a metadata token for a `TypeSpec` whose signature contains `ELEMENT_TYPE_VAR` or `ELEMENT_TYPE_MVAR`, use the <xref:System.Reflection.Module.ResolveType%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, which allows you to supply the necessary context. That is, when you are resolving a metadata token for a type that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site."
  syntax:
    content: public Type ResolveType (int metadataToken);
    parameters:
    - id: metadataToken
      type: System.Int32
      description: A metadata token that identifies a type in the module.
    return:
      type: System.Type
      description: A <xref href="System.Type"></xref> object representing the type that is identified by the specified metadata token.
  overload: System.Reflection.Module.ResolveType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>metadataToken</code> is not a token for a type in the scope of the current module.  \n  \n -or-  \n  \n <code>metadataToken</code> is a `TypeSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method)."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>metadataToken</code> is not a valid token in the scope of the current module.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])
  commentId: M:System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])
  id: ResolveType(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Module
  langs:
  - csharp
  name: ResolveType(Int32, Type[], Type[])
  nameWithType: Module.ResolveType(Int32, Type[], Type[])
  fullName: Module.ResolveType(Int32, Type[], Type[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the type identified by the specified metadata token, in the context defined by the specified generic type parameters.
  remarks: "Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. It is always safe to provide these arguments, even when they are not needed.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.  \n  \n For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method."
  syntax:
    content: public virtual Type ResolveType (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
    parameters:
    - id: metadataToken
      type: System.Int32
      description: A metadata token that identifies a type in the module.
    - id: genericTypeArguments
      type: System.Type[]
      description: An array of <xref href="System.Type"></xref> objects representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic.
    - id: genericMethodArguments
      type: System.Type[]
      description: An array of <xref href="System.Type"></xref> objects representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic.
    return:
      type: System.Type
      description: A <xref href="System.Type"></xref> object representing the type that is identified by the specified metadata token.
  overload: System.Reflection.Module.ResolveType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>metadataToken</code> is not a token for a type in the scope of the current module.  \n  \n -or-  \n  \n <code>metadataToken</code> is a `TypeSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>metadataToken</code> is not a valid token in the scope of the current module.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.ScopeName
  commentId: P:System.Reflection.Module.ScopeName
  id: ScopeName
  parent: System.Reflection.Module
  langs:
  - csharp
  name: ScopeName
  nameWithType: Module.ScopeName
  fullName: Module.ScopeName
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a string representing the name of the module.
  remarks: The `ScopeName` property is not used by the common language runtime, but you can use it to store any string you want in the property when you emit a module using the metadata APIs. Reflection itself does not allow you to set the `ScopeName` property.
  example:
  - "This example shows the effect of the `ScopeName`, `FullyQualifiedName`, and `Name` properties.  \n  \n [!code-cpp[Classic Module.ScopeName Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Module.ScopeName Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Module.ScopeName Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Module.ScopeName Example/CS/source.cs#1)]\n [!code-vb[Classic Module.ScopeName Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Module.ScopeName Example/VB/source.vb#1)]"
  syntax:
    content: public virtual string ScopeName { get; }
    return:
      type: System.String
      description: The module name.
  overload: System.Reflection.Module.ScopeName*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.ToString
  commentId: M:System.Reflection.Module.ToString
  id: ToString
  parent: System.Reflection.Module
  langs:
  - csharp
  name: ToString()
  nameWithType: Module.ToString()
  fullName: Module.ToString()
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the name of the module.
  remarks: ''
  example:
  - "The following example demonstrates a use of the `ToString` method.  \n  \n [!code-cpp[System.Reflection.Module.ToString Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.ToString Example/CPP/class1.cpp#1)]\n [!code-csharp[System.Reflection.Module.ToString Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.ToString Example/CS/class1.cs#1)]\n [!code-vb[System.Reflection.Module.ToString Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.ToString Example/VB/class1.vb#1)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: A `String` representing the name of this module.
  overload: System.Reflection.Module.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  commentId: M:System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  id: System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  isEii: true
  parent: System.Reflection.Module
  langs:
  - csharp
  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)
  nameWithType: Module.ICustomAttributeProvider.GetCustomAttributes(Boolean)
  fullName: Module.ICustomAttributeProvider.GetCustomAttributes(Boolean)
  type: Method
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: object[] ICustomAttributeProvider.GetCustomAttributes (bool inherit);
    parameters:
    - id: inherit
      type: System.Boolean
      description: ''
    return:
      type: System.Object[]
      description: ''
  overload: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.5
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  commentId: M:System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  id: System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  isEii: true
  parent: System.Reflection.Module
  langs:
  - csharp
  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  nameWithType: Module.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  fullName: Module.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  type: Method
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: object[] ICustomAttributeProvider.GetCustomAttributes (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: ''
    - id: inherit
      type: System.Boolean
      description: ''
    return:
      type: System.Object[]
      description: ''
  overload: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.5
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  commentId: M:System.Reflection.Module.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  id: System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  isEii: true
  parent: System.Reflection.Module
  langs:
  - csharp
  name: ICustomAttributeProvider.IsDefined(Type, Boolean)
  nameWithType: Module.ICustomAttributeProvider.IsDefined(Type, Boolean)
  fullName: Module.ICustomAttributeProvider.IsDefined(Type, Boolean)
  type: Method
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: bool ICustomAttributeProvider.IsDefined (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: ''
    - id: inherit
      type: System.Boolean
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#IsDefined*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.5
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  commentId: M:System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_Module#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.Module
  langs:
  - csharp
  name: _Module.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  nameWithType: Module._Module.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  fullName: Module._Module.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Maps a set of names to a corresponding set of dispatch identifiers.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.
  syntax:
    content: void _Module.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
    parameters:
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: rgszNames
      type: System.IntPtr
      description: Passed-in array of names to be mapped.
    - id: cNames
      type: System.UInt32
      description: Count of the names to be mapped.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret the names.
    - id: rgDispId
      type: System.IntPtr
      description: Caller-allocated array that receives the IDs corresponding to the names.
  overload: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  commentId: M:System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_Module#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.Module
  langs:
  - csharp
  name: _Module.GetTypeInfo(UInt32, UInt32, IntPtr)
  nameWithType: Module._Module.GetTypeInfo(UInt32, UInt32, IntPtr)
  fullName: Module._Module.GetTypeInfo(UInt32, UInt32, IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.
  syntax:
    content: void _Module.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);
    parameters:
    - id: iTInfo
      type: System.UInt32
      description: The type information to return.
    - id: lcid
      type: System.UInt32
      description: The locale identifier for the type information.
    - id: ppTInfo
      type: System.IntPtr
      description: Receives a pointer to the requested type information object.
  overload: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount(System.UInt32@)
  commentId: M:System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount(System.UInt32@)
  id: System#Runtime#InteropServices#_Module#GetTypeInfoCount(System.UInt32@)
  isEii: true
  parent: System.Reflection.Module
  langs:
  - csharp
  name: _Module.GetTypeInfoCount(UInt32)
  nameWithType: Module._Module.GetTypeInfoCount(UInt32)
  fullName: Module._Module.GetTypeInfoCount(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.
  syntax:
    content: void _Module.GetTypeInfoCount (out uint pcTInfo);
    parameters:
    - id: pcTInfo
      type: System.UInt32
      description: Points to a location that receives the number of type information interfaces provided by the object.
  overload: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  commentId: M:System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  id: System#Runtime#InteropServices#_Module#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  isEii: true
  parent: System.Reflection.Module
  langs:
  - csharp
  name: _Module.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  nameWithType: Module._Module.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  fullName: Module._Module.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Provides access to properties and methods exposed by an object.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.
  syntax:
    content: void _Module.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
    parameters:
    - id: dispIdMember
      type: System.UInt32
      description: Identifies the member.
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret arguments.
    - id: wFlags
      type: System.Int16
      description: Flags describing the context of the call.
    - id: pDispParams
      type: System.IntPtr
      description: Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.
    - id: pVarResult
      type: System.IntPtr
      description: Pointer to the location where the result is to be stored.
    - id: pExcepInfo
      type: System.IntPtr
      description: Pointer to a structure that contains exception information.
    - id: puArgErr
      type: System.IntPtr
      description: The index of the first argument that has an error.
  overload: System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.ReflectionTypeLoadException
  parent: System.Reflection
  isExternal: false
  name: ReflectionTypeLoadException
  nameWithType: ReflectionTypeLoadException
  fullName: System.Reflection.ReflectionTypeLoadException
- uid: System.Security.SecurityException
  parent: System.Security
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Reflection.AmbiguousMatchException
  parent: System.Reflection
  isExternal: false
  name: AmbiguousMatchException
  nameWithType: AmbiguousMatchException
  fullName: System.Reflection.AmbiguousMatchException
- uid: System.Reflection.TargetInvocationException
  parent: System.Reflection
  isExternal: false
  name: TargetInvocationException
  nameWithType: TargetInvocationException
  fullName: System.Reflection.TargetInvocationException
- uid: System.IO.FileNotFoundException
  parent: System.IO
  isExternal: false
  name: FileNotFoundException
  nameWithType: FileNotFoundException
  fullName: System.IO.FileNotFoundException
- uid: System.IO.FileLoadException
  parent: System.IO
  isExternal: false
  name: FileLoadException
  nameWithType: FileLoadException
  fullName: System.IO.FileLoadException
- uid: System.BadImageFormatException
  parent: System
  isExternal: false
  name: BadImageFormatException
  nameWithType: BadImageFormatException
  fullName: System.BadImageFormatException
- uid: System.TypeLoadException
  parent: System
  isExternal: false
  name: TypeLoadException
  nameWithType: TypeLoadException
  fullName: System.TypeLoadException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.NotImplementedException
  parent: System
  isExternal: false
  name: NotImplementedException
  nameWithType: NotImplementedException
  fullName: System.NotImplementedException
- uid: System.Reflection.Module.#ctor
  parent: System.Reflection.Module
  isExternal: false
  name: Module()
  nameWithType: Module.Module()
  fullName: Module.Module()
- uid: System.Reflection.Module.Assembly
  parent: System.Reflection.Module
  isExternal: false
  name: Assembly
  nameWithType: Module.Assembly
  fullName: Module.Assembly
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection.Module.CustomAttributes
  parent: System.Reflection.Module
  isExternal: false
  name: CustomAttributes
  nameWithType: Module.CustomAttributes
  fullName: Module.CustomAttributes
- uid: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Reflection.CustomAttributeData
  name: CustomAttributeData
  nameWithType: CustomAttributeData
  fullName: System.Reflection.CustomAttributeData
- uid: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<CustomAttributeData>
  nameWithType: IEnumerable<CustomAttributeData>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    nameWithType: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.Module.Equals(System.Object)
  parent: System.Reflection.Module
  isExternal: false
  name: Equals(Object)
  nameWithType: Module.Equals(Object)
  fullName: Module.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Module.FilterTypeName
  parent: System.Reflection.Module
  isExternal: false
  name: FilterTypeName
  nameWithType: Module.FilterTypeName
  fullName: Module.FilterTypeName
- uid: System.Reflection.TypeFilter
  parent: System.Reflection
  isExternal: false
  name: TypeFilter
  nameWithType: TypeFilter
  fullName: System.Reflection.TypeFilter
- uid: System.Reflection.Module.FilterTypeNameIgnoreCase
  parent: System.Reflection.Module
  isExternal: false
  name: FilterTypeNameIgnoreCase
  nameWithType: Module.FilterTypeNameIgnoreCase
  fullName: Module.FilterTypeNameIgnoreCase
- uid: System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)
  parent: System.Reflection.Module
  isExternal: false
  name: FindTypes(TypeFilter, Object)
  nameWithType: Module.FindTypes(TypeFilter, Object)
  fullName: Module.FindTypes(TypeFilter, Object)
- uid: System.Type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type[]
  parent: System
  isExternal: false
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Module.FullyQualifiedName
  parent: System.Reflection.Module
  isExternal: false
  name: FullyQualifiedName
  nameWithType: Module.FullyQualifiedName
  fullName: Module.FullyQualifiedName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Module.GetCustomAttributes(System.Boolean)
  parent: System.Reflection.Module
  isExternal: false
  name: GetCustomAttributes(Boolean)
  nameWithType: Module.GetCustomAttributes(Boolean)
  fullName: Module.GetCustomAttributes(Boolean)
- uid: System.Object[]
  parent: System
  isExternal: false
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.Module
  isExternal: false
  name: GetCustomAttributes(Type, Boolean)
  nameWithType: Module.GetCustomAttributes(Type, Boolean)
  fullName: Module.GetCustomAttributes(Type, Boolean)
- uid: System.Reflection.Module.GetCustomAttributesData
  parent: System.Reflection.Module
  isExternal: false
  name: GetCustomAttributesData()
  nameWithType: Module.GetCustomAttributesData()
  fullName: Module.GetCustomAttributesData()
- uid: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<CustomAttributeData>
  nameWithType: IList<CustomAttributeData>
  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeData>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    nameWithType: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.Module.GetField(System.String)
  parent: System.Reflection.Module
  isExternal: false
  name: GetField(String)
  nameWithType: Module.GetField(String)
  fullName: Module.GetField(String)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.Module
  isExternal: false
  name: GetField(String, BindingFlags)
  nameWithType: Module.GetField(String, BindingFlags)
  fullName: Module.GetField(String, BindingFlags)
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Module.GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.Module
  isExternal: false
  name: GetFields(BindingFlags)
  nameWithType: Module.GetFields(BindingFlags)
  fullName: Module.GetFields(BindingFlags)
- uid: System.Reflection.FieldInfo[]
  parent: System.Reflection
  isExternal: false
  name: FieldInfo[]
  nameWithType: FieldInfo[]
  fullName: System.Reflection.FieldInfo[]
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Module.GetFields
  parent: System.Reflection.Module
  isExternal: false
  name: GetFields()
  nameWithType: Module.GetFields()
  fullName: Module.GetFields()
- uid: System.Reflection.Module.GetHashCode
  parent: System.Reflection.Module
  isExternal: false
  name: GetHashCode()
  nameWithType: Module.GetHashCode()
  fullName: Module.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Module.GetMethod(System.String)
  parent: System.Reflection.Module
  isExternal: false
  name: GetMethod(String)
  nameWithType: Module.GetMethod(String)
  fullName: Module.GetMethod(String)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.Module.GetMethod(System.String,System.Type[])
  parent: System.Reflection.Module
  isExternal: false
  name: GetMethod(String, Type[])
  nameWithType: Module.GetMethod(String, Type[])
  fullName: Module.GetMethod(String, Type[])
- uid: System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Module
  isExternal: false
  name: GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  nameWithType: Module.GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  fullName: Module.GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Reflection.ParameterModifier
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier
- uid: System.Reflection.ParameterModifier[]
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier[]
  nameWithType: ParameterModifier[]
  fullName: System.Reflection.ParameterModifier[]
  spec.csharp:
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: System.Reflection.ParameterModifier
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Module
  isExternal: false
  name: GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  nameWithType: Module.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  fullName: Module.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
- uid: System.Reflection.Module.GetMethods
  parent: System.Reflection.Module
  isExternal: false
  name: GetMethods()
  nameWithType: Module.GetMethods()
  fullName: Module.GetMethods()
- uid: System.Reflection.MethodInfo[]
  parent: System.Reflection
  isExternal: false
  name: MethodInfo[]
  nameWithType: MethodInfo[]
  fullName: System.Reflection.MethodInfo[]
  spec.csharp:
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.Module
  isExternal: false
  name: GetMethods(BindingFlags)
  nameWithType: Module.GetMethods(BindingFlags)
  fullName: Module.GetMethods(BindingFlags)
- uid: System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Reflection.Module
  isExternal: false
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: Module.GetObjectData(SerializationInfo, StreamingContext)
  fullName: Module.GetObjectData(SerializationInfo, StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
  parent: System.Reflection.Module
  isExternal: false
  name: GetPEKind(PortableExecutableKinds, ImageFileMachine)
  nameWithType: Module.GetPEKind(PortableExecutableKinds, ImageFileMachine)
  fullName: Module.GetPEKind(PortableExecutableKinds, ImageFileMachine)
- uid: System.Reflection.PortableExecutableKinds
  parent: System.Reflection
  isExternal: false
  name: PortableExecutableKinds
  nameWithType: PortableExecutableKinds
  fullName: System.Reflection.PortableExecutableKinds
- uid: System.Reflection.ImageFileMachine
  parent: System.Reflection
  isExternal: false
  name: ImageFileMachine
  nameWithType: ImageFileMachine
  fullName: System.Reflection.ImageFileMachine
- uid: System.Reflection.Module.GetSignerCertificate
  parent: System.Reflection.Module
  isExternal: false
  name: GetSignerCertificate()
  nameWithType: Module.GetSignerCertificate()
  fullName: Module.GetSignerCertificate()
- uid: System.Security.Cryptography.X509Certificates.X509Certificate
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate
  nameWithType: X509Certificate
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate
- uid: System.Reflection.Module.GetType(System.String)
  parent: System.Reflection.Module
  isExternal: false
  name: GetType(String)
  nameWithType: Module.GetType(String)
  fullName: Module.GetType(String)
- uid: System.Reflection.Module.GetType(System.String,System.Boolean)
  parent: System.Reflection.Module
  isExternal: false
  name: GetType(String, Boolean)
  nameWithType: Module.GetType(String, Boolean)
  fullName: Module.GetType(String, Boolean)
- uid: System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)
  parent: System.Reflection.Module
  isExternal: false
  name: GetType(String, Boolean, Boolean)
  nameWithType: Module.GetType(String, Boolean, Boolean)
  fullName: Module.GetType(String, Boolean, Boolean)
- uid: System.Reflection.Module.GetTypes
  parent: System.Reflection.Module
  isExternal: false
  name: GetTypes()
  nameWithType: Module.GetTypes()
  fullName: Module.GetTypes()
- uid: System.Reflection.Module.IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.Module
  isExternal: false
  name: IsDefined(Type, Boolean)
  nameWithType: Module.IsDefined(Type, Boolean)
  fullName: Module.IsDefined(Type, Boolean)
- uid: System.Reflection.Module.IsResource
  parent: System.Reflection.Module
  isExternal: false
  name: IsResource()
  nameWithType: Module.IsResource()
  fullName: Module.IsResource()
- uid: System.Reflection.Module.MDStreamVersion
  parent: System.Reflection.Module
  isExternal: false
  name: MDStreamVersion
  nameWithType: Module.MDStreamVersion
  fullName: Module.MDStreamVersion
- uid: System.Reflection.Module.MetadataToken
  parent: System.Reflection.Module
  isExternal: false
  name: MetadataToken
  nameWithType: Module.MetadataToken
  fullName: Module.MetadataToken
- uid: System.Reflection.Module.ModuleHandle
  parent: System.Reflection.Module
  isExternal: false
  name: ModuleHandle
  nameWithType: Module.ModuleHandle
  fullName: Module.ModuleHandle
- uid: System.ModuleHandle
  parent: System
  isExternal: false
  name: ModuleHandle
  nameWithType: ModuleHandle
  fullName: System.ModuleHandle
- uid: System.Reflection.Module.ModuleVersionId
  parent: System.Reflection.Module
  isExternal: false
  name: ModuleVersionId
  nameWithType: Module.ModuleVersionId
  fullName: Module.ModuleVersionId
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Reflection.Module.Name
  parent: System.Reflection.Module
  isExternal: false
  name: Name
  nameWithType: Module.Name
  fullName: Module.Name
- uid: System.Reflection.Module.op_Equality(System.Reflection.Module,System.Reflection.Module)
  parent: System.Reflection.Module
  isExternal: false
  name: op_Equality(Module, Module)
  nameWithType: Module.op_Equality(Module, Module)
  fullName: Module.op_Equality(Module, Module)
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Reflection.Module.op_Inequality(System.Reflection.Module,System.Reflection.Module)
  parent: System.Reflection.Module
  isExternal: false
  name: op_Inequality(Module, Module)
  nameWithType: Module.op_Inequality(Module, Module)
  fullName: Module.op_Inequality(Module, Module)
- uid: System.Reflection.Module.ResolveField(System.Int32)
  parent: System.Reflection.Module
  isExternal: false
  name: ResolveField(Int32)
  nameWithType: Module.ResolveField(Int32)
  fullName: Module.ResolveField(Int32)
- uid: System.Reflection.Module.ResolveField(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Module
  isExternal: false
  name: ResolveField(Int32, Type[], Type[])
  nameWithType: Module.ResolveField(Int32, Type[], Type[])
  fullName: Module.ResolveField(Int32, Type[], Type[])
- uid: System.Reflection.Module.ResolveMember(System.Int32)
  parent: System.Reflection.Module
  isExternal: false
  name: ResolveMember(Int32)
  nameWithType: Module.ResolveMember(Int32)
  fullName: Module.ResolveMember(Int32)
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.Module.ResolveMember(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Module
  isExternal: false
  name: ResolveMember(Int32, Type[], Type[])
  nameWithType: Module.ResolveMember(Int32, Type[], Type[])
  fullName: Module.ResolveMember(Int32, Type[], Type[])
- uid: System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Module
  isExternal: false
  name: ResolveMethod(Int32, Type[], Type[])
  nameWithType: Module.ResolveMethod(Int32, Type[], Type[])
  fullName: Module.ResolveMethod(Int32, Type[], Type[])
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: false
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection.Module.ResolveMethod(System.Int32)
  parent: System.Reflection.Module
  isExternal: false
  name: ResolveMethod(Int32)
  nameWithType: Module.ResolveMethod(Int32)
  fullName: Module.ResolveMethod(Int32)
- uid: System.Reflection.Module.ResolveSignature(System.Int32)
  parent: System.Reflection.Module
  isExternal: false
  name: ResolveSignature(Int32)
  nameWithType: Module.ResolveSignature(Int32)
  fullName: Module.ResolveSignature(Int32)
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Module.ResolveString(System.Int32)
  parent: System.Reflection.Module
  isExternal: false
  name: ResolveString(Int32)
  nameWithType: Module.ResolveString(Int32)
  fullName: Module.ResolveString(Int32)
- uid: System.Reflection.Module.ResolveType(System.Int32)
  parent: System.Reflection.Module
  isExternal: false
  name: ResolveType(Int32)
  nameWithType: Module.ResolveType(Int32)
  fullName: Module.ResolveType(Int32)
- uid: System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Module
  isExternal: false
  name: ResolveType(Int32, Type[], Type[])
  nameWithType: Module.ResolveType(Int32, Type[], Type[])
  fullName: Module.ResolveType(Int32, Type[], Type[])
- uid: System.Reflection.Module.ScopeName
  parent: System.Reflection.Module
  isExternal: false
  name: ScopeName
  nameWithType: Module.ScopeName
  fullName: Module.ScopeName
- uid: System.Reflection.Module.ToString
  parent: System.Reflection.Module
  isExternal: false
  name: ToString()
  nameWithType: Module.ToString()
  fullName: Module.ToString()
- uid: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  parent: System.Reflection.Module
  isExternal: false
  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)
  nameWithType: Module.ICustomAttributeProvider.GetCustomAttributes(Boolean)
  fullName: Module.ICustomAttributeProvider.GetCustomAttributes(Boolean)
- uid: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.Module
  isExternal: false
  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  nameWithType: Module.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  fullName: Module.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
- uid: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.Module
  isExternal: false
  name: ICustomAttributeProvider.IsDefined(Type, Boolean)
  nameWithType: Module.ICustomAttributeProvider.IsDefined(Type, Boolean)
  fullName: Module.ICustomAttributeProvider.IsDefined(Type, Boolean)
- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.Module
  isExternal: false
  name: _Module.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  nameWithType: Module._Module.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  fullName: Module._Module.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.Module
  isExternal: false
  name: _Module.GetTypeInfo(UInt32, UInt32, IntPtr)
  nameWithType: Module._Module.GetTypeInfo(UInt32, UInt32, IntPtr)
  fullName: Module._Module.GetTypeInfo(UInt32, UInt32, IntPtr)
- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.Module
  isExternal: false
  name: _Module.GetTypeInfoCount(UInt32)
  nameWithType: Module._Module.GetTypeInfoCount(UInt32)
  fullName: Module._Module.GetTypeInfoCount(UInt32)
- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.Module
  isExternal: false
  name: _Module.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  nameWithType: Module._Module.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  fullName: Module._Module.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Reflection.Module.#ctor*
  parent: System.Reflection.Module
  isExternal: false
  name: Module
  nameWithType: Module.Module
  fullName: Module.Module
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.Assembly*
  parent: System.Reflection.Module
  isExternal: false
  name: Assembly
  nameWithType: Module.Assembly
  fullName: Module.Assembly
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.CustomAttributes*
  parent: System.Reflection.Module
  isExternal: false
  name: CustomAttributes
  nameWithType: Module.CustomAttributes
  fullName: Module.CustomAttributes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.Equals*
  parent: System.Reflection.Module
  isExternal: false
  name: Equals
  nameWithType: Module.Equals
  fullName: Module.Equals
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.FindTypes*
  parent: System.Reflection.Module
  isExternal: false
  name: FindTypes
  nameWithType: Module.FindTypes
  fullName: Module.FindTypes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.FullyQualifiedName*
  parent: System.Reflection.Module
  isExternal: false
  name: FullyQualifiedName
  nameWithType: Module.FullyQualifiedName
  fullName: Module.FullyQualifiedName
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.GetCustomAttributes*
  parent: System.Reflection.Module
  isExternal: false
  name: GetCustomAttributes
  nameWithType: Module.GetCustomAttributes
  fullName: Module.GetCustomAttributes
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.GetCustomAttributesData*
  parent: System.Reflection.Module
  isExternal: false
  name: GetCustomAttributesData
  nameWithType: Module.GetCustomAttributesData
  fullName: Module.GetCustomAttributesData
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.GetField*
  parent: System.Reflection.Module
  isExternal: false
  name: GetField
  nameWithType: Module.GetField
  fullName: Module.GetField
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.GetFields*
  parent: System.Reflection.Module
  isExternal: false
  name: GetFields
  nameWithType: Module.GetFields
  fullName: Module.GetFields
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.GetHashCode*
  parent: System.Reflection.Module
  isExternal: false
  name: GetHashCode
  nameWithType: Module.GetHashCode
  fullName: Module.GetHashCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.GetMethod*
  parent: System.Reflection.Module
  isExternal: false
  name: GetMethod
  nameWithType: Module.GetMethod
  fullName: Module.GetMethod
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.GetMethodImpl*
  parent: System.Reflection.Module
  isExternal: false
  name: GetMethodImpl
  nameWithType: Module.GetMethodImpl
  fullName: Module.GetMethodImpl
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.GetMethods*
  parent: System.Reflection.Module
  isExternal: false
  name: GetMethods
  nameWithType: Module.GetMethods
  fullName: Module.GetMethods
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.GetObjectData*
  parent: System.Reflection.Module
  isExternal: false
  name: GetObjectData
  nameWithType: Module.GetObjectData
  fullName: Module.GetObjectData
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.GetPEKind*
  parent: System.Reflection.Module
  isExternal: false
  name: GetPEKind
  nameWithType: Module.GetPEKind
  fullName: Module.GetPEKind
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.GetSignerCertificate*
  parent: System.Reflection.Module
  isExternal: false
  name: GetSignerCertificate
  nameWithType: Module.GetSignerCertificate
  fullName: Module.GetSignerCertificate
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.GetType*
  parent: System.Reflection.Module
  isExternal: false
  name: GetType
  nameWithType: Module.GetType
  fullName: Module.GetType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netstandard-1.3
  - netstandard-1.4
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.GetTypes*
  parent: System.Reflection.Module
  isExternal: false
  name: GetTypes
  nameWithType: Module.GetTypes
  fullName: Module.GetTypes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.IsDefined*
  parent: System.Reflection.Module
  isExternal: false
  name: IsDefined
  nameWithType: Module.IsDefined
  fullName: Module.IsDefined
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.IsResource*
  parent: System.Reflection.Module
  isExternal: false
  name: IsResource
  nameWithType: Module.IsResource
  fullName: Module.IsResource
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.MDStreamVersion*
  parent: System.Reflection.Module
  isExternal: false
  name: MDStreamVersion
  nameWithType: Module.MDStreamVersion
  fullName: Module.MDStreamVersion
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.MetadataToken*
  parent: System.Reflection.Module
  isExternal: false
  name: MetadataToken
  nameWithType: Module.MetadataToken
  fullName: Module.MetadataToken
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.ModuleHandle*
  parent: System.Reflection.Module
  isExternal: false
  name: ModuleHandle
  nameWithType: Module.ModuleHandle
  fullName: Module.ModuleHandle
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.ModuleVersionId*
  parent: System.Reflection.Module
  isExternal: false
  name: ModuleVersionId
  nameWithType: Module.ModuleVersionId
  fullName: Module.ModuleVersionId
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.Name*
  parent: System.Reflection.Module
  isExternal: false
  name: Name
  nameWithType: Module.Name
  fullName: Module.Name
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.op_Equality*
  parent: System.Reflection.Module
  isExternal: false
  name: op_Equality
  nameWithType: Module.op_Equality
  fullName: Module.op_Equality
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.op_Inequality*
  parent: System.Reflection.Module
  isExternal: false
  name: op_Inequality
  nameWithType: Module.op_Inequality
  fullName: Module.op_Inequality
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.ResolveField*
  parent: System.Reflection.Module
  isExternal: false
  name: ResolveField
  nameWithType: Module.ResolveField
  fullName: Module.ResolveField
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.ResolveMember*
  parent: System.Reflection.Module
  isExternal: false
  name: ResolveMember
  nameWithType: Module.ResolveMember
  fullName: Module.ResolveMember
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.ResolveMethod*
  parent: System.Reflection.Module
  isExternal: false
  name: ResolveMethod
  nameWithType: Module.ResolveMethod
  fullName: Module.ResolveMethod
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.ResolveSignature*
  parent: System.Reflection.Module
  isExternal: false
  name: ResolveSignature
  nameWithType: Module.ResolveSignature
  fullName: Module.ResolveSignature
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.ResolveString*
  parent: System.Reflection.Module
  isExternal: false
  name: ResolveString
  nameWithType: Module.ResolveString
  fullName: Module.ResolveString
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.ResolveType*
  parent: System.Reflection.Module
  isExternal: false
  name: ResolveType
  nameWithType: Module.ResolveType
  fullName: Module.ResolveType
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.ScopeName*
  parent: System.Reflection.Module
  isExternal: false
  name: ScopeName
  nameWithType: Module.ScopeName
  fullName: Module.ScopeName
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.ToString*
  parent: System.Reflection.Module
  isExternal: false
  name: ToString
  nameWithType: Module.ToString
  fullName: Module.ToString
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes*
  parent: System.Reflection.Module
  isExternal: false
  name: System.Reflection.ICustomAttributeProvider.GetCustomAttributes
  nameWithType: Module.System.Reflection.ICustomAttributeProvider.GetCustomAttributes
  fullName: Module.System.Reflection.ICustomAttributeProvider.GetCustomAttributes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#IsDefined*
  parent: System.Reflection.Module
  isExternal: false
  name: System.Reflection.ICustomAttributeProvider.IsDefined
  nameWithType: Module.System.Reflection.ICustomAttributeProvider.IsDefined
  fullName: Module.System.Reflection.ICustomAttributeProvider.IsDefined
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames*
  parent: System.Reflection.Module
  isExternal: false
  name: System.Runtime.InteropServices._Module.GetIDsOfNames
  nameWithType: Module.System.Runtime.InteropServices._Module.GetIDsOfNames
  fullName: Module.System.Runtime.InteropServices._Module.GetIDsOfNames
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo*
  parent: System.Reflection.Module
  isExternal: false
  name: System.Runtime.InteropServices._Module.GetTypeInfo
  nameWithType: Module.System.Runtime.InteropServices._Module.GetTypeInfo
  fullName: Module.System.Runtime.InteropServices._Module.GetTypeInfo
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount*
  parent: System.Reflection.Module
  isExternal: false
  name: System.Runtime.InteropServices._Module.GetTypeInfoCount
  nameWithType: Module.System.Runtime.InteropServices._Module.GetTypeInfoCount
  fullName: Module.System.Runtime.InteropServices._Module.GetTypeInfoCount
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke*
  parent: System.Reflection.Module
  isExternal: false
  name: System.Runtime.InteropServices._Module.Invoke
  nameWithType: Module.System.Runtime.InteropServices._Module.Invoke
  fullName: Module.System.Runtime.InteropServices._Module.Invoke
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttribute(Module, Type)
  nameWithType: CustomAttributeExtensions.GetCustomAttribute(Module, Type)
  fullName: CustomAttributeExtensions.GetCustomAttribute(Module, Type)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttribute<T>(Module)
  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(Module)
  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(Module)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttributes(Module)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes(Module)
  fullName: CustomAttributeExtensions.GetCustomAttributes(Module)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttributes(Module, Type)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes(Module, Type)
  fullName: CustomAttributeExtensions.GetCustomAttributes(Module, Type)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttributes<T>(Module)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(Module)
  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(Module)
- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: IsDefined(Module, Type)
  nameWithType: CustomAttributeExtensions.IsDefined(Module, Type)
  fullName: CustomAttributeExtensions.IsDefined(Module, Type)
- uid: System.Reflection.ModuleExtensions.GetModuleVersionId(System.Reflection.Module)
  parent: System.Reflection.ModuleExtensions
  isExternal: false
  name: GetModuleVersionId(Module)
  nameWithType: ModuleExtensions.GetModuleVersionId(Module)
  fullName: ModuleExtensions.GetModuleVersionId(Module)
- uid: System.Reflection.ModuleExtensions.HasModuleVersionId(System.Reflection.Module)
  parent: System.Reflection.ModuleExtensions
  isExternal: false
  name: HasModuleVersionId(Module)
  nameWithType: ModuleExtensions.HasModuleVersionId(Module)
  fullName: ModuleExtensions.HasModuleVersionId(Module)
- uid: System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Runtime.InteropServices._Module
  parent: System.Runtime.InteropServices
  isExternal: false
  name: _Module
  nameWithType: _Module
  fullName: System.Runtime.InteropServices._Module
- uid: System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: false
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
