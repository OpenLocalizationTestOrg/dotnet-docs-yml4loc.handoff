{"nodes":[{"content":"Provides a set of `static` (`Shared` in Visual Basic) methods for querying data structures that implement <xref href=\"System.Linq.IQueryable`1\"></xref>.","nodes":[{"pos":[0,152],"content":"Provides a set of <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic) methods for querying data structures that implement <ph id=\"ph3\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph>.","source":"Provides a set of `static` (`Shared` in Visual Basic) methods for querying data structures that implement <xref href=\"System.Linq.IQueryable`1\"></xref>."}],"pos":[16608,16761],"yaml":true},{"content":"The set of methods declared in the <xref:System.Linq.Queryable> class provides an implementation of the standard query operators for querying data sources that implement <xref:System.Linq.IQueryable%601>. The standard query operators are general purpose methods that follow the [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.  \n  \n The majority of the methods in this class are defined as extension methods that extend the <xref:System.Linq.IQueryable%601> type. This means they can be called like an instance method on any object that implements <xref:System.Linq.IQueryable%601>. These methods that extend <xref:System.Linq.IQueryable%601> do not perform any querying directly. Instead, their functionality is to build an <xref:System.Linq.Expressions.Expression> object, which is an expression tree that represents the cumulative query. The methods then pass the new expression tree to either the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method or the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the input <xref:System.Linq.IQueryable%601>. The method that is called depends on whether the <xref:System.Linq.Queryable> method returns a singleton value, in which case <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> is called, or has enumerable results, in which case <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is called.  \n  \n The actual query execution on the target data is performed by a class that implements <xref:System.Linq.IQueryable%601>. The expectation of any <xref:System.Linq.IQueryable%601> implementation is that the result of executing an expression tree that was constructed by a <xref:System.Linq.Queryable> standard query operator method is equivalent to the result of calling the corresponding method in the <xref:System.Linq.Enumerable> class, if the data source were an <xref:System.Collections.Generic.IEnumerable%601>.  \n  \n In addition to the standard query operator methods that operate on <xref:System.Linq.IQueryable%601> objects, this class also contains a method, <xref:System.Linq.Queryable.AsQueryable%2A>, which types <xref:System.Collections.IEnumerable> objects as <xref:System.Linq.IQueryable> objects.","nodes":[{"pos":[0,456],"content":"The set of methods declared in the <xref:System.Linq.Queryable> class provides an implementation of the standard query operators for querying data sources that implement <xref:System.Linq.IQueryable%601>. The standard query operators are general purpose methods that follow the [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.","nodes":[{"content":"The set of methods declared in the <ph id=\"ph1\">&lt;xref:System.Linq.Queryable&gt;</ph> class provides an implementation of the standard query operators for querying data sources that implement <ph id=\"ph2\">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.","pos":[0,204],"source":"The set of methods declared in the <xref:System.Linq.Queryable> class provides an implementation of the standard query operators for querying data sources that implement <xref:System.Linq.IQueryable%601>."},{"content":"The standard query operators are general purpose methods that follow the <ph id=\"ph1\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.","pos":[205,456],"source":" The standard query operators are general purpose methods that follow the [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language."}]},{"pos":[463,1652],"content":"The majority of the methods in this class are defined as extension methods that extend the <xref:System.Linq.IQueryable%601> type. This means they can be called like an instance method on any object that implements <xref:System.Linq.IQueryable%601>. These methods that extend <xref:System.Linq.IQueryable%601> do not perform any querying directly. Instead, their functionality is to build an <xref:System.Linq.Expressions.Expression> object, which is an expression tree that represents the cumulative query. The methods then pass the new expression tree to either the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method or the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the input <xref:System.Linq.IQueryable%601>. The method that is called depends on whether the <xref:System.Linq.Queryable> method returns a singleton value, in which case <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> is called, or has enumerable results, in which case <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is called.","nodes":[{"content":"The majority of the methods in this class are defined as extension methods that extend the <xref:System.Linq.IQueryable%601> type. This means they can be called like an instance method on any object that implements <xref:System.Linq.IQueryable%601>. These methods that extend <xref:System.Linq.IQueryable%601> do not perform any querying directly. Instead, their functionality is to build an <xref:System.Linq.Expressions.Expression> object, which is an expression tree that represents the cumulative query. The methods then pass the new expression tree to either the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method or the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the input <xref:System.Linq.IQueryable%601>. The method that is called depends on whether the <xref:System.Linq.Queryable> method returns a singleton value, in which case <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> is called, or has enumerable results, in which case <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is called.","pos":[0,1189],"nodes":[{"content":"The majority of the methods in this class are defined as extension methods that extend the <ph id=\"ph1\">&lt;xref:System.Linq.IQueryable%601&gt;</ph> type.","pos":[0,130],"source":"The majority of the methods in this class are defined as extension methods that extend the <xref:System.Linq.IQueryable%601> type."},{"content":"This means they can be called like an instance method on any object that implements <ph id=\"ph1\">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.","pos":[131,249],"source":" This means they can be called like an instance method on any object that implements <xref:System.Linq.IQueryable%601>."},{"content":"These methods that extend <ph id=\"ph1\">&lt;xref:System.Linq.IQueryable%601&gt;</ph> do not perform any querying directly.","pos":[250,347],"source":" These methods that extend <xref:System.Linq.IQueryable%601> do not perform any querying directly."},{"content":"Instead, their functionality is to build an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression&gt;</ph> object, which is an expression tree that represents the cumulative query.","pos":[348,507],"source":" Instead, their functionality is to build an <xref:System.Linq.Expressions.Expression> object, which is an expression tree that represents the cumulative query."},{"content":"The methods then pass the new expression tree to either the <ph id=\"ph1\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method or the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the input <ph id=\"ph3\">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.","pos":[508,818],"source":" The methods then pass the new expression tree to either the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method or the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the input <xref:System.Linq.IQueryable%601>."},{"content":"The method that is called depends on whether the <ph id=\"ph1\">&lt;xref:System.Linq.Queryable&gt;</ph> method returns a singleton value, in which case <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is called, or has enumerable results, in which case <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is called.","pos":[819,1189],"source":" The method that is called depends on whether the <xref:System.Linq.Queryable> method returns a singleton value, in which case <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> is called, or has enumerable results, in which case <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is called."}]}]},{"pos":[1659,2174],"content":"The actual query execution on the target data is performed by a class that implements <xref:System.Linq.IQueryable%601>. The expectation of any <xref:System.Linq.IQueryable%601> implementation is that the result of executing an expression tree that was constructed by a <xref:System.Linq.Queryable> standard query operator method is equivalent to the result of calling the corresponding method in the <xref:System.Linq.Enumerable> class, if the data source were an <xref:System.Collections.Generic.IEnumerable%601>.","nodes":[{"content":"The actual query execution on the target data is performed by a class that implements <xref:System.Linq.IQueryable%601>. The expectation of any <xref:System.Linq.IQueryable%601> implementation is that the result of executing an expression tree that was constructed by a <xref:System.Linq.Queryable> standard query operator method is equivalent to the result of calling the corresponding method in the <xref:System.Linq.Enumerable> class, if the data source were an <xref:System.Collections.Generic.IEnumerable%601>.","pos":[0,515],"nodes":[{"content":"The actual query execution on the target data is performed by a class that implements <ph id=\"ph1\">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.","pos":[0,120],"source":"The actual query execution on the target data is performed by a class that implements <xref:System.Linq.IQueryable%601>."},{"content":"The expectation of any <ph id=\"ph1\">&lt;xref:System.Linq.IQueryable%601&gt;</ph> implementation is that the result of executing an expression tree that was constructed by a <ph id=\"ph2\">&lt;xref:System.Linq.Queryable&gt;</ph> standard query operator method is equivalent to the result of calling the corresponding method in the <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable&gt;</ph> class, if the data source were an <ph id=\"ph4\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.","pos":[121,515],"source":" The expectation of any <xref:System.Linq.IQueryable%601> implementation is that the result of executing an expression tree that was constructed by a <xref:System.Linq.Queryable> standard query operator method is equivalent to the result of calling the corresponding method in the <xref:System.Linq.Enumerable> class, if the data source were an <xref:System.Collections.Generic.IEnumerable%601>."}]}]},{"pos":[2181,2470],"content":"In addition to the standard query operator methods that operate on <xref:System.Linq.IQueryable%601> objects, this class also contains a method, <xref:System.Linq.Queryable.AsQueryable%2A>, which types <xref:System.Collections.IEnumerable> objects as <xref:System.Linq.IQueryable> objects.","nodes":[{"content":"In addition to the standard query operator methods that operate on <ph id=\"ph1\">&lt;xref:System.Linq.IQueryable%601&gt;</ph> objects, this class also contains a method, <ph id=\"ph2\">&lt;xref:System.Linq.Queryable.AsQueryable%2A&gt;</ph>, which types <ph id=\"ph3\">&lt;xref:System.Collections.IEnumerable&gt;</ph> objects as <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable&gt;</ph> objects.","pos":[0,289],"source":"In addition to the standard query operator methods that operate on <xref:System.Linq.IQueryable%601> objects, this class also contains a method, <xref:System.Linq.Queryable.AsQueryable%2A>, which types <xref:System.Collections.IEnumerable> objects as <xref:System.Linq.IQueryable> objects."}]}],"pos":[16772,19251],"yaml":true,"extradata":"MT"},{"content":"Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.","nodes":[{"pos":[0,178],"content":"Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.","nodes":[{"content":"Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.","pos":[0,178],"nodes":[{"content":"Applies an accumulator function over a sequence.","pos":[0,48]},{"content":"The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.","pos":[49,178]}]}]}],"pos":[21715,21894],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that the specified function, `func`, is applied to each value in the source sequence and the accumulated value is returned. The `seed` parameter is used as the seed value for the accumulated value, which corresponds to the first parameter in `func`. The final accumulated value is passed to `selector` to obtain the result value.  \n  \n To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <xref:System.Linq.Queryable.Count%2A> and <xref:System.Linq.Queryable.LongCount%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Queryable.Max%2A>, <xref:System.Linq.Queryable.Min%2A>, <xref:System.Linq.Queryable.Sum%2A>, and <xref:System.Linq.Queryable.Average%2A>.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1270],"content":"The <xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,660],"source":"The <xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[661,972],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1277,2060],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that the specified function, `func`, is applied to each value in the source sequence and the accumulated value is returned. The `seed` parameter is used as the seed value for the accumulated value, which corresponds to the first parameter in `func`. The final accumulated value is passed to `selector` to obtain the result value.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,428],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that the specified function, <ph id=\"ph1\">`func`</ph>, is applied to each value in the source sequence and the accumulated value is returned.","pos":[429,577],"source":" The expected behavior is that the specified function, `func`, is applied to each value in the source sequence and the accumulated value is returned."},{"content":"The <ph id=\"ph1\">`seed`</ph> parameter is used as the seed value for the accumulated value, which corresponds to the first parameter in <ph id=\"ph2\">`func`</ph>.","pos":[578,703],"source":" The `seed` parameter is used as the seed value for the accumulated value, which corresponds to the first parameter in `func`."},{"content":"The final accumulated value is passed to <ph id=\"ph1\">`selector`</ph> to obtain the result value.","pos":[704,783],"source":" The final accumulated value is passed to `selector` to obtain the result value."}]},{"pos":[2067,2467],"content":"To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <xref:System.Linq.Queryable.Count%2A> and <xref:System.Linq.Queryable.LongCount%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Queryable.Max%2A>, <xref:System.Linq.Queryable.Min%2A>, <xref:System.Linq.Queryable.Sum%2A>, and <xref:System.Linq.Queryable.Average%2A>.","nodes":[{"content":"To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Count%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Queryable.LongCount%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Max%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Linq.Queryable.Min%2A&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Linq.Queryable.Sum%2A&gt;</ph>, and <ph id=\"ph6\">&lt;xref:System.Linq.Queryable.Average%2A&gt;</ph>.","pos":[0,400],"source":"To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <xref:System.Linq.Queryable.Count%2A> and <xref:System.Linq.Queryable.LongCount%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Queryable.Max%2A>, <xref:System.Linq.Queryable.Min%2A>, <xref:System.Linq.Queryable.Sum%2A>, and <xref:System.Linq.Queryable.Average%2A>."}]}],"pos":[21905,24381],"yaml":true,"extradata":"MT"},{"content":"A sequence to aggregate over.","nodes":[{"pos":[0,29],"content":"A sequence to aggregate over.","nodes":[{"content":"A sequence to aggregate over.","pos":[0,29]}]}],"pos":[25434,25464],"yaml":true},{"content":"The initial accumulator value.","nodes":[{"pos":[0,30],"content":"The initial accumulator value.","nodes":[{"content":"The initial accumulator value.","pos":[0,30]}]}],"pos":[25522,25553],"yaml":true},{"content":"An accumulator function to invoke on each element.","nodes":[{"pos":[0,50],"content":"An accumulator function to invoke on each element.","nodes":[{"content":"An accumulator function to invoke on each element.","pos":[0,50]}]}],"pos":[25680,25731],"yaml":true},{"content":"A function to transform the final accumulator value into the result value.","nodes":[{"pos":[0,74],"content":"A function to transform the final accumulator value into the result value.","nodes":[{"content":"A function to transform the final accumulator value into the result value.","pos":[0,74]}]}],"pos":[25850,25925],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[25982,26031],"yaml":true},{"content":"The type of the accumulator value.","nodes":[{"pos":[0,34],"content":"The type of the accumulator value.","nodes":[{"content":"The type of the accumulator value.","pos":[0,34]}]}],"pos":[26072,26107],"yaml":true},{"content":"The type of the resulting value.","nodes":[{"pos":[0,32],"content":"The type of the resulting value.","nodes":[{"content":"The type of the resulting value.","pos":[0,32]}]}],"pos":[26144,26177],"yaml":true},{"content":"The transformed final accumulator value.","nodes":[{"pos":[0,40],"content":"The transformed final accumulator value.","nodes":[{"content":"The transformed final accumulator value.","pos":[0,40]}]}],"pos":[26228,26269],"yaml":true},{"content":"<code>source</code> or <code>func</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;func&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>source</code> or <code>func</code> or <code>selector</code> is `null`."}],"pos":[26433,26510],"yaml":true},{"content":"Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.","nodes":[{"pos":[0,115],"content":"Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.","nodes":[{"content":"Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.","pos":[0,115],"nodes":[{"content":"Applies an accumulator function over a sequence.","pos":[0,48]},{"content":"The specified seed value is used as the initial accumulator value.","pos":[49,115]}]}]}],"pos":[28265,28381],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that the specified function, `func`, is applied to each value in the source sequence and the accumulated value is returned. The `seed` parameter is used as the seed value for the accumulated value, which corresponds to the first parameter in `func`.  \n  \n To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <xref:System.Linq.Queryable.Count%2A> and <xref:System.Linq.Queryable.LongCount%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Queryable.Max%2A>, <xref:System.Linq.Queryable.Min%2A>, <xref:System.Linq.Queryable.Sum%2A>, and <xref:System.Linq.Queryable.Average%2A>.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1116],"content":"The <xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,506],"source":"The <xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[507,818],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1123,1749],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that the specified function, `func`, is applied to each value in the source sequence and the accumulated value is returned. The `seed` parameter is used as the seed value for the accumulated value, which corresponds to the first parameter in `func`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,351],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that the specified function, <ph id=\"ph1\">`func`</ph>, is applied to each value in the source sequence and the accumulated value is returned.","pos":[352,500],"source":" The expected behavior is that the specified function, `func`, is applied to each value in the source sequence and the accumulated value is returned."},{"content":"The <ph id=\"ph1\">`seed`</ph> parameter is used as the seed value for the accumulated value, which corresponds to the first parameter in <ph id=\"ph2\">`func`</ph>.","pos":[501,626],"source":" The `seed` parameter is used as the seed value for the accumulated value, which corresponds to the first parameter in `func`."}]},{"pos":[1756,2156],"content":"To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <xref:System.Linq.Queryable.Count%2A> and <xref:System.Linq.Queryable.LongCount%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Queryable.Max%2A>, <xref:System.Linq.Queryable.Min%2A>, <xref:System.Linq.Queryable.Sum%2A>, and <xref:System.Linq.Queryable.Average%2A>.","nodes":[{"content":"To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Count%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Queryable.LongCount%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Max%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Linq.Queryable.Min%2A&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Linq.Queryable.Sum%2A&gt;</ph>, and <ph id=\"ph6\">&lt;xref:System.Linq.Queryable.Average%2A&gt;</ph>.","pos":[0,400],"source":"To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <xref:System.Linq.Queryable.Count%2A> and <xref:System.Linq.Queryable.LongCount%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Queryable.Max%2A>, <xref:System.Linq.Queryable.Min%2A>, <xref:System.Linq.Queryable.Sum%2A>, and <xref:System.Linq.Queryable.Average%2A>."}]}],"pos":[28392,30557],"yaml":true,"extradata":"MT"},{"content":"A sequence to aggregate over.","nodes":[{"pos":[0,29],"content":"A sequence to aggregate over.","nodes":[{"content":"A sequence to aggregate over.","pos":[0,29]}]}],"pos":[31481,31511],"yaml":true},{"content":"The initial accumulator value.","nodes":[{"pos":[0,30],"content":"The initial accumulator value.","nodes":[{"content":"The initial accumulator value.","pos":[0,30]}]}],"pos":[31569,31600],"yaml":true},{"content":"An accumulator function to invoke on each element.","nodes":[{"pos":[0,50],"content":"An accumulator function to invoke on each element.","nodes":[{"content":"An accumulator function to invoke on each element.","pos":[0,50]}]}],"pos":[31727,31778],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[31835,31884],"yaml":true},{"content":"The type of the accumulator value.","nodes":[{"pos":[0,34],"content":"The type of the accumulator value.","nodes":[{"content":"The type of the accumulator value.","pos":[0,34]}]}],"pos":[31925,31960],"yaml":true},{"content":"The final accumulator value.","nodes":[{"pos":[0,28],"content":"The final accumulator value.","nodes":[{"content":"The final accumulator value.","pos":[0,28]}]}],"pos":[32015,32044],"yaml":true},{"content":"<code>source</code> or <code>func</code> is `null`.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;func&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>func</code> is `null`."}],"pos":[32208,32260],"yaml":true},{"content":"Applies an accumulator function over a sequence.","nodes":[{"pos":[0,48],"content":"Applies an accumulator function over a sequence.","nodes":[{"content":"Applies an accumulator function over a sequence.","pos":[0,48]}]}],"pos":[33904,33953],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that the specified function, `func`, is applied to each value in the source sequence and the accumulated value is returned. The first value in `source` is used as the seed value for the accumulated value, which corresponds to the first parameter in `func`.  \n  \n To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <xref:System.Linq.Queryable.Count%2A> and <xref:System.Linq.Queryable.LongCount%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Queryable.Max%2A>, <xref:System.Linq.Queryable.Min%2A>, <xref:System.Linq.Queryable.Sum%2A>, and <xref:System.Linq.Queryable.Average%2A>.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1096],"content":"The <xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,486],"source":"The <xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[487,798],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1103,1726],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that the specified function, `func`, is applied to each value in the source sequence and the accumulated value is returned. The first value in `source` is used as the seed value for the accumulated value, which corresponds to the first parameter in `func`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,341],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that the specified function, <ph id=\"ph1\">`func`</ph>, is applied to each value in the source sequence and the accumulated value is returned.","pos":[342,490],"source":" The expected behavior is that the specified function, `func`, is applied to each value in the source sequence and the accumulated value is returned."},{"content":"The first value in <ph id=\"ph1\">`source`</ph> is used as the seed value for the accumulated value, which corresponds to the first parameter in <ph id=\"ph2\">`func`</ph>.","pos":[491,623],"source":" The first value in `source` is used as the seed value for the accumulated value, which corresponds to the first parameter in `func`."}]},{"pos":[1733,2133],"content":"To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <xref:System.Linq.Queryable.Count%2A> and <xref:System.Linq.Queryable.LongCount%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Queryable.Max%2A>, <xref:System.Linq.Queryable.Min%2A>, <xref:System.Linq.Queryable.Sum%2A>, and <xref:System.Linq.Queryable.Average%2A>.","nodes":[{"content":"To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Count%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Queryable.LongCount%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Max%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Linq.Queryable.Min%2A&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Linq.Queryable.Sum%2A&gt;</ph>, and <ph id=\"ph6\">&lt;xref:System.Linq.Queryable.Average%2A&gt;</ph>.","pos":[0,400],"source":"To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <xref:System.Linq.Queryable.Count%2A> and <xref:System.Linq.Queryable.LongCount%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Queryable.Max%2A>, <xref:System.Linq.Queryable.Min%2A>, <xref:System.Linq.Queryable.Sum%2A>, and <xref:System.Linq.Queryable.Average%2A>."}]}],"pos":[33964,36106],"yaml":true,"extradata":"MT"},{"content":"A sequence to aggregate over.","nodes":[{"pos":[0,29],"content":"A sequence to aggregate over.","nodes":[{"content":"A sequence to aggregate over.","pos":[0,29]}]}],"pos":[36944,36974],"yaml":true},{"content":"An accumulator function to apply to each element.","nodes":[{"pos":[0,49],"content":"An accumulator function to apply to each element.","nodes":[{"content":"An accumulator function to apply to each element.","pos":[0,49]}]}],"pos":[37093,37143],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[37200,37249],"yaml":true},{"content":"The final accumulator value.","nodes":[{"pos":[0,28],"content":"The final accumulator value.","nodes":[{"content":"The final accumulator value.","pos":[0,28]}]}],"pos":[37300,37329],"yaml":true},{"content":"<code>source</code> or <code>func</code> is `null`.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;func&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>func</code> is `null`."}],"pos":[37493,37545],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[37655,37697],"yaml":true},{"content":"Determines whether all the elements of a sequence satisfy a condition.","nodes":[{"pos":[0,70],"content":"Determines whether all the elements of a sequence satisfy a condition.","nodes":[{"content":"Determines whether all the elements of a sequence satisfy a condition.","pos":[0,70]}]}],"pos":[39302,39373],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the `source` parameter's type. The expected behavior is that it determines if all the elements in `source` satisfy the condition in `predicate`.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1078],"content":"The <xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,468],"source":"The <xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[469,780],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1085,1526],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the `source` parameter's type. The expected behavior is that it determines if all the elements in `source` satisfy the condition in `predicate`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the <ph id=\"ph2\">`source`</ph> parameter's type.","pos":[0,327],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the `source` parameter's type."},{"content":"The expected behavior is that it determines if all the elements in <ph id=\"ph1\">`source`</ph> satisfy the condition in <ph id=\"ph2\">`predicate`</ph>.","pos":[328,441],"source":" The expected behavior is that it determines if all the elements in `source` satisfy the condition in `predicate`."}]}],"pos":[39384,40917],"yaml":true,"extradata":"MT"},{"content":"A sequence whose elements to test for a condition.","nodes":[{"pos":[0,50],"content":"A sequence whose elements to test for a condition.","nodes":[{"content":"A sequence whose elements to test for a condition.","pos":[0,50]}]}],"pos":[42506,42557],"yaml":true},{"content":"A function to test each element for a condition.","nodes":[{"pos":[0,48],"content":"A function to test each element for a condition.","nodes":[{"content":"A function to test each element for a condition.","pos":[0,48]}]}],"pos":[42680,42729],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[42786,42835],"yaml":true},{"content":"`true` if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, `false`.","nodes":[{"pos":[0,139],"content":"<ph id=\"ph1\">`true`</ph> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, `false`."}],"pos":[42893,43035],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[43193,43250],"yaml":true},{"content":"Determines whether a sequence contains any elements.","nodes":[{"pos":[0,52],"content":"Determines whether a sequence contains any elements.","nodes":[{"content":"Determines whether a sequence contains any elements.","pos":[0,52]}]}],"pos":[44546,44599],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it determines if `source` contains any elements.","nodes":[{"pos":[0,612],"content":"The <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,300],"source":"The <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[301,612],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[619,946],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it determines if `source` contains any elements.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,248],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it determines if <ph id=\"ph1\">`source`</ph> contains any elements.","pos":[249,327],"source":" The expected behavior is that it determines if `source` contains any elements."}]}],"pos":[44610,45561],"yaml":true,"extradata":"MT"},{"content":"A sequence to check for being empty.","nodes":[{"pos":[0,36],"content":"A sequence to check for being empty.","nodes":[{"content":"A sequence to check for being empty.","pos":[0,36]}]}],"pos":[47027,47064],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[47121,47170],"yaml":true},{"content":"`true` if the source sequence contains any elements; otherwise, `false`.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">`true`</ph> if the source sequence contains any elements; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the source sequence contains any elements; otherwise, `false`."}],"pos":[47228,47303],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[47461,47492],"yaml":true},{"content":"Determines whether any element of a sequence satisfies a condition.","nodes":[{"pos":[0,67],"content":"Determines whether any element of a sequence satisfies a condition.","nodes":[{"content":"Determines whether any element of a sequence satisfies a condition.","pos":[0,67]}]}],"pos":[49075,49143],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it determines if any of the elements of `source` satisfy the condition specified by `predicate`.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1078],"content":"The <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,468],"source":"The <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[469,780],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1085,1544],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it determines if any of the elements of `source` satisfy the condition specified by `predicate`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,332],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it determines if any of the elements of <ph id=\"ph1\">`source`</ph> satisfy the condition specified by <ph id=\"ph2\">`predicate`</ph>.","pos":[333,459],"source":" The expected behavior is that it determines if any of the elements of `source` satisfy the condition specified by `predicate`."}]}],"pos":[49154,50705],"yaml":true,"extradata":"MT"},{"content":"A sequence whose elements to test for a condition.","nodes":[{"pos":[0,50],"content":"A sequence whose elements to test for a condition.","nodes":[{"content":"A sequence whose elements to test for a condition.","pos":[0,50]}]}],"pos":[51543,51594],"yaml":true},{"content":"A function to test each element for a condition.","nodes":[{"pos":[0,48],"content":"A function to test each element for a condition.","nodes":[{"content":"A function to test each element for a condition.","pos":[0,48]}]}],"pos":[51717,51766],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[51823,51872],"yaml":true},{"content":"`true` if any elements in the source sequence pass the test in the specified predicate; otherwise, `false`.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">`true`</ph> if any elements in the source sequence pass the test in the specified predicate; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if any elements in the source sequence pass the test in the specified predicate; otherwise, `false`."}],"pos":[51930,52040],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[52198,52255],"yaml":true},{"content":"Converts an <xref href=\"System.Collections.IEnumerable\"></xref> to an <xref href=\"System.Linq.IQueryable\"></xref>.","nodes":[{"pos":[0,114],"content":"Converts an <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph> to an <ph id=\"ph2\">&lt;xref href=\"System.Linq.IQueryable\"&gt;&lt;/xref&gt;</ph>.","source":"Converts an <xref href=\"System.Collections.IEnumerable\"></xref> to an <xref href=\"System.Linq.IQueryable\"></xref>."}],"pos":[54730,54845],"yaml":true},{"content":"If the type of `source` implements <xref:System.Linq.IQueryable%601>, <xref:System.Linq.Queryable.AsQueryable%28System.Collections.IEnumerable%29> returns it directly. Otherwise, it returns an <xref:System.Linq.IQueryable%601> that executes queries by calling the equivalent query operator methods in <xref:System.Linq.Enumerable> instead of those in <xref:System.Linq.Queryable>.  \n  \n This method assumes that `source` implements <xref:System.Collections.Generic.IEnumerable%601> for some `T`. At runtime, the result is of type <xref:System.Linq.IQueryable%601> for the same `T`. This method is useful in dynamic scenarios when you do not statically know the type of `T`.","nodes":[{"pos":[0,380],"content":"If the type of `source` implements <xref:System.Linq.IQueryable%601>, <xref:System.Linq.Queryable.AsQueryable%28System.Collections.IEnumerable%29> returns it directly. Otherwise, it returns an <xref:System.Linq.IQueryable%601> that executes queries by calling the equivalent query operator methods in <xref:System.Linq.Enumerable> instead of those in <xref:System.Linq.Queryable>.","nodes":[{"content":"If the type of <ph id=\"ph1\">`source`</ph> implements <ph id=\"ph2\">&lt;xref:System.Linq.IQueryable%601&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.AsQueryable%28System.Collections.IEnumerable%29&gt;</ph> returns it directly.","pos":[0,167],"source":"If the type of `source` implements <xref:System.Linq.IQueryable%601>, <xref:System.Linq.Queryable.AsQueryable%28System.Collections.IEnumerable%29> returns it directly."},{"content":"Otherwise, it returns an <ph id=\"ph1\">&lt;xref:System.Linq.IQueryable%601&gt;</ph> that executes queries by calling the equivalent query operator methods in <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable&gt;</ph> instead of those in <ph id=\"ph3\">&lt;xref:System.Linq.Queryable&gt;</ph>.","pos":[168,380],"source":" Otherwise, it returns an <xref:System.Linq.IQueryable%601> that executes queries by calling the equivalent query operator methods in <xref:System.Linq.Enumerable> instead of those in <xref:System.Linq.Queryable>."}]},{"pos":[387,673],"content":"This method assumes that `source` implements <xref:System.Collections.Generic.IEnumerable%601> for some `T`. At runtime, the result is of type <xref:System.Linq.IQueryable%601> for the same `T`. This method is useful in dynamic scenarios when you do not statically know the type of `T`.","nodes":[{"content":"This method assumes that <ph id=\"ph1\">`source`</ph> implements <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> for some <ph id=\"ph3\">`T`</ph>.","pos":[0,108],"source":"This method assumes that `source` implements <xref:System.Collections.Generic.IEnumerable%601> for some `T`."},{"content":"At runtime, the result is of type <ph id=\"ph1\">&lt;xref:System.Linq.IQueryable%601&gt;</ph> for the same <ph id=\"ph2\">`T`</ph>.","pos":[109,194],"source":" At runtime, the result is of type <xref:System.Linq.IQueryable%601> for the same `T`."},{"content":"This method is useful in dynamic scenarios when you do not statically know the type of <ph id=\"ph1\">`T`</ph>.","pos":[195,286],"source":" This method is useful in dynamic scenarios when you do not statically know the type of `T`."}]}],"pos":[54856,55534],"yaml":true,"extradata":"MT"},{"content":"A sequence to convert.","nodes":[{"pos":[0,22],"content":"A sequence to convert.","nodes":[{"content":"A sequence to convert.","pos":[0,22]}]}],"pos":[55747,55770],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable\"></xref> that represents the input sequence.","nodes":[{"pos":[0,82],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable\"&gt;&lt;/xref&gt;</ph> that represents the input sequence.","source":"An <xref href=\"System.Linq.IQueryable\"></xref> that represents the input sequence."}],"pos":[55836,55919],"yaml":true},{"content":"<code>source</code> does not implement <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> for some <code>T</code>.","nodes":[{"pos":[0,125],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> does not implement <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> for some <ph id=\"ph3\">&lt;code&gt;T&lt;/code&gt;</ph>.","source":"<code>source</code> does not implement <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> for some <code>T</code>."}],"pos":[56074,56200],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[56302,56333],"yaml":true},{"content":"Converts a generic <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to a generic <xref href=\"System.Linq.IQueryable`1\"></xref>.","nodes":[{"pos":[0,140],"content":"Converts a generic <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> to a generic <ph id=\"ph2\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph>.","source":"Converts a generic <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to a generic <xref href=\"System.Linq.IQueryable`1\"></xref>."}],"pos":[57734,57875],"yaml":true},{"content":"If the type of `source` implements <xref:System.Linq.IQueryable%601>, <xref:System.Linq.Queryable.AsQueryable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> returns it directly. Otherwise, it returns an <xref:System.Linq.IQueryable%601> that executes queries by calling the equivalent query operator methods in <xref:System.Linq.Enumerable> instead of those in <xref:System.Linq.Queryable>.","nodes":[{"pos":[0,408],"content":"If the type of `source` implements <xref:System.Linq.IQueryable%601>, <xref:System.Linq.Queryable.AsQueryable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> returns it directly. Otherwise, it returns an <xref:System.Linq.IQueryable%601> that executes queries by calling the equivalent query operator methods in <xref:System.Linq.Enumerable> instead of those in <xref:System.Linq.Queryable>.","nodes":[{"content":"If the type of <ph id=\"ph1\">`source`</ph> implements <ph id=\"ph2\">&lt;xref:System.Linq.IQueryable%601&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.AsQueryable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> returns it directly.","pos":[0,195],"source":"If the type of `source` implements <xref:System.Linq.IQueryable%601>, <xref:System.Linq.Queryable.AsQueryable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> returns it directly."},{"content":"Otherwise, it returns an <ph id=\"ph1\">&lt;xref:System.Linq.IQueryable%601&gt;</ph> that executes queries by calling the equivalent query operator methods in <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable&gt;</ph> instead of those in <ph id=\"ph3\">&lt;xref:System.Linq.Queryable&gt;</ph>.","pos":[196,408],"source":" Otherwise, it returns an <xref:System.Linq.IQueryable%601> that executes queries by calling the equivalent query operator methods in <xref:System.Linq.Enumerable> instead of those in <xref:System.Linq.Queryable>."}]}],"pos":[57886,58295],"yaml":true,"extradata":"MT"},{"content":"A sequence to convert.","nodes":[{"pos":[0,22],"content":"A sequence to convert.","nodes":[{"content":"A sequence to convert.","pos":[0,22]}]}],"pos":[59121,59144],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[59202,59251],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that represents the input sequence.","nodes":[{"pos":[0,84],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that represents the input sequence.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that represents the input sequence."}],"pos":[59327,59412],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[59578,59609],"yaml":true},{"content":"Computes the average of a sequence of <xref href=\"System.Single\"></xref> values.","nodes":[{"pos":[0,80],"content":"Computes the average of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the average of a sequence of <xref href=\"System.Single\"></xref> values."}],"pos":[60920,61001],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.","nodes":[{"pos":[0,586],"content":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> itself.","pos":[0,274],"source":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29> itself."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[275,586],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[593,927],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,251],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it calculates the average of the values in <ph id=\"ph1\">`source`</ph>.","pos":[252,334],"source":" The expected behavior is that it calculates the average of the values in `source`."}]}],"pos":[61012,61944],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Single\"></xref> values to calculate the average of.","nodes":[{"pos":[0,84],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values to calculate the average of.","source":"A sequence of <xref href=\"System.Single\"></xref> values to calculate the average of."}],"pos":[62728,62813],"yaml":true},{"content":"The average of the sequence of values.","nodes":[{"pos":[0,38],"content":"The average of the sequence of values.","nodes":[{"content":"The average of the sequence of values.","pos":[0,38]}]}],"pos":[62870,62909],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[63068,63099],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[63209,63251],"yaml":true},{"content":"Computes the average of a sequence of nullable <xref href=\"System.Single\"></xref> values.","nodes":[{"pos":[0,89],"content":"Computes the average of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the average of a sequence of nullable <xref href=\"System.Single\"></xref> values."}],"pos":[64643,64733],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.","nodes":[{"pos":[0,628],"content":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> itself.","pos":[0,316],"source":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> itself."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[317,628],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[635,990],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,272],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it calculates the average of the values in <ph id=\"ph1\">`source`</ph>.","pos":[273,355],"source":" The expected behavior is that it calculates the average of the values in `source`."}]}],"pos":[64744,65739],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Single\"></xref> values to calculate the average of.","nodes":[{"pos":[0,93],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values to calculate the average of.","source":"A sequence of nullable <xref href=\"System.Single\"></xref> values to calculate the average of."}],"pos":[66585,66679],"yaml":true},{"content":"The average of the sequence of values, or `null` if the source sequence is empty or contains only `null` values.","nodes":[{"pos":[0,112],"content":"The average of the sequence of values, or <ph id=\"ph1\">`null`</ph> if the source sequence is empty or contains only <ph id=\"ph2\">`null`</ph> values.","source":"The average of the sequence of values, or `null` if the source sequence is empty or contains only `null` values."}],"pos":[66753,66866],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[67025,67056],"yaml":true},{"content":"Computes the average of a sequence of nullable <xref href=\"System.Int64\"></xref> values.","nodes":[{"pos":[0,88],"content":"Computes the average of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the average of a sequence of nullable <xref href=\"System.Int64\"></xref> values."}],"pos":[68442,68531],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.","nodes":[{"pos":[0,626],"content":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> itself.","pos":[0,314],"source":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> itself."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[315,626],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[633,987],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,271],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it calculates the average of the values in <ph id=\"ph1\">`source`</ph>.","pos":[272,354],"source":" The expected behavior is that it calculates the average of the values in `source`."}]}],"pos":[68542,69534],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Int64\"></xref> values to calculate the average of.","nodes":[{"pos":[0,92],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values to calculate the average of.","source":"A sequence of nullable <xref href=\"System.Int64\"></xref> values to calculate the average of."}],"pos":[70265,70358],"yaml":true},{"content":"The average of the sequence of values, or `null` if the source sequence is empty or contains only `null` values.","nodes":[{"pos":[0,112],"content":"The average of the sequence of values, or <ph id=\"ph1\">`null`</ph> if the source sequence is empty or contains only <ph id=\"ph2\">`null`</ph> values.","source":"The average of the sequence of values, or `null` if the source sequence is empty or contains only `null` values."}],"pos":[70432,70545],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[70704,70735],"yaml":true},{"content":"Computes the average of a sequence of nullable <xref href=\"System.Double\"></xref> values.","nodes":[{"pos":[0,89],"content":"Computes the average of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the average of a sequence of nullable <xref href=\"System.Double\"></xref> values."}],"pos":[72127,72217],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.","nodes":[{"pos":[0,628],"content":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> itself.","pos":[0,316],"source":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> itself."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[317,628],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[635,990],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,272],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it calculates the average of the values in <ph id=\"ph1\">`source`</ph>.","pos":[273,355],"source":" The expected behavior is that it calculates the average of the values in `source`."}]}],"pos":[72228,73223],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Double\"></xref> values to calculate the average of.","nodes":[{"pos":[0,93],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values to calculate the average of.","source":"A sequence of nullable <xref href=\"System.Double\"></xref> values to calculate the average of."}],"pos":[74071,74165],"yaml":true},{"content":"The average of the sequence of values, or `null` if the source sequence is empty or contains only `null` values.","nodes":[{"pos":[0,112],"content":"The average of the sequence of values, or <ph id=\"ph1\">`null`</ph> if the source sequence is empty or contains only <ph id=\"ph2\">`null`</ph> values.","source":"The average of the sequence of values, or `null` if the source sequence is empty or contains only `null` values."}],"pos":[74239,74352],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[74511,74542],"yaml":true},{"content":"Computes the average of a sequence of nullable <xref href=\"System.Int32\"></xref> values.","nodes":[{"pos":[0,88],"content":"Computes the average of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the average of a sequence of nullable <xref href=\"System.Int32\"></xref> values."}],"pos":[75928,76017],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.","nodes":[{"pos":[0,626],"content":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> itself.","pos":[0,314],"source":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> itself."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[315,626],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[633,987],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,271],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it calculates the average of the values in <ph id=\"ph1\">`source`</ph>.","pos":[272,354],"source":" The expected behavior is that it calculates the average of the values in `source`."}]}],"pos":[76028,77020],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Int32\"></xref> values to calculate the average of.","nodes":[{"pos":[0,92],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values to calculate the average of.","source":"A sequence of nullable <xref href=\"System.Int32\"></xref> values to calculate the average of."}],"pos":[77864,77957],"yaml":true},{"content":"The average of the sequence of values, or `null` if the source sequence is empty or contains only `null` values.","nodes":[{"pos":[0,112],"content":"The average of the sequence of values, or <ph id=\"ph1\">`null`</ph> if the source sequence is empty or contains only <ph id=\"ph2\">`null`</ph> values.","source":"The average of the sequence of values, or `null` if the source sequence is empty or contains only `null` values."}],"pos":[78031,78144],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[78303,78334],"yaml":true},{"content":"Computes the average of a sequence of <xref href=\"System.Int64\"></xref> values.","nodes":[{"pos":[0,79],"content":"Computes the average of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the average of a sequence of <xref href=\"System.Int64\"></xref> values."}],"pos":[79639,79719],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.","nodes":[{"pos":[0,584],"content":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> itself.","pos":[0,272],"source":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29> itself."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[273,584],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[591,924],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,250],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it calculates the average of the values in <ph id=\"ph1\">`source`</ph>.","pos":[251,333],"source":" The expected behavior is that it calculates the average of the values in `source`."}]}],"pos":[79730,80659],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Int64\"></xref> values to calculate the average of.","nodes":[{"pos":[0,83],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values to calculate the average of.","source":"A sequence of <xref href=\"System.Int64\"></xref> values to calculate the average of."}],"pos":[81442,81526],"yaml":true},{"content":"The average of the sequence of values.","nodes":[{"pos":[0,38],"content":"The average of the sequence of values.","nodes":[{"content":"The average of the sequence of values.","pos":[0,38]}]}],"pos":[81583,81622],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[81781,81812],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[81922,81964],"yaml":true},{"content":"Computes the average of a sequence of <xref href=\"System.Int32\"></xref> values.","nodes":[{"pos":[0,79],"content":"Computes the average of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the average of a sequence of <xref href=\"System.Int32\"></xref> values."}],"pos":[83269,83349],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.","nodes":[{"pos":[0,584],"content":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> itself.","pos":[0,272],"source":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> itself."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[273,584],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[591,924],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,250],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it calculates the average of the values in <ph id=\"ph1\">`source`</ph>.","pos":[251,333],"source":" The expected behavior is that it calculates the average of the values in `source`."}]}],"pos":[83360,84289],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Int32\"></xref> values to calculate the average of.","nodes":[{"pos":[0,83],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values to calculate the average of.","source":"A sequence of <xref href=\"System.Int32\"></xref> values to calculate the average of."}],"pos":[84957,85041],"yaml":true},{"content":"The average of the sequence of values.","nodes":[{"pos":[0,38],"content":"The average of the sequence of values.","nodes":[{"content":"The average of the sequence of values.","pos":[0,38]}]}],"pos":[85098,85137],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[85296,85327],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[85437,85479],"yaml":true},{"content":"Computes the average of a sequence of <xref href=\"System.Double\"></xref> values.","nodes":[{"pos":[0,80],"content":"Computes the average of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the average of a sequence of <xref href=\"System.Double\"></xref> values."}],"pos":[86790,86871],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.","nodes":[{"pos":[0,586],"content":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> itself.","pos":[0,274],"source":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29> itself."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[275,586],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[593,927],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,251],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it calculates the average of the values in <ph id=\"ph1\">`source`</ph>.","pos":[252,334],"source":" The expected behavior is that it calculates the average of the values in `source`."}]}],"pos":[86882,87814],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Double\"></xref> values to calculate the average of.","nodes":[{"pos":[0,84],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values to calculate the average of.","source":"A sequence of <xref href=\"System.Double\"></xref> values to calculate the average of."}],"pos":[88600,88685],"yaml":true},{"content":"The average of the sequence of values.","nodes":[{"pos":[0,38],"content":"The average of the sequence of values.","nodes":[{"content":"The average of the sequence of values.","pos":[0,38]}]}],"pos":[88742,88781],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[88940,88971],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[89081,89123],"yaml":true},{"content":"Computes the average of a sequence of <xref href=\"System.Decimal\"></xref> values.","nodes":[{"pos":[0,81],"content":"Computes the average of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the average of a sequence of <xref href=\"System.Decimal\"></xref> values."}],"pos":[90440,90522],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.","nodes":[{"pos":[0,588],"content":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> itself.","pos":[0,276],"source":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> itself."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[277,588],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[595,930],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,252],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it calculates the average of the values in <ph id=\"ph1\">`source`</ph>.","pos":[253,335],"source":" The expected behavior is that it calculates the average of the values in `source`."}]}],"pos":[90533,91468],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Decimal\"></xref> values to calculate the average of.","nodes":[{"pos":[0,85],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values to calculate the average of.","source":"A sequence of <xref href=\"System.Decimal\"></xref> values to calculate the average of."}],"pos":[92257,92343],"yaml":true},{"content":"The average of the sequence of values.","nodes":[{"pos":[0,38],"content":"The average of the sequence of values.","nodes":[{"content":"The average of the sequence of values.","pos":[0,38]}]}],"pos":[92401,92440],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[92599,92630],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[92740,92782],"yaml":true},{"content":"Computes the average of a sequence of nullable <xref href=\"System.Decimal\"></xref> values.","nodes":[{"pos":[0,90],"content":"Computes the average of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the average of a sequence of nullable <xref href=\"System.Decimal\"></xref> values."}],"pos":[94180,94271],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.","nodes":[{"pos":[0,630],"content":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> itself.","pos":[0,318],"source":"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> itself."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[319,630],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[637,993],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,273],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it calculates the average of the values in <ph id=\"ph1\">`source`</ph>.","pos":[274,356],"source":" The expected behavior is that it calculates the average of the values in `source`."}]}],"pos":[94282,95280],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Decimal\"></xref> values to calculate the average of.","nodes":[{"pos":[0,94],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values to calculate the average of.","source":"A sequence of nullable <xref href=\"System.Decimal\"></xref> values to calculate the average of."}],"pos":[96131,96226],"yaml":true},{"content":"The average of the sequence of values, or `null` if the source sequence is empty or contains only `null` values.","nodes":[{"pos":[0,112],"content":"The average of the sequence of values, or <ph id=\"ph1\">`null`</ph> if the source sequence is empty or contains only <ph id=\"ph2\">`null`</ph> values.","source":"The average of the sequence of values, or `null` if the source sequence is empty or contains only `null` values."}],"pos":[96301,96414],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[96573,96604],"yaml":true},{"content":"Computes the average of a sequence of <xref href=\"System.Single\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.","nodes":[{"pos":[0,169],"content":"Computes the average of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.","source":"Computes the average of a sequence of <xref href=\"System.Single\"></xref> values that is obtained by invoking a projection function on each element of the input sequence."}],"pos":[98205,98375],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1084],"content":"The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,474],"source":"The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[475,786],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1091,1549],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,335],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it calculates the average of the values in <ph id=\"ph1\">`source`</ph> after invoking <ph id=\"ph2\">`selector`</ph> on each value.","pos":[336,458],"source":" The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value."}]}],"pos":[98386,99942],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to calculate the average of.","nodes":[{"pos":[0,49],"content":"A sequence of values to calculate the average of.","nodes":[{"content":"A sequence of values to calculate the average of.","pos":[0,49]}]}],"pos":[100928,100978],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[101099,101147],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[101204,101253],"yaml":true},{"content":"The average of the sequence of values.","nodes":[{"pos":[0,38],"content":"The average of the sequence of values.","nodes":[{"content":"The average of the sequence of values.","pos":[0,38]}]}],"pos":[101310,101349],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[101511,101567],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[101677,101719],"yaml":true},{"content":"Computes the average of a sequence of nullable <xref href=\"System.Single\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.","nodes":[{"pos":[0,178],"content":"Computes the average of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.","source":"Computes the average of a sequence of nullable <xref href=\"System.Single\"></xref> values that is obtained by invoking a projection function on each element of the input sequence."}],"pos":[103423,103602],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1122],"content":"The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,516],"source":"The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[517,824],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1129,1608],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,356],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it calculates the average of the values in <ph id=\"ph1\">`source`</ph> after invoking <ph id=\"ph2\">`selector`</ph> on each value.","pos":[357,479],"source":" The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value."}]}],"pos":[103613,105228],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to calculate the average of.","nodes":[{"pos":[0,49],"content":"A sequence of values to calculate the average of.","nodes":[{"content":"A sequence of values to calculate the average of.","pos":[0,49]}]}],"pos":[106234,106284],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[106422,106470],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[106527,106576],"yaml":true},{"content":"The average of the sequence of values, or `null` if the <code>source</code> sequence is empty or contains only `null` values.","nodes":[{"pos":[0,125],"content":"The average of the sequence of values, or <ph id=\"ph1\">`null`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> sequence is empty or contains only <ph id=\"ph3\">`null`</ph> values.","source":"The average of the sequence of values, or `null` if the <code>source</code> sequence is empty or contains only `null` values."}],"pos":[106650,106776],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[106938,106994],"yaml":true},{"content":"Computes the average of a sequence of nullable <xref href=\"System.Int64\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.","nodes":[{"pos":[0,177],"content":"Computes the average of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.","source":"Computes the average of a sequence of nullable <xref href=\"System.Int64\"></xref> values that is obtained by invoking a projection function on each element of the input sequence."}],"pos":[108670,108848],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1124],"content":"The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,514],"source":"The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[515,826],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1131,1609],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,355],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it calculates the average of the values in <ph id=\"ph1\">`source`</ph> after invoking <ph id=\"ph2\">`selector`</ph> on each value.","pos":[356,478],"source":" The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value."}]}],"pos":[108859,110475],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to calculate the average of.","nodes":[{"pos":[0,49],"content":"A sequence of values to calculate the average of.","nodes":[{"content":"A sequence of values to calculate the average of.","pos":[0,49]}]}],"pos":[111481,111531],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[111668,111716],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[111773,111822],"yaml":true},{"content":"The average of the sequence of values, or `null` if the <code>source</code> sequence is empty or contains only `null` values.","nodes":[{"pos":[0,125],"content":"The average of the sequence of values, or <ph id=\"ph1\">`null`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> sequence is empty or contains only <ph id=\"ph3\">`null`</ph> values.","source":"The average of the sequence of values, or `null` if the <code>source</code> sequence is empty or contains only `null` values."}],"pos":[111896,112022],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[112184,112240],"yaml":true},{"content":"Computes the average of a sequence of nullable <xref href=\"System.Int32\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.","nodes":[{"pos":[0,177],"content":"Computes the average of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.","source":"Computes the average of a sequence of nullable <xref href=\"System.Int32\"></xref> values that is obtained by invoking a projection function on each element of the input sequence."}],"pos":[113938,114116],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1120],"content":"The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,514],"source":"The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[515,822],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1127,1605],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,355],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it calculates the average of the values in <ph id=\"ph1\">`source`</ph> after invoking <ph id=\"ph2\">`selector`</ph> on each value.","pos":[356,478],"source":" The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value."}]}],"pos":[114127,115739],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to calculate the average of.","nodes":[{"pos":[0,49],"content":"A sequence of values to calculate the average of.","nodes":[{"content":"A sequence of values to calculate the average of.","pos":[0,49]}]}],"pos":[116744,116794],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[116931,116979],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[117036,117085],"yaml":true},{"content":"The average of the sequence of values, or `null` if the <code>source</code> sequence is empty or contains only `null` values.","nodes":[{"pos":[0,125],"content":"The average of the sequence of values, or <ph id=\"ph1\">`null`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> sequence is empty or contains only <ph id=\"ph3\">`null`</ph> values.","source":"The average of the sequence of values, or `null` if the <code>source</code> sequence is empty or contains only `null` values."}],"pos":[117159,117285],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[117447,117503],"yaml":true},{"content":"Computes the average of a sequence of nullable <xref href=\"System.Double\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.","nodes":[{"pos":[0,178],"content":"Computes the average of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.","source":"Computes the average of a sequence of nullable <xref href=\"System.Double\"></xref> values that is obtained by invoking a projection function on each element of the input sequence."}],"pos":[119185,119364],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1126],"content":"The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,516],"source":"The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[517,828],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1133,1612],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,356],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it calculates the average of the values in <ph id=\"ph1\">`source`</ph> after invoking <ph id=\"ph2\">`selector`</ph> on each value.","pos":[357,479],"source":" The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value."}]}],"pos":[119375,120994],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to calculate the average of.","nodes":[{"pos":[0,49],"content":"A sequence of values to calculate the average of.","nodes":[{"content":"A sequence of values to calculate the average of.","pos":[0,49]}]}],"pos":[122002,122052],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[122190,122238],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[122295,122344],"yaml":true},{"content":"The average of the sequence of values, or `null` if the <code>source</code> sequence is empty or contains only `null` values.","nodes":[{"pos":[0,125],"content":"The average of the sequence of values, or <ph id=\"ph1\">`null`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> sequence is empty or contains only <ph id=\"ph3\">`null`</ph> values.","source":"The average of the sequence of values, or `null` if the <code>source</code> sequence is empty or contains only `null` values."}],"pos":[122418,122544],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[122706,122762],"yaml":true},{"content":"Computes the average of a sequence of <xref href=\"System.Int64\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.","nodes":[{"pos":[0,168],"content":"Computes the average of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.","source":"Computes the average of a sequence of <xref href=\"System.Int64\"></xref> values that is obtained by invoking a projection function on each element of the input sequence."}],"pos":[124379,124548],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1082],"content":"The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,472],"source":"The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[473,784],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1089,1546],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,334],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it calculates the average of the values in <ph id=\"ph1\">`source`</ph> after invoking <ph id=\"ph2\">`selector`</ph> on each value.","pos":[335,457],"source":" The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value."}]}],"pos":[124559,126112],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to calculate the average of.","nodes":[{"pos":[0,49],"content":"A sequence of values to calculate the average of.","nodes":[{"content":"A sequence of values to calculate the average of.","pos":[0,49]}]}],"pos":[127098,127148],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[127268,127316],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[127373,127422],"yaml":true},{"content":"The average of the sequence of values.","nodes":[{"pos":[0,38],"content":"The average of the sequence of values.","nodes":[{"content":"The average of the sequence of values.","pos":[0,38]}]}],"pos":[127479,127518],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[127680,127736],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[127846,127888],"yaml":true},{"content":"Computes the average of a sequence of <xref href=\"System.Int32\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.","nodes":[{"pos":[0,168],"content":"Computes the average of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.","source":"Computes the average of a sequence of <xref href=\"System.Int32\"></xref> values that is obtained by invoking a projection function on each element of the input sequence."}],"pos":[129505,129674],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1082],"content":"The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,472],"source":"The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[473,784],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1089,1546],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,334],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it calculates the average of the values in <ph id=\"ph1\">`source`</ph> after invoking <ph id=\"ph2\">`selector`</ph> on each value.","pos":[335,457],"source":" The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value."}]}],"pos":[129685,131238],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to calculate the average of.","nodes":[{"pos":[0,49],"content":"A sequence of values to calculate the average of.","nodes":[{"content":"A sequence of values to calculate the average of.","pos":[0,49]}]}],"pos":[132123,132173],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[132293,132341],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[132398,132447],"yaml":true},{"content":"The average of the sequence of values.","nodes":[{"pos":[0,38],"content":"The average of the sequence of values.","nodes":[{"content":"The average of the sequence of values.","pos":[0,38]}]}],"pos":[132504,132543],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[132705,132761],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[132871,132913],"yaml":true},{"content":"Computes the average of a sequence of <xref href=\"System.Double\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.","nodes":[{"pos":[0,169],"content":"Computes the average of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.","source":"Computes the average of a sequence of <xref href=\"System.Double\"></xref> values that is obtained by invoking a projection function on each element of the input sequence."}],"pos":[134536,134706],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1084],"content":"The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,474],"source":"The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[475,786],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1091,1549],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,335],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it calculates the average of the values in <ph id=\"ph1\">`source`</ph> after invoking <ph id=\"ph2\">`selector`</ph> on each value.","pos":[336,458],"source":" The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value."}]}],"pos":[134717,136273],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to calculate the average of.","nodes":[{"pos":[0,49],"content":"A sequence of values to calculate the average of.","nodes":[{"content":"A sequence of values to calculate the average of.","pos":[0,49]}]}],"pos":[137261,137311],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[137432,137480],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[137537,137586],"yaml":true},{"content":"The average of the sequence of values.","nodes":[{"pos":[0,38],"content":"The average of the sequence of values.","nodes":[{"content":"The average of the sequence of values.","pos":[0,38]}]}],"pos":[137643,137682],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[137844,137900],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[138010,138052],"yaml":true},{"content":"Computes the average of a sequence of <xref href=\"System.Decimal\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.","nodes":[{"pos":[0,170],"content":"Computes the average of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.","source":"Computes the average of a sequence of <xref href=\"System.Decimal\"></xref> values that is obtained by invoking a projection function on each element of the input sequence."}],"pos":[139659,139830],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1086],"content":"The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,476],"source":"The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[477,788],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1093,1552],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,336],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it calculates the average of the values in <ph id=\"ph1\">`source`</ph> after invoking <ph id=\"ph2\">`selector`</ph> on each value.","pos":[337,459],"source":" The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value."}]}],"pos":[139841,141400],"yaml":true,"extradata":"MT"},{"content":"A sequence of values that are used to calculate an average.","nodes":[{"pos":[0,59],"content":"A sequence of values that are used to calculate an average.","nodes":[{"content":"A sequence of values that are used to calculate an average.","pos":[0,59]}]}],"pos":[142390,142450],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[142572,142620],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[142677,142726],"yaml":true},{"content":"The average of the sequence of values.","nodes":[{"pos":[0,38],"content":"The average of the sequence of values.","nodes":[{"content":"The average of the sequence of values.","pos":[0,38]}]}],"pos":[142784,142823],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[142985,143041],"yaml":true},{"content":"<code>source</code> contains no elements.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> contains no elements.","source":"<code>source</code> contains no elements."}],"pos":[143151,143193],"yaml":true},{"content":"Computes the average of a sequence of nullable <xref href=\"System.Decimal\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.","nodes":[{"pos":[0,179],"content":"Computes the average of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.","source":"Computes the average of a sequence of nullable <xref href=\"System.Decimal\"></xref> values that is obtained by invoking a projection function on each element of the input sequence."}],"pos":[144903,145083],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1128],"content":"The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,518],"source":"The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[519,830],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1135,1615],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,357],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it calculates the average of the values in <ph id=\"ph1\">`source`</ph> after invoking <ph id=\"ph2\">`selector`</ph> on each value.","pos":[358,480],"source":" The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value."}]}],"pos":[145094,146716],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to calculate the average of.","nodes":[{"pos":[0,49],"content":"A sequence of values to calculate the average of.","nodes":[{"content":"A sequence of values to calculate the average of.","pos":[0,49]}]}],"pos":[147726,147776],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[147915,147963],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[148020,148069],"yaml":true},{"content":"The average of the sequence of values, or `null` if the <code>source</code> sequence is empty or contains only `null` values.","nodes":[{"pos":[0,125],"content":"The average of the sequence of values, or <ph id=\"ph1\">`null`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> sequence is empty or contains only <ph id=\"ph3\">`null`</ph> values.","source":"The average of the sequence of values, or `null` if the <code>source</code> sequence is empty or contains only `null` values."}],"pos":[148144,148270],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[148432,148488],"yaml":true},{"content":"Converts the elements of an <xref href=\"System.Linq.IQueryable\"></xref> to the specified type.","nodes":[{"pos":[0,94],"content":"Converts the elements of an <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable\"&gt;&lt;/xref&gt;</ph> to the specified type.","source":"Converts the elements of an <xref href=\"System.Linq.IQueryable\"></xref> to the specified type."}],"pos":[149748,149843],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it converts the values in `source` to type `TResult`.","nodes":[{"pos":[0,585],"content":"The <xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29&gt;</ph> itself as a constructed generic method.","pos":[0,276],"source":"The <xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[277,585],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[592,912],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it converts the values in `source` to type `TResult`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,236],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it converts the values in <ph id=\"ph1\">`source`</ph> to type <ph id=\"ph2\">`TResult`</ph>.","pos":[237,320],"source":" The expected behavior is that it converts the values in `source` to type `TResult`."}]}],"pos":[149854,150771],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Linq.IQueryable\"></xref> that contains the elements to be converted.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable\"&gt;&lt;/xref&gt;</ph> that contains the elements to be converted.","source":"The <xref href=\"System.Linq.IQueryable\"></xref> that contains the elements to be converted."}],"pos":[151454,151546],"yaml":true},{"content":"The type to convert the elements of <code>source</code> to.","nodes":[{"pos":[0,59],"content":"The type to convert the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> to.","source":"The type to convert the elements of <code>source</code> to."}],"pos":[151603,151663],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains each element of the source sequence converted to the specified type.","nodes":[{"pos":[0,131],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains each element of the source sequence converted to the specified type.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains each element of the source sequence converted to the specified type."}],"pos":[151738,151870],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[152029,152060],"yaml":true},{"content":"An element in the sequence cannot be cast to type <code>TResult</code>.","nodes":[{"pos":[0,71],"content":"An element in the sequence cannot be cast to type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An element in the sequence cannot be cast to type <code>TResult</code>."}],"pos":[152160,152232],"yaml":true},{"content":"Concatenates two sequences.","nodes":[{"pos":[0,27],"content":"Concatenates two sequences.","nodes":[{"content":"Concatenates two sequences.","pos":[0,27]}]}],"pos":[153744,153772],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that the elements in `source2` are concatenated to those of `source1` to create a new sequence.","nodes":[{"pos":[0,731],"content":"The <xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,414],"source":"The <xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source1`</ph> parameter.","pos":[415,731],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter."}]},{"pos":[738,1165],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that the elements in `source2` are concatenated to those of `source1` to create a new sequence.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source1`</ph> parameter.","pos":[0,306],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter."},{"content":"The expected behavior is that the elements in <ph id=\"ph1\">`source2`</ph> are concatenated to those of <ph id=\"ph2\">`source1`</ph> to create a new sequence.","pos":[307,427],"source":" The expected behavior is that the elements in `source2` are concatenated to those of `source1` to create a new sequence."}]}],"pos":[153783,154953],"yaml":true,"extradata":"MT"},{"content":"The first sequence to concatenate.","nodes":[{"pos":[0,34],"content":"The first sequence to concatenate.","nodes":[{"content":"The first sequence to concatenate.","pos":[0,34]}]}],"pos":[155751,155786],"yaml":true},{"content":"The sequence to concatenate to the first sequence.","nodes":[{"pos":[0,50],"content":"The sequence to concatenate to the first sequence.","nodes":[{"content":"The sequence to concatenate to the first sequence.","pos":[0,50]}]}],"pos":[155883,155934],"yaml":true},{"content":"The type of the elements of the input sequences.","nodes":[{"pos":[0,48],"content":"The type of the elements of the input sequences.","nodes":[{"content":"The type of the elements of the input sequences.","pos":[0,48]}]}],"pos":[155991,156040],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the concatenated elements of the two input sequences.","nodes":[{"pos":[0,116],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains the concatenated elements of the two input sequences.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the concatenated elements of the two input sequences."}],"pos":[156115,156232],"yaml":true},{"content":"<code>source1</code> or <code>source2</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source1&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;source2&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source1</code> or <code>source2</code> is `null`."}],"pos":[156393,156449],"yaml":true},{"content":"Determines whether a sequence contains a specified element by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>.","nodes":[{"pos":[0,148],"content":"Determines whether a sequence contains a specified element by using a specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph>.","source":"Determines whether a sequence contains a specified element by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>."}],"pos":[158026,158175],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it determines if `source` contains `item` by using `comparer` to compare values.","nodes":[{"pos":[0,762],"content":"The <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,450],"source":"The <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[451,762],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[769,1203],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it determines if `source` contains `item` by using `comparer` to compare values.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,323],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it determines if <ph id=\"ph1\">`source`</ph> contains <ph id=\"ph2\">`item`</ph> by using <ph id=\"ph3\">`comparer`</ph> to compare values.","pos":[324,434],"source":" The expected behavior is that it determines if `source` contains `item` by using `comparer` to compare values."}]}],"pos":[158186,159394],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> in which to locate <code>item</code>.","nodes":[{"pos":[0,86],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> in which to locate <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> in which to locate <code>item</code>."}],"pos":[159675,159762],"yaml":true},{"content":"The object to locate in the sequence.","nodes":[{"pos":[0,37],"content":"The object to locate in the sequence.","nodes":[{"content":"The object to locate in the sequence.","pos":[0,37]}]}],"pos":[159816,159854],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare values.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values."}],"pos":[159958,160048],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[160105,160154],"yaml":true},{"content":"`true` if the input sequence contains an element that has the specified value; otherwise, `false`.","nodes":[{"pos":[0,98],"content":"<ph id=\"ph1\">`true`</ph> if the input sequence contains an element that has the specified value; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the input sequence contains an element that has the specified value; otherwise, `false`."}],"pos":[160212,160313],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[160476,160507],"yaml":true},{"content":"Determines whether a sequence contains a specified element by using the default equality comparer.","nodes":[{"pos":[0,98],"content":"Determines whether a sequence contains a specified element by using the default equality comparer.","nodes":[{"content":"Determines whether a sequence contains a specified element by using the default equality comparer.","pos":[0,98]}]}],"pos":[161872,161971],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it determines if `source` contains `item`.","nodes":[{"pos":[0,642],"content":"The <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> itself as a constructed generic method.","pos":[0,330],"source":"The <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[331,642],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[649,985],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it determines if `source` contains `item`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,263],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it determines if <ph id=\"ph1\">`source`</ph> contains <ph id=\"ph2\">`item`</ph>.","pos":[264,336],"source":" The expected behavior is that it determines if `source` contains `item`."}]}],"pos":[161982,162972],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> in which to locate <code>item</code>.","nodes":[{"pos":[0,86],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> in which to locate <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> in which to locate <code>item</code>."}],"pos":[163689,163776],"yaml":true},{"content":"The object to locate in the sequence.","nodes":[{"pos":[0,37],"content":"The object to locate in the sequence.","nodes":[{"content":"The object to locate in the sequence.","pos":[0,37]}]}],"pos":[163830,163868],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[163925,163974],"yaml":true},{"content":"`true` if the input sequence contains an element that has the specified value; otherwise, `false`.","nodes":[{"pos":[0,98],"content":"<ph id=\"ph1\">`true`</ph> if the input sequence contains an element that has the specified value; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the input sequence contains an element that has the specified value; otherwise, `false`."}],"pos":[164032,164133],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[164296,164327],"yaml":true},{"content":"Returns the number of elements in a sequence.","nodes":[{"pos":[0,45],"content":"Returns the number of elements in a sequence.","nodes":[{"content":"Returns the number of elements in a sequence.","pos":[0,45]}]}],"pos":[165635,165681],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it counts the number of items in `source`.","nodes":[{"pos":[0,616],"content":"The <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,304],"source":"The <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[305,616],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[623,946],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it counts the number of items in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,250],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it counts the number of items in <ph id=\"ph1\">`source`</ph>.","pos":[251,323],"source":" The expected behavior is that it counts the number of items in `source`."}]}],"pos":[165692,166643],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements to be counted.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains the elements to be counted.","source":"The <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements to be counted."}],"pos":[167305,167397],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[167454,167503],"yaml":true},{"content":"The number of elements in the input sequence.","nodes":[{"pos":[0,45],"content":"The number of elements in the input sequence.","nodes":[{"content":"The number of elements in the input sequence.","pos":[0,45]}]}],"pos":[167559,167605],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[167765,167796],"yaml":true},{"content":"The number of elements in <code>source</code> is larger than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,104],"content":"The number of elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> is larger than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The number of elements in <code>source</code> is larger than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[167890,167995],"yaml":true},{"content":"Returns the number of elements in the specified sequence that satisfies a condition.","nodes":[{"pos":[0,84],"content":"Returns the number of elements in the specified sequence that satisfies a condition.","nodes":[{"content":"Returns the number of elements in the specified sequence that satisfies a condition.","pos":[0,84]}]}],"pos":[169590,169675],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it counts the number of items in `source` that satisfy the condition specified by `predicate`.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1082],"content":"The <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,472],"source":"The <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[473,784],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1089,1548],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it counts the number of items in `source` that satisfy the condition specified by `predicate`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,334],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it counts the number of items in <ph id=\"ph1\">`source`</ph> that satisfy the condition specified by <ph id=\"ph2\">`predicate`</ph>.","pos":[335,459],"source":" The expected behavior is that it counts the number of items in `source` that satisfy the condition specified by `predicate`."}]}],"pos":[169686,171241],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements to be counted.","nodes":[{"pos":[0,90],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains the elements to be counted.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements to be counted."}],"pos":[172078,172169],"yaml":true},{"content":"A function to test each element for a condition.","nodes":[{"pos":[0,48],"content":"A function to test each element for a condition.","nodes":[{"content":"A function to test each element for a condition.","pos":[0,48]}]}],"pos":[172292,172341],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[172398,172447],"yaml":true},{"content":"The number of elements in the sequence that satisfies the condition in the predicate function.","nodes":[{"pos":[0,94],"content":"The number of elements in the sequence that satisfies the condition in the predicate function.","nodes":[{"content":"The number of elements in the sequence that satisfies the condition in the predicate function.","pos":[0,94]}]}],"pos":[172503,172598],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[172758,172815],"yaml":true},{"content":"The number of elements in <code>source</code> is larger than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,104],"content":"The number of elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> is larger than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The number of elements in <code>source</code> is larger than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[172909,173014],"yaml":true},{"content":"Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.","nodes":[{"pos":[0,136],"content":"Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.","nodes":[{"content":"Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.","pos":[0,136]}]}],"pos":[174376,174513],"yaml":true},{"content":"The <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns `source` if it is not empty. Otherwise, it returns an <xref:System.Linq.IQueryable%601> that contains `default(TSource)`.","nodes":[{"pos":[0,638],"content":"The <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,322],"source":"The <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[323,638],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[645,1067],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns `source` if it is not empty. Otherwise, it returns an <xref:System.Linq.IQueryable%601> that contains `default(TSource)`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,259],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns <ph id=\"ph1\">`source`</ph> if it is not empty.","pos":[260,329],"source":" The expected behavior is that it returns `source` if it is not empty."},{"content":"Otherwise, it returns an <ph id=\"ph1\">&lt;xref:System.Linq.IQueryable%601&gt;</ph> that contains <ph id=\"ph2\">`default(TSource)`</ph>.","pos":[330,422],"source":" Otherwise, it returns an <xref:System.Linq.IQueryable%601> that contains `default(TSource)`."}]}],"pos":[174524,175596],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Linq.IQueryable`1\"></xref> to return a default value for if empty.","nodes":[{"pos":[0,89],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to return a default value for if empty.","source":"The <xref href=\"System.Linq.IQueryable`1\"></xref> to return a default value for if empty."}],"pos":[176332,176422],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[176479,176528],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains `default`(<code>TSource</code>) if <code>source</code> is empty; otherwise, <code>source</code>.","nodes":[{"pos":[0,159],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">`default`</ph>(<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">TSource</ph><ept id=\"p1\">&lt;/code&gt;</ept>) if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> is empty; otherwise, <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph5\">source</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains `default`(<code>TSource</code>) if <code>source</code> is empty; otherwise, <code>source</code>."}],"pos":[176603,176763],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[176932,176963],"yaml":true},{"content":"Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.","nodes":[{"pos":[0,121],"content":"Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.","nodes":[{"content":"Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.","pos":[0,121]}]}],"pos":[178364,178486],"yaml":true},{"content":"The <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns `source` if it is not empty. Otherwise, it returns an <xref:System.Linq.IQueryable%601> that contains `defaultValue`.","nodes":[{"pos":[0,658],"content":"The <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> itself as a constructed generic method.","pos":[0,342],"source":"The <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[343,658],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[665,1093],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns `source` if it is not empty. Otherwise, it returns an <xref:System.Linq.IQueryable%601> that contains `defaultValue`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,269],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns <ph id=\"ph1\">`source`</ph> if it is not empty.","pos":[270,339],"source":" The expected behavior is that it returns `source` if it is not empty."},{"content":"Otherwise, it returns an <ph id=\"ph1\">&lt;xref:System.Linq.IQueryable%601&gt;</ph> that contains <ph id=\"ph2\">`defaultValue`</ph>.","pos":[340,428],"source":" Otherwise, it returns an <xref:System.Linq.IQueryable%601> that contains `defaultValue`."}]}],"pos":[178497,179595],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Linq.IQueryable`1\"></xref> to return the specified value for if empty.","nodes":[{"pos":[0,93],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to return the specified value for if empty.","source":"The <xref href=\"System.Linq.IQueryable`1\"></xref> to return the specified value for if empty."}],"pos":[180532,180626],"yaml":true},{"content":"The value to return if the sequence is empty.","nodes":[{"pos":[0,45],"content":"The value to return if the sequence is empty.","nodes":[{"content":"The value to return if the sequence is empty.","pos":[0,45]}]}],"pos":[180688,180734],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[180791,180840],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains <code>defaultValue</code> if <code>source</code> is empty; otherwise, <code>source</code>.","nodes":[{"pos":[0,153],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">defaultValue</ph><ept id=\"p1\">&lt;/code&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> is empty; otherwise, <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">source</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains <code>defaultValue</code> if <code>source</code> is empty; otherwise, <code>source</code>."}],"pos":[180915,181069],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[181238,181269],"yaml":true},{"content":"Returns distinct elements from a sequence by using the default equality comparer to compare values.","nodes":[{"pos":[0,99],"content":"Returns distinct elements from a sequence by using the default equality comparer to compare values.","nodes":[{"content":"Returns distinct elements from a sequence by using the default equality comparer to compare values.","pos":[0,99]}]}],"pos":[182573,182673],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns an unordered sequence of the unique items in `source`.","nodes":[{"pos":[0,626],"content":"The <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,310],"source":"The <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[311,626],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[633,982],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns an unordered sequence of the unique items in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,253],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns an unordered sequence of the unique items in <ph id=\"ph1\">`source`</ph>.","pos":[254,349],"source":" The expected behavior is that it returns an unordered sequence of the unique items in `source`."}]}],"pos":[182684,183671],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Linq.IQueryable`1\"></xref> to remove duplicates from.","nodes":[{"pos":[0,76],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to remove duplicates from.","source":"The <xref href=\"System.Linq.IQueryable`1\"></xref> to remove duplicates from."}],"pos":[184375,184452],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[184509,184558],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains distinct elements from <code>source</code>.","nodes":[{"pos":[0,106],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains distinct elements from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains distinct elements from <code>source</code>."}],"pos":[184633,184740],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[184903,184934],"yaml":true},{"content":"Returns distinct elements from a sequence by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.","nodes":[{"pos":[0,149],"content":"Returns distinct elements from a sequence by using a specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare values.","source":"Returns distinct elements from a sequence by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values."}],"pos":[186494,186644],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns an unordered sequence of the unique items in `source` by using `comparer` to compare values.","nodes":[{"pos":[0,746],"content":"The <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,430],"source":"The <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[431,746],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[753,1200],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns an unordered sequence of the unique items in `source` by using `comparer` to compare values.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,313],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns an unordered sequence of the unique items in <ph id=\"ph1\">`source`</ph> by using <ph id=\"ph2\">`comparer`</ph> to compare values.","pos":[314,447],"source":" The expected behavior is that it returns an unordered sequence of the unique items in `source` by using `comparer` to compare values."}]}],"pos":[186655,187860],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Linq.IQueryable`1\"></xref> to remove duplicates from.","nodes":[{"pos":[0,76],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to remove duplicates from.","source":"The <xref href=\"System.Linq.IQueryable`1\"></xref> to remove duplicates from."}],"pos":[188154,188231],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare values.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values."}],"pos":[188335,188425],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[188482,188531],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains distinct elements from <code>source</code>.","nodes":[{"pos":[0,106],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains distinct elements from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains distinct elements from <code>source</code>."}],"pos":[188606,188713],"yaml":true},{"content":"<code>source</code> or <code>comparer</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;comparer&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>comparer</code> is `null`."}],"pos":[188876,188932],"yaml":true},{"content":"Returns the element at a specified index in a sequence.","nodes":[{"pos":[0,55],"content":"Returns the element at a specified index in a sequence.","nodes":[{"content":"Returns the element at a specified index in a sequence.","pos":[0,55]}]}],"pos":[190324,190380],"yaml":true},{"content":"The <xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the item at position `index` in `source`.","nodes":[{"pos":[0,654],"content":"The <xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> itself as a constructed generic method.","pos":[0,342],"source":"The <xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[343,654],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[661,1013],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the item at position `index` in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,269],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the item at position <ph id=\"ph1\">`index`</ph> in <ph id=\"ph2\">`source`</ph>.","pos":[270,352],"source":" The expected behavior is that it returns the item at position `index` in `source`."}]}],"pos":[190391,191409],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return an element from.","nodes":[{"pos":[0,75],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to return an element from.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return an element from."}],"pos":[192131,192207],"yaml":true},{"content":"The zero-based index of the element to retrieve.","nodes":[{"pos":[0,48],"content":"The zero-based index of the element to retrieve.","nodes":[{"content":"The zero-based index of the element to retrieve.","pos":[0,48]}]}],"pos":[192267,192316],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[192373,192422],"yaml":true},{"content":"The element at the specified position in <code>source</code>.","nodes":[{"pos":[0,61],"content":"The element at the specified position in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The element at the specified position in <code>source</code>."}],"pos":[192473,192535],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[192699,192730],"yaml":true},{"content":"<code>index</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."}],"pos":[192844,192882],"yaml":true},{"content":"Returns the element at a specified index in a sequence or a default value if the index is out of range.","nodes":[{"pos":[0,103],"content":"Returns the element at a specified index in a sequence or a default value if the index is out of range.","nodes":[{"content":"Returns the element at a specified index in a sequence or a default value if the index is out of range.","pos":[0,103]}]}],"pos":[194306,194410],"yaml":true},{"content":"The <xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the item at position `index` in `source`, or `default(TSource)` if `index` is outside the bounds of `source`.","nodes":[{"pos":[0,672],"content":"The <xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> itself as a constructed generic method.","pos":[0,360],"source":"The <xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[361,672],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[679,1108],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the item at position `index` in `source`, or `default(TSource)` if `index` is outside the bounds of `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,278],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the item at position <ph id=\"ph1\">`index`</ph> in <ph id=\"ph2\">`source`</ph>, or <ph id=\"ph3\">`default(TSource)`</ph> if <ph id=\"ph4\">`index`</ph> is outside the bounds of <ph id=\"ph5\">`source`</ph>.","pos":[279,429],"source":" The expected behavior is that it returns the item at position `index` in `source`, or `default(TSource)` if `index` is outside the bounds of `source`."}]}],"pos":[194421,195534],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return an element from.","nodes":[{"pos":[0,75],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to return an element from.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return an element from."}],"pos":[196305,196381],"yaml":true},{"content":"The zero-based index of the element to retrieve.","nodes":[{"pos":[0,48],"content":"The zero-based index of the element to retrieve.","nodes":[{"content":"The zero-based index of the element to retrieve.","pos":[0,48]}]}],"pos":[196441,196490],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[196547,196596],"yaml":true},{"content":"<code>default</code>(<code>TSource</code>) if <code>index</code> is outside the bounds of <code>source</code>; otherwise, the element at the specified position in <code>source</code>.","nodes":[{"pos":[0,183],"content":"<ph id=\"ph1\">&lt;code&gt;default&lt;/code&gt;</ph>(<ph id=\"ph2\">&lt;code&gt;TSource&lt;/code&gt;</ph>) if <ph id=\"ph3\">&lt;code&gt;index&lt;/code&gt;</ph> is outside the bounds of <ph id=\"ph4\">&lt;code&gt;source&lt;/code&gt;</ph>; otherwise, the element at the specified position in <ph id=\"ph5\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>default</code>(<code>TSource</code>) if <code>index</code> is outside the bounds of <code>source</code>; otherwise, the element at the specified position in <code>source</code>."}],"pos":[196647,196831],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[197004,197035],"yaml":true},{"content":"Produces the set difference of two sequences by using the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.","nodes":[{"pos":[0,154],"content":"Produces the set difference of two sequences by using the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare values.","source":"Produces the set difference of two sequences by using the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values."}],"pos":[198781,198936],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the`source1` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that all the elements in `source1` are returned except for those that are also in `source2`, and `comparer` is used to compare values.","nodes":[{"pos":[0,850],"content":"The <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the`source1` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,534],"source":"The <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the<ph id=\"ph5\">`source1`</ph> parameter.","pos":[535,850],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the`source1` parameter."}]},{"pos":[857,1383],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that all the elements in `source1` are returned except for those that are also in `source2`, and `comparer` is used to compare values.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source1`</ph> parameter.","pos":[0,366],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter."},{"content":"The expected behavior is that all the elements in <ph id=\"ph1\">`source1`</ph> are returned except for those that are also in <ph id=\"ph2\">`source2`</ph>, and <ph id=\"ph3\">`comparer`</ph> is used to compare values.","pos":[367,526],"source":" The expected behavior is that all the elements in `source1` are returned except for those that are also in `source2`, and `comparer` is used to compare values."}]}],"pos":[198947,200335],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements that are not also in <code>source2</code> will be returned.","nodes":[{"pos":[0,123],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements that are not also in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source2</ph><ept id=\"p1\">&lt;/code&gt;</ept> will be returned.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements that are not also in <code>source2</code> will be returned."}],"pos":[200686,200810],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements that also occur in the first sequence will not appear in the returned sequence.","nodes":[{"pos":[0,159],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements that also occur in the first sequence will not appear in the returned sequence.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements that also occur in the first sequence will not appear in the returned sequence."}],"pos":[200907,201067],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare values.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values."}],"pos":[201171,201261],"yaml":true},{"content":"The type of the elements of the input sequences.","nodes":[{"pos":[0,48],"content":"The type of the elements of the input sequences.","nodes":[{"content":"The type of the elements of the input sequences.","pos":[0,48]}]}],"pos":[201318,201367],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the set difference of the two sequences.","nodes":[{"pos":[0,103],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains the set difference of the two sequences.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the set difference of the two sequences."}],"pos":[201442,201546],"yaml":true},{"content":"<code>source1</code> or <code>source2</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source1&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;source2&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source1</code> or <code>source2</code> is `null`."}],"pos":[201707,201763],"yaml":true},{"content":"Produces the set difference of two sequences by using the default equality comparer to compare values.","nodes":[{"pos":[0,102],"content":"Produces the set difference of two sequences by using the default equality comparer to compare values.","nodes":[{"content":"Produces the set difference of two sequences by using the default equality comparer to compare values.","pos":[0,102]}]}],"pos":[203253,203356],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the`source1` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of  the `source1` parameter. The expected behavior is that all the elements in `source1` are returned except for those that are also in `source2`.","nodes":[{"pos":[0,730],"content":"The <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the`source1` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,414],"source":"The <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the<ph id=\"ph5\">`source1`</ph> parameter.","pos":[415,730],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the`source1` parameter."}]},{"pos":[737,1162],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of  the `source1` parameter. The expected behavior is that all the elements in `source1` are returned except for those that are also in `source2`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of  the <ph id=\"ph2\">`source1`</ph> parameter.","pos":[0,307],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of  the `source1` parameter."},{"content":"The expected behavior is that all the elements in <ph id=\"ph1\">`source1`</ph> are returned except for those that are also in <ph id=\"ph2\">`source2`</ph>.","pos":[308,425],"source":" The expected behavior is that all the elements in `source1` are returned except for those that are also in `source2`."}]}],"pos":[203367,204534],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements that are not also in <code>source2</code> will be returned.","nodes":[{"pos":[0,123],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements that are not also in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source2</ph><ept id=\"p1\">&lt;/code&gt;</ept> will be returned.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements that are not also in <code>source2</code> will be returned."}],"pos":[205374,205498],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements that also occur in the first sequence will not appear in the returned sequence.","nodes":[{"pos":[0,159],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements that also occur in the first sequence will not appear in the returned sequence.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements that also occur in the first sequence will not appear in the returned sequence."}],"pos":[205595,205755],"yaml":true},{"content":"The type of the elements of the input sequences.","nodes":[{"pos":[0,48],"content":"The type of the elements of the input sequences.","nodes":[{"content":"The type of the elements of the input sequences.","pos":[0,48]}]}],"pos":[205812,205861],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the set difference of the two sequences.","nodes":[{"pos":[0,103],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains the set difference of the two sequences.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the set difference of the two sequences."}],"pos":[205936,206040],"yaml":true},{"content":"<code>source1</code> or <code>source2</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source1&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;source2&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source1</code> or <code>source2</code> is `null`."}],"pos":[206201,206257],"yaml":true},{"content":"Returns the first element of a sequence.","nodes":[{"pos":[0,40],"content":"Returns the first element of a sequence.","nodes":[{"content":"Returns the first element of a sequence.","pos":[0,40]}]}],"pos":[207565,207606],"yaml":true},{"content":"The <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the first element in `source`.","nodes":[{"pos":[0,616],"content":"The <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,304],"source":"The <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[305,616],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[623,945],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the first element in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,250],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the first element in <ph id=\"ph1\">`source`</ph>.","pos":[251,322],"source":" The expected behavior is that it returns the first element in `source`."}]}],"pos":[207617,208567],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Linq.IQueryable`1\"></xref> to return the first element of.","nodes":[{"pos":[0,81],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to return the first element of.","source":"The <xref href=\"System.Linq.IQueryable`1\"></xref> to return the first element of."}],"pos":[209239,209321],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[209378,209427],"yaml":true},{"content":"The first element in <code>source</code>.","nodes":[{"pos":[0,41],"content":"The first element in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The first element in <code>source</code>."}],"pos":[209478,209520],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[209680,209711],"yaml":true},{"content":"The source sequence is empty.","nodes":[{"pos":[0,29],"content":"The source sequence is empty.","nodes":[{"content":"The source sequence is empty.","pos":[0,29]}]}],"pos":[209821,209851],"yaml":true},{"content":"Returns the first element of a sequence that satisfies a specified condition.","nodes":[{"pos":[0,77],"content":"Returns the first element of a sequence that satisfies a specified condition.","nodes":[{"content":"Returns the first element of a sequence that satisfies a specified condition.","pos":[0,77]}]}],"pos":[211446,211524],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the first element in `source` that satisfies the condition specified by `predicate`.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1082],"content":"The <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,472],"source":"The <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[473,784],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1089,1549],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the first element in `source` that satisfies the condition specified by `predicate`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,334],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the first element in <ph id=\"ph1\">`source`</ph> that satisfies the condition specified by <ph id=\"ph2\">`predicate`</ph>.","pos":[335,460],"source":" The expected behavior is that it returns the first element in `source` that satisfies the condition specified by `predicate`."}]}],"pos":[211535,213091],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return an element from.","nodes":[{"pos":[0,75],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to return an element from.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return an element from."}],"pos":[213940,214016],"yaml":true},{"content":"A function to test each element for a condition.","nodes":[{"pos":[0,48],"content":"A function to test each element for a condition.","nodes":[{"content":"A function to test each element for a condition.","pos":[0,48]}]}],"pos":[214139,214188],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[214245,214294],"yaml":true},{"content":"The first element in <code>source</code> that passes the test in <code>predicate</code>.","nodes":[{"pos":[0,88],"content":"The first element in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> that passes the test in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">predicate</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The first element in <code>source</code> that passes the test in <code>predicate</code>."}],"pos":[214345,214434],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[214594,214651],"yaml":true},{"content":"No element satisfies the condition in <code>predicate</code>.  \n  \n -or-  \n  \n The source sequence is empty.","nodes":[{"pos":[0,61],"content":"No element satisfies the condition in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"No element satisfies the condition in <code>predicate</code>."},{"pos":[68,72],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[79,108],"content":"The source sequence is empty.","nodes":[{"content":"The source sequence is empty.","pos":[0,29]}]}],"pos":[214761,214876],"yaml":true},{"content":"Returns the first element of a sequence, or a default value if the sequence contains no elements.","nodes":[{"pos":[0,97],"content":"Returns the first element of a sequence, or a default value if the sequence contains no elements.","nodes":[{"content":"Returns the first element of a sequence, or a default value if the sequence contains no elements.","pos":[0,97]}]}],"pos":[216238,216336],"yaml":true},{"content":"The <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the first element in `source`, or a default value if `source` is empty.  \n  \n The <xref:System.Linq.Queryable.FirstOrDefault%2A> method does not provide a way to specify the default value to return if `source` is empty. If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.","nodes":[{"pos":[0,634],"content":"The <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,322],"source":"The <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[323,634],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[641,1013],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the first element in `source`, or a default value if `source` is empty.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,259],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the first element in <ph id=\"ph1\">`source`</ph>, or a default value if <ph id=\"ph2\">`source`</ph> is empty.","pos":[260,372],"source":" The expected behavior is that it returns the first element in `source`, or a default value if `source` is empty."}]},{"pos":[1020,1385],"content":"The <xref:System.Linq.Queryable.FirstOrDefault%2A> method does not provide a way to specify the default value to return if `source` is empty. If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.FirstOrDefault%2A&gt;</ph> method does not provide a way to specify the default value to return if <ph id=\"ph2\">`source`</ph> is empty.","pos":[0,141],"source":"The <xref:System.Linq.Queryable.FirstOrDefault%2A> method does not provide a way to specify the default value to return if `source` is empty."},{"content":"If you want to specify a default value other than <ph id=\"ph1\">`default(TSource)`</ph>, use the <ph id=\"ph2\">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.","pos":[142,365],"source":" If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method as described in the Example section."}]}],"pos":[216347,217739],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Linq.IQueryable`1\"></xref> to return the first element of.","nodes":[{"pos":[0,81],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to return the first element of.","source":"The <xref href=\"System.Linq.IQueryable`1\"></xref> to return the first element of."}],"pos":[219789,219871],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[219928,219977],"yaml":true},{"content":"<code>default</code>(<code>TSource</code>) if <code>source</code> is empty; otherwise, the first element in <code>source</code>.","nodes":[{"pos":[0,128],"content":"<ph id=\"ph1\">&lt;code&gt;default&lt;/code&gt;</ph>(<ph id=\"ph2\">&lt;code&gt;TSource&lt;/code&gt;</ph>) if <ph id=\"ph3\">&lt;code&gt;source&lt;/code&gt;</ph> is empty; otherwise, the first element in <ph id=\"ph4\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>default</code>(<code>TSource</code>) if <code>source</code> is empty; otherwise, the first element in <code>source</code>."}],"pos":[220028,220157],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[220326,220357],"yaml":true},{"content":"Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.","nodes":[{"pos":[0,124],"content":"Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.","nodes":[{"content":"Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.","pos":[0,124]}]}],"pos":[222028,222153],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the first element in `source` that satisfies the condition in `predicate`, or a default value if no element satisfies the condition.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1100],"content":"The <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,490],"source":"The <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[491,802],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1107,1624],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the first element in `source` that satisfies the condition in `predicate`, or a default value if no element satisfies the condition.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,343],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the first element in <ph id=\"ph1\">`source`</ph> that satisfies the condition in <ph id=\"ph2\">`predicate`</ph>, or a default value if no element satisfies the condition.","pos":[344,517],"source":" The expected behavior is that it returns the first element in `source` that satisfies the condition in `predicate`, or a default value if no element satisfies the condition."}]}],"pos":[222164,223795],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return an element from.","nodes":[{"pos":[0,75],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to return an element from.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return an element from."}],"pos":[224706,224782],"yaml":true},{"content":"A function to test each element for a condition.","nodes":[{"pos":[0,48],"content":"A function to test each element for a condition.","nodes":[{"content":"A function to test each element for a condition.","pos":[0,48]}]}],"pos":[224905,224954],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[225011,225060],"yaml":true},{"content":"<code>default</code>(<code>TSource</code>) if <code>source</code> is empty or if no element passes the test specified by <code>predicate</code>; otherwise, the first element in <code>source</code> that passes the test specified by <code>predicate</code>.","nodes":[{"pos":[0,254],"content":"<ph id=\"ph1\">&lt;code&gt;default&lt;/code&gt;</ph>(<ph id=\"ph2\">&lt;code&gt;TSource&lt;/code&gt;</ph>) if <ph id=\"ph3\">&lt;code&gt;source&lt;/code&gt;</ph> is empty or if no element passes the test specified by <ph id=\"ph4\">&lt;code&gt;predicate&lt;/code&gt;</ph>; otherwise, the first element in <ph id=\"ph5\">&lt;code&gt;source&lt;/code&gt;</ph> that passes the test specified by <ph id=\"ph6\">&lt;code&gt;predicate&lt;/code&gt;</ph>.","source":"<code>default</code>(<code>TSource</code>) if <code>source</code> is empty or if no element passes the test specified by <code>predicate</code>; otherwise, the first element in <code>source</code> that passes the test specified by <code>predicate</code>."}],"pos":[225111,225366],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[225535,225592],"yaml":true},{"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.","nodes":[{"pos":[0,260],"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.","nodes":[{"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.","pos":[0,260],"nodes":[{"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.","pos":[0,136]},{"content":"Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.","pos":[137,260]}]}]}],"pos":[228192,228453],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by key values that are obtained by invoking `keySelector` on each element. The `comparer` parameter is used to compare key values. The `elementSelector` parameter is used to project the elements of each group, and the `resultSelector` parameter is used to obtain a result value from each group and its key.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1612],"content":"The <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,998],"source":"The <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[999,1314],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1619,2588],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by key values that are obtained by invoking `keySelector` on each element. The `comparer` parameter is used to compare key values. The `elementSelector` parameter is used to project the elements of each group, and the `resultSelector` parameter is used to obtain a result value from each group and its key.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,597],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it groups the elements of <ph id=\"ph1\">`source`</ph> by key values that are obtained by invoking <ph id=\"ph2\">`keySelector`</ph> on each element.","pos":[598,737],"source":" The expected behavior is that it groups the elements of `source` by key values that are obtained by invoking `keySelector` on each element."},{"content":"The <ph id=\"ph1\">`comparer`</ph> parameter is used to compare key values.","pos":[738,793],"source":" The `comparer` parameter is used to compare key values."},{"content":"The <ph id=\"ph1\">`elementSelector`</ph> parameter is used to project the elements of each group, and the <ph id=\"ph2\">`resultSelector`</ph> parameter is used to obtain a result value from each group and its key.","pos":[794,969],"source":" The `elementSelector` parameter is used to project the elements of each group, and the `resultSelector` parameter is used to obtain a result value from each group and its key."}]}],"pos":[228464,231059],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group.","nodes":[{"pos":[0,73],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements to group.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group."}],"pos":[231635,231709],"yaml":true},{"content":"A function to extract the key for each element.","nodes":[{"pos":[0,47],"content":"A function to extract the key for each element.","nodes":[{"content":"A function to extract the key for each element.","pos":[0,47]}]}],"pos":[231824,231872],"yaml":true},{"content":"A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\"></xref>.","nodes":[{"pos":[0,103],"content":"A function to map each source element to an element in an <ph id=\"ph1\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph>.","source":"A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\"></xref>."}],"pos":[231995,232099],"yaml":true},{"content":"A function to create a result value from each group.","nodes":[{"pos":[0,52],"content":"A function to create a result value from each group.","nodes":[{"content":"A function to create a result value from each group.","pos":[0,52]}]}],"pos":[232266,232319],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys.","nodes":[{"pos":[0,87],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare keys.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys."}],"pos":[232420,232508],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[232565,232614],"yaml":true},{"content":"The type of the key returned by the function represented in <code>keySelector</code>.","nodes":[{"pos":[0,85],"content":"The type of the key returned by the function represented in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by the function represented in <code>keySelector</code>."}],"pos":[232648,232734],"yaml":true},{"content":"The type of the elements in each <xref href=\"System.Linq.IGrouping`2\"></xref>.","nodes":[{"pos":[0,78],"content":"The type of the elements in each <ph id=\"ph1\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the elements in each <xref href=\"System.Linq.IGrouping`2\"></xref>."}],"pos":[232772,232851],"yaml":true},{"content":"The type of the result value returned by <code>resultSelector</code>.","nodes":[{"pos":[0,69],"content":"The type of the result value returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">resultSelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result value returned by <code>resultSelector</code>."}],"pos":[232888,232958],"yaml":true},{"content":"An <code>T:System.Linq.IQueryable`1</code> that has a type argument of <code>TResult</code> and where each element represents a projection over a group and its key.","nodes":[{"pos":[0,164],"content":"An <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T:System.Linq.IQueryable`1</ph><ept id=\"p1\">&lt;/code&gt;</ept> that has a type argument of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">TResult</ph><ept id=\"p2\">&lt;/code&gt;</ept> and where each element represents a projection over a group and its key.","source":"An <code>T:System.Linq.IQueryable`1</code> that has a type argument of <code>TResult</code> and where each element represents a projection over a group and its key."}],"pos":[233033,233198],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> or <code>elementSelector</code> or <code>resultSelector</code> or <code>comparer</code> is `null`.","nodes":[{"pos":[0,146],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;elementSelector&lt;/code&gt;</ph> or <ph id=\"ph4\">&lt;code&gt;resultSelector&lt;/code&gt;</ph> or <ph id=\"ph5\">&lt;code&gt;comparer&lt;/code&gt;</ph> is <ph id=\"ph6\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> or <code>elementSelector</code> or <code>resultSelector</code> or <code>comparer</code> is `null`."}],"pos":[233360,233507],"yaml":true},{"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.","nodes":[{"pos":[0,208],"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.","nodes":[{"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.","pos":[0,208],"nodes":[{"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.","pos":[0,136]},{"content":"The elements of each group are projected by using a specified function.","pos":[137,208]}]}]}],"pos":[235904,236113],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by key values that are obtained by invoking `keySelector` on each element. The `elementSelector` parameter is used to project the elements of each group, and the `resultSelector` parameter is used to obtain a result value from each group and its key.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1492],"content":"The <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,878],"source":"The <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[879,1194],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1499,2352],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by key values that are obtained by invoking `keySelector` on each element. The `elementSelector` parameter is used to project the elements of each group, and the `resultSelector` parameter is used to obtain a result value from each group and its key.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,537],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it groups the elements of <ph id=\"ph1\">`source`</ph> by key values that are obtained by invoking <ph id=\"ph2\">`keySelector`</ph> on each element.","pos":[538,677],"source":" The expected behavior is that it groups the elements of `source` by key values that are obtained by invoking `keySelector` on each element."},{"content":"The <ph id=\"ph1\">`elementSelector`</ph> parameter is used to project the elements of each group, and the <ph id=\"ph2\">`resultSelector`</ph> parameter is used to obtain a result value from each group and its key.","pos":[678,853],"source":" The `elementSelector` parameter is used to project the elements of each group, and the `resultSelector` parameter is used to obtain a result value from each group and its key."}]}],"pos":[236124,238483],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group.","nodes":[{"pos":[0,73],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements to group.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group."}],"pos":[239804,239878],"yaml":true},{"content":"A function to extract the key for each element.","nodes":[{"pos":[0,47],"content":"A function to extract the key for each element.","nodes":[{"content":"A function to extract the key for each element.","pos":[0,47]}]}],"pos":[239993,240041],"yaml":true},{"content":"A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\"></xref>.","nodes":[{"pos":[0,103],"content":"A function to map each source element to an element in an <ph id=\"ph1\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph>.","source":"A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\"></xref>."}],"pos":[240164,240268],"yaml":true},{"content":"A function to create a result value from each group.","nodes":[{"pos":[0,52],"content":"A function to create a result value from each group.","nodes":[{"content":"A function to create a result value from each group.","pos":[0,52]}]}],"pos":[240435,240488],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[240545,240594],"yaml":true},{"content":"The type of the key returned by the function represented in <code>keySelector</code>.","nodes":[{"pos":[0,85],"content":"The type of the key returned by the function represented in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by the function represented in <code>keySelector</code>."}],"pos":[240628,240714],"yaml":true},{"content":"The type of the elements in each <xref href=\"System.Linq.IGrouping`2\"></xref>.","nodes":[{"pos":[0,78],"content":"The type of the elements in each <ph id=\"ph1\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the elements in each <xref href=\"System.Linq.IGrouping`2\"></xref>."}],"pos":[240752,240831],"yaml":true},{"content":"The type of the result value returned by <code>resultSelector</code>.","nodes":[{"pos":[0,69],"content":"The type of the result value returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">resultSelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result value returned by <code>resultSelector</code>."}],"pos":[240868,240938],"yaml":true},{"content":"An <code>T:System.Linq.IQueryable`1</code> that has a type argument of <code>TResult</code> and where each element represents a projection over a group and its key.","nodes":[{"pos":[0,164],"content":"An <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T:System.Linq.IQueryable`1</ph><ept id=\"p1\">&lt;/code&gt;</ept> that has a type argument of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">TResult</ph><ept id=\"p2\">&lt;/code&gt;</ept> and where each element represents a projection over a group and its key.","source":"An <code>T:System.Linq.IQueryable`1</code> that has a type argument of <code>TResult</code> and where each element represents a projection over a group and its key."}],"pos":[241013,241178],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> or <code>elementSelector</code> or <code>resultSelector</code> is `null`.","nodes":[{"pos":[0,121],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;elementSelector&lt;/code&gt;</ph> or <ph id=\"ph4\">&lt;code&gt;resultSelector&lt;/code&gt;</ph> is <ph id=\"ph5\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> or <code>elementSelector</code> or <code>resultSelector</code> is `null`."}],"pos":[241340,241462],"yaml":true},{"content":"Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.","nodes":[{"pos":[0,152],"content":"Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.","nodes":[{"content":"Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.","pos":[0,152]}]}],"pos":[243370,243523],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element. It invokes `elementSelector` on each element to obtain a result element.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1230],"content":"The <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,616],"source":"The <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[617,932],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1237,1856],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element. It invokes `elementSelector` on each element to obtain a result element.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,406],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it groups the elements of <ph id=\"ph1\">`source`</ph> by a key value that is obtained by invoking <ph id=\"ph2\">`keySelector`</ph> on each element.","pos":[407,546],"source":" The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element."},{"content":"It invokes <ph id=\"ph1\">`elementSelector`</ph> on each element to obtain a result element.","pos":[547,619],"source":" It invokes `elementSelector` on each element to obtain a result element."}]}],"pos":[243534,245397],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group.","nodes":[{"pos":[0,73],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements to group.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group."}],"pos":[246432,246506],"yaml":true},{"content":"A function to extract the key for each element.","nodes":[{"pos":[0,47],"content":"A function to extract the key for each element.","nodes":[{"content":"A function to extract the key for each element.","pos":[0,47]}]}],"pos":[246621,246669],"yaml":true},{"content":"A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\"></xref>.","nodes":[{"pos":[0,103],"content":"A function to map each source element to an element in an <ph id=\"ph1\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph>.","source":"A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\"></xref>."}],"pos":[246792,246896],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[246953,247002],"yaml":true},{"content":"The type of the key returned by the function represented in <code>keySelector</code>.","nodes":[{"pos":[0,85],"content":"The type of the key returned by the function represented in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by the function represented in <code>keySelector</code>."}],"pos":[247036,247122],"yaml":true},{"content":"The type of the elements in each <xref href=\"System.Linq.IGrouping`2\"></xref>.","nodes":[{"pos":[0,78],"content":"The type of the elements in each <ph id=\"ph1\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the elements in each <xref href=\"System.Linq.IGrouping`2\"></xref>."}],"pos":[247160,247239],"yaml":true},{"content":"An <code>IQueryable<IGrouping<TKey, TElement>></code> in C# or <code>IQueryable(Of IGrouping(Of TKey, TElement))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> contains a sequence of objects of type <code>TElement</code> and a key.","nodes":[{"pos":[0,294],"content":"An <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</ph><ept id=\"p1\">&lt;/code&gt;</ept> in C# or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">IQueryable(Of IGrouping(Of TKey, TElement))</ph><ept id=\"p2\">&lt;/code&gt;</ept> in <ph id=\"ph3\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id=\"ph4\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph> contains a sequence of objects of type <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph5\">TElement</ph><ept id=\"p3\">&lt;/code&gt;</ept> and a key.","source":"An <code>IQueryable<IGrouping<TKey, TElement>></code> in C# or <code>IQueryable(Of IGrouping(Of TKey, TElement))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> contains a sequence of objects of type <code>TElement</code> and a key."}],"pos":[247343,247638],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is `null`.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;elementSelector&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is `null`."}],"pos":[247800,247891],"yaml":true},{"content":"Groups the elements of a sequence and projects the elements for each group by using a specified function. Key values are compared by using a specified comparer.","nodes":[{"pos":[0,160],"content":"Groups the elements of a sequence and projects the elements for each group by using a specified function. Key values are compared by using a specified comparer.","nodes":[{"content":"Groups the elements of a sequence and projects the elements for each group by using a specified function. Key values are compared by using a specified comparer.","pos":[0,160],"nodes":[{"content":"Groups the elements of a sequence and projects the elements for each group by using a specified function.","pos":[0,105]},{"content":"Key values are compared by using a specified comparer.","pos":[106,160]}]}]}],"pos":[250024,250185],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element. Key values are compared by using `comparer`. The `elementSelector` parameter is invoked on each element to obtain a result element.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1350],"content":"The <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,736],"source":"The <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[737,1052],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1357,2095],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element. Key values are compared by using `comparer`. The `elementSelector` parameter is invoked on each element to obtain a result element.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,466],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it groups the elements of <ph id=\"ph1\">`source`</ph> by a key value that is obtained by invoking <ph id=\"ph2\">`keySelector`</ph> on each element.","pos":[467,606],"source":" The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element."},{"content":"Key values are compared by using <ph id=\"ph1\">`comparer`</ph>.","pos":[607,651],"source":" Key values are compared by using `comparer`."},{"content":"The <ph id=\"ph1\">`elementSelector`</ph> parameter is invoked on each element to obtain a result element.","pos":[652,738],"source":" The `elementSelector` parameter is invoked on each element to obtain a result element."}]}],"pos":[250196,252298],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group.","nodes":[{"pos":[0,73],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements to group.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group."}],"pos":[252775,252849],"yaml":true},{"content":"A function to extract the key for each element.","nodes":[{"pos":[0,47],"content":"A function to extract the key for each element.","nodes":[{"content":"A function to extract the key for each element.","pos":[0,47]}]}],"pos":[252964,253012],"yaml":true},{"content":"A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\"></xref>.","nodes":[{"pos":[0,103],"content":"A function to map each source element to an element in an <ph id=\"ph1\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph>.","source":"A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\"></xref>."}],"pos":[253135,253239],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys.","nodes":[{"pos":[0,87],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare keys.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys."}],"pos":[253340,253428],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[253485,253534],"yaml":true},{"content":"The type of the key returned by the function represented in <code>keySelector</code>.","nodes":[{"pos":[0,85],"content":"The type of the key returned by the function represented in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by the function represented in <code>keySelector</code>."}],"pos":[253568,253654],"yaml":true},{"content":"The type of the elements in each <xref href=\"System.Linq.IGrouping`2\"></xref>.","nodes":[{"pos":[0,78],"content":"The type of the elements in each <ph id=\"ph1\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the elements in each <xref href=\"System.Linq.IGrouping`2\"></xref>."}],"pos":[253692,253771],"yaml":true},{"content":"An <code>IQueryable<IGrouping<TKey, TElement>></code> in C# or <code>IQueryable(Of IGrouping(Of TKey, TElement))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> contains a sequence of objects of type <code>TElement</code> and a key.","nodes":[{"pos":[0,294],"content":"An <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</ph><ept id=\"p1\">&lt;/code&gt;</ept> in C# or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">IQueryable(Of IGrouping(Of TKey, TElement))</ph><ept id=\"p2\">&lt;/code&gt;</ept> in <ph id=\"ph3\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id=\"ph4\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph> contains a sequence of objects of type <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph5\">TElement</ph><ept id=\"p3\">&lt;/code&gt;</ept> and a key.","source":"An <code>IQueryable<IGrouping<TKey, TElement>></code> in C# or <code>IQueryable(Of IGrouping(Of TKey, TElement))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> contains a sequence of objects of type <code>TElement</code> and a key."}],"pos":[253875,254170],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> or <code>elementSelector</code> or <code>comparer</code> is `null`.","nodes":[{"pos":[0,115],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;elementSelector&lt;/code&gt;</ph> or <ph id=\"ph4\">&lt;code&gt;comparer&lt;/code&gt;</ph> is <ph id=\"ph5\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> or <code>elementSelector</code> or <code>comparer</code> is `null`."}],"pos":[254332,254448],"yaml":true},{"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.","nodes":[{"pos":[0,136],"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.","nodes":[{"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.","pos":[0,136]}]}],"pos":[256536,256673],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element. The `resultSelector` parameter is used to obtain a result value from each group and its key.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1338],"content":"The <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,724],"source":"The <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[725,1040],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1345,2038],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element. The `resultSelector` parameter is used to obtain a result value from each group and its key.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,460],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it groups the elements of <ph id=\"ph1\">`source`</ph> by a key value that is obtained by invoking <ph id=\"ph2\">`keySelector`</ph> on each element.","pos":[461,600],"source":" The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element."},{"content":"The <ph id=\"ph1\">`resultSelector`</ph> parameter is used to obtain a result value from each group and its key.","pos":[601,693],"source":" The `resultSelector` parameter is used to obtain a result value from each group and its key."}]}],"pos":[256684,258729],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group.","nodes":[{"pos":[0,73],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements to group.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group."}],"pos":[259883,259957],"yaml":true},{"content":"A function to extract the key for each element.","nodes":[{"pos":[0,47],"content":"A function to extract the key for each element.","nodes":[{"content":"A function to extract the key for each element.","pos":[0,47]}]}],"pos":[260072,260120],"yaml":true},{"content":"A function to create a result value from each group.","nodes":[{"pos":[0,52],"content":"A function to create a result value from each group.","nodes":[{"content":"A function to create a result value from each group.","pos":[0,52]}]}],"pos":[260286,260339],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[260396,260445],"yaml":true},{"content":"The type of the key returned by the function represented in <code>keySelector</code>.","nodes":[{"pos":[0,85],"content":"The type of the key returned by the function represented in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by the function represented in <code>keySelector</code>."}],"pos":[260479,260565],"yaml":true},{"content":"The type of the result value returned by <code>resultSelector</code>.","nodes":[{"pos":[0,69],"content":"The type of the result value returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">resultSelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result value returned by <code>resultSelector</code>."}],"pos":[260602,260672],"yaml":true},{"content":"An <code>T:System.Linq.IQueryable`1</code> that has a type argument of <code>TResult</code> and where each element represents a projection over a group and its key.","nodes":[{"pos":[0,164],"content":"An <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T:System.Linq.IQueryable`1</ph><ept id=\"p1\">&lt;/code&gt;</ept> that has a type argument of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">TResult</ph><ept id=\"p2\">&lt;/code&gt;</ept> and where each element represents a projection over a group and its key.","source":"An <code>T:System.Linq.IQueryable`1</code> that has a type argument of <code>TResult</code> and where each element represents a projection over a group and its key."}],"pos":[260747,260912],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> or <code>resultSelector</code> is `null`.","nodes":[{"pos":[0,89],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;resultSelector&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> or <code>resultSelector</code> is `null`."}],"pos":[261074,261164],"yaml":true},{"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer.","nodes":[{"pos":[0,185],"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer.","nodes":[{"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer.","pos":[0,185],"nodes":[{"content":"Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.","pos":[0,136]},{"content":"Keys are compared by using a specified comparer.","pos":[137,185]}]}]}],"pos":[263477,263663],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by key values that are obtained by invoking `keySelector` on each element. The `comparer` parameter is used to compare keys and the `resultSelector` parameter is used to obtain a result value from each group and its key.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1458],"content":"The <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,844],"source":"The <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[845,1160],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1465,2271],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by key values that are obtained by invoking `keySelector` on each element. The `comparer` parameter is used to compare keys and the `resultSelector` parameter is used to obtain a result value from each group and its key.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,520],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it groups the elements of <ph id=\"ph1\">`source`</ph> by key values that are obtained by invoking <ph id=\"ph2\">`keySelector`</ph> on each element.","pos":[521,660],"source":" The expected behavior is that it groups the elements of `source` by key values that are obtained by invoking `keySelector` on each element."},{"content":"The <ph id=\"ph1\">`comparer`</ph> parameter is used to compare keys and the <ph id=\"ph2\">`resultSelector`</ph> parameter is used to obtain a result value from each group and its key.","pos":[661,806],"source":" The `comparer` parameter is used to compare keys and the `resultSelector` parameter is used to obtain a result value from each group and its key."}]}],"pos":[263674,265952],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group.","nodes":[{"pos":[0,73],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements to group.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group."}],"pos":[266442,266516],"yaml":true},{"content":"A function to extract the key for each element.","nodes":[{"pos":[0,47],"content":"A function to extract the key for each element.","nodes":[{"content":"A function to extract the key for each element.","pos":[0,47]}]}],"pos":[266631,266679],"yaml":true},{"content":"A function to create a result value from each group.","nodes":[{"pos":[0,52],"content":"A function to create a result value from each group.","nodes":[{"content":"A function to create a result value from each group.","pos":[0,52]}]}],"pos":[266845,266898],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys.","nodes":[{"pos":[0,87],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare keys.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys."}],"pos":[266999,267087],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[267144,267193],"yaml":true},{"content":"The type of the key returned by the function represented in <code>keySelector</code>.","nodes":[{"pos":[0,85],"content":"The type of the key returned by the function represented in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by the function represented in <code>keySelector</code>."}],"pos":[267227,267313],"yaml":true},{"content":"The type of the result value returned by <code>resultSelector</code>.","nodes":[{"pos":[0,69],"content":"The type of the result value returned by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">resultSelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the result value returned by <code>resultSelector</code>."}],"pos":[267350,267420],"yaml":true},{"content":"An <code>T:System.Linq.IQueryable`1</code> that has a type argument of <code>TResult</code> and where each element represents a projection over a group and its key.","nodes":[{"pos":[0,164],"content":"An <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T:System.Linq.IQueryable`1</ph><ept id=\"p1\">&lt;/code&gt;</ept> that has a type argument of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">TResult</ph><ept id=\"p2\">&lt;/code&gt;</ept> and where each element represents a projection over a group and its key.","source":"An <code>T:System.Linq.IQueryable`1</code> that has a type argument of <code>TResult</code> and where each element represents a projection over a group and its key."}],"pos":[267495,267660],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> or <code>resultSelector</code> or <code>comparer</code> is `null`.","nodes":[{"pos":[0,114],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;resultSelector&lt;/code&gt;</ph> or <ph id=\"ph4\">&lt;code&gt;comparer&lt;/code&gt;</ph> is <ph id=\"ph5\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> or <code>resultSelector</code> or <code>comparer</code> is `null`."}],"pos":[267822,267937],"yaml":true},{"content":"Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.","nodes":[{"pos":[0,133],"content":"Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.","nodes":[{"content":"Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.","pos":[0,133]}]}],"pos":[269764,269898],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by a key value. The key value is obtained by invoking `keySelector` on each element, and key values are compared by using `comparer`.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1196],"content":"The <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,582],"source":"The <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[583,898],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1203,1791],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by a key value. The key value is obtained by invoking `keySelector` on each element, and key values are compared by using `comparer`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,389],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it groups the elements of <ph id=\"ph1\">`source`</ph> by a key value.","pos":[390,470],"source":" The expected behavior is that it groups the elements of `source` by a key value."},{"content":"The key value is obtained by invoking <ph id=\"ph1\">`keySelector`</ph> on each element, and key values are compared by using <ph id=\"ph2\">`comparer`</ph>.","pos":[471,588],"source":" The key value is obtained by invoking `keySelector` on each element, and key values are compared by using `comparer`."}]}],"pos":[269909,271707],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group.","nodes":[{"pos":[0,73],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements to group.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group."}],"pos":[272098,272172],"yaml":true},{"content":"A function to extract the key for each element.","nodes":[{"pos":[0,47],"content":"A function to extract the key for each element.","nodes":[{"content":"A function to extract the key for each element.","pos":[0,47]}]}],"pos":[272287,272335],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys.","nodes":[{"pos":[0,87],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare keys.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys."}],"pos":[272436,272524],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[272581,272630],"yaml":true},{"content":"The type of the key returned by the function represented in <code>keySelector</code>.","nodes":[{"pos":[0,85],"content":"The type of the key returned by the function represented in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by the function represented in <code>keySelector</code>."}],"pos":[272664,272750],"yaml":true},{"content":"An <code>IQueryable<IGrouping<TKey, TSource>></code> in C# or <code>IQueryable(Of IGrouping(Of TKey, TSource))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> contains a sequence of objects and a key.","nodes":[{"pos":[0,262],"content":"An <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</ph><ept id=\"p1\">&lt;/code&gt;</ept> in C# or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">IQueryable(Of IGrouping(Of TKey, TSource))</ph><ept id=\"p2\">&lt;/code&gt;</ept> in <ph id=\"ph3\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id=\"ph4\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph> contains a sequence of objects and a key.","source":"An <code>IQueryable<IGrouping<TKey, TSource>></code> in C# or <code>IQueryable(Of IGrouping(Of TKey, TSource))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> contains a sequence of objects and a key."}],"pos":[272853,273116],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> or <code>comparer</code> is `null`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;comparer&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> or <code>comparer</code> is `null`."}],"pos":[273278,273362],"yaml":true},{"content":"Groups the elements of a sequence according to a specified key selector function.","nodes":[{"pos":[0,81],"content":"Groups the elements of a sequence according to a specified key selector function.","nodes":[{"content":"Groups the elements of a sequence according to a specified key selector function.","pos":[0,81]}]}],"pos":[274964,275046],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1076],"content":"The <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,462],"source":"The <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[463,778],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1083,1552],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,329],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it groups the elements of <ph id=\"ph1\">`source`</ph> by a key value that is obtained by invoking <ph id=\"ph2\">`keySelector`</ph> on each element.","pos":[330,469],"source":" The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element."}]}],"pos":[275057,276616],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group.","nodes":[{"pos":[0,73],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements to group.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group."}],"pos":[277488,277562],"yaml":true},{"content":"A function to extract the key for each element.","nodes":[{"pos":[0,47],"content":"A function to extract the key for each element.","nodes":[{"content":"A function to extract the key for each element.","pos":[0,47]}]}],"pos":[277677,277725],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[277782,277831],"yaml":true},{"content":"The type of the key returned by the function represented in <code>keySelector</code>.","nodes":[{"pos":[0,85],"content":"The type of the key returned by the function represented in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by the function represented in <code>keySelector</code>."}],"pos":[277865,277951],"yaml":true},{"content":"An <code>IQueryable<IGrouping<TKey, TSource>></code> in C# or <code>IQueryable(Of IGrouping(Of TKey, TSource))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> object contains a sequence of objects and a key.","nodes":[{"pos":[0,269],"content":"An <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</ph><ept id=\"p1\">&lt;/code&gt;</ept> in C# or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">IQueryable(Of IGrouping(Of TKey, TSource))</ph><ept id=\"p2\">&lt;/code&gt;</ept> in <ph id=\"ph3\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id=\"ph4\">&lt;xref href=\"System.Linq.IGrouping`2\"&gt;&lt;/xref&gt;</ph> object contains a sequence of objects and a key.","source":"An <code>IQueryable<IGrouping<TKey, TSource>></code> in C# or <code>IQueryable(Of IGrouping(Of TKey, TSource))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> object contains a sequence of objects and a key."}],"pos":[278054,278324],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> is `null`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> is `null`."}],"pos":[278486,278545],"yaml":true},{"content":"Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.","nodes":[{"pos":[0,141],"content":"Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.","nodes":[{"content":"Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.","pos":[0,141],"nodes":[{"content":"Correlates the elements of two sequences based on key equality and groups the results.","pos":[0,86]},{"content":"The default equality comparer is used to compare keys.","pos":[87,141]}]}]}],"pos":[281097,281239],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29> depends on the implementation of the type of the `outer` parameter. The expected behavior is that the `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively. These keys are compared for equality to match each element in `outer` with zero or more elements from `inner`. Then the `resultSelector` function is invoked to project a result object from each group of correlated elements.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1603],"content":"The <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,990],"source":"The <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`outer`</ph> parameter.","pos":[991,1305],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter."}]},{"pos":[1610,2577],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29> depends on the implementation of the type of the `outer` parameter. The expected behavior is that the `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively. These keys are compared for equality to match each element in `outer` with zero or more elements from `inner`. Then the `resultSelector` function is invoked to project a result object from each group of correlated elements.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`outer`</ph> parameter.","pos":[0,592],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29> depends on the implementation of the type of the `outer` parameter."},{"content":"The expected behavior is that the <ph id=\"ph1\">`outerKeySelector`</ph> and <ph id=\"ph2\">`innerKeySelector`</ph> functions are used to extract keys from <ph id=\"ph3\">`outer`</ph> and <ph id=\"ph4\">`inner`</ph>, respectively.","pos":[593,743],"source":" The expected behavior is that the `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively."},{"content":"These keys are compared for equality to match each element in <ph id=\"ph1\">`outer`</ph> with zero or more elements from <ph id=\"ph2\">`inner`</ph>.","pos":[744,854],"source":" These keys are compared for equality to match each element in `outer` with zero or more elements from `inner`."},{"content":"Then the <ph id=\"ph1\">`resultSelector`</ph> function is invoked to project a result object from each group of correlated elements.","pos":[855,967],"source":" Then the `resultSelector` function is invoked to project a result object from each group of correlated elements."}]}],"pos":[281250,283834],"yaml":true,"extradata":"MT"},{"content":"The first sequence to join.","nodes":[{"pos":[0,27],"content":"The first sequence to join.","nodes":[{"content":"The first sequence to join.","pos":[0,27]}]}],"pos":[285211,285239],"yaml":true},{"content":"The sequence to join to the first sequence.","nodes":[{"pos":[0,43],"content":"The sequence to join to the first sequence.","nodes":[{"content":"The sequence to join to the first sequence.","pos":[0,43]}]}],"pos":[285333,285377],"yaml":true},{"content":"A function to extract the join key from each element of the first sequence.","nodes":[{"pos":[0,75],"content":"A function to extract the join key from each element of the first sequence.","nodes":[{"content":"A function to extract the join key from each element of the first sequence.","pos":[0,75]}]}],"pos":[285496,285572],"yaml":true},{"content":"A function to extract the join key from each element of the second sequence.","nodes":[{"pos":[0,76],"content":"A function to extract the join key from each element of the second sequence.","nodes":[{"content":"A function to extract the join key from each element of the second sequence.","pos":[0,76]}]}],"pos":[285691,285768],"yaml":true},{"content":"A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.","nodes":[{"pos":[0,141],"content":"A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.","nodes":[{"content":"A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.","pos":[0,141]}]}],"pos":[285935,286077],"yaml":true},{"content":"The type of the elements of the first sequence.","nodes":[{"pos":[0,47],"content":"The type of the elements of the first sequence.","nodes":[{"content":"The type of the elements of the first sequence.","pos":[0,47]}]}],"pos":[286133,286181],"yaml":true},{"content":"The type of the elements of the second sequence.","nodes":[{"pos":[0,48],"content":"The type of the elements of the second sequence.","nodes":[{"content":"The type of the elements of the second sequence.","pos":[0,48]}]}],"pos":[286217,286266],"yaml":true},{"content":"The type of the keys returned by the key selector functions.","nodes":[{"pos":[0,60],"content":"The type of the keys returned by the key selector functions.","nodes":[{"content":"The type of the keys returned by the key selector functions.","pos":[0,60]}]}],"pos":[286300,286361],"yaml":true},{"content":"The type of the result elements.","nodes":[{"pos":[0,32],"content":"The type of the result elements.","nodes":[{"content":"The type of the result elements.","pos":[0,32]}]}],"pos":[286398,286431],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements of type <code>TResult</code> obtained by performing a grouped join on two sequences.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains elements of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> obtained by performing a grouped join on two sequences.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements of type <code>TResult</code> obtained by performing a grouped join on two sequences."}],"pos":[286506,286663],"yaml":true},{"content":"<code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`.","nodes":[{"pos":[0,148],"content":"<ph id=\"ph1\">&lt;code&gt;outer&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;inner&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;outerKeySelector&lt;/code&gt;</ph> or <ph id=\"ph4\">&lt;code&gt;innerKeySelector&lt;/code&gt;</ph> or <ph id=\"ph5\">&lt;code&gt;resultSelector&lt;/code&gt;</ph> is <ph id=\"ph6\">`null`</ph>.","source":"<code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`."}],"pos":[286827,286976],"yaml":true},{"content":"Correlates the elements of two sequences based on key equality and groups the results. A specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> is used to compare keys.","nodes":[{"pos":[0,191],"content":"Correlates the elements of two sequences based on key equality and groups the results. A specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> is used to compare keys.","nodes":[{"content":"Correlates the elements of two sequences based on key equality and groups the results.","pos":[0,86]},{"content":"A specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> is used to compare keys.","pos":[87,191],"source":" A specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> is used to compare keys."}]}],"pos":[289775,289967],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> depends on the implementation of the type of the `outer` parameter. The expected behavior is that the `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively. These keys are compared for equality by using `comparer`. The outcome of the comparisons is used to match each element in `outer` with zero or more elements from `inner`. Then the `resultSelector` function is invoked to project a result object from each group of correlated elements.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1723],"content":"The <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,1110],"source":"The <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`outer`</ph> parameter.","pos":[1111,1425],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter."}]},{"pos":[1730,2817],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> depends on the implementation of the type of the `outer` parameter. The expected behavior is that the `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively. These keys are compared for equality by using `comparer`. The outcome of the comparisons is used to match each element in `outer` with zero or more elements from `inner`. Then the `resultSelector` function is invoked to project a result object from each group of correlated elements.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`outer`</ph> parameter.","pos":[0,652],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> depends on the implementation of the type of the `outer` parameter."},{"content":"The expected behavior is that the <ph id=\"ph1\">`outerKeySelector`</ph> and <ph id=\"ph2\">`innerKeySelector`</ph> functions are used to extract keys from <ph id=\"ph3\">`outer`</ph> and <ph id=\"ph4\">`inner`</ph>, respectively.","pos":[653,803],"source":" The expected behavior is that the `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively."},{"content":"These keys are compared for equality by using <ph id=\"ph1\">`comparer`</ph>.","pos":[804,861],"source":" These keys are compared for equality by using `comparer`."},{"content":"The outcome of the comparisons is used to match each element in <ph id=\"ph1\">`outer`</ph> with zero or more elements from <ph id=\"ph2\">`inner`</ph>.","pos":[862,974],"source":" The outcome of the comparisons is used to match each element in `outer` with zero or more elements from `inner`."},{"content":"Then the <ph id=\"ph1\">`resultSelector`</ph> function is invoked to project a result object from each group of correlated elements.","pos":[975,1087],"source":" Then the `resultSelector` function is invoked to project a result object from each group of correlated elements."}]}],"pos":[289978,292802],"yaml":true,"extradata":"MT"},{"content":"The first sequence to join.","nodes":[{"pos":[0,27],"content":"The first sequence to join.","nodes":[{"content":"The first sequence to join.","pos":[0,27]}]}],"pos":[293427,293455],"yaml":true},{"content":"The sequence to join to the first sequence.","nodes":[{"pos":[0,43],"content":"The sequence to join to the first sequence.","nodes":[{"content":"The sequence to join to the first sequence.","pos":[0,43]}]}],"pos":[293549,293593],"yaml":true},{"content":"A function to extract the join key from each element of the first sequence.","nodes":[{"pos":[0,75],"content":"A function to extract the join key from each element of the first sequence.","nodes":[{"content":"A function to extract the join key from each element of the first sequence.","pos":[0,75]}]}],"pos":[293712,293788],"yaml":true},{"content":"A function to extract the join key from each element of the second sequence.","nodes":[{"pos":[0,76],"content":"A function to extract the join key from each element of the second sequence.","nodes":[{"content":"A function to extract the join key from each element of the second sequence.","pos":[0,76]}]}],"pos":[293907,293984],"yaml":true},{"content":"A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.","nodes":[{"pos":[0,141],"content":"A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.","nodes":[{"content":"A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.","pos":[0,141]}]}],"pos":[294151,294293],"yaml":true},{"content":"A comparer to hash and compare keys.","nodes":[{"pos":[0,36],"content":"A comparer to hash and compare keys.","nodes":[{"content":"A comparer to hash and compare keys.","pos":[0,36]}]}],"pos":[294394,294431],"yaml":true},{"content":"The type of the elements of the first sequence.","nodes":[{"pos":[0,47],"content":"The type of the elements of the first sequence.","nodes":[{"content":"The type of the elements of the first sequence.","pos":[0,47]}]}],"pos":[294487,294535],"yaml":true},{"content":"The type of the elements of the second sequence.","nodes":[{"pos":[0,48],"content":"The type of the elements of the second sequence.","nodes":[{"content":"The type of the elements of the second sequence.","pos":[0,48]}]}],"pos":[294571,294620],"yaml":true},{"content":"The type of the keys returned by the key selector functions.","nodes":[{"pos":[0,60],"content":"The type of the keys returned by the key selector functions.","nodes":[{"content":"The type of the keys returned by the key selector functions.","pos":[0,60]}]}],"pos":[294654,294715],"yaml":true},{"content":"The type of the result elements.","nodes":[{"pos":[0,32],"content":"The type of the result elements.","nodes":[{"content":"The type of the result elements.","pos":[0,32]}]}],"pos":[294752,294785],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements of type <code>TResult</code> obtained by performing a grouped join on two sequences.","nodes":[{"pos":[0,156],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains elements of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> obtained by performing a grouped join on two sequences.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements of type <code>TResult</code> obtained by performing a grouped join on two sequences."}],"pos":[294860,295017],"yaml":true},{"content":"<code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`.","nodes":[{"pos":[0,148],"content":"<ph id=\"ph1\">&lt;code&gt;outer&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;inner&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;outerKeySelector&lt;/code&gt;</ph> or <ph id=\"ph4\">&lt;code&gt;innerKeySelector&lt;/code&gt;</ph> or <ph id=\"ph5\">&lt;code&gt;resultSelector&lt;/code&gt;</ph> is <ph id=\"ph6\">`null`</ph>.","source":"<code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`."}],"pos":[295181,295330],"yaml":true},{"content":"Produces the set intersection of two sequences by using the default equality comparer to compare values.","nodes":[{"pos":[0,104],"content":"Produces the set intersection of two sequences by using the default equality comparer to compare values.","nodes":[{"content":"Produces the set intersection of two sequences by using the default equality comparer to compare values.","pos":[0,104]}]}],"pos":[296860,296965],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that all the elements in `source1` that are also in `source2` are returned.","nodes":[{"pos":[0,737],"content":"The <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,420],"source":"The <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source1`</ph> parameter.","pos":[421,737],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter."}]},{"pos":[744,1154],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that all the elements in `source1` that are also in `source2` are returned.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source1`</ph> parameter.","pos":[0,309],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter."},{"content":"The expected behavior is that all the elements in <ph id=\"ph1\">`source1`</ph> that are also in <ph id=\"ph2\">`source2`</ph> are returned.","pos":[310,410],"source":" The expected behavior is that all the elements in `source1` that are also in `source2` are returned."}]}],"pos":[296976,298135],"yaml":true,"extradata":"MT"},{"content":"A sequence whose distinct elements that also appear in <code>source2</code> are returned.","nodes":[{"pos":[0,89],"content":"A sequence whose distinct elements that also appear in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source2</ph><ept id=\"p1\">&lt;/code&gt;</ept> are returned.","source":"A sequence whose distinct elements that also appear in <code>source2</code> are returned."}],"pos":[298970,299060],"yaml":true},{"content":"A sequence whose distinct elements that also appear in the first sequence are returned.","nodes":[{"pos":[0,87],"content":"A sequence whose distinct elements that also appear in the first sequence are returned.","nodes":[{"content":"A sequence whose distinct elements that also appear in the first sequence are returned.","pos":[0,87]}]}],"pos":[299157,299245],"yaml":true},{"content":"The type of the elements of the input sequences.","nodes":[{"pos":[0,48],"content":"The type of the elements of the input sequences.","nodes":[{"content":"The type of the elements of the input sequences.","pos":[0,48]}]}],"pos":[299302,299351],"yaml":true},{"content":"A sequence that contains the set intersection of the two sequences.","nodes":[{"pos":[0,67],"content":"A sequence that contains the set intersection of the two sequences.","nodes":[{"content":"A sequence that contains the set intersection of the two sequences.","pos":[0,67]}]}],"pos":[299426,299494],"yaml":true},{"content":"<code>source1</code> or <code>source2</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source1&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;source2&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source1</code> or <code>source2</code> is `null`."}],"pos":[299658,299714],"yaml":true},{"content":"Produces the set intersection of two sequences by using the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.","nodes":[{"pos":[0,156],"content":"Produces the set intersection of two sequences by using the specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare values.","source":"Produces the set intersection of two sequences by using the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values."}],"pos":[301478,301635],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that all the elements in `source1` that are also in `source2` are returned. The `comparer` parameter is used to compare elements.","nodes":[{"pos":[0,857],"content":"The <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,540],"source":"The <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source1`</ph> parameter.","pos":[541,857],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter."}]},{"pos":[864,1388],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that all the elements in `source1` that are also in `source2` are returned. The `comparer` parameter is used to compare elements.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source1`</ph> parameter.","pos":[0,369],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter."},{"content":"The expected behavior is that all the elements in <ph id=\"ph1\">`source1`</ph> that are also in <ph id=\"ph2\">`source2`</ph> are returned.","pos":[370,470],"source":" The expected behavior is that all the elements in `source1` that are also in `source2` are returned."},{"content":"The <ph id=\"ph1\">`comparer`</ph> parameter is used to compare elements.","pos":[471,524],"source":" The `comparer` parameter is used to compare elements."}]}],"pos":[301646,303039],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose distinct elements that also appear in <code>source2</code> are returned.","nodes":[{"pos":[0,127],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> whose distinct elements that also appear in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source2</ph><ept id=\"p1\">&lt;/code&gt;</ept> are returned.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose distinct elements that also appear in <code>source2</code> are returned."}],"pos":[303393,303521],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements that also appear in the first sequence are returned.","nodes":[{"pos":[0,141],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose distinct elements that also appear in the first sequence are returned.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements that also appear in the first sequence are returned."}],"pos":[303618,303760],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare values.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values."}],"pos":[303864,303954],"yaml":true},{"content":"The type of the elements of the input sequences.","nodes":[{"pos":[0,48],"content":"The type of the elements of the input sequences.","nodes":[{"content":"The type of the elements of the input sequences.","pos":[0,48]}]}],"pos":[304011,304060],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the set intersection of the two sequences.","nodes":[{"pos":[0,105],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains the set intersection of the two sequences.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the set intersection of the two sequences."}],"pos":[304135,304241],"yaml":true},{"content":"<code>source1</code> or <code>source2</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source1&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;source2&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source1</code> or <code>source2</code> is `null`."}],"pos":[304405,304461],"yaml":true},{"content":"Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.","nodes":[{"pos":[0,119],"content":"Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.","nodes":[{"content":"Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.","pos":[0,119],"nodes":[{"content":"Correlates the elements of two sequences based on matching keys.","pos":[0,64]},{"content":"The default equality comparer is used to compare keys.","pos":[65,119]}]}]}],"pos":[306824,306944],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29> depends on the implementation of the type of the `outer` parameter. The expected behavior is that of an inner join. The `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively. These keys are compared for equality to match elements from each sequence. A pair of elements is stored for each element in `inner` that matches an element in `outer`. Then the `resultSelector` function is invoked to project a result object from each pair of matching elements.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1505],"content":"The <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,892],"source":"The <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`outer`</ph> parameter.","pos":[893,1207],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter."}]},{"pos":[1512,2502],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29> depends on the implementation of the type of the `outer` parameter. The expected behavior is that of an inner join. The `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively. These keys are compared for equality to match elements from each sequence. A pair of elements is stored for each element in `inner` that matches an element in `outer`. Then the `resultSelector` function is invoked to project a result object from each pair of matching elements.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`outer`</ph> parameter.","pos":[0,543],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29> depends on the implementation of the type of the `outer` parameter."},{"content":"The expected behavior is that of an inner join.","pos":[544,591]},{"content":"The <ph id=\"ph1\">`outerKeySelector`</ph> and <ph id=\"ph2\">`innerKeySelector`</ph> functions are used to extract keys from <ph id=\"ph3\">`outer`</ph> and <ph id=\"ph4\">`inner`</ph>, respectively.","pos":[592,712],"source":" The `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively."},{"content":"These keys are compared for equality to match elements from each sequence.","pos":[713,787]},{"content":"A pair of elements is stored for each element in <ph id=\"ph1\">`inner`</ph> that matches an element in <ph id=\"ph2\">`outer`</ph>.","pos":[788,880],"source":" A pair of elements is stored for each element in `inner` that matches an element in `outer`."},{"content":"Then the <ph id=\"ph1\">`resultSelector`</ph> function is invoked to project a result object from each pair of matching elements.","pos":[881,990],"source":" Then the `resultSelector` function is invoked to project a result object from each pair of matching elements."}]}],"pos":[306955,309464],"yaml":true,"extradata":"MT"},{"content":"The first sequence to join.","nodes":[{"pos":[0,27],"content":"The first sequence to join.","nodes":[{"content":"The first sequence to join.","pos":[0,27]}]}],"pos":[310768,310796],"yaml":true},{"content":"The sequence to join to the first sequence.","nodes":[{"pos":[0,43],"content":"The sequence to join to the first sequence.","nodes":[{"content":"The sequence to join to the first sequence.","pos":[0,43]}]}],"pos":[310890,310934],"yaml":true},{"content":"A function to extract the join key from each element of the first sequence.","nodes":[{"pos":[0,75],"content":"A function to extract the join key from each element of the first sequence.","nodes":[{"content":"A function to extract the join key from each element of the first sequence.","pos":[0,75]}]}],"pos":[311053,311129],"yaml":true},{"content":"A function to extract the join key from each element of the second sequence.","nodes":[{"pos":[0,76],"content":"A function to extract the join key from each element of the second sequence.","nodes":[{"content":"A function to extract the join key from each element of the second sequence.","pos":[0,76]}]}],"pos":[311248,311325],"yaml":true},{"content":"A function to create a result element from two matching elements.","nodes":[{"pos":[0,65],"content":"A function to create a result element from two matching elements.","nodes":[{"content":"A function to create a result element from two matching elements.","pos":[0,65]}]}],"pos":[311452,311518],"yaml":true},{"content":"The type of the elements of the first sequence.","nodes":[{"pos":[0,47],"content":"The type of the elements of the first sequence.","nodes":[{"content":"The type of the elements of the first sequence.","pos":[0,47]}]}],"pos":[311574,311622],"yaml":true},{"content":"The type of the elements of the second sequence.","nodes":[{"pos":[0,48],"content":"The type of the elements of the second sequence.","nodes":[{"content":"The type of the elements of the second sequence.","pos":[0,48]}]}],"pos":[311658,311707],"yaml":true},{"content":"The type of the keys returned by the key selector functions.","nodes":[{"pos":[0,60],"content":"The type of the keys returned by the key selector functions.","nodes":[{"content":"The type of the keys returned by the key selector functions.","pos":[0,60]}]}],"pos":[311741,311802],"yaml":true},{"content":"The type of the result elements.","nodes":[{"pos":[0,32],"content":"The type of the result elements.","nodes":[{"content":"The type of the result elements.","pos":[0,32]}]}],"pos":[311839,311872],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that has elements of type <code>TResult</code> obtained by performing an inner join on two sequences.","nodes":[{"pos":[0,150],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that has elements of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> obtained by performing an inner join on two sequences.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that has elements of type <code>TResult</code> obtained by performing an inner join on two sequences."}],"pos":[311947,312098],"yaml":true},{"content":"<code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`.","nodes":[{"pos":[0,148],"content":"<ph id=\"ph1\">&lt;code&gt;outer&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;inner&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;outerKeySelector&lt;/code&gt;</ph> or <ph id=\"ph4\">&lt;code&gt;innerKeySelector&lt;/code&gt;</ph> or <ph id=\"ph5\">&lt;code&gt;resultSelector&lt;/code&gt;</ph> is <ph id=\"ph6\">`null`</ph>.","source":"<code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`."}],"pos":[312257,312406],"yaml":true},{"content":"Correlates the elements of two sequences based on matching keys. A specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> is used to compare keys.","nodes":[{"pos":[0,169],"content":"Correlates the elements of two sequences based on matching keys. A specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> is used to compare keys.","nodes":[{"content":"Correlates the elements of two sequences based on matching keys.","pos":[0,64]},{"content":"A specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> is used to compare keys.","pos":[65,169],"source":" A specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> is used to compare keys."}]}],"pos":[315016,315186],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> depends on the implementation of the type of the `outer` parameter. The expected behavior is that of an inner join. The `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively. These keys are compared for equality by using `comparer`. The outcome of the comparisons is used to create a matching pair for each element in `inner` that matches an element in `outer`. Then the `resultSelector` function is invoked to project a result object from each pair of matching elements.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1625],"content":"The <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,1012],"source":"The <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`outer`</ph> parameter.","pos":[1013,1327],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter."}]},{"pos":[1632,2701],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> depends on the implementation of the type of the `outer` parameter. The expected behavior is that of an inner join. The `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively. These keys are compared for equality by using `comparer`. The outcome of the comparisons is used to create a matching pair for each element in `inner` that matches an element in `outer`. Then the `resultSelector` function is invoked to project a result object from each pair of matching elements.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`outer`</ph> parameter.","pos":[0,603],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> depends on the implementation of the type of the `outer` parameter."},{"content":"The expected behavior is that of an inner join.","pos":[604,651]},{"content":"The <ph id=\"ph1\">`outerKeySelector`</ph> and <ph id=\"ph2\">`innerKeySelector`</ph> functions are used to extract keys from <ph id=\"ph3\">`outer`</ph> and <ph id=\"ph4\">`inner`</ph>, respectively.","pos":[652,772],"source":" The `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively."},{"content":"These keys are compared for equality by using <ph id=\"ph1\">`comparer`</ph>.","pos":[773,830],"source":" These keys are compared for equality by using `comparer`."},{"content":"The outcome of the comparisons is used to create a matching pair for each element in <ph id=\"ph1\">`inner`</ph> that matches an element in <ph id=\"ph2\">`outer`</ph>.","pos":[831,959],"source":" The outcome of the comparisons is used to create a matching pair for each element in `inner` that matches an element in `outer`."},{"content":"Then the <ph id=\"ph1\">`resultSelector`</ph> function is invoked to project a result object from each pair of matching elements.","pos":[960,1069],"source":" Then the `resultSelector` function is invoked to project a result object from each pair of matching elements."}]}],"pos":[315197,317905],"yaml":true,"extradata":"MT"},{"content":"The first sequence to join.","nodes":[{"pos":[0,27],"content":"The first sequence to join.","nodes":[{"content":"The first sequence to join.","pos":[0,27]}]}],"pos":[318485,318513],"yaml":true},{"content":"The sequence to join to the first sequence.","nodes":[{"pos":[0,43],"content":"The sequence to join to the first sequence.","nodes":[{"content":"The sequence to join to the first sequence.","pos":[0,43]}]}],"pos":[318607,318651],"yaml":true},{"content":"A function to extract the join key from each element of the first sequence.","nodes":[{"pos":[0,75],"content":"A function to extract the join key from each element of the first sequence.","nodes":[{"content":"A function to extract the join key from each element of the first sequence.","pos":[0,75]}]}],"pos":[318770,318846],"yaml":true},{"content":"A function to extract the join key from each element of the second sequence.","nodes":[{"pos":[0,76],"content":"A function to extract the join key from each element of the second sequence.","nodes":[{"content":"A function to extract the join key from each element of the second sequence.","pos":[0,76]}]}],"pos":[318965,319042],"yaml":true},{"content":"A function to create a result element from two matching elements.","nodes":[{"pos":[0,65],"content":"A function to create a result element from two matching elements.","nodes":[{"content":"A function to create a result element from two matching elements.","pos":[0,65]}]}],"pos":[319169,319235],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to hash and compare keys.","nodes":[{"pos":[0,96],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to hash and compare keys.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to hash and compare keys."}],"pos":[319336,319433],"yaml":true},{"content":"The type of the elements of the first sequence.","nodes":[{"pos":[0,47],"content":"The type of the elements of the first sequence.","nodes":[{"content":"The type of the elements of the first sequence.","pos":[0,47]}]}],"pos":[319489,319537],"yaml":true},{"content":"The type of the elements of the second sequence.","nodes":[{"pos":[0,48],"content":"The type of the elements of the second sequence.","nodes":[{"content":"The type of the elements of the second sequence.","pos":[0,48]}]}],"pos":[319573,319622],"yaml":true},{"content":"The type of the keys returned by the key selector functions.","nodes":[{"pos":[0,60],"content":"The type of the keys returned by the key selector functions.","nodes":[{"content":"The type of the keys returned by the key selector functions.","pos":[0,60]}]}],"pos":[319656,319717],"yaml":true},{"content":"The type of the result elements.","nodes":[{"pos":[0,32],"content":"The type of the result elements.","nodes":[{"content":"The type of the result elements.","pos":[0,32]}]}],"pos":[319754,319787],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that has elements of type <code>TResult</code> obtained by performing an inner join on two sequences.","nodes":[{"pos":[0,150],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that has elements of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> obtained by performing an inner join on two sequences.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that has elements of type <code>TResult</code> obtained by performing an inner join on two sequences."}],"pos":[319862,320013],"yaml":true},{"content":"<code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`.","nodes":[{"pos":[0,148],"content":"<ph id=\"ph1\">&lt;code&gt;outer&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;inner&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;outerKeySelector&lt;/code&gt;</ph> or <ph id=\"ph4\">&lt;code&gt;innerKeySelector&lt;/code&gt;</ph> or <ph id=\"ph5\">&lt;code&gt;resultSelector&lt;/code&gt;</ph> is <ph id=\"ph6\">`null`</ph>.","source":"<code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`."}],"pos":[320172,320321],"yaml":true},{"content":"Returns the last element in a sequence.","nodes":[{"pos":[0,39],"content":"Returns the last element in a sequence.","nodes":[{"content":"Returns the last element in a sequence.","pos":[0,39]}]}],"pos":[321623,321663],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the last element in `source`.","nodes":[{"pos":[0,614],"content":"The <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,302],"source":"The <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[303,614],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[621,941],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the last element in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,249],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the last element in <ph id=\"ph1\">`source`</ph>.","pos":[250,320],"source":" The expected behavior is that it returns the last element in `source`."}]}],"pos":[321674,322620],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the last element of.","nodes":[{"pos":[0,79],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to return the last element of.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the last element of."}],"pos":[323287,323367],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[323424,323473],"yaml":true},{"content":"The value at the last position in <code>source</code>.","nodes":[{"pos":[0,54],"content":"The value at the last position in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The value at the last position in <code>source</code>."}],"pos":[323524,323579],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[323738,323769],"yaml":true},{"content":"The source sequence is empty.","nodes":[{"pos":[0,29],"content":"The source sequence is empty.","nodes":[{"content":"The source sequence is empty.","pos":[0,29]}]}],"pos":[323879,323909],"yaml":true},{"content":"Returns the last element of a sequence that satisfies a specified condition.","nodes":[{"pos":[0,76],"content":"Returns the last element of a sequence that satisfies a specified condition.","nodes":[{"content":"Returns the last element of a sequence that satisfies a specified condition.","pos":[0,76]}]}],"pos":[325520,325597],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the last element in `source` that satisfies the condition specified by `predicate`.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1080],"content":"The <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,470],"source":"The <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[471,782],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1087,1545],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the last element in `source` that satisfies the condition specified by `predicate`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,333],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the last element in <ph id=\"ph1\">`source`</ph> that satisfies the condition specified by <ph id=\"ph2\">`predicate`</ph>.","pos":[334,458],"source":" The expected behavior is that it returns the last element in `source` that satisfies the condition specified by `predicate`."}]}],"pos":[325608,327160],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return an element from.","nodes":[{"pos":[0,75],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to return an element from.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return an element from."}],"pos":[328004,328080],"yaml":true},{"content":"A function to test each element for a condition.","nodes":[{"pos":[0,48],"content":"A function to test each element for a condition.","nodes":[{"content":"A function to test each element for a condition.","pos":[0,48]}]}],"pos":[328203,328252],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[328309,328358],"yaml":true},{"content":"The last element in <code>source</code> that passes the test specified by <code>predicate</code>.","nodes":[{"pos":[0,97],"content":"The last element in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> that passes the test specified by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">predicate</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The last element in <code>source</code> that passes the test specified by <code>predicate</code>."}],"pos":[328409,328507],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[328666,328723],"yaml":true},{"content":"No element satisfies the condition in <code>predicate</code>.  \n  \n -or-  \n  \n The source sequence is empty.","nodes":[{"pos":[0,61],"content":"No element satisfies the condition in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"No element satisfies the condition in <code>predicate</code>."},{"pos":[68,72],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[79,108],"content":"The source sequence is empty.","nodes":[{"content":"The source sequence is empty.","pos":[0,29]}]}],"pos":[328833,328948],"yaml":true},{"content":"Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.","nodes":[{"pos":[0,113],"content":"Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.","nodes":[{"content":"Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.","pos":[0,113]}]}],"pos":[330613,330727],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the last element in `source` that satisfies the condition specified by `predicate`. It returns a default value if there is no such element in `source`.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,930],"content":"The <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,320],"source":"The <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[321,632],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[937,1388],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the last element in `source` that satisfies the condition specified by `predicate`. It returns a default value if there is no such element in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,258],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the last element in <ph id=\"ph1\">`source`</ph> that satisfies the condition specified by <ph id=\"ph2\">`predicate`</ph>.","pos":[259,383],"source":" The expected behavior is that it returns the last element in `source` that satisfies the condition specified by `predicate`."},{"content":"It returns a default value if there is no such element in <ph id=\"ph1\">`source`</ph>.","pos":[384,451],"source":" It returns a default value if there is no such element in `source`."}]}],"pos":[330738,332133],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return an element from.","nodes":[{"pos":[0,75],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to return an element from.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return an element from."}],"pos":[333055,333131],"yaml":true},{"content":"A function to test each element for a condition.","nodes":[{"pos":[0,48],"content":"A function to test each element for a condition.","nodes":[{"content":"A function to test each element for a condition.","pos":[0,48]}]}],"pos":[333254,333303],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[333360,333409],"yaml":true},{"content":"<code>default</code>(<code>TSource</code>) if <code>source</code> is empty or if no elements pass the test in the predicate function; otherwise, the last element of <code>source</code> that passes the test in the predicate function.","nodes":[{"pos":[0,232],"content":"<ph id=\"ph1\">&lt;code&gt;default&lt;/code&gt;</ph>(<ph id=\"ph2\">&lt;code&gt;TSource&lt;/code&gt;</ph>) if <ph id=\"ph3\">&lt;code&gt;source&lt;/code&gt;</ph> is empty or if no elements pass the test in the predicate function; otherwise, the last element of <ph id=\"ph4\">&lt;code&gt;source&lt;/code&gt;</ph> that passes the test in the predicate function.","source":"<code>default</code>(<code>TSource</code>) if <code>source</code> is empty or if no elements pass the test in the predicate function; otherwise, the last element of <code>source</code> that passes the test in the predicate function."}],"pos":[333460,333693],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[333861,333918],"yaml":true},{"content":"Returns the last element in a sequence, or a default value if the sequence contains no elements.","nodes":[{"pos":[0,96],"content":"Returns the last element in a sequence, or a default value if the sequence contains no elements.","nodes":[{"content":"Returns the last element in a sequence, or a default value if the sequence contains no elements.","pos":[0,96]}]}],"pos":[335274,335371],"yaml":true},{"content":"The <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the last element in `source`, or a default value if `source` is empty.  \n  \n The <xref:System.Linq.Queryable.LastOrDefault%2A> method does not provide a way to specify a default value. If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.","nodes":[{"pos":[0,632],"content":"The <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,320],"source":"The <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[321,632],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[639,1009],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the last element in `source`, or a default value if `source` is empty.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,258],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the last element in <ph id=\"ph1\">`source`</ph>, or a default value if <ph id=\"ph2\">`source`</ph> is empty.","pos":[259,370],"source":" The expected behavior is that it returns the last element in `source`, or a default value if `source` is empty."}]},{"pos":[1016,1347],"content":"The <xref:System.Linq.Queryable.LastOrDefault%2A> method does not provide a way to specify a default value. If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.LastOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.","pos":[0,107],"source":"The <xref:System.Linq.Queryable.LastOrDefault%2A> method does not provide a way to specify a default value."},{"content":"If you want to specify a default value other than <ph id=\"ph1\">`default(TSource)`</ph>, use the <ph id=\"ph2\">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.","pos":[108,331],"source":" If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method as described in the Example section."}]}],"pos":[335382,336736],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the last element of.","nodes":[{"pos":[0,79],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to return the last element of.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the last element of."}],"pos":[338801,338881],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[338938,338987],"yaml":true},{"content":"<code>default</code>(<code>TSource</code>) if <code>source</code> is empty; otherwise, the last element in <code>source</code>.","nodes":[{"pos":[0,127],"content":"<ph id=\"ph1\">&lt;code&gt;default&lt;/code&gt;</ph>(<ph id=\"ph2\">&lt;code&gt;TSource&lt;/code&gt;</ph>) if <ph id=\"ph3\">&lt;code&gt;source&lt;/code&gt;</ph> is empty; otherwise, the last element in <ph id=\"ph4\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>default</code>(<code>TSource</code>) if <code>source</code> is empty; otherwise, the last element in <code>source</code>."}],"pos":[339038,339166],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[339334,339365],"yaml":true},{"content":"Returns an <xref href=\"System.Int64\"></xref> that represents the total number of elements in a sequence.","nodes":[{"pos":[0,104],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> that represents the total number of elements in a sequence.","source":"Returns an <xref href=\"System.Int64\"></xref> that represents the total number of elements in a sequence."}],"pos":[340697,340802],"yaml":true},{"content":"The <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it counts the number of items in `source` and returns an <xref:System.Int64>.","nodes":[{"pos":[0,624],"content":"The <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,312],"source":"The <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[313,624],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[631,993],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it counts the number of items in `source` and returns an <xref:System.Int64>.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,254],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it counts the number of items in <ph id=\"ph1\">`source`</ph> and returns an <ph id=\"ph2\">&lt;xref:System.Int64&gt;</ph>.","pos":[255,362],"source":" The expected behavior is that it counts the number of items in `source` and returns an <xref:System.Int64>."}]}],"pos":[340813,341811],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements to be counted.","nodes":[{"pos":[0,90],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains the elements to be counted.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements to be counted."}],"pos":[342480,342571],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[342628,342677],"yaml":true},{"content":"The number of elements in <code>source</code>.","nodes":[{"pos":[0,46],"content":"The number of elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The number of elements in <code>source</code>."}],"pos":[342733,342780],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[342944,342975],"yaml":true},{"content":"The number of elements exceeds <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,74],"content":"The number of elements exceeds <ph id=\"ph1\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The number of elements exceeds <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[343069,343144],"yaml":true},{"content":"Returns an <xref href=\"System.Int64\"></xref> that represents the number of elements in a sequence that satisfy a condition.","nodes":[{"pos":[0,123],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> that represents the number of elements in a sequence that satisfy a condition.","source":"Returns an <xref href=\"System.Int64\"></xref> that represents the number of elements in a sequence that satisfy a condition."}],"pos":[344785,344909],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it counts the number of items in `source` that satisfy the condition specified by `predicate` and returns an <xref:System.Int64>.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1090],"content":"The <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,480],"source":"The <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[481,792],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1097,1595],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it counts the number of items in `source` that satisfy the condition specified by `predicate` and returns an <xref:System.Int64>.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,338],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it counts the number of items in <ph id=\"ph1\">`source`</ph> that satisfy the condition specified by <ph id=\"ph2\">`predicate`</ph> and returns an <ph id=\"ph3\">&lt;xref:System.Int64&gt;</ph>.","pos":[339,498],"source":" The expected behavior is that it counts the number of items in `source` that satisfy the condition specified by `predicate` and returns an <xref:System.Int64>."}]}],"pos":[344920,346522],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements to be counted.","nodes":[{"pos":[0,90],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains the elements to be counted.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements to be counted."}],"pos":[347366,347457],"yaml":true},{"content":"A function to test each element for a condition.","nodes":[{"pos":[0,48],"content":"A function to test each element for a condition.","nodes":[{"content":"A function to test each element for a condition.","pos":[0,48]}]}],"pos":[347580,347629],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[347686,347735],"yaml":true},{"content":"The number of elements in <code>source</code> that satisfy the condition in the predicate function.","nodes":[{"pos":[0,99],"content":"The number of elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> that satisfy the condition in the predicate function.","source":"The number of elements in <code>source</code> that satisfy the condition in the predicate function."}],"pos":[347791,347891],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[348055,348112],"yaml":true},{"content":"The number of matching elements exceeds <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,83],"content":"The number of matching elements exceeds <ph id=\"ph1\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The number of matching elements exceeds <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[348206,348290],"yaml":true},{"content":"Invokes a projection function on each element of a generic <xref href=\"System.Linq.IQueryable`1\"></xref> and returns the maximum resulting value.","nodes":[{"pos":[0,145],"content":"Invokes a projection function on each element of a generic <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> and returns the maximum resulting value.","source":"Invokes a projection function on each element of a generic <xref href=\"System.Linq.IQueryable`1\"></xref> and returns the maximum resulting value."}],"pos":[349864,350010],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element in `source` and returns the maximum value.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1064],"content":"The <xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,454],"source":"The <xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[455,766],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1071,1507],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element in `source` and returns the maximum value.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,325],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it invokes <ph id=\"ph1\">`selector`</ph> on each element in <ph id=\"ph2\">`source`</ph> and returns the maximum value.","pos":[326,436],"source":" The expected behavior is that it invokes `selector` on each element in `source` and returns the maximum value."}]}],"pos":[350021,351535],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the maximum of.","nodes":[{"pos":[0,49],"content":"A sequence of values to determine the maximum of.","nodes":[{"content":"A sequence of values to determine the maximum of.","pos":[0,49]}]}],"pos":[352379,352429],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[352544,352592],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[352649,352698],"yaml":true},{"content":"The type of the value returned by the function represented by <code>selector</code>.","nodes":[{"pos":[0,84],"content":"The type of the value returned by the function represented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">selector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the value returned by the function represented by <code>selector</code>."}],"pos":[352735,352820],"yaml":true},{"content":"The maximum value in the sequence.","nodes":[{"pos":[0,34],"content":"The maximum value in the sequence.","nodes":[{"content":"The maximum value in the sequence.","pos":[0,34]}]}],"pos":[352871,352906],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[353064,353120],"yaml":true},{"content":"Returns the maximum value in a generic <xref href=\"System.Linq.IQueryable`1\"></xref>.","nodes":[{"pos":[0,85],"content":"Returns the maximum value in a generic <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the maximum value in a generic <xref href=\"System.Linq.IQueryable`1\"></xref>."}],"pos":[354416,354502],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the maximum value in `source`.","nodes":[{"pos":[0,612],"content":"The <xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,300],"source":"The <xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[301,612],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[619,939],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the maximum value in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,248],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the maximum value in <ph id=\"ph1\">`source`</ph>.","pos":[249,320],"source":" The expected behavior is that it returns the maximum value in `source`."}]}],"pos":[354513,355457],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the maximum of.","nodes":[{"pos":[0,49],"content":"A sequence of values to determine the maximum of.","nodes":[{"content":"A sequence of values to determine the maximum of.","pos":[0,49]}]}],"pos":[356128,356178],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[356235,356284],"yaml":true},{"content":"The maximum value in the sequence.","nodes":[{"pos":[0,34],"content":"The maximum value in the sequence.","nodes":[{"content":"The maximum value in the sequence.","pos":[0,34]}]}],"pos":[356335,356370],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[356528,356559],"yaml":true},{"content":"Invokes a projection function on each element of a generic <xref href=\"System.Linq.IQueryable`1\"></xref> and returns the minimum resulting value.","nodes":[{"pos":[0,145],"content":"Invokes a projection function on each element of a generic <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> and returns the minimum resulting value.","source":"Invokes a projection function on each element of a generic <xref href=\"System.Linq.IQueryable`1\"></xref> and returns the minimum resulting value."}],"pos":[358155,358301],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element in `source` and returns the minimum value.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1064],"content":"The <xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,454],"source":"The <xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[455,766],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1071,1507],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element in `source` and returns the minimum value.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,325],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it invokes <ph id=\"ph1\">`selector`</ph> on each element in <ph id=\"ph2\">`source`</ph> and returns the minimum value.","pos":[326,436],"source":" The expected behavior is that it invokes `selector` on each element in `source` and returns the minimum value."}]}],"pos":[358312,359826],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the minimum of.","nodes":[{"pos":[0,49],"content":"A sequence of values to determine the minimum of.","nodes":[{"content":"A sequence of values to determine the minimum of.","pos":[0,49]}]}],"pos":[360670,360720],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[360835,360883],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[360940,360989],"yaml":true},{"content":"The type of the value returned by the function represented by <code>selector</code>.","nodes":[{"pos":[0,84],"content":"The type of the value returned by the function represented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">selector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the value returned by the function represented by <code>selector</code>."}],"pos":[361026,361111],"yaml":true},{"content":"The minimum value in the sequence.","nodes":[{"pos":[0,34],"content":"The minimum value in the sequence.","nodes":[{"content":"The minimum value in the sequence.","pos":[0,34]}]}],"pos":[361162,361197],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[361355,361411],"yaml":true},{"content":"Returns the minimum value of a generic <xref href=\"System.Linq.IQueryable`1\"></xref>.","nodes":[{"pos":[0,85],"content":"Returns the minimum value of a generic <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the minimum value of a generic <xref href=\"System.Linq.IQueryable`1\"></xref>."}],"pos":[362685,362771],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the minimum value in `source`.","nodes":[{"pos":[0,612],"content":"The <xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,300],"source":"The <xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[301,612],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[619,939],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the minimum value in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,248],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the minimum value in <ph id=\"ph1\">`source`</ph>.","pos":[249,320],"source":" The expected behavior is that it returns the minimum value in `source`."}]}],"pos":[362782,363726],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to determine the minimum of.","nodes":[{"pos":[0,49],"content":"A sequence of values to determine the minimum of.","nodes":[{"content":"A sequence of values to determine the minimum of.","pos":[0,49]}]}],"pos":[364397,364447],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[364504,364553],"yaml":true},{"content":"The minimum value in the sequence.","nodes":[{"pos":[0,34],"content":"The minimum value in the sequence.","nodes":[{"content":"The minimum value in the sequence.","pos":[0,34]}]}],"pos":[364604,364639],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[364797,364828],"yaml":true},{"content":"Filters the elements of an <xref href=\"System.Linq.IQueryable\"></xref> based on a specified type.","nodes":[{"pos":[0,97],"content":"Filters the elements of an <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable\"&gt;&lt;/xref&gt;</ph> based on a specified type.","source":"Filters the elements of an <xref href=\"System.Linq.IQueryable\"></xref> based on a specified type."}],"pos":[366100,366198],"yaml":true},{"content":"The `OfType` method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling `OfType` itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling `OfType` depends on the implementation of the type of the `source` parameter. The expected behavior is that it filters out any elements in `source` that are not of type `TResult`.","nodes":[{"pos":[0,465],"content":"The `OfType` method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling `OfType` itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">`OfType`</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">`OfType`</ph> itself as a constructed generic method.","pos":[0,156],"source":"The `OfType` method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling `OfType` itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[157,465],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[472,750],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling `OfType` depends on the implementation of the type of the `source` parameter. The expected behavior is that it filters out any elements in `source` that are not of type `TResult`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">`OfType`</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,176],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling `OfType` depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it filters out any elements in <ph id=\"ph1\">`source`</ph> that are not of type <ph id=\"ph2\">`TResult`</ph>.","pos":[177,278],"source":" The expected behavior is that it filters out any elements in `source` that are not of type `TResult`."}]}],"pos":[366209,366964],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable\"></xref> whose elements to filter.","nodes":[{"pos":[0,72],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable\"&gt;&lt;/xref&gt;</ph> whose elements to filter.","source":"An <xref href=\"System.Linq.IQueryable\"></xref> whose elements to filter."}],"pos":[367677,367750],"yaml":true},{"content":"The type to filter the elements of the sequence on.","nodes":[{"pos":[0,51],"content":"The type to filter the elements of the sequence on.","nodes":[{"content":"The type to filter the elements of the sequence on.","pos":[0,51]}]}],"pos":[367807,367859],"yaml":true},{"content":"A collection that contains the elements from <code>source</code> that have type <code>TResult</code>.","nodes":[{"pos":[0,101],"content":"A collection that contains the elements from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> that have type <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">TResult</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A collection that contains the elements from <code>source</code> that have type <code>TResult</code>."}],"pos":[367934,368036],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[368197,368228],"yaml":true},{"content":"Sorts the elements of a sequence in ascending order by using a specified comparer.","nodes":[{"pos":[0,82],"content":"Sorts the elements of a sequence in ascending order by using a specified comparer.","nodes":[{"content":"Sorts the elements of a sequence in ascending order by using a specified comparer.","pos":[0,82]}]}],"pos":[370007,370090],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it sorts the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`. The `comparer` parameter is used to compare keys.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1366],"content":"The <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,566],"source":"The <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[567,882],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."},{"content":"The result of calling <ph id=\"ph1\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id=\"ph2\">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.","pos":[883,1068],"source":" The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned."}]},{"pos":[1373,1949],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it sorts the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`. The `comparer` parameter is used to compare keys.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,381],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it sorts the elements of <ph id=\"ph1\">`source`</ph> based on the key obtained by invoking <ph id=\"ph2\">`keySelector`</ph> on each element of <ph id=\"ph3\">`source`</ph>.","pos":[382,526],"source":" The expected behavior is that it sorts the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`."},{"content":"The <ph id=\"ph1\">`comparer`</ph> parameter is used to compare keys.","pos":[527,576],"source":" The `comparer` parameter is used to compare keys."}]}],"pos":[370101,372057],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to order.","nodes":[{"pos":[0,30],"content":"A sequence of values to order.","nodes":[{"content":"A sequence of values to order.","pos":[0,30]}]}],"pos":[372419,372450],"yaml":true},{"content":"A function to extract a key from an element.","nodes":[{"pos":[0,44],"content":"A function to extract a key from an element.","nodes":[{"content":"A function to extract a key from an element.","pos":[0,44]}]}],"pos":[372565,372610],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys.","nodes":[{"pos":[0,79],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph> to compare keys.","source":"An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys."}],"pos":[372703,372783],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[372840,372889],"yaml":true},{"content":"The type of the key returned by the function that is represented by <code>keySelector</code>.","nodes":[{"pos":[0,93],"content":"The type of the key returned by the function that is represented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by the function that is represented by <code>keySelector</code>."}],"pos":[372923,373017],"yaml":true},{"content":"An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> whose elements are sorted according to a key.","nodes":[{"pos":[0,101],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements are sorted according to a key.","source":"An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> whose elements are sorted according to a key."}],"pos":[373099,373201],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> or <code>comparer</code> is `null`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;comparer&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> or <code>comparer</code> is `null`."}],"pos":[373363,373447],"yaml":true},{"content":"Sorts the elements of a sequence in ascending order according to a key.","nodes":[{"pos":[0,71],"content":"Sorts the elements of a sequence in ascending order according to a key.","nodes":[{"content":"Sorts the elements of a sequence in ascending order according to a key.","pos":[0,71]}]}],"pos":[375049,375121],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it sorts the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1262],"content":"The <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,462],"source":"The <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[463,778],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."},{"content":"The result of calling <ph id=\"ph1\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id=\"ph2\">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.","pos":[779,964],"source":" The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned."}]},{"pos":[1269,1743],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it sorts the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,329],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it sorts the elements of <ph id=\"ph1\">`source`</ph> based on the key obtained by invoking <ph id=\"ph2\">`keySelector`</ph> on each element of <ph id=\"ph3\">`source`</ph>.","pos":[330,474],"source":" The expected behavior is that it sorts the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`."}]}],"pos":[375132,376882],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to order.","nodes":[{"pos":[0,30],"content":"A sequence of values to order.","nodes":[{"content":"A sequence of values to order.","pos":[0,30]}]}],"pos":[377732,377763],"yaml":true},{"content":"A function to extract a key from an element.","nodes":[{"pos":[0,44],"content":"A function to extract a key from an element.","nodes":[{"content":"A function to extract a key from an element.","pos":[0,44]}]}],"pos":[377878,377923],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[377980,378029],"yaml":true},{"content":"The type of the key returned by the function that is represented by <code>keySelector</code>.","nodes":[{"pos":[0,93],"content":"The type of the key returned by the function that is represented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by the function that is represented by <code>keySelector</code>."}],"pos":[378063,378157],"yaml":true},{"content":"An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> whose elements are sorted according to a key.","nodes":[{"pos":[0,101],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements are sorted according to a key.","source":"An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> whose elements are sorted according to a key."}],"pos":[378239,378341],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> is `null`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> is `null`."}],"pos":[378503,378562],"yaml":true},{"content":"Sorts the elements of a sequence in descending order according to a key.","nodes":[{"pos":[0,72],"content":"Sorts the elements of a sequence in descending order according to a key.","nodes":[{"content":"Sorts the elements of a sequence in descending order according to a key.","pos":[0,72]}]}],"pos":[380202,380275],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it sorts the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1282],"content":"The <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,482],"source":"The <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[483,798],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."},{"content":"The result of calling <ph id=\"ph1\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id=\"ph2\">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.","pos":[799,984],"source":" The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned."}]},{"pos":[1289,1794],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it sorts the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,339],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it sorts the elements of <ph id=\"ph1\">`source`</ph> in descending order, based on the key obtained by invoking <ph id=\"ph2\">`keySelector`</ph> on each element of <ph id=\"ph3\">`source`</ph>.","pos":[340,505],"source":" The expected behavior is that it sorts the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`."}]}],"pos":[380286,382087],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to order.","nodes":[{"pos":[0,30],"content":"A sequence of values to order.","nodes":[{"content":"A sequence of values to order.","pos":[0,30]}]}],"pos":[382406,382437],"yaml":true},{"content":"A function to extract a key from an element.","nodes":[{"pos":[0,44],"content":"A function to extract a key from an element.","nodes":[{"content":"A function to extract a key from an element.","pos":[0,44]}]}],"pos":[382552,382597],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[382654,382703],"yaml":true},{"content":"The type of the key returned by the function that is represented by <code>keySelector</code>.","nodes":[{"pos":[0,93],"content":"The type of the key returned by the function that is represented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by the function that is represented by <code>keySelector</code>."}],"pos":[382737,382831],"yaml":true},{"content":"An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> whose elements are sorted in descending order according to a key.","nodes":[{"pos":[0,121],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements are sorted in descending order according to a key.","source":"An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> whose elements are sorted in descending order according to a key."}],"pos":[382913,383035],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> is `null`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> is `null`."}],"pos":[383207,383266],"yaml":true},{"content":"Sorts the elements of a sequence in descending order by using a specified comparer.","nodes":[{"pos":[0,83],"content":"Sorts the elements of a sequence in descending order by using a specified comparer.","nodes":[{"content":"Sorts the elements of a sequence in descending order by using a specified comparer.","pos":[0,83]}]}],"pos":[385105,385189],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it sorts the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`. The `comparer` parameter is used to compare keys.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1386],"content":"The <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,586],"source":"The <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[587,902],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."},{"content":"The result of calling <ph id=\"ph1\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id=\"ph2\">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.","pos":[903,1088],"source":" The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned."}]},{"pos":[1393,2000],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it sorts the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`. The `comparer` parameter is used to compare keys.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,391],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it sorts the elements of <ph id=\"ph1\">`source`</ph> in descending order, based on the key obtained by invoking <ph id=\"ph2\">`keySelector`</ph> on each element of <ph id=\"ph3\">`source`</ph>.","pos":[392,557],"source":" The expected behavior is that it sorts the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`."},{"content":"The <ph id=\"ph1\">`comparer`</ph> parameter is used to compare keys.","pos":[558,607],"source":" The `comparer` parameter is used to compare keys."}]}],"pos":[385200,387207],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to order.","nodes":[{"pos":[0,30],"content":"A sequence of values to order.","nodes":[{"content":"A sequence of values to order.","pos":[0,30]}]}],"pos":[388229,388260],"yaml":true},{"content":"A function to extract a key from an element.","nodes":[{"pos":[0,44],"content":"A function to extract a key from an element.","nodes":[{"content":"A function to extract a key from an element.","pos":[0,44]}]}],"pos":[388375,388420],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys.","nodes":[{"pos":[0,79],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph> to compare keys.","source":"An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys."}],"pos":[388513,388593],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[388650,388699],"yaml":true},{"content":"The type of the key returned by the function that is represented by <code>keySelector</code>.","nodes":[{"pos":[0,93],"content":"The type of the key returned by the function that is represented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by the function that is represented by <code>keySelector</code>."}],"pos":[388733,388827],"yaml":true},{"content":"An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> whose elements are sorted in descending order according to a key.","nodes":[{"pos":[0,121],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements are sorted in descending order according to a key.","source":"An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> whose elements are sorted in descending order according to a key."}],"pos":[388909,389031],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> or <code>comparer</code> is `null`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;comparer&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> or <code>comparer</code> is `null`."}],"pos":[389203,389287],"yaml":true},{"content":"Inverts the order of the elements in a sequence.","nodes":[{"pos":[0,48],"content":"Inverts the order of the elements in a sequence.","nodes":[{"content":"Inverts the order of the elements in a sequence.","pos":[0,48]}]}],"pos":[391775,391824],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it reverses the order of the elements in `source`.","nodes":[{"pos":[0,624],"content":"The <xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,308],"source":"The <xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[309,624],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[631,964],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it reverses the order of the elements in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,252],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it reverses the order of the elements in <ph id=\"ph1\">`source`</ph>.","pos":[253,333],"source":" The expected behavior is that it reverses the order of the elements in `source`."}]}],"pos":[391835,392804],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to reverse.","nodes":[{"pos":[0,32],"content":"A sequence of values to reverse.","nodes":[{"content":"A sequence of values to reverse.","pos":[0,32]}]}],"pos":[393507,393540],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[393597,393646],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements correspond to those of the input sequence in reverse order.","nodes":[{"pos":[0,123],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements correspond to those of the input sequence in reverse order.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements correspond to those of the input sequence in reverse order."}],"pos":[393721,393845],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[394007,394038],"yaml":true},{"content":"Projects each element of a sequence into a new form by incorporating the element's index.","nodes":[{"pos":[0,89],"content":"Projects each element of a sequence into a new form by incorporating the element's index.","nodes":[{"content":"Projects each element of a sequence into a new form by incorporating the element's index.","pos":[0,89]}]}],"pos":[395709,395799],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29> depend on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` to project it into a different form.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1097],"content":"The <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,490],"source":"The <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[491,799],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1104,1563],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29> depend on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` to project it into a different form.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29&gt;</ph> depend on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,342],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29> depend on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it invokes <ph id=\"ph1\">`selector`</ph> on each element of <ph id=\"ph2\">`source`</ph> to project it into a different form.","pos":[343,459],"source":" The expected behavior is that it invokes `selector` on each element of `source` to project it into a different form."}]}],"pos":[395810,397380],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to project.","nodes":[{"pos":[0,32],"content":"A sequence of values to project.","nodes":[{"content":"A sequence of values to project.","pos":[0,32]}]}],"pos":[398301,398334],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[398462,398510],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[398567,398616],"yaml":true},{"content":"The type of the value returned by the function represented by <code>selector</code>.","nodes":[{"pos":[0,84],"content":"The type of the value returned by the function represented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">selector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the value returned by the function represented by <code>selector</code>."}],"pos":[398653,398738],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements are the result of invoking a projection function on each element of <code>source</code>.","nodes":[{"pos":[0,152],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements are the result of invoking a projection function on each element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements are the result of invoking a projection function on each element of <code>source</code>."}],"pos":[398813,398966],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[399127,399183],"yaml":true},{"content":"Projects each element of a sequence into a new form.","nodes":[{"pos":[0,52],"content":"Projects each element of a sequence into a new form.","nodes":[{"content":"Projects each element of a sequence into a new form.","pos":[0,52]}]}],"pos":[400797,400850],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` to project it into a different form.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1067],"content":"The <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,460],"source":"The <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[461,769],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1074,1519],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` to project it into a different form.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,328],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it invokes <ph id=\"ph1\">`selector`</ph> on each element of <ph id=\"ph2\">`source`</ph> to project it into a different form.","pos":[329,445],"source":" The expected behavior is that it invokes `selector` on each element of `source` to project it into a different form."}]}],"pos":[400861,402387],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to project.","nodes":[{"pos":[0,32],"content":"A sequence of values to project.","nodes":[{"content":"A sequence of values to project.","pos":[0,32]}]}],"pos":[403233,403266],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[403381,403429],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[403486,403535],"yaml":true},{"content":"The type of the value returned by the function represented by <code>selector</code>.","nodes":[{"pos":[0,84],"content":"The type of the value returned by the function represented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">selector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the value returned by the function represented by <code>selector</code>."}],"pos":[403572,403657],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements are the result of invoking a projection function on each element of <code>source</code>.","nodes":[{"pos":[0,152],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements are the result of invoking a projection function on each element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements are the result of invoking a projection function on each element of <code>source</code>."}],"pos":[403732,403885],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[404046,404102],"yaml":true},{"content":"Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that incorporates the index of the source element that produced it. A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.","nodes":[{"pos":[0,348],"content":"Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that incorporates the index of the source element that produced it. A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.","nodes":[{"content":"Projects each element of a sequence to an <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> that incorporates the index of the source element that produced it.","pos":[0,171],"source":"Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that incorporates the index of the source element that produced it."},{"content":"A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.","pos":[172,348]}]}],"pos":[406328,406677],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `collectionSelector` on each element of `source` to project it into an enumerable form. Each enumerable result incorporates the source element's index. Then the function represented by `resultSelector` is invoked on each element in each intermediate sequence. The resulting values are concatenated into a single, one-dimensional sequence.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1367],"content":"The <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,760],"source":"The <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[761,1069],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1374,2232],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `collectionSelector` on each element of `source` to project it into an enumerable form. Each enumerable result incorporates the source element's index. Then the function represented by `resultSelector` is invoked on each element in each intermediate sequence. The resulting values are concatenated into a single, one-dimensional sequence.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,478],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it invokes <ph id=\"ph1\">`collectionSelector`</ph> on each element of <ph id=\"ph2\">`source`</ph> to project it into an enumerable form.","pos":[479,607],"source":" The expected behavior is that it invokes `collectionSelector` on each element of `source` to project it into an enumerable form."},{"content":"Each enumerable result incorporates the source element's index.","pos":[608,671]},{"content":"Then the function represented by <ph id=\"ph1\">`resultSelector`</ph> is invoked on each element in each intermediate sequence.","pos":[672,779],"source":" Then the function represented by `resultSelector` is invoked on each element in each intermediate sequence."},{"content":"The resulting values are concatenated into a single, one-dimensional sequence.","pos":[780,858]}]}],"pos":[406688,408927],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to project.","nodes":[{"pos":[0,32],"content":"A sequence of values to project.","nodes":[{"content":"A sequence of values to project.","pos":[0,32]}]}],"pos":[409391,409424],"yaml":true},{"content":"A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.","nodes":[{"pos":[0,151],"content":"A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.","nodes":[{"content":"A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.","pos":[0,151]}]}],"pos":[409606,409758],"yaml":true},{"content":"A projection function to apply to each element of each intermediate sequence.","nodes":[{"pos":[0,77],"content":"A projection function to apply to each element of each intermediate sequence.","nodes":[{"content":"A projection function to apply to each element of each intermediate sequence.","pos":[0,77]}]}],"pos":[409891,409969],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[410026,410075],"yaml":true},{"content":"The type of the intermediate elements collected by the function represented by <code>collectionSelector</code>.","nodes":[{"pos":[0,111],"content":"The type of the intermediate elements collected by the function represented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collectionSelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the intermediate elements collected by the function represented by <code>collectionSelector</code>."}],"pos":[410116,410228],"yaml":true},{"content":"The type of the elements of the resulting sequence.","nodes":[{"pos":[0,51],"content":"The type of the elements of the resulting sequence.","nodes":[{"content":"The type of the elements of the resulting sequence.","pos":[0,51]}]}],"pos":[410265,410317],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements are the result of invoking the one-to-many projection function <code>collectionSelector</code> on each element of <code>source</code> and then mapping each of those sequence elements and their corresponding <code>source</code> element to a result element.","nodes":[{"pos":[0,319],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements are the result of invoking the one-to-many projection function <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">collectionSelector</ph><ept id=\"p1\">&lt;/code&gt;</ept> on each element of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> and then mapping each of those sequence elements and their corresponding <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">source</ph><ept id=\"p3\">&lt;/code&gt;</ept> element to a result element.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements are the result of invoking the one-to-many projection function <code>collectionSelector</code> on each element of <code>source</code> and then mapping each of those sequence elements and their corresponding <code>source</code> element to a result element."}],"pos":[410392,410712],"yaml":true},{"content":"<code>source</code> or <code>collectionSelector</code> or <code>resultSelector</code> is `null`.","nodes":[{"pos":[0,96],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;collectionSelector&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;resultSelector&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>source</code> or <code>collectionSelector</code> or <code>resultSelector</code> is `null`."}],"pos":[410877,410974],"yaml":true},{"content":"Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.","nodes":[{"pos":[0,287],"content":"Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.","nodes":[{"content":"Projects each element of a sequence to an <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> and invokes a result selector function on each element therein.","pos":[0,167],"source":"Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> and invokes a result selector function on each element therein."},{"content":"The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.","pos":[168,287]}]}],"pos":[413143,413431],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `collectionSelector` on each element of `source` to project it into an enumerable form. Then the function represented by `resultSelector` is invoked on each element in each intermediate sequence. The resulting values are concatenated into a single, one-dimensional sequence.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1337],"content":"The <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,730],"source":"The <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[731,1039],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1344,2123],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `collectionSelector` on each element of `source` to project it into an enumerable form. Then the function represented by `resultSelector` is invoked on each element in each intermediate sequence. The resulting values are concatenated into a single, one-dimensional sequence.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,463],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it invokes <ph id=\"ph1\">`collectionSelector`</ph> on each element of <ph id=\"ph2\">`source`</ph> to project it into an enumerable form.","pos":[464,592],"source":" The expected behavior is that it invokes `collectionSelector` on each element of `source` to project it into an enumerable form."},{"content":"Then the function represented by <ph id=\"ph1\">`resultSelector`</ph> is invoked on each element in each intermediate sequence.","pos":[593,700],"source":" Then the function represented by `resultSelector` is invoked on each element in each intermediate sequence."},{"content":"The resulting values are concatenated into a single, one-dimensional sequence.","pos":[701,779]}]}],"pos":[413442,415572],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to project.","nodes":[{"pos":[0,32],"content":"A sequence of values to project.","nodes":[{"content":"A sequence of values to project.","pos":[0,32]}]}],"pos":[416886,416919],"yaml":true},{"content":"A projection function to apply to each element of the input sequence.","nodes":[{"pos":[0,69],"content":"A projection function to apply to each element of the input sequence.","nodes":[{"content":"A projection function to apply to each element of the input sequence.","pos":[0,69]}]}],"pos":[417088,417158],"yaml":true},{"content":"A projection function to apply to each element of each intermediate sequence.","nodes":[{"pos":[0,77],"content":"A projection function to apply to each element of each intermediate sequence.","nodes":[{"content":"A projection function to apply to each element of each intermediate sequence.","pos":[0,77]}]}],"pos":[417291,417369],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[417426,417475],"yaml":true},{"content":"The type of the intermediate elements collected by the function represented by <code>collectionSelector</code>.","nodes":[{"pos":[0,111],"content":"The type of the intermediate elements collected by the function represented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collectionSelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the intermediate elements collected by the function represented by <code>collectionSelector</code>."}],"pos":[417516,417628],"yaml":true},{"content":"The type of the elements of the resulting sequence.","nodes":[{"pos":[0,51],"content":"The type of the elements of the resulting sequence.","nodes":[{"content":"The type of the elements of the resulting sequence.","pos":[0,51]}]}],"pos":[417665,417717],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements are the result of invoking the one-to-many projection function <code>collectionSelector</code> on each element of <code>source</code> and then mapping each of those sequence elements and their corresponding <code>source</code> element to a result element.","nodes":[{"pos":[0,319],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements are the result of invoking the one-to-many projection function <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">collectionSelector</ph><ept id=\"p1\">&lt;/code&gt;</ept> on each element of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> and then mapping each of those sequence elements and their corresponding <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">source</ph><ept id=\"p3\">&lt;/code&gt;</ept> element to a result element.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements are the result of invoking the one-to-many projection function <code>collectionSelector</code> on each element of <code>source</code> and then mapping each of those sequence elements and their corresponding <code>source</code> element to a result element."}],"pos":[417792,418112],"yaml":true},{"content":"<code>source</code> or <code>collectionSelector</code> or <code>resultSelector</code> is `null`.","nodes":[{"pos":[0,96],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;collectionSelector&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;resultSelector&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>source</code> or <code>collectionSelector</code> or <code>resultSelector</code> is `null`."}],"pos":[418277,418374],"yaml":true},{"content":"Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> and combines the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.","nodes":[{"pos":[0,239],"content":"Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> and combines the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.","nodes":[{"content":"Projects each element of a sequence to an <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> and combines the resulting sequences into one sequence.","pos":[0,159],"source":"Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> and combines the resulting sequences into one sequence."},{"content":"The index of each source element is used in the projected form of that element.","pos":[160,239]}]}],"pos":[420228,420468],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` to project it into an enumerable form. Each enumerable result incorporates the index of the source element. It then concatenates the enumerable results into a single, one-dimensional sequence.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1193],"content":"The <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,586],"source":"The <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[587,895],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1200,1864],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` to project it into an enumerable form. Each enumerable result incorporates the index of the source element. It then concatenates the enumerable results into a single, one-dimensional sequence.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,391],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it invokes <ph id=\"ph1\">`selector`</ph> on each element of <ph id=\"ph2\">`source`</ph> to project it into an enumerable form.","pos":[392,510],"source":" The expected behavior is that it invokes `selector` on each element of `source` to project it into an enumerable form."},{"content":"Each enumerable result incorporates the index of the source element.","pos":[511,579]},{"content":"It then concatenates the enumerable results into a single, one-dimensional sequence.","pos":[580,664]}]}],"pos":[420479,422350],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to project.","nodes":[{"pos":[0,32],"content":"A sequence of values to project.","nodes":[{"content":"A sequence of values to project.","pos":[0,32]}]}],"pos":[423361,423394],"yaml":true},{"content":"A projection function to apply to each element; the second parameter of this function represents the index of the source element.","nodes":[{"pos":[0,129],"content":"A projection function to apply to each element; the second parameter of this function represents the index of the source element.","nodes":[{"content":"A projection function to apply to each element; the second parameter of this function represents the index of the source element.","pos":[0,129]}]}],"pos":[423562,423692],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[423749,423798],"yaml":true},{"content":"The type of the elements of the sequence returned by the function represented by <code>selector</code>.","nodes":[{"pos":[0,103],"content":"The type of the elements of the sequence returned by the function represented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">selector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of the sequence returned by the function represented by <code>selector</code>."}],"pos":[423835,423939],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.","nodes":[{"pos":[0,163],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence."}],"pos":[424014,424178],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[424343,424399],"yaml":true},{"content":"Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> and combines the resulting sequences into one sequence.","nodes":[{"pos":[0,159],"content":"Projects each element of a sequence to an <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> and combines the resulting sequences into one sequence.","source":"Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> and combines the resulting sequences into one sequence."}],"pos":[426196,426356],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` to project it into an enumerable form. It then concatenates the enumerable results into a single, one-dimensional sequence.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1163],"content":"The <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,556],"source":"The <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[557,865],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1170,1750],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` to project it into an enumerable form. It then concatenates the enumerable results into a single, one-dimensional sequence.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,376],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it invokes <ph id=\"ph1\">`selector`</ph> on each element of <ph id=\"ph2\">`source`</ph> to project it into an enumerable form.","pos":[377,495],"source":" The expected behavior is that it invokes `selector` on each element of `source` to project it into an enumerable form."},{"content":"It then concatenates the enumerable results into a single, one-dimensional sequence.","pos":[496,580]}]}],"pos":[426367,428124],"yaml":true,"extradata":"MT"},{"content":"A sequence of values to project.","nodes":[{"pos":[0,32],"content":"A sequence of values to project.","nodes":[{"content":"A sequence of values to project.","pos":[0,32]}]}],"pos":[429075,429108],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[429263,429311],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[429368,429417],"yaml":true},{"content":"The type of the elements of the sequence returned by the function represented by <code>selector</code>.","nodes":[{"pos":[0,103],"content":"The type of the elements of the sequence returned by the function represented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">selector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of the sequence returned by the function represented by <code>selector</code>."}],"pos":[429454,429558],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.","nodes":[{"pos":[0,163],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence."}],"pos":[429633,429797],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[429962,430018],"yaml":true},{"content":"Determines whether two sequences are equal by using the default equality comparer to compare elements.","nodes":[{"pos":[0,102],"content":"Determines whether two sequences are equal by using the default equality comparer to compare elements.","nodes":[{"content":"Determines whether two sequences are equal by using the default equality comparer to compare elements.","pos":[0,102]}]}],"pos":[431572,431675],"yaml":true},{"content":"The <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that it determines if the two source sequences are equal.","nodes":[{"pos":[0,741],"content":"The <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,428],"source":"The <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source1`</ph> parameter.","pos":[429,741],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter."}]},{"pos":[748,1144],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that it determines if the two source sequences are equal.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source1`</ph> parameter.","pos":[0,313],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter."},{"content":"The expected behavior is that it determines if the two source sequences are equal.","pos":[314,396]}]}],"pos":[431686,432835],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to compare to those of <code>source2</code>.","nodes":[{"pos":[0,108],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements to compare to those of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source2</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to compare to those of <code>source2</code>."}],"pos":[434030,434139],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to compare to those of the first sequence.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements to compare to those of the first sequence.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to compare to those of the first sequence."}],"pos":[434236,434359],"yaml":true},{"content":"The type of the elements of the input sequences.","nodes":[{"pos":[0,48],"content":"The type of the elements of the input sequences.","nodes":[{"content":"The type of the elements of the input sequences.","pos":[0,48]}]}],"pos":[434416,434465],"yaml":true},{"content":"`true` if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, `false`.","nodes":[{"pos":[0,122],"content":"<ph id=\"ph1\">`true`</ph> if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, `false`."}],"pos":[434523,434648],"yaml":true},{"content":"<code>source1</code> or <code>source2</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source1&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;source2&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source1</code> or <code>source2</code> is `null`."}],"pos":[434816,434872],"yaml":true},{"content":"Determines whether two sequences are equal by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare elements.","nodes":[{"pos":[0,152],"content":"Determines whether two sequences are equal by using a specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare elements.","source":"Determines whether two sequences are equal by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare elements."}],"pos":[436638,436791],"yaml":true},{"content":"The <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that it determines if the two source sequences are equal by using `comparer` to compare elements.","nodes":[{"pos":[0,861],"content":"The <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,548],"source":"The <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source1`</ph> parameter.","pos":[549,861],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter."}]},{"pos":[868,1364],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that it determines if the two source sequences are equal by using `comparer` to compare elements.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source1`</ph> parameter.","pos":[0,373],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter."},{"content":"The expected behavior is that it determines if the two source sequences are equal by using <ph id=\"ph1\">`comparer`</ph> to compare elements.","pos":[374,496],"source":" The expected behavior is that it determines if the two source sequences are equal by using `comparer` to compare elements."}]}],"pos":[436802,438171],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to compare to those of <code>source2</code>.","nodes":[{"pos":[0,108],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements to compare to those of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source2</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to compare to those of <code>source2</code>."}],"pos":[438502,438611],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to compare to those of the first sequence.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> whose elements to compare to those of the first sequence.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to compare to those of the first sequence."}],"pos":[438708,438831],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to use to compare elements.","nodes":[{"pos":[0,98],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to use to compare elements.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to use to compare elements."}],"pos":[438935,439034],"yaml":true},{"content":"The type of the elements of the input sequences.","nodes":[{"pos":[0,48],"content":"The type of the elements of the input sequences.","nodes":[{"content":"The type of the elements of the input sequences.","pos":[0,48]}]}],"pos":[439091,439140],"yaml":true},{"content":"`true` if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, `false`.","nodes":[{"pos":[0,122],"content":"<ph id=\"ph1\">`true`</ph> if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, `false`."}],"pos":[439198,439323],"yaml":true},{"content":"<code>source1</code> or <code>source2</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source1&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;source2&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source1</code> or <code>source2</code> is `null`."}],"pos":[439491,439547],"yaml":true},{"content":"Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.","nodes":[{"pos":[0,116],"content":"Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.","nodes":[{"content":"Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.","pos":[0,116]}]}],"pos":[440861,440978],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the only element in `source`.","nodes":[{"pos":[0,618],"content":"The <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,306],"source":"The <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[307,618],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[625,947],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the only element in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,251],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the only element in <ph id=\"ph1\">`source`</ph>.","pos":[252,322],"source":" The expected behavior is that it returns the only element in `source`."}]}],"pos":[440989,441941],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the single element of.","nodes":[{"pos":[0,81],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to return the single element of.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the single element of."}],"pos":[442612,442694],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[442751,442800],"yaml":true},{"content":"The single element of the input sequence.","nodes":[{"pos":[0,41],"content":"The single element of the input sequence.","nodes":[{"content":"The single element of the input sequence.","pos":[0,41]}]}],"pos":[442851,442893],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[443054,443085],"yaml":true},{"content":"<code>source</code> has more than one element.","nodes":[{"pos":[0,46],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> has more than one element.","source":"<code>source</code> has more than one element."}],"pos":[443195,443242],"yaml":true},{"content":"Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.","nodes":[{"pos":[0,138],"content":"Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.","nodes":[{"content":"Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.","pos":[0,138]}]}],"pos":[444865,445004],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the only element in `source` that satisfies the condition specified by `predicate`.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1084],"content":"The <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,474],"source":"The <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[475,786],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1091,1551],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the only element in `source` that satisfies the condition specified by `predicate`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,335],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the only element in <ph id=\"ph1\">`source`</ph> that satisfies the condition specified by <ph id=\"ph2\">`predicate`</ph>.","pos":[336,460],"source":" The expected behavior is that it returns the only element in `source` that satisfies the condition specified by `predicate`."}]}],"pos":[445015,446573],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return a single element from.","nodes":[{"pos":[0,81],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to return a single element from.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return a single element from."}],"pos":[447421,447503],"yaml":true},{"content":"A function to test an element for a condition.","nodes":[{"pos":[0,46],"content":"A function to test an element for a condition.","nodes":[{"content":"A function to test an element for a condition.","pos":[0,46]}]}],"pos":[447626,447673],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[447730,447779],"yaml":true},{"content":"The single element of the input sequence that satisfies the condition in <code>predicate</code>.","nodes":[{"pos":[0,96],"content":"The single element of the input sequence that satisfies the condition in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The single element of the input sequence that satisfies the condition in <code>predicate</code>."}],"pos":[447830,447927],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[448088,448145],"yaml":true},{"content":"No element satisfies the condition in <code>predicate</code>.  \n  \n -or-  \n  \n More than one element satisfies the condition in <code>predicate</code>.  \n  \n -or-  \n  \n The source sequence is empty.","nodes":[{"pos":[0,61],"content":"No element satisfies the condition in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"No element satisfies the condition in <code>predicate</code>."},{"pos":[68,72],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[79,151],"content":"More than one element satisfies the condition in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"More than one element satisfies the condition in <code>predicate</code>."},{"pos":[158,162],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[169,198],"content":"The source sequence is empty.","nodes":[{"content":"The source sequence is empty.","pos":[0,29]}]}],"pos":[448255,448464],"yaml":true},{"content":"Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.","nodes":[{"pos":[0,167],"content":"Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.","nodes":[{"content":"Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.","pos":[0,167]}]}],"pos":[449832,450000],"yaml":true},{"content":"The <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the only element in `source`, or a default value if `source` is empty.  \n  \n The <xref:System.Linq.Queryable.SingleOrDefault%2A> method does not provide a way to specify a default value. If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.","nodes":[{"pos":[0,636],"content":"The <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,324],"source":"The <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[325,636],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[643,1015],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the only element in `source`, or a default value if `source` is empty.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,260],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the only element in <ph id=\"ph1\">`source`</ph>, or a default value if <ph id=\"ph2\">`source`</ph> is empty.","pos":[261,372],"source":" The expected behavior is that it returns the only element in `source`, or a default value if `source` is empty."}]},{"pos":[1022,1355],"content":"The <xref:System.Linq.Queryable.SingleOrDefault%2A> method does not provide a way to specify a default value. If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.SingleOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.","pos":[0,109],"source":"The <xref:System.Linq.Queryable.SingleOrDefault%2A> method does not provide a way to specify a default value."},{"content":"If you want to specify a default value other than <ph id=\"ph1\">`default(TSource)`</ph>, use the <ph id=\"ph2\">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.","pos":[110,333],"source":" If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method as described in the Example section."}]}],"pos":[450011,451373],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the single element of.","nodes":[{"pos":[0,81],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to return the single element of.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the single element of."}],"pos":[453646,453728],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[453785,453834],"yaml":true},{"content":"The single element of the input sequence, or <code>default</code>(<code>TSource</code>) if the sequence contains no elements.","nodes":[{"pos":[0,125],"content":"The single element of the input sequence, or <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">default</ph><ept id=\"p1\">&lt;/code&gt;</ept>(<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">TSource</ph><ept id=\"p2\">&lt;/code&gt;</ept>) if the sequence contains no elements.","source":"The single element of the input sequence, or <code>default</code>(<code>TSource</code>) if the sequence contains no elements."}],"pos":[453885,454011],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[454181,454212],"yaml":true},{"content":"<code>source</code> has more than one element.","nodes":[{"pos":[0,46],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> has more than one element.","source":"<code>source</code> has more than one element."}],"pos":[454322,454369],"yaml":true},{"content":"Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.","nodes":[{"pos":[0,203],"content":"Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.","nodes":[{"content":"Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.","pos":[0,203]}]}],"pos":[456046,456250],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the only element in `source` that satisfies the condition specified by `predicate`, or a default value if no such element exists.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1102],"content":"The <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,492],"source":"The <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[493,804],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1109,1624],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the only element in `source` that satisfies the condition specified by `predicate`, or a default value if no such element exists.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,344],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the only element in <ph id=\"ph1\">`source`</ph> that satisfies the condition specified by <ph id=\"ph2\">`predicate`</ph>, or a default value if no such element exists.","pos":[345,515],"source":" The expected behavior is that it returns the only element in `source` that satisfies the condition specified by `predicate`, or a default value if no such element exists."}]}],"pos":[456261,457892],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return a single element from.","nodes":[{"pos":[0,81],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to return a single element from.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return a single element from."}],"pos":[459079,459161],"yaml":true},{"content":"A function to test an element for a condition.","nodes":[{"pos":[0,46],"content":"A function to test an element for a condition.","nodes":[{"content":"A function to test an element for a condition.","pos":[0,46]}]}],"pos":[459284,459331],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[459388,459437],"yaml":true},{"content":"The single element of the input sequence that satisfies the condition in <code>predicate</code>, or <code>default</code>(<code>TSource</code>) if no such element is found.","nodes":[{"pos":[0,171],"content":"The single element of the input sequence that satisfies the condition in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">default</ph><ept id=\"p2\">&lt;/code&gt;</ept>(<bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">TSource</ph><ept id=\"p3\">&lt;/code&gt;</ept>) if no such element is found.","source":"The single element of the input sequence that satisfies the condition in <code>predicate</code>, or <code>default</code>(<code>TSource</code>) if no such element is found."}],"pos":[459488,459660],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[459830,459887],"yaml":true},{"content":"More than one element satisfies the condition in <code>predicate</code>.","nodes":[{"pos":[0,72],"content":"More than one element satisfies the condition in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"More than one element satisfies the condition in <code>predicate</code>."}],"pos":[459997,460070],"yaml":true},{"content":"Bypasses a specified number of elements in a sequence and then returns the remaining elements.","nodes":[{"pos":[0,94],"content":"Bypasses a specified number of elements in a sequence and then returns the remaining elements.","nodes":[{"content":"Bypasses a specified number of elements in a sequence and then returns the remaining elements.","pos":[0,94]}]}],"pos":[461432,461527],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it skips the first `count` elements in `source` and returns the remaining elements.","nodes":[{"pos":[0,641],"content":"The <xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> itself as a constructed generic method.","pos":[0,332],"source":"The <xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[333,641],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[648,1026],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it skips the first `count` elements in `source` and returns the remaining elements.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,264],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it skips the first <ph id=\"ph1\">`count`</ph> elements in <ph id=\"ph2\">`source`</ph> and returns the remaining elements.","pos":[265,378],"source":" The expected behavior is that it skips the first `count` elements in `source` and returns the remaining elements."}]}],"pos":[461538,462569],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return elements from.","nodes":[{"pos":[0,73],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to return elements from.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return elements from."}],"pos":[463338,463412],"yaml":true},{"content":"The number of elements to skip before returning the remaining elements.","nodes":[{"pos":[0,71],"content":"The number of elements to skip before returning the remaining elements.","nodes":[{"content":"The number of elements to skip before returning the remaining elements.","pos":[0,71]}]}],"pos":[463472,463544],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[463601,463650],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements that occur after the specified index in the input sequence.","nodes":[{"pos":[0,131],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains elements that occur after the specified index in the input sequence.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements that occur after the specified index in the input sequence."}],"pos":[463725,463857],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[464016,464047],"yaml":true},{"content":"Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.","nodes":[{"pos":[0,113],"content":"Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.","nodes":[{"content":"Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.","pos":[0,113]}]}],"pos":[466904,467018],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns false. That element and all the remaining elements are returned.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1087],"content":"The <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,480],"source":"The <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[481,789],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1094,1634],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns false. That element and all the remaining elements are returned.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,338],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it applies <ph id=\"ph1\">`predicate`</ph> to each element in <ph id=\"ph2\">`source`</ph> until it finds an element for which <ph id=\"ph3\">`predicate`</ph> returns false.","pos":[339,482],"source":" The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns false."},{"content":"That element and all the remaining elements are returned.","pos":[483,540]}]}],"pos":[467029,468670],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return elements from.","nodes":[{"pos":[0,73],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to return elements from.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return elements from."}],"pos":[469542,469616],"yaml":true},{"content":"A function to test each element for a condition.","nodes":[{"pos":[0,48],"content":"A function to test each element for a condition.","nodes":[{"content":"A function to test each element for a condition.","pos":[0,48]}]}],"pos":[469739,469788],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[469845,469894],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements from <code>source</code> starting at the first element in the linear series that does not pass the test specified by <code>predicate</code>.","nodes":[{"pos":[0,212],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains elements from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> starting at the first element in the linear series that does not pass the test specified by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">predicate</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements from <code>source</code> starting at the first element in the linear series that does not pass the test specified by <code>predicate</code>."}],"pos":[469969,470182],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[470346,470403],"yaml":true},{"content":"Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.","nodes":[{"pos":[0,181],"content":"Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.","nodes":[{"content":"Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.","pos":[0,181],"nodes":[{"content":"Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.","pos":[0,113]},{"content":"The element's index is used in the logic of the predicate function.","pos":[114,181]}]}]}],"pos":[472101,472283],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns false. That element and all the remaining elements are returned. The index of each source element is provided as the second argument to `predicate`.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1117],"content":"The <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,510],"source":"The <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[511,819],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1124,1763],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns false. That element and all the remaining elements are returned. The index of each source element is provided as the second argument to `predicate`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,353],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it applies <ph id=\"ph1\">`predicate`</ph> to each element in <ph id=\"ph2\">`source`</ph> until it finds an element for which <ph id=\"ph3\">`predicate`</ph> returns false.","pos":[354,497],"source":" The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns false."},{"content":"That element and all the remaining elements are returned.","pos":[498,555]},{"content":"The index of each source element is provided as the second argument to <ph id=\"ph1\">`predicate`</ph>.","pos":[556,639],"source":" The index of each source element is provided as the second argument to `predicate`."}]}],"pos":[472294,474064],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return elements from.","nodes":[{"pos":[0,73],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to return elements from.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to return elements from."}],"pos":[474991,475065],"yaml":true},{"content":"A function to test each element for a condition; the second parameter of this function represents the index of the source element.","nodes":[{"pos":[0,130],"content":"A function to test each element for a condition; the second parameter of this function represents the index of the source element.","nodes":[{"content":"A function to test each element for a condition; the second parameter of this function represents the index of the source element.","pos":[0,130]}]}],"pos":[475201,475332],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[475389,475438],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements from <code>source</code> starting at the first element in the linear series that does not pass the test specified by <code>predicate</code>.","nodes":[{"pos":[0,212],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains elements from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> starting at the first element in the linear series that does not pass the test specified by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">predicate</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements from <code>source</code> starting at the first element in the linear series that does not pass the test specified by <code>predicate</code>."}],"pos":[475513,475726],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[475890,475947],"yaml":true},{"content":"Computes the sum of a sequence of <xref href=\"System.Single\"></xref> values.","nodes":[{"pos":[0,76],"content":"Computes the sum of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the sum of a sequence of <xref href=\"System.Single\"></xref> values."}],"pos":[477234,477311],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.","nodes":[{"pos":[0,610],"content":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,298],"source":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[299,610],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[617,940],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,247],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the sum of the values in <ph id=\"ph1\">`source`</ph>.","pos":[248,323],"source":" The expected behavior is that it returns the sum of the values in `source`."}]}],"pos":[477322,478267],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Single\"></xref> values to calculate the sum of.","nodes":[{"pos":[0,80],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.","source":"A sequence of <xref href=\"System.Single\"></xref> values to calculate the sum of."}],"pos":[478921,479002],"yaml":true},{"content":"The sum of the values in the sequence.","nodes":[{"pos":[0,38],"content":"The sum of the values in the sequence.","nodes":[{"content":"The sum of the values in the sequence.","pos":[0,38]}]}],"pos":[479059,479098],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[479253,479284],"yaml":true},{"content":"Computes the sum of a sequence of nullable <xref href=\"System.Single\"></xref> values.","nodes":[{"pos":[0,85],"content":"Computes the sum of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the sum of a sequence of nullable <xref href=\"System.Single\"></xref> values."}],"pos":[480652,480738],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.","nodes":[{"pos":[0,652],"content":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,340],"source":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[341,652],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[659,1003],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,268],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the sum of the values in <ph id=\"ph1\">`source`</ph>.","pos":[269,344],"source":" The expected behavior is that it returns the sum of the values in `source`."}]}],"pos":[480749,481757],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Single\"></xref> values to calculate the sum of.","nodes":[{"pos":[0,89],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.","source":"A sequence of nullable <xref href=\"System.Single\"></xref> values to calculate the sum of."}],"pos":[482469,482559],"yaml":true},{"content":"The sum of the values in the sequence.","nodes":[{"pos":[0,38],"content":"The sum of the values in the sequence.","nodes":[{"content":"The sum of the values in the sequence.","pos":[0,38]}]}],"pos":[482633,482672],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[482827,482858],"yaml":true},{"content":"Computes the sum of a sequence of nullable <xref href=\"System.Int64\"></xref> values.","nodes":[{"pos":[0,84],"content":"Computes the sum of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the sum of a sequence of nullable <xref href=\"System.Int64\"></xref> values."}],"pos":[484220,484305],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.","nodes":[{"pos":[0,650],"content":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,338],"source":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[339,650],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[657,1000],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,267],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the sum of the values in <ph id=\"ph1\">`source`</ph>.","pos":[268,343],"source":" The expected behavior is that it returns the sum of the values in `source`."}]}],"pos":[484316,485321],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Int64\"></xref> values to calculate the sum of.","nodes":[{"pos":[0,88],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.","source":"A sequence of nullable <xref href=\"System.Int64\"></xref> values to calculate the sum of."}],"pos":[486144,486233],"yaml":true},{"content":"The sum of the values in the sequence.","nodes":[{"pos":[0,38],"content":"The sum of the values in the sequence.","nodes":[{"content":"The sum of the values in the sequence.","pos":[0,38]}]}],"pos":[486306,486345],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[486500,486531],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,66],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[486625,486692],"yaml":true},{"content":"Computes the sum of a sequence of nullable <xref href=\"System.Int32\"></xref> values.","nodes":[{"pos":[0,84],"content":"Computes the sum of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the sum of a sequence of nullable <xref href=\"System.Int32\"></xref> values."}],"pos":[488032,488117],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.","nodes":[{"pos":[0,650],"content":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,338],"source":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[339,650],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[657,1000],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,267],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the sum of the values in <ph id=\"ph1\">`source`</ph>.","pos":[268,343],"source":" The expected behavior is that it returns the sum of the values in `source`."}]}],"pos":[488128,489133],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Int32\"></xref> values to calculate the sum of.","nodes":[{"pos":[0,88],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.","source":"A sequence of nullable <xref href=\"System.Int32\"></xref> values to calculate the sum of."}],"pos":[489954,490043],"yaml":true},{"content":"The sum of the values in the sequence.","nodes":[{"pos":[0,38],"content":"The sum of the values in the sequence.","nodes":[{"content":"The sum of the values in the sequence.","pos":[0,38]}]}],"pos":[490116,490155],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[490310,490341],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,66],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[490435,490502],"yaml":true},{"content":"Computes the sum of a sequence of nullable <xref href=\"System.Double\"></xref> values.","nodes":[{"pos":[0,85],"content":"Computes the sum of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the sum of a sequence of nullable <xref href=\"System.Double\"></xref> values."}],"pos":[491848,491934],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.","nodes":[{"pos":[0,652],"content":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,340],"source":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[341,652],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[659,1003],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,268],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the sum of the values in <ph id=\"ph1\">`source`</ph>.","pos":[269,344],"source":" The expected behavior is that it returns the sum of the values in `source`."}]}],"pos":[491945,492953],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Double\"></xref> values to calculate the sum of.","nodes":[{"pos":[0,89],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.","source":"A sequence of nullable <xref href=\"System.Double\"></xref> values to calculate the sum of."}],"pos":[493781,493871],"yaml":true},{"content":"The sum of the values in the sequence.","nodes":[{"pos":[0,38],"content":"The sum of the values in the sequence.","nodes":[{"content":"The sum of the values in the sequence.","pos":[0,38]}]}],"pos":[493945,493984],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[494139,494170],"yaml":true},{"content":"Computes the sum of a sequence of <xref href=\"System.Double\"></xref> values.","nodes":[{"pos":[0,76],"content":"Computes the sum of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the sum of a sequence of <xref href=\"System.Double\"></xref> values."}],"pos":[495457,495534],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.","nodes":[{"pos":[0,610],"content":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,298],"source":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[299,610],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[617,940],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,247],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the sum of the values in <ph id=\"ph1\">`source`</ph>.","pos":[248,323],"source":" The expected behavior is that it returns the sum of the values in `source`."}]}],"pos":[495545,496490],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Double\"></xref> values to calculate the sum of.","nodes":[{"pos":[0,80],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.","source":"A sequence of <xref href=\"System.Double\"></xref> values to calculate the sum of."}],"pos":[497260,497341],"yaml":true},{"content":"The sum of the values in the sequence.","nodes":[{"pos":[0,38],"content":"The sum of the values in the sequence.","nodes":[{"content":"The sum of the values in the sequence.","pos":[0,38]}]}],"pos":[497398,497437],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[497592,497623],"yaml":true},{"content":"Computes the sum of a sequence of <xref href=\"System.Int64\"></xref> values.","nodes":[{"pos":[0,75],"content":"Computes the sum of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the sum of a sequence of <xref href=\"System.Int64\"></xref> values."}],"pos":[498882,498958],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.","nodes":[{"pos":[0,608],"content":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,296],"source":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[297,608],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[615,937],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,246],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the sum of the values in <ph id=\"ph1\">`source`</ph>.","pos":[247,322],"source":" The expected behavior is that it returns the sum of the values in `source`."}]}],"pos":[498969,499911],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Int64\"></xref> values to calculate the sum of.","nodes":[{"pos":[0,79],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.","source":"A sequence of <xref href=\"System.Int64\"></xref> values to calculate the sum of."}],"pos":[500676,500756],"yaml":true},{"content":"The sum of the values in the sequence.","nodes":[{"pos":[0,38],"content":"The sum of the values in the sequence.","nodes":[{"content":"The sum of the values in the sequence.","pos":[0,38]}]}],"pos":[500812,500851],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[501006,501037],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,66],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[501131,501198],"yaml":true},{"content":"Computes the sum of a sequence of <xref href=\"System.Int32\"></xref> values.","nodes":[{"pos":[0,75],"content":"Computes the sum of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the sum of a sequence of <xref href=\"System.Int32\"></xref> values."}],"pos":[502479,502555],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.","nodes":[{"pos":[0,608],"content":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,296],"source":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[297,608],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[615,937],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,246],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the sum of the values in <ph id=\"ph1\">`source`</ph>.","pos":[247,322],"source":" The expected behavior is that it returns the sum of the values in `source`."}]}],"pos":[502566,503508],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Int32\"></xref> values to calculate the sum of.","nodes":[{"pos":[0,79],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.","source":"A sequence of <xref href=\"System.Int32\"></xref> values to calculate the sum of."}],"pos":[504271,504351],"yaml":true},{"content":"The sum of the values in the sequence.","nodes":[{"pos":[0,38],"content":"The sum of the values in the sequence.","nodes":[{"content":"The sum of the values in the sequence.","pos":[0,38]}]}],"pos":[504407,504446],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[504601,504632],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,66],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[504726,504793],"yaml":true},{"content":"Computes the sum of a sequence of nullable <xref href=\"System.Decimal\"></xref> values.","nodes":[{"pos":[0,86],"content":"Computes the sum of a sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the sum of a sequence of nullable <xref href=\"System.Decimal\"></xref> values."}],"pos":[506167,506254],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.","nodes":[{"pos":[0,654],"content":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,342],"source":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[343,654],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[661,1006],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,269],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the sum of the values in <ph id=\"ph1\">`source`</ph>.","pos":[270,345],"source":" The expected behavior is that it returns the sum of the values in `source`."}]}],"pos":[506265,507276],"yaml":true,"extradata":"MT"},{"content":"A sequence of nullable <xref href=\"System.Decimal\"></xref> values to calculate the sum of.","nodes":[{"pos":[0,90],"content":"A sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.","source":"A sequence of nullable <xref href=\"System.Decimal\"></xref> values to calculate the sum of."}],"pos":[508107,508198],"yaml":true},{"content":"The sum of the values in the sequence.","nodes":[{"pos":[0,38],"content":"The sum of the values in the sequence.","nodes":[{"content":"The sum of the values in the sequence.","pos":[0,38]}]}],"pos":[508273,508312],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[508467,508498],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>.","nodes":[{"pos":[0,68],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Decimal.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>."}],"pos":[508592,508661],"yaml":true},{"content":"Computes the sum of a sequence of <xref href=\"System.Decimal\"></xref> values.","nodes":[{"pos":[0,77],"content":"Computes the sum of a sequence of <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values.","source":"Computes the sum of a sequence of <xref href=\"System.Decimal\"></xref> values."}],"pos":[509954,510032],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.","nodes":[{"pos":[0,612],"content":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,300],"source":"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[301,612],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[619,943],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,248],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the sum of the values in <ph id=\"ph1\">`source`</ph>.","pos":[249,324],"source":" The expected behavior is that it returns the sum of the values in `source`."}]}],"pos":[510043,510991],"yaml":true,"extradata":"MT"},{"content":"A sequence of <xref href=\"System.Decimal\"></xref> values to calculate the sum of.","nodes":[{"pos":[0,81],"content":"A sequence of <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values to calculate the sum of.","source":"A sequence of <xref href=\"System.Decimal\"></xref> values to calculate the sum of."}],"pos":[511764,511846],"yaml":true},{"content":"The sum of the values in the sequence.","nodes":[{"pos":[0,38],"content":"The sum of the values in the sequence.","nodes":[{"content":"The sum of the values in the sequence.","pos":[0,38]}]}],"pos":[511904,511943],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[512098,512129],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>.","nodes":[{"pos":[0,68],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Decimal.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>."}],"pos":[512223,512292],"yaml":true},{"content":"Computes the sum of the sequence of nullable <xref href=\"System.Single\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.","nodes":[{"pos":[0,176],"content":"Computes the sum of the sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.","source":"Computes the sum of the sequence of nullable <xref href=\"System.Single\"></xref> values that is obtained by invoking a projection function on each element of the input sequence."}],"pos":[513972,514149],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1118],"content":"The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,508],"source":"The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[509,820],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1125,1602],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,352],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it invokes <ph id=\"ph1\">`selector`</ph> on each element of <ph id=\"ph2\">`source`</ph> and returns the sum of the resulting values.","pos":[353,477],"source":" The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values."}]}],"pos":[514160,515769],"yaml":true,"extradata":"MT"},{"content":"A sequence of values of type <code>TSource</code>.","nodes":[{"pos":[0,50],"content":"A sequence of values of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TSource</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A sequence of values of type <code>TSource</code>."}],"pos":[516704,516755],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[516893,516941],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[516998,517047],"yaml":true},{"content":"The sum of the projected values.","nodes":[{"pos":[0,32],"content":"The sum of the projected values.","nodes":[{"content":"The sum of the projected values.","pos":[0,32]}]}],"pos":[517121,517154],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[517312,517368],"yaml":true},{"content":"Computes the sum of the sequence of nullable <xref href=\"System.Int64\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.","nodes":[{"pos":[0,175],"content":"Computes the sum of the sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.","source":"Computes the sum of the sequence of nullable <xref href=\"System.Int64\"></xref> values that is obtained by invoking a projection function on each element of the input sequence."}],"pos":[519042,519218],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1116],"content":"The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,506],"source":"The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[507,818],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1123,1599],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,351],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it invokes <ph id=\"ph1\">`selector`</ph> on each element of <ph id=\"ph2\">`source`</ph> and returns the sum of the resulting values.","pos":[352,476],"source":" The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values."}]}],"pos":[519229,520835],"yaml":true,"extradata":"MT"},{"content":"A sequence of values of type <code>TSource</code>.","nodes":[{"pos":[0,50],"content":"A sequence of values of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TSource</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A sequence of values of type <code>TSource</code>."}],"pos":[521768,521819],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[521956,522004],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[522061,522110],"yaml":true},{"content":"The sum of the projected values.","nodes":[{"pos":[0,32],"content":"The sum of the projected values.","nodes":[{"content":"The sum of the projected values.","pos":[0,32]}]}],"pos":[522183,522216],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[522374,522430],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,66],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[522524,522591],"yaml":true},{"content":"Computes the sum of the sequence of nullable <xref href=\"System.Int32\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.","nodes":[{"pos":[0,175],"content":"Computes the sum of the sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.","source":"Computes the sum of the sequence of nullable <xref href=\"System.Int32\"></xref> values that is obtained by invoking a projection function on each element of the input sequence."}],"pos":[524265,524441],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1116],"content":"The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,506],"source":"The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[507,818],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1123,1599],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,351],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it invokes <ph id=\"ph1\">`selector`</ph> on each element of <ph id=\"ph2\">`source`</ph> and returns the sum of the resulting values.","pos":[352,476],"source":" The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values."}]}],"pos":[524452,526058],"yaml":true,"extradata":"MT"},{"content":"A sequence of values of type <code>TSource</code>.","nodes":[{"pos":[0,50],"content":"A sequence of values of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TSource</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A sequence of values of type <code>TSource</code>."}],"pos":[526989,527040],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[527177,527225],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[527282,527331],"yaml":true},{"content":"The sum of the projected values.","nodes":[{"pos":[0,32],"content":"The sum of the projected values.","nodes":[{"content":"The sum of the projected values.","pos":[0,32]}]}],"pos":[527404,527437],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[527595,527651],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,66],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[527745,527812],"yaml":true},{"content":"Computes the sum of the sequence of nullable <xref href=\"System.Double\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.","nodes":[{"pos":[0,176],"content":"Computes the sum of the sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.","source":"Computes the sum of the sequence of nullable <xref href=\"System.Double\"></xref> values that is obtained by invoking a projection function on each element of the input sequence."}],"pos":[529470,529647],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1118],"content":"The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,508],"source":"The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[509,820],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1125,1602],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,352],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it invokes <ph id=\"ph1\">`selector`</ph> on each element of <ph id=\"ph2\">`source`</ph> and returns the sum of the resulting values.","pos":[353,477],"source":" The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values."}]}],"pos":[529658,531267],"yaml":true,"extradata":"MT"},{"content":"A sequence of values of type <code>TSource</code>.","nodes":[{"pos":[0,50],"content":"A sequence of values of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TSource</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A sequence of values of type <code>TSource</code>."}],"pos":[532204,532255],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[532393,532441],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[532498,532547],"yaml":true},{"content":"The sum of the projected values.","nodes":[{"pos":[0,32],"content":"The sum of the projected values.","nodes":[{"content":"The sum of the projected values.","pos":[0,32]}]}],"pos":[532621,532654],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[532812,532868],"yaml":true},{"content":"Computes the sum of the sequence of <xref href=\"System.Single\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.","nodes":[{"pos":[0,167],"content":"Computes the sum of the sequence of <ph id=\"ph1\">&lt;xref href=\"System.Single\"&gt;&lt;/xref&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.","source":"Computes the sum of the sequence of <xref href=\"System.Single\"></xref> values that is obtained by invoking a projection function on each element of the input sequence."}],"pos":[534467,534635],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1076],"content":"The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,466],"source":"The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[467,778],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1083,1539],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,331],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it invokes <ph id=\"ph1\">`selector`</ph> on each element of <ph id=\"ph2\">`source`</ph> and returns the sum of the resulting values.","pos":[332,456],"source":" The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values."}]}],"pos":[534646,536192],"yaml":true,"extradata":"MT"},{"content":"A sequence of values of type <code>TSource</code>.","nodes":[{"pos":[0,50],"content":"A sequence of values of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TSource</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A sequence of values of type <code>TSource</code>."}],"pos":[537107,537158],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[537279,537327],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[537384,537433],"yaml":true},{"content":"The sum of the projected values.","nodes":[{"pos":[0,32],"content":"The sum of the projected values.","nodes":[{"content":"The sum of the projected values.","pos":[0,32]}]}],"pos":[537490,537523],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[537681,537737],"yaml":true},{"content":"Computes the sum of the sequence of <xref href=\"System.Int64\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.","nodes":[{"pos":[0,166],"content":"Computes the sum of the sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.","source":"Computes the sum of the sequence of <xref href=\"System.Int64\"></xref> values that is obtained by invoking a projection function on each element of the input sequence."}],"pos":[539330,539497],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1074],"content":"The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,464],"source":"The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[465,776],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1081,1536],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,330],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it invokes <ph id=\"ph1\">`selector`</ph> on each element of <ph id=\"ph2\">`source`</ph> and returns the sum of the resulting values.","pos":[331,455],"source":" The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values."}]}],"pos":[539508,541051],"yaml":true,"extradata":"MT"},{"content":"A sequence of values of type <code>TSource</code>.","nodes":[{"pos":[0,50],"content":"A sequence of values of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TSource</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A sequence of values of type <code>TSource</code>."}],"pos":[541964,542015],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[542135,542183],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[542240,542289],"yaml":true},{"content":"The sum of the projected values.","nodes":[{"pos":[0,32],"content":"The sum of the projected values.","nodes":[{"content":"The sum of the projected values.","pos":[0,32]}]}],"pos":[542345,542378],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[542536,542592],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,66],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[542686,542753],"yaml":true},{"content":"Computes the sum of the sequence of <xref href=\"System.Int32\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.","nodes":[{"pos":[0,166],"content":"Computes the sum of the sequence of <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.","source":"Computes the sum of the sequence of <xref href=\"System.Int32\"></xref> values that is obtained by invoking a projection function on each element of the input sequence."}],"pos":[544346,544513],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1074],"content":"The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,464],"source":"The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[465,776],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1081,1536],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,330],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it invokes <ph id=\"ph1\">`selector`</ph> on each element of <ph id=\"ph2\">`source`</ph> and returns the sum of the resulting values.","pos":[331,455],"source":" The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values."}]}],"pos":[544524,546067],"yaml":true,"extradata":"MT"},{"content":"A sequence of values of type <code>TSource</code>.","nodes":[{"pos":[0,50],"content":"A sequence of values of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TSource</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A sequence of values of type <code>TSource</code>."}],"pos":[546978,547029],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[547149,547197],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[547254,547303],"yaml":true},{"content":"The sum of the projected values.","nodes":[{"pos":[0,32],"content":"The sum of the projected values.","nodes":[{"content":"The sum of the projected values.","pos":[0,32]}]}],"pos":[547359,547392],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[547550,547606],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,66],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[547700,547767],"yaml":true},{"content":"Computes the sum of the sequence of <xref href=\"System.Double\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.","nodes":[{"pos":[0,167],"content":"Computes the sum of the sequence of <ph id=\"ph1\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.","source":"Computes the sum of the sequence of <xref href=\"System.Double\"></xref> values that is obtained by invoking a projection function on each element of the input sequence."}],"pos":[549366,549534],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> depends on the implementation of the type of he `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1076],"content":"The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,466],"source":"The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[467,778],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1083,1538],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> depends on the implementation of the type of he `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> depends on the implementation of the type of he <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,330],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> depends on the implementation of the type of he `source` parameter."},{"content":"The expected behavior is that it invokes <ph id=\"ph1\">`selector`</ph> on each element of <ph id=\"ph2\">`source`</ph> and returns the sum of the resulting values.","pos":[331,455],"source":" The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values."}]}],"pos":[549545,551090],"yaml":true,"extradata":"MT"},{"content":"A sequence of values of type <code>TSource</code>.","nodes":[{"pos":[0,50],"content":"A sequence of values of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TSource</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A sequence of values of type <code>TSource</code>."}],"pos":[552007,552058],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[552179,552227],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[552284,552333],"yaml":true},{"content":"The sum of the projected values.","nodes":[{"pos":[0,32],"content":"The sum of the projected values.","nodes":[{"content":"The sum of the projected values.","pos":[0,32]}]}],"pos":[552390,552423],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[552581,552637],"yaml":true},{"content":"Computes the sum of the sequence of <xref href=\"System.Decimal\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.","nodes":[{"pos":[0,168],"content":"Computes the sum of the sequence of <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.","source":"Computes the sum of the sequence of <xref href=\"System.Decimal\"></xref> values that is obtained by invoking a projection function on each element of the input sequence."}],"pos":[554220,554389],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1078],"content":"The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,468],"source":"The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[469,780],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1085,1542],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,332],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it invokes <ph id=\"ph1\">`selector`</ph> on each element of <ph id=\"ph2\">`source`</ph> and returns the sum of the resulting values.","pos":[333,457],"source":" The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values."}]}],"pos":[554400,555949],"yaml":true,"extradata":"MT"},{"content":"A sequence of values of type <code>TSource</code>.","nodes":[{"pos":[0,50],"content":"A sequence of values of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TSource</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A sequence of values of type <code>TSource</code>."}],"pos":[556868,556919],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[557041,557089],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[557146,557195],"yaml":true},{"content":"The sum of the projected values.","nodes":[{"pos":[0,32],"content":"The sum of the projected values.","nodes":[{"content":"The sum of the projected values.","pos":[0,32]}]}],"pos":[557253,557286],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[557444,557500],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>.","nodes":[{"pos":[0,68],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Decimal.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>."}],"pos":[557594,557663],"yaml":true},{"content":"Computes the sum of the sequence of nullable <xref href=\"System.Decimal\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.","nodes":[{"pos":[0,177],"content":"Computes the sum of the sequence of nullable <ph id=\"ph1\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.","source":"Computes the sum of the sequence of nullable <xref href=\"System.Decimal\"></xref> values that is obtained by invoking a projection function on each element of the input sequence."}],"pos":[559327,559505],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1120],"content":"The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,510],"source":"The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[511,822],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1127,1605],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,353],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it invokes <ph id=\"ph1\">`selector`</ph> on each element of <ph id=\"ph2\">`source`</ph> and returns the sum of the resulting values.","pos":[354,478],"source":" The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values."}]}],"pos":[559516,561128],"yaml":true,"extradata":"MT"},{"content":"A sequence of values of type <code>TSource</code>.","nodes":[{"pos":[0,50],"content":"A sequence of values of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TSource</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A sequence of values of type <code>TSource</code>."}],"pos":[562067,562118],"yaml":true},{"content":"A projection function to apply to each element.","nodes":[{"pos":[0,47],"content":"A projection function to apply to each element.","nodes":[{"content":"A projection function to apply to each element.","pos":[0,47]}]}],"pos":[562257,562305],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[562362,562411],"yaml":true},{"content":"The sum of the projected values.","nodes":[{"pos":[0,32],"content":"The sum of the projected values.","nodes":[{"content":"The sum of the projected values.","pos":[0,32]}]}],"pos":[562486,562519],"yaml":true},{"content":"<code>source</code> or <code>selector</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;selector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>selector</code> is `null`."}],"pos":[562677,562733],"yaml":true},{"content":"The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>.","nodes":[{"pos":[0,68],"content":"The sum is larger than <ph id=\"ph1\">&lt;xref href=\"System.Decimal.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>."}],"pos":[562827,562896],"yaml":true},{"content":"Returns a specified number of contiguous elements from the start of a sequence.","nodes":[{"pos":[0,79],"content":"Returns a specified number of contiguous elements from the start of a sequence.","nodes":[{"content":"Returns a specified number of contiguous elements from the start of a sequence.","pos":[0,79]}]}],"pos":[564258,564338],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it takes the first `count` elements from the start of `source`.","nodes":[{"pos":[0,641],"content":"The <xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> itself as a constructed generic method.","pos":[0,332],"source":"The <xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[333,641],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[648,1006],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it takes the first `count` elements from the start of `source`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,264],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it takes the first <ph id=\"ph1\">`count`</ph> elements from the start of <ph id=\"ph2\">`source`</ph>.","pos":[265,358],"source":" The expected behavior is that it takes the first `count` elements from the start of `source`."}]}],"pos":[564349,565360],"yaml":true,"extradata":"MT"},{"content":"The sequence to return elements from.","nodes":[{"pos":[0,37],"content":"The sequence to return elements from.","nodes":[{"content":"The sequence to return elements from.","pos":[0,37]}]}],"pos":[566086,566124],"yaml":true},{"content":"The number of elements to return.","nodes":[{"pos":[0,33],"content":"The number of elements to return.","nodes":[{"content":"The number of elements to return.","pos":[0,33]}]}],"pos":[566184,566218],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[566275,566324],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the specified number of elements from the start of <code>source</code>.","nodes":[{"pos":[0,134],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains the specified number of elements from the start of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the specified number of elements from the start of <code>source</code>."}],"pos":[566399,566534],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[566693,566724],"yaml":true},{"content":"Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.","nodes":[{"pos":[0,142],"content":"Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.","nodes":[{"content":"Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.","pos":[0,142],"nodes":[{"content":"Returns elements from a sequence as long as a specified condition is true.","pos":[0,74]},{"content":"The element's index is used in the logic of the predicate function.","pos":[75,142]}]}]}],"pos":[569638,569781],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns `false`. It returns all the elements up until that point. The index of each source element is provided as the second argument to `predicate`.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1117],"content":"The <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,510],"source":"The <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[511,819],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1124,1756],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns `false`. It returns all the elements up until that point. The index of each source element is provided as the second argument to `predicate`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,353],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it applies <ph id=\"ph1\">`predicate`</ph> to each element in <ph id=\"ph2\">`source`</ph> until it finds an element for which <ph id=\"ph3\">`predicate`</ph> returns <ph id=\"ph4\">`false`</ph>.","pos":[354,499],"source":" The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns `false`."},{"content":"It returns all the elements up until that point.","pos":[500,548]},{"content":"The index of each source element is provided as the second argument to <ph id=\"ph1\">`predicate`</ph>.","pos":[549,632],"source":" The index of each source element is provided as the second argument to `predicate`."}]}],"pos":[569792,571555],"yaml":true,"extradata":"MT"},{"content":"The sequence to return elements from.","nodes":[{"pos":[0,37],"content":"The sequence to return elements from.","nodes":[{"content":"The sequence to return elements from.","pos":[0,37]}]}],"pos":[572504,572542],"yaml":true},{"content":"A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.","nodes":[{"pos":[0,145],"content":"A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.","nodes":[{"content":"A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.","pos":[0,145]}]}],"pos":[572678,572824],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[572881,572930],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements from the input sequence occurring before the element at which the test specified by <code>predicate</code> no longer passes.","nodes":[{"pos":[0,196],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains elements from the input sequence occurring before the element at which the test specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept> no longer passes.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements from the input sequence occurring before the element at which the test specified by <code>predicate</code> no longer passes."}],"pos":[573005,573202],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[573366,573423],"yaml":true},{"content":"Returns elements from a sequence as long as a specified condition is true.","nodes":[{"pos":[0,74],"content":"Returns elements from a sequence as long as a specified condition is true.","nodes":[{"content":"Returns elements from a sequence as long as a specified condition is true.","pos":[0,74]}]}],"pos":[575064,575139],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns `false`. It returns all the elements up until that point.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1087],"content":"The <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,480],"source":"The <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[481,789],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1094,1627],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns `false`. It returns all the elements up until that point.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,338],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it applies <ph id=\"ph1\">`predicate`</ph> to each element in <ph id=\"ph2\">`source`</ph> until it finds an element for which <ph id=\"ph3\">`predicate`</ph> returns <ph id=\"ph4\">`false`</ph>.","pos":[339,484],"source":" The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns `false`."},{"content":"It returns all the elements up until that point.","pos":[485,533]}]}],"pos":[575150,576784],"yaml":true,"extradata":"MT"},{"content":"The sequence to return elements from.","nodes":[{"pos":[0,37],"content":"The sequence to return elements from.","nodes":[{"content":"The sequence to return elements from.","pos":[0,37]}]}],"pos":[577679,577717],"yaml":true},{"content":"A function to test each element for a condition.","nodes":[{"pos":[0,48],"content":"A function to test each element for a condition.","nodes":[{"content":"A function to test each element for a condition.","pos":[0,48]}]}],"pos":[577840,577889],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[577946,577995],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements from the input sequence occurring before the element at which the test specified by <code>predicate</code> no longer passes.","nodes":[{"pos":[0,196],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains elements from the input sequence occurring before the element at which the test specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept> no longer passes.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements from the input sequence occurring before the element at which the test specified by <code>predicate</code> no longer passes."}],"pos":[578070,578267],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[578431,578488],"yaml":true},{"content":"Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.","nodes":[{"pos":[0,99],"content":"Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.","nodes":[{"content":"Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.","pos":[0,99]}]}],"pos":[580126,580226],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it performs a secondary sort of the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`. All previously established sort orders are preserved.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1274],"content":"The <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,474],"source":"The <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[475,790],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."},{"content":"The result of calling <ph id=\"ph1\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id=\"ph2\">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.","pos":[791,976],"source":" The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned."}]},{"pos":[1281,1838],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it performs a secondary sort of the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`. All previously established sort orders are preserved.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,335],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it performs a secondary sort of the elements of <ph id=\"ph1\">`source`</ph> based on the key obtained by invoking <ph id=\"ph2\">`keySelector`</ph> on each element of <ph id=\"ph3\">`source`</ph>.","pos":[336,503],"source":" The expected behavior is that it performs a secondary sort of the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`."},{"content":"All previously established sort orders are preserved.","pos":[504,557]}]}],"pos":[580237,582082],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> that contains elements to sort.","nodes":[{"pos":[0,87],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains elements to sort.","source":"An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> that contains elements to sort."}],"pos":[582982,583070],"yaml":true},{"content":"A function to extract a key from each element.","nodes":[{"pos":[0,46],"content":"A function to extract a key from each element.","nodes":[{"content":"A function to extract a key from each element.","pos":[0,46]}]}],"pos":[583185,583232],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[583289,583338],"yaml":true},{"content":"The type of the key returned by the function represented by <code>keySelector</code>.","nodes":[{"pos":[0,85],"content":"The type of the key returned by the function represented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by the function represented by <code>keySelector</code>."}],"pos":[583372,583458],"yaml":true},{"content":"An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> whose elements are sorted according to a key.","nodes":[{"pos":[0,101],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements are sorted according to a key.","source":"An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> whose elements are sorted according to a key."}],"pos":[583540,583642],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> is `null`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> is `null`."}],"pos":[583803,583862],"yaml":true},{"content":"Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.","nodes":[{"pos":[0,110],"content":"Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.","nodes":[{"content":"Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.","pos":[0,110]}]}],"pos":[585677,585788],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it performs a secondary sort of the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`. All previously established sort orders are preserved. The `comparer` parameter is used to compare key values.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1378],"content":"The <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,578],"source":"The <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[579,894],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."},{"content":"The result of calling <ph id=\"ph1\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id=\"ph2\">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.","pos":[895,1080],"source":" The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned."}]},{"pos":[1385,2050],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it performs a secondary sort of the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`. All previously established sort orders are preserved. The `comparer` parameter is used to compare key values.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,387],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it performs a secondary sort of the elements of <ph id=\"ph1\">`source`</ph> based on the key obtained by invoking <ph id=\"ph2\">`keySelector`</ph> on each element of <ph id=\"ph3\">`source`</ph>.","pos":[388,555],"source":" The expected behavior is that it performs a secondary sort of the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`."},{"content":"All previously established sort orders are preserved.","pos":[556,609]},{"content":"The <ph id=\"ph1\">`comparer`</ph> parameter is used to compare key values.","pos":[610,665],"source":" The `comparer` parameter is used to compare key values."}]}],"pos":[585799,587856],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> that contains elements to sort.","nodes":[{"pos":[0,87],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains elements to sort.","source":"An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> that contains elements to sort."}],"pos":[588231,588319],"yaml":true},{"content":"A function to extract a key from each element.","nodes":[{"pos":[0,46],"content":"A function to extract a key from each element.","nodes":[{"content":"A function to extract a key from each element.","pos":[0,46]}]}],"pos":[588434,588481],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys.","nodes":[{"pos":[0,79],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph> to compare keys.","source":"An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys."}],"pos":[588574,588654],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[588711,588760],"yaml":true},{"content":"The type of the key returned by the function represented by <code>keySelector</code>.","nodes":[{"pos":[0,85],"content":"The type of the key returned by the function represented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by the function represented by <code>keySelector</code>."}],"pos":[588794,588880],"yaml":true},{"content":"An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> whose elements are sorted according to a key.","nodes":[{"pos":[0,101],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements are sorted according to a key.","source":"An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> whose elements are sorted according to a key."}],"pos":[588962,589064],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> or <code>comparer</code> is `null`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;comparer&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> or <code>comparer</code> is `null`."}],"pos":[589225,589309],"yaml":true},{"content":"Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.","nodes":[{"pos":[0,101],"content":"Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.","nodes":[{"content":"Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.","pos":[0,101]}]}],"pos":[591007,591109],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it performs a secondary sort of the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`. All previously established sort orders are preserved.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1294],"content":"The <xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,494],"source":"The <xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[495,810],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."},{"content":"The result of calling <ph id=\"ph1\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id=\"ph2\">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.","pos":[811,996],"source":" The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned."}]},{"pos":[1301,1889],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it performs a secondary sort of the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`. All previously established sort orders are preserved.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,345],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it performs a secondary sort of the elements of <ph id=\"ph1\">`source`</ph> in descending order, based on the key obtained by invoking <ph id=\"ph2\">`keySelector`</ph> on each element of <ph id=\"ph3\">`source`</ph>.","pos":[346,534],"source":" The expected behavior is that it performs a secondary sort of the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`."},{"content":"All previously established sort orders are preserved.","pos":[535,588]}]}],"pos":[591120,593016],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> that contains elements to sort.","nodes":[{"pos":[0,87],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains elements to sort.","source":"An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> that contains elements to sort."}],"pos":[593348,593436],"yaml":true},{"content":"A function to extract a key from each element.","nodes":[{"pos":[0,46],"content":"A function to extract a key from each element.","nodes":[{"content":"A function to extract a key from each element.","pos":[0,46]}]}],"pos":[593551,593598],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[593655,593704],"yaml":true},{"content":"The type of the key returned by the function represented by <code>keySelector</code>.","nodes":[{"pos":[0,85],"content":"The type of the key returned by the function represented by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the key returned by the function represented by <code>keySelector</code>."}],"pos":[593738,593824],"yaml":true},{"content":"An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> whose elements are sorted in descending order according to a key.","nodes":[{"pos":[0,121],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedQueryable`1\"&gt;&lt;/xref&gt;</ph> whose elements are sorted in descending order according to a key.","source":"An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> whose elements are sorted in descending order according to a key."}],"pos":[593906,594028],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> is `null`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> is `null`."}],"pos":[594199,594258],"yaml":true},{"content":"Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.","nodes":[{"pos":[0,111],"content":"Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.","nodes":[{"content":"Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.","pos":[0,111]}]}],"pos":[596133,596245],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it performs a secondary sort of the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`. All previously established sort orders are preserved. The `comparer` parameter is used to compare key values.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1378],"content":"The <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,578],"source":"The <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[579,894],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."},{"content":"The result of calling <ph id=\"ph1\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id=\"ph2\">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.","pos":[895,1080],"source":" The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned."}]},{"pos":[1385,2071],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it performs a secondary sort of the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`. All previously established sort orders are preserved. The `comparer` parameter is used to compare key values.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,387],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it performs a secondary sort of the elements of <ph id=\"ph1\">`source`</ph> in descending order, based on the key obtained by invoking <ph id=\"ph2\">`keySelector`</ph> on each element of <ph id=\"ph3\">`source`</ph>.","pos":[388,576],"source":" The expected behavior is that it performs a secondary sort of the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`."},{"content":"All previously established sort orders are preserved.","pos":[577,630]},{"content":"The <ph id=\"ph1\">`comparer`</ph> parameter is used to compare key values.","pos":[631,686],"source":" The `comparer` parameter is used to compare key values."}]}],"pos":[596256,598334],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> that contains elements to sort.","nodes":[{"pos":[0,87],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IOrderedQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains elements to sort.","source":"An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> that contains elements to sort."}],"pos":[599406,599494],"yaml":true},{"content":"A function to extract a key from each element.","nodes":[{"pos":[0,46],"content":"A function to extract a key from each element.","nodes":[{"content":"A function to extract a key from each element.","pos":[0,46]}]}],"pos":[599609,599656],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys.","nodes":[{"pos":[0,79],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph> to compare keys.","source":"An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys."}],"pos":[599749,599829],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[599886,599935],"yaml":true},{"content":"The type of the key that is returned by the <code>keySelector</code> function.","nodes":[{"pos":[0,78],"content":"The type of the key that is returned by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">keySelector</ph><ept id=\"p1\">&lt;/code&gt;</ept> function.","source":"The type of the key that is returned by the <code>keySelector</code> function."}],"pos":[599969,600048],"yaml":true},{"content":"A collection whose elements are sorted in descending order according to a key.","nodes":[{"pos":[0,78],"content":"A collection whose elements are sorted in descending order according to a key.","nodes":[{"content":"A collection whose elements are sorted in descending order according to a key.","pos":[0,78]}]}],"pos":[600130,600209],"yaml":true},{"content":"<code>source</code> or <code>keySelector</code> or <code>comparer</code> is `null`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;keySelector&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;comparer&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>source</code> or <code>keySelector</code> or <code>comparer</code> is `null`."}],"pos":[600380,600464],"yaml":true},{"content":"Produces the set union of two sequences by using the default equality comparer.","nodes":[{"pos":[0,79],"content":"Produces the set union of two sequences by using the default equality comparer.","nodes":[{"content":"Produces the set union of two sequences by using the default equality comparer.","pos":[0,79]}]}],"pos":[601970,602050],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that the set union of the elements in `source1` and `source2` is returned.","nodes":[{"pos":[0,729],"content":"The <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,412],"source":"The <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source1`</ph> parameter.","pos":[413,729],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter."}]},{"pos":[736,1141],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that the set union of the elements in `source1` and `source2` is returned.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source1`</ph> parameter.","pos":[0,305],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter."},{"content":"The expected behavior is that the set union of the elements in <ph id=\"ph1\">`source1`</ph> and <ph id=\"ph2\">`source2`</ph> is returned.","pos":[306,405],"source":" The expected behavior is that the set union of the elements in `source1` and `source2` is returned."}]}],"pos":[602061,603207],"yaml":true,"extradata":"MT"},{"content":"A sequence whose distinct elements form the first set for the union operation.","nodes":[{"pos":[0,78],"content":"A sequence whose distinct elements form the first set for the union operation.","nodes":[{"content":"A sequence whose distinct elements form the first set for the union operation.","pos":[0,78]}]}],"pos":[604019,604098],"yaml":true},{"content":"A sequence whose distinct elements form the second set for the union operation.","nodes":[{"pos":[0,79],"content":"A sequence whose distinct elements form the second set for the union operation.","nodes":[{"content":"A sequence whose distinct elements form the second set for the union operation.","pos":[0,79]}]}],"pos":[604195,604275],"yaml":true},{"content":"The type of the elements of the input sequences.","nodes":[{"pos":[0,48],"content":"The type of the elements of the input sequences.","nodes":[{"content":"The type of the elements of the input sequences.","pos":[0,48]}]}],"pos":[604332,604381],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements from both input sequences, excluding duplicates.","nodes":[{"pos":[0,124],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains the elements from both input sequences, excluding duplicates.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements from both input sequences, excluding duplicates."}],"pos":[604456,604581],"yaml":true},{"content":"<code>source1</code> or <code>source2</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source1&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;source2&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source1</code> or <code>source2</code> is `null`."}],"pos":[604741,604797],"yaml":true},{"content":"Produces the set union of two sequences by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>.","nodes":[{"pos":[0,129],"content":"Produces the set union of two sequences by using a specified <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph>.","source":"Produces the set union of two sequences by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>."}],"pos":[606537,606667],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that the set union of the elements in `source1` and `source2` is returned. The `comparer` parameter is used to compare values.","nodes":[{"pos":[0,849],"content":"The <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,532],"source":"The <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source1`</ph> parameter.","pos":[533,849],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter."}]},{"pos":[856,1373],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that the set union of the elements in `source1` and `source2` is returned. The `comparer` parameter is used to compare values.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source1`</ph> parameter.","pos":[0,365],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter."},{"content":"The expected behavior is that the set union of the elements in <ph id=\"ph1\">`source1`</ph> and <ph id=\"ph2\">`source2`</ph> is returned.","pos":[366,465],"source":" The expected behavior is that the set union of the elements in `source1` and `source2` is returned."},{"content":"The <ph id=\"ph1\">`comparer`</ph> parameter is used to compare values.","pos":[466,517],"source":" The `comparer` parameter is used to compare values."}]}],"pos":[606678,608056],"yaml":true,"extradata":"MT"},{"content":"A sequence whose distinct elements form the first set for the union operation.","nodes":[{"pos":[0,78],"content":"A sequence whose distinct elements form the first set for the union operation.","nodes":[{"content":"A sequence whose distinct elements form the first set for the union operation.","pos":[0,78]}]}],"pos":[608406,608485],"yaml":true},{"content":"A sequence whose distinct elements form the second set for the union operation.","nodes":[{"pos":[0,79],"content":"A sequence whose distinct elements form the second set for the union operation.","nodes":[{"content":"A sequence whose distinct elements form the second set for the union operation.","pos":[0,79]}]}],"pos":[608582,608662],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEqualityComparer`1\"&gt;&lt;/xref&gt;</ph> to compare values.","source":"An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values."}],"pos":[608766,608856],"yaml":true},{"content":"The type of the elements of the input sequences.","nodes":[{"pos":[0,48],"content":"The type of the elements of the input sequences.","nodes":[{"content":"The type of the elements of the input sequences.","pos":[0,48]}]}],"pos":[608913,608962],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements from both input sequences, excluding duplicates.","nodes":[{"pos":[0,124],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains the elements from both input sequences, excluding duplicates.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements from both input sequences, excluding duplicates."}],"pos":[609037,609162],"yaml":true},{"content":"<code>source1</code> or <code>source2</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source1&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;source2&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source1</code> or <code>source2</code> is `null`."}],"pos":[609322,609378],"yaml":true},{"content":"Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.","nodes":[{"pos":[0,119],"content":"Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.","nodes":[{"content":"Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.","pos":[0,119],"nodes":[{"content":"Filters a sequence of values based on a predicate.","pos":[0,50]},{"content":"Each element's index is used in the logic of the predicate function.","pos":[51,119]}]}]}],"pos":[611052,611172],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the elements from `source` that satisfy the condition specified by `predicate`. The index of each source element is provided as the second argument to `predicate`.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1109],"content":"The <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,502],"source":"The <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[503,811],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1116,1670],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the elements from `source` that satisfy the condition specified by `predicate`. The index of each source element is provided as the second argument to `predicate`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,349],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the elements from <ph id=\"ph1\">`source`</ph> that satisfy the condition specified by <ph id=\"ph2\">`predicate`</ph>.","pos":[350,470],"source":" The expected behavior is that it returns the elements from `source` that satisfy the condition specified by `predicate`."},{"content":"The index of each source element is provided as the second argument to <ph id=\"ph1\">`predicate`</ph>.","pos":[471,554],"source":" The index of each source element is provided as the second argument to `predicate`."}]}],"pos":[611183,612860],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to filter.","nodes":[{"pos":[0,59],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to filter.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to filter."}],"pos":[613773,613833],"yaml":true},{"content":"A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.","nodes":[{"pos":[0,145],"content":"A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.","nodes":[{"content":"A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.","pos":[0,145]}]}],"pos":[613969,614115],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[614172,614221],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements from the input sequence that satisfy the condition specified by <code>predicate</code>.","nodes":[{"pos":[0,159],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains elements from the input sequence that satisfy the condition specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements from the input sequence that satisfy the condition specified by <code>predicate</code>."}],"pos":[614296,614456],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[614616,614673],"yaml":true},{"content":"Filters a sequence of values based on a predicate.","nodes":[{"pos":[0,50],"content":"Filters a sequence of values based on a predicate.","nodes":[{"content":"Filters a sequence of values based on a predicate.","pos":[0,50]}]}],"pos":[616290,616341],"yaml":true},{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the elements from `source` that satisfy the condition specified by `predicate`.","nodes":[{"pos":[0,291],"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","nodes":[{"content":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.","pos":[0,291],"nodes":[{"content":"This method has at least one parameter of type <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id=\"ph2\">&lt;xref:System.Func%602&gt;</ph> types.","pos":[0,156],"source":"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types."},{"content":"For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.","pos":[157,291],"source":" For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>."}]}]},{"pos":[298,1079],"content":"The <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.","pos":[0,472],"source":"The <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source`</ph> parameter.","pos":[473,781],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter."}]},{"pos":[1086,1541],"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the elements from `source` that satisfy the condition specified by `predicate`.","nodes":[{"content":"The query behavior that occurs as a result of executing an expression tree that represents calling <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id=\"ph2\">`source`</ph> parameter.","pos":[0,334],"source":"The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter."},{"content":"The expected behavior is that it returns the elements from <ph id=\"ph1\">`source`</ph> that satisfy the condition specified by <ph id=\"ph2\">`predicate`</ph>.","pos":[335,455],"source":" The expected behavior is that it returns the elements from `source` that satisfy the condition specified by `predicate`."}]}],"pos":[616352,617900],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to filter.","nodes":[{"pos":[0,59],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> to filter.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> to filter."}],"pos":[618729,618789],"yaml":true},{"content":"A function to test each element for a condition.","nodes":[{"pos":[0,48],"content":"A function to test each element for a condition.","nodes":[{"content":"A function to test each element for a condition.","pos":[0,48]}]}],"pos":[618912,618961],"yaml":true},{"content":"The type of the elements of <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements of <code>source</code>."}],"pos":[619018,619067],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements from the input sequence that satisfy the condition specified by <code>predicate</code>.","nodes":[{"pos":[0,159],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains elements from the input sequence that satisfy the condition specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements from the input sequence that satisfy the condition specified by <code>predicate</code>."}],"pos":[619142,619302],"yaml":true},{"content":"<code>source</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source</code> or <code>predicate</code> is `null`."}],"pos":[619462,619519],"yaml":true},{"content":"Merges two sequences by using the specified predicate function.","nodes":[{"pos":[0,63],"content":"Merges two sequences by using the specified predicate function.","nodes":[{"content":"Merges two sequences by using the specified predicate function.","pos":[0,63]}]}],"pos":[621364,621428],"yaml":true},{"content":"The <xref:System.Linq.Queryable.Zip%2A> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Zip%2A> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \n  \n The method merges each element of the first sequence with an element that has the same index in the second sequence. If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them. For example, if one sequence has three elements and the other one has four, the resulting sequence will have only three elements.","nodes":[{"pos":[0,527],"content":"The <xref:System.Linq.Queryable.Zip%2A> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Zip%2A> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable.Zip%2A&gt;</ph> method generates a <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.Zip%2A&gt;</ph> itself as a constructed generic method.","pos":[0,210],"source":"The <xref:System.Linq.Queryable.Zip%2A> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Zip%2A> itself as a constructed generic method."},{"content":"It then passes the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id=\"ph4\">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id=\"ph5\">`source1`</ph> parameter.","pos":[211,527],"source":" It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter."}]},{"pos":[534,907],"content":"The method merges each element of the first sequence with an element that has the same index in the second sequence. If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them. For example, if one sequence has three elements and the other one has four, the resulting sequence will have only three elements.","nodes":[{"content":"The method merges each element of the first sequence with an element that has the same index in the second sequence. If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them. For example, if one sequence has three elements and the other one has four, the resulting sequence will have only three elements.","pos":[0,373],"nodes":[{"content":"The method merges each element of the first sequence with an element that has the same index in the second sequence.","pos":[0,116]},{"content":"If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them.","pos":[117,243]},{"content":"For example, if one sequence has three elements and the other one has four, the resulting sequence will have only three elements.","pos":[244,373]}]}]}],"pos":[621439,622351],"yaml":true,"extradata":"MT"},{"content":"The first sequence to merge.","nodes":[{"pos":[0,28],"content":"The first sequence to merge.","nodes":[{"content":"The first sequence to merge.","pos":[0,28]}]}],"pos":[623147,623176],"yaml":true},{"content":"The second sequence to merge.","nodes":[{"pos":[0,29],"content":"The second sequence to merge.","nodes":[{"content":"The second sequence to merge.","pos":[0,29]}]}],"pos":[623273,623303],"yaml":true},{"content":"A function that specifies how to merge the elements from the two sequences.","nodes":[{"pos":[0,75],"content":"A function that specifies how to merge the elements from the two sequences.","nodes":[{"content":"A function that specifies how to merge the elements from the two sequences.","pos":[0,75]}]}],"pos":[623431,623507],"yaml":true},{"content":"The type of the elements of the first input sequence.","nodes":[{"pos":[0,53],"content":"The type of the elements of the first input sequence.","nodes":[{"content":"The type of the elements of the first input sequence.","pos":[0,53]}]}],"pos":[623563,623617],"yaml":true},{"content":"The type of the elements of the second input sequence.","nodes":[{"pos":[0,54],"content":"The type of the elements of the second input sequence.","nodes":[{"content":"The type of the elements of the second input sequence.","pos":[0,54]}]}],"pos":[623654,623709],"yaml":true},{"content":"The type of the elements of the result sequence.","nodes":[{"pos":[0,48],"content":"The type of the elements of the result sequence.","nodes":[{"content":"The type of the elements of the result sequence.","pos":[0,48]}]}],"pos":[623746,623795],"yaml":true},{"content":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains merged elements of two input sequences.","nodes":[{"pos":[0,102],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Linq.IQueryable`1\"&gt;&lt;/xref&gt;</ph> that contains merged elements of two input sequences.","source":"An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains merged elements of two input sequences."}],"pos":[623870,623973],"yaml":true},{"content":"<code>source1</code> or <code>source2</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;source1&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;source2&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>source1</code> or <code>source2</code> is `null`."}],"pos":[624131,624187],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Linq.Queryable\n  commentId: T:System.Linq.Queryable\n  id: Queryable\n  children:\n  - System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})\n  - System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})\n  - System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})\n  - System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.Append``1(System.Linq.IQueryable{``0},``0)\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})\n  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\n  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\n  - System.Linq.Queryable.Cast``1(System.Linq.IQueryable)\n  - System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)\n  - System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\n  - System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)\n  - System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)\n  - System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})\n  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})\n  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})\n  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  - System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})\n  - System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})\n  - System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  - System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  - System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.OfType``1(System.Linq.IQueryable)\n  - System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  - System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  - System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Queryable.Prepend``1(System.Linq.IQueryable{``0},``0)\n  - System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})\n  - System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  - System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  - System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  - System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})\n  - System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})\n  - System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})\n  - System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)\n  - System.Linq.Queryable.SkipLast``1(System.Linq.IQueryable{``0},System.Int32)\n  - System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})\n  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\n  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\n  - System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)\n  - System.Linq.Queryable.TakeLast``1(System.Linq.IQueryable{``0},System.Int32)\n  - System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  - System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  - System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  - System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  - System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  - System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  langs:\n  - csharp\n  name: Queryable\n  nameWithType: Queryable\n  fullName: System.Linq.Queryable\n  type: Class\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Provides a set of `static` (`Shared` in Visual Basic) methods for querying data structures that implement <xref href=\"System.Linq.IQueryable`1\"></xref>.\n  remarks: \"The set of methods declared in the <xref:System.Linq.Queryable> class provides an implementation of the standard query operators for querying data sources that implement <xref:System.Linq.IQueryable%601>. The standard query operators are general purpose methods that follow the [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.  \\n  \\n The majority of the methods in this class are defined as extension methods that extend the <xref:System.Linq.IQueryable%601> type. This means they can be called like an instance method on any object that implements <xref:System.Linq.IQueryable%601>. These methods that extend <xref:System.Linq.IQueryable%601> do not perform any querying directly. Instead, their functionality is to build an <xref:System.Linq.Expressions.Expression> object, which is an expression tree that represents the cumulative query. The methods then pass the new expression tree to either the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method or the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the input <xref:System.Linq.IQueryable%601>. The method that is called depends on whether the <xref:System.Linq.Queryable> method returns a singleton value, in which case <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> is called, or has enumerable results, in which case <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is called.  \\n  \\n The actual query execution on the target data is performed by a class that implements <xref:System.Linq.IQueryable%601>. The expectation of any <xref:System.Linq.IQueryable%601> implementation is that the result of executing an expression tree that was constructed by a <xref:System.Linq.Queryable> standard query operator method is equivalent to the result of calling the corresponding method in the <xref:System.Linq.Enumerable> class, if the data source were an <xref:System.Collections.Generic.IEnumerable%601>.  \\n  \\n In addition to the standard query operator methods that operate on <xref:System.Linq.IQueryable%601> objects, this class also contains a method, <xref:System.Linq.Queryable.AsQueryable%2A>, which types <xref:System.Collections.IEnumerable> objects as <xref:System.Linq.IQueryable> objects.\"\n  syntax:\n    content: public static class Queryable\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})\n  commentId: M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})\n  id: Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Aggregate<TSource,TAccumulate,TResult>(IQueryable<TSource>, TAccumulate, Expression<Func<TAccumulate,TSource,TAccumulate>>, Expression<Func<TAccumulate,TResult>>)\n  nameWithType: Queryable.Aggregate<TSource,TAccumulate,TResult>(IQueryable<TSource>, TAccumulate, Expression<Func<TAccumulate,TSource,TAccumulate>>, Expression<Func<TAccumulate,TResult>>)\n  fullName: Queryable.Aggregate<TSource,TAccumulate,TResult>(IQueryable<TSource>, TAccumulate, Expression<Func<TAccumulate,TSource,TAccumulate>>, Expression<Func<TAccumulate,TResult>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that the specified function, `func`, is applied to each value in the source sequence and the accumulated value is returned. The `seed` parameter is used as the seed value for the accumulated value, which corresponds to the first parameter in `func`. The final accumulated value is passed to `selector` to obtain the result value.  \\n  \\n To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <xref:System.Linq.Queryable.Count%2A> and <xref:System.Linq.Queryable.LongCount%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Queryable.Max%2A>, <xref:System.Linq.Queryable.Min%2A>, <xref:System.Linq.Queryable.Sum%2A>, and <xref:System.Linq.Queryable.Average%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29> to apply an accumulator function and a result selector.  \\n  \\n [!code-csharp[System.Linq.Queryable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#3)]\\n [!code-vb[System.Linq.Queryable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#3)]\"\n  syntax:\n    content: public static TResult Aggregate<TSource,TAccumulate,TResult> (this System.Linq.IQueryable<TSource> source, TAccumulate seed, System.Linq.Expressions.Expression<Func<TAccumulate,TSource,TAccumulate>> func, System.Linq.Expressions.Expression<Func<TAccumulate,TResult>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence to aggregate over.\n    - id: seed\n      type: TAccumulate\n      description: The initial accumulator value.\n    - id: func\n      type: System.Linq.Expressions.Expression{System.Func{TAccumulate,TSource,TAccumulate}}\n      description: An accumulator function to invoke on each element.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TAccumulate,TResult}}\n      description: A function to transform the final accumulator value into the result value.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TAccumulate\n      description: The type of the accumulator value.\n    - id: TResult\n      description: The type of the resulting value.\n    return:\n      type: TResult\n      description: The transformed final accumulator value.\n  overload: System.Linq.Queryable.Aggregate``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>func</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})\n  commentId: M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})\n  id: Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Aggregate<TSource,TAccumulate>(IQueryable<TSource>, TAccumulate, Expression<Func<TAccumulate,TSource,TAccumulate>>)\n  nameWithType: Queryable.Aggregate<TSource,TAccumulate>(IQueryable<TSource>, TAccumulate, Expression<Func<TAccumulate,TSource,TAccumulate>>)\n  fullName: Queryable.Aggregate<TSource,TAccumulate>(IQueryable<TSource>, TAccumulate, Expression<Func<TAccumulate,TSource,TAccumulate>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that the specified function, `func`, is applied to each value in the source sequence and the accumulated value is returned. The `seed` parameter is used as the seed value for the accumulated value, which corresponds to the first parameter in `func`.  \\n  \\n To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <xref:System.Linq.Queryable.Count%2A> and <xref:System.Linq.Queryable.LongCount%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Queryable.Max%2A>, <xref:System.Linq.Queryable.Min%2A>, <xref:System.Linq.Queryable.Sum%2A>, and <xref:System.Linq.Queryable.Average%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29> to apply an accumulator function when a seed value is provided to the function.  \\n  \\n [!code-csharp[System.Linq.Queryable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#2)]\\n [!code-vb[System.Linq.Queryable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#2)]\"\n  syntax:\n    content: public static TAccumulate Aggregate<TSource,TAccumulate> (this System.Linq.IQueryable<TSource> source, TAccumulate seed, System.Linq.Expressions.Expression<Func<TAccumulate,TSource,TAccumulate>> func);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence to aggregate over.\n    - id: seed\n      type: TAccumulate\n      description: The initial accumulator value.\n    - id: func\n      type: System.Linq.Expressions.Expression{System.Func{TAccumulate,TSource,TAccumulate}}\n      description: An accumulator function to invoke on each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TAccumulate\n      description: The type of the accumulator value.\n    return:\n      type: TAccumulate\n      description: The final accumulator value.\n  overload: System.Linq.Queryable.Aggregate``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>func</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})\n  commentId: M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})\n  id: Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Aggregate<TSource>(IQueryable<TSource>, Expression<Func<TSource,TSource,TSource>>)\n  nameWithType: Queryable.Aggregate<TSource>(IQueryable<TSource>, Expression<Func<TSource,TSource,TSource>>)\n  fullName: Queryable.Aggregate<TSource>(IQueryable<TSource>, Expression<Func<TSource,TSource,TSource>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Applies an accumulator function over a sequence.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that the specified function, `func`, is applied to each value in the source sequence and the accumulated value is returned. The first value in `source` is used as the seed value for the accumulated value, which corresponds to the first parameter in `func`.  \\n  \\n To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <xref:System.Linq.Queryable.Count%2A> and <xref:System.Linq.Queryable.LongCount%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Queryable.Max%2A>, <xref:System.Linq.Queryable.Min%2A>, <xref:System.Linq.Queryable.Sum%2A>, and <xref:System.Linq.Queryable.Average%2A>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29> to build a sentence from an array of strings.  \\n  \\n [!code-csharp[System.Linq.Queryable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#1)]\\n [!code-vb[System.Linq.Queryable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#1)]\"\n  syntax:\n    content: public static TSource Aggregate<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TSource,TSource>> func);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence to aggregate over.\n    - id: func\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TSource,TSource}}\n      description: An accumulator function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The final accumulator value.\n  overload: System.Linq.Queryable.Aggregate``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>func</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: All<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.All<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.All<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Determines whether all the elements of a sequence satisfy a condition.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the `source` parameter's type. The expected behavior is that it determines if all the elements in `source` satisfy the condition in `predicate`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> to determine whether all the elements in a sequence satisfy a condition.  \\n  \\n [!code-csharp[System.Linq.Queryable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#4)]\\n [!code-vb[System.Linq.Queryable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#4)]  \\n  \\n The Boolean value that the <xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method returns is typically used in the predicate of a `where` clause (`Where` clause in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) or a direct call to the <xref:System.Linq.Queryable.Where%2A> method. The following example demonstrates this use of the `All` method.  \\n  \\n [!code-csharp[System.Linq.Queryable#134](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#134)]\\n [!code-vb[System.Linq.Queryable#134](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#134)]\"\n  syntax:\n    content: public static bool All<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence whose elements to test for a condition.\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}\n      description: A function to test each element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, `false`.'\n  overload: System.Linq.Queryable.All``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})\n  id: Any``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Any<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Any<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Any<TSource>(IQueryable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Determines whether a sequence contains any elements.\n  remarks: \"The <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it determines if `source` contains any elements.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to determine whether a sequence contains any elements.  \\n  \\n [!code-csharp[System.Linq.Queryable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#5)]\\n [!code-vb[System.Linq.Queryable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#5)]  \\n  \\n The Boolean value that the <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method returns is typically used in the predicate of a `where` clause (`Where` clause in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]) or a direct call to the <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method. The following example demonstrates this use of the `Any` method.  \\n  \\n [!code-csharp[System.Linq.Queryable#135](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#135)]\\n [!code-vb[System.Linq.Queryable#135](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#135)]\"\n  syntax:\n    content: public static bool Any<TSource> (this System.Linq.IQueryable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence to check for being empty.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if the source sequence contains any elements; otherwise, `false`.'\n  overload: System.Linq.Queryable.Any``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Any<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.Any<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.Any<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Determines whether any element of a sequence satisfies a condition.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it determines if any of the elements of `source` satisfy the condition specified by `predicate`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> to determine whether any element in a sequence satisfies a condition.  \\n  \\n [!code-csharp[System.Linq.Queryable#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#6)]\\n [!code-vb[System.Linq.Queryable#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#6)]\"\n  syntax:\n    content: public static bool Any<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence whose elements to test for a condition.\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}\n      description: A function to test each element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if any elements in the source sequence pass the test in the specified predicate; otherwise, `false`.'\n  overload: System.Linq.Queryable.Any``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Append``1(System.Linq.IQueryable{``0},``0)\n  commentId: M:System.Linq.Queryable.Append``1(System.Linq.IQueryable{``0},``0)\n  id: Append``1(System.Linq.IQueryable{``0},``0)\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Append<TSource>(IQueryable<TSource>, TSource)\n  nameWithType: Queryable.Append<TSource>(IQueryable<TSource>, TSource)\n  fullName: Queryable.Append<TSource>(IQueryable<TSource>, TSource)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> Append<TSource> (this System.Linq.IQueryable<TSource> source, TSource element);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: ''\n    - id: element\n      type: TSource\n      description: ''\n    typeParameters:\n    - id: TSource\n      description: ''\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: ''\n  overload: System.Linq.Queryable.Append``1*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  id: AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Converts an <xref href=\"System.Collections.IEnumerable\"></xref> to an <xref href=\"System.Linq.IQueryable\"></xref>.\n  remarks: \"If the type of `source` implements <xref:System.Linq.IQueryable%601>, <xref:System.Linq.Queryable.AsQueryable%28System.Collections.IEnumerable%29> returns it directly. Otherwise, it returns an <xref:System.Linq.IQueryable%601> that executes queries by calling the equivalent query operator methods in <xref:System.Linq.Enumerable> instead of those in <xref:System.Linq.Queryable>.  \\n  \\n This method assumes that `source` implements <xref:System.Collections.Generic.IEnumerable%601> for some `T`. At runtime, the result is of type <xref:System.Linq.IQueryable%601> for the same `T`. This method is useful in dynamic scenarios when you do not statically know the type of `T`.\"\n  syntax:\n    content: public static System.Linq.IQueryable AsQueryable (this System.Collections.IEnumerable source);\n    parameters:\n    - id: source\n      type: System.Collections.IEnumerable\n      description: A sequence to convert.\n    return:\n      type: System.Linq.IQueryable\n      description: An <xref href=\"System.Linq.IQueryable\"></xref> that represents the input sequence.\n  overload: System.Linq.Queryable.AsQueryable*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>source</code> does not implement <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> for some <code>T</code>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  id: AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: AsQueryable<TElement>(IEnumerable<TElement>)\n  nameWithType: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)\n  fullName: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Converts a generic <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> to a generic <xref href=\"System.Linq.IQueryable`1\"></xref>.\n  remarks: If the type of `source` implements <xref:System.Linq.IQueryable%601>, <xref:System.Linq.Queryable.AsQueryable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> returns it directly. Otherwise, it returns an <xref:System.Linq.IQueryable%601> that executes queries by calling the equivalent query operator methods in <xref:System.Linq.Enumerable> instead of those in <xref:System.Linq.Queryable>.\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.AsQueryable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to convert an <xref:System.Collections.Generic.IEnumerable%601> to an <xref:System.Linq.IQueryable%601>.  \\n  \\n [!code-csharp[System.Linq.Queryable#125](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#125)]\\n [!code-vb[System.Linq.Queryable#125](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#125)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TElement> AsQueryable<TElement> (this System.Collections.Generic.IEnumerable<TElement> source);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TElement}\n      description: A sequence to convert.\n    typeParameters:\n    - id: TElement\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Linq.IQueryable{TElement}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that represents the input sequence.\n  overload: System.Linq.Queryable.AsQueryable``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})\n  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})\n  id: Average(System.Linq.IQueryable{System.Single})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Average(IQueryable<Single>)\n  nameWithType: Queryable.Average(IQueryable<Single>)\n  fullName: Queryable.Average(IQueryable<Single>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of <xref href=\"System.Single\"></xref> values.\n  remarks: \"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> to calculate the average of a sequence of values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#8)]\\n [!code-vb[System.Linq.Queryable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#8)]\"\n  syntax:\n    content: public static float Average (this System.Linq.IQueryable<float> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Single}\n      description: A sequence of <xref href=\"System.Single\"></xref> values to calculate the average of.\n    return:\n      type: System.Single\n      description: The average of the sequence of values.\n  overload: System.Linq.Queryable.Average*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})\n  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})\n  id: Average(System.Linq.IQueryable{System.Nullable{System.Single}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Average(IQueryable<Nullable<Single>>)\n  nameWithType: Queryable.Average(IQueryable<Nullable<Single>>)\n  fullName: Queryable.Average(IQueryable<Nullable<Single>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of nullable <xref href=\"System.Single\"></xref> values.\n  remarks: \"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate the average of a sequence of values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#12)]\\n [!code-vb[System.Linq.Queryable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#12)]\"\n  syntax:\n    content: public static Nullable<float> Average (this System.Linq.IQueryable<Nullable<float>> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Nullable{System.Single}}\n      description: A sequence of nullable <xref href=\"System.Single\"></xref> values to calculate the average of.\n    return:\n      type: System.Nullable{System.Single}\n      description: The average of the sequence of values, or `null` if the source sequence is empty or contains only `null` values.\n  overload: System.Linq.Queryable.Average*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})\n  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})\n  id: Average(System.Linq.IQueryable{System.Nullable{System.Int64}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Average(IQueryable<Nullable<Int64>>)\n  nameWithType: Queryable.Average(IQueryable<Nullable<Int64>>)\n  fullName: Queryable.Average(IQueryable<Nullable<Int64>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of nullable <xref href=\"System.Int64\"></xref> values.\n  remarks: \"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate the average of a sequence of values.  \\n  \\n [!code-csharp[System.Linq.Queryable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#12)]\\n [!code-vb[System.Linq.Queryable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#12)]\"\n  syntax:\n    content: public static Nullable<double> Average (this System.Linq.IQueryable<Nullable<long>> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Nullable{System.Int64}}\n      description: A sequence of nullable <xref href=\"System.Int64\"></xref> values to calculate the average of.\n    return:\n      type: System.Nullable{System.Double}\n      description: The average of the sequence of values, or `null` if the source sequence is empty or contains only `null` values.\n  overload: System.Linq.Queryable.Average*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})\n  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})\n  id: Average(System.Linq.IQueryable{System.Nullable{System.Double}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Average(IQueryable<Nullable<Double>>)\n  nameWithType: Queryable.Average(IQueryable<Nullable<Double>>)\n  fullName: Queryable.Average(IQueryable<Nullable<Double>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of nullable <xref href=\"System.Double\"></xref> values.\n  remarks: \"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate the average of a sequence of values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#12)]\\n [!code-vb[System.Linq.Queryable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#12)]\"\n  syntax:\n    content: public static Nullable<double> Average (this System.Linq.IQueryable<Nullable<double>> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Nullable{System.Double}}\n      description: A sequence of nullable <xref href=\"System.Double\"></xref> values to calculate the average of.\n    return:\n      type: System.Nullable{System.Double}\n      description: The average of the sequence of values, or `null` if the source sequence is empty or contains only `null` values.\n  overload: System.Linq.Queryable.Average*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})\n  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})\n  id: Average(System.Linq.IQueryable{System.Nullable{System.Int32}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Average(IQueryable<Nullable<Int32>>)\n  nameWithType: Queryable.Average(IQueryable<Nullable<Int32>>)\n  fullName: Queryable.Average(IQueryable<Nullable<Int32>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of nullable <xref href=\"System.Int32\"></xref> values.\n  remarks: \"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate the average of a sequence of values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#12)]\\n [!code-vb[System.Linq.Queryable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#12)]\"\n  syntax:\n    content: public static Nullable<double> Average (this System.Linq.IQueryable<Nullable<int>> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Nullable{System.Int32}}\n      description: A sequence of nullable <xref href=\"System.Int32\"></xref> values to calculate the average of.\n    return:\n      type: System.Nullable{System.Double}\n      description: The average of the sequence of values, or `null` if the source sequence is empty or contains only `null` values.\n  overload: System.Linq.Queryable.Average*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})\n  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})\n  id: Average(System.Linq.IQueryable{System.Int64})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Average(IQueryable<Int64>)\n  nameWithType: Queryable.Average(IQueryable<Int64>)\n  fullName: Queryable.Average(IQueryable<Int64>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of <xref href=\"System.Int64\"></xref> values.\n  remarks: \"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> to calculate the average of a sequence of values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#8)]\\n [!code-vb[System.Linq.Queryable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#8)]\"\n  syntax:\n    content: public static double Average (this System.Linq.IQueryable<long> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Int64}\n      description: A sequence of <xref href=\"System.Int64\"></xref> values to calculate the average of.\n    return:\n      type: System.Double\n      description: The average of the sequence of values.\n  overload: System.Linq.Queryable.Average*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})\n  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})\n  id: Average(System.Linq.IQueryable{System.Int32})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Average(IQueryable<Int32>)\n  nameWithType: Queryable.Average(IQueryable<Int32>)\n  fullName: Queryable.Average(IQueryable<Int32>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of <xref href=\"System.Int32\"></xref> values.\n  remarks: \"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> to calculate the average of a sequence of values.  \\n  \\n [!code-csharp[System.Linq.Queryable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#8)]\\n [!code-vb[System.Linq.Queryable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#8)]\"\n  syntax:\n    content: public static double Average (this System.Linq.IQueryable<int> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Int32}\n      description: A sequence of <xref href=\"System.Int32\"></xref> values to calculate the average of.\n    return:\n      type: System.Double\n      description: The average of the sequence of values.\n  overload: System.Linq.Queryable.Average*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})\n  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})\n  id: Average(System.Linq.IQueryable{System.Double})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Average(IQueryable<Double>)\n  nameWithType: Queryable.Average(IQueryable<Double>)\n  fullName: Queryable.Average(IQueryable<Double>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of <xref href=\"System.Double\"></xref> values.\n  remarks: \"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> to calculate the average of a sequence of values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#8)]\\n [!code-vb[System.Linq.Queryable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#8)]\"\n  syntax:\n    content: public static double Average (this System.Linq.IQueryable<double> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Double}\n      description: A sequence of <xref href=\"System.Double\"></xref> values to calculate the average of.\n    return:\n      type: System.Double\n      description: The average of the sequence of values.\n  overload: System.Linq.Queryable.Average*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})\n  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})\n  id: Average(System.Linq.IQueryable{System.Decimal})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Average(IQueryable<Decimal>)\n  nameWithType: Queryable.Average(IQueryable<Decimal>)\n  fullName: Queryable.Average(IQueryable<Decimal>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of <xref href=\"System.Decimal\"></xref> values.\n  remarks: \"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> to calculate the average of a sequence of values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#8)]\\n [!code-vb[System.Linq.Queryable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#8)]\"\n  syntax:\n    content: public static decimal Average (this System.Linq.IQueryable<decimal> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Decimal}\n      description: A sequence of <xref href=\"System.Decimal\"></xref> values to calculate the average of.\n    return:\n      type: System.Decimal\n      description: The average of the sequence of values.\n  overload: System.Linq.Queryable.Average*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})\n  id: Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Average(IQueryable<Nullable<Decimal>>)\n  nameWithType: Queryable.Average(IQueryable<Nullable<Decimal>>)\n  fullName: Queryable.Average(IQueryable<Nullable<Decimal>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of nullable <xref href=\"System.Decimal\"></xref> values.\n  remarks: \"The <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate the average of a sequence of values.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#12)]\\n [!code-vb[System.Linq.Queryable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#12)]\"\n  syntax:\n    content: public static Nullable<decimal> Average (this System.Linq.IQueryable<Nullable<decimal>> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Nullable{System.Decimal}}\n      description: A sequence of nullable <xref href=\"System.Decimal\"></xref> values to calculate the average of.\n    return:\n      type: System.Nullable{System.Decimal}\n      description: The average of the sequence of values, or `null` if the source sequence is empty or contains only `null` values.\n  overload: System.Linq.Queryable.Average*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\n  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\n  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Single>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Single>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Single>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of <xref href=\"System.Single\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#18)]\\n [!code-vb[System.Linq.Queryable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#18)]\"\n  syntax:\n    content: public static float Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,float>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to calculate the average of.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Single}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Single\n      description: The average of the sequence of values.\n  overload: System.Linq.Queryable.Average``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\n  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\n  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Single>>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Single>>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Single>>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of nullable <xref href=\"System.Single\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#18)]\\n [!code-vb[System.Linq.Queryable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#18)]\"\n  syntax:\n    content: public static Nullable<float> Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<float>>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to calculate the average of.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Single}}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Single}\n      description: The average of the sequence of values, or `null` if the <code>source</code> sequence is empty or contains only `null` values.\n  overload: System.Linq.Queryable.Average``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\n  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\n  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int64>>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int64>>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int64>>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of nullable <xref href=\"System.Int64\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#18)]\\n [!code-vb[System.Linq.Queryable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#18)]\"\n  syntax:\n    content: public static Nullable<double> Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<long>>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to calculate the average of.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Int64}}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Double}\n      description: The average of the sequence of values, or `null` if the <code>source</code> sequence is empty or contains only `null` values.\n  overload: System.Linq.Queryable.Average``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\n  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\n  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int32>>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int32>>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int32>>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of nullable <xref href=\"System.Int32\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#18)]\\n [!code-vb[System.Linq.Queryable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#18)]\"\n  syntax:\n    content: public static Nullable<double> Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<int>>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to calculate the average of.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Int32}}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Double}\n      description: The average of the sequence of values, or `null` if the <code>source</code> sequence is empty or contains only `null` values.\n  overload: System.Linq.Queryable.Average``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\n  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\n  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Double>>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Double>>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Double>>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of nullable <xref href=\"System.Double\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#18)]\\n [!code-vb[System.Linq.Queryable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#18)]\"\n  syntax:\n    content: public static Nullable<double> Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<double>>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to calculate the average of.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Double}}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Double}\n      description: The average of the sequence of values, or `null` if the <code>source</code> sequence is empty or contains only `null` values.\n  overload: System.Linq.Queryable.Average``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\n  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\n  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int64>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int64>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int64>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of <xref href=\"System.Int64\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#18)]\\n [!code-vb[System.Linq.Queryable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#18)]\"\n  syntax:\n    content: public static double Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,long>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to calculate the average of.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Int64}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Double\n      description: The average of the sequence of values.\n  overload: System.Linq.Queryable.Average``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\n  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\n  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of <xref href=\"System.Int32\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.  \\n  \\n [!code-csharp[System.Linq.Queryable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#18)]\\n [!code-vb[System.Linq.Queryable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#18)]\"\n  syntax:\n    content: public static double Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to calculate the average of.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Double\n      description: The average of the sequence of values.\n  overload: System.Linq.Queryable.Average``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\n  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\n  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Double>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Double>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Double>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of <xref href=\"System.Double\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#18)]\\n [!code-vb[System.Linq.Queryable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#18)]\"\n  syntax:\n    content: public static double Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,double>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to calculate the average of.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Double}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Double\n      description: The average of the sequence of values.\n  overload: System.Linq.Queryable.Average``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\n  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\n  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Decimal>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Decimal>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Decimal>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of <xref href=\"System.Decimal\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#18)]\\n [!code-vb[System.Linq.Queryable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#18)]\"\n  syntax:\n    content: public static decimal Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,decimal>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values that are used to calculate an average.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Decimal}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Decimal\n      description: The average of the sequence of values.\n  overload: System.Linq.Queryable.Average``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> contains no elements.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\n  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\n  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Decimal>>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Decimal>>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Decimal>>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the average of a sequence of nullable <xref href=\"System.Decimal\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#18)]\\n [!code-vb[System.Linq.Queryable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#18)]\"\n  syntax:\n    content: public static Nullable<decimal> Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<decimal>>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to calculate the average of.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Decimal}}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Decimal}\n      description: The average of the sequence of values, or `null` if the <code>source</code> sequence is empty or contains only `null` values.\n  overload: System.Linq.Queryable.Average``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Cast``1(System.Linq.IQueryable)\n  commentId: M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)\n  id: Cast``1(System.Linq.IQueryable)\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Cast<TResult>(IQueryable)\n  nameWithType: Queryable.Cast<TResult>(IQueryable)\n  fullName: Queryable.Cast<TResult>(IQueryable)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Converts the elements of an <xref href=\"System.Linq.IQueryable\"></xref> to the specified type.\n  remarks: \"The <xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it converts the values in `source` to type `TResult`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29> to convert objects in a sequence to type <xref:System.String>.  \\n  \\n [!code-csharp[System.Linq.Queryable#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#19)]\\n [!code-vb[System.Linq.Queryable#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#19)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TResult> Cast<TResult> (this System.Linq.IQueryable source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable\n      description: The <xref href=\"System.Linq.IQueryable\"></xref> that contains the elements to be converted.\n    typeParameters:\n    - id: TResult\n      description: The type to convert the elements of <code>source</code> to.\n    return:\n      type: System.Linq.IQueryable{TResult}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains each element of the source sequence converted to the specified type.\n  overload: System.Linq.Queryable.Cast``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: An element in the sequence cannot be cast to type <code>TResult</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  id: Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Concat<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  nameWithType: Queryable.Concat<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  fullName: Queryable.Concat<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Concatenates two sequences.\n  remarks: \"The <xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that the elements in `source2` are concatenated to those of `source1` to create a new sequence.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to concatenate two sequences.  \\n  \\n [!code-csharp[System.Linq.Queryable#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#20)]\\n [!code-vb[System.Linq.Queryable#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#20)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> Concat<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2);\n    parameters:\n    - id: source1\n      type: System.Linq.IQueryable{TSource}\n      description: The first sequence to concatenate.\n    - id: source2\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: The sequence to concatenate to the first sequence.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of the input sequences.\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the concatenated elements of the two input sequences.\n  overload: System.Linq.Queryable.Concat``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source1</code> or <code>source2</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  id: Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Contains<TSource>(IQueryable<TSource>, TSource, IEqualityComparer<TSource>)\n  nameWithType: Queryable.Contains<TSource>(IQueryable<TSource>, TSource, IEqualityComparer<TSource>)\n  fullName: Queryable.Contains<TSource>(IQueryable<TSource>, TSource, IEqualityComparer<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Determines whether a sequence contains a specified element by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>.\n  remarks: \"The <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it determines if `source` contains `item` by using `comparer` to compare values.\"\n  syntax:\n    content: public static bool Contains<TSource> (this System.Linq.IQueryable<TSource> source, TSource item, System.Collections.Generic.IEqualityComparer<TSource> comparer);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> in which to locate <code>item</code>.\n    - id: item\n      type: TSource\n      description: The object to locate in the sequence.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if the input sequence contains an element that has the specified value; otherwise, `false`.'\n  overload: System.Linq.Queryable.Contains``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)\n  commentId: M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)\n  id: Contains``1(System.Linq.IQueryable{``0},``0)\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Contains<TSource>(IQueryable<TSource>, TSource)\n  nameWithType: Queryable.Contains<TSource>(IQueryable<TSource>, TSource)\n  fullName: Queryable.Contains<TSource>(IQueryable<TSource>, TSource)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Determines whether a sequence contains a specified element by using the default equality comparer.\n  remarks: \"The <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it determines if `source` contains `item`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> to determine whether a sequence contains a specific element.  \\n  \\n [!code-csharp[System.Linq.Queryable#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#21)]\\n [!code-vb[System.Linq.Queryable#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#21)]\"\n  syntax:\n    content: public static bool Contains<TSource> (this System.Linq.IQueryable<TSource> source, TSource item);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> in which to locate <code>item</code>.\n    - id: item\n      type: TSource\n      description: The object to locate in the sequence.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if the input sequence contains an element that has the specified value; otherwise, `false`.'\n  overload: System.Linq.Queryable.Contains``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})\n  id: Count``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Count<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Count<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Count<TSource>(IQueryable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the number of elements in a sequence.\n  remarks: \"The <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it counts the number of items in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to count the elements in a sequence.  \\n  \\n [!code-csharp[System.Linq.Queryable#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#22)]\\n [!code-vb[System.Linq.Queryable#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#22)]\"\n  syntax:\n    content: public static int Count<TSource> (this System.Linq.IQueryable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: The <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements to be counted.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Int32\n      description: The number of elements in the input sequence.\n  overload: System.Linq.Queryable.Count``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The number of elements in <code>source</code> is larger than <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Count<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.Count<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.Count<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the number of elements in the specified sequence that satisfies a condition.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it counts the number of items in `source` that satisfy the condition specified by `predicate`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> to count the elements in a sequence that satisfy a condition.  \\n  \\n [!code-csharp[System.Linq.Queryable#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#23)]\\n [!code-vb[System.Linq.Queryable#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#23)]\"\n  syntax:\n    content: public static int Count<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements to be counted.\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}\n      description: A function to test each element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Int32\n      description: The number of elements in the sequence that satisfies the condition in the predicate function.\n  overload: System.Linq.Queryable.Count``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The number of elements in <code>source</code> is larger than <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})\n  id: DefaultIfEmpty``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: DefaultIfEmpty<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>)\n  fullName: Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.\n  remarks: \"The <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns `source` if it is not empty. Otherwise, it returns an <xref:System.Linq.IQueryable%601> that contains `default(TSource)`.\"\n  example:\n  - \"The following code examples demonstrate how to use <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to provide a default value in case the source sequence is empty.  \\n  \\n [!code-csharp[System.Linq.Queryable#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#24)]\\n [!code-vb[System.Linq.Queryable#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#24)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> DefaultIfEmpty<TSource> (this System.Linq.IQueryable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: The <xref href=\"System.Linq.IQueryable`1\"></xref> to return a default value for if empty.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains `default`(<code>TSource</code>) if <code>source</code> is empty; otherwise, <code>source</code>.\n  overload: System.Linq.Queryable.DefaultIfEmpty``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\n  commentId: M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\n  id: DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: DefaultIfEmpty<TSource>(IQueryable<TSource>, TSource)\n  nameWithType: Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>, TSource)\n  fullName: Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>, TSource)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.\n  remarks: \"The <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns `source` if it is not empty. Otherwise, it returns an <xref:System.Linq.IQueryable%601> that contains `defaultValue`.\"\n  example:\n  - \"The following code example shows a situation in which it is useful to call <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> in a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query. A default value is passed to <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> in this example.  \\n  \\n [!code-csharp[System.Linq.Queryable#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#25)]\\n [!code-vb[System.Linq.Queryable#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#25)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> DefaultIfEmpty<TSource> (this System.Linq.IQueryable<TSource> source, TSource defaultValue);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: The <xref href=\"System.Linq.IQueryable`1\"></xref> to return the specified value for if empty.\n    - id: defaultValue\n      type: TSource\n      description: The value to return if the sequence is empty.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains <code>defaultValue</code> if <code>source</code> is empty; otherwise, <code>source</code>.\n  overload: System.Linq.Queryable.DefaultIfEmpty``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})\n  id: Distinct``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Distinct<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Distinct<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Distinct<TSource>(IQueryable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns distinct elements from a sequence by using the default equality comparer to compare values.\n  remarks: \"The <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns an unordered sequence of the unique items in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to return distinct elements from a sequence.  \\n  \\n [!code-csharp[System.Linq.Queryable#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#27)]\\n [!code-vb[System.Linq.Queryable#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#27)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> Distinct<TSource> (this System.Linq.IQueryable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: The <xref href=\"System.Linq.IQueryable`1\"></xref> to remove duplicates from.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains distinct elements from <code>source</code>.\n  overload: System.Linq.Queryable.Distinct``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Distinct<TSource>(IQueryable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Queryable.Distinct<TSource>(IQueryable<TSource>, IEqualityComparer<TSource>)\n  fullName: Queryable.Distinct<TSource>(IQueryable<TSource>, IEqualityComparer<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns distinct elements from a sequence by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.\n  remarks: \"The <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns an unordered sequence of the unique items in `source` by using `comparer` to compare values.\"\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> Distinct<TSource> (this System.Linq.IQueryable<TSource> source, System.Collections.Generic.IEqualityComparer<TSource> comparer);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: The <xref href=\"System.Linq.IQueryable`1\"></xref> to remove duplicates from.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains distinct elements from <code>source</code>.\n  overload: System.Linq.Queryable.Distinct``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>comparer</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)\n  commentId: M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)\n  id: ElementAt``1(System.Linq.IQueryable{``0},System.Int32)\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: ElementAt<TSource>(IQueryable<TSource>, Int32)\n  nameWithType: Queryable.ElementAt<TSource>(IQueryable<TSource>, Int32)\n  fullName: Queryable.ElementAt<TSource>(IQueryable<TSource>, Int32)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the element at a specified index in a sequence.\n  remarks: \"The <xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the item at position `index` in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> to return an element at a specific position in a sequence.  \\n  \\n [!code-csharp[System.Linq.Queryable#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#28)]\\n [!code-vb[System.Linq.Queryable#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#28)]\"\n  syntax:\n    content: public static TSource ElementAt<TSource> (this System.Linq.IQueryable<TSource> source, int index);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> to return an element from.\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to retrieve.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The element at the specified position in <code>source</code>.\n  overload: System.Linq.Queryable.ElementAt``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)\n  commentId: M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)\n  id: ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: ElementAtOrDefault<TSource>(IQueryable<TSource>, Int32)\n  nameWithType: Queryable.ElementAtOrDefault<TSource>(IQueryable<TSource>, Int32)\n  fullName: Queryable.ElementAtOrDefault<TSource>(IQueryable<TSource>, Int32)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the element at a specified index in a sequence or a default value if the index is out of range.\n  remarks: \"The <xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the item at position `index` in `source`, or `default(TSource)` if `index` is outside the bounds of `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29>. This example uses a value for `index` that is outside the bounds of the source sequence.  \\n  \\n [!code-csharp[System.Linq.Queryable#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#29)]\\n [!code-vb[System.Linq.Queryable#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#29)]\"\n  syntax:\n    content: public static TSource ElementAtOrDefault<TSource> (this System.Linq.IQueryable<TSource> source, int index);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> to return an element from.\n    - id: index\n      type: System.Int32\n      description: The zero-based index of the element to retrieve.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: <code>default</code>(<code>TSource</code>) if <code>index</code> is outside the bounds of <code>source</code>; otherwise, the element at the specified position in <code>source</code>.\n  overload: System.Linq.Queryable.ElementAtOrDefault``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Queryable.Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Queryable.Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Produces the set difference of two sequences by using the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.\n  remarks: \"The <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the`source1` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that all the elements in `source1` are returned except for those that are also in `source2`, and `comparer` is used to compare values.\"\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> Except<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer);\n    parameters:\n    - id: source1\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements that are not also in <code>source2</code> will be returned.\n    - id: source2\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements that also occur in the first sequence will not appear in the returned sequence.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of the input sequences.\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the set difference of the two sequences.\n  overload: System.Linq.Queryable.Except``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source1</code> or <code>source2</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  id: Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  nameWithType: Queryable.Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  fullName: Queryable.Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Produces the set difference of two sequences by using the default equality comparer to compare values.\n  remarks: \"The <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the`source1` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of  the `source1` parameter. The expected behavior is that all the elements in `source1` are returned except for those that are also in `source2`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return those elements that only appear in the first source sequence.  \\n  \\n [!code-csharp[System.Linq.Queryable#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#34)]\\n [!code-vb[System.Linq.Queryable#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#34)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> Except<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2);\n    parameters:\n    - id: source1\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements that are not also in <code>source2</code> will be returned.\n    - id: source2\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements that also occur in the first sequence will not appear in the returned sequence.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of the input sequences.\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the set difference of the two sequences.\n  overload: System.Linq.Queryable.Except``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source1</code> or <code>source2</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})\n  id: First``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: First<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.First<TSource>(IQueryable<TSource>)\n  fullName: Queryable.First<TSource>(IQueryable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the first element of a sequence.\n  remarks: \"The <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the first element in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to return the first element in a sequence.  \\n  \\n [!code-csharp[System.Linq.Queryable#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#35)]\\n [!code-vb[System.Linq.Queryable#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#35)]\"\n  syntax:\n    content: public static TSource First<TSource> (this System.Linq.IQueryable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: The <xref href=\"System.Linq.IQueryable`1\"></xref> to return the first element of.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The first element in <code>source</code>.\n  overload: System.Linq.Queryable.First``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The source sequence is empty.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: First<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.First<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.First<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the first element of a sequence that satisfies a specified condition.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the first element in `source` that satisfies the condition specified by `predicate`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> to return the first element of a sequence that satisfies a condition.  \\n  \\n [!code-csharp[System.Linq.Queryable#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#36)]\\n [!code-vb[System.Linq.Queryable#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#36)]\"\n  syntax:\n    content: public static TSource First<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> to return an element from.\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}\n      description: A function to test each element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The first element in <code>source</code> that passes the test in <code>predicate</code>.\n  overload: System.Linq.Queryable.First``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"No element satisfies the condition in <code>predicate</code>.  \\n  \\n -or-  \\n  \\n The source sequence is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})\n  id: FirstOrDefault``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: FirstOrDefault<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.FirstOrDefault<TSource>(IQueryable<TSource>)\n  fullName: Queryable.FirstOrDefault<TSource>(IQueryable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the first element of a sequence, or a default value if the sequence contains no elements.\n  remarks: \"The <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the first element in `source`, or a default value if `source` is empty.  \\n  \\n The <xref:System.Linq.Queryable.FirstOrDefault%2A> method does not provide a way to specify the default value to return if `source` is empty. If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> on an empty sequence.  \\n  \\n [!code-csharp[System.Linq.Queryable#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#37)]\\n [!code-vb[System.Linq.Queryable#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#37)]  \\n  \\n Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements. Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty. Then, call <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to obtain the first element. The following code example uses both techniques to obtain a default value of 1 if a collection of numeric months is empty. Because the default value for an integer is 0, which does not correspond to any month, the default value must be specified as 1 instead. The first result variable is checked for the unwanted default value after the query is completed. The second result variable is obtained by calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.  \\n  \\n [!code-csharp[System.Linq.Queryable#131](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#131)]\\n [!code-vb[System.Linq.Queryable#131](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#131)]\"\n  syntax:\n    content: public static TSource FirstOrDefault<TSource> (this System.Linq.IQueryable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: The <xref href=\"System.Linq.IQueryable`1\"></xref> to return the first element of.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: <code>default</code>(<code>TSource</code>) if <code>source</code> is empty; otherwise, the first element in <code>source</code>.\n  overload: System.Linq.Queryable.FirstOrDefault``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: FirstOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.FirstOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.FirstOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the first element in `source` that satisfies the condition in `predicate`, or a default value if no element satisfies the condition.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> by passing in a predicate. In the second query, there is no element in the sequence that satisfies the condition.  \\n  \\n [!code-csharp[System.Linq.Queryable#38](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#38)]\\n [!code-vb[System.Linq.Queryable#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#38)]\"\n  syntax:\n    content: public static TSource FirstOrDefault<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> to return an element from.\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}\n      description: A function to test each element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: <code>default</code>(<code>TSource</code>) if <code>source</code> is empty or if no element passes the test specified by <code>predicate</code>; otherwise, the first element in <code>source</code> that passes the test specified by <code>predicate</code>.\n  overload: System.Linq.Queryable.FirstOrDefault``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})\n  id: GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, Expression<Func<TKey,IEnumerable<TElement>,TResult>>, IEqualityComparer<TKey>)\n  nameWithType: Queryable.GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, Expression<Func<TKey,IEnumerable<TElement>,TResult>>, IEqualityComparer<TKey>)\n  fullName: Queryable.GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, Expression<Func<TKey,IEnumerable<TElement>,TResult>>, IEqualityComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by key values that are obtained by invoking `keySelector` on each element. The `comparer` parameter is used to compare key values. The `elementSelector` parameter is used to project the elements of each group, and the `resultSelector` parameter is used to obtain a result value from each group and its key.\"\n  syntax:\n    content: public static System.Linq.IQueryable<TResult> GroupBy<TSource,TKey,TElement,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<Func<TSource,TElement>> elementSelector, System.Linq.Expressions.Expression<Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group.\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}\n      description: A function to extract the key for each element.\n    - id: elementSelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TElement}}\n      description: A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\"></xref>.\n    - id: resultSelector\n      type: System.Linq.Expressions.Expression{System.Func{TKey,System.Collections.Generic.IEnumerable{TElement},TResult}}\n      description: A function to create a result value from each group.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by the function represented in <code>keySelector</code>.\n    - id: TElement\n      description: The type of the elements in each <xref href=\"System.Linq.IGrouping`2\"></xref>.\n    - id: TResult\n      description: The type of the result value returned by <code>resultSelector</code>.\n    return:\n      type: System.Linq.IQueryable{TResult}\n      description: An <code>T:System.Linq.IQueryable`1</code> that has a type argument of <code>TResult</code> and where each element represents a projection over a group and its key.\n  overload: System.Linq.Queryable.GroupBy``4*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> or <code>elementSelector</code> or <code>resultSelector</code> or <code>comparer</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})\n  commentId: M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})\n  id: GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, Expression<Func<TKey,IEnumerable<TElement>,TResult>>)\n  nameWithType: Queryable.GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, Expression<Func<TKey,IEnumerable<TElement>,TResult>>)\n  fullName: Queryable.GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, Expression<Func<TKey,IEnumerable<TElement>,TResult>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by key values that are obtained by invoking `keySelector` on each element. The `elementSelector` parameter is used to project the elements of each group, and the `resultSelector` parameter is used to obtain a result value from each group and its key.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29> to group the elements of a sequence and project a sequence of results of type `TResult`.  \\n  \\n [!code-csharp[System.Linq.Queryable#130](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#130)]\\n [!code-vb[System.Linq.Queryable#130](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#130)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TResult> GroupBy<TSource,TKey,TElement,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<Func<TSource,TElement>> elementSelector, System.Linq.Expressions.Expression<Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>> resultSelector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group.\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}\n      description: A function to extract the key for each element.\n    - id: elementSelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TElement}}\n      description: A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\"></xref>.\n    - id: resultSelector\n      type: System.Linq.Expressions.Expression{System.Func{TKey,System.Collections.Generic.IEnumerable{TElement},TResult}}\n      description: A function to create a result value from each group.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by the function represented in <code>keySelector</code>.\n    - id: TElement\n      description: The type of the elements in each <xref href=\"System.Linq.IGrouping`2\"></xref>.\n    - id: TResult\n      description: The type of the result value returned by <code>resultSelector</code>.\n    return:\n      type: System.Linq.IQueryable{TResult}\n      description: An <code>T:System.Linq.IQueryable`1</code> that has a type argument of <code>TResult</code> and where each element represents a projection over a group and its key.\n  overload: System.Linq.Queryable.GroupBy``4*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> or <code>elementSelector</code> or <code>resultSelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})\n  commentId: M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})\n  id: GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: GroupBy<TSource,TKey,TElement>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>)\n  nameWithType: Queryable.GroupBy<TSource,TKey,TElement>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>)\n  fullName: Queryable.GroupBy<TSource,TKey,TElement>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element. It invokes `elementSelector` on each element to obtain a result element.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29> to group the elements of a sequence.  \\n  \\n [!code-csharp[System.Linq.Queryable#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#39)]\\n [!code-vb[System.Linq.Queryable#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#39)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource,TKey,TElement> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<Func<TSource,TElement>> elementSelector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group.\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}\n      description: A function to extract the key for each element.\n    - id: elementSelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TElement}}\n      description: A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\"></xref>.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by the function represented in <code>keySelector</code>.\n    - id: TElement\n      description: The type of the elements in each <xref href=\"System.Linq.IGrouping`2\"></xref>.\n    return:\n      type: System.Linq.IQueryable{System.Linq.IGrouping{TKey,TElement}}\n      description: An <code>IQueryable<IGrouping<TKey, TElement>></code> in C# or <code>IQueryable(Of IGrouping(Of TKey, TElement))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> contains a sequence of objects of type <code>TElement</code> and a key.\n  overload: System.Linq.Queryable.GroupBy``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})\n  id: GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: GroupBy<TSource,TKey,TElement>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, IEqualityComparer<TKey>)\n  nameWithType: Queryable.GroupBy<TSource,TKey,TElement>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, IEqualityComparer<TKey>)\n  fullName: Queryable.GroupBy<TSource,TKey,TElement>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, IEqualityComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Groups the elements of a sequence and projects the elements for each group by using a specified function. Key values are compared by using a specified comparer.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element. Key values are compared by using `comparer`. The `elementSelector` parameter is invoked on each element to obtain a result element.\"\n  syntax:\n    content: public static System.Linq.IQueryable<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource,TKey,TElement> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<Func<TSource,TElement>> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group.\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}\n      description: A function to extract the key for each element.\n    - id: elementSelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TElement}}\n      description: A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\"></xref>.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by the function represented in <code>keySelector</code>.\n    - id: TElement\n      description: The type of the elements in each <xref href=\"System.Linq.IGrouping`2\"></xref>.\n    return:\n      type: System.Linq.IQueryable{System.Linq.IGrouping{TKey,TElement}}\n      description: An <code>IQueryable<IGrouping<TKey, TElement>></code> in C# or <code>IQueryable(Of IGrouping(Of TKey, TElement))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> contains a sequence of objects of type <code>TElement</code> and a key.\n  overload: System.Linq.Queryable.GroupBy``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> or <code>elementSelector</code> or <code>comparer</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})\n  commentId: M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})\n  id: GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: GroupBy<TSource,TKey,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TKey,IEnumerable<TSource>,TResult>>)\n  nameWithType: Queryable.GroupBy<TSource,TKey,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TKey,IEnumerable<TSource>,TResult>>)\n  fullName: Queryable.GroupBy<TSource,TKey,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TKey,IEnumerable<TSource>,TResult>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element. The `resultSelector` parameter is used to obtain a result value from each group and its key.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29> to group the elements of a sequence and project a sequence of results of type `TResult`.  \\n  \\n [!code-csharp[System.Linq.Queryable#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#15)]\\n [!code-vb[System.Linq.Queryable#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#15)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TResult> GroupBy<TSource,TKey,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>> resultSelector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group.\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}\n      description: A function to extract the key for each element.\n    - id: resultSelector\n      type: System.Linq.Expressions.Expression{System.Func{TKey,System.Collections.Generic.IEnumerable{TSource},TResult}}\n      description: A function to create a result value from each group.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by the function represented in <code>keySelector</code>.\n    - id: TResult\n      description: The type of the result value returned by <code>resultSelector</code>.\n    return:\n      type: System.Linq.IQueryable{TResult}\n      description: An <code>T:System.Linq.IQueryable`1</code> that has a type argument of <code>TResult</code> and where each element represents a projection over a group and its key.\n  overload: System.Linq.Queryable.GroupBy``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> or <code>resultSelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})\n  id: GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: GroupBy<TSource,TKey,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TKey,IEnumerable<TSource>,TResult>>, IEqualityComparer<TKey>)\n  nameWithType: Queryable.GroupBy<TSource,TKey,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TKey,IEnumerable<TSource>,TResult>>, IEqualityComparer<TKey>)\n  fullName: Queryable.GroupBy<TSource,TKey,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TKey,IEnumerable<TSource>,TResult>>, IEqualityComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by key values that are obtained by invoking `keySelector` on each element. The `comparer` parameter is used to compare keys and the `resultSelector` parameter is used to obtain a result value from each group and its key.\"\n  syntax:\n    content: public static System.Linq.IQueryable<TResult> GroupBy<TSource,TKey,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group.\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}\n      description: A function to extract the key for each element.\n    - id: resultSelector\n      type: System.Linq.Expressions.Expression{System.Func{TKey,System.Collections.Generic.IEnumerable{TSource},TResult}}\n      description: A function to create a result value from each group.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by the function represented in <code>keySelector</code>.\n    - id: TResult\n      description: The type of the result value returned by <code>resultSelector</code>.\n    return:\n      type: System.Linq.IQueryable{TResult}\n      description: An <code>T:System.Linq.IQueryable`1</code> that has a type argument of <code>TResult</code> and where each element represents a projection over a group and its key.\n  overload: System.Linq.Queryable.GroupBy``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> or <code>resultSelector</code> or <code>comparer</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})\n  id: GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: GroupBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IEqualityComparer<TKey>)\n  nameWithType: Queryable.GroupBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IEqualityComparer<TKey>)\n  fullName: Queryable.GroupBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IEqualityComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by a key value. The key value is obtained by invoking `keySelector` on each element, and key values are compared by using `comparer`.\"\n  syntax:\n    content: public static System.Linq.IQueryable<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource,TKey> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group.\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}\n      description: A function to extract the key for each element.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare keys.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by the function represented in <code>keySelector</code>.\n    return:\n      type: System.Linq.IQueryable{System.Linq.IGrouping{TKey,TSource}}\n      description: An <code>IQueryable<IGrouping<TKey, TSource>></code> in C# or <code>IQueryable(Of IGrouping(Of TKey, TSource))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> contains a sequence of objects and a key.\n  overload: System.Linq.Queryable.GroupBy``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> or <code>comparer</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  commentId: M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  id: GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: GroupBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  nameWithType: Queryable.GroupBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  fullName: Queryable.GroupBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Groups the elements of a sequence according to a specified key selector function.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> to group the elements of a sequence.  \\n  \\n [!code-csharp[System.Linq.Queryable#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#14)]\\n [!code-vb[System.Linq.Queryable#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#14)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource,TKey> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to group.\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}\n      description: A function to extract the key for each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by the function represented in <code>keySelector</code>.\n    return:\n      type: System.Linq.IQueryable{System.Linq.IGrouping{TKey,TSource}}\n      description: An <code>IQueryable<IGrouping<TKey, TSource>></code> in C# or <code>IQueryable(Of IGrouping(Of TKey, TSource))</code> in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] where each <xref href=\"System.Linq.IGrouping`2\"></xref> object contains a sequence of objects and a key.\n  overload: System.Linq.Queryable.GroupBy``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})\n  commentId: M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})\n  id: GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,IEnumerable<TInner>,TResult>>)\n  nameWithType: Queryable.GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,IEnumerable<TInner>,TResult>>)\n  fullName: Queryable.GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,IEnumerable<TInner>,TResult>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29> depends on the implementation of the type of the `outer` parameter. The expected behavior is that the `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively. These keys are compared for equality to match each element in `outer` with zero or more elements from `inner`. Then the `resultSelector` function is invoked to project a result object from each group of correlated elements.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29> to perform a grouped join on two sequences.  \\n  \\n [!code-csharp[System.Linq.Queryable#40](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#40)]\\n [!code-vb[System.Linq.Queryable#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#40)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TResult> GroupJoin<TOuter,TInner,TKey,TResult> (this System.Linq.IQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<Func<TOuter,TKey>> outerKeySelector, System.Linq.Expressions.Expression<Func<TInner,TKey>> innerKeySelector, System.Linq.Expressions.Expression<Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>> resultSelector);\n    parameters:\n    - id: outer\n      type: System.Linq.IQueryable{TOuter}\n      description: The first sequence to join.\n    - id: inner\n      type: System.Collections.Generic.IEnumerable{TInner}\n      description: The sequence to join to the first sequence.\n    - id: outerKeySelector\n      type: System.Linq.Expressions.Expression{System.Func{TOuter,TKey}}\n      description: A function to extract the join key from each element of the first sequence.\n    - id: innerKeySelector\n      type: System.Linq.Expressions.Expression{System.Func{TInner,TKey}}\n      description: A function to extract the join key from each element of the second sequence.\n    - id: resultSelector\n      type: System.Linq.Expressions.Expression{System.Func{TOuter,System.Collections.Generic.IEnumerable{TInner},TResult}}\n      description: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.\n    typeParameters:\n    - id: TOuter\n      description: The type of the elements of the first sequence.\n    - id: TInner\n      description: The type of the elements of the second sequence.\n    - id: TKey\n      description: The type of the keys returned by the key selector functions.\n    - id: TResult\n      description: The type of the result elements.\n    return:\n      type: System.Linq.IQueryable{TResult}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements of type <code>TResult</code> obtained by performing a grouped join on two sequences.\n  overload: System.Linq.Queryable.GroupJoin``4*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})\n  commentId: M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})\n  id: GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,IEnumerable<TInner>,TResult>>, IEqualityComparer<TKey>)\n  nameWithType: Queryable.GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,IEnumerable<TInner>,TResult>>, IEqualityComparer<TKey>)\n  fullName: Queryable.GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,IEnumerable<TInner>,TResult>>, IEqualityComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Correlates the elements of two sequences based on key equality and groups the results. A specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> is used to compare keys.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> depends on the implementation of the type of the `outer` parameter. The expected behavior is that the `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively. These keys are compared for equality by using `comparer`. The outcome of the comparisons is used to match each element in `outer` with zero or more elements from `inner`. Then the `resultSelector` function is invoked to project a result object from each group of correlated elements.\"\n  syntax:\n    content: public static System.Linq.IQueryable<TResult> GroupJoin<TOuter,TInner,TKey,TResult> (this System.Linq.IQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<Func<TOuter,TKey>> outerKeySelector, System.Linq.Expressions.Expression<Func<TInner,TKey>> innerKeySelector, System.Linq.Expressions.Expression<Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: outer\n      type: System.Linq.IQueryable{TOuter}\n      description: The first sequence to join.\n    - id: inner\n      type: System.Collections.Generic.IEnumerable{TInner}\n      description: The sequence to join to the first sequence.\n    - id: outerKeySelector\n      type: System.Linq.Expressions.Expression{System.Func{TOuter,TKey}}\n      description: A function to extract the join key from each element of the first sequence.\n    - id: innerKeySelector\n      type: System.Linq.Expressions.Expression{System.Func{TInner,TKey}}\n      description: A function to extract the join key from each element of the second sequence.\n    - id: resultSelector\n      type: System.Linq.Expressions.Expression{System.Func{TOuter,System.Collections.Generic.IEnumerable{TInner},TResult}}\n      description: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: A comparer to hash and compare keys.\n    typeParameters:\n    - id: TOuter\n      description: The type of the elements of the first sequence.\n    - id: TInner\n      description: The type of the elements of the second sequence.\n    - id: TKey\n      description: The type of the keys returned by the key selector functions.\n    - id: TResult\n      description: The type of the result elements.\n    return:\n      type: System.Linq.IQueryable{TResult}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements of type <code>TResult</code> obtained by performing a grouped join on two sequences.\n  overload: System.Linq.Queryable.GroupJoin``4*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  id: Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  nameWithType: Queryable.Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  fullName: Queryable.Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Produces the set intersection of two sequences by using the default equality comparer to compare values.\n  remarks: \"The <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that all the elements in `source1` that are also in `source2` are returned.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the elements that appear in each of two sequences.  \\n  \\n [!code-csharp[System.Linq.Queryable#41](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#41)]\\n [!code-vb[System.Linq.Queryable#41](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#41)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> Intersect<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2);\n    parameters:\n    - id: source1\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence whose distinct elements that also appear in <code>source2</code> are returned.\n    - id: source2\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence whose distinct elements that also appear in the first sequence are returned.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of the input sequences.\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence that contains the set intersection of the two sequences.\n  overload: System.Linq.Queryable.Intersect``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source1</code> or <code>source2</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Queryable.Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Queryable.Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Produces the set intersection of two sequences by using the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.\n  remarks: \"The <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that all the elements in `source1` that are also in `source2` are returned. The `comparer` parameter is used to compare elements.\"\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> Intersect<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer);\n    parameters:\n    - id: source1\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> whose distinct elements that also appear in <code>source2</code> are returned.\n    - id: source2\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose distinct elements that also appear in the first sequence are returned.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of the input sequences.\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the set intersection of the two sequences.\n  overload: System.Linq.Queryable.Intersect``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source1</code> or <code>source2</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})\n  commentId: M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})\n  id: Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,TInner,TResult>>)\n  nameWithType: Queryable.Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,TInner,TResult>>)\n  fullName: Queryable.Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,TInner,TResult>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29> depends on the implementation of the type of the `outer` parameter. The expected behavior is that of an inner join. The `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively. These keys are compared for equality to match elements from each sequence. A pair of elements is stored for each element in `inner` that matches an element in `outer`. Then the `resultSelector` function is invoked to project a result object from each pair of matching elements.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29> to perform an inner join of two sequences based on a common key.  \\n  \\n [!code-csharp[System.Linq.Queryable#42](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#42)]\\n [!code-vb[System.Linq.Queryable#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#42)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TResult> Join<TOuter,TInner,TKey,TResult> (this System.Linq.IQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<Func<TOuter,TKey>> outerKeySelector, System.Linq.Expressions.Expression<Func<TInner,TKey>> innerKeySelector, System.Linq.Expressions.Expression<Func<TOuter,TInner,TResult>> resultSelector);\n    parameters:\n    - id: outer\n      type: System.Linq.IQueryable{TOuter}\n      description: The first sequence to join.\n    - id: inner\n      type: System.Collections.Generic.IEnumerable{TInner}\n      description: The sequence to join to the first sequence.\n    - id: outerKeySelector\n      type: System.Linq.Expressions.Expression{System.Func{TOuter,TKey}}\n      description: A function to extract the join key from each element of the first sequence.\n    - id: innerKeySelector\n      type: System.Linq.Expressions.Expression{System.Func{TInner,TKey}}\n      description: A function to extract the join key from each element of the second sequence.\n    - id: resultSelector\n      type: System.Linq.Expressions.Expression{System.Func{TOuter,TInner,TResult}}\n      description: A function to create a result element from two matching elements.\n    typeParameters:\n    - id: TOuter\n      description: The type of the elements of the first sequence.\n    - id: TInner\n      description: The type of the elements of the second sequence.\n    - id: TKey\n      description: The type of the keys returned by the key selector functions.\n    - id: TResult\n      description: The type of the result elements.\n    return:\n      type: System.Linq.IQueryable{TResult}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that has elements of type <code>TResult</code> obtained by performing an inner join on two sequences.\n  overload: System.Linq.Queryable.Join``4*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})\n  commentId: M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})\n  id: Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,TInner,TResult>>, IEqualityComparer<TKey>)\n  nameWithType: Queryable.Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,TInner,TResult>>, IEqualityComparer<TKey>)\n  fullName: Queryable.Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,TInner,TResult>>, IEqualityComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Correlates the elements of two sequences based on matching keys. A specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> is used to compare keys.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29> depends on the implementation of the type of the `outer` parameter. The expected behavior is that of an inner join. The `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively. These keys are compared for equality by using `comparer`. The outcome of the comparisons is used to create a matching pair for each element in `inner` that matches an element in `outer`. Then the `resultSelector` function is invoked to project a result object from each pair of matching elements.\"\n  syntax:\n    content: public static System.Linq.IQueryable<TResult> Join<TOuter,TInner,TKey,TResult> (this System.Linq.IQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<Func<TOuter,TKey>> outerKeySelector, System.Linq.Expressions.Expression<Func<TInner,TKey>> innerKeySelector, System.Linq.Expressions.Expression<Func<TOuter,TInner,TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);\n    parameters:\n    - id: outer\n      type: System.Linq.IQueryable{TOuter}\n      description: The first sequence to join.\n    - id: inner\n      type: System.Collections.Generic.IEnumerable{TInner}\n      description: The sequence to join to the first sequence.\n    - id: outerKeySelector\n      type: System.Linq.Expressions.Expression{System.Func{TOuter,TKey}}\n      description: A function to extract the join key from each element of the first sequence.\n    - id: innerKeySelector\n      type: System.Linq.Expressions.Expression{System.Func{TInner,TKey}}\n      description: A function to extract the join key from each element of the second sequence.\n    - id: resultSelector\n      type: System.Linq.Expressions.Expression{System.Func{TOuter,TInner,TResult}}\n      description: A function to create a result element from two matching elements.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to hash and compare keys.\n    typeParameters:\n    - id: TOuter\n      description: The type of the elements of the first sequence.\n    - id: TInner\n      description: The type of the elements of the second sequence.\n    - id: TKey\n      description: The type of the keys returned by the key selector functions.\n    - id: TResult\n      description: The type of the result elements.\n    return:\n      type: System.Linq.IQueryable{TResult}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that has elements of type <code>TResult</code> obtained by performing an inner join on two sequences.\n  overload: System.Linq.Queryable.Join``4*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})\n  id: Last``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Last<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Last<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Last<TSource>(IQueryable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the last element in a sequence.\n  remarks: \"The <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the last element in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to return the last element of an array.  \\n  \\n [!code-csharp[System.Linq.Queryable#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#43)]\\n [!code-vb[System.Linq.Queryable#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#43)]\"\n  syntax:\n    content: public static TSource Last<TSource> (this System.Linq.IQueryable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the last element of.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The value at the last position in <code>source</code>.\n  overload: System.Linq.Queryable.Last``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The source sequence is empty.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Last<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.Last<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.Last<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the last element of a sequence that satisfies a specified condition.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the last element in `source` that satisfies the condition specified by `predicate`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> to return the last element of an array that satisfies a condition.  \\n  \\n [!code-csharp[System.Linq.Queryable#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#44)]\\n [!code-vb[System.Linq.Queryable#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#44)]\"\n  syntax:\n    content: public static TSource Last<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> to return an element from.\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}\n      description: A function to test each element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The last element in <code>source</code> that passes the test specified by <code>predicate</code>.\n  overload: System.Linq.Queryable.Last``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"No element satisfies the condition in <code>predicate</code>.  \\n  \\n -or-  \\n  \\n The source sequence is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: LastOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.LastOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.LastOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the last element in `source` that satisfies the condition specified by `predicate`. It returns a default value if there is no such element in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> by passing in a predicate. In the second call to the method, there is no element in the sequence that satisfies the condition.  \\n  \\n [!code-csharp[System.Linq.Queryable#46](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#46)]\\n [!code-vb[System.Linq.Queryable#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#46)]\"\n  syntax:\n    content: public static TSource LastOrDefault<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> to return an element from.\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}\n      description: A function to test each element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: <code>default</code>(<code>TSource</code>) if <code>source</code> is empty or if no elements pass the test in the predicate function; otherwise, the last element of <code>source</code> that passes the test in the predicate function.\n  overload: System.Linq.Queryable.LastOrDefault``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})\n  id: LastOrDefault``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: LastOrDefault<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.LastOrDefault<TSource>(IQueryable<TSource>)\n  fullName: Queryable.LastOrDefault<TSource>(IQueryable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the last element in a sequence, or a default value if the sequence contains no elements.\n  remarks: \"The <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the last element in `source`, or a default value if `source` is empty.  \\n  \\n The <xref:System.Linq.Queryable.LastOrDefault%2A> method does not provide a way to specify a default value. If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> on an empty array.  \\n  \\n [!code-csharp[System.Linq.Queryable#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#45)]\\n [!code-vb[System.Linq.Queryable#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#45)]  \\n  \\n Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements. Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty. Then, call <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to obtain the last element. The following code example uses both techniques to obtain a default value of 1 if a collection of numeric days of the month is empty. Because the default value for an integer is 0, which does not correspond to any day of the month, the default value must be specified as 1 instead. The first result variable is checked for the unwanted default value after the query is completed. The second result variable is obtained by calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.  \\n  \\n [!code-csharp[System.Linq.Queryable#132](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#132)]\\n [!code-vb[System.Linq.Queryable#132](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#132)]\"\n  syntax:\n    content: public static TSource LastOrDefault<TSource> (this System.Linq.IQueryable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the last element of.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: <code>default</code>(<code>TSource</code>) if <code>source</code> is empty; otherwise, the last element in <code>source</code>.\n  overload: System.Linq.Queryable.LastOrDefault``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})\n  id: LongCount``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: LongCount<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.LongCount<TSource>(IQueryable<TSource>)\n  fullName: Queryable.LongCount<TSource>(IQueryable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns an <xref href=\"System.Int64\"></xref> that represents the total number of elements in a sequence.\n  remarks: \"The <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it counts the number of items in `source` and returns an <xref:System.Int64>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to count the elements in an array.  \\n  \\n [!code-csharp[System.Linq.Queryable#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#47)]\\n [!code-vb[System.Linq.Queryable#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#47)]\"\n  syntax:\n    content: public static long LongCount<TSource> (this System.Linq.IQueryable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements to be counted.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Int64\n      description: The number of elements in <code>source</code>.\n  overload: System.Linq.Queryable.LongCount``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The number of elements exceeds <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: LongCount<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.LongCount<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.LongCount<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns an <xref href=\"System.Int64\"></xref> that represents the number of elements in a sequence that satisfy a condition.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it counts the number of items in `source` that satisfy the condition specified by `predicate` and returns an <xref:System.Int64>.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> to count the elements in an array that satisfy a condition.  \\n  \\n [!code-csharp[System.Linq.Queryable#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#48)]\\n [!code-vb[System.Linq.Queryable#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#48)]\"\n  syntax:\n    content: public static long LongCount<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements to be counted.\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}\n      description: A function to test each element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Int64\n      description: The number of elements in <code>source</code> that satisfy the condition in the predicate function.\n  overload: System.Linq.Queryable.LongCount``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The number of matching elements exceeds <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  commentId: M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  id: Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Max<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n  nameWithType: Queryable.Max<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n  fullName: Queryable.Max<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a projection function on each element of a generic <xref href=\"System.Linq.IQueryable`1\"></xref> and returns the maximum resulting value.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element in `source` and returns the maximum value.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> to determine the maximum value in a sequence of projected values.  \\n  \\n [!code-csharp[System.Linq.Queryable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#58)]\\n [!code-vb[System.Linq.Queryable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#58)]\"\n  syntax:\n    content: public static TResult Max<TSource,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TResult>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to determine the maximum of.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TResult}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TResult\n      description: The type of the value returned by the function represented by <code>selector</code>.\n    return:\n      type: TResult\n      description: The maximum value in the sequence.\n  overload: System.Linq.Queryable.Max``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})\n  id: Max``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Max<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Max<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Max<TSource>(IQueryable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the maximum value in a generic <xref href=\"System.Linq.IQueryable`1\"></xref>.\n  remarks: \"The <xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the maximum value in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to determine the maximum value in a sequence.  \\n  \\n [!code-csharp[System.Linq.Queryable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#52)]\\n [!code-vb[System.Linq.Queryable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#52)]\"\n  syntax:\n    content: public static TSource Max<TSource> (this System.Linq.IQueryable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to determine the maximum of.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The maximum value in the sequence.\n  overload: System.Linq.Queryable.Max``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  commentId: M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  id: Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Min<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n  nameWithType: Queryable.Min<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n  fullName: Queryable.Min<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Invokes a projection function on each element of a generic <xref href=\"System.Linq.IQueryable`1\"></xref> and returns the minimum resulting value.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element in `source` and returns the minimum value.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> to determine the minimum value in a sequence of projected values.  \\n  \\n [!code-csharp[System.Linq.Queryable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#68)]\\n [!code-vb[System.Linq.Queryable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#68)]\"\n  syntax:\n    content: public static TResult Min<TSource,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TResult>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to determine the minimum of.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TResult}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TResult\n      description: The type of the value returned by the function represented by <code>selector</code>.\n    return:\n      type: TResult\n      description: The minimum value in the sequence.\n  overload: System.Linq.Queryable.Min``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})\n  id: Min``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Min<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Min<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Min<TSource>(IQueryable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the minimum value of a generic <xref href=\"System.Linq.IQueryable`1\"></xref>.\n  remarks: \"The <xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the minimum value in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to determine the minimum value in a sequence.  \\n  \\n [!code-csharp[System.Linq.Queryable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#60)]\\n [!code-vb[System.Linq.Queryable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#60)]\"\n  syntax:\n    content: public static TSource Min<TSource> (this System.Linq.IQueryable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to determine the minimum of.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The minimum value in the sequence.\n  overload: System.Linq.Queryable.Min``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.OfType``1(System.Linq.IQueryable)\n  commentId: M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)\n  id: OfType``1(System.Linq.IQueryable)\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: OfType<TResult>(IQueryable)\n  nameWithType: Queryable.OfType<TResult>(IQueryable)\n  fullName: Queryable.OfType<TResult>(IQueryable)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Filters the elements of an <xref href=\"System.Linq.IQueryable\"></xref> based on a specified type.\n  remarks: \"The `OfType` method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling `OfType` itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling `OfType` depends on the implementation of the type of the `source` parameter. The expected behavior is that it filters out any elements in `source` that are not of type `TResult`.\"\n  example:\n  - \"The following code example demonstrates how to use `OfType` to filter out elements that are not of type <xref:System.Reflection.PropertyInfo> from a list of elements of type <xref:System.Reflection.MemberInfo>.  \\n  \\n [!code-csharp[System.Linq.Queryable#69](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#69)]\\n [!code-vb[System.Linq.Queryable#69](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#69)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TResult> OfType<TResult> (this System.Linq.IQueryable source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable\n      description: An <xref href=\"System.Linq.IQueryable\"></xref> whose elements to filter.\n    typeParameters:\n    - id: TResult\n      description: The type to filter the elements of the sequence on.\n    return:\n      type: System.Linq.IQueryable{TResult}\n      description: A collection that contains the elements from <code>source</code> that have type <code>TResult</code>.\n  overload: System.Linq.Queryable.OfType``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  commentId: M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  id: OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: OrderBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  nameWithType: Queryable.OrderBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  fullName: Queryable.OrderBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Sorts the elements of a sequence in ascending order by using a specified comparer.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it sorts the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`. The `comparer` parameter is used to compare keys.\"\n  syntax:\n    content: public static System.Linq.IOrderedQueryable<TSource> OrderBy<TSource,TKey> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to order.\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}\n      description: A function to extract a key from an element.\n    - id: comparer\n      type: System.Collections.Generic.IComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by the function that is represented by <code>keySelector</code>.\n    return:\n      type: System.Linq.IOrderedQueryable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> whose elements are sorted according to a key.\n  overload: System.Linq.Queryable.OrderBy``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> or <code>comparer</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  commentId: M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  id: OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: OrderBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  nameWithType: Queryable.OrderBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  fullName: Queryable.OrderBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Sorts the elements of a sequence in ascending order according to a key.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it sorts the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> to sort the elements of a sequence.  \\n  \\n [!code-csharp[System.Linq.Queryable#70](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#70)]\\n [!code-vb[System.Linq.Queryable#70](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#70)]\"\n  syntax:\n    content: public static System.Linq.IOrderedQueryable<TSource> OrderBy<TSource,TKey> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to order.\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}\n      description: A function to extract a key from an element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by the function that is represented by <code>keySelector</code>.\n    return:\n      type: System.Linq.IOrderedQueryable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> whose elements are sorted according to a key.\n  overload: System.Linq.Queryable.OrderBy``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  commentId: M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  id: OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: OrderByDescending<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  nameWithType: Queryable.OrderByDescending<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  fullName: Queryable.OrderByDescending<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Sorts the elements of a sequence in descending order according to a key.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it sorts the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`.\"\n  syntax:\n    content: public static System.Linq.IOrderedQueryable<TSource> OrderByDescending<TSource,TKey> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to order.\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}\n      description: A function to extract a key from an element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by the function that is represented by <code>keySelector</code>.\n    return:\n      type: System.Linq.IOrderedQueryable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> whose elements are sorted in descending order according to a key.\n  overload: System.Linq.Queryable.OrderByDescending``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  commentId: M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  id: OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: OrderByDescending<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  nameWithType: Queryable.OrderByDescending<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  fullName: Queryable.OrderByDescending<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Sorts the elements of a sequence in descending order by using a specified comparer.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it sorts the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`. The `comparer` parameter is used to compare keys.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> to sort the elements of a sequence in descending order by using a custom comparer.  \\n  \\n [!code-csharp[System.Linq.Queryable#71](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#71)]\\n [!code-vb[System.Linq.Queryable#71](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#71)]\"\n  syntax:\n    content: public static System.Linq.IOrderedQueryable<TSource> OrderByDescending<TSource,TKey> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to order.\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}\n      description: A function to extract a key from an element.\n    - id: comparer\n      type: System.Collections.Generic.IComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by the function that is represented by <code>keySelector</code>.\n    return:\n      type: System.Linq.IOrderedQueryable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> whose elements are sorted in descending order according to a key.\n  overload: System.Linq.Queryable.OrderByDescending``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> or <code>comparer</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.Prepend``1(System.Linq.IQueryable{``0},``0)\n  commentId: M:System.Linq.Queryable.Prepend``1(System.Linq.IQueryable{``0},``0)\n  id: Prepend``1(System.Linq.IQueryable{``0},``0)\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Prepend<TSource>(IQueryable<TSource>, TSource)\n  nameWithType: Queryable.Prepend<TSource>(IQueryable<TSource>, TSource)\n  fullName: Queryable.Prepend<TSource>(IQueryable<TSource>, TSource)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> Prepend<TSource> (this System.Linq.IQueryable<TSource> source, TSource element);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: ''\n    - id: element\n      type: TSource\n      description: ''\n    typeParameters:\n    - id: TSource\n      description: ''\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: ''\n  overload: System.Linq.Queryable.Prepend``1*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})\n  id: Reverse``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Reverse<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Reverse<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Reverse<TSource>(IQueryable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Inverts the order of the elements in a sequence.\n  remarks: \"The <xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it reverses the order of the elements in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to reverse the order of elements in an array.  \\n  \\n [!code-csharp[System.Linq.Queryable#74](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#74)]\\n [!code-vb[System.Linq.Queryable#74](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#74)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> Reverse<TSource> (this System.Linq.IQueryable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to reverse.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements correspond to those of the input sequence in reverse order.\n  overload: System.Linq.Queryable.Reverse``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})\n  commentId: M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})\n  id: Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Select<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,TResult>>)\n  nameWithType: Queryable.Select<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,TResult>>)\n  fullName: Queryable.Select<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,TResult>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Projects each element of a sequence into a new form by incorporating the element's index.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29> depend on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` to project it into a different form.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29> to project over a sequence of values and use the index of each element in the projected form.  \\n  \\n [!code-csharp[System.Linq.Queryable#76](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#76)]\\n [!code-vb[System.Linq.Queryable#76](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#76)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TResult> Select<TSource,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int,TResult>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to project.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32,TResult}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TResult\n      description: The type of the value returned by the function represented by <code>selector</code>.\n    return:\n      type: System.Linq.IQueryable{TResult}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements are the result of invoking a projection function on each element of <code>source</code>.\n  overload: System.Linq.Queryable.Select``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  commentId: M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  id: Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Select<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n  nameWithType: Queryable.Select<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n  fullName: Queryable.Select<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Projects each element of a sequence into a new form.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` to project it into a different form.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> to project over a sequence of values.  \\n  \\n [!code-csharp[System.Linq.Queryable#75](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#75)]\\n [!code-vb[System.Linq.Queryable#75](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#75)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TResult> Select<TSource,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TResult>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to project.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TResult}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TResult\n      description: The type of the value returned by the function represented by <code>selector</code>.\n    return:\n      type: System.Linq.IQueryable{TResult}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements are the result of invoking a projection function on each element of <code>source</code>.\n  overload: System.Linq.Queryable.Select``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  commentId: M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  id: SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,IEnumerable<TCollection>>>, Expression<Func<TSource,TCollection,TResult>>)\n  nameWithType: Queryable.SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,IEnumerable<TCollection>>>, Expression<Func<TSource,TCollection,TResult>>)\n  fullName: Queryable.SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,IEnumerable<TCollection>>>, Expression<Func<TSource,TCollection,TResult>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> that incorporates the index of the source element that produced it. A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `collectionSelector` on each element of `source` to project it into an enumerable form. Each enumerable result incorporates the source element's index. Then the function represented by `resultSelector` is invoked on each element in each intermediate sequence. The resulting values are concatenated into a single, one-dimensional sequence.\"\n  syntax:\n    content: public static System.Linq.IQueryable<TResult> SelectMany<TSource,TCollection,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int,System.Collections.Generic.IEnumerable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<Func<TSource,TCollection,TResult>> resultSelector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to project.\n    - id: collectionSelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32,System.Collections.Generic.IEnumerable{TCollection}}}\n      description: A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.\n    - id: resultSelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TCollection,TResult}}\n      description: A projection function to apply to each element of each intermediate sequence.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TCollection\n      description: The type of the intermediate elements collected by the function represented by <code>collectionSelector</code>.\n    - id: TResult\n      description: The type of the elements of the resulting sequence.\n    return:\n      type: System.Linq.IQueryable{TResult}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements are the result of invoking the one-to-many projection function <code>collectionSelector</code> on each element of <code>source</code> and then mapping each of those sequence elements and their corresponding <code>source</code> element to a result element.\n  overload: System.Linq.Queryable.SelectMany``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>collectionSelector</code> or <code>resultSelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  commentId: M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  id: SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>, Expression<Func<TSource,IEnumerable<TCollection>>>, Expression<Func<TSource,TCollection,TResult>>)\n  nameWithType: Queryable.SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>, Expression<Func<TSource,IEnumerable<TCollection>>>, Expression<Func<TSource,TCollection,TResult>>)\n  fullName: Queryable.SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>, Expression<Func<TSource,IEnumerable<TCollection>>>, Expression<Func<TSource,TCollection,TResult>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `collectionSelector` on each element of `source` to project it into an enumerable form. Then the function represented by `resultSelector` is invoked on each element in each intermediate sequence. The resulting values are concatenated into a single, one-dimensional sequence.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29> to perform a one-to-many projection over an array. This example uses a result selector function to keep the source element that corresponds to each intermediate sequence in scope for the final call to `Select`.  \\n  \\n [!code-csharp[System.Linq.Queryable#124](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#124)]\\n [!code-vb[System.Linq.Queryable#124](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#124)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TResult> SelectMany<TSource,TCollection,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,System.Collections.Generic.IEnumerable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<Func<TSource,TCollection,TResult>> resultSelector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to project.\n    - id: collectionSelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Collections.Generic.IEnumerable{TCollection}}}\n      description: A projection function to apply to each element of the input sequence.\n    - id: resultSelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TCollection,TResult}}\n      description: A projection function to apply to each element of each intermediate sequence.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TCollection\n      description: The type of the intermediate elements collected by the function represented by <code>collectionSelector</code>.\n    - id: TResult\n      description: The type of the elements of the resulting sequence.\n    return:\n      type: System.Linq.IQueryable{TResult}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements are the result of invoking the one-to-many projection function <code>collectionSelector</code> on each element of <code>source</code> and then mapping each of those sequence elements and their corresponding <code>source</code> element to a result element.\n  overload: System.Linq.Queryable.SelectMany``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>collectionSelector</code> or <code>resultSelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})\n  commentId: M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})\n  id: SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: SelectMany<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,IEnumerable<TResult>>>)\n  nameWithType: Queryable.SelectMany<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,IEnumerable<TResult>>>)\n  fullName: Queryable.SelectMany<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,IEnumerable<TResult>>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> and combines the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` to project it into an enumerable form. Each enumerable result incorporates the index of the source element. It then concatenates the enumerable results into a single, one-dimensional sequence.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> to perform a one-to-many projection over an array and use the index of each source element.  \\n  \\n [!code-csharp[System.Linq.Queryable#78](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#78)]\\n [!code-vb[System.Linq.Queryable#78](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#78)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TResult> SelectMany<TSource,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int,System.Collections.Generic.IEnumerable<TResult>>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to project.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32,System.Collections.Generic.IEnumerable{TResult}}}\n      description: A projection function to apply to each element; the second parameter of this function represents the index of the source element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TResult\n      description: The type of the elements of the sequence returned by the function represented by <code>selector</code>.\n    return:\n      type: System.Linq.IQueryable{TResult}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.\n  overload: System.Linq.Queryable.SelectMany``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})\n  commentId: M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})\n  id: SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: SelectMany<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,IEnumerable<TResult>>>)\n  nameWithType: Queryable.SelectMany<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,IEnumerable<TResult>>>)\n  fullName: Queryable.SelectMany<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,IEnumerable<TResult>>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> and combines the resulting sequences into one sequence.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` to project it into an enumerable form. It then concatenates the enumerable results into a single, one-dimensional sequence.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29> to perform a one-to-many projection over an array.  \\n  \\n [!code-csharp[System.Linq.Queryable#77](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#77)]\\n [!code-vb[System.Linq.Queryable#77](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#77)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TResult> SelectMany<TSource,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,System.Collections.Generic.IEnumerable<TResult>>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values to project.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Collections.Generic.IEnumerable{TResult}}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TResult\n      description: The type of the elements of the sequence returned by the function represented by <code>selector</code>.\n    return:\n      type: System.Linq.IQueryable{TResult}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.\n  overload: System.Linq.Queryable.SelectMany``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  id: SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  nameWithType: Queryable.SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  fullName: Queryable.SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Determines whether two sequences are equal by using the default equality comparer to compare elements.\n  remarks: \"The <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that it determines if the two source sequences are equal.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine whether two sequences are equal. In this example the sequences are equal.  \\n  \\n [!code-csharp[System.Linq.Queryable#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#32)]\\n [!code-vb[System.Linq.Queryable#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#32)]  \\n  \\n The following code example compares two sequences that are not equal.  \\n  \\n [!code-csharp[System.Linq.Queryable#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#33)]\\n [!code-vb[System.Linq.Queryable#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#33)]\"\n  syntax:\n    content: public static bool SequenceEqual<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2);\n    parameters:\n    - id: source1\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to compare to those of <code>source2</code>.\n    - id: source2\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to compare to those of the first sequence.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of the input sequences.\n    return:\n      type: System.Boolean\n      description: '`true` if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, `false`.'\n  overload: System.Linq.Queryable.SequenceEqual``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source1</code> or <code>source2</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Queryable.SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Queryable.SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Determines whether two sequences are equal by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare elements.\n  remarks: \"The <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that it determines if the two source sequences are equal by using `comparer` to compare elements.\"\n  syntax:\n    content: public static bool SequenceEqual<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer);\n    parameters:\n    - id: source1\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> whose elements to compare to those of <code>source2</code>.\n    - id: source2\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> whose elements to compare to those of the first sequence.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to use to compare elements.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of the input sequences.\n    return:\n      type: System.Boolean\n      description: '`true` if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, `false`.'\n  overload: System.Linq.Queryable.SequenceEqual``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source1</code> or <code>source2</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})\n  id: Single``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Single<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Single<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Single<TSource>(IQueryable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.\n  remarks: \"The <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the only element in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to select the only element of an array.  \\n  \\n [!code-csharp[System.Linq.Queryable#79](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#79)]\\n [!code-vb[System.Linq.Queryable#79](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#79)]\"\n  syntax:\n    content: public static TSource Single<TSource> (this System.Linq.IQueryable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the single element of.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The single element of the input sequence.\n  overload: System.Linq.Queryable.Single``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> has more than one element.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Single<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.Single<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.Single<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the only element in `source` that satisfies the condition specified by `predicate`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> to select the only element of an array that satisfies a condition.  \\n  \\n [!code-csharp[System.Linq.Queryable#81](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#81)]\\n [!code-vb[System.Linq.Queryable#81](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#81)]\"\n  syntax:\n    content: public static TSource Single<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> to return a single element from.\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}\n      description: A function to test an element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The single element of the input sequence that satisfies the condition in <code>predicate</code>.\n  overload: System.Linq.Queryable.Single``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"No element satisfies the condition in <code>predicate</code>.  \\n  \\n -or-  \\n  \\n More than one element satisfies the condition in <code>predicate</code>.  \\n  \\n -or-  \\n  \\n The source sequence is empty.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})\n  commentId: M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})\n  id: SingleOrDefault``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: SingleOrDefault<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.SingleOrDefault<TSource>(IQueryable<TSource>)\n  fullName: Queryable.SingleOrDefault<TSource>(IQueryable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.\n  remarks: \"The <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the only element in `source`, or a default value if `source` is empty.  \\n  \\n The <xref:System.Linq.Queryable.SingleOrDefault%2A> method does not provide a way to specify a default value. If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to select the only element of an array. The second query demonstrates that <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> returns a default value when the sequence does not contain exactly one element.  \\n  \\n [!code-csharp[System.Linq.Queryable#83](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#83)]\\n [!code-vb[System.Linq.Queryable#83](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#83)]  \\n  \\n Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements. Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty. Then, call <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to obtain the element. The following code example uses both techniques to obtain a default value of 1 if a collection of page numbers is empty. Because the default value for an integer is 0, which is not usually a valid page number, the default value must be specified as 1 instead. The first result variable is checked for the unwanted default value after the query is completed. The second result variable is obtained by calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.  \\n  \\n [!code-csharp[System.Linq.Queryable#133](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#133)]\\n [!code-vb[System.Linq.Queryable#133](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#133)]\"\n  syntax:\n    content: public static TSource SingleOrDefault<TSource> (this System.Linq.IQueryable<TSource> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> to return the single element of.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The single element of the input sequence, or <code>default</code>(<code>TSource</code>) if the sequence contains no elements.\n  overload: System.Linq.Queryable.SingleOrDefault``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>source</code> has more than one element.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: SingleOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.SingleOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.SingleOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the only element in `source` that satisfies the condition specified by `predicate`, or a default value if no such element exists.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> to select the only element of an array that satisfies a condition. The second query demonstrates that <xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> returns a default value when the sequence does not contain exactly one element that satisfies the condition.  \\n  \\n [!code-csharp[System.Linq.Queryable#85](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#85)]\\n [!code-vb[System.Linq.Queryable#85](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#85)]\"\n  syntax:\n    content: public static TSource SingleOrDefault<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> to return a single element from.\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}\n      description: A function to test an element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: TSource\n      description: The single element of the input sequence that satisfies the condition in <code>predicate</code>, or <code>default</code>(<code>TSource</code>) if no such element is found.\n  overload: System.Linq.Queryable.SingleOrDefault``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: More than one element satisfies the condition in <code>predicate</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)\n  commentId: M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)\n  id: Skip``1(System.Linq.IQueryable{``0},System.Int32)\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Skip<TSource>(IQueryable<TSource>, Int32)\n  nameWithType: Queryable.Skip<TSource>(IQueryable<TSource>, Int32)\n  fullName: Queryable.Skip<TSource>(IQueryable<TSource>, Int32)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Bypasses a specified number of elements in a sequence and then returns the remaining elements.\n  remarks: \"The <xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it skips the first `count` elements in `source` and returns the remaining elements.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> to skip a specified number of elements in a sorted array and return the remaining elements.  \\n  \\n [!code-csharp[System.Linq.Queryable#87](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#87)]\\n [!code-vb[System.Linq.Queryable#87](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#87)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> Skip<TSource> (this System.Linq.IQueryable<TSource> source, int count);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> to return elements from.\n    - id: count\n      type: System.Int32\n      description: The number of elements to skip before returning the remaining elements.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements that occur after the specified index in the input sequence.\n  overload: System.Linq.Queryable.Skip``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.SkipLast``1(System.Linq.IQueryable{``0},System.Int32)\n  commentId: M:System.Linq.Queryable.SkipLast``1(System.Linq.IQueryable{``0},System.Int32)\n  id: SkipLast``1(System.Linq.IQueryable{``0},System.Int32)\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: SkipLast<TSource>(IQueryable<TSource>, Int32)\n  nameWithType: Queryable.SkipLast<TSource>(IQueryable<TSource>, Int32)\n  fullName: Queryable.SkipLast<TSource>(IQueryable<TSource>, Int32)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> SkipLast<TSource> (this System.Linq.IQueryable<TSource> source, int count);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n    typeParameters:\n    - id: TSource\n      description: ''\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: ''\n  overload: System.Linq.Queryable.SkipLast``1*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: SkipWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.SkipWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.SkipWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns false. That element and all the remaining elements are returned.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> to skip elements of an array as long as a condition is true.  \\n  \\n [!code-csharp[System.Linq.Queryable#88](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#88)]\\n [!code-vb[System.Linq.Queryable#88](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#88)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> SkipWhile<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> to return elements from.\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}\n      description: A function to test each element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements from <code>source</code> starting at the first element in the linear series that does not pass the test specified by <code>predicate</code>.\n  overload: System.Linq.Queryable.SkipWhile``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  commentId: M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  id: SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: SkipWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n  nameWithType: Queryable.SkipWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n  fullName: Queryable.SkipWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns false. That element and all the remaining elements are returned. The index of each source element is provided as the second argument to `predicate`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> to skip elements of an array as long as a condition that depends on the element's index is true.  \\n  \\n [!code-csharp[System.Linq.Queryable#89](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#89)]\\n [!code-vb[System.Linq.Queryable#89](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#89)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> SkipWhile<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int,bool>> predicate);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> to return elements from.\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32,System.Boolean}}\n      description: A function to test each element for a condition; the second parameter of this function represents the index of the source element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements from <code>source</code> starting at the first element in the linear series that does not pass the test specified by <code>predicate</code>.\n  overload: System.Linq.Queryable.SkipWhile``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})\n  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})\n  id: Sum(System.Linq.IQueryable{System.Single})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Sum(IQueryable<Single>)\n  nameWithType: Queryable.Sum(IQueryable<Single>)\n  fullName: Queryable.Sum(IQueryable<Single>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of a sequence of <xref href=\"System.Single\"></xref> values.\n  remarks: \"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> to sum the values of a sequence.  \\n  \\n [!code-csharp[System.Linq.Queryable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#120)]\\n [!code-vb[System.Linq.Queryable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#120)]\"\n  syntax:\n    content: public static float Sum (this System.Linq.IQueryable<float> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Single}\n      description: A sequence of <xref href=\"System.Single\"></xref> values to calculate the sum of.\n    return:\n      type: System.Single\n      description: The sum of the values in the sequence.\n  overload: System.Linq.Queryable.Sum*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})\n  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})\n  id: Sum(System.Linq.IQueryable{System.Nullable{System.Single}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Sum(IQueryable<Nullable<Single>>)\n  nameWithType: Queryable.Sum(IQueryable<Nullable<Single>>)\n  fullName: Queryable.Sum(IQueryable<Nullable<Single>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of a sequence of nullable <xref href=\"System.Single\"></xref> values.\n  remarks: \"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.  \\n  \\n [!code-csharp[System.Linq.Queryable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#121)]\\n [!code-vb[System.Linq.Queryable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#121)]\"\n  syntax:\n    content: public static Nullable<float> Sum (this System.Linq.IQueryable<Nullable<float>> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Nullable{System.Single}}\n      description: A sequence of nullable <xref href=\"System.Single\"></xref> values to calculate the sum of.\n    return:\n      type: System.Nullable{System.Single}\n      description: The sum of the values in the sequence.\n  overload: System.Linq.Queryable.Sum*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})\n  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})\n  id: Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Sum(IQueryable<Nullable<Int64>>)\n  nameWithType: Queryable.Sum(IQueryable<Nullable<Int64>>)\n  fullName: Queryable.Sum(IQueryable<Nullable<Int64>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of a sequence of nullable <xref href=\"System.Int64\"></xref> values.\n  remarks: \"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#121)]\\n [!code-vb[System.Linq.Queryable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#121)]\"\n  syntax:\n    content: public static Nullable<long> Sum (this System.Linq.IQueryable<Nullable<long>> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Nullable{System.Int64}}\n      description: A sequence of nullable <xref href=\"System.Int64\"></xref> values to calculate the sum of.\n    return:\n      type: System.Nullable{System.Int64}\n      description: The sum of the values in the sequence.\n  overload: System.Linq.Queryable.Sum*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})\n  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})\n  id: Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Sum(IQueryable<Nullable<Int32>>)\n  nameWithType: Queryable.Sum(IQueryable<Nullable<Int32>>)\n  fullName: Queryable.Sum(IQueryable<Nullable<Int32>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of a sequence of nullable <xref href=\"System.Int32\"></xref> values.\n  remarks: \"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#121)]\\n [!code-vb[System.Linq.Queryable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#121)]\"\n  syntax:\n    content: public static Nullable<int> Sum (this System.Linq.IQueryable<Nullable<int>> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Nullable{System.Int32}}\n      description: A sequence of nullable <xref href=\"System.Int32\"></xref> values to calculate the sum of.\n    return:\n      type: System.Nullable{System.Int32}\n      description: The sum of the values in the sequence.\n  overload: System.Linq.Queryable.Sum*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})\n  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})\n  id: Sum(System.Linq.IQueryable{System.Nullable{System.Double}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Sum(IQueryable<Nullable<Double>>)\n  nameWithType: Queryable.Sum(IQueryable<Nullable<Double>>)\n  fullName: Queryable.Sum(IQueryable<Nullable<Double>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of a sequence of nullable <xref href=\"System.Double\"></xref> values.\n  remarks: \"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#121)]\\n [!code-vb[System.Linq.Queryable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#121)]\"\n  syntax:\n    content: public static Nullable<double> Sum (this System.Linq.IQueryable<Nullable<double>> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Nullable{System.Double}}\n      description: A sequence of nullable <xref href=\"System.Double\"></xref> values to calculate the sum of.\n    return:\n      type: System.Nullable{System.Double}\n      description: The sum of the values in the sequence.\n  overload: System.Linq.Queryable.Sum*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})\n  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})\n  id: Sum(System.Linq.IQueryable{System.Double})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Sum(IQueryable<Double>)\n  nameWithType: Queryable.Sum(IQueryable<Double>)\n  fullName: Queryable.Sum(IQueryable<Double>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of a sequence of <xref href=\"System.Double\"></xref> values.\n  remarks: \"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> to sum the values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#120)]\\n [!code-vb[System.Linq.Queryable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#120)]\"\n  syntax:\n    content: public static double Sum (this System.Linq.IQueryable<double> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Double}\n      description: A sequence of <xref href=\"System.Double\"></xref> values to calculate the sum of.\n    return:\n      type: System.Double\n      description: The sum of the values in the sequence.\n  overload: System.Linq.Queryable.Sum*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})\n  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})\n  id: Sum(System.Linq.IQueryable{System.Int64})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Sum(IQueryable<Int64>)\n  nameWithType: Queryable.Sum(IQueryable<Int64>)\n  fullName: Queryable.Sum(IQueryable<Int64>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of a sequence of <xref href=\"System.Int64\"></xref> values.\n  remarks: \"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> to sum the values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#120)]\\n [!code-vb[System.Linq.Queryable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#120)]\"\n  syntax:\n    content: public static long Sum (this System.Linq.IQueryable<long> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Int64}\n      description: A sequence of <xref href=\"System.Int64\"></xref> values to calculate the sum of.\n    return:\n      type: System.Int64\n      description: The sum of the values in the sequence.\n  overload: System.Linq.Queryable.Sum*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})\n  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})\n  id: Sum(System.Linq.IQueryable{System.Int32})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Sum(IQueryable<Int32>)\n  nameWithType: Queryable.Sum(IQueryable<Int32>)\n  fullName: Queryable.Sum(IQueryable<Int32>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of a sequence of <xref href=\"System.Int32\"></xref> values.\n  remarks: \"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> to sum the values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#120)]\\n [!code-vb[System.Linq.Queryable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#120)]\"\n  syntax:\n    content: public static int Sum (this System.Linq.IQueryable<int> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Int32}\n      description: A sequence of <xref href=\"System.Int32\"></xref> values to calculate the sum of.\n    return:\n      type: System.Int32\n      description: The sum of the values in the sequence.\n  overload: System.Linq.Queryable.Sum*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})\n  id: Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Sum(IQueryable<Nullable<Decimal>>)\n  nameWithType: Queryable.Sum(IQueryable<Nullable<Decimal>>)\n  fullName: Queryable.Sum(IQueryable<Nullable<Decimal>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of a sequence of nullable <xref href=\"System.Decimal\"></xref> values.\n  remarks: \"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#121)]\\n [!code-vb[System.Linq.Queryable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#121)]\"\n  syntax:\n    content: public static Nullable<decimal> Sum (this System.Linq.IQueryable<Nullable<decimal>> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Nullable{System.Decimal}}\n      description: A sequence of nullable <xref href=\"System.Decimal\"></xref> values to calculate the sum of.\n    return:\n      type: System.Nullable{System.Decimal}\n      description: The sum of the values in the sequence.\n  overload: System.Linq.Queryable.Sum*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})\n  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})\n  id: Sum(System.Linq.IQueryable{System.Decimal})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Sum(IQueryable<Decimal>)\n  nameWithType: Queryable.Sum(IQueryable<Decimal>)\n  fullName: Queryable.Sum(IQueryable<Decimal>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of a sequence of <xref href=\"System.Decimal\"></xref> values.\n  remarks: \"The <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> to sum the values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#120)]\\n [!code-vb[System.Linq.Queryable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#120)]\"\n  syntax:\n    content: public static decimal Sum (this System.Linq.IQueryable<decimal> source);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{System.Decimal}\n      description: A sequence of <xref href=\"System.Decimal\"></xref> values to calculate the sum of.\n    return:\n      type: System.Decimal\n      description: The sum of the values in the sequence.\n  overload: System.Linq.Queryable.Sum*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\n  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\n  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Single>>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Single>>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Single>>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of the sequence of nullable <xref href=\"System.Single\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#98)]\\n [!code-vb[System.Linq.Queryable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#98)]\"\n  syntax:\n    content: public static Nullable<float> Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<float>>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values of type <code>TSource</code>.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Single}}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Single}\n      description: The sum of the projected values.\n  overload: System.Linq.Queryable.Sum``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\n  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\n  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int64>>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int64>>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int64>>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of the sequence of nullable <xref href=\"System.Int64\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#98)]\\n [!code-vb[System.Linq.Queryable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#98)]\"\n  syntax:\n    content: public static Nullable<long> Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<long>>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values of type <code>TSource</code>.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Int64}}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Int64}\n      description: The sum of the projected values.\n  overload: System.Linq.Queryable.Sum``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\n  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\n  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int32>>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int32>>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int32>>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of the sequence of nullable <xref href=\"System.Int32\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#98)]\\n [!code-vb[System.Linq.Queryable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#98)]\"\n  syntax:\n    content: public static Nullable<int> Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<int>>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values of type <code>TSource</code>.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Int32}}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Int32}\n      description: The sum of the projected values.\n  overload: System.Linq.Queryable.Sum``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\n  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\n  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Double>>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Double>>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Double>>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of the sequence of nullable <xref href=\"System.Double\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#98)]\\n [!code-vb[System.Linq.Queryable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#98)]\"\n  syntax:\n    content: public static Nullable<double> Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<double>>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values of type <code>TSource</code>.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Double}}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Double}\n      description: The sum of the projected values.\n  overload: System.Linq.Queryable.Sum``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\n  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\n  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Single>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Single>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Single>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of the sequence of <xref href=\"System.Single\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#98)]\\n [!code-vb[System.Linq.Queryable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#98)]\"\n  syntax:\n    content: public static float Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,float>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values of type <code>TSource</code>.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Single}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Single\n      description: The sum of the projected values.\n  overload: System.Linq.Queryable.Sum``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\n  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\n  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int64>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int64>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int64>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of the sequence of <xref href=\"System.Int64\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#98)]\\n [!code-vb[System.Linq.Queryable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#98)]\"\n  syntax:\n    content: public static long Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,long>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values of type <code>TSource</code>.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Int64}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Int64\n      description: The sum of the projected values.\n  overload: System.Linq.Queryable.Sum``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\n  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\n  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of the sequence of <xref href=\"System.Int32\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#98)]\\n [!code-vb[System.Linq.Queryable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#98)]\"\n  syntax:\n    content: public static int Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values of type <code>TSource</code>.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Int32\n      description: The sum of the projected values.\n  overload: System.Linq.Queryable.Sum``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\n  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\n  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Double>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Double>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Double>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of the sequence of <xref href=\"System.Double\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> depends on the implementation of the type of he `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#98)]\\n [!code-vb[System.Linq.Queryable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#98)]\"\n  syntax:\n    content: public static double Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,double>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values of type <code>TSource</code>.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Double}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Double\n      description: The sum of the projected values.\n  overload: System.Linq.Queryable.Sum``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\n  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\n  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Decimal>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Decimal>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Decimal>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of the sequence of <xref href=\"System.Decimal\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#98)]\\n [!code-vb[System.Linq.Queryable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#98)]\"\n  syntax:\n    content: public static decimal Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,decimal>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values of type <code>TSource</code>.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Decimal}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Decimal\n      description: The sum of the projected values.\n  overload: System.Linq.Queryable.Sum``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\n  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\n  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Decimal>>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Decimal>>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Decimal>>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Computes the sum of the sequence of nullable <xref href=\"System.Decimal\"></xref> values that is obtained by invoking a projection function on each element of the input sequence.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.  \\n  \\n [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  \\n  \\n [!code-csharp[System.Linq.Queryable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#98)]\\n [!code-vb[System.Linq.Queryable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#98)]\"\n  syntax:\n    content: public static Nullable<decimal> Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<decimal>>> selector);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence of values of type <code>TSource</code>.\n    - id: selector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Decimal}}}\n      description: A projection function to apply to each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Nullable{System.Decimal}\n      description: The sum of the projected values.\n  overload: System.Linq.Queryable.Sum``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>selector</code> is `null`.\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: The sum is larger than <xref href=\"System.Decimal.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)\n  commentId: M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)\n  id: Take``1(System.Linq.IQueryable{``0},System.Int32)\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Take<TSource>(IQueryable<TSource>, Int32)\n  nameWithType: Queryable.Take<TSource>(IQueryable<TSource>, Int32)\n  fullName: Queryable.Take<TSource>(IQueryable<TSource>, Int32)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns a specified number of contiguous elements from the start of a sequence.\n  remarks: \"The <xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it takes the first `count` elements from the start of `source`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29> to return elements from the start of a sequence.  \\n  \\n [!code-csharp[System.Linq.Queryable#99](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#99)]\\n [!code-vb[System.Linq.Queryable#99](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#99)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> Take<TSource> (this System.Linq.IQueryable<TSource> source, int count);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: The sequence to return elements from.\n    - id: count\n      type: System.Int32\n      description: The number of elements to return.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the specified number of elements from the start of <code>source</code>.\n  overload: System.Linq.Queryable.Take``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.TakeLast``1(System.Linq.IQueryable{``0},System.Int32)\n  commentId: M:System.Linq.Queryable.TakeLast``1(System.Linq.IQueryable{``0},System.Int32)\n  id: TakeLast``1(System.Linq.IQueryable{``0},System.Int32)\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: TakeLast<TSource>(IQueryable<TSource>, Int32)\n  nameWithType: Queryable.TakeLast<TSource>(IQueryable<TSource>, Int32)\n  fullName: Queryable.TakeLast<TSource>(IQueryable<TSource>, Int32)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> TakeLast<TSource> (this System.Linq.IQueryable<TSource> source, int count);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n    typeParameters:\n    - id: TSource\n      description: ''\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: ''\n  overload: System.Linq.Queryable.TakeLast``1*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  commentId: M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  id: TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: TakeWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n  nameWithType: Queryable.TakeWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n  fullName: Queryable.TakeWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns `false`. It returns all the elements up until that point. The index of each source element is provided as the second argument to `predicate`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> to return elements from the start of a sequence as long as a condition that uses the index of the element is true.  \\n  \\n [!code-csharp[System.Linq.Queryable#101](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#101)]\\n [!code-vb[System.Linq.Queryable#101](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#101)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> TakeWhile<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int,bool>> predicate);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: The sequence to return elements from.\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32,System.Boolean}}\n      description: A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements from the input sequence occurring before the element at which the test specified by <code>predicate</code> no longer passes.\n  overload: System.Linq.Queryable.TakeWhile``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: TakeWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.TakeWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.TakeWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Returns elements from a sequence as long as a specified condition is true.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns `false`. It returns all the elements up until that point.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> to return elements from the start of a sequence as long as a condition is true.  \\n  \\n [!code-csharp[System.Linq.Queryable#100](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#100)]\\n [!code-vb[System.Linq.Queryable#100](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#100)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> TakeWhile<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: The sequence to return elements from.\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}\n      description: A function to test each element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements from the input sequence occurring before the element at which the test specified by <code>predicate</code> no longer passes.\n  overload: System.Linq.Queryable.TakeWhile``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  commentId: M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  id: ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: ThenBy<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  nameWithType: Queryable.ThenBy<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  fullName: Queryable.ThenBy<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it performs a secondary sort of the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`. All previously established sort orders are preserved.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> to perform a secondary ordering of the elements in a sequence.  \\n  \\n [!code-csharp[System.Linq.Queryable#102](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#102)]\\n [!code-vb[System.Linq.Queryable#102](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#102)]\"\n  syntax:\n    content: public static System.Linq.IOrderedQueryable<TSource> ThenBy<TSource,TKey> (this System.Linq.IOrderedQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector);\n    parameters:\n    - id: source\n      type: System.Linq.IOrderedQueryable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> that contains elements to sort.\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}\n      description: A function to extract a key from each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by the function represented by <code>keySelector</code>.\n    return:\n      type: System.Linq.IOrderedQueryable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> whose elements are sorted according to a key.\n  overload: System.Linq.Queryable.ThenBy``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  commentId: M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  id: ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: ThenBy<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  nameWithType: Queryable.ThenBy<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  fullName: Queryable.ThenBy<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it performs a secondary sort of the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`. All previously established sort orders are preserved. The `comparer` parameter is used to compare key values.\"\n  syntax:\n    content: public static System.Linq.IOrderedQueryable<TSource> ThenBy<TSource,TKey> (this System.Linq.IOrderedQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer);\n    parameters:\n    - id: source\n      type: System.Linq.IOrderedQueryable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> that contains elements to sort.\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}\n      description: A function to extract a key from each element.\n    - id: comparer\n      type: System.Collections.Generic.IComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by the function represented by <code>keySelector</code>.\n    return:\n      type: System.Linq.IOrderedQueryable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> whose elements are sorted according to a key.\n  overload: System.Linq.Queryable.ThenBy``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> or <code>comparer</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  commentId: M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  id: ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  nameWithType: Queryable.ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  fullName: Queryable.ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it performs a secondary sort of the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`. All previously established sort orders are preserved.\"\n  syntax:\n    content: public static System.Linq.IOrderedQueryable<TSource> ThenByDescending<TSource,TKey> (this System.Linq.IOrderedQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector);\n    parameters:\n    - id: source\n      type: System.Linq.IOrderedQueryable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> that contains elements to sort.\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}\n      description: A function to extract a key from each element.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key returned by the function represented by <code>keySelector</code>.\n    return:\n      type: System.Linq.IOrderedQueryable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> whose elements are sorted in descending order according to a key.\n  overload: System.Linq.Queryable.ThenByDescending``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  commentId: M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  id: ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  nameWithType: Queryable.ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  fullName: Queryable.ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it performs a secondary sort of the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`. All previously established sort orders are preserved. The `comparer` parameter is used to compare key values.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> to perform a secondary ordering of the elements in a sequence in descending order by using a custom comparer.  \\n  \\n [!code-csharp[System.Linq.Queryable#103](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#103)]\\n [!code-vb[System.Linq.Queryable#103](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#103)]\"\n  syntax:\n    content: public static System.Linq.IOrderedQueryable<TSource> ThenByDescending<TSource,TKey> (this System.Linq.IOrderedQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer);\n    parameters:\n    - id: source\n      type: System.Linq.IOrderedQueryable{TSource}\n      description: An <xref href=\"System.Linq.IOrderedQueryable`1\"></xref> that contains elements to sort.\n    - id: keySelector\n      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}\n      description: A function to extract a key from each element.\n    - id: comparer\n      type: System.Collections.Generic.IComparer{TKey}\n      description: An <xref href=\"System.Collections.Generic.IComparer`1\"></xref> to compare keys.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    - id: TKey\n      description: The type of the key that is returned by the <code>keySelector</code> function.\n    return:\n      type: System.Linq.IOrderedQueryable{TSource}\n      description: A collection whose elements are sorted in descending order according to a key.\n  overload: System.Linq.Queryable.ThenByDescending``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>keySelector</code> or <code>comparer</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  id: Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  nameWithType: Queryable.Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  fullName: Queryable.Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Produces the set union of two sequences by using the default equality comparer.\n  remarks: \"The <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that the set union of the elements in `source1` and `source2` is returned.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the set union of two sequences.  \\n  \\n [!code-csharp[System.Linq.Queryable#109](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#109)]\\n [!code-vb[System.Linq.Queryable#109](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#109)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> Union<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2);\n    parameters:\n    - id: source1\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence whose distinct elements form the first set for the union operation.\n    - id: source2\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence whose distinct elements form the second set for the union operation.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of the input sequences.\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements from both input sequences, excluding duplicates.\n  overload: System.Linq.Queryable.Union``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source1</code> or <code>source2</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Queryable.Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Queryable.Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Produces the set union of two sequences by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref>.\n  remarks: \"The <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> depends on the implementation of the type of the `source1` parameter. The expected behavior is that the set union of the elements in `source1` and `source2` is returned. The `comparer` parameter is used to compare values.\"\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> Union<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer);\n    parameters:\n    - id: source1\n      type: System.Linq.IQueryable{TSource}\n      description: A sequence whose distinct elements form the first set for the union operation.\n    - id: source2\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: A sequence whose distinct elements form the second set for the union operation.\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{TSource}\n      description: An <xref href=\"System.Collections.Generic.IEqualityComparer`1\"></xref> to compare values.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of the input sequences.\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains the elements from both input sequences, excluding duplicates.\n  overload: System.Linq.Queryable.Union``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source1</code> or <code>source2</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  commentId: M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  id: Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Where<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n  nameWithType: Queryable.Where<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n  fullName: Queryable.Where<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the elements from `source` that satisfy the condition specified by `predicate`. The index of each source element is provided as the second argument to `predicate`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29> to filter a sequence based on a predicate that incorporates the index of each element.  \\n  \\n [!code-csharp[System.Linq.Queryable#111](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#111)]\\n [!code-vb[System.Linq.Queryable#111](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#111)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> Where<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int,bool>> predicate);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> to filter.\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32,System.Boolean}}\n      description: A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements from the input sequence that satisfy the condition specified by <code>predicate</code>.\n  overload: System.Linq.Queryable.Where``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  commentId: M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  id: Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Where<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.Where<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.Where<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Filters a sequence of values based on a predicate.\n  remarks: \"This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \\n  \\n The <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \\n  \\n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the elements from `source` that satisfy the condition specified by `predicate`.\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> to filter a sequence.  \\n  \\n [!code-csharp[System.Linq.Queryable#110](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#110)]\\n [!code-vb[System.Linq.Queryable#110](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#110)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TSource> Where<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);\n    parameters:\n    - id: source\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> to filter.\n    - id: predicate\n      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}\n      description: A function to test each element for a condition.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements of <code>source</code>.\n    return:\n      type: System.Linq.IQueryable{TSource}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains elements from the input sequence that satisfy the condition specified by <code>predicate</code>.\n  overload: System.Linq.Queryable.Where``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> or <code>predicate</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  commentId: M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  id: Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  parent: System.Linq.Queryable\n  langs:\n  - csharp\n  name: Zip<TFirst,TSecond,TResult>(IQueryable<TFirst>, IEnumerable<TSecond>, Expression<Func<TFirst,TSecond,TResult>>)\n  nameWithType: Queryable.Zip<TFirst,TSecond,TResult>(IQueryable<TFirst>, IEnumerable<TSecond>, Expression<Func<TFirst,TSecond,TResult>>)\n  fullName: Queryable.Zip<TFirst,TSecond,TResult>(IQueryable<TFirst>, IEnumerable<TSecond>, Expression<Func<TFirst,TSecond,TResult>>)\n  type: Method\n  assemblies:\n  - System.Linq.Queryable\n  - System.Core\n  - netstandard\n  namespace: System.Linq\n  summary: Merges two sequences by using the specified predicate function.\n  remarks: \"The <xref:System.Linq.Queryable.Zip%2A> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.Zip%2A> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \\n  \\n The method merges each element of the first sequence with an element that has the same index in the second sequence. If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them. For example, if one sequence has three elements and the other one has four, the resulting sequence will have only three elements.\"\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Linq.Queryable.Zip%2A> method to merge two sequences.  \\n  \\n [!code-csharp[System.Linq.Queryable#200](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Queryable/CS/queryable.cs#200)]\\n [!code-vb[System.Linq.Queryable#200](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Queryable/VB/queryable.vb#200)]\"\n  syntax:\n    content: public static System.Linq.IQueryable<TResult> Zip<TFirst,TSecond,TResult> (this System.Linq.IQueryable<TFirst> source1, System.Collections.Generic.IEnumerable<TSecond> source2, System.Linq.Expressions.Expression<Func<TFirst,TSecond,TResult>> resultSelector);\n    parameters:\n    - id: source1\n      type: System.Linq.IQueryable{TFirst}\n      description: The first sequence to merge.\n    - id: source2\n      type: System.Collections.Generic.IEnumerable{TSecond}\n      description: The second sequence to merge.\n    - id: resultSelector\n      type: System.Linq.Expressions.Expression{System.Func{TFirst,TSecond,TResult}}\n      description: A function that specifies how to merge the elements from the two sequences.\n    typeParameters:\n    - id: TFirst\n      description: The type of the elements of the first input sequence.\n    - id: TSecond\n      description: The type of the elements of the second input sequence.\n    - id: TResult\n      description: The type of the elements of the result sequence.\n    return:\n      type: System.Linq.IQueryable{TResult}\n      description: An <xref href=\"System.Linq.IQueryable`1\"></xref> that contains merged elements of two input sequences.\n  overload: System.Linq.Queryable.Zip``3*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source1</code> or <code>source2</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.InvalidCastException\n  parent: System\n  isExternal: false\n  name: InvalidCastException\n  nameWithType: InvalidCastException\n  fullName: System.InvalidCastException\n- uid: System.OverflowException\n  parent: System\n  isExternal: false\n  name: OverflowException\n  nameWithType: OverflowException\n  fullName: System.OverflowException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate,TResult>(IQueryable<TSource>, TAccumulate, Expression<Func<TAccumulate,TSource,TAccumulate>>, Expression<Func<TAccumulate,TResult>>)\n  nameWithType: Queryable.Aggregate<TSource,TAccumulate,TResult>(IQueryable<TSource>, TAccumulate, Expression<Func<TAccumulate,TSource,TAccumulate>>, Expression<Func<TAccumulate,TResult>>)\n  fullName: Queryable.Aggregate<TSource,TAccumulate,TResult>(IQueryable<TSource>, TAccumulate, Expression<Func<TAccumulate,TSource,TAccumulate>>, Expression<Func<TAccumulate,TResult>>)\n- uid: TResult\n  isExternal: true\n  name: TResult\n  nameWithType: TResult\n  fullName: TResult\n- uid: System.Linq.IQueryable`1\n  name: IQueryable<T>\n  nameWithType: IQueryable<T>\n  fullName: System.Linq.IQueryable<T>\n- uid: TSource\n  name: TSource\n  nameWithType: TSource\n  fullName: TSource\n- uid: System.Linq.IQueryable{TSource}\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable<TSource>\n  nameWithType: IQueryable<TSource>\n  fullName: System.Linq.IQueryable<TSource>\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    nameWithType: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: TAccumulate\n  isExternal: true\n  name: TAccumulate\n  nameWithType: TAccumulate\n  fullName: TAccumulate\n- uid: System.Linq.Expressions.Expression`1\n  name: Expression<TDelegate>\n  nameWithType: Expression<TDelegate>\n  fullName: System.Linq.Expressions.Expression<TDelegate>\n- uid: System.Func`3\n  name: Func<T1,T2,TResult>\n  nameWithType: Func<T1,T2,TResult>\n  fullName: System.Func<T1,T2,TResult>\n- uid: System.Linq.Expressions.Expression{System.Func{TAccumulate,TSource,TAccumulate}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TAccumulate,TSource,TAccumulate>>\n  nameWithType: Expression<Func<TAccumulate,TSource,TAccumulate>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TAccumulate,TSource,TAccumulate>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TAccumulate\n    name: TAccumulate\n    nameWithType: TAccumulate\n    fullName: TAccumulate\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TAccumulate\n    name: TAccumulate\n    nameWithType: TAccumulate\n    fullName: TAccumulate\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Func`2\n  name: Func<T,TResult>\n  nameWithType: Func<T,TResult>\n  fullName: System.Func<T,TResult>\n- uid: System.Linq.Expressions.Expression{System.Func{TAccumulate,TResult}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TAccumulate,TResult>>\n  nameWithType: Expression<Func<TAccumulate,TResult>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TAccumulate,TResult>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TAccumulate\n    name: TAccumulate\n    nameWithType: TAccumulate\n    fullName: TAccumulate\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate>(IQueryable<TSource>, TAccumulate, Expression<Func<TAccumulate,TSource,TAccumulate>>)\n  nameWithType: Queryable.Aggregate<TSource,TAccumulate>(IQueryable<TSource>, TAccumulate, Expression<Func<TAccumulate,TSource,TAccumulate>>)\n  fullName: Queryable.Aggregate<TSource,TAccumulate>(IQueryable<TSource>, TAccumulate, Expression<Func<TAccumulate,TSource,TAccumulate>>)\n- uid: System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Aggregate<TSource>(IQueryable<TSource>, Expression<Func<TSource,TSource,TSource>>)\n  nameWithType: Queryable.Aggregate<TSource>(IQueryable<TSource>, Expression<Func<TSource,TSource,TSource>>)\n  fullName: Queryable.Aggregate<TSource>(IQueryable<TSource>, Expression<Func<TSource,TSource,TSource>>)\n- uid: System.Linq.Expressions.Expression{System.Func{TSource,TSource,TSource}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TSource,TSource,TSource>>\n  nameWithType: Expression<Func<TSource,TSource,TSource>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource,TSource,TSource>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: All<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.All<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.All<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TSource,Boolean>>\n  nameWithType: Expression<Func<TSource,Boolean>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Boolean>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Boolean\n    name: Boolean\n    nameWithType: Boolean\n    fullName: System.Boolean\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Any<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Any<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Any<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Any<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.Any<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.Any<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.Append``1(System.Linq.IQueryable{``0},``0)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Append<TSource>(IQueryable<TSource>, TSource)\n  nameWithType: Queryable.Append<TSource>(IQueryable<TSource>, TSource)\n  fullName: Queryable.Append<TSource>(IQueryable<TSource>, TSource)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.IQueryable\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable\n  nameWithType: IQueryable\n  fullName: System.Linq.IQueryable\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  nameWithType: IEnumerable\n  fullName: System.Collections.IEnumerable\n- uid: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable<TElement>(IEnumerable<TElement>)\n  nameWithType: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)\n  fullName: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)\n- uid: TElement\n  name: TElement\n  nameWithType: TElement\n  fullName: TElement\n- uid: System.Linq.IQueryable{TElement}\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable<TElement>\n  nameWithType: IQueryable<TElement>\n  fullName: System.Linq.IQueryable<TElement>\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    nameWithType: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TElement\n    name: TElement\n    nameWithType: TElement\n    fullName: TElement\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Collections.Generic.IEnumerable{TElement}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TElement>\n  nameWithType: IEnumerable<TElement>\n  fullName: System.Collections.Generic.IEnumerable<TElement>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TElement\n    name: TElement\n    nameWithType: TElement\n    fullName: TElement\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average(IQueryable<Single>)\n  nameWithType: Queryable.Average(IQueryable<Single>)\n  fullName: Queryable.Average(IQueryable<Single>)\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Linq.IQueryable{System.Single}\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable<Single>\n  nameWithType: IQueryable<Single>\n  fullName: System.Linq.IQueryable<System.Single>\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    nameWithType: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    nameWithType: Single\n    fullName: System.Single\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average(IQueryable<Nullable<Single>>)\n  nameWithType: Queryable.Average(IQueryable<Nullable<Single>>)\n  fullName: Queryable.Average(IQueryable<Nullable<Single>>)\n- uid: System.Nullable`1\n  name: Nullable<T>\n  nameWithType: Nullable<T>\n  fullName: System.Nullable<T>\n- uid: System.Nullable{System.Single}\n  parent: System\n  isExternal: false\n  name: Nullable<Single>\n  nameWithType: Nullable<Single>\n  fullName: System.Nullable<System.Single>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    nameWithType: Single\n    fullName: System.Single\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.IQueryable{System.Nullable{System.Single}}\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable<Nullable<Single>>\n  nameWithType: IQueryable<Nullable<Single>>\n  fullName: System.Linq.IQueryable<System.Nullable<System.Single>>\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    nameWithType: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    nameWithType: Single\n    fullName: System.Single\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average(IQueryable<Nullable<Int64>>)\n  nameWithType: Queryable.Average(IQueryable<Nullable<Int64>>)\n  fullName: Queryable.Average(IQueryable<Nullable<Int64>>)\n- uid: System.Double\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Nullable{System.Double}\n  parent: System\n  isExternal: false\n  name: Nullable<Double>\n  nameWithType: Nullable<Double>\n  fullName: System.Nullable<System.Double>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    nameWithType: Double\n    fullName: System.Double\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Int64\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Linq.IQueryable{System.Nullable{System.Int64}}\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable<Nullable<Int64>>\n  nameWithType: IQueryable<Nullable<Int64>>\n  fullName: System.Linq.IQueryable<System.Nullable<System.Int64>>\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    nameWithType: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average(IQueryable<Nullable<Double>>)\n  nameWithType: Queryable.Average(IQueryable<Nullable<Double>>)\n  fullName: Queryable.Average(IQueryable<Nullable<Double>>)\n- uid: System.Linq.IQueryable{System.Nullable{System.Double}}\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable<Nullable<Double>>\n  nameWithType: IQueryable<Nullable<Double>>\n  fullName: System.Linq.IQueryable<System.Nullable<System.Double>>\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    nameWithType: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    nameWithType: Double\n    fullName: System.Double\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average(IQueryable<Nullable<Int32>>)\n  nameWithType: Queryable.Average(IQueryable<Nullable<Int32>>)\n  fullName: Queryable.Average(IQueryable<Nullable<Int32>>)\n- uid: System.Int32\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Linq.IQueryable{System.Nullable{System.Int32}}\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable<Nullable<Int32>>\n  nameWithType: IQueryable<Nullable<Int32>>\n  fullName: System.Linq.IQueryable<System.Nullable<System.Int32>>\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    nameWithType: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average(IQueryable<Int64>)\n  nameWithType: Queryable.Average(IQueryable<Int64>)\n  fullName: Queryable.Average(IQueryable<Int64>)\n- uid: System.Linq.IQueryable{System.Int64}\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable<Int64>\n  nameWithType: IQueryable<Int64>\n  fullName: System.Linq.IQueryable<System.Int64>\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    nameWithType: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average(IQueryable<Int32>)\n  nameWithType: Queryable.Average(IQueryable<Int32>)\n  fullName: Queryable.Average(IQueryable<Int32>)\n- uid: System.Linq.IQueryable{System.Int32}\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable<Int32>\n  nameWithType: IQueryable<Int32>\n  fullName: System.Linq.IQueryable<System.Int32>\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    nameWithType: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average(IQueryable<Double>)\n  nameWithType: Queryable.Average(IQueryable<Double>)\n  fullName: Queryable.Average(IQueryable<Double>)\n- uid: System.Linq.IQueryable{System.Double}\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable<Double>\n  nameWithType: IQueryable<Double>\n  fullName: System.Linq.IQueryable<System.Double>\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    nameWithType: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    nameWithType: Double\n    fullName: System.Double\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average(IQueryable<Decimal>)\n  nameWithType: Queryable.Average(IQueryable<Decimal>)\n  fullName: Queryable.Average(IQueryable<Decimal>)\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  nameWithType: Decimal\n  fullName: System.Decimal\n- uid: System.Linq.IQueryable{System.Decimal}\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable<Decimal>\n  nameWithType: IQueryable<Decimal>\n  fullName: System.Linq.IQueryable<System.Decimal>\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    nameWithType: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    nameWithType: Decimal\n    fullName: System.Decimal\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average(IQueryable<Nullable<Decimal>>)\n  nameWithType: Queryable.Average(IQueryable<Nullable<Decimal>>)\n  fullName: Queryable.Average(IQueryable<Nullable<Decimal>>)\n- uid: System.Nullable{System.Decimal}\n  parent: System\n  isExternal: false\n  name: Nullable<Decimal>\n  nameWithType: Nullable<Decimal>\n  fullName: System.Nullable<System.Decimal>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    nameWithType: Decimal\n    fullName: System.Decimal\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.IQueryable{System.Nullable{System.Decimal}}\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable<Nullable<Decimal>>\n  nameWithType: IQueryable<Nullable<Decimal>>\n  fullName: System.Linq.IQueryable<System.Nullable<System.Decimal>>\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    nameWithType: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    nameWithType: Decimal\n    fullName: System.Decimal\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Single>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Single>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Single>>)\n- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Single}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TSource,Single>>\n  nameWithType: Expression<Func<TSource,Single>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Single>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Single\n    name: Single\n    nameWithType: Single\n    fullName: System.Single\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Single>>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Single>>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Single>>>)\n- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Single}}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TSource,Nullable<Single>>>\n  nameWithType: Expression<Func<TSource,Nullable<Single>>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Nullable<System.Single>>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    nameWithType: Single\n    fullName: System.Single\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int64>>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int64>>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int64>>>)\n- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Int64}}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TSource,Nullable<Int64>>>\n  nameWithType: Expression<Func<TSource,Nullable<Int64>>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Nullable<System.Int64>>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int32>>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int32>>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int32>>>)\n- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Int32}}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TSource,Nullable<Int32>>>\n  nameWithType: Expression<Func<TSource,Nullable<Int32>>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Nullable<System.Int32>>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Double>>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Double>>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Double>>>)\n- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Double}}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TSource,Nullable<Double>>>\n  nameWithType: Expression<Func<TSource,Nullable<Double>>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Nullable<System.Double>>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    nameWithType: Double\n    fullName: System.Double\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int64>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int64>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int64>>)\n- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Int64}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TSource,Int64>>\n  nameWithType: Expression<Func<TSource,Int64>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Int64>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32>>)\n- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TSource,Int32>>\n  nameWithType: Expression<Func<TSource,Int32>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Int32>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Double>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Double>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Double>>)\n- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Double}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TSource,Double>>\n  nameWithType: Expression<Func<TSource,Double>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Double>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Double\n    name: Double\n    nameWithType: Double\n    fullName: System.Double\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Decimal>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Decimal>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Decimal>>)\n- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Decimal}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TSource,Decimal>>\n  nameWithType: Expression<Func<TSource,Decimal>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Decimal>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Decimal\n    name: Decimal\n    nameWithType: Decimal\n    fullName: System.Decimal\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Decimal>>>)\n  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Decimal>>>)\n  fullName: Queryable.Average<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Decimal>>>)\n- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Decimal}}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TSource,Nullable<Decimal>>>\n  nameWithType: Expression<Func<TSource,Nullable<Decimal>>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Nullable<System.Decimal>>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    nameWithType: Decimal\n    fullName: System.Decimal\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Cast``1(System.Linq.IQueryable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Cast<TResult>(IQueryable)\n  nameWithType: Queryable.Cast<TResult>(IQueryable)\n  fullName: Queryable.Cast<TResult>(IQueryable)\n- uid: System.Linq.IQueryable{TResult}\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable<TResult>\n  nameWithType: IQueryable<TResult>\n  fullName: System.Linq.IQueryable<TResult>\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    nameWithType: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Concat<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  nameWithType: Queryable.Concat<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  fullName: Queryable.Concat<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n- uid: System.Collections.Generic.IEnumerable{TSource}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TSource>\n  nameWithType: IEnumerable<TSource>\n  fullName: System.Collections.Generic.IEnumerable<TSource>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Contains<TSource>(IQueryable<TSource>, TSource, IEqualityComparer<TSource>)\n  nameWithType: Queryable.Contains<TSource>(IQueryable<TSource>, TSource, IEqualityComparer<TSource>)\n  fullName: Queryable.Contains<TSource>(IQueryable<TSource>, TSource, IEqualityComparer<TSource>)\n- uid: System.Collections.Generic.IEqualityComparer`1\n  name: IEqualityComparer<T>\n  nameWithType: IEqualityComparer<T>\n  fullName: System.Collections.Generic.IEqualityComparer<T>\n- uid: System.Collections.Generic.IEqualityComparer{TSource}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEqualityComparer<TSource>\n  nameWithType: IEqualityComparer<TSource>\n  fullName: System.Collections.Generic.IEqualityComparer<TSource>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    nameWithType: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Contains<TSource>(IQueryable<TSource>, TSource)\n  nameWithType: Queryable.Contains<TSource>(IQueryable<TSource>, TSource)\n  fullName: Queryable.Contains<TSource>(IQueryable<TSource>, TSource)\n- uid: System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Count<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Count<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Count<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Count<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.Count<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.Count<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>)\n  fullName: Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>(IQueryable<TSource>, TSource)\n  nameWithType: Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>, TSource)\n  fullName: Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>, TSource)\n- uid: System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Distinct<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Distinct<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Distinct<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Distinct<TSource>(IQueryable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Queryable.Distinct<TSource>(IQueryable<TSource>, IEqualityComparer<TSource>)\n  fullName: Queryable.Distinct<TSource>(IQueryable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: ElementAt<TSource>(IQueryable<TSource>, Int32)\n  nameWithType: Queryable.ElementAt<TSource>(IQueryable<TSource>, Int32)\n  fullName: Queryable.ElementAt<TSource>(IQueryable<TSource>, Int32)\n- uid: System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: ElementAtOrDefault<TSource>(IQueryable<TSource>, Int32)\n  nameWithType: Queryable.ElementAtOrDefault<TSource>(IQueryable<TSource>, Int32)\n  fullName: Queryable.ElementAtOrDefault<TSource>(IQueryable<TSource>, Int32)\n- uid: System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Queryable.Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Queryable.Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  nameWithType: Queryable.Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  fullName: Queryable.Except<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: First<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.First<TSource>(IQueryable<TSource>)\n  fullName: Queryable.First<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: First<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.First<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.First<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: FirstOrDefault<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.FirstOrDefault<TSource>(IQueryable<TSource>)\n  fullName: Queryable.FirstOrDefault<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: FirstOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.FirstOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.FirstOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, Expression<Func<TKey,IEnumerable<TElement>,TResult>>, IEqualityComparer<TKey>)\n  nameWithType: Queryable.GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, Expression<Func<TKey,IEnumerable<TElement>,TResult>>, IEqualityComparer<TKey>)\n  fullName: Queryable.GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, Expression<Func<TKey,IEnumerable<TElement>,TResult>>, IEqualityComparer<TKey>)\n- uid: TKey\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TSource,TKey>>\n  nameWithType: Expression<Func<TSource,TKey>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource,TKey>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Expressions.Expression{System.Func{TSource,TElement}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TSource,TElement>>\n  nameWithType: Expression<Func<TSource,TElement>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource,TElement>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TElement\n    name: TElement\n    nameWithType: TElement\n    fullName: TElement\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Expressions.Expression{System.Func{TKey,System.Collections.Generic.IEnumerable{TElement},TResult}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TKey,IEnumerable<TElement>,TResult>>\n  nameWithType: Expression<Func<TKey,IEnumerable<TElement>,TResult>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TElement\n    name: TElement\n    nameWithType: TElement\n    fullName: TElement\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.IEqualityComparer{TKey}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEqualityComparer<TKey>\n  nameWithType: IEqualityComparer<TKey>\n  fullName: System.Collections.Generic.IEqualityComparer<TKey>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    nameWithType: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, Expression<Func<TKey,IEnumerable<TElement>,TResult>>)\n  nameWithType: Queryable.GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, Expression<Func<TKey,IEnumerable<TElement>,TResult>>)\n  fullName: Queryable.GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, Expression<Func<TKey,IEnumerable<TElement>,TResult>>)\n- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>)\n  nameWithType: Queryable.GroupBy<TSource,TKey,TElement>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>)\n  fullName: Queryable.GroupBy<TSource,TKey,TElement>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>)\n- uid: System.Linq.IGrouping`2\n  name: IGrouping<TKey,TElement>\n  nameWithType: IGrouping<TKey,TElement>\n  fullName: System.Linq.IGrouping<TKey,TElement>\n- uid: System.Linq.IQueryable{System.Linq.IGrouping{TKey,TElement}}\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable<IGrouping<TKey,TElement>>\n  nameWithType: IQueryable<IGrouping<TKey,TElement>>\n  fullName: System.Linq.IQueryable<System.Linq.IGrouping<TKey,TElement>>\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    nameWithType: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Linq.IGrouping`2\n    name: IGrouping\n    nameWithType: IGrouping\n    fullName: System.Linq.IGrouping\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TElement\n    name: TElement\n    nameWithType: TElement\n    fullName: TElement\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, IEqualityComparer<TKey>)\n  nameWithType: Queryable.GroupBy<TSource,TKey,TElement>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, IEqualityComparer<TKey>)\n  fullName: Queryable.GroupBy<TSource,TKey,TElement>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TSource,TElement>>, IEqualityComparer<TKey>)\n- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TKey,IEnumerable<TSource>,TResult>>)\n  nameWithType: Queryable.GroupBy<TSource,TKey,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TKey,IEnumerable<TSource>,TResult>>)\n  fullName: Queryable.GroupBy<TSource,TKey,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TKey,IEnumerable<TSource>,TResult>>)\n- uid: System.Linq.Expressions.Expression{System.Func{TKey,System.Collections.Generic.IEnumerable{TSource},TResult}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TKey,IEnumerable<TSource>,TResult>>\n  nameWithType: Expression<Func<TKey,IEnumerable<TSource>,TResult>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TKey,IEnumerable<TSource>,TResult>>, IEqualityComparer<TKey>)\n  nameWithType: Queryable.GroupBy<TSource,TKey,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TKey,IEnumerable<TSource>,TResult>>, IEqualityComparer<TKey>)\n  fullName: Queryable.GroupBy<TSource,TKey,TResult>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, Expression<Func<TKey,IEnumerable<TSource>,TResult>>, IEqualityComparer<TKey>)\n- uid: System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IEqualityComparer<TKey>)\n  nameWithType: Queryable.GroupBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IEqualityComparer<TKey>)\n  fullName: Queryable.GroupBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IEqualityComparer<TKey>)\n- uid: System.Linq.IQueryable{System.Linq.IGrouping{TKey,TSource}}\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable<IGrouping<TKey,TSource>>\n  nameWithType: IQueryable<IGrouping<TKey,TSource>>\n  fullName: System.Linq.IQueryable<System.Linq.IGrouping<TKey,TSource>>\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    nameWithType: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Linq.IGrouping`2\n    name: IGrouping\n    nameWithType: IGrouping\n    fullName: System.Linq.IGrouping\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  nameWithType: Queryable.GroupBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  fullName: Queryable.GroupBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n- uid: System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,IEnumerable<TInner>,TResult>>)\n  nameWithType: Queryable.GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,IEnumerable<TInner>,TResult>>)\n  fullName: Queryable.GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,IEnumerable<TInner>,TResult>>)\n- uid: TOuter\n  name: TOuter\n  nameWithType: TOuter\n  fullName: TOuter\n- uid: System.Linq.IQueryable{TOuter}\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable<TOuter>\n  nameWithType: IQueryable<TOuter>\n  fullName: System.Linq.IQueryable<TOuter>\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    nameWithType: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TOuter\n    name: TOuter\n    nameWithType: TOuter\n    fullName: TOuter\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: TInner\n  name: TInner\n  nameWithType: TInner\n  fullName: TInner\n- uid: System.Collections.Generic.IEnumerable{TInner}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TInner>\n  nameWithType: IEnumerable<TInner>\n  fullName: System.Collections.Generic.IEnumerable<TInner>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TInner\n    name: TInner\n    nameWithType: TInner\n    fullName: TInner\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Expressions.Expression{System.Func{TOuter,TKey}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TOuter,TKey>>\n  nameWithType: Expression<Func<TOuter,TKey>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TOuter,TKey>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TOuter\n    name: TOuter\n    nameWithType: TOuter\n    fullName: TOuter\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Expressions.Expression{System.Func{TInner,TKey}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TInner,TKey>>\n  nameWithType: Expression<Func<TInner,TKey>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TInner,TKey>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TInner\n    name: TInner\n    nameWithType: TInner\n    fullName: TInner\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Expressions.Expression{System.Func{TOuter,System.Collections.Generic.IEnumerable{TInner},TResult}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TOuter,IEnumerable<TInner>,TResult>>\n  nameWithType: Expression<Func<TOuter,IEnumerable<TInner>,TResult>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TOuter\n    name: TOuter\n    nameWithType: TOuter\n    fullName: TOuter\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TInner\n    name: TInner\n    nameWithType: TInner\n    fullName: TInner\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,IEnumerable<TInner>,TResult>>, IEqualityComparer<TKey>)\n  nameWithType: Queryable.GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,IEnumerable<TInner>,TResult>>, IEqualityComparer<TKey>)\n  fullName: Queryable.GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,IEnumerable<TInner>,TResult>>, IEqualityComparer<TKey>)\n- uid: System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  nameWithType: Queryable.Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  fullName: Queryable.Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Queryable.Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Queryable.Intersect<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,TInner,TResult>>)\n  nameWithType: Queryable.Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,TInner,TResult>>)\n  fullName: Queryable.Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,TInner,TResult>>)\n- uid: System.Linq.Expressions.Expression{System.Func{TOuter,TInner,TResult}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TOuter,TInner,TResult>>\n  nameWithType: Expression<Func<TOuter,TInner,TResult>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TOuter,TInner,TResult>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TOuter\n    name: TOuter\n    nameWithType: TOuter\n    fullName: TOuter\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TInner\n    name: TInner\n    nameWithType: TInner\n    fullName: TInner\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,TInner,TResult>>, IEqualityComparer<TKey>)\n  nameWithType: Queryable.Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,TInner,TResult>>, IEqualityComparer<TKey>)\n  fullName: Queryable.Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter,TKey>>, Expression<Func<TInner,TKey>>, Expression<Func<TOuter,TInner,TResult>>, IEqualityComparer<TKey>)\n- uid: System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Last<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Last<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Last<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Last<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.Last<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.Last<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: LastOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.LastOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.LastOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: LastOrDefault<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.LastOrDefault<TSource>(IQueryable<TSource>)\n  fullName: Queryable.LastOrDefault<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: LongCount<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.LongCount<TSource>(IQueryable<TSource>)\n  fullName: Queryable.LongCount<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: LongCount<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.LongCount<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.LongCount<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Max<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n  nameWithType: Queryable.Max<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n  fullName: Queryable.Max<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n- uid: System.Linq.Expressions.Expression{System.Func{TSource,TResult}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TSource,TResult>>\n  nameWithType: Expression<Func<TSource,TResult>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource,TResult>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Max<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Max<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Max<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Min<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n  nameWithType: Queryable.Min<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n  fullName: Queryable.Min<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n- uid: System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Min<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Min<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Min<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.OfType``1(System.Linq.IQueryable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: OfType<TResult>(IQueryable)\n  nameWithType: Queryable.OfType<TResult>(IQueryable)\n  fullName: Queryable.OfType<TResult>(IQueryable)\n- uid: System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: OrderBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  nameWithType: Queryable.OrderBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  fullName: Queryable.OrderBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n- uid: System.Linq.IOrderedQueryable`1\n  name: IOrderedQueryable<T>\n  nameWithType: IOrderedQueryable<T>\n  fullName: System.Linq.IOrderedQueryable<T>\n- uid: System.Linq.IOrderedQueryable{TSource}\n  parent: System.Linq\n  isExternal: false\n  name: IOrderedQueryable<TSource>\n  nameWithType: IOrderedQueryable<TSource>\n  fullName: System.Linq.IOrderedQueryable<TSource>\n  spec.csharp:\n  - uid: System.Linq.IOrderedQueryable`1\n    name: IOrderedQueryable\n    nameWithType: IOrderedQueryable\n    fullName: System.Linq.IOrderedQueryable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.IComparer`1\n  name: IComparer<T>\n  nameWithType: IComparer<T>\n  fullName: System.Collections.Generic.IComparer<T>\n- uid: System.Collections.Generic.IComparer{TKey}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IComparer<TKey>\n  nameWithType: IComparer<TKey>\n  fullName: System.Collections.Generic.IComparer<TKey>\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    nameWithType: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: OrderBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  nameWithType: Queryable.OrderBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  fullName: Queryable.OrderBy<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n- uid: System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  nameWithType: Queryable.OrderByDescending<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  fullName: Queryable.OrderByDescending<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>)\n- uid: System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  nameWithType: Queryable.OrderByDescending<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  fullName: Queryable.OrderByDescending<TSource,TKey>(IQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n- uid: System.Linq.Queryable.Prepend``1(System.Linq.IQueryable{``0},``0)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Prepend<TSource>(IQueryable<TSource>, TSource)\n  nameWithType: Queryable.Prepend<TSource>(IQueryable<TSource>, TSource)\n  fullName: Queryable.Prepend<TSource>(IQueryable<TSource>, TSource)\n- uid: System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Reverse<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Reverse<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Reverse<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Select<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,TResult>>)\n  nameWithType: Queryable.Select<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,TResult>>)\n  fullName: Queryable.Select<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,TResult>>)\n- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32,TResult}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TSource,Int32,TResult>>\n  nameWithType: Expression<Func<TSource,Int32,TResult>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,TResult>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Select<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n  nameWithType: Queryable.Select<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n  fullName: Queryable.Select<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,TResult>>)\n- uid: System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,IEnumerable<TCollection>>>, Expression<Func<TSource,TCollection,TResult>>)\n  nameWithType: Queryable.SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,IEnumerable<TCollection>>>, Expression<Func<TSource,TCollection,TResult>>)\n  fullName: Queryable.SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,IEnumerable<TCollection>>>, Expression<Func<TSource,TCollection,TResult>>)\n- uid: TCollection\n  name: TCollection\n  nameWithType: TCollection\n  fullName: TCollection\n- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32,System.Collections.Generic.IEnumerable{TCollection}}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TSource,Int32,IEnumerable<TCollection>>>\n  nameWithType: Expression<Func<TSource,Int32,IEnumerable<TCollection>>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TCollection>>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TCollection\n    name: TCollection\n    nameWithType: TCollection\n    fullName: TCollection\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Expressions.Expression{System.Func{TSource,TCollection,TResult}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TSource,TCollection,TResult>>\n  nameWithType: Expression<Func<TSource,TCollection,TResult>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource,TCollection,TResult>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TCollection\n    name: TCollection\n    nameWithType: TCollection\n    fullName: TCollection\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>, Expression<Func<TSource,IEnumerable<TCollection>>>, Expression<Func<TSource,TCollection,TResult>>)\n  nameWithType: Queryable.SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>, Expression<Func<TSource,IEnumerable<TCollection>>>, Expression<Func<TSource,TCollection,TResult>>)\n  fullName: Queryable.SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>, Expression<Func<TSource,IEnumerable<TCollection>>>, Expression<Func<TSource,TCollection,TResult>>)\n- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Collections.Generic.IEnumerable{TCollection}}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TSource,IEnumerable<TCollection>>>\n  nameWithType: Expression<Func<TSource,IEnumerable<TCollection>>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Collections.Generic.IEnumerable<TCollection>>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TCollection\n    name: TCollection\n    nameWithType: TCollection\n    fullName: TCollection\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SelectMany<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,IEnumerable<TResult>>>)\n  nameWithType: Queryable.SelectMany<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,IEnumerable<TResult>>>)\n  fullName: Queryable.SelectMany<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,Int32,IEnumerable<TResult>>>)\n- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32,System.Collections.Generic.IEnumerable{TResult}}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TSource,Int32,IEnumerable<TResult>>>\n  nameWithType: Expression<Func<TSource,Int32,IEnumerable<TResult>>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TResult>>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SelectMany<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,IEnumerable<TResult>>>)\n  nameWithType: Queryable.SelectMany<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,IEnumerable<TResult>>>)\n  fullName: Queryable.SelectMany<TSource,TResult>(IQueryable<TSource>, Expression<Func<TSource,IEnumerable<TResult>>>)\n- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Collections.Generic.IEnumerable{TResult}}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TSource,IEnumerable<TResult>>>\n  nameWithType: Expression<Func<TSource,IEnumerable<TResult>>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Collections.Generic.IEnumerable<TResult>>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  nameWithType: Queryable.SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  fullName: Queryable.SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Queryable.SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Queryable.SequenceEqual<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Single<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.Single<TSource>(IQueryable<TSource>)\n  fullName: Queryable.Single<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Single<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.Single<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.Single<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SingleOrDefault<TSource>(IQueryable<TSource>)\n  nameWithType: Queryable.SingleOrDefault<TSource>(IQueryable<TSource>)\n  fullName: Queryable.SingleOrDefault<TSource>(IQueryable<TSource>)\n- uid: System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SingleOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.SingleOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.SingleOrDefault<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Skip<TSource>(IQueryable<TSource>, Int32)\n  nameWithType: Queryable.Skip<TSource>(IQueryable<TSource>, Int32)\n  fullName: Queryable.Skip<TSource>(IQueryable<TSource>, Int32)\n- uid: System.Linq.Queryable.SkipLast``1(System.Linq.IQueryable{``0},System.Int32)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SkipLast<TSource>(IQueryable<TSource>, Int32)\n  nameWithType: Queryable.SkipLast<TSource>(IQueryable<TSource>, Int32)\n  fullName: Queryable.SkipLast<TSource>(IQueryable<TSource>, Int32)\n- uid: System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SkipWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.SkipWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.SkipWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SkipWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n  nameWithType: Queryable.SkipWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n  fullName: Queryable.SkipWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32,System.Boolean}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TSource,Int32,Boolean>>\n  nameWithType: Expression<Func<TSource,Int32,Boolean>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,System.Boolean>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Boolean\n    name: Boolean\n    nameWithType: Boolean\n    fullName: System.Boolean\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum(IQueryable<Single>)\n  nameWithType: Queryable.Sum(IQueryable<Single>)\n  fullName: Queryable.Sum(IQueryable<Single>)\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum(IQueryable<Nullable<Single>>)\n  nameWithType: Queryable.Sum(IQueryable<Nullable<Single>>)\n  fullName: Queryable.Sum(IQueryable<Nullable<Single>>)\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum(IQueryable<Nullable<Int64>>)\n  nameWithType: Queryable.Sum(IQueryable<Nullable<Int64>>)\n  fullName: Queryable.Sum(IQueryable<Nullable<Int64>>)\n- uid: System.Nullable{System.Int64}\n  parent: System\n  isExternal: false\n  name: Nullable<Int64>\n  nameWithType: Nullable<Int64>\n  fullName: System.Nullable<System.Int64>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum(IQueryable<Nullable<Int32>>)\n  nameWithType: Queryable.Sum(IQueryable<Nullable<Int32>>)\n  fullName: Queryable.Sum(IQueryable<Nullable<Int32>>)\n- uid: System.Nullable{System.Int32}\n  parent: System\n  isExternal: false\n  name: Nullable<Int32>\n  nameWithType: Nullable<Int32>\n  fullName: System.Nullable<System.Int32>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum(IQueryable<Nullable<Double>>)\n  nameWithType: Queryable.Sum(IQueryable<Nullable<Double>>)\n  fullName: Queryable.Sum(IQueryable<Nullable<Double>>)\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum(IQueryable<Double>)\n  nameWithType: Queryable.Sum(IQueryable<Double>)\n  fullName: Queryable.Sum(IQueryable<Double>)\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum(IQueryable<Int64>)\n  nameWithType: Queryable.Sum(IQueryable<Int64>)\n  fullName: Queryable.Sum(IQueryable<Int64>)\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum(IQueryable<Int32>)\n  nameWithType: Queryable.Sum(IQueryable<Int32>)\n  fullName: Queryable.Sum(IQueryable<Int32>)\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum(IQueryable<Nullable<Decimal>>)\n  nameWithType: Queryable.Sum(IQueryable<Nullable<Decimal>>)\n  fullName: Queryable.Sum(IQueryable<Nullable<Decimal>>)\n- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum(IQueryable<Decimal>)\n  nameWithType: Queryable.Sum(IQueryable<Decimal>)\n  fullName: Queryable.Sum(IQueryable<Decimal>)\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Single>>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Single>>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Single>>>)\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int64>>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int64>>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int64>>>)\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int32>>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int32>>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Int32>>>)\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Double>>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Double>>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Double>>>)\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Single>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Single>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Single>>)\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int64>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int64>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int64>>)\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32>>)\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Double>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Double>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Double>>)\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Decimal>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Decimal>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Decimal>>)\n- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Decimal>>>)\n  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Decimal>>>)\n  fullName: Queryable.Sum<TSource>(IQueryable<TSource>, Expression<Func<TSource,Nullable<Decimal>>>)\n- uid: System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Take<TSource>(IQueryable<TSource>, Int32)\n  nameWithType: Queryable.Take<TSource>(IQueryable<TSource>, Int32)\n  fullName: Queryable.Take<TSource>(IQueryable<TSource>, Int32)\n- uid: System.Linq.Queryable.TakeLast``1(System.Linq.IQueryable{``0},System.Int32)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: TakeLast<TSource>(IQueryable<TSource>, Int32)\n  nameWithType: Queryable.TakeLast<TSource>(IQueryable<TSource>, Int32)\n  fullName: Queryable.TakeLast<TSource>(IQueryable<TSource>, Int32)\n- uid: System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: TakeWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n  nameWithType: Queryable.TakeWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n  fullName: Queryable.TakeWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n- uid: System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: TakeWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.TakeWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.TakeWhile<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: ThenBy<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  nameWithType: Queryable.ThenBy<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  fullName: Queryable.ThenBy<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>)\n- uid: System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: ThenBy<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  nameWithType: Queryable.ThenBy<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  fullName: Queryable.ThenBy<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n- uid: System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  nameWithType: Queryable.ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>)\n  fullName: Queryable.ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>)\n- uid: System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  nameWithType: Queryable.ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n  fullName: Queryable.ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>, Expression<Func<TSource,TKey>>, IComparer<TKey>)\n- uid: System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  nameWithType: Queryable.Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n  fullName: Queryable.Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>)\n- uid: System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType: Queryable.Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: Queryable.Union<TSource>(IQueryable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n- uid: System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Where<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n  nameWithType: Queryable.Where<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n  fullName: Queryable.Where<TSource>(IQueryable<TSource>, Expression<Func<TSource,Int32,Boolean>>)\n- uid: System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Where<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  nameWithType: Queryable.Where<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n  fullName: Queryable.Where<TSource>(IQueryable<TSource>, Expression<Func<TSource,Boolean>>)\n- uid: System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Zip<TFirst,TSecond,TResult>(IQueryable<TFirst>, IEnumerable<TSecond>, Expression<Func<TFirst,TSecond,TResult>>)\n  nameWithType: Queryable.Zip<TFirst,TSecond,TResult>(IQueryable<TFirst>, IEnumerable<TSecond>, Expression<Func<TFirst,TSecond,TResult>>)\n  fullName: Queryable.Zip<TFirst,TSecond,TResult>(IQueryable<TFirst>, IEnumerable<TSecond>, Expression<Func<TFirst,TSecond,TResult>>)\n- uid: TFirst\n  name: TFirst\n  nameWithType: TFirst\n  fullName: TFirst\n- uid: System.Linq.IQueryable{TFirst}\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable<TFirst>\n  nameWithType: IQueryable<TFirst>\n  fullName: System.Linq.IQueryable<TFirst>\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    nameWithType: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TFirst\n    name: TFirst\n    nameWithType: TFirst\n    fullName: TFirst\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: TSecond\n  name: TSecond\n  nameWithType: TSecond\n  fullName: TSecond\n- uid: System.Collections.Generic.IEnumerable{TSecond}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TSecond>\n  nameWithType: IEnumerable<TSecond>\n  fullName: System.Collections.Generic.IEnumerable<TSecond>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSecond\n    name: TSecond\n    nameWithType: TSecond\n    fullName: TSecond\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Expressions.Expression{System.Func{TFirst,TSecond,TResult}}\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<Func<TFirst,TSecond,TResult>>\n  nameWithType: Expression<Func<TFirst,TSecond,TResult>>\n  fullName: System.Linq.Expressions.Expression<System.Func<TFirst,TSecond,TResult>>\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TFirst\n    name: TFirst\n    nameWithType: TFirst\n    fullName: TFirst\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TSecond\n    name: TSecond\n    nameWithType: TSecond\n    fullName: TSecond\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Queryable.Aggregate``3*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate,TResult>\n  nameWithType: Queryable.Aggregate<TSource,TAccumulate,TResult>\n  fullName: Queryable.Aggregate<TSource,TAccumulate,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Aggregate``2*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Aggregate<TSource,TAccumulate>\n  nameWithType: Queryable.Aggregate<TSource,TAccumulate>\n  fullName: Queryable.Aggregate<TSource,TAccumulate>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Aggregate``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Aggregate<TSource>\n  nameWithType: Queryable.Aggregate<TSource>\n  fullName: Queryable.Aggregate<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.All``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: All<TSource>\n  nameWithType: Queryable.All<TSource>\n  fullName: Queryable.All<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Any``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Any<TSource>\n  nameWithType: Queryable.Any<TSource>\n  fullName: Queryable.Any<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Append``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Append<TSource>\n  nameWithType: Queryable.Append<TSource>\n  fullName: Queryable.Append<TSource>\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.AsQueryable*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable\n  nameWithType: Queryable.AsQueryable\n  fullName: Queryable.AsQueryable\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.AsQueryable``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable<TElement>\n  nameWithType: Queryable.AsQueryable<TElement>\n  fullName: Queryable.AsQueryable<TElement>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Average*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average\n  nameWithType: Queryable.Average\n  fullName: Queryable.Average\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Average``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Average<TSource>\n  nameWithType: Queryable.Average<TSource>\n  fullName: Queryable.Average<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Cast``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Cast<TResult>\n  nameWithType: Queryable.Cast<TResult>\n  fullName: Queryable.Cast<TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Concat``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Concat<TSource>\n  nameWithType: Queryable.Concat<TSource>\n  fullName: Queryable.Concat<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Contains``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Contains<TSource>\n  nameWithType: Queryable.Contains<TSource>\n  fullName: Queryable.Contains<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Count``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Count<TSource>\n  nameWithType: Queryable.Count<TSource>\n  fullName: Queryable.Count<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.DefaultIfEmpty``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: DefaultIfEmpty<TSource>\n  nameWithType: Queryable.DefaultIfEmpty<TSource>\n  fullName: Queryable.DefaultIfEmpty<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Distinct``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Distinct<TSource>\n  nameWithType: Queryable.Distinct<TSource>\n  fullName: Queryable.Distinct<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.ElementAt``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: ElementAt<TSource>\n  nameWithType: Queryable.ElementAt<TSource>\n  fullName: Queryable.ElementAt<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.ElementAtOrDefault``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: ElementAtOrDefault<TSource>\n  nameWithType: Queryable.ElementAtOrDefault<TSource>\n  fullName: Queryable.ElementAtOrDefault<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Except``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Except<TSource>\n  nameWithType: Queryable.Except<TSource>\n  fullName: Queryable.Except<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.First``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: First<TSource>\n  nameWithType: Queryable.First<TSource>\n  fullName: Queryable.First<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.FirstOrDefault``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: FirstOrDefault<TSource>\n  nameWithType: Queryable.FirstOrDefault<TSource>\n  fullName: Queryable.FirstOrDefault<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.GroupBy``4*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement,TResult>\n  nameWithType: Queryable.GroupBy<TSource,TKey,TElement,TResult>\n  fullName: Queryable.GroupBy<TSource,TKey,TElement,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.GroupBy``3*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupBy<TSource,TKey,TElement>\n  nameWithType: Queryable.GroupBy<TSource,TKey,TElement>\n  fullName: Queryable.GroupBy<TSource,TKey,TElement>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.GroupBy``2*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupBy<TSource,TKey>\n  nameWithType: Queryable.GroupBy<TSource,TKey>\n  fullName: Queryable.GroupBy<TSource,TKey>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.GroupJoin``4*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: GroupJoin<TOuter,TInner,TKey,TResult>\n  nameWithType: Queryable.GroupJoin<TOuter,TInner,TKey,TResult>\n  fullName: Queryable.GroupJoin<TOuter,TInner,TKey,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Intersect``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Intersect<TSource>\n  nameWithType: Queryable.Intersect<TSource>\n  fullName: Queryable.Intersect<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Join``4*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Join<TOuter,TInner,TKey,TResult>\n  nameWithType: Queryable.Join<TOuter,TInner,TKey,TResult>\n  fullName: Queryable.Join<TOuter,TInner,TKey,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Last``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Last<TSource>\n  nameWithType: Queryable.Last<TSource>\n  fullName: Queryable.Last<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.LastOrDefault``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: LastOrDefault<TSource>\n  nameWithType: Queryable.LastOrDefault<TSource>\n  fullName: Queryable.LastOrDefault<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.LongCount``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: LongCount<TSource>\n  nameWithType: Queryable.LongCount<TSource>\n  fullName: Queryable.LongCount<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Max``2*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Max<TSource,TResult>\n  nameWithType: Queryable.Max<TSource,TResult>\n  fullName: Queryable.Max<TSource,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Max``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Max<TSource>\n  nameWithType: Queryable.Max<TSource>\n  fullName: Queryable.Max<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Min``2*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Min<TSource,TResult>\n  nameWithType: Queryable.Min<TSource,TResult>\n  fullName: Queryable.Min<TSource,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Min``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Min<TSource>\n  nameWithType: Queryable.Min<TSource>\n  fullName: Queryable.Min<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.OfType``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: OfType<TResult>\n  nameWithType: Queryable.OfType<TResult>\n  fullName: Queryable.OfType<TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.OrderBy``2*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: OrderBy<TSource,TKey>\n  nameWithType: Queryable.OrderBy<TSource,TKey>\n  fullName: Queryable.OrderBy<TSource,TKey>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.OrderByDescending``2*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: OrderByDescending<TSource,TKey>\n  nameWithType: Queryable.OrderByDescending<TSource,TKey>\n  fullName: Queryable.OrderByDescending<TSource,TKey>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Prepend``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Prepend<TSource>\n  nameWithType: Queryable.Prepend<TSource>\n  fullName: Queryable.Prepend<TSource>\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Reverse``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Reverse<TSource>\n  nameWithType: Queryable.Reverse<TSource>\n  fullName: Queryable.Reverse<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Select``2*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Select<TSource,TResult>\n  nameWithType: Queryable.Select<TSource,TResult>\n  fullName: Queryable.Select<TSource,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.SelectMany``3*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SelectMany<TSource,TCollection,TResult>\n  nameWithType: Queryable.SelectMany<TSource,TCollection,TResult>\n  fullName: Queryable.SelectMany<TSource,TCollection,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.SelectMany``2*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SelectMany<TSource,TResult>\n  nameWithType: Queryable.SelectMany<TSource,TResult>\n  fullName: Queryable.SelectMany<TSource,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.SequenceEqual``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SequenceEqual<TSource>\n  nameWithType: Queryable.SequenceEqual<TSource>\n  fullName: Queryable.SequenceEqual<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Single``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Single<TSource>\n  nameWithType: Queryable.Single<TSource>\n  fullName: Queryable.Single<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.SingleOrDefault``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SingleOrDefault<TSource>\n  nameWithType: Queryable.SingleOrDefault<TSource>\n  fullName: Queryable.SingleOrDefault<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Skip``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Skip<TSource>\n  nameWithType: Queryable.Skip<TSource>\n  fullName: Queryable.Skip<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.SkipLast``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SkipLast<TSource>\n  nameWithType: Queryable.SkipLast<TSource>\n  fullName: Queryable.SkipLast<TSource>\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.SkipWhile``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: SkipWhile<TSource>\n  nameWithType: Queryable.SkipWhile<TSource>\n  fullName: Queryable.SkipWhile<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Sum*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum\n  nameWithType: Queryable.Sum\n  fullName: Queryable.Sum\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Sum``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Sum<TSource>\n  nameWithType: Queryable.Sum<TSource>\n  fullName: Queryable.Sum<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Take``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Take<TSource>\n  nameWithType: Queryable.Take<TSource>\n  fullName: Queryable.Take<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.TakeLast``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: TakeLast<TSource>\n  nameWithType: Queryable.TakeLast<TSource>\n  fullName: Queryable.TakeLast<TSource>\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.TakeWhile``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: TakeWhile<TSource>\n  nameWithType: Queryable.TakeWhile<TSource>\n  fullName: Queryable.TakeWhile<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.ThenBy``2*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: ThenBy<TSource,TKey>\n  nameWithType: Queryable.ThenBy<TSource,TKey>\n  fullName: Queryable.ThenBy<TSource,TKey>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.ThenByDescending``2*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: ThenByDescending<TSource,TKey>\n  nameWithType: Queryable.ThenByDescending<TSource,TKey>\n  fullName: Queryable.ThenByDescending<TSource,TKey>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Union``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Union<TSource>\n  nameWithType: Queryable.Union<TSource>\n  fullName: Queryable.Union<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Where``1*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Where<TSource>\n  nameWithType: Queryable.Where<TSource>\n  fullName: Queryable.Where<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Linq.Queryable.Zip``3*\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: Zip<TFirst,TSecond,TResult>\n  nameWithType: Queryable.Zip<TFirst,TSecond,TResult>\n  fullName: Queryable.Zip<TFirst,TSecond,TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq/Queryable.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}