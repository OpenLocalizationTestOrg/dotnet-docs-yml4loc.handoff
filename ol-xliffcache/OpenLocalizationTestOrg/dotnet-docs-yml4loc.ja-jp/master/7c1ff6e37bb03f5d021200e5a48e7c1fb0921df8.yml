### YamlMime:ManagedReference
items:
- uid: System.Web.Security.Roles
  commentId: T:System.Web.Security.Roles
  id: Roles
  children:
  - System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)
  - System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])
  - System.Web.Security.Roles.AddUserToRole(System.String,System.String)
  - System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])
  - System.Web.Security.Roles.ApplicationName
  - System.Web.Security.Roles.CacheRolesInCookie
  - System.Web.Security.Roles.CookieName
  - System.Web.Security.Roles.CookiePath
  - System.Web.Security.Roles.CookieProtectionValue
  - System.Web.Security.Roles.CookieRequireSSL
  - System.Web.Security.Roles.CookieSlidingExpiration
  - System.Web.Security.Roles.CookieTimeout
  - System.Web.Security.Roles.CreatePersistentCookie
  - System.Web.Security.Roles.CreateRole(System.String)
  - System.Web.Security.Roles.DeleteCookie
  - System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)
  - System.Web.Security.Roles.DeleteRole(System.String)
  - System.Web.Security.Roles.Domain
  - System.Web.Security.Roles.Enabled
  - System.Web.Security.Roles.FindUsersInRole(System.String,System.String)
  - System.Web.Security.Roles.GetAllRoles
  - System.Web.Security.Roles.GetRolesForUser
  - System.Web.Security.Roles.GetRolesForUser(System.String)
  - System.Web.Security.Roles.GetUsersInRole(System.String)
  - System.Web.Security.Roles.IsUserInRole(System.String)
  - System.Web.Security.Roles.IsUserInRole(System.String,System.String)
  - System.Web.Security.Roles.MaxCachedResults
  - System.Web.Security.Roles.Provider
  - System.Web.Security.Roles.Providers
  - System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)
  - System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])
  - System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)
  - System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])
  - System.Web.Security.Roles.RoleExists(System.String)
  langs:
  - csharp
  name: Roles
  nameWithType: Roles
  fullName: System.Web.Security.Roles
  type: Class
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Manages user membership in roles for authorization checking in an ASP.NET application. This class cannot be inherited.
  remarks: "ASP.NET role management enables you to manage authorization for your application based on groups of users, referred to as roles. By assigning users to roles, you can control access to different parts or features of your Web application based on role instead of, or in addition to, specifying authorization based on user name. For example, an employee application might have roles such as Managers, Employees, Directors, and so on, where different privileges are specified for each role.  \n  \n Users can belong to more than one role. For example, if your site is a discussion forum, some users might be in the role of both Members and Moderators. You might define each role to have different privileges on the site, and a user who is in both roles would then have both sets of privileges.  \n  \n To enable role management for your ASP.NET application, use the  element of the `system.web` section in the Web.config file for your application, as shown in the following example.  \n  \n```  \n<configuration>  \n  <connectionStrings>  \n    <add name=\"SqlServices\" connectionString=\"Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;\" />  \n  </connectionStrings>  \n  \n  <system.web>  \n    <authentication mode=\"Forms\" >  \n      <forms loginUrl=\"login.aspx\"  \n      name=\".ASPXFORMSAUTH\" />  \n    </authentication>  \n  \n  <roleManager defaultProvider=\"SqlProvider\"   \n    enabled=\"true\"  \n    cacheRolesInCookie=\"true\"  \n    cookieName=\".ASPROLES\"  \n    cookieTimeout=\"30\"  \n    cookiePath=\"/\"  \n    cookieRequireSSL=\"false\"  \n    cookieSlidingExpiration=\"true\"  \n    cookieProtection=\"All\" >  \n    <providers>  \n      <add  \n        name=\"SqlProvider\"  \n        type=\"System.Web.Security.SqlRoleProvider\"  \n        connectionStringName=\"SqlServices\"  \n        applicationName=\"SampleApplication\" />  \n      </providers>  \n    </roleManager>  \n  </system.web>  \n</configuration>  \n```  \n  \n You can specify authorization rules in the configuration file for your Web application or programmatically in your code. For example, the following  section from a Web.config file requires users to log on (by denying anonymous users), and then allows only users in the Administrators role to have access.  \n  \n```  \n<authorization>  \n  <deny users=\"?\" />  \n  <allow roles=\"Administrators\" />  \n  <deny users=\"*\" />  \n</authorization>  \n```  \n  \n If you use the `authorization` section in your application's Web.config file to specify authorization based on roles, users of your application must supply an authenticated user identity. You can authenticate users by using either Windows or Forms authentication. Anonymous users cannot be assigned to a role. Roles can be used independently of, or in conjunction with, the ASP.NET <xref:System.Web.Security.Membership> classes.  \n  \n To verify role membership programmatically, you can use the <xref:System.Web.Security.Roles> class or the <xref:System.Web.UI.Page.User%2A?displayProperty=fullName> property with the <xref:System.Web.Security.Roles.IsUserInRole%2A> method, or you can use the <xref:System.Web.UI.Page.User%2A?displayProperty=fullName> property with the <xref:System.Security.Principal.IPrincipal.IsInRole%2A?displayProperty=fullName> method. For sample code that programmatically checks role membership, see the Example section in this topic.  \n  \n The <xref:System.Web.Security.Roles> class also enables you to create and delete roles and to add users to or remove users from roles.  \n  \n> [!NOTE]\n>  If you have configured your application to use the <xref:System.Web.Security.WindowsTokenRoleProvider> class, you cannot modify roles or role membership. The <xref:System.Web.Security.WindowsTokenRoleProvider> classverifies membership in Windows security groups only. In this case, you must use Windows user account management rather than ASP.NET roles to create and delete groups and manage group membership.  \n  \n You can store role information in several data sources.  \n  \n-   You can use the <xref:System.Web.Security.WindowsTokenRoleProvider> class to retrieve role information based on membership in Windows groups.  \n  \n-   You can store role information in a SQL Server database by using the <xref:System.Web.Security.SqlRoleProvider> class.  \n  \n-   If you have existing role information, or want to store role information in and retrieve role information from a data source other than Windows, an Authorization Store, or SQL Server, you can implement a custom role provider by creating a class that inherits the <xref:System.Web.Security.RoleProvider> abstract class. For more information, see [Implementing a Role Provider](http://msdn.microsoft.com/library/851671ce-bf9b-43f2-aba4-bc9d28b11c7d).  \n  \n If a user's browser accepts cookies, you can store role information for that user in a cookie on the user's computer. On each page request, ASP.NET reads the role information for that user from the cookie. This can improve application performance by reducing the amount of communication required with the data source to retrieve role information. If the role information for a user is too long to store in a cookie, ASP.NET stores just the most recently used role information in the cookie and then looks up additional role information in the data source as required. If the user's browser does not support cookies or cookies are disabled, role information is not cached in a cookie.  \n  \n You can improve the reliability of the role names cached in a cookie by specifying a <xref:System.Web.Security.Roles.CookieProtectionValue%2A> property when you configure ASP.NET roles. The default <xref:System.Web.Security.Roles.CookieProtectionValue%2A> is `All`, which encrypts role names in the cookie and validates that the cookie contents have not been altered."
  example:
  - "The following example shows the Web.config file for an application configured to use both ASP.NET membership and ASP.NET roles and to use the <xref:System.Web.Security.SqlRoleProvider> to store membership and role information in a SQL Server database. Users are authenticated with forms authentication and only users in the Administrators role are allowed access to the application.  \n  \n```  \n<configuration>  \n  <connectionStrings>  \n    <add name=\"SqlServices\" connectionString=\"Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;\" />  \n  </connectionStrings>  \n  \n  <system.web>  \n    <authentication mode=\"Forms\" >  \n      <forms loginUrl=\"login.aspx\"  \n      name=\".ASPXFORMSAUTH\" />  \n    </authentication>  \n  \n    <authorization>  \n      <deny users=\"?\" />  \n      <allow roles=\"Administrators\" />  \n      <deny users=\"*\" />  \n    </authorization>  \n  \n    <membership defaultProvider=\"AspNetSqlProvider\" userIsOnlineTimeWindow=\"15\">  \n    </membership>  \n  \n    <roleManager defaultProvider=\"SqlProvider\"   \n      enabled=\"true\"  \n      cacheRolesInCookie=\"true\"  \n      cookieName=\".ASPROLES\"  \n      cookieTimeout=\"30\"  \n      cookiePath=\"/\"  \n      cookieRequireSSL=\"true\"  \n      cookieSlidingExpiration=\"true\"  \n      cookieProtection=\"All\" >  \n  \n      <providers>  \n        <clear />  \n        <add  \n          name=\"SqlProvider\"  \n          type=\"System.Web.Security.SqlRoleProvider\"  \n          connectionStringName=\"SqlServices\"  \n          applicationName=\"SampleApplication\" />  \n        </providers>  \n  \n    </roleManager>  \n  </system.web>  \n</configuration>  \n```  \n  \n The following code example programmatically checks whether the logged-on user is in the Administrators role before allowing the user to view other users' roles."
  syntax:
    content: public static class Roles
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)
  commentId: M:System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)
  id: AddUsersToRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUsersToRole(String[], String)
  nameWithType: Roles.AddUsersToRole(String[], String)
  fullName: Roles.AddUsersToRole(String[], String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Adds the specified users to the specified role.
  remarks: "The <xref:System.Web.Security.Roles.AddUsersToRole%2A> method calls the default role provider to associate the specified users with the specified role at the data source.  \n  \n If your application uses the <xref:System.Web.Security.SqlRoleProvider> class, the database updates that are performed during the call to the <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> method are made within a transaction. If an error is encountered, such as a user name that is already in a specified role, the transaction is rolled back and no updates are performed.  \n  \n> [!NOTE]\n>  User names and role names cannot contain commas."
  example:
  - "The following code example adds one or more users to a role or removes a user from a role based on user input. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n <!-- TODO: review snippet reference [!code-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]  -->\n <!-- TODO: review snippet reference [!code-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  -->"
  syntax:
    content: public static void AddUsersToRole (string[] usernames, string roleName);
    parameters:
    - id: usernames
      type: System.String[]
      description: A string array of user names to add to the specified role.
    - id: roleName
      type: System.String
      description: The role to add the specified user names to.
  overload: System.Web.Security.Roles.AddUsersToRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code> is `null`.  \n  \n -or-  \n  \n One of the elements in <code>usernames</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code> is an empty string or contains a comma (,).  \n  \n -or-  \n  \n One of the elements in <code>usernames</code> is an empty string or contains a comma (,).  \n  \n -or-  \n  \n <code>usernames</code> contains a duplicate element."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: Role management is not enabled.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])
  commentId: M:System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])
  id: AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUsersToRoles(String[], String[])
  nameWithType: Roles.AddUsersToRoles(String[], String[])
  fullName: Roles.AddUsersToRoles(String[], String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Adds the specified users to the specified roles.
  remarks: "The <xref:System.Web.Security.Roles.AddUsersToRoles%2A> method calls the default role provider to associate the specified users with the specified roles at the data source.  \n  \n If your application uses the <xref:System.Web.Security.SqlRoleProvider> class, the database updates that are performed during the call to the <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> method are made within a transaction. If an error is encountered, such as a user name that is already in a specified role, the transaction is rolled back and no updates are performed.  \n  \n> [!NOTE]\n>  User names and role names cannot contain commas."
  example:
  - "The following code example adds one or more users to one or more roles. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n <!-- TODO: review snippet reference [!code-csharp[System.Web.Security.Roles#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/adduserstorolescs.aspx#1)]  -->\n <!-- TODO: review snippet reference [!code-vb[System.Web.Security.Roles#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/adduserstorolesvb.aspx#1)]  -->"
  syntax:
    content: public static void AddUsersToRoles (string[] usernames, string[] roleNames);
    parameters:
    - id: usernames
      type: System.String[]
      description: A string array of user names to add to the specified roles.
    - id: roleNames
      type: System.String[]
      description: A string array of role names to add the specified user names to.
  overload: System.Web.Security.Roles.AddUsersToRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles in <code>roleNames</code> is `null`.  \n  \n -or-  \n  \n One of the users in <code>usernames</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "One of the roles in <code>roleNames</code> is an empty string or contains a comma (,).  \n  \n -or-  \n  \n One of the users in <code>usernames</code> is an empty string or contains a comma (,).  \n  \n -or-  \n  \n <code>roleNames</code> contains a duplicate element.  \n  \n -or-  \n  \n <code>usernames</code> contains a duplicate element."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: Role management is not enabled.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.AddUserToRole(System.String,System.String)
  commentId: M:System.Web.Security.Roles.AddUserToRole(System.String,System.String)
  id: AddUserToRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUserToRole(String, String)
  nameWithType: Roles.AddUserToRole(String, String)
  fullName: Roles.AddUserToRole(String, String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Adds the specified user to the specified role.
  remarks: "The <xref:System.Web.Security.Roles.AddUserToRole%2A> method calls the default role provider to associate the specified user with the specified role at the data source.  \n  \n> [!NOTE]\n>  User names and role names cannot contain commas."
  example:
  - "The following code example adds a user to a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n <!-- TODO: review snippet reference [!code-csharp[System.Web.Security.Roles#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/addusertorolecs.aspx#2)]  -->\n <!-- TODO: review snippet reference [!code-vb[System.Web.Security.Roles#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/addusertorolevb.aspx#2)]  -->"
  syntax:
    content: public static void AddUserToRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: The user name to add to the specified role.
    - id: roleName
      type: System.String
      description: The role to add the specified user name to.
  overload: System.Web.Security.Roles.AddUserToRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code> is `null`.  \n  \n -or-  \n  \n <code>username</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code> is an empty string or contains a comma (,).  \n  \n -or-  \n  \n <code>username</code> is an empty string or contains a comma (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Role management is not enabled.  \n  \n -or-  \n  \n User is already assigned to the specified role."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])
  commentId: M:System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])
  id: AddUserToRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUserToRoles(String, String[])
  nameWithType: Roles.AddUserToRoles(String, String[])
  fullName: Roles.AddUserToRoles(String, String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Adds the specified user to the specified roles.
  remarks: "The <xref:System.Web.Security.Roles.AddUserToRoles%2A> method calls the default role provider to associate the specified user with the specified roles at the data source.  \n  \n If your application uses the <xref:System.Web.Security.SqlRoleProvider> class, the database updates that are performed during the call to the <xref:System.Web.Security.Roles.AddUserToRoles%2A> method are made within a transaction. If an error is encountered, such as a user name that is already in a specified role, the transaction is rolled back and no updates are performed.  \n  \n> [!NOTE]\n>  User names and role names cannot contain commas."
  example:
  - "The following code example adds a user to one or more roles. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n <!-- TODO: review snippet reference [!code-csharp[System.Web.Security.Roles#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/addusertorolescs.aspx#3)]  -->\n <!-- TODO: review snippet reference [!code-vb[System.Web.Security.Roles#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/addusertorolesvb.aspx#3)]  -->"
  syntax:
    content: public static void AddUserToRoles (string username, string[] roleNames);
    parameters:
    - id: username
      type: System.String
      description: The user name to add to the specified roles.
    - id: roleNames
      type: System.String[]
      description: A string array of roles to add the specified user name to.
  overload: System.Web.Security.Roles.AddUserToRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles in <code>roleNames</code> is `null`.  \n  \n -or-  \n  \n <code>username</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "One of the roles in <code>roleNames</code> is an empty string or contains a comma (,).  \n  \n -or-  \n  \n <code>username</code> is an empty string or contains a comma (,).  \n  \n -or-  \n  \n <code>roleNames</code> contains a duplicate element."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: Role management is not enabled.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.ApplicationName
  commentId: P:System.Web.Security.Roles.ApplicationName
  id: ApplicationName
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: ApplicationName
  nameWithType: Roles.ApplicationName
  fullName: Roles.ApplicationName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Gets or sets the name of the application to store and retrieve role information for.
  remarks: "The <xref:System.Web.Security.Roles.ApplicationName%2A> property is used by the <xref:System.Web.Security.Roles> class to associate users and roles with different applications. This enables multiple applications to use the same data source to store user and role information without running into conflicts between duplicate user names or duplicate role names. Multiple ASP.NET applications can use the same data source by specifying the same value in the <xref:System.Web.Security.Roles.ApplicationName%2A> property. You can set the <xref:System.Web.Security.Roles.ApplicationName%2A> property programmatically, or you can set it declaratively in the configuration file for the Web application by using the `applicationName` attribute.  \n  \n If your Web application is using the <xref:System.Web.Security.SqlRoleProvider> class and a value is not specified for the `applicationName` attribute in the configuration file, the <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName> property value for the current <xref:System.Web.HttpContext.Request%2A?displayProperty=fullName> property is used.  \n  \n> [!CAUTION]\n>  Because a single default role provider instance is used for all of the requests served by an <xref:System.Web.HttpApplication> object, you can have multiple requests executing concurrently and attempting to set the <xref:System.Web.Security.Roles.ApplicationName%2A> property value. The <xref:System.Web.Security.Roles.ApplicationName%2A> property is not thread safe for multiple writes, and changing the <xref:System.Web.Security.Roles.ApplicationName%2A> property value can result in unexpected behavior for multiple users of an application. You should avoid writing code to allow users to set the <xref:System.Web.Security.Roles.ApplicationName%2A> property, unless required. An example of an application where setting the <xref:System.Web.Security.Roles.ApplicationName%2A> property may be required is an administrative application that manages role data for multiple applications. Such an application should be a single-user application and not a Web application."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `applicationName` attribute to `MyApplication`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static string ApplicationName { get; set; }
    return:
      type: System.String
      description: The name of the application to store and retrieve role information for.
  overload: System.Web.Security.Roles.ApplicationName*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.CacheRolesInCookie
  commentId: P:System.Web.Security.Roles.CacheRolesInCookie
  id: CacheRolesInCookie
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CacheRolesInCookie
  nameWithType: Roles.CacheRolesInCookie
  fullName: Roles.CacheRolesInCookie
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Gets a value indicating whether the current user's roles are cached in a cookie.
  remarks: "When the <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> property is set to `true` in the Web.config file, role information for each user is stored in a cookie. When role management checks to see whether a user is in a particular role, the roles cookie is checked before the role provider is called to check the list of roles at the data source. The cookie is dynamically updated to cache the most recently validated role names.  \n  \n You can improve the reliability of the role names cached in a cookie by specifying a <xref:System.Web.Security.Roles.CookieProtectionValue%2A> property when you configure ASP.NET roles. The default <xref:System.Web.Security.Roles.CookieProtectionValue%2A> is `All`, which encrypts role names in the cookie and validates that the cookie contents have not been altered.  \n  \n> [!NOTE]\n>  Because role names can be cached apart from the data source, it is possible that changes to role management at the data source would not be reflected in the cached values. In this case, the user must close and re-open their browser to clear the cached cookie value."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `cacheRolesInCookie` attribute to `true`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n   </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool CacheRolesInCookie { get; }
    return:
      type: System.Boolean
      description: "`true` if the current user's roles are cached in a cookie; otherwise, `false`. The default is `true`."
  overload: System.Web.Security.Roles.CacheRolesInCookie*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.CookieName
  commentId: P:System.Web.Security.Roles.CookieName
  id: CookieName
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieName
  nameWithType: Roles.CookieName
  fullName: Roles.CookieName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Gets the name of the cookie where role names are cached.
  remarks: You can specify the name of the cookie where roles are cached for your application by setting the `cookieName` attribute in the Web.config file for your ASP.NET application. This is useful when you want to uniquely identify a cookie for your application or when a cookie is shared across multiple applications, such as a domain cookie.
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `cookieName` attribute to .ASPROLES.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static string CookieName { get; }
    return:
      type: System.String
      description: The name of the cookie where role names are cached. The default is .ASPXROLES.
  overload: System.Web.Security.Roles.CookieName*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.CookiePath
  commentId: P:System.Web.Security.Roles.CookiePath
  id: CookiePath
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookiePath
  nameWithType: Roles.CookiePath
  fullName: Roles.CookiePath
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Gets the path for the cached role names cookie.
  remarks: You can specify the path of the cookie where roles are cached for your application by setting the `cookiePath` attribute in the Web.config file for your ASP.NET application. For more information on cookie paths, see <xref:System.Web.HttpCookie.Path%2A>.
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `cookiePath` attribute to /MyApplication.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static string CookiePath { get; }
    return:
      type: System.String
      description: The path of the cookie where role names are cached. The default is /.
  overload: System.Web.Security.Roles.CookiePath*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.CookieProtectionValue
  commentId: P:System.Web.Security.Roles.CookieProtectionValue
  id: CookieProtectionValue
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieProtectionValue
  nameWithType: Roles.CookieProtectionValue
  fullName: Roles.CookieProtectionValue
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Gets a value that indicates how role names cached in a cookie are protected.
  remarks: You can specify the protection of the cookie where roles are cached for your application by setting the `cookieProtection` attribute in the Web.config file for your ASP.NET application. The `cookieProtection` attribute takes a <xref:System.Web.Security.CookieProtection> enumeration value that indicates whether the role names are encrypted, validated, both, or neither.
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets `cookieProtection` attribute to `Encrypted`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static System.Web.Security.CookieProtection CookieProtectionValue { get; }
    return:
      type: System.Web.Security.CookieProtection
      description: One of the <xref href="System.Web.Security.CookieProtection"></xref> enumeration values indicating how role names that are cached in a cookie are protected. The default is `All`.
  overload: System.Web.Security.Roles.CookieProtectionValue*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.CookieRequireSSL
  commentId: P:System.Web.Security.Roles.CookieRequireSSL
  id: CookieRequireSSL
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieRequireSSL
  nameWithType: Roles.CookieRequireSSL
  fullName: Roles.CookieRequireSSL
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Gets a value indicating whether the role names cookie requires SSL in order to be returned to the server.
  remarks: You can specify whether SSL (Secure Sockets Layer) is required to return the role names cookie to the server in your application by setting the `cookieRequireSSL` attribute in the Web.config file for your ASP.NET application. For more information, see <xref:System.Web.HttpCookie.Secure%2A>.
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets `cookieRequireSSL` to `true`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"true\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool CookieRequireSSL { get; }
    return:
      type: System.Boolean
      description: '`true` if SSL is required to return the role names cookie to the server; otherwise, `false`. The default is `false`.'
  overload: System.Web.Security.Roles.CookieRequireSSL*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.CookieSlidingExpiration
  commentId: P:System.Web.Security.Roles.CookieSlidingExpiration
  id: CookieSlidingExpiration
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieSlidingExpiration
  nameWithType: Roles.CookieSlidingExpiration
  fullName: Roles.CookieSlidingExpiration
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Indicates whether the role names cookie expiration date and time will be reset periodically.
  remarks: You can specify whether role names cookie expiration date and time will be reset with each response by using the `cookieSlidingExpiration` attribute in the Web.config file for your ASP.NET application. If `true`, the cookie expiration will initially be set to the current date and time plus the <xref:System.Web.Security.Roles.CookieTimeout%2A> in minutes. While the user continues to actively use the ASP.NET application, the expiration date and time of the cookie will be automatically refreshed if there is less than half of the <xref:System.Web.Security.Roles.CookieTimeout%2A> remaining. For more information, see the <xref:System.Web.HttpCookie.Expires%2A> property.
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> property to `false`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"true\"  \n  cookieSlidingExpiration=\"false\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool CookieSlidingExpiration { get; }
    return:
      type: System.Boolean
      description: '`true` if the role names cookie expiration date and time will be reset periodically; otherwise, `false`. The default is `true`.'
  overload: System.Web.Security.Roles.CookieSlidingExpiration*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.CookieTimeout
  commentId: P:System.Web.Security.Roles.CookieTimeout
  id: CookieTimeout
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieTimeout
  nameWithType: Roles.CookieTimeout
  fullName: Roles.CookieTimeout
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Gets the number of minutes before the roles cookie expires.
  remarks: "The <xref:System.Web.Security.Roles.CookieTimeout%2A> property is used when the <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> property is `true` and specifies the time-to-live in minutes for the roles cookie. To set the <xref:System.Web.Security.Roles.CookieTimeout%2A> value, add the `cookieTimeout` attribute to the  element in the Web.config file for the ASP.NET application and specify an integer value.  \n  \n If <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> is `false`, this property is ignored."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the <xref:System.Web.Security.Roles.CookieTimeout%2A> property to 30 minutes.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"true\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n  <add  \n    name=\"SqlProvider\"  \n    type=\"System.Web.Security.SqlRoleProvider\"  \n    connectionStringName=\"SqlServices\"  \n    applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static int CookieTimeout { get; }
    return:
      type: System.Int32
      description: An integer specifying the number of minutes before the roles cookie expires. The default is 30 minutes.
  overload: System.Web.Security.Roles.CookieTimeout*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.CreatePersistentCookie
  commentId: P:System.Web.Security.Roles.CreatePersistentCookie
  id: CreatePersistentCookie
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CreatePersistentCookie
  nameWithType: Roles.CreatePersistentCookie
  fullName: Roles.CreatePersistentCookie
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Gets a value indicating whether the role-names cookie is session-based or persistent.
  remarks: "The <xref:System.Web.Security.Roles.CreatePersistentCookie%2A> property value is set in the configuration for an ASP.NET application using the `createPersistentCookie` attribute of the  configuration element.  \n  \n When `false`, the role-names cookie is a session cookie, that is, the cookie is lost when the browser is closed. When `true`, the role-names cookie is a persistent cookie that is available across multiple browser sessions. The persistent cookie expiration date and time are set to the current date and time plus the <xref:System.Web.Security.Roles.CookieTimeout%2A> value in minutes."
  syntax:
    content: public static bool CreatePersistentCookie { get; }
    return:
      type: System.Boolean
      description: '`true` if the role-names cookie is a persistent cookie; otherwise `false`. The default is `false`.'
  overload: System.Web.Security.Roles.CreatePersistentCookie*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.CreateRole(System.String)
  commentId: M:System.Web.Security.Roles.CreateRole(System.String)
  id: CreateRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CreateRole(String)
  nameWithType: Roles.CreateRole(String)
  fullName: Roles.CreateRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Adds a new role to the data source.
  remarks: "The <xref:System.Web.Security.Roles.CreateRole%2A> method adds a role name to the data source. <xref:System.Web.Security.Roles.CreateRole%2A> calls the <xref:System.Web.Security.RoleProvider.CreateRole%2A> method of the default role provider to add the specified role to the data source.  \n  \n> [!NOTE]\n>  Role names cannot contain commas."
  example:
  - "The following code example creates a new role in the data source. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  \n  \n <!-- TODO: review snippet reference [!code-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]  -->\n <!-- TODO: review snippet reference [!code-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  -->"
  syntax:
    content: public static void CreateRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: The name of the role to create.
  overload: System.Web.Security.Roles.CreateRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>roleName</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code> is an empty string.  \n  \n -or-  \n  \n <code>roleName</code> contains a comma."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: Role management is not enabled.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.DeleteCookie
  commentId: M:System.Web.Security.Roles.DeleteCookie
  id: DeleteCookie
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: DeleteCookie()
  nameWithType: Roles.DeleteCookie()
  fullName: Roles.DeleteCookie()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Deletes the cookie where role names are cached.
  remarks: The <xref:System.Web.Security.Roles.DeleteCookie%2A> method clears the contents of the cookie that is used to cache role names. For more information on caching role names, see <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>.
  example:
  - "The following code example calls the <xref:System.Web.Security.Roles.DeleteCookie%2A> method to clear any cached role names when a user logs in. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  \n  \n <!-- TODO: review snippet reference [!code-csharp[System.Web.Security.Roles#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/logincs.aspx#5)]  -->\n <!-- TODO: review snippet reference [!code-vb[System.Web.Security.Roles#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/loginvb.aspx#5)]  -->"
  syntax:
    content: public static void DeleteCookie ();
    parameters: []
  overload: System.Web.Security.Roles.DeleteCookie*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: Role management is not enabled.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)
  commentId: M:System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)
  id: DeleteRole(System.String,System.Boolean)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: DeleteRole(String, Boolean)
  nameWithType: Roles.DeleteRole(String, Boolean)
  fullName: Roles.DeleteRole(String, Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Removes a role from the data source.
  remarks: "The <xref:System.Web.Security.Roles.DeleteRole%2A> method removes a role name from the data source. <xref:System.Web.Security.Roles.DeleteRole%2A> calls the <xref:System.Web.Security.RoleProvider.DeleteRole%2A> method of the default role provider to remove the specified role from the data source.  \n  \n If `throwOnPopulatedRole` is `true`, then an exception will be thrown and the role will not be deleted if the role identified by the `roleName` parameter has one or more members. If `throwOnPopulatedRole` is `false`, then the role will be deleted whether it is empty or not."
  example:
  - "The following code example deletes a role from the data source. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n <!-- TODO: review snippet reference [!code-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]  -->\n <!-- TODO: review snippet reference [!code-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  -->"
  syntax:
    content: public static bool DeleteRole (string roleName, bool throwOnPopulatedRole);
    parameters:
    - id: roleName
      type: System.String
      description: The name of the role to delete.
    - id: throwOnPopulatedRole
      type: System.Boolean
      description: If `true`, throws an exception if <code>roleName</code> has one or more members.
    return:
      type: System.Boolean
      description: '`true` if <code>roleName</code> was deleted from the data source; otherwise; `false`.'
  overload: System.Web.Security.Roles.DeleteRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>roleName</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>roleName</code> is an empty string.
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>roleName</code> has one or more members and <code>throwOnPopulatedRole</code> is `true`.  \n  \n -or-  \n  \n Role management is not enabled."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.DeleteRole(System.String)
  commentId: M:System.Web.Security.Roles.DeleteRole(System.String)
  id: DeleteRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: DeleteRole(String)
  nameWithType: Roles.DeleteRole(String)
  fullName: Roles.DeleteRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Removes a role from the data source.
  remarks: "The <xref:System.Web.Security.Roles.DeleteRole%2A> method removes a role name from the data source. <xref:System.Web.Security.Roles.DeleteRole%2A> calls the <xref:System.Web.Security.RoleProvider.DeleteRole%2A> method of the default role provider to remove the specified role from the data source.  \n  \n If the role identified by the `roleName` parameter has one or more members, then an exception will be thrown and the role will not be deleted."
  example:
  - "The following code example deletes a role from the data source. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n <!-- TODO: review snippet reference [!code-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]  -->\n <!-- TODO: review snippet reference [!code-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  -->"
  syntax:
    content: public static bool DeleteRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: The name of the role to delete.
    return:
      type: System.Boolean
      description: '`true` if <code>roleName</code> was deleted from the data source; otherwise, `false`.'
  overload: System.Web.Security.Roles.DeleteRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>roleName</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>roleName</code> is an empty string or contains a comma (,).
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>roleName</code> has one or more members.  \n  \n -or-  \n  \n Role management is not enabled."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.Domain
  commentId: P:System.Web.Security.Roles.Domain
  id: Domain
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Domain
  nameWithType: Roles.Domain
  fullName: Roles.Domain
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Gets the value of the domain of the role-names cookie.
  remarks: "The <xref:System.Web.Security.Roles.Domain%2A> property value is set in the configuration for an ASP.NET application using the `domain` attribute of the  configuration element.  \n  \n If no value is specified in the configuration for the domain attribute, the <xref:System.Web.Security.Roles.Domain%2A> property returns `null` and the role-names cookie domain defaults to the behavior of the <xref:System.Web.HttpCookie><xref:System.Web.HttpCookie.Domain%2A> property."
  syntax:
    content: public static string Domain { get; }
    return:
      type: System.String
      description: The <xref href="System.Web.HttpCookie.Domain"></xref> of the role names cookie.
  overload: System.Web.Security.Roles.Domain*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.Enabled
  commentId: P:System.Web.Security.Roles.Enabled
  id: Enabled
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Enabled
  nameWithType: Roles.Enabled
  fullName: Roles.Enabled
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Gets or sets a value indicating whether role management is enabled for the current Web application.
  remarks: ''
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `enabled` attribute to `true`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: '`true` if role management is enabled; otherwise, `false`. The default is `false`.'
  overload: System.Web.Security.Roles.Enabled*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.FindUsersInRole(System.String,System.String)
  commentId: M:System.Web.Security.Roles.FindUsersInRole(System.String,System.String)
  id: FindUsersInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: FindUsersInRole(String, String)
  nameWithType: Roles.FindUsersInRole(String, String)
  fullName: Roles.FindUsersInRole(String, String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Gets a list of users in a specified role where the user name contains the specified user name to match.
  remarks: "<xref:System.Web.Security.Roles.FindUsersInRole%2A> returns a list of users in a role where the user name contains a match of the supplied `usernameToMatch` for the configured `applicationName`. For example, if the `usernameToMatch` parameter is set to \"user,\" then the users \"user1,\" \"user2,\" \"user3,\" and so on are returned. Users are returned in alphabetical order by user name.  \n  \n The <xref:System.Web.Security.SqlRoleProvider> performs its search using a LIKE clause against the `usernameToMatch` parameter. Any wildcards that are supported by SQL Server in LIKE clauses can be used in the `usernameToMatch` parameter value."
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.FindUsersInRole%2A> method to display role membership based on user input. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  \n  \n <!-- TODO: review snippet reference [!code-csharp[System.Web.Security.Roles#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/FindUsersInRolecs.aspx#11)]  -->\n <!-- TODO: review snippet reference [!code-vb[System.Web.Security.Roles#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/FindUsersInRolevb.aspx#11)]  -->"
  syntax:
    content: public static string[] FindUsersInRole (string roleName, string usernameToMatch);
    parameters:
    - id: roleName
      type: System.String
      description: The role to search in.
    - id: usernameToMatch
      type: System.String
      description: The user name to search for.
    return:
      type: System.String[]
      description: A string array containing the names of all the users whose user name matches <code>usernameToMatch</code> and who are members of the specified role.
  overload: System.Web.Security.Roles.FindUsersInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code> is `null` (`Nothing` in Visual Basic).  \n  \n -or-  \n  \n <code>usernameToMatch</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code> is an empty string or contains a comma (,).  \n  \n -or-  \n  \n <code>usernameToMatch</code> is an empty string."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: Role management is not enabled.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.GetAllRoles
  commentId: M:System.Web.Security.Roles.GetAllRoles
  id: GetAllRoles
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetAllRoles()
  nameWithType: Roles.GetAllRoles()
  fullName: Roles.GetAllRoles()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Gets a list of all the roles for the application.
  remarks: The <xref:System.Web.Security.Roles.GetAllRoles%2A> method calls the <xref:System.Web.Security.RoleProvider.GetAllRoles%2A?displayProperty=fullName> method of the default role provider to get a list of all the roles from the data source for an application. Only the roles for the application that is specified in the <xref:System.Web.Security.Roles.ApplicationName%2A> property are retrieved.
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.GetAllRoles%2A> method to get the list of roles for an application and bind the results to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  \n  \n <!-- TODO: review snippet reference [!code-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]  -->\n <!-- TODO: review snippet reference [!code-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  -->"
  syntax:
    content: public static string[] GetAllRoles ();
    parameters: []
    return:
      type: System.String[]
      description: A string array containing the names of all the roles stored in the data source for the application.
  overload: System.Web.Security.Roles.GetAllRoles*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: Role management is not enabled.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.GetRolesForUser
  commentId: M:System.Web.Security.Roles.GetRolesForUser
  id: GetRolesForUser
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetRolesForUser()
  nameWithType: Roles.GetRolesForUser()
  fullName: Roles.GetRolesForUser()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Gets a list of the roles that the currently logged-on user is in.
  remarks: "The <xref:System.Web.Security.Roles.GetRolesForUser%2A> method calls the <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName> method of the default role provider to retrieve from the data source the roles that the currently logged-on user is in. The currently logged-on user is identified by the <xref:System.Web.HttpContext.User%2A?displayProperty=fullName> property of the current <xref:System.Web.HttpContext?displayProperty=fullName>, or by <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> for non-HTTP hosting environments. If no user is logged on, an exception will be thrown. Only the roles for the application that is specified in the <xref:System.Web.Security.Roles.ApplicationName%2A> property are retrieved.  \n  \n If <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> is `true`, then the results of the <xref:System.Web.Security.Roles.GetRolesForUser%2A> method may be returned from the role cache rather than the specified role provider."
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.GetRolesForUser%2A> method to retrieve a list of roles for a specified user and bind the returned roles to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n <!-- TODO: review snippet reference [!code-csharp[System.Web.Security.Roles#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/ViewRolescs.aspx#4)]  -->\n <!-- TODO: review snippet reference [!code-vb[System.Web.Security.Roles#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/ViewRolesvb.aspx#4)]  -->"
  syntax:
    content: public static string[] GetRolesForUser ();
    parameters: []
    return:
      type: System.String[]
      description: A string array containing the names of all the roles that the currently logged-on user is in.
  overload: System.Web.Security.Roles.GetRolesForUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: There is no current logged-on user.
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: Role management is not enabled.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.GetRolesForUser(System.String)
  commentId: M:System.Web.Security.Roles.GetRolesForUser(System.String)
  id: GetRolesForUser(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetRolesForUser(String)
  nameWithType: Roles.GetRolesForUser(String)
  fullName: Roles.GetRolesForUser(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Gets a list of the roles that a user is in.
  remarks: "The <xref:System.Web.Security.Roles.GetRolesForUser%2A> method calls the <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName> method of the default role provider to retrieve from the data source the roles that the user is in. Only the roles for the application that is specified in the <xref:System.Web.Security.Roles.ApplicationName%2A> property are retrieved.  \n  \n If `username` is equal to the current logged-on user and <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> is `true`, the results of the <xref:System.Web.Security.Roles.GetRolesForUser%2A> method may be returned from the role cache rather than the specified <xref:System.Web.Security.Roles.Provider%2A>."
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.GetRolesForUser%2A> method to retrieve a list of roles for a specified user and bind the returned roles to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n <!-- TODO: review snippet reference [!code-csharp[System.Web.Security.Roles#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/ViewRolescs.aspx#4)]  -->\n <!-- TODO: review snippet reference [!code-vb[System.Web.Security.Roles#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/ViewRolesvb.aspx#4)]  -->"
  syntax:
    content: public static string[] GetRolesForUser (string username);
    parameters:
    - id: username
      type: System.String
      description: The user to return a list of roles for.
    return:
      type: System.String[]
      description: A string array containing the names of all the roles that the specified user is in.
  overload: System.Web.Security.Roles.GetRolesForUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>username</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>username</code> contains a comma (,).
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: Role management is not enabled.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.GetUsersInRole(System.String)
  commentId: M:System.Web.Security.Roles.GetUsersInRole(System.String)
  id: GetUsersInRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetUsersInRole(String)
  nameWithType: Roles.GetUsersInRole(String)
  fullName: Roles.GetUsersInRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Gets a list of users in the specified role.
  remarks: The <xref:System.Web.Security.Roles.GetUsersInRole%2A> method calls the <xref:System.Web.Security.RoleProvider.GetUsersInRole%2A> method of the default role provider to retrieve the user names associated with a role from the data source. Only the roles for the application that is specified in the <xref:System.Web.Security.Roles.ApplicationName%2A> property are retrieved.
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.GetUsersInRole%2A> method to get a list of the users in a particular role and binds the results to a <xref:System.Web.UI.WebControls.GridView> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n <!-- TODO: review snippet reference [!code-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]  -->\n <!-- TODO: review snippet reference [!code-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  -->"
  syntax:
    content: public static string[] GetUsersInRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: The role to get the list of users for.
    return:
      type: System.String[]
      description: A string array containing the names of all the users who are members of the specified role.
  overload: System.Web.Security.Roles.GetUsersInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>roleName</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>roleName</code> is an empty string or contains a comma (,).
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: Role management is not enabled.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.IsUserInRole(System.String)
  commentId: M:System.Web.Security.Roles.IsUserInRole(System.String)
  id: IsUserInRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: IsUserInRole(String)
  nameWithType: Roles.IsUserInRole(String)
  fullName: Roles.IsUserInRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Gets a value indicating whether the currently logged-on user is in the specified role. The API is only intended to be called within the context of an ASP.NET request thread, and in that sanctioned use case it is thread-safe.
  remarks: "The <xref:System.Web.Security.Roles.IsUserInRole%2A> method calls the <xref:System.Web.Security.RoleProvider.IsUserInRole%2A?displayProperty=fullName> method of the default role provider to determine whether the currently logged-on user is associated with a role from the data source for the application that is specified in the <xref:System.Web.Security.Roles.ApplicationName%2A> property. The currently logged-on user is identified by the <xref:System.Web.HttpContext.User%2A?displayProperty=fullName> property of the current <xref:System.Web.HttpContext?displayProperty=fullName>, or by <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> for non-HTTP hosting environments. If no user is logged on, an exception will be thrown. Only the roles for the application that is specified in the <xref:System.Web.Security.Roles.ApplicationName%2A> property are retrieved.  \n  \n If <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> is `true`, then `roleName` may be checked against the roles cache rather than the specified role provider."
  example:
  - "The following code example programmatically checks whether the currently logged-on user is in the Administrators role before allowing the user to view roles settings for the application. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n <!-- TODO: review snippet reference [!code-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]  -->\n <!-- TODO: review snippet reference [!code-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  -->"
  syntax:
    content: public static bool IsUserInRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: The name of the role to search in.
    return:
      type: System.Boolean
      description: '`true` if the currently logged-on user is in the specified role; otherwise, `false`.'
  overload: System.Web.Security.Roles.IsUserInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code> is `null`.  \n  \n -or-  \n  \n There is no current logged-on user."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>roleName</code> is an empty string or contains a comma (,).
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: Role management is not enabled.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.IsUserInRole(System.String,System.String)
  commentId: M:System.Web.Security.Roles.IsUserInRole(System.String,System.String)
  id: IsUserInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: IsUserInRole(String, String)
  nameWithType: Roles.IsUserInRole(String, String)
  fullName: Roles.IsUserInRole(String, String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Gets a value indicating whether the specified user is in the specified role. The API is only intended to be called within the context of an ASP.NET request thread, and in that sanctioned use case it is thread-safe.
  remarks: "The <xref:System.Web.Security.Roles.IsUserInRole%2A> method calls the <xref:System.Web.Security.RoleProvider.IsUserInRole%2A> method of the default role provider to determine whether a user name is associated with a role from the data source for the application that is specified in the <xref:System.Web.Security.Roles.ApplicationName%2A> property.  \n  \n If `username` is equal to the current logged-on user and the <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> property value is `true`, `roleName` may be checked against the role cache rather than the specified <xref:System.Web.Security.Roles.Provider%2A>."
  example:
  - "The following code example programmatically checks whether a user is in the Administrators role before allowing the user to view roles settings for the application. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n <!-- TODO: review snippet reference [!code-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]  -->\n <!-- TODO: review snippet reference [!code-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  -->"
  syntax:
    content: public static bool IsUserInRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: The name of the user to search for.
    - id: roleName
      type: System.String
      description: The name of the role to search in.
    return:
      type: System.Boolean
      description: '`true` if the specified user is in the specified role; otherwise, `false`.'
  overload: System.Web.Security.Roles.IsUserInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code> is `null`.  \n  \n -or-  \n  \n <code>username</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code> is an empty string or contains a comma (,).  \n  \n -or-  \n  \n <code>username</code> contains a comma (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: Role management is not enabled.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.MaxCachedResults
  commentId: P:System.Web.Security.Roles.MaxCachedResults
  id: MaxCachedResults
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: MaxCachedResults
  nameWithType: Roles.MaxCachedResults
  fullName: Roles.MaxCachedResults
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Gets the maximum number of role names to be cached for a user.
  remarks: The <xref:System.Web.Security.Roles.MaxCachedResults%2A> property is set using the `maxCachedResults` configuration attribute. The value of the `maxCachedResults` configuration attribute must be set to an integer value greater than zero.
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `maxCachedResults` attribute to 10.  \n  \n```  \n<roleManager  \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\"   \n  maxCachedResults=\"10\" />  \n```"
  syntax:
    content: public static int MaxCachedResults { get; }
    return:
      type: System.Int32
      description: The maximum number of role names to be cached for a user. The default is 25.
  overload: System.Web.Security.Roles.MaxCachedResults*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.Provider
  commentId: P:System.Web.Security.Roles.Provider
  id: Provider
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Provider
  nameWithType: Roles.Provider
  fullName: Roles.Provider
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Gets the default role provider for the application.
  remarks: "The <xref:System.Web.Security.Roles.Provider%2A> property enables you to directly reference the default role provider for an application. This is commonly used to access custom members of the role provider that are not part of the <xref:System.Web.Security.RoleProvider> abstract class.  \n  \n For example, the <xref:System.Web.Security.WindowsTokenRoleProvider> class includes an overload of the <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> method that enables you to determine whether a user is in a common Windows role by using a <xref:System.Security.Principal.WindowsBuiltInRole> enumeration value. A reference to the <xref:System.Web.Security.WindowsTokenRoleProvider> class for an application can be obtained by using the <xref:System.Web.Security.Roles.Provider%2A> property and can be cast as a <xref:System.Web.Security.WindowsTokenRoleProvider> in order to refer to the <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> overload.  \n  \n If multiple role providers are configured for an application, you can access different role providers using the <xref:System.Web.Security.Roles.Providers%2A> collection."
  example:
  - "The following code example casts the default role provider as a <xref:System.Web.Security.WindowsTokenRoleProvider> and checks whether the currently logged-on user is in the Administrators role before allowing the user to view roles settings for the application. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.WindowsTokenRoleProvider>.  \n  \n <!-- TODO: review snippet reference [!code-csharp[System.Web.Security.WindowsTokenRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.WindowsTokenRoleProvider/CS/ViewRoles2cs.aspx#2)]  -->\n <!-- TODO: review snippet reference [!code-vb[System.Web.Security.WindowsTokenRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.WindowsTokenRoleProvider/VB/ViewRoles2vb.aspx#2)]  -->"
  syntax:
    content: public static System.Web.Security.RoleProvider Provider { get; }
    return:
      type: System.Web.Security.RoleProvider
      description: The default role provider for the application, which is exposed as a class that inherits the <xref href="System.Web.Security.RoleProvider"></xref> abstract class.
  overload: System.Web.Security.Roles.Provider*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: Role management is not enabled.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.Providers
  commentId: P:System.Web.Security.Roles.Providers
  id: Providers
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Providers
  nameWithType: Roles.Providers
  fullName: Roles.Providers
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Gets a collection of the role providers for the ASP.NET application.
  remarks: "The <xref:System.Web.Security.Roles.Providers%2A> property references all the role providers enabled for an application, including any providers added in the Web.config file. You can control which role providers are available for an application by using the `providers` element of the  section in the Web.config file for your application.  \n  \n The following example shows a  section that removes any existing providers (such as those specified in the Machine.config file) and adds a <xref:System.Web.Security.SqlRoleProvider> instance as the role provider for the application.  \n  \n```  \n<configuration>  \n  <connectionStrings>  \n    <add name=\"SqlServices\" connectionString=\"Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;\" />  \n  </connectionStrings>  \n  \n  <system.web>  \n    <roleManager defaultProvider=\"SqlProvider\"   \n      enabled=\"true\"  \n      cacheRolesInCookie=\"true\"  \n      cookieName=\".ASPROLES\"  \n      cookieTimeout=\"30\"  \n      cookiePath=\"/\"  \n      cookieRequireSSL=\"false\"  \n      cookieSlidingExpiration=\"true\"  \n      cookieProtection=\"Encrypted\">  \n  \n      <providers>  \n        <clear/>  \n        <add  \n          name=\"SqlProvider\"  \n          type=\"System.Web.Security.SqlRoleProvider\"  \n          connectionStringName=\"SqlServices\"  \n          applicationName=\"MyApplication\" />  \n         </providers>  \n  \n    </roleManager>  \n  </system.web>  \n</configuration>  \n```  \n  \n You can obtain a strongly typed reference to a provider from the <xref:System.Web.Security.Roles.Providers%2A> collection by indexing the role provider by name and casting it as the desired type.  \n  \n You can obtain a reference to the default provider for an application using the <xref:System.Web.Security.Roles.Provider%2A> property."
  example:
  - "The following code example lists the providers enabled for an application and their respective types.  \n  \n <!-- TODO: review snippet reference [!code-csharp[System.Web.Security.Roles#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/Providerscs.aspx#7)]  -->\n <!-- TODO: review snippet reference [!code-vb[System.Web.Security.Roles#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/Providersvb.aspx#7)]  -->"
  syntax:
    content: public static System.Web.Security.RoleProviderCollection Providers { get; }
    return:
      type: System.Web.Security.RoleProviderCollection
      description: A <xref href="System.Web.Security.RoleProviderCollection"></xref> that contains the role providers configured for the ASP.NET application.
  overload: System.Web.Security.Roles.Providers*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: Role management is not enabled.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)
  commentId: M:System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)
  id: RemoveUserFromRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUserFromRole(String, String)
  nameWithType: Roles.RemoveUserFromRole(String, String)
  fullName: Roles.RemoveUserFromRole(String, String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Removes the specified user from the specified role.
  remarks: The <xref:System.Web.Security.Roles.RemoveUserFromRole%2A> method calls the default role provider to remove the specified user from the specified role at the data source.
  example:
  - "The following code example removes a user from a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n <!-- TODO: review snippet reference [!code-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]  -->\n <!-- TODO: review snippet reference [!code-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  -->"
  syntax:
    content: public static void RemoveUserFromRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: The user to remove from the specified role.
    - id: roleName
      type: System.String
      description: The role to remove the specified user from.
  overload: System.Web.Security.Roles.RemoveUserFromRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code> is `null`.  \n  \n -or-  \n  \n <code>username</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code> is an empty string or contains a comma (,)  \n  \n <code>username</code> is an empty string or contains a comma (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: Role management is not enabled.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])
  commentId: M:System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])
  id: RemoveUserFromRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUserFromRoles(String, String[])
  nameWithType: Roles.RemoveUserFromRoles(String, String[])
  fullName: Roles.RemoveUserFromRoles(String, String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Removes the specified user from the specified roles.
  remarks: "The <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> method calls the default role provider to remove the specified user from the specified roles at the data source.  \n  \n If the application is configured to use the <xref:System.Web.Security.SqlRoleProvider> class, the database updates that are performed during the call to the <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> method are made within a transaction. If an error is encountered, such as a user name that is not in a specified role, the transaction is rolled back and no updates are performed."
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> method to remove a user from one or more roles. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n <!-- TODO: review snippet reference [!code-csharp[System.Web.Security.Roles#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUserFromRolescs.aspx#10)]  -->\n <!-- TODO: review snippet reference [!code-vb[System.Web.Security.Roles#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUserFromRolesvb.aspx#10)]  -->"
  syntax:
    content: public static void RemoveUserFromRoles (string username, string[] roleNames);
    parameters:
    - id: username
      type: System.String
      description: The user to remove from the specified roles.
    - id: roleNames
      type: System.String[]
      description: A string array of role names to remove the specified user from.
  overload: System.Web.Security.Roles.RemoveUserFromRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles in <code>roleNames</code> is `null`.  \n  \n -or-  \n  \n <code>username</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "One of the roles in <code>roleNames</code> is an empty string or contains a comma (,).  \n  \n -or-  \n  \n <code>username</code> is an empty string or contains a comma (,).  \n  \n -or-  \n  \n <code>roleNames</code> contains a duplicate element."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: Role management is not enabled.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)
  commentId: M:System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)
  id: RemoveUsersFromRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUsersFromRole(String[], String)
  nameWithType: Roles.RemoveUsersFromRole(String[], String)
  fullName: Roles.RemoveUsersFromRole(String[], String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Removes the specified users from the specified role.
  remarks: "The <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> method calls the default role provider to remove the specified users from the specified role at the data source.  \n  \n If the application uses the <xref:System.Web.Security.SqlRoleProvider> class, the database updates that are performed during the call to the <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> method are made within a transaction. If an error is encountered, such as a user name that is not in a specified role, the transaction is rolled back and no updates are performed."
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> method to remove one or more users from a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n <!-- TODO: review snippet reference [!code-csharp[System.Web.Security.Roles#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUsersFromRolecs.aspx#9)]  -->\n <!-- TODO: review snippet reference [!code-vb[System.Web.Security.Roles#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUsersFromRolevb.aspx#9)]  -->"
  syntax:
    content: public static void RemoveUsersFromRole (string[] usernames, string roleName);
    parameters:
    - id: usernames
      type: System.String[]
      description: A string array of user names to remove from the specified roles.
    - id: roleName
      type: System.String
      description: The name of the role to remove the specified users from.
  overload: System.Web.Security.Roles.RemoveUsersFromRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code> is `null`.  \n  \n -or-  \n  \n One of the user names in <code>usernames</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code> is an empty string or contains a comma (,).  \n  \n -or-  \n  \n One of the user names in <code>usernames</code> is an empty string or contains a comma (,).  \n  \n -or-  \n  \n <code>usernames</code> contains a duplicate element."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: Role management is not enabled.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])
  commentId: M:System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])
  id: RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUsersFromRoles(String[], String[])
  nameWithType: Roles.RemoveUsersFromRoles(String[], String[])
  fullName: Roles.RemoveUsersFromRoles(String[], String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Removes the specified user names from the specified roles.
  remarks: "The <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> method calls the default role provider to remove the specified users from the specified roles at the data source.  \n  \n If the application uses the <xref:System.Web.Security.SqlRoleProvider> class, the database updates that are performed during the call to the <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> method are made within a transaction. If an error is encountered, such as a user name that is not in a specified role, the transaction is rolled back and no updates are performed."
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> method to remove one or more users from one or more roles based on user input. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n <!-- TODO: review snippet reference [!code-csharp[System.Web.Security.Roles#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUsersFromRolescs.aspx#8)]  -->\n <!-- TODO: review snippet reference [!code-vb[System.Web.Security.Roles#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUsersFromRolesvb.aspx#8)]  -->"
  syntax:
    content: public static void RemoveUsersFromRoles (string[] usernames, string[] roleNames);
    parameters:
    - id: usernames
      type: System.String[]
      description: A string array of user names to remove from the specified roles.
    - id: roleNames
      type: System.String[]
      description: A string array of role names to remove the specified users from.
  overload: System.Web.Security.Roles.RemoveUsersFromRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles specified in <code>roleNames</code> is `null`.  \n  \n -or-  \n  \n One of the users specified in <code>usernames</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "One of the roles specified in <code>roleNames</code> is an empty string or contains a comma (,).  \n  \n -or-  \n  \n One of the users specified in <code>usernames</code> is an empty string or contains a comma (,).  \n  \n -or-  \n  \n <code>roleNames</code> contains a duplicate element.  \n  \n -or-  \n  \n <code>usernames</code> contains a duplicate element."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: Role management is not enabled.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Security.Roles.RoleExists(System.String)
  commentId: M:System.Web.Security.Roles.RoleExists(System.String)
  id: RoleExists(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RoleExists(String)
  nameWithType: Roles.RoleExists(String)
  fullName: Roles.RoleExists(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: Gets a value indicating whether the specified role name already exists in the role data source.
  remarks: The <xref:System.Web.Security.Roles.RoleExists%2A> method calls the `RoleExists` method of the default role provider to determine whether a role name exists in the data source for the application that is specified in the <xref:System.Web.Security.Roles.ApplicationName%2A> property.
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.RoleExists%2A> method to determine whether a role name already exists before creating the role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  \n  \n <!-- TODO: review snippet reference [!code-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]  -->\n <!-- TODO: review snippet reference [!code-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  -->"
  syntax:
    content: public static bool RoleExists (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: The name of the role to search for in the data source.
    return:
      type: System.Boolean
      description: '`true` if the role name already exists in the data source; otherwise, `false`.'
  overload: System.Web.Security.Roles.RoleExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>roleName</code> is `null` (`Nothing` in Visual Basic).
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>roleName</code> is an empty string or contains a comma (,).
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: Role management is not enabled.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Configuration.Provider.ProviderException
  parent: System.Configuration.Provider
  isExternal: false
  name: ProviderException
  nameWithType: ProviderException
  fullName: System.Configuration.Provider.ProviderException
- uid: System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRole(String[], String)
  nameWithType: Roles.AddUsersToRole(String[], String)
  fullName: Roles.AddUsersToRole(String[], String)
- uid: System.String
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String[]
  parent: System
  isExternal: false
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRoles(String[], String[])
  nameWithType: Roles.AddUsersToRoles(String[], String[])
  fullName: Roles.AddUsersToRoles(String[], String[])
- uid: System.Web.Security.Roles.AddUserToRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRole(String, String)
  nameWithType: Roles.AddUserToRole(String, String)
  fullName: Roles.AddUserToRole(String, String)
- uid: System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRoles(String, String[])
  nameWithType: Roles.AddUserToRoles(String, String[])
  fullName: Roles.AddUserToRoles(String, String[])
- uid: System.Web.Security.Roles.ApplicationName
  parent: System.Web.Security.Roles
  isExternal: false
  name: ApplicationName
  nameWithType: Roles.ApplicationName
  fullName: Roles.ApplicationName
- uid: System.Web.Security.Roles.CacheRolesInCookie
  parent: System.Web.Security.Roles
  isExternal: false
  name: CacheRolesInCookie
  nameWithType: Roles.CacheRolesInCookie
  fullName: Roles.CacheRolesInCookie
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Security.Roles.CookieName
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieName
  nameWithType: Roles.CookieName
  fullName: Roles.CookieName
- uid: System.Web.Security.Roles.CookiePath
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookiePath
  nameWithType: Roles.CookiePath
  fullName: Roles.CookiePath
- uid: System.Web.Security.Roles.CookieProtectionValue
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieProtectionValue
  nameWithType: Roles.CookieProtectionValue
  fullName: Roles.CookieProtectionValue
- uid: System.Web.Security.CookieProtection
  parent: System.Web.Security
  isExternal: false
  name: CookieProtection
  nameWithType: CookieProtection
  fullName: System.Web.Security.CookieProtection
- uid: System.Web.Security.Roles.CookieRequireSSL
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieRequireSSL
  nameWithType: Roles.CookieRequireSSL
  fullName: Roles.CookieRequireSSL
- uid: System.Web.Security.Roles.CookieSlidingExpiration
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieSlidingExpiration
  nameWithType: Roles.CookieSlidingExpiration
  fullName: Roles.CookieSlidingExpiration
- uid: System.Web.Security.Roles.CookieTimeout
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieTimeout
  nameWithType: Roles.CookieTimeout
  fullName: Roles.CookieTimeout
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Security.Roles.CreatePersistentCookie
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreatePersistentCookie
  nameWithType: Roles.CreatePersistentCookie
  fullName: Roles.CreatePersistentCookie
- uid: System.Web.Security.Roles.CreateRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreateRole(String)
  nameWithType: Roles.CreateRole(String)
  fullName: Roles.CreateRole(String)
- uid: System.Web.Security.Roles.DeleteCookie
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteCookie()
  nameWithType: Roles.DeleteCookie()
  fullName: Roles.DeleteCookie()
- uid: System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteRole(String, Boolean)
  nameWithType: Roles.DeleteRole(String, Boolean)
  fullName: Roles.DeleteRole(String, Boolean)
- uid: System.Web.Security.Roles.DeleteRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteRole(String)
  nameWithType: Roles.DeleteRole(String)
  fullName: Roles.DeleteRole(String)
- uid: System.Web.Security.Roles.Domain
  parent: System.Web.Security.Roles
  isExternal: false
  name: Domain
  nameWithType: Roles.Domain
  fullName: Roles.Domain
- uid: System.Web.Security.Roles.Enabled
  parent: System.Web.Security.Roles
  isExternal: false
  name: Enabled
  nameWithType: Roles.Enabled
  fullName: Roles.Enabled
- uid: System.Web.Security.Roles.FindUsersInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: FindUsersInRole(String, String)
  nameWithType: Roles.FindUsersInRole(String, String)
  fullName: Roles.FindUsersInRole(String, String)
- uid: System.Web.Security.Roles.GetAllRoles
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetAllRoles()
  nameWithType: Roles.GetAllRoles()
  fullName: Roles.GetAllRoles()
- uid: System.Web.Security.Roles.GetRolesForUser
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetRolesForUser()
  nameWithType: Roles.GetRolesForUser()
  fullName: Roles.GetRolesForUser()
- uid: System.Web.Security.Roles.GetRolesForUser(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetRolesForUser(String)
  nameWithType: Roles.GetRolesForUser(String)
  fullName: Roles.GetRolesForUser(String)
- uid: System.Web.Security.Roles.GetUsersInRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetUsersInRole(String)
  nameWithType: Roles.GetUsersInRole(String)
  fullName: Roles.GetUsersInRole(String)
- uid: System.Web.Security.Roles.IsUserInRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: IsUserInRole(String)
  nameWithType: Roles.IsUserInRole(String)
  fullName: Roles.IsUserInRole(String)
- uid: System.Web.Security.Roles.IsUserInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: IsUserInRole(String, String)
  nameWithType: Roles.IsUserInRole(String, String)
  fullName: Roles.IsUserInRole(String, String)
- uid: System.Web.Security.Roles.MaxCachedResults
  parent: System.Web.Security.Roles
  isExternal: false
  name: MaxCachedResults
  nameWithType: Roles.MaxCachedResults
  fullName: Roles.MaxCachedResults
- uid: System.Web.Security.Roles.Provider
  parent: System.Web.Security.Roles
  isExternal: false
  name: Provider
  nameWithType: Roles.Provider
  fullName: Roles.Provider
- uid: System.Web.Security.RoleProvider
  parent: System.Web.Security
  isExternal: false
  name: RoleProvider
  nameWithType: RoleProvider
  fullName: System.Web.Security.RoleProvider
- uid: System.Web.Security.Roles.Providers
  parent: System.Web.Security.Roles
  isExternal: false
  name: Providers
  nameWithType: Roles.Providers
  fullName: Roles.Providers
- uid: System.Web.Security.RoleProviderCollection
  parent: System.Web.Security
  isExternal: false
  name: RoleProviderCollection
  nameWithType: RoleProviderCollection
  fullName: System.Web.Security.RoleProviderCollection
- uid: System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRole(String, String)
  nameWithType: Roles.RemoveUserFromRole(String, String)
  fullName: Roles.RemoveUserFromRole(String, String)
- uid: System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRoles(String, String[])
  nameWithType: Roles.RemoveUserFromRoles(String, String[])
  fullName: Roles.RemoveUserFromRoles(String, String[])
- uid: System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRole(String[], String)
  nameWithType: Roles.RemoveUsersFromRole(String[], String)
  fullName: Roles.RemoveUsersFromRole(String[], String)
- uid: System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRoles(String[], String[])
  nameWithType: Roles.RemoveUsersFromRoles(String[], String[])
  fullName: Roles.RemoveUsersFromRoles(String[], String[])
- uid: System.Web.Security.Roles.RoleExists(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: RoleExists(String)
  nameWithType: Roles.RoleExists(String)
  fullName: Roles.RoleExists(String)
- uid: System.Web.Security.Roles.AddUsersToRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRole
  nameWithType: Roles.AddUsersToRole
  fullName: Roles.AddUsersToRole
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.AddUsersToRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRoles
  nameWithType: Roles.AddUsersToRoles
  fullName: Roles.AddUsersToRoles
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.AddUserToRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRole
  nameWithType: Roles.AddUserToRole
  fullName: Roles.AddUserToRole
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.AddUserToRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRoles
  nameWithType: Roles.AddUserToRoles
  fullName: Roles.AddUserToRoles
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.ApplicationName*
  parent: System.Web.Security.Roles
  isExternal: false
  name: ApplicationName
  nameWithType: Roles.ApplicationName
  fullName: Roles.ApplicationName
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.CacheRolesInCookie*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CacheRolesInCookie
  nameWithType: Roles.CacheRolesInCookie
  fullName: Roles.CacheRolesInCookie
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.CookieName*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieName
  nameWithType: Roles.CookieName
  fullName: Roles.CookieName
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.CookiePath*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookiePath
  nameWithType: Roles.CookiePath
  fullName: Roles.CookiePath
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.CookieProtectionValue*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieProtectionValue
  nameWithType: Roles.CookieProtectionValue
  fullName: Roles.CookieProtectionValue
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.CookieRequireSSL*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieRequireSSL
  nameWithType: Roles.CookieRequireSSL
  fullName: Roles.CookieRequireSSL
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.CookieSlidingExpiration*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieSlidingExpiration
  nameWithType: Roles.CookieSlidingExpiration
  fullName: Roles.CookieSlidingExpiration
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.CookieTimeout*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieTimeout
  nameWithType: Roles.CookieTimeout
  fullName: Roles.CookieTimeout
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.CreatePersistentCookie*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreatePersistentCookie
  nameWithType: Roles.CreatePersistentCookie
  fullName: Roles.CreatePersistentCookie
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.CreateRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreateRole
  nameWithType: Roles.CreateRole
  fullName: Roles.CreateRole
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.DeleteCookie*
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteCookie
  nameWithType: Roles.DeleteCookie
  fullName: Roles.DeleteCookie
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.DeleteRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteRole
  nameWithType: Roles.DeleteRole
  fullName: Roles.DeleteRole
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.Domain*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Domain
  nameWithType: Roles.Domain
  fullName: Roles.Domain
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.Enabled*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Enabled
  nameWithType: Roles.Enabled
  fullName: Roles.Enabled
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.FindUsersInRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: FindUsersInRole
  nameWithType: Roles.FindUsersInRole
  fullName: Roles.FindUsersInRole
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.GetAllRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetAllRoles
  nameWithType: Roles.GetAllRoles
  fullName: Roles.GetAllRoles
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.GetRolesForUser*
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetRolesForUser
  nameWithType: Roles.GetRolesForUser
  fullName: Roles.GetRolesForUser
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.GetUsersInRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetUsersInRole
  nameWithType: Roles.GetUsersInRole
  fullName: Roles.GetUsersInRole
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.IsUserInRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: IsUserInRole
  nameWithType: Roles.IsUserInRole
  fullName: Roles.IsUserInRole
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.MaxCachedResults*
  parent: System.Web.Security.Roles
  isExternal: false
  name: MaxCachedResults
  nameWithType: Roles.MaxCachedResults
  fullName: Roles.MaxCachedResults
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.Provider*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Provider
  nameWithType: Roles.Provider
  fullName: Roles.Provider
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.Providers*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Providers
  nameWithType: Roles.Providers
  fullName: Roles.Providers
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.RemoveUserFromRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRole
  nameWithType: Roles.RemoveUserFromRole
  fullName: Roles.RemoveUserFromRole
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.RemoveUserFromRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRoles
  nameWithType: Roles.RemoveUserFromRoles
  fullName: Roles.RemoveUserFromRoles
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.RemoveUsersFromRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRole
  nameWithType: Roles.RemoveUsersFromRole
  fullName: Roles.RemoveUsersFromRole
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.RemoveUsersFromRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRoles
  nameWithType: Roles.RemoveUsersFromRoles
  fullName: Roles.RemoveUsersFromRoles
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Web.Security.Roles.RoleExists*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RoleExists
  nameWithType: Roles.RoleExists
  fullName: Roles.RoleExists
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Security/Roles.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
