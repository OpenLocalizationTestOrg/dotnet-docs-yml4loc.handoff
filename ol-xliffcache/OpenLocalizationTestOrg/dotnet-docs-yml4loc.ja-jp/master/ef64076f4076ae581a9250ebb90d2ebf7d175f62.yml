### YamlMime:ManagedReference
items:
- uid: System.Text.RegularExpressions.Match
  commentId: T:System.Text.RegularExpressions.Match
  id: Match
  children:
  - System.Text.RegularExpressions.Match.Empty
  - System.Text.RegularExpressions.Match.Groups
  - System.Text.RegularExpressions.Match.NextMatch
  - System.Text.RegularExpressions.Match.Result(System.String)
  - System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)
  langs:
  - csharp
  name: Match
  nameWithType: Match
  fullName: System.Text.RegularExpressions.Match
  type: Class
  assemblies:
  - System.Text.RegularExpressions
  - System
  - netstandard
  namespace: System.Text.RegularExpressions
  summary: Represents the results from a single regular expression match.
  remarks: "The <xref:System.Text.RegularExpressions.Match> object is immutable and has no public constructor. An instance of the <xref:System.Text.RegularExpressions.Match> class is returned by the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName> method and represents the first pattern match in a string. Subsequent matches are represented by <xref:System.Text.RegularExpressions.Match> objects returned by the <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method. In addition, a <xref:System.Text.RegularExpressions.MatchCollection> object that consists of zero, one, or more <xref:System.Text.RegularExpressions.Match> objects is returned by the <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName> method.  \n  \n If the <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName> method fails to match a regular expression pattern in an input string, it returns an empty <xref:System.Text.RegularExpressions.MatchCollection> object. You can then use a `foreach` construct in C# or a `For Each` construct in Visual Basic to iterate the collection.  \n  \n If the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName> method fails to match the regular expression pattern, it returns a <xref:System.Text.RegularExpressions.Match> object that is equal to <xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=fullName>. You can use the <xref:System.Text.RegularExpressions.Group.Success%2A> property to determine whether the match was successful. The following example provides an illustration.  \n  \n [!code-csharp[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match1.cs#1)]\n [!code-vb[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match1.vb#1)]  \n  \n If a pattern match is successful, the <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the matched substring, the <xref:System.Text.RegularExpressions.Capture.Index%2A> property indicates the zero-based starting position of the matched substring in the input string, and the <xref:System.Text.RegularExpressions.Capture.Length%2A> property indicates the length of matched substring in the input string.  \n  \n Because a single match can involve multiple capturing groups, <xref:System.Text.RegularExpressions.Match> has a <xref:System.Text.RegularExpressions.Match.Groups%2A> property that returns the <xref:System.Text.RegularExpressions.GroupCollection>. The <xref:System.Text.RegularExpressions.Match> instance itself is equivalent to the first object in the collection, at `Match.Groups[0]` (`Match.Groups(0)` in Visual Basic), which represents the entire match. You can access the captured groups in a match in the following ways:  \n  \n-   You can iterate the members of the <xref:System.Text.RegularExpressions.GroupCollection> object  by using a `foreach` (C#) or `For Each` (Visual Basic) construct.  \n  \n-   You can use the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=fullName> property to retrieve groups by the number of the capturing group. Note that you can determine which numbered groups are present in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=fullName> method.  \n  \n-   You can use the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=fullName> property to retrieve groups by the name of the capturing group. Note that you can determine which named groups are present in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=fullName> method."
  example:
  - "The following examples use the regular expression `Console\\.Write(Line)?`. The regular expression is interpreted as follows:  \n  \n|||  \n|-|-|  \n|Console\\\\.Write|Match the string \"Console.Write\". Note that the \".\" character is escaped so that it is interpreted as a literal period rather than as a wildcard that matches any character.|  \n|(Line)?|Match zero or one occurrence of the string \"Line\".|  \n  \n **Example 1**  \n  \n The following example calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=fullName> method to retrieve all pattern matches in an input string. It then iterates the <xref:System.Text.RegularExpressions.Match> objects in the returned <xref:System.Text.RegularExpressions.MatchCollection> object to display information about each match.  \n  \n [!code-csharp[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match2.cs#2)]\n [!code-vb[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match2.vb#2)]  \n  \n **Example 2**  \n  \n The following example calls the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> and <xref:System.Text.RegularExpressions.Match.NextMatch%2A> methods to retrieve one match at a time.  \n  \n [!code-csharp[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match3.cs#3)]\n [!code-vb[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match3.vb#3)]"
  syntax:
    content: 'public class Match : System.Text.RegularExpressions.Group'
  inheritance:
  - System.Object
  - System.Text.RegularExpressions.Capture
  - System.Text.RegularExpressions.Group
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Text.RegularExpressions.Capture.Index
  - System.Text.RegularExpressions.Capture.Length
  - System.Text.RegularExpressions.Capture.ToString
  - System.Text.RegularExpressions.Capture.Value
  - System.Text.RegularExpressions.Group.Captures
  - System.Text.RegularExpressions.Group.Name
  - System.Text.RegularExpressions.Group.Success
  - System.Text.RegularExpressions.Group.Synchronized(System.Text.RegularExpressions.Group)
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Match.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.RegularExpressions.Match.Empty
  commentId: P:System.Text.RegularExpressions.Match.Empty
  id: Empty
  parent: System.Text.RegularExpressions.Match
  langs:
  - csharp
  name: Empty
  nameWithType: Match.Empty
  fullName: Match.Empty
  type: Property
  assemblies:
  - System.Text.RegularExpressions
  - System
  - netstandard
  namespace: System.Text.RegularExpressions
  summary: Gets the empty group. All failed matches return this empty match.
  remarks: This property should not be used to determine if a match is successful. Instead, use the `Match.Success` property (which is inherited from <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName>).
  syntax:
    content: public static System.Text.RegularExpressions.Match Empty { get; }
    return:
      type: System.Text.RegularExpressions.Match
      description: An empty match.
  overload: System.Text.RegularExpressions.Match.Empty*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Match.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.RegularExpressions.Match.Groups
  commentId: P:System.Text.RegularExpressions.Match.Groups
  id: Groups
  parent: System.Text.RegularExpressions.Match
  langs:
  - csharp
  name: Groups
  nameWithType: Match.Groups
  fullName: Match.Groups
  type: Property
  assemblies:
  - System.Text.RegularExpressions
  - System
  - netstandard
  namespace: System.Text.RegularExpressions
  summary: Gets a collection of groups matched by the regular expression.
  remarks: "A regular expression pattern can include subexpressions, which are defined by enclosing a portion of the regular expression pattern in parentheses. Every such subexpression forms a group. The <xref:System.Text.RegularExpressions.Match.Groups%2A> property provides access to information about those subexpression matches. For example, the regular expression pattern `(\\d{3})-(\\d{3}-\\d{4})`, which matches North American telephone numbers, has two subexpressions. The first consists of the area code, which composes the first three digits of the telephone number. This group is captured by the first portion of the regular expression, `(\\d{3})`.The second consists of the individual telephone number, which composes the last seven digits of the telephone number. This group is captured by the second portion of the regular expression, `(\\d{3}-\\d{4})`. These two groups can then be retrieved from the <xref:System.Text.RegularExpressions.GroupCollection> object that is returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A> property, as the following example shows.  \n  \n [!code-csharp[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/cs/groups1.cs#1)]\n [!code-vb[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/vb/groups1.vb#1)]  \n  \n The <xref:System.Text.RegularExpressions.GroupCollection> object returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> property is a zero-based collection object that always has at least one member. If the regular expression engine cannot find any matches in a particular input string, the <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName> property of the single <xref:System.Text.RegularExpressions.Group> object in the collection (the object at index 0) is set to `false` and the <xref:System.Text.RegularExpressions.Group> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property is set to <xref:System.String.Empty?displayProperty=fullName>. If the regular expression engine can find a match, the first element of the <xref:System.Text.RegularExpressions.GroupCollection> object (the element at index 0) returned by the <xref:System.Text.RegularExpressions.Match.Groups%2A> property contains a string that matches the entire regular expression pattern. Each subsequent element, from index one upward, represents a captured group, if the regular expression includes capturing groups. For more information, see the \"Grouping Constructs and Regular Expression Objects\" section of the [Grouping Constructs](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) article."
  example:
  - "The following example attempts to match a regular expression pattern against a sample string. The example uses the <xref:System.Text.RegularExpressions.Match.Groups%2A> property to store information that is retrieved by the match for display to the console.  \n  \n [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]\n [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]\n [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]"
  syntax:
    content: public virtual System.Text.RegularExpressions.GroupCollection Groups { get; }
    return:
      type: System.Text.RegularExpressions.GroupCollection
      description: The character groups matched by the pattern.
  overload: System.Text.RegularExpressions.Match.Groups*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Match.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.RegularExpressions.Match.NextMatch
  commentId: M:System.Text.RegularExpressions.Match.NextMatch
  id: NextMatch
  parent: System.Text.RegularExpressions.Match
  langs:
  - csharp
  name: NextMatch()
  nameWithType: Match.NextMatch()
  fullName: Match.NextMatch()
  type: Method
  assemblies:
  - System.Text.RegularExpressions
  - System
  - netstandard
  namespace: System.Text.RegularExpressions
  summary: Returns a new <xref href="System.Text.RegularExpressions.Match"></xref> object with the results for the next match, starting at the position at which the last match ended (at the character after the last matched character).
  remarks: "This method is similar to calling <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=fullName> again and passing (`Index+Length`) as the new starting position.  \n  \n> [!NOTE]\n>  This method does not modify the current instance. Instead, it returns a new <xref:System.Text.RegularExpressions.Match> object that contains information about the next match.  \n  \n Attempting to retrieve the next match may throw a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> if a time-out value for matching operations is in effect and the attempt to find the next match exceeds that time-out interval."
  example:
  - "The following example uses the <xref:System.Text.RegularExpressions.Match.NextMatch%2A> method to capture regular expression matches beyond the first match.  \n  \n [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]\n [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]\n [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]"
  syntax:
    content: public System.Text.RegularExpressions.Match NextMatch ();
    parameters: []
    return:
      type: System.Text.RegularExpressions.Match
      description: The next regular expression match.
  overload: System.Text.RegularExpressions.Match.NextMatch*
  exceptions:
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Match.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.RegularExpressions.Match.Result(System.String)
  commentId: M:System.Text.RegularExpressions.Match.Result(System.String)
  id: Result(System.String)
  parent: System.Text.RegularExpressions.Match
  langs:
  - csharp
  name: Result(String)
  nameWithType: Match.Result(String)
  fullName: Match.Result(String)
  type: Method
  assemblies:
  - System.Text.RegularExpressions
  - System
  - netstandard
  namespace: System.Text.RegularExpressions
  summary: Returns the expansion of the specified replacement pattern.
  remarks: "Whereas the <xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=fullName> method replaces all matches in an input string with a specified replacement pattern, the <xref:System.Text.RegularExpressions.Match.Result%2A> method replaces a single match with a specified replacement pattern. Because it operates on an individual match, it is also possible to perform processing on the matched string before you call the <xref:System.Text.RegularExpressions.Match.Result%2A> method.  \n  \n The `replacement` parameter is a standard regular expression replacement pattern. It can consist of literal characters and regular expression substitutions. For more information, see [Substitutions](~/docs/standard/base-types/substitutions-in-regular-expressions.md)."
  example:
  - "The following example replaces the hyphens that begin and end a parenthetical expression with parentheses.  \n  \n [!code-csharp[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/cs/result1.cs#1)]\n [!code-vb[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/vb/result1.vb#1)]  \n  \n The regular expression pattern `--(.+?)--` is interpreted as shown in the following table.  \n  \n|Pattern|Description|  \n|-------------|-----------------|  \n|`--`|Match two hyphens.|  \n|`(.+?)`|Match any character one or more times, but as few times as possible. This is the first capturing group.|  \n|`--`|Match two hyphens.|  \n  \n Note that the regular expression pattern `--(.+?)--` uses the lazy quantifier `+?`. If the greedy quantifier `+` were used instead, the regular expression engine would find only a single match in the input string.  \n  \n The replacement string `($1)` replaces the match with the first captured group, which is enclosed in parentheses."
  syntax:
    content: public virtual string Result (string replacement);
    parameters:
    - id: replacement
      type: System.String
      description: The replacement pattern to use.
    return:
      type: System.String
      description: The expanded version of the <code>replacement</code> parameter.
  overload: System.Text.RegularExpressions.Match.Result*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>replacement</code> is `null`.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Expansion is not allowed for this pattern.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Match.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)
  commentId: M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)
  id: Synchronized(System.Text.RegularExpressions.Match)
  parent: System.Text.RegularExpressions.Match
  langs:
  - csharp
  name: Synchronized(Match)
  nameWithType: Match.Synchronized(Match)
  fullName: Match.Synchronized(Match)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Returns a <xref href="System.Text.RegularExpressions.Match"></xref> instance equivalent to the one supplied that is suitable to share between multiple threads.
  syntax:
    content: public static System.Text.RegularExpressions.Match Synchronized (System.Text.RegularExpressions.Match inner);
    parameters:
    - id: inner
      type: System.Text.RegularExpressions.Match
      description: A regular expression match equivalent to the one expected.
    return:
      type: System.Text.RegularExpressions.Match
      description: A regular expression match that is suitable to share between multiple threads.
  overload: System.Text.RegularExpressions.Match.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>inner</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Match.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Text.RegularExpressions.Group
  parent: System.Text.RegularExpressions
  isExternal: false
  name: Group
  nameWithType: Group
  fullName: System.Text.RegularExpressions.Group
- uid: System.Text.RegularExpressions.RegexMatchTimeoutException
  parent: System.Text.RegularExpressions
  isExternal: false
  name: RegexMatchTimeoutException
  nameWithType: RegexMatchTimeoutException
  fullName: System.Text.RegularExpressions.RegexMatchTimeoutException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Text.RegularExpressions.Match.Empty
  parent: System.Text.RegularExpressions.Match
  isExternal: false
  name: Empty
  nameWithType: Match.Empty
  fullName: Match.Empty
- uid: System.Text.RegularExpressions.Match
  parent: System.Text.RegularExpressions
  isExternal: false
  name: Match
  nameWithType: Match
  fullName: System.Text.RegularExpressions.Match
- uid: System.Text.RegularExpressions.Match.Groups
  parent: System.Text.RegularExpressions.Match
  isExternal: false
  name: Groups
  nameWithType: Match.Groups
  fullName: Match.Groups
- uid: System.Text.RegularExpressions.GroupCollection
  parent: System.Text.RegularExpressions
  isExternal: false
  name: GroupCollection
  nameWithType: GroupCollection
  fullName: System.Text.RegularExpressions.GroupCollection
- uid: System.Text.RegularExpressions.Match.NextMatch
  parent: System.Text.RegularExpressions.Match
  isExternal: false
  name: NextMatch()
  nameWithType: Match.NextMatch()
  fullName: Match.NextMatch()
- uid: System.Text.RegularExpressions.Match.Result(System.String)
  parent: System.Text.RegularExpressions.Match
  isExternal: false
  name: Result(String)
  nameWithType: Match.Result(String)
  fullName: Match.Result(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)
  parent: System.Text.RegularExpressions.Match
  isExternal: false
  name: Synchronized(Match)
  nameWithType: Match.Synchronized(Match)
  fullName: Match.Synchronized(Match)
- uid: System.Text.RegularExpressions.Match.Empty*
  parent: System.Text.RegularExpressions.Match
  isExternal: false
  name: Empty
  nameWithType: Match.Empty
  fullName: Match.Empty
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Match.xml
- uid: System.Text.RegularExpressions.Match.Groups*
  parent: System.Text.RegularExpressions.Match
  isExternal: false
  name: Groups
  nameWithType: Match.Groups
  fullName: Match.Groups
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Match.xml
- uid: System.Text.RegularExpressions.Match.NextMatch*
  parent: System.Text.RegularExpressions.Match
  isExternal: false
  name: NextMatch
  nameWithType: Match.NextMatch
  fullName: Match.NextMatch
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Match.xml
- uid: System.Text.RegularExpressions.Match.Result*
  parent: System.Text.RegularExpressions.Match
  isExternal: false
  name: Result
  nameWithType: Match.Result
  fullName: Match.Result
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Match.xml
- uid: System.Text.RegularExpressions.Match.Synchronized*
  parent: System.Text.RegularExpressions.Match
  isExternal: false
  name: Synchronized
  nameWithType: Match.Synchronized
  fullName: Match.Synchronized
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Match.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Text.RegularExpressions.Capture.ToString
  parent: System.Text.RegularExpressions.Capture
  isExternal: false
  name: ToString()
  nameWithType: Capture.ToString()
  fullName: Capture.ToString()
- uid: System.Text.RegularExpressions.Capture.Index
  parent: System.Text.RegularExpressions.Capture
  isExternal: false
  name: Index
  nameWithType: Capture.Index
  fullName: Capture.Index
- uid: System.Text.RegularExpressions.Capture.Length
  parent: System.Text.RegularExpressions.Capture
  isExternal: false
  name: Length
  nameWithType: Capture.Length
  fullName: Capture.Length
- uid: System.Text.RegularExpressions.Capture.Value
  parent: System.Text.RegularExpressions.Capture
  isExternal: false
  name: Value
  nameWithType: Capture.Value
  fullName: Capture.Value
- uid: System.Text.RegularExpressions.Group.Captures
  parent: System.Text.RegularExpressions.Group
  isExternal: false
  name: Captures
  nameWithType: Group.Captures
  fullName: Group.Captures
- uid: System.Text.RegularExpressions.Group.Name
  parent: System.Text.RegularExpressions.Group
  isExternal: false
  name: Name
  nameWithType: Group.Name
  fullName: Group.Name
- uid: System.Text.RegularExpressions.Group.Success
  parent: System.Text.RegularExpressions.Group
  isExternal: false
  name: Success
  nameWithType: Group.Success
  fullName: Group.Success
- uid: System.Text.RegularExpressions.Group.Synchronized(System.Text.RegularExpressions.Group)
  parent: System.Text.RegularExpressions.Group
  isExternal: false
  name: Synchronized(Group)
  nameWithType: Group.Synchronized(Group)
  fullName: Group.Synchronized(Group)
