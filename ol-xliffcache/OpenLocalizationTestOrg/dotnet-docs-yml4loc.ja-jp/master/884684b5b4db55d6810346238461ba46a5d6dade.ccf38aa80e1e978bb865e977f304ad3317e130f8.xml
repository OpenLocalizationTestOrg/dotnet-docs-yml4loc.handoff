{"nodes":[{"content":"Provides a type-safe <xref href=\"System.Windows.WeakEventManager\"></xref> that enables you to specify the event handler to use for the \"weak event listener\" pattern. This class defines a type parameter for the source of the event and a type parameter for the event data that is used.","nodes":[{"pos":[0,283],"content":"Provides a type-safe <xref href=\"System.Windows.WeakEventManager\"></xref> that enables you to specify the event handler to use for the \"weak event listener\" pattern. This class defines a type parameter for the source of the event and a type parameter for the event data that is used.","nodes":[{"content":"Provides a type-safe <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager\"&gt;&lt;/xref&gt;</ph> that enables you to specify the event handler to use for the \"weak event listener\" pattern.","pos":[0,165],"source":"Provides a type-safe <xref href=\"System.Windows.WeakEventManager\"></xref> that enables you to specify the event handler to use for the \"weak event listener\" pattern."},{"content":"This class defines a type parameter for the source of the event and a type parameter for the event data that is used.","pos":[166,283]}]}],"pos":[817,1101],"yaml":true},{"content":"The <xref:System.Windows.WeakEventManager> class enables you to leverage the weak event listener pattern by specifying the event to subscribe to, the source of the event, and event handler.  You can use <xref:System.Windows.WeakEventManager%602> as an alternative to implementing the <xref:System.Windows.IWeakEventListener> interface and using a specialized <xref:System.Windows.WeakEventManager>. When you call <xref:System.Windows.WeakEventManager%602.AddHandler%2A>, the source must be of type `TEventSource` and the event handler you pass must have `TEventArgs` as its event data. This ensures that type checking occurs at compile time.","nodes":[{"pos":[0,641],"content":"The <xref:System.Windows.WeakEventManager> class enables you to leverage the weak event listener pattern by specifying the event to subscribe to, the source of the event, and event handler.  You can use <xref:System.Windows.WeakEventManager%602> as an alternative to implementing the <xref:System.Windows.IWeakEventListener> interface and using a specialized <xref:System.Windows.WeakEventManager>. When you call <xref:System.Windows.WeakEventManager%602.AddHandler%2A>, the source must be of type `TEventSource` and the event handler you pass must have `TEventArgs` as its event data. This ensures that type checking occurs at compile time.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager&gt;</ph> class enables you to leverage the weak event listener pattern by specifying the event to subscribe to, the source of the event, and event handler.","pos":[0,189],"source":"The <xref:System.Windows.WeakEventManager> class enables you to leverage the weak event listener pattern by specifying the event to subscribe to, the source of the event, and event handler."},{"content":"You can use <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager%602&gt;</ph> as an alternative to implementing the <ph id=\"ph2\">&lt;xref:System.Windows.IWeakEventListener&gt;</ph> interface and using a specialized <ph id=\"ph3\">&lt;xref:System.Windows.WeakEventManager&gt;</ph>.","pos":[191,398],"source":"  You can use <xref:System.Windows.WeakEventManager%602> as an alternative to implementing the <xref:System.Windows.IWeakEventListener> interface and using a specialized <xref:System.Windows.WeakEventManager>."},{"content":"When you call <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager%602.AddHandler%2A&gt;</ph>, the source must be of type <ph id=\"ph2\">`TEventSource`</ph> and the event handler you pass must have <ph id=\"ph3\">`TEventArgs`</ph> as its event data.","pos":[399,585],"source":" When you call <xref:System.Windows.WeakEventManager%602.AddHandler%2A>, the source must be of type `TEventSource` and the event handler you pass must have `TEventArgs` as its event data."},{"content":"This ensures that type checking occurs at compile time.","pos":[586,641]}]}],"pos":[1112,1754],"yaml":true,"extradata":"MT"},{"content":"The type that raises the event.","nodes":[{"pos":[0,31],"content":"The type that raises the event.","nodes":[{"content":"The type that raises the event.","pos":[0,31]}]}],"pos":[1959,1991],"yaml":true},{"content":"The type that holds the event data.","nodes":[{"pos":[0,35],"content":"The type that holds the event data.","nodes":[{"content":"The type that holds the event data.","pos":[0,35]}]}],"pos":[2031,2067],"yaml":true},{"content":"Adds the specified event handler to the specified event.","nodes":[{"pos":[0,56],"content":"Adds the specified event handler to the specified event.","nodes":[{"content":"Adds the specified event handler to the specified event.","pos":[0,56]}]}],"pos":[5009,5066],"yaml":true},{"content":"The source object that raises the specified event.","nodes":[{"pos":[0,50],"content":"The source object that raises the specified event.","nodes":[{"content":"The source object that raises the specified event.","pos":[0,50]}]}],"pos":[5271,5322],"yaml":true},{"content":"The name of the event to subscribe to.","nodes":[{"pos":[0,38],"content":"The name of the event to subscribe to.","nodes":[{"content":"The name of the event to subscribe to.","pos":[0,38]}]}],"pos":[5387,5426],"yaml":true},{"content":"The delegate that handles the event.","nodes":[{"pos":[0,36],"content":"The delegate that handles the event.","nodes":[{"content":"The delegate that handles the event.","pos":[0,36]}]}],"pos":[5497,5534],"yaml":true},{"content":"Returns a new object to contain listeners to an event.","nodes":[{"pos":[0,54],"content":"Returns a new object to contain listeners to an event.","nodes":[{"content":"Returns a new object to contain listeners to an event.","pos":[0,54]}]}],"pos":[6603,6658],"yaml":true},{"content":"A new object to contain listeners to an event.","nodes":[{"pos":[0,46],"content":"A new object to contain listeners to an event.","nodes":[{"content":"A new object to contain listeners to an event.","pos":[0,46]}]}],"pos":[6872,6919],"yaml":true},{"content":"Removes the specified event handler from the specified event.","nodes":[{"pos":[0,61],"content":"Removes the specified event handler from the specified event.","nodes":[{"content":"Removes the specified event handler from the specified event.","pos":[0,61]}]}],"pos":[8245,8307],"yaml":true},{"content":"The source object that raises the specified event.","nodes":[{"pos":[0,50],"content":"The source object that raises the specified event.","nodes":[{"content":"The source object that raises the specified event.","pos":[0,50]}]}],"pos":[8515,8566],"yaml":true},{"content":"The name of the event to remove the handler from.","nodes":[{"pos":[0,49],"content":"The name of the event to remove the handler from.","nodes":[{"content":"The name of the event to remove the handler from.","pos":[0,49]}]}],"pos":[8631,8681],"yaml":true},{"content":"The delegate to remove","nodes":[{"pos":[0,22],"content":"The delegate to remove","nodes":[{"content":"The delegate to remove","pos":[0,22]}]}],"pos":[8752,8775],"yaml":true},{"content":"Starts listening for the event on the specified object.","nodes":[{"pos":[0,55],"content":"Starts listening for the event on the specified object.","nodes":[{"content":"Starts listening for the event on the specified object.","pos":[0,55]}]}],"pos":[9904,9960],"yaml":true},{"content":"The object to that raises the event.","nodes":[{"pos":[0,36],"content":"The object to that raises the event.","nodes":[{"content":"The object to that raises the event.","pos":[0,36]}]}],"pos":[10117,10154],"yaml":true},{"content":"Stops listening for the event on the specified object.","nodes":[{"pos":[0,54],"content":"Stops listening for the event on the specified object.","nodes":[{"content":"Stops listening for the event on the specified object.","pos":[0,54]}]}],"pos":[11256,11311],"yaml":true},{"content":"The object to that raises the event.","nodes":[{"pos":[0,36],"content":"The object to that raises the event.","nodes":[{"content":"The object to that raises the event.","pos":[0,36]}]}],"pos":[11467,11504],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.WeakEventManager`2\n  commentId: T:System.Windows.WeakEventManager`2\n  id: WeakEventManager`2\n  children:\n  - System.Windows.WeakEventManager`2.AddHandler(`0,System.String,System.EventHandler{`1})\n  - System.Windows.WeakEventManager`2.NewListenerList\n  - System.Windows.WeakEventManager`2.RemoveHandler(`0,System.String,System.EventHandler{`1})\n  - System.Windows.WeakEventManager`2.StartListening(System.Object)\n  - System.Windows.WeakEventManager`2.StopListening(System.Object)\n  langs:\n  - csharp\n  name: WeakEventManager<TEventSource,TEventArgs>\n  nameWithType: WeakEventManager<TEventSource,TEventArgs>\n  fullName: System.Windows.WeakEventManager<TEventSource,TEventArgs>\n  type: Class\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Provides a type-safe <xref href=\"System.Windows.WeakEventManager\"></xref> that enables you to specify the event handler to use for the \"weak event listener\" pattern. This class defines a type parameter for the source of the event and a type parameter for the event data that is used.\n  remarks: The <xref:System.Windows.WeakEventManager> class enables you to leverage the weak event listener pattern by specifying the event to subscribe to, the source of the event, and event handler.  You can use <xref:System.Windows.WeakEventManager%602> as an alternative to implementing the <xref:System.Windows.IWeakEventListener> interface and using a specialized <xref:System.Windows.WeakEventManager>. When you call <xref:System.Windows.WeakEventManager%602.AddHandler%2A>, the source must be of type `TEventSource` and the event handler you pass must have `TEventArgs` as its event data. This ensures that type checking occurs at compile time.\n  syntax:\n    content: 'public class WeakEventManager<TEventSource,TEventArgs> : System.Windows.WeakEventManager where TEventArgs : EventArgs'\n    typeParameters:\n    - id: TEventSource\n      description: The type that raises the event.\n    - id: TEventArgs\n      description: The type that holds the event data.\n  inheritance:\n  - System.Object\n  - System.Windows.Threading.DispatcherObject\n  - System.Windows.WeakEventManager\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Windows.Threading.DispatcherObject.CheckAccess\n  - System.Windows.Threading.DispatcherObject.Dispatcher\n  - System.Windows.Threading.DispatcherObject.VerifyAccess\n  - System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)\n  - System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)\n  - System.Windows.WeakEventManager.GetCurrentManager(System.Type)\n  - System.Windows.WeakEventManager.Item(System.Object)\n  - System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)\n  - System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)\n  - System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)\n  - System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)\n  - System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)\n  - System.Windows.WeakEventManager.ReadLock\n  - System.Windows.WeakEventManager.Remove(System.Object)\n  - System.Windows.WeakEventManager.ScheduleCleanup\n  - System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)\n  - System.Windows.WeakEventManager.WriteLock\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager`2.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.WeakEventManager`2.AddHandler(`0,System.String,System.EventHandler{`1})\n  commentId: M:System.Windows.WeakEventManager`2.AddHandler(`0,System.String,System.EventHandler{`1})\n  id: AddHandler(`0,System.String,System.EventHandler{`1})\n  parent: System.Windows.WeakEventManager`2\n  langs:\n  - csharp\n  name: AddHandler(TEventSource, String, EventHandler<TEventArgs>)\n  nameWithType: WeakEventManager<TEventSource,TEventArgs>.AddHandler(TEventSource, String, EventHandler<TEventArgs>)\n  fullName: WeakEventManager<TEventSource,TEventArgs>.AddHandler(TEventSource, String, EventHandler<TEventArgs>)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Adds the specified event handler to the specified event.\n  syntax:\n    content: public static void AddHandler (TEventSource source, string eventName, EventHandler<TEventArgs> handler);\n    parameters:\n    - id: source\n      type: TEventSource\n      description: The source object that raises the specified event.\n    - id: eventName\n      type: System.String\n      description: The name of the event to subscribe to.\n    - id: handler\n      type: System.EventHandler`1\n      description: The delegate that handles the event.\n  overload: System.Windows.WeakEventManager`2.AddHandler*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager`2.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.WeakEventManager`2.NewListenerList\n  commentId: M:System.Windows.WeakEventManager`2.NewListenerList\n  id: NewListenerList\n  parent: System.Windows.WeakEventManager`2\n  langs:\n  - csharp\n  name: NewListenerList()\n  nameWithType: WeakEventManager<TEventSource,TEventArgs>.NewListenerList()\n  fullName: WeakEventManager<TEventSource,TEventArgs>.NewListenerList()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Returns a new object to contain listeners to an event.\n  syntax:\n    content: protected override System.Windows.WeakEventManager.ListenerList NewListenerList ();\n    parameters: []\n    return:\n      type: System.Windows.WeakEventManager+ListenerList\n      description: A new object to contain listeners to an event.\n  overload: System.Windows.WeakEventManager`2.NewListenerList*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager`2.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.WeakEventManager`2.RemoveHandler(`0,System.String,System.EventHandler{`1})\n  commentId: M:System.Windows.WeakEventManager`2.RemoveHandler(`0,System.String,System.EventHandler{`1})\n  id: RemoveHandler(`0,System.String,System.EventHandler{`1})\n  parent: System.Windows.WeakEventManager`2\n  langs:\n  - csharp\n  name: RemoveHandler(TEventSource, String, EventHandler<TEventArgs>)\n  nameWithType: WeakEventManager<TEventSource,TEventArgs>.RemoveHandler(TEventSource, String, EventHandler<TEventArgs>)\n  fullName: WeakEventManager<TEventSource,TEventArgs>.RemoveHandler(TEventSource, String, EventHandler<TEventArgs>)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Removes the specified event handler from the specified event.\n  syntax:\n    content: public static void RemoveHandler (TEventSource source, string eventName, EventHandler<TEventArgs> handler);\n    parameters:\n    - id: source\n      type: TEventSource\n      description: The source object that raises the specified event.\n    - id: eventName\n      type: System.String\n      description: The name of the event to remove the handler from.\n    - id: handler\n      type: System.EventHandler`1\n      description: The delegate to remove\n  overload: System.Windows.WeakEventManager`2.RemoveHandler*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager`2.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.WeakEventManager`2.StartListening(System.Object)\n  commentId: M:System.Windows.WeakEventManager`2.StartListening(System.Object)\n  id: StartListening(System.Object)\n  parent: System.Windows.WeakEventManager`2\n  langs:\n  - csharp\n  name: StartListening(Object)\n  nameWithType: WeakEventManager<TEventSource,TEventArgs>.StartListening(Object)\n  fullName: WeakEventManager<TEventSource,TEventArgs>.StartListening(Object)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Starts listening for the event on the specified object.\n  syntax:\n    content: protected override void StartListening (object source);\n    parameters:\n    - id: source\n      type: System.Object\n      description: The object to that raises the event.\n  overload: System.Windows.WeakEventManager`2.StartListening*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager`2.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.WeakEventManager`2.StopListening(System.Object)\n  commentId: M:System.Windows.WeakEventManager`2.StopListening(System.Object)\n  id: StopListening(System.Object)\n  parent: System.Windows.WeakEventManager`2\n  langs:\n  - csharp\n  name: StopListening(Object)\n  nameWithType: WeakEventManager<TEventSource,TEventArgs>.StopListening(Object)\n  fullName: WeakEventManager<TEventSource,TEventArgs>.StopListening(Object)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Stops listening for the event on the specified object.\n  syntax:\n    content: protected override void StopListening (object source);\n    parameters:\n    - id: source\n      type: System.Object\n      description: The object to that raises the event.\n  overload: System.Windows.WeakEventManager`2.StopListening*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager`2.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Windows.WeakEventManager\n  parent: System.Windows\n  isExternal: false\n  name: WeakEventManager\n  nameWithType: WeakEventManager\n  fullName: System.Windows.WeakEventManager\n- uid: System.Windows.WeakEventManager`2.AddHandler(`0,System.String,System.EventHandler{`1})\n  parent: System.Windows.WeakEventManager`2\n  isExternal: false\n  name: AddHandler(TEventSource, String, EventHandler<TEventArgs>)\n  nameWithType: WeakEventManager<TEventSource,TEventArgs>.AddHandler(TEventSource, String, EventHandler<TEventArgs>)\n  fullName: WeakEventManager<TEventSource,TEventArgs>.AddHandler(TEventSource, String, EventHandler<TEventArgs>)\n- uid: TEventSource\n  isExternal: true\n  name: TEventSource\n  nameWithType: TEventSource\n  fullName: TEventSource\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.EventHandler`1\n  parent: System\n  isExternal: false\n  name: EventHandler<TEventArgs>\n  nameWithType: EventHandler<TEventArgs>\n  fullName: System.EventHandler<TEventArgs>\n- uid: System.Windows.WeakEventManager`2.NewListenerList\n  parent: System.Windows.WeakEventManager`2\n  isExternal: false\n  name: NewListenerList()\n  nameWithType: WeakEventManager<TEventSource,TEventArgs>.NewListenerList()\n  fullName: WeakEventManager<TEventSource,TEventArgs>.NewListenerList()\n- uid: System.Windows.WeakEventManager`2.RemoveHandler(`0,System.String,System.EventHandler{`1})\n  parent: System.Windows.WeakEventManager`2\n  isExternal: false\n  name: RemoveHandler(TEventSource, String, EventHandler<TEventArgs>)\n  nameWithType: WeakEventManager<TEventSource,TEventArgs>.RemoveHandler(TEventSource, String, EventHandler<TEventArgs>)\n  fullName: WeakEventManager<TEventSource,TEventArgs>.RemoveHandler(TEventSource, String, EventHandler<TEventArgs>)\n- uid: System.Windows.WeakEventManager`2.StartListening(System.Object)\n  parent: System.Windows.WeakEventManager`2\n  isExternal: false\n  name: StartListening(Object)\n  nameWithType: WeakEventManager<TEventSource,TEventArgs>.StartListening(Object)\n  fullName: WeakEventManager<TEventSource,TEventArgs>.StartListening(Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.WeakEventManager`2.StopListening(System.Object)\n  parent: System.Windows.WeakEventManager`2\n  isExternal: false\n  name: StopListening(Object)\n  nameWithType: WeakEventManager<TEventSource,TEventArgs>.StopListening(Object)\n  fullName: WeakEventManager<TEventSource,TEventArgs>.StopListening(Object)\n- uid: System.Windows.WeakEventManager`2.AddHandler*\n  parent: System.Windows.WeakEventManager`2\n  isExternal: false\n  name: AddHandler\n  nameWithType: WeakEventManager<TEventSource,TEventArgs>.AddHandler\n  fullName: WeakEventManager<TEventSource,TEventArgs>.AddHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager`2.xml\n- uid: System.Windows.WeakEventManager`2.NewListenerList*\n  parent: System.Windows.WeakEventManager`2\n  isExternal: false\n  name: NewListenerList\n  nameWithType: WeakEventManager<TEventSource,TEventArgs>.NewListenerList\n  fullName: WeakEventManager<TEventSource,TEventArgs>.NewListenerList\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager`2.xml\n- uid: System.Windows.WeakEventManager`2.RemoveHandler*\n  parent: System.Windows.WeakEventManager`2\n  isExternal: false\n  name: RemoveHandler\n  nameWithType: WeakEventManager<TEventSource,TEventArgs>.RemoveHandler\n  fullName: WeakEventManager<TEventSource,TEventArgs>.RemoveHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager`2.xml\n- uid: System.Windows.WeakEventManager`2.StartListening*\n  parent: System.Windows.WeakEventManager`2\n  isExternal: false\n  name: StartListening\n  nameWithType: WeakEventManager<TEventSource,TEventArgs>.StartListening\n  fullName: WeakEventManager<TEventSource,TEventArgs>.StartListening\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager`2.xml\n- uid: System.Windows.WeakEventManager`2.StopListening*\n  parent: System.Windows.WeakEventManager`2\n  isExternal: false\n  name: StopListening\n  nameWithType: WeakEventManager<TEventSource,TEventArgs>.StopListening\n  fullName: WeakEventManager<TEventSource,TEventArgs>.StopListening\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/WeakEventManager`2.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Windows.Threading.DispatcherObject.CheckAccess\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: CheckAccess()\n  nameWithType: DispatcherObject.CheckAccess()\n  fullName: DispatcherObject.CheckAccess()\n- uid: System.Windows.Threading.DispatcherObject.Dispatcher\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: Dispatcher\n  nameWithType: DispatcherObject.Dispatcher\n  fullName: DispatcherObject.Dispatcher\n- uid: System.Windows.Threading.DispatcherObject.VerifyAccess\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: VerifyAccess()\n  nameWithType: DispatcherObject.VerifyAccess()\n  fullName: DispatcherObject.VerifyAccess()\n- uid: System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: DeliverEvent(Object, EventArgs)\n  nameWithType: WeakEventManager.DeliverEvent(Object, EventArgs)\n  fullName: WeakEventManager.DeliverEvent(Object, EventArgs)\n- uid: System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: DeliverEventToList(Object, EventArgs, WeakEventManager+ListenerList)\n  nameWithType: WeakEventManager.DeliverEventToList(Object, EventArgs, WeakEventManager+ListenerList)\n  fullName: WeakEventManager.DeliverEventToList(Object, EventArgs, WeakEventManager+ListenerList)\n- uid: System.Windows.WeakEventManager.GetCurrentManager(System.Type)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: GetCurrentManager(Type)\n  nameWithType: WeakEventManager.GetCurrentManager(Type)\n  fullName: WeakEventManager.GetCurrentManager(Type)\n- uid: System.Windows.WeakEventManager.Item(System.Object)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: Item(Object)\n  nameWithType: WeakEventManager.Item(Object)\n  fullName: WeakEventManager.Item(Object)\n- uid: System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ProtectedAddHandler(Object, Delegate)\n  nameWithType: WeakEventManager.ProtectedAddHandler(Object, Delegate)\n  fullName: WeakEventManager.ProtectedAddHandler(Object, Delegate)\n- uid: System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ProtectedAddListener(Object, IWeakEventListener)\n  nameWithType: WeakEventManager.ProtectedAddListener(Object, IWeakEventListener)\n  fullName: WeakEventManager.ProtectedAddListener(Object, IWeakEventListener)\n- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ProtectedRemoveHandler(Object, Delegate)\n  nameWithType: WeakEventManager.ProtectedRemoveHandler(Object, Delegate)\n  fullName: WeakEventManager.ProtectedRemoveHandler(Object, Delegate)\n- uid: System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ProtectedRemoveListener(Object, IWeakEventListener)\n  nameWithType: WeakEventManager.ProtectedRemoveListener(Object, IWeakEventListener)\n  fullName: WeakEventManager.ProtectedRemoveListener(Object, IWeakEventListener)\n- uid: System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: Purge(Object, Object, Boolean)\n  nameWithType: WeakEventManager.Purge(Object, Object, Boolean)\n  fullName: WeakEventManager.Purge(Object, Object, Boolean)\n- uid: System.Windows.WeakEventManager.ReadLock\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ReadLock\n  nameWithType: WeakEventManager.ReadLock\n  fullName: WeakEventManager.ReadLock\n- uid: System.Windows.WeakEventManager.Remove(System.Object)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: Remove(Object)\n  nameWithType: WeakEventManager.Remove(Object)\n  fullName: WeakEventManager.Remove(Object)\n- uid: System.Windows.WeakEventManager.ScheduleCleanup\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ScheduleCleanup()\n  nameWithType: WeakEventManager.ScheduleCleanup()\n  fullName: WeakEventManager.ScheduleCleanup()\n- uid: System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: SetCurrentManager(Type, WeakEventManager)\n  nameWithType: WeakEventManager.SetCurrentManager(Type, WeakEventManager)\n  fullName: WeakEventManager.SetCurrentManager(Type, WeakEventManager)\n- uid: System.Windows.WeakEventManager.WriteLock\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: WriteLock\n  nameWithType: WeakEventManager.WriteLock\n  fullName: WeakEventManager.WriteLock\n"}