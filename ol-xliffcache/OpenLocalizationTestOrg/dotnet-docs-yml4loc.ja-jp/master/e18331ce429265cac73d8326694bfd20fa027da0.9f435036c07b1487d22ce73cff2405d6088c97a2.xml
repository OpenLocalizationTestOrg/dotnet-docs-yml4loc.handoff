{"nodes":[{"content":"Table of atomized string objects.","nodes":[{"pos":[0,33],"content":"Table of atomized string objects.","nodes":[{"content":"Table of atomized string objects.","pos":[0,33]}]}],"pos":[639,673],"yaml":true},{"content":"Several classes, such as <xref:System.Xml.XmlDocument> and <xref:System.Xml.XmlReader>, use the `XmlNameTable` class internally to store attribute and element names. When an element or attribute name occurs multiple times in an XML document, it is stored only once in the `XmlNameTable`.  \n  \n The names are stored as common language runtime (CLR) object types. This enables you to do object comparisons on these strings rather than a more expensive string comparison. These string objects are referred to as \"atomized strings\".  \n  \n `XmlNameTable` is implemented in the <xref:System.Xml.NameTable> class.","nodes":[{"pos":[0,287],"content":"Several classes, such as <xref:System.Xml.XmlDocument> and <xref:System.Xml.XmlReader>, use the `XmlNameTable` class internally to store attribute and element names. When an element or attribute name occurs multiple times in an XML document, it is stored only once in the `XmlNameTable`.","nodes":[{"content":"Several classes, such as <ph id=\"ph1\">&lt;xref:System.Xml.XmlDocument&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph>, use the <ph id=\"ph3\">`XmlNameTable`</ph> class internally to store attribute and element names.","pos":[0,165],"source":"Several classes, such as <xref:System.Xml.XmlDocument> and <xref:System.Xml.XmlReader>, use the `XmlNameTable` class internally to store attribute and element names."},{"content":"When an element or attribute name occurs multiple times in an XML document, it is stored only once in the <ph id=\"ph1\">`XmlNameTable`</ph>.","pos":[166,287],"source":" When an element or attribute name occurs multiple times in an XML document, it is stored only once in the `XmlNameTable`."}]},{"pos":[294,528],"content":"The names are stored as common language runtime (CLR) object types. This enables you to do object comparisons on these strings rather than a more expensive string comparison. These string objects are referred to as \"atomized strings\".","nodes":[{"content":"The names are stored as common language runtime (CLR) object types. This enables you to do object comparisons on these strings rather than a more expensive string comparison. These string objects are referred to as \"atomized strings\".","pos":[0,234],"nodes":[{"content":"The names are stored as common language runtime (CLR) object types.","pos":[0,67]},{"content":"This enables you to do object comparisons on these strings rather than a more expensive string comparison.","pos":[68,174]},{"content":"These string objects are referred to as \"atomized strings\".","pos":[175,234]}]}]},{"pos":[535,606],"content":"<ph id=\"ph1\">`XmlNameTable`</ph> is implemented in the <ph id=\"ph2\">&lt;xref:System.Xml.NameTable&gt;</ph> class.","source":"`XmlNameTable` is implemented in the <xref:System.Xml.NameTable> class."}],"pos":[684,1299],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Xml.XmlNameTable\"></xref> class.","nodes":[{"pos":[0,85],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlNameTable\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Xml.XmlNameTable\"></xref> class."}],"pos":[3440,3526],"yaml":true},{"content":"When overridden in a derived class, atomizes the specified string and adds it to the `XmlNameTable`.","nodes":[{"pos":[0,100],"content":"When overridden in a derived class, atomizes the specified string and adds it to the <ph id=\"ph1\">`XmlNameTable`</ph>.","source":"When overridden in a derived class, atomizes the specified string and adds it to the `XmlNameTable`."}],"pos":[5084,5185],"yaml":true},{"content":"For more information on atomized strings, see <xref:System.Xml.XmlNameTable>.","nodes":[{"pos":[0,77],"content":"For more information on atomized strings, see <xref:System.Xml.XmlNameTable>.","nodes":[{"content":"For more information on atomized strings, see <ph id=\"ph1\">&lt;xref:System.Xml.XmlNameTable&gt;</ph>.","pos":[0,77],"source":"For more information on atomized strings, see <xref:System.Xml.XmlNameTable>."}]}],"pos":[5196,5274],"yaml":true,"extradata":"MT"},{"content":"The name to add.","nodes":[{"pos":[0,16],"content":"The name to add.","nodes":[{"content":"The name to add.","pos":[0,16]}]}],"pos":[5417,5434],"yaml":true},{"content":"The new atomized string or the existing one if it already exists.","nodes":[{"pos":[0,65],"content":"The new atomized string or the existing one if it already exists.","nodes":[{"content":"The new atomized string or the existing one if it already exists.","pos":[0,65]}]}],"pos":[5491,5557],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[5714,5744],"yaml":true},{"content":"When overridden in a derived class, atomizes the specified string and adds it to the `XmlNameTable`.","nodes":[{"pos":[0,100],"content":"When overridden in a derived class, atomizes the specified string and adds it to the <ph id=\"ph1\">`XmlNameTable`</ph>.","source":"When overridden in a derived class, atomizes the specified string and adds it to the `XmlNameTable`."}],"pos":[7293,7394],"yaml":true},{"content":"For more information on atomized strings, see <xref:System.Xml.XmlNameTable>.","nodes":[{"pos":[0,77],"content":"For more information on atomized strings, see <xref:System.Xml.XmlNameTable>.","nodes":[{"content":"For more information on atomized strings, see <ph id=\"ph1\">&lt;xref:System.Xml.XmlNameTable&gt;</ph>.","pos":[0,77],"source":"For more information on atomized strings, see <xref:System.Xml.XmlNameTable>."}]}],"pos":[7405,7483],"yaml":true,"extradata":"MT"},{"content":"The character array containing the name to add.","nodes":[{"pos":[0,47],"content":"The character array containing the name to add.","nodes":[{"content":"The character array containing the name to add.","pos":[0,47]}]}],"pos":[7650,7698],"yaml":true},{"content":"Zero-based index into the array specifying the first character of the name.","nodes":[{"pos":[0,75],"content":"Zero-based index into the array specifying the first character of the name.","nodes":[{"content":"Zero-based index into the array specifying the first character of the name.","pos":[0,75]}]}],"pos":[7759,7835],"yaml":true},{"content":"The number of characters in the name.","nodes":[{"pos":[0,37],"content":"The number of characters in the name.","nodes":[{"content":"The number of characters in the name.","pos":[0,37]}]}],"pos":[7896,7934],"yaml":true},{"content":"The new atomized string or the existing one if it already exists. If length is zero, String.Empty is returned.","nodes":[{"pos":[0,110],"content":"The new atomized string or the existing one if it already exists. If length is zero, String.Empty is returned.","nodes":[{"content":"The new atomized string or the existing one if it already exists. If length is zero, String.Empty is returned.","pos":[0,110],"nodes":[{"content":"The new atomized string or the existing one if it already exists.","pos":[0,65]},{"content":"If length is zero, String.Empty is returned.","pos":[66,110]}]}]}],"pos":[7991,8102],"yaml":true},{"content":"0 > <code>offset</code>  \n  \n -or-  \n  \n <code>offset</code> >= <code>array</code>.Length  \n  \n -or-  \n  \n <code>length</code> > <code>array</code>.Length  \n  \n The above conditions do not cause an exception to be thrown if <code>length</code> =0.","nodes":[{"pos":[0,23],"content":"0 &gt; <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept>","source":"0 > <code>offset</code>"},{"pos":[30,34],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[41,89],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph><ph id=\"ph2\"> &gt;</ph><ph id=\"ph3\">= </ph><ph id=\"ph4\">&lt;code&gt;array&lt;/code&gt;</ph>.Length","source":"<code>offset</code> >= <code>array</code>.Length"},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,154],"content":"<ph id=\"ph1\">&lt;code&gt;length&lt;/code&gt;</ph><ph id=\"ph2\"> &gt; &lt;code&gt;array&lt;/code&gt;</ph>.Length","source":"<code>length</code> > <code>array</code>.Length"},{"pos":[161,247],"content":"The above conditions do not cause an exception to be thrown if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">length</ph><ept id=\"p1\">&lt;/code&gt;</ept> =0.","source":"The above conditions do not cause an exception to be thrown if <code>length</code> =0."}],"pos":[8265,8525],"yaml":true},{"content":"<code>length</code> < 0.","nodes":[{"pos":[0,24],"content":"<ph id=\"ph1\">&lt;code&gt;length&lt;/code&gt;</ph> &lt; 0.","source":"<code>length</code> < 0."}],"pos":[8639,8664],"yaml":true},{"content":"When overridden in a derived class, gets the atomized string containing the same value as the specified string.","nodes":[{"pos":[0,111],"content":"When overridden in a derived class, gets the atomized string containing the same value as the specified string.","nodes":[{"content":"When overridden in a derived class, gets the atomized string containing the same value as the specified string.","pos":[0,111]}]}],"pos":[10093,10205],"yaml":true},{"content":"For more information on atomized strings, see <xref:System.Xml.XmlNameTable>.","nodes":[{"pos":[0,77],"content":"For more information on atomized strings, see <xref:System.Xml.XmlNameTable>.","nodes":[{"content":"For more information on atomized strings, see <ph id=\"ph1\">&lt;xref:System.Xml.XmlNameTable&gt;</ph>.","pos":[0,77],"source":"For more information on atomized strings, see <xref:System.Xml.XmlNameTable>."}]}],"pos":[10216,10294],"yaml":true,"extradata":"MT"},{"content":"The name to look up.","nodes":[{"pos":[0,20],"content":"The name to look up.","nodes":[{"content":"The name to look up.","pos":[0,20]}]}],"pos":[10437,10458],"yaml":true},{"content":"The atomized string or `null` if the string has not already been atomized.","nodes":[{"pos":[0,74],"content":"The atomized string or <ph id=\"ph1\">`null`</ph> if the string has not already been atomized.","source":"The atomized string or `null` if the string has not already been atomized."}],"pos":[10515,10590],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[10747,10777],"yaml":true},{"content":"When overridden in a derived class, gets the atomized string containing the same characters as the specified range of characters in the given array.","nodes":[{"pos":[0,148],"content":"When overridden in a derived class, gets the atomized string containing the same characters as the specified range of characters in the given array.","nodes":[{"content":"When overridden in a derived class, gets the atomized string containing the same characters as the specified range of characters in the given array.","pos":[0,148]}]}],"pos":[12326,12475],"yaml":true},{"content":"For more information on atomized strings, see <xref:System.Xml.XmlNameTable>.","nodes":[{"pos":[0,77],"content":"For more information on atomized strings, see <xref:System.Xml.XmlNameTable>.","nodes":[{"content":"For more information on atomized strings, see <ph id=\"ph1\">&lt;xref:System.Xml.XmlNameTable&gt;</ph>.","pos":[0,77],"source":"For more information on atomized strings, see <xref:System.Xml.XmlNameTable>."}]}],"pos":[12486,12564],"yaml":true,"extradata":"MT"},{"content":"The character array containing the name to look up.","nodes":[{"pos":[0,51],"content":"The character array containing the name to look up.","nodes":[{"content":"The character array containing the name to look up.","pos":[0,51]}]}],"pos":[12731,12783],"yaml":true},{"content":"The zero-based index into the array specifying the first character of the name.","nodes":[{"pos":[0,79],"content":"The zero-based index into the array specifying the first character of the name.","nodes":[{"content":"The zero-based index into the array specifying the first character of the name.","pos":[0,79]}]}],"pos":[12844,12924],"yaml":true},{"content":"The number of characters in the name.","nodes":[{"pos":[0,37],"content":"The number of characters in the name.","nodes":[{"content":"The number of characters in the name.","pos":[0,37]}]}],"pos":[12985,13023],"yaml":true},{"content":"The atomized string or `null` if the string has not already been atomized. If <code>length</code> is zero, String.Empty is returned.","nodes":[{"pos":[0,132],"content":"The atomized string or `null` if the string has not already been atomized. If <code>length</code> is zero, String.Empty is returned.","nodes":[{"content":"The atomized string or <ph id=\"ph1\">`null`</ph> if the string has not already been atomized.","pos":[0,74],"source":"The atomized string or `null` if the string has not already been atomized."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">length</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero, String.Empty is returned.","pos":[75,132],"source":" If <code>length</code> is zero, String.Empty is returned."}]}],"pos":[13080,13213],"yaml":true},{"content":"0 > <code>offset</code>  \n  \n -or-  \n  \n <code>offset</code> >= <code>array</code>.Length  \n  \n -or-  \n  \n <code>length</code> > <code>array</code>.Length  \n  \n The above conditions do not cause an exception to be thrown if <code>length</code> =0.","nodes":[{"pos":[0,23],"content":"0 &gt; <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept>","source":"0 > <code>offset</code>"},{"pos":[30,34],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[41,89],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph><ph id=\"ph2\"> &gt;</ph><ph id=\"ph3\">= </ph><ph id=\"ph4\">&lt;code&gt;array&lt;/code&gt;</ph>.Length","source":"<code>offset</code> >= <code>array</code>.Length"},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,154],"content":"<ph id=\"ph1\">&lt;code&gt;length&lt;/code&gt;</ph><ph id=\"ph2\"> &gt; &lt;code&gt;array&lt;/code&gt;</ph>.Length","source":"<code>length</code> > <code>array</code>.Length"},{"pos":[161,247],"content":"The above conditions do not cause an exception to be thrown if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">length</ph><ept id=\"p1\">&lt;/code&gt;</ept> =0.","source":"The above conditions do not cause an exception to be thrown if <code>length</code> =0."}],"pos":[13376,13636],"yaml":true},{"content":"<code>length</code> < 0.","nodes":[{"pos":[0,24],"content":"<ph id=\"ph1\">&lt;code&gt;length&lt;/code&gt;</ph> &lt; 0.","source":"<code>length</code> < 0."}],"pos":[13750,13775],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Xml.XmlNameTable\n  commentId: T:System.Xml.XmlNameTable\n  id: XmlNameTable\n  children:\n  - System.Xml.XmlNameTable.#ctor\n  - System.Xml.XmlNameTable.Add(System.String)\n  - System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)\n  - System.Xml.XmlNameTable.Get(System.String)\n  - System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: XmlNameTable\n  nameWithType: XmlNameTable\n  fullName: System.Xml.XmlNameTable\n  type: Class\n  assemblies:\n  - System.Xml.ReaderWriter\n  - System.Xml\n  - netstandard\n  namespace: System.Xml\n  summary: Table of atomized string objects.\n  remarks: \"Several classes, such as <xref:System.Xml.XmlDocument> and <xref:System.Xml.XmlReader>, use the `XmlNameTable` class internally to store attribute and element names. When an element or attribute name occurs multiple times in an XML document, it is stored only once in the `XmlNameTable`.  \\n  \\n The names are stored as common language runtime (CLR) object types. This enables you to do object comparisons on these strings rather than a more expensive string comparison. These string objects are referred to as \\\"atomized strings\\\".  \\n  \\n `XmlNameTable` is implemented in the <xref:System.Xml.NameTable> class.\"\n  example:\n  - \"The following example compares two element names.  \\n  \\n [!code-csharp[NameTable_v2#1](~/samples/snippets/csharp/VS_Snippets_Data/NameTable_v2/CS/nametable.cs#1)]\\n [!code-vb[NameTable_v2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/NameTable_v2/VB/nametable.vb#1)]\"\n  syntax:\n    content: public abstract class XmlNameTable\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Xml.NameTable\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml/XmlNameTable.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.XmlNameTable.#ctor\n  commentId: M:System.Xml.XmlNameTable.#ctor\n  id: '#ctor'\n  parent: System.Xml.XmlNameTable\n  langs:\n  - csharp\n  name: XmlNameTable()\n  nameWithType: XmlNameTable.XmlNameTable()\n  fullName: XmlNameTable.XmlNameTable()\n  type: Constructor\n  assemblies:\n  - System.Xml.ReaderWriter\n  - System.Xml\n  - netstandard\n  namespace: System.Xml\n  summary: Initializes a new instance of the <xref href=\"System.Xml.XmlNameTable\"></xref> class.\n  syntax:\n    content: protected XmlNameTable ();\n    parameters: []\n  overload: System.Xml.XmlNameTable.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml/XmlNameTable.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.XmlNameTable.Add(System.String)\n  commentId: M:System.Xml.XmlNameTable.Add(System.String)\n  id: Add(System.String)\n  parent: System.Xml.XmlNameTable\n  langs:\n  - csharp\n  name: Add(String)\n  nameWithType: XmlNameTable.Add(String)\n  fullName: XmlNameTable.Add(String)\n  type: Method\n  assemblies:\n  - System.Xml.ReaderWriter\n  - System.Xml\n  - netstandard\n  namespace: System.Xml\n  summary: When overridden in a derived class, atomizes the specified string and adds it to the `XmlNameTable`.\n  remarks: For more information on atomized strings, see <xref:System.Xml.XmlNameTable>.\n  syntax:\n    content: public abstract string Add (string array);\n    parameters:\n    - id: array\n      type: System.String\n      description: The name to add.\n    return:\n      type: System.String\n      description: The new atomized string or the existing one if it already exists.\n  overload: System.Xml.XmlNameTable.Add*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml/XmlNameTable.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)\n  id: Add(System.Char[],System.Int32,System.Int32)\n  parent: System.Xml.XmlNameTable\n  langs:\n  - csharp\n  name: Add(Char[], Int32, Int32)\n  nameWithType: XmlNameTable.Add(Char[], Int32, Int32)\n  fullName: XmlNameTable.Add(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Xml.ReaderWriter\n  - System.Xml\n  - netstandard\n  namespace: System.Xml\n  summary: When overridden in a derived class, atomizes the specified string and adds it to the `XmlNameTable`.\n  remarks: For more information on atomized strings, see <xref:System.Xml.XmlNameTable>.\n  syntax:\n    content: public abstract string Add (char[] array, int offset, int length);\n    parameters:\n    - id: array\n      type: System.Char[]\n      description: The character array containing the name to add.\n    - id: offset\n      type: System.Int32\n      description: Zero-based index into the array specifying the first character of the name.\n    - id: length\n      type: System.Int32\n      description: The number of characters in the name.\n    return:\n      type: System.String\n      description: The new atomized string or the existing one if it already exists. If length is zero, String.Empty is returned.\n  overload: System.Xml.XmlNameTable.Add*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"0 > <code>offset</code>  \\n  \\n -or-  \\n  \\n <code>offset</code> >= <code>array</code>.Length  \\n  \\n -or-  \\n  \\n <code>length</code> > <code>array</code>.Length  \\n  \\n The above conditions do not cause an exception to be thrown if <code>length</code> =0.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>length</code> < 0.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml/XmlNameTable.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.XmlNameTable.Get(System.String)\n  commentId: M:System.Xml.XmlNameTable.Get(System.String)\n  id: Get(System.String)\n  parent: System.Xml.XmlNameTable\n  langs:\n  - csharp\n  name: Get(String)\n  nameWithType: XmlNameTable.Get(String)\n  fullName: XmlNameTable.Get(String)\n  type: Method\n  assemblies:\n  - System.Xml.ReaderWriter\n  - System.Xml\n  - netstandard\n  namespace: System.Xml\n  summary: When overridden in a derived class, gets the atomized string containing the same value as the specified string.\n  remarks: For more information on atomized strings, see <xref:System.Xml.XmlNameTable>.\n  syntax:\n    content: public abstract string Get (string array);\n    parameters:\n    - id: array\n      type: System.String\n      description: The name to look up.\n    return:\n      type: System.String\n      description: The atomized string or `null` if the string has not already been atomized.\n  overload: System.Xml.XmlNameTable.Get*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml/XmlNameTable.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)\n  id: Get(System.Char[],System.Int32,System.Int32)\n  parent: System.Xml.XmlNameTable\n  langs:\n  - csharp\n  name: Get(Char[], Int32, Int32)\n  nameWithType: XmlNameTable.Get(Char[], Int32, Int32)\n  fullName: XmlNameTable.Get(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Xml.ReaderWriter\n  - System.Xml\n  - netstandard\n  namespace: System.Xml\n  summary: When overridden in a derived class, gets the atomized string containing the same characters as the specified range of characters in the given array.\n  remarks: For more information on atomized strings, see <xref:System.Xml.XmlNameTable>.\n  syntax:\n    content: public abstract string Get (char[] array, int offset, int length);\n    parameters:\n    - id: array\n      type: System.Char[]\n      description: The character array containing the name to look up.\n    - id: offset\n      type: System.Int32\n      description: The zero-based index into the array specifying the first character of the name.\n    - id: length\n      type: System.Int32\n      description: The number of characters in the name.\n    return:\n      type: System.String\n      description: The atomized string or `null` if the string has not already been atomized. If <code>length</code> is zero, String.Empty is returned.\n  overload: System.Xml.XmlNameTable.Get*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"0 > <code>offset</code>  \\n  \\n -or-  \\n  \\n <code>offset</code> >= <code>array</code>.Length  \\n  \\n -or-  \\n  \\n <code>length</code> > <code>array</code>.Length  \\n  \\n The above conditions do not cause an exception to be thrown if <code>length</code> =0.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>length</code> < 0.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml/XmlNameTable.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.IndexOutOfRangeException\n  parent: System\n  isExternal: false\n  name: IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Xml.XmlNameTable.#ctor\n  parent: System.Xml.XmlNameTable\n  isExternal: false\n  name: XmlNameTable()\n  nameWithType: XmlNameTable.XmlNameTable()\n  fullName: XmlNameTable.XmlNameTable()\n- uid: System.Xml.XmlNameTable.Add(System.String)\n  parent: System.Xml.XmlNameTable\n  isExternal: false\n  name: Add(String)\n  nameWithType: XmlNameTable.Add(String)\n  fullName: XmlNameTable.Add(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)\n  parent: System.Xml.XmlNameTable\n  isExternal: false\n  name: Add(Char[], Int32, Int32)\n  nameWithType: XmlNameTable.Add(Char[], Int32, Int32)\n  fullName: XmlNameTable.Add(Char[], Int32, Int32)\n- uid: System.Char\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Char[]\n  parent: System\n  isExternal: false\n  name: Char[]\n  nameWithType: Char[]\n  fullName: System.Char[]\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Xml.XmlNameTable.Get(System.String)\n  parent: System.Xml.XmlNameTable\n  isExternal: false\n  name: Get(String)\n  nameWithType: XmlNameTable.Get(String)\n  fullName: XmlNameTable.Get(String)\n- uid: System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)\n  parent: System.Xml.XmlNameTable\n  isExternal: false\n  name: Get(Char[], Int32, Int32)\n  nameWithType: XmlNameTable.Get(Char[], Int32, Int32)\n  fullName: XmlNameTable.Get(Char[], Int32, Int32)\n- uid: System.Xml.XmlNameTable.Add*\n  parent: System.Xml.XmlNameTable\n  isExternal: false\n  name: Add\n  nameWithType: XmlNameTable.Add\n  fullName: XmlNameTable.Add\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml/XmlNameTable.xml\n- uid: System.Xml.XmlNameTable.Get*\n  parent: System.Xml.XmlNameTable\n  isExternal: false\n  name: Get\n  nameWithType: XmlNameTable.Get\n  fullName: XmlNameTable.Get\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml/XmlNameTable.xml\n- uid: System.Xml.XmlNameTable.#ctor*\n  parent: System.Xml.XmlNameTable\n  isExternal: false\n  name: XmlNameTable\n  nameWithType: XmlNameTable.XmlNameTable\n  fullName: XmlNameTable.XmlNameTable\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Xml/XmlNameTable.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}