{"nodes":[{"content":"Performs reflection on a module.","nodes":[{"pos":[0,32],"content":"Performs reflection on a module.","nodes":[{"content":"Performs reflection on a module.","pos":[0,32]}]}],"pos":[4589,4622],"yaml":true},{"content":"A module is a portable executable file, such as type.dll or application.exe, consisting of one or more classes and interfaces. There may be multiple namespaces contained in a single module, and a namespace may span multiple modules.  \n  \n One or more modules deployed as a unit compose an assembly. For information about creating an assembly with more than one module, see [Multifile Assemblies](~/docs/framework/app-domains/multifile-assemblies.md).  \n  \n Note that a .NET Framework module is not the same as a module in Visual Basic, which is used by a programmers to organize functions and subroutines in an application.","nodes":[{"pos":[0,232],"content":"A module is a portable executable file, such as type.dll or application.exe, consisting of one or more classes and interfaces. There may be multiple namespaces contained in a single module, and a namespace may span multiple modules.","nodes":[{"content":"A module is a portable executable file, such as type.dll or application.exe, consisting of one or more classes and interfaces. There may be multiple namespaces contained in a single module, and a namespace may span multiple modules.","pos":[0,232],"nodes":[{"content":"A module is a portable executable file, such as type.dll or application.exe, consisting of one or more classes and interfaces.","pos":[0,126]},{"content":"There may be multiple namespaces contained in a single module, and a namespace may span multiple modules.","pos":[127,232]}]}]},{"pos":[239,450],"content":"One or more modules deployed as a unit compose an assembly. For information about creating an assembly with more than one module, see [Multifile Assemblies](~/docs/framework/app-domains/multifile-assemblies.md).","nodes":[{"content":"One or more modules deployed as a unit compose an assembly.","pos":[0,59]},{"content":"For information about creating an assembly with more than one module, see <bpt id=\"p1\">[</bpt>Multifile Assemblies<ept id=\"p1\">](~/docs/framework/app-domains/multifile-assemblies.md)</ept>.","pos":[60,211],"source":" For information about creating an assembly with more than one module, see [Multifile Assemblies](~/docs/framework/app-domains/multifile-assemblies.md)."}]},{"pos":[457,623],"content":"Note that a .NET Framework module is not the same as a module in Visual Basic, which is used by a programmers to organize functions and subroutines in an application.","nodes":[{"content":"Note that a .NET Framework module is not the same as a module in Visual Basic, which is used by a programmers to organize functions and subroutines in an application.","pos":[0,166]}]}],"pos":[4633,5263],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Reflection.Module\"></xref> class.","nodes":[{"pos":[0,86],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Module\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Reflection.Module\"></xref> class."}],"pos":[8785,8872],"yaml":true},{"content":"This constructor is invoked by derived classes during the construction of <xref:System.Reflection.Module> objects.","nodes":[{"pos":[0,114],"content":"This constructor is invoked by derived classes during the construction of <xref:System.Reflection.Module> objects.","nodes":[{"content":"This constructor is invoked by derived classes during the construction of <ph id=\"ph1\">&lt;xref:System.Reflection.Module&gt;</ph> objects.","pos":[0,114],"source":"This constructor is invoked by derived classes during the construction of <xref:System.Reflection.Module> objects."}]}],"pos":[8883,8998],"yaml":true,"extradata":"MT"},{"content":"Gets the appropriate <xref href=\"System.Reflection.Assembly\"></xref> for this instance of <xref href=\"System.Reflection.Module\"></xref>.","nodes":[{"pos":[0,136],"content":"Gets the appropriate <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Assembly\"&gt;&lt;/xref&gt;</ph> for this instance of <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Module\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the appropriate <xref href=\"System.Reflection.Assembly\"></xref> for this instance of <xref href=\"System.Reflection.Module\"></xref>."}],"pos":[10223,10360],"yaml":true},{"content":"An `Assembly` object.","nodes":[{"pos":[0,21],"content":"An <ph id=\"ph1\">`Assembly`</ph> object.","source":"An `Assembly` object."}],"pos":[11150,11172],"yaml":true},{"content":"Gets a collection that contains this module's custom attributes.","nodes":[{"pos":[0,64],"content":"Gets a collection that contains this module's custom attributes.","nodes":[{"content":"Gets a collection that contains this module's custom attributes.","pos":[0,64]}]}],"pos":[12729,12794],"yaml":true},{"content":"A collection that contains this module's custom attributes.","nodes":[{"pos":[0,59],"content":"A collection that contains this module's custom attributes.","nodes":[{"content":"A collection that contains this module's custom attributes.","pos":[0,59]}]}],"pos":[13057,13117],"yaml":true},{"content":"Determines whether this module and the specified object are equal.","nodes":[{"pos":[0,66],"content":"Determines whether this module and the specified object are equal.","nodes":[{"content":"Determines whether this module and the specified object are equal.","pos":[0,66]}]}],"pos":[14689,14756],"yaml":true},{"content":"The object to compare with this instance.","nodes":[{"pos":[0,41],"content":"The object to compare with this instance.","nodes":[{"content":"The object to compare with this instance.","pos":[0,41]}]}],"pos":[14892,14934],"yaml":true},{"content":"`true` if <code>o</code> is equal to this instance; otherwise, `false`.","nodes":[{"pos":[0,71],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">o</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to this instance; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>o</code> is equal to this instance; otherwise, `false`."}],"pos":[14992,15066],"yaml":true},{"content":"A `TypeFilter` object that filters the list of types defined in this module based upon the name. This field is case-sensitive and read-only.","nodes":[{"pos":[0,140],"content":"A `TypeFilter` object that filters the list of types defined in this module based upon the name. This field is case-sensitive and read-only.","nodes":[{"content":"A <ph id=\"ph1\">`TypeFilter`</ph> object that filters the list of types defined in this module based upon the name.","pos":[0,96],"source":"A `TypeFilter` object that filters the list of types defined in this module based upon the name."},{"content":"This field is case-sensitive and read-only.","pos":[97,140]}]}],"pos":[16606,16747],"yaml":true},{"content":"The filter supports a trailing \"*\" wildcard.","nodes":[{"pos":[0,44],"content":"The filter supports a trailing \"*\" wildcard.","nodes":[{"content":"The filter supports a trailing \"*\" wildcard.","pos":[0,44]}]}],"pos":[16758,16803],"yaml":true,"extradata":"MT"},{"content":"A `TypeFilter` object that filters the list of types defined in this module based upon the name. This field is case-insensitive and read-only.","nodes":[{"pos":[0,142],"content":"A `TypeFilter` object that filters the list of types defined in this module based upon the name. This field is case-insensitive and read-only.","nodes":[{"content":"A <ph id=\"ph1\">`TypeFilter`</ph> object that filters the list of types defined in this module based upon the name.","pos":[0,96],"source":"A `TypeFilter` object that filters the list of types defined in this module based upon the name."},{"content":"This field is case-insensitive and read-only.","pos":[97,142]}]}],"pos":[18977,19120],"yaml":true},{"content":"The filter supports a trailing \"*\" wildcard.","nodes":[{"pos":[0,44],"content":"The filter supports a trailing \"*\" wildcard.","nodes":[{"content":"The filter supports a trailing \"*\" wildcard.","pos":[0,44]}]}],"pos":[19131,19176],"yaml":true,"extradata":"MT"},{"content":"Returns an array of classes accepted by the given filter and filter criteria.","nodes":[{"pos":[0,77],"content":"Returns an array of classes accepted by the given filter and filter criteria.","nodes":[{"content":"Returns an array of classes accepted by the given filter and filter criteria.","pos":[0,77]}]}],"pos":[21542,21620],"yaml":true},{"content":"<xref:System.Reflection.ReflectionTypeLoadException> is a special class load exception. The `ReflectionTypeLoadException.Types` property contains the array of classes that were defined in the module and were loaded. This array may contain some null values. The `ReflectionTypeLoadException.LoaderExceptions` property is an array of exceptions that represent the exceptions that were thrown by the class loader. The holes in the class array line up with the exceptions.  \n  \n The delegate given by `filter` is called for each class in the module, passing along the `Type` object representing the class as well as the given `filterCriteria`. If `filter` returns a particular class, that class will be included in the returned array. If `filter` returns `null`, all classes are returned and `filterCriteria` is ignored.  \n  \n `FindTypes` cannot be used to look up parameterized types such as arrays.","nodes":[{"pos":[0,468],"content":"<xref:System.Reflection.ReflectionTypeLoadException> is a special class load exception. The `ReflectionTypeLoadException.Types` property contains the array of classes that were defined in the module and were loaded. This array may contain some null values. The `ReflectionTypeLoadException.LoaderExceptions` property is an array of exceptions that represent the exceptions that were thrown by the class loader. The holes in the class array line up with the exceptions.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.ReflectionTypeLoadException&gt;</ph> is a special class load exception.","pos":[0,87],"source":"<xref:System.Reflection.ReflectionTypeLoadException> is a special class load exception."},{"content":"The <ph id=\"ph1\">`ReflectionTypeLoadException.Types`</ph> property contains the array of classes that were defined in the module and were loaded.","pos":[88,215],"source":" The `ReflectionTypeLoadException.Types` property contains the array of classes that were defined in the module and were loaded."},{"content":"This array may contain some null values.","pos":[216,256]},{"content":"The <ph id=\"ph1\">`ReflectionTypeLoadException.LoaderExceptions`</ph> property is an array of exceptions that represent the exceptions that were thrown by the class loader.","pos":[257,410],"source":" The `ReflectionTypeLoadException.LoaderExceptions` property is an array of exceptions that represent the exceptions that were thrown by the class loader."},{"content":"The holes in the class array line up with the exceptions.","pos":[411,468]}]},{"pos":[475,816],"content":"The delegate given by `filter` is called for each class in the module, passing along the `Type` object representing the class as well as the given `filterCriteria`. If `filter` returns a particular class, that class will be included in the returned array. If `filter` returns `null`, all classes are returned and `filterCriteria` is ignored.","nodes":[{"content":"The delegate given by <ph id=\"ph1\">`filter`</ph> is called for each class in the module, passing along the <ph id=\"ph2\">`Type`</ph> object representing the class as well as the given <ph id=\"ph3\">`filterCriteria`</ph>.","pos":[0,164],"source":"The delegate given by `filter` is called for each class in the module, passing along the `Type` object representing the class as well as the given `filterCriteria`."},{"content":"If <ph id=\"ph1\">`filter`</ph> returns a particular class, that class will be included in the returned array.","pos":[165,255],"source":" If `filter` returns a particular class, that class will be included in the returned array."},{"content":"If <ph id=\"ph1\">`filter`</ph> returns <ph id=\"ph2\">`null`</ph>, all classes are returned and <ph id=\"ph3\">`filterCriteria`</ph> is ignored.","pos":[256,341],"source":" If `filter` returns `null`, all classes are returned and `filterCriteria` is ignored."}]},{"pos":[823,896],"content":"<ph id=\"ph1\">`FindTypes`</ph> cannot be used to look up parameterized types such as arrays.","source":"`FindTypes` cannot be used to look up parameterized types such as arrays."}],"pos":[21631,22534],"yaml":true,"extradata":"MT"},{"content":"The delegate used to filter the classes.","nodes":[{"pos":[0,40],"content":"The delegate used to filter the classes.","nodes":[{"content":"The delegate used to filter the classes.","pos":[0,40]}]}],"pos":[23366,23407],"yaml":true},{"content":"An Object used to filter the classes.","nodes":[{"pos":[0,37],"content":"An Object used to filter the classes.","nodes":[{"content":"An Object used to filter the classes.","pos":[0,37]}]}],"pos":[23477,23515],"yaml":true},{"content":"An array of type `Type` containing classes that were accepted by the filter.","nodes":[{"pos":[0,76],"content":"An array of type <ph id=\"ph1\">`Type`</ph> containing classes that were accepted by the filter.","source":"An array of type `Type` containing classes that were accepted by the filter."}],"pos":[23572,23649],"yaml":true},{"content":"One or more classes in a module could not be loaded.","nodes":[{"pos":[0,52],"content":"One or more classes in a module could not be loaded.","nodes":[{"content":"One or more classes in a module could not be loaded.","pos":[0,52]}]}],"pos":[23847,23900],"yaml":true},{"content":"Gets a string representing the fully qualified name and path to this module.","nodes":[{"pos":[0,76],"content":"Gets a string representing the fully qualified name and path to this module.","nodes":[{"content":"Gets a string representing the fully qualified name and path to this module.","pos":[0,76]}]}],"pos":[25205,25282],"yaml":true},{"content":"To get the name without the path, use <xref:System.Reflection.Module.Name%2A>.  \n  \n If the assembly for this module was loaded from a byte array then the `FullyQualifiedName` for the module will be: \\<Unknown>.  \n  \n> [!NOTE]\n>  The case of module name is platform-dependent.","nodes":[{"pos":[0,78],"content":"To get the name without the path, use <xref:System.Reflection.Module.Name%2A>.","nodes":[{"content":"To get the name without the path, use <ph id=\"ph1\">&lt;xref:System.Reflection.Module.Name%2A&gt;</ph>.","pos":[0,78],"source":"To get the name without the path, use <xref:System.Reflection.Module.Name%2A>."}]},{"pos":[85,211],"content":"If the assembly for this module was loaded from a byte array then the <ph id=\"ph1\">`FullyQualifiedName`</ph> for the module will be: <ph id=\"ph2\">\\&lt;</ph>Unknown&gt;.","source":"If the assembly for this module was loaded from a byte array then the `FullyQualifiedName` for the module will be: \\<Unknown>."},{"pos":[219,276],"content":"[!NOTE]\n The case of module name is platform-dependent.","leadings":["","> "],"nodes":[{"content":"The case of module name is platform-dependent.","pos":[9,55]}]}],"pos":[25293,25578],"yaml":true,"extradata":"MT"},{"content":"The fully qualified module name.","nodes":[{"pos":[0,32],"content":"The fully qualified module name.","nodes":[{"content":"The fully qualified module name.","pos":[0,32]}]}],"pos":[26328,26361],"yaml":true},{"content":"The caller does not have the required permissions.","nodes":[{"pos":[0,50],"content":"The caller does not have the required permissions.","nodes":[{"content":"The caller does not have the required permissions.","pos":[0,50]}]}],"pos":[26544,26595],"yaml":true},{"content":"Returns all custom attributes.","nodes":[{"pos":[0,30],"content":"Returns all custom attributes.","nodes":[{"content":"Returns all custom attributes.","pos":[0,30]}]}],"pos":[28157,28188],"yaml":true},{"content":"This argument is ignored for objects of this type.","nodes":[{"pos":[0,50],"content":"This argument is ignored for objects of this type.","nodes":[{"content":"This argument is ignored for objects of this type.","pos":[0,50]}]}],"pos":[29078,29129],"yaml":true},{"content":"An array of type `Object` containing all custom attributes.","nodes":[{"pos":[0,59],"content":"An array of type <ph id=\"ph1\">`Object`</ph> containing all custom attributes.","source":"An array of type `Object` containing all custom attributes."}],"pos":[29188,29248],"yaml":true},{"content":"Gets custom attributes of the specified type.","nodes":[{"pos":[0,45],"content":"Gets custom attributes of the specified type.","nodes":[{"content":"Gets custom attributes of the specified type.","pos":[0,45]}]}],"pos":[30595,30641],"yaml":true},{"content":"The type of attribute to get.","nodes":[{"pos":[0,29],"content":"The type of attribute to get.","nodes":[{"content":"The type of attribute to get.","pos":[0,29]}]}],"pos":[31576,31606],"yaml":true},{"content":"This argument is ignored for objects of this type.","nodes":[{"pos":[0,50],"content":"This argument is ignored for objects of this type.","nodes":[{"content":"This argument is ignored for objects of this type.","pos":[0,50]}]}],"pos":[31670,31721],"yaml":true},{"content":"An array of type `Object` containing all custom attributes of the specified type.","nodes":[{"pos":[0,81],"content":"An array of type <ph id=\"ph1\">`Object`</ph> containing all custom attributes of the specified type.","source":"An array of type `Object` containing all custom attributes of the specified type."}],"pos":[31780,31862],"yaml":true},{"content":"<code>attributeType</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;attributeType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>attributeType</code> is `null`."}],"pos":[32036,32074],"yaml":true},{"content":"<code>attributeType</code> is not a <xref href=\"System.Type\"></xref> object supplied by the runtime. For example, <code>attributeType</code> is a <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> object.","nodes":[{"pos":[0,209],"content":"<code>attributeType</code> is not a <xref href=\"System.Type\"></xref> object supplied by the runtime. For example, <code>attributeType</code> is a <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> object.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;attributeType&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object supplied by the runtime.","pos":[0,100],"source":"<code>attributeType</code> is not a <xref href=\"System.Type\"></xref> object supplied by the runtime."},{"content":"For example, <ph id=\"ph1\">&lt;code&gt;attributeType&lt;/code&gt;</ph> is a <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder\"&gt;&lt;/xref&gt;</ph> object.","pos":[101,209],"source":" For example, <code>attributeType</code> is a <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> object."}]}],"pos":[32168,32378],"yaml":true},{"content":"Returns a list of <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects for the current module, which can be used in the reflection-only context.","nodes":[{"pos":[0,158],"content":"Returns a list of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.CustomAttributeData\"&gt;&lt;/xref&gt;</ph> objects for the current module, which can be used in the reflection-only context.","source":"Returns a list of <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects for the current module, which can be used in the reflection-only context."}],"pos":[33551,33710],"yaml":true},{"content":"Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context. Methods such as <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName> and <xref:System.Reflection.Module.GetCustomAttributes%2A?displayProperty=fullName> cannot be used in such cases, because they create instances of the attributes. Code in the reflection-only context cannot be executed. For more information and example code, see the <xref:System.Reflection.CustomAttributeData> class.","nodes":[{"pos":[0,611],"content":"Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context. Methods such as <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName> and <xref:System.Reflection.Module.GetCustomAttributes%2A?displayProperty=fullName> cannot be used in such cases, because they create instances of the attributes. Code in the reflection-only context cannot be executed. For more information and example code, see the <xref:System.Reflection.CustomAttributeData> class.","nodes":[{"content":"Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context. Methods such as <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName> and <xref:System.Reflection.Module.GetCustomAttributes%2A?displayProperty=fullName> cannot be used in such cases, because they create instances of the attributes. Code in the reflection-only context cannot be executed. For more information and example code, see the <xref:System.Reflection.CustomAttributeData> class.","pos":[0,611],"nodes":[{"content":"Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context.","pos":[0,205]},{"content":"Methods such as <ph id=\"ph1\">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.Module.GetCustomAttributes%2A?displayProperty=fullName&gt;</ph> cannot be used in such cases, because they create instances of the attributes.","pos":[206,456],"source":" Methods such as <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName> and <xref:System.Reflection.Module.GetCustomAttributes%2A?displayProperty=fullName> cannot be used in such cases, because they create instances of the attributes."},{"content":"Code in the reflection-only context cannot be executed.","pos":[457,512]},{"content":"For more information and example code, see the <ph id=\"ph1\">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class.","pos":[513,611],"source":" For more information and example code, see the <xref:System.Reflection.CustomAttributeData> class."}]}]}],"pos":[33721,34333],"yaml":true,"extradata":"MT"},{"content":"A generic list of <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects representing data about the attributes that have been applied to the current module.","nodes":[{"pos":[0,169],"content":"A generic list of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.CustomAttributeData\"&gt;&lt;/xref&gt;</ph> objects representing data about the attributes that have been applied to the current module.","source":"A generic list of <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects representing data about the attributes that have been applied to the current module."}],"pos":[34605,34775],"yaml":true},{"content":"Returns a field having the specified name.","nodes":[{"pos":[0,42],"content":"Returns a field having the specified name.","nodes":[{"content":"Returns a field having the specified name.","pos":[0,42]}]}],"pos":[36022,36065],"yaml":true},{"content":"The field name.","nodes":[{"pos":[0,15],"content":"The field name.","nodes":[{"content":"The field name.","pos":[0,15]}]}],"pos":[36223,36239],"yaml":true},{"content":"A `FieldInfo` object having the specified name, or `null` if the field does not exist.","nodes":[{"pos":[0,86],"content":"A <ph id=\"ph1\">`FieldInfo`</ph> object having the specified name, or <ph id=\"ph2\">`null`</ph> if the field does not exist.","source":"A `FieldInfo` object having the specified name, or `null` if the field does not exist."}],"pos":[36310,36397],"yaml":true},{"content":"The <code>name</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>name</code> parameter is `null`."}],"pos":[36560,36603],"yaml":true},{"content":"Returns a field having the specified name and binding attributes.","nodes":[{"pos":[0,65],"content":"Returns a field having the specified name and binding attributes.","nodes":[{"content":"Returns a field having the specified name and binding attributes.","pos":[0,65]}]}],"pos":[38050,38116],"yaml":true},{"content":"The field name.","nodes":[{"pos":[0,15],"content":"The field name.","nodes":[{"content":"The field name.","pos":[0,15]}]}],"pos":[38326,38342],"yaml":true},{"content":"One of the `BindingFlags` bit flags used to control the search.","nodes":[{"pos":[0,63],"content":"One of the <ph id=\"ph1\">`BindingFlags`</ph> bit flags used to control the search.","source":"One of the `BindingFlags` bit flags used to control the search."}],"pos":[38426,38490],"yaml":true},{"content":"A `FieldInfo` object having the specified name and binding attributes, or `null` if the field does not exist.","nodes":[{"pos":[0,109],"content":"A <ph id=\"ph1\">`FieldInfo`</ph> object having the specified name and binding attributes, or <ph id=\"ph2\">`null`</ph> if the field does not exist.","source":"A `FieldInfo` object having the specified name and binding attributes, or `null` if the field does not exist."}],"pos":[38561,38671],"yaml":true},{"content":"The <code>name</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>name</code> parameter is `null`."}],"pos":[38834,38877],"yaml":true},{"content":"Returns the global fields defined on the module that match the specified binding flags.","nodes":[{"pos":[0,87],"content":"Returns the global fields defined on the module that match the specified binding flags.","nodes":[{"content":"Returns the global fields defined on the module that match the specified binding flags.","pos":[0,87]}]}],"pos":[40264,40352],"yaml":true},{"content":"The <xref:System.Reflection.Module.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.","nodes":[{"pos":[0,242],"content":"The <xref:System.Reflection.Module.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.","nodes":[{"content":"The <xref:System.Reflection.Module.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.","pos":[0,242],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Module.GetFields%2A&gt;</ph> method does not return fields in a particular order, such as alphabetical or declaration order.","pos":[0,144],"source":"The <xref:System.Reflection.Module.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order."},{"content":"Your code must not depend on the order in which fields are returned, because that order can vary.","pos":[145,242]}]}]}],"pos":[40363,40606],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values that limit the search.","nodes":[{"pos":[0,106],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> values that limit the search.","source":"A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values that limit the search."}],"pos":[40832,40939],"yaml":true},{"content":"An array of type <xref href=\"System.Reflection.FieldInfo\"></xref> representing the global fields defined on the module that match the specified binding flags; if no global fields match the binding flags, an empty array is returned.","nodes":[{"pos":[0,231],"content":"An array of type <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldInfo\"&gt;&lt;/xref&gt;</ph> representing the global fields defined on the module that match the specified binding flags; if no global fields match the binding flags, an empty array is returned.","source":"An array of type <xref href=\"System.Reflection.FieldInfo\"></xref> representing the global fields defined on the module that match the specified binding flags; if no global fields match the binding flags, an empty array is returned."}],"pos":[41012,41244],"yaml":true},{"content":"Returns the global fields defined on the module.","nodes":[{"pos":[0,48],"content":"Returns the global fields defined on the module.","nodes":[{"content":"Returns the global fields defined on the module.","pos":[0,48]}]}],"pos":[42564,42613],"yaml":true},{"content":"The <xref:System.Reflection.Module.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.","nodes":[{"pos":[0,242],"content":"The <xref:System.Reflection.Module.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.","nodes":[{"content":"The <xref:System.Reflection.Module.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.","pos":[0,242],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Module.GetFields%2A&gt;</ph> method does not return fields in a particular order, such as alphabetical or declaration order.","pos":[0,144],"source":"The <xref:System.Reflection.Module.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order."},{"content":"Your code must not depend on the order in which fields are returned, because that order can vary.","pos":[145,242]}]}]}],"pos":[42624,42867],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.Reflection.FieldInfo\"></xref> objects representing the global fields defined on the module; if there are no global fields, an empty array is returned.","nodes":[{"pos":[0,181],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldInfo\"&gt;&lt;/xref&gt;</ph> objects representing the global fields defined on the module; if there are no global fields, an empty array is returned.","source":"An array of <xref href=\"System.Reflection.FieldInfo\"></xref> objects representing the global fields defined on the module; if there are no global fields, an empty array is returned."}],"pos":[43033,43215],"yaml":true},{"content":"Returns the hash code for this instance.","nodes":[{"pos":[0,40],"content":"Returns the hash code for this instance.","nodes":[{"content":"Returns the hash code for this instance.","pos":[0,40]}]}],"pos":[44547,44588],"yaml":true},{"content":"A 32-bit signed integer hash code.","nodes":[{"pos":[0,34],"content":"A 32-bit signed integer hash code.","nodes":[{"content":"A 32-bit signed integer hash code.","pos":[0,34]}]}],"pos":[44722,44757],"yaml":true},{"content":"Returns a method having the specified name.","nodes":[{"pos":[0,43],"content":"Returns a method having the specified name.","nodes":[{"content":"Returns a method having the specified name.","pos":[0,43]}]}],"pos":[46342,46386],"yaml":true},{"content":"The method name.","nodes":[{"pos":[0,16],"content":"The method name.","nodes":[{"content":"The method name.","pos":[0,16]}]}],"pos":[46546,46563],"yaml":true},{"content":"A `MethodInfo` object having the specified name, or `null` if the method does not exist.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">`MethodInfo`</ph> object having the specified name, or <ph id=\"ph2\">`null`</ph> if the method does not exist.","source":"A `MethodInfo` object having the specified name, or `null` if the method does not exist."}],"pos":[46635,46724],"yaml":true},{"content":"<code>name</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."}],"pos":[46888,46917],"yaml":true},{"content":"Returns a method having the specified name and parameter types.","nodes":[{"pos":[0,63],"content":"Returns a method having the specified name and parameter types.","nodes":[{"content":"Returns a method having the specified name and parameter types.","pos":[0,63]}]}],"pos":[48301,48365],"yaml":true},{"content":"The method name.","nodes":[{"pos":[0,16],"content":"The method name.","nodes":[{"content":"The method name.","pos":[0,16]}]}],"pos":[48539,48556],"yaml":true},{"content":"The parameter types to search for.","nodes":[{"pos":[0,34],"content":"The parameter types to search for.","nodes":[{"content":"The parameter types to search for.","pos":[0,34]}]}],"pos":[48617,48652],"yaml":true},{"content":"A `MethodInfo` object in accordance with the specified criteria, or `null` if the method does not exist.","nodes":[{"pos":[0,104],"content":"A <ph id=\"ph1\">`MethodInfo`</ph> object in accordance with the specified criteria, or <ph id=\"ph2\">`null`</ph> if the method does not exist.","source":"A `MethodInfo` object in accordance with the specified criteria, or `null` if the method does not exist."}],"pos":[48724,48829],"yaml":true},{"content":"<code>name</code> is `null`, <code>types</code> is `null`, or <code>types</code> (i) is `null`.","nodes":[{"pos":[0,95],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, <ph id=\"ph3\">&lt;code&gt;types&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>, or <ph id=\"ph5\">&lt;code&gt;types&lt;/code&gt;</ph> (i) is <ph id=\"ph6\">`null`</ph>.","source":"<code>name</code> is `null`, <code>types</code> is `null`, or <code>types</code> (i) is `null`."}],"pos":[48993,49089],"yaml":true},{"content":"Returns a method having the specified name, binding information, calling convention, and parameter types and modifiers.","nodes":[{"pos":[0,119],"content":"Returns a method having the specified name, binding information, calling convention, and parameter types and modifiers.","nodes":[{"content":"Returns a method having the specified name, binding information, calling convention, and parameter types and modifiers.","pos":[0,119]}]}],"pos":[51033,51153],"yaml":true},{"content":"The method name.","nodes":[{"pos":[0,16],"content":"The method name.","nodes":[{"content":"The method name.","pos":[0,16]}]}],"pos":[51506,51523],"yaml":true},{"content":"One of the `BindingFlags` bit flags used to control the search.","nodes":[{"pos":[0,63],"content":"One of the <ph id=\"ph1\">`BindingFlags`</ph> bit flags used to control the search.","source":"One of the `BindingFlags` bit flags used to control the search."}],"pos":[51607,51671],"yaml":true},{"content":"An object that implements `Binder`, containing properties related to this method.","nodes":[{"pos":[0,81],"content":"An object that implements <ph id=\"ph1\">`Binder`</ph>, containing properties related to this method.","source":"An object that implements `Binder`, containing properties related to this method."}],"pos":[51744,51826],"yaml":true},{"content":"The calling convention for the method.","nodes":[{"pos":[0,38],"content":"The calling convention for the method.","nodes":[{"content":"The calling convention for the method.","pos":[0,38]}]}],"pos":[51919,51958],"yaml":true},{"content":"The parameter types to search for.","nodes":[{"pos":[0,34],"content":"The parameter types to search for.","nodes":[{"content":"The parameter types to search for.","pos":[0,34]}]}],"pos":[52019,52054],"yaml":true},{"content":"An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.","nodes":[{"pos":[0,122],"content":"An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.","nodes":[{"content":"An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.","pos":[0,122]}]}],"pos":[52143,52266],"yaml":true},{"content":"A `MethodInfo` object in accordance with the specified criteria, or `null` if the method does not exist.","nodes":[{"pos":[0,104],"content":"A <ph id=\"ph1\">`MethodInfo`</ph> object in accordance with the specified criteria, or <ph id=\"ph2\">`null`</ph> if the method does not exist.","source":"A `MethodInfo` object in accordance with the specified criteria, or `null` if the method does not exist."}],"pos":[52338,52443],"yaml":true},{"content":"<code>name</code> is `null`, <code>types</code> is `null`, or <code>types</code> (i) is `null`.","nodes":[{"pos":[0,95],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, <ph id=\"ph3\">&lt;code&gt;types&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>, or <ph id=\"ph5\">&lt;code&gt;types&lt;/code&gt;</ph> (i) is <ph id=\"ph6\">`null`</ph>.","source":"<code>name</code> is `null`, <code>types</code> is `null`, or <code>types</code> (i) is `null`."}],"pos":[52607,52703],"yaml":true},{"content":"Returns the method implementation in accordance with the specified criteria.","nodes":[{"pos":[0,76],"content":"Returns the method implementation in accordance with the specified criteria.","nodes":[{"content":"Returns the method implementation in accordance with the specified criteria.","pos":[0,76]}]}],"pos":[54527,54604],"yaml":true},{"content":"The method name.","nodes":[{"pos":[0,16],"content":"The method name.","nodes":[{"content":"The method name.","pos":[0,16]}]}],"pos":[54972,54989],"yaml":true},{"content":"One of the `BindingFlags` bit flags used to control the search.","nodes":[{"pos":[0,63],"content":"One of the <ph id=\"ph1\">`BindingFlags`</ph> bit flags used to control the search.","source":"One of the `BindingFlags` bit flags used to control the search."}],"pos":[55073,55137],"yaml":true},{"content":"An object that implements `Binder`, containing properties related to this method.","nodes":[{"pos":[0,81],"content":"An object that implements <ph id=\"ph1\">`Binder`</ph>, containing properties related to this method.","source":"An object that implements `Binder`, containing properties related to this method."}],"pos":[55210,55292],"yaml":true},{"content":"The calling convention for the method.","nodes":[{"pos":[0,38],"content":"The calling convention for the method.","nodes":[{"content":"The calling convention for the method.","pos":[0,38]}]}],"pos":[55385,55424],"yaml":true},{"content":"The parameter types to search for.","nodes":[{"pos":[0,34],"content":"The parameter types to search for.","nodes":[{"content":"The parameter types to search for.","pos":[0,34]}]}],"pos":[55485,55520],"yaml":true},{"content":"An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.","nodes":[{"pos":[0,122],"content":"An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.","nodes":[{"content":"An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.","pos":[0,122]}]}],"pos":[55609,55732],"yaml":true},{"content":"A `MethodInfo` object containing implementation information as specified, or `null` if the method does not exist.","nodes":[{"pos":[0,113],"content":"A <ph id=\"ph1\">`MethodInfo`</ph> object containing implementation information as specified, or <ph id=\"ph2\">`null`</ph> if the method does not exist.","source":"A `MethodInfo` object containing implementation information as specified, or `null` if the method does not exist."}],"pos":[55804,55918],"yaml":true},{"content":"<code>types</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;types&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>types</code> is `null`."}],"pos":[56112,56142],"yaml":true},{"content":"Returns the global methods defined on the module.","nodes":[{"pos":[0,49],"content":"Returns the global methods defined on the module.","nodes":[{"content":"Returns the global methods defined on the module.","pos":[0,49]}]}],"pos":[57259,57309],"yaml":true},{"content":"An array of <xref href=\"System.Reflection.MethodInfo\"></xref> objects representing all the global methods defined on the module; if there are no global methods, an empty array is returned.","nodes":[{"pos":[0,188],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> objects representing all the global methods defined on the module; if there are no global methods, an empty array is returned.","source":"An array of <xref href=\"System.Reflection.MethodInfo\"></xref> objects representing all the global methods defined on the module; if there are no global methods, an empty array is returned."}],"pos":[57478,57667],"yaml":true},{"content":"Returns the global methods defined on the module that match the specified binding flags.","nodes":[{"pos":[0,88],"content":"Returns the global methods defined on the module that match the specified binding flags.","nodes":[{"content":"Returns the global methods defined on the module that match the specified binding flags.","pos":[0,88]}]}],"pos":[59126,59215],"yaml":true},{"content":"A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values that limit the search.","nodes":[{"pos":[0,106],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> values that limit the search.","source":"A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values that limit the search."}],"pos":[59443,59550],"yaml":true},{"content":"An array of type <xref href=\"System.Reflection.MethodInfo\"></xref> representing the global methods defined on the module that match the specified binding flags; if no global methods match the binding flags, an empty array is returned.","nodes":[{"pos":[0,234],"content":"An array of type <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> representing the global methods defined on the module that match the specified binding flags; if no global methods match the binding flags, an empty array is returned.","source":"An array of type <xref href=\"System.Reflection.MethodInfo\"></xref> representing the global methods defined on the module that match the specified binding flags; if no global methods match the binding flags, an empty array is returned."}],"pos":[59624,59859],"yaml":true},{"content":"Provides an <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> implementation for serialized objects.","nodes":[{"pos":[0,114],"content":"Provides an <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.ISerializable\"&gt;&lt;/xref&gt;</ph> implementation for serialized objects.","source":"Provides an <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> implementation for serialized objects."}],"pos":[61569,61684],"yaml":true},{"content":"The information and data needed to serialize or deserialize an object.","nodes":[{"pos":[0,70],"content":"The information and data needed to serialize or deserialize an object.","nodes":[{"content":"The information and data needed to serialize or deserialize an object.","pos":[0,70]}]}],"pos":[61960,62031],"yaml":true},{"content":"The context for the serialization.","nodes":[{"pos":[0,34],"content":"The context for the serialization.","nodes":[{"content":"The context for the serialization.","pos":[0,34]}]}],"pos":[62126,62161],"yaml":true},{"content":"<code>info</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;info&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>info</code> is `null`."}],"pos":[62329,62358],"yaml":true},{"content":"Gets a pair of values indicating the nature of the code in a module and the platform targeted by the module.","nodes":[{"pos":[0,108],"content":"Gets a pair of values indicating the nature of the code in a module and the platform targeted by the module.","nodes":[{"content":"Gets a pair of values indicating the nature of the code in a module and the platform targeted by the module.","pos":[0,108]}]}],"pos":[63810,63919],"yaml":true},{"content":"When this method returns, a combination of the <xref href=\"System.Reflection.PortableExecutableKinds\"></xref> values indicating the nature of the code in the module.","nodes":[{"pos":[0,165],"content":"When this method returns, a combination of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.PortableExecutableKinds\"&gt;&lt;/xref&gt;</ph> values indicating the nature of the code in the module.","source":"When this method returns, a combination of the <xref href=\"System.Reflection.PortableExecutableKinds\"></xref> values indicating the nature of the code in the module."}],"pos":[64182,64348],"yaml":true},{"content":"When this method returns, one of the <xref href=\"System.Reflection.ImageFileMachine\"></xref> values indicating the platform targeted by the module.","nodes":[{"pos":[0,147],"content":"When this method returns, one of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ImageFileMachine\"&gt;&lt;/xref&gt;</ph> values indicating the platform targeted by the module.","source":"When this method returns, one of the <xref href=\"System.Reflection.ImageFileMachine\"></xref> values indicating the platform targeted by the module."}],"pos":[64432,64580],"yaml":true},{"content":"Returns an `X509Certificate` object corresponding to the certificate included in the Authenticode signature of the assembly which this module belongs to. If the assembly has not been Authenticode signed, `null` is returned.","nodes":[{"pos":[0,223],"content":"Returns an `X509Certificate` object corresponding to the certificate included in the Authenticode signature of the assembly which this module belongs to. If the assembly has not been Authenticode signed, `null` is returned.","nodes":[{"content":"Returns an <ph id=\"ph1\">`X509Certificate`</ph> object corresponding to the certificate included in the Authenticode signature of the assembly which this module belongs to.","pos":[0,153],"source":"Returns an `X509Certificate` object corresponding to the certificate included in the Authenticode signature of the assembly which this module belongs to."},{"content":"If the assembly has not been Authenticode signed, <ph id=\"ph1\">`null`</ph> is returned.","pos":[154,223],"source":" If the assembly has not been Authenticode signed, `null` is returned."}]}],"pos":[65765,65989],"yaml":true},{"content":"An `X509Certificate` object, or `null` if the assembly to which this module belongs has not been Authenticode signed.","nodes":[{"pos":[0,117],"content":"An <ph id=\"ph1\">`X509Certificate`</ph> object, or <ph id=\"ph2\">`null`</ph> if the assembly to which this module belongs has not been Authenticode signed.","source":"An `X509Certificate` object, or `null` if the assembly to which this module belongs has not been Authenticode signed."}],"pos":[66238,66356],"yaml":true},{"content":"Returns the specified type, performing a case-sensitive search.","nodes":[{"pos":[0,63],"content":"Returns the specified type, performing a case-sensitive search.","nodes":[{"content":"Returns the specified type, performing a case-sensitive search.","pos":[0,63]}]}],"pos":[67522,67586],"yaml":true},{"content":"> [!NOTE]\n>  If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).  \n  \n A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>. Calling <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName> on the module that contains the manifest will not search the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>.","nodes":[{"pos":[2,271],"content":"[!NOTE]\n If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).","leadings":["","> "],"nodes":[{"content":" If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).","pos":[8,267],"nodes":[{"content":"If the type has been forwarded to another assembly, it is still returned by this method.","pos":[1,89]},{"content":"For information on type forwarding, see <bpt id=\"p1\">[</bpt>Type Forwarding in the Common Language Runtime<ept id=\"p1\">](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)</ept>.","pos":[90,259],"source":" For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)."}]}]},{"pos":[278,712],"content":"A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>. Calling <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName> on the module that contains the manifest will not search the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>.","nodes":[{"content":"A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>. Calling <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName> on the module that contains the manifest will not search the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>.","pos":[0,434],"nodes":[{"content":"A type can be retrieved from a specific module using <ph id=\"ph1\">&lt;xref:System.Reflection.Module.GetType%2A?displayProperty=fullName&gt;</ph>.","pos":[0,121],"source":"A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>."},{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Reflection.Module.GetType%2A?displayProperty=fullName&gt;</ph> on the module that contains the manifest will not search the entire assembly.","pos":[122,275],"source":" Calling <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName> on the module that contains the manifest will not search the entire assembly."},{"content":"To retrieve a type from an assembly, regardless of which module it is in, you must call <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph>.","pos":[276,434],"source":" To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>."}]}]}],"pos":[67597,68315],"yaml":true,"extradata":"MT"},{"content":"The name of the type to locate. The name must be fully qualified with the namespace.","nodes":[{"pos":[0,84],"content":"The name of the type to locate. The name must be fully qualified with the namespace.","nodes":[{"content":"The name of the type to locate. The name must be fully qualified with the namespace.","pos":[0,84],"nodes":[{"content":"The name of the type to locate.","pos":[0,31]},{"content":"The name must be fully qualified with the namespace.","pos":[32,84]}]}]}],"pos":[69159,69244],"yaml":true},{"content":"A `Type` object representing the given type, if the type is in this module; otherwise, `null`.","nodes":[{"pos":[0,94],"content":"A <ph id=\"ph1\">`Type`</ph> object representing the given type, if the type is in this module; otherwise, <ph id=\"ph2\">`null`</ph>.","source":"A `Type` object representing the given type, if the type is in this module; otherwise, `null`."}],"pos":[69299,69394],"yaml":true},{"content":"<code>className</code> is `null`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;className&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>className</code> is `null`."}],"pos":[69556,69590],"yaml":true},{"content":"The class initializers are invoked and an exception is thrown.","nodes":[{"pos":[0,62],"content":"The class initializers are invoked and an exception is thrown.","nodes":[{"content":"The class initializers are invoked and an exception is thrown.","pos":[0,62]}]}],"pos":[69722,69785],"yaml":true},{"content":"<code>className</code> is a zero-length string.","nodes":[{"pos":[0,47],"content":"<ph id=\"ph1\">&lt;code&gt;className&lt;/code&gt;</ph> is a zero-length string.","source":"<code>className</code> is a zero-length string."}],"pos":[69879,69927],"yaml":true},{"content":"<code>className</code> requires a dependent assembly that could not be found.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">&lt;code&gt;className&lt;/code&gt;</ph> requires a dependent assembly that could not be found.","source":"<code>className</code> requires a dependent assembly that could not be found."}],"pos":[70035,70113],"yaml":true},{"content":"<code>className</code> requires a dependent assembly that was found but could not be loaded.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context, and <code>className</code> requires a dependent assembly that was not preloaded.","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">&lt;code&gt;className&lt;/code&gt;</ph> requires a dependent assembly that was found but could not be loaded.","source":"<code>className</code> requires a dependent assembly that was found but could not be loaded."},{"pos":[99,103],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[110,256],"content":"The current assembly was loaded into the reflection-only context, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">className</ph><ept id=\"p1\">&lt;/code&gt;</ept> requires a dependent assembly that was not preloaded.","source":"The current assembly was loaded into the reflection-only context, and <code>className</code> requires a dependent assembly that was not preloaded."}],"pos":[70213,70476],"yaml":true},{"content":"<code>className</code> requires a dependent assembly, but the file is not a valid assembly.  \n  \n -or-  \n  \n <code>className</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">&lt;code&gt;className&lt;/code&gt;</ph> requires a dependent assembly, but the file is not a valid assembly.","source":"<code>className</code> requires a dependent assembly, but the file is not a valid assembly."},{"pos":[98,102],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[109,250],"content":"<ph id=\"ph1\">&lt;code&gt;className&lt;/code&gt;</ph> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.","source":"<code>className</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version."}],"pos":[70582,70839],"yaml":true},{"content":"Returns the specified type, searching the module with the specified case sensitivity.","nodes":[{"pos":[0,85],"content":"Returns the specified type, searching the module with the specified case sensitivity.","nodes":[{"content":"Returns the specified type, searching the module with the specified case sensitivity.","pos":[0,85]}]}],"pos":[72292,72378],"yaml":true},{"content":"> [!NOTE]\n>  If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).  \n  \n A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>. Calling <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName> on the module that contains the manifest will not search the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>.","nodes":[{"pos":[2,271],"content":"[!NOTE]\n If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).","leadings":["","> "],"nodes":[{"content":" If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).","pos":[8,267],"nodes":[{"content":"If the type has been forwarded to another assembly, it is still returned by this method.","pos":[1,89]},{"content":"For information on type forwarding, see <bpt id=\"p1\">[</bpt>Type Forwarding in the Common Language Runtime<ept id=\"p1\">](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)</ept>.","pos":[90,259],"source":" For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)."}]}]},{"pos":[278,712],"content":"A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>. Calling <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName> on the module that contains the manifest will not search the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>.","nodes":[{"content":"A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>. Calling <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName> on the module that contains the manifest will not search the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>.","pos":[0,434],"nodes":[{"content":"A type can be retrieved from a specific module using <ph id=\"ph1\">&lt;xref:System.Reflection.Module.GetType%2A?displayProperty=fullName&gt;</ph>.","pos":[0,121],"source":"A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>."},{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Reflection.Module.GetType%2A?displayProperty=fullName&gt;</ph> on the module that contains the manifest will not search the entire assembly.","pos":[122,275],"source":" Calling <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName> on the module that contains the manifest will not search the entire assembly."},{"content":"To retrieve a type from an assembly, regardless of which module it is in, you must call <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph>.","pos":[276,434],"source":" To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>."}]}]}],"pos":[72389,73107],"yaml":true,"extradata":"MT"},{"content":"The name of the type to locate. The name must be fully qualified with the namespace.","nodes":[{"pos":[0,84],"content":"The name of the type to locate. The name must be fully qualified with the namespace.","nodes":[{"content":"The name of the type to locate. The name must be fully qualified with the namespace.","pos":[0,84],"nodes":[{"content":"The name of the type to locate.","pos":[0,31]},{"content":"The name must be fully qualified with the namespace.","pos":[32,84]}]}]}],"pos":[74052,74137],"yaml":true},{"content":"`true` for case-insensitive search; otherwise, `false`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">`true`</ph> for case-insensitive search; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` for case-insensitive search; otherwise, `false`."}],"pos":[74204,74262],"yaml":true},{"content":"A `Type` object representing the given type, if the type is in this module; otherwise, `null`.","nodes":[{"pos":[0,94],"content":"A <ph id=\"ph1\">`Type`</ph> object representing the given type, if the type is in this module; otherwise, <ph id=\"ph2\">`null`</ph>.","source":"A `Type` object representing the given type, if the type is in this module; otherwise, `null`."}],"pos":[74317,74412],"yaml":true},{"content":"<code>className</code> is `null`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;className&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>className</code> is `null`."}],"pos":[74574,74608],"yaml":true},{"content":"The class initializers are invoked and an exception is thrown.","nodes":[{"pos":[0,62],"content":"The class initializers are invoked and an exception is thrown.","nodes":[{"content":"The class initializers are invoked and an exception is thrown.","pos":[0,62]}]}],"pos":[74740,74803],"yaml":true},{"content":"<code>className</code> is a zero-length string.","nodes":[{"pos":[0,47],"content":"<ph id=\"ph1\">&lt;code&gt;className&lt;/code&gt;</ph> is a zero-length string.","source":"<code>className</code> is a zero-length string."}],"pos":[74897,74945],"yaml":true},{"content":"<code>className</code> requires a dependent assembly that could not be found.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">&lt;code&gt;className&lt;/code&gt;</ph> requires a dependent assembly that could not be found.","source":"<code>className</code> requires a dependent assembly that could not be found."}],"pos":[75053,75131],"yaml":true},{"content":"<code>className</code> requires a dependent assembly that was found but could not be loaded.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context, and <code>className</code> requires a dependent assembly that was not preloaded.","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">&lt;code&gt;className&lt;/code&gt;</ph> requires a dependent assembly that was found but could not be loaded.","source":"<code>className</code> requires a dependent assembly that was found but could not be loaded."},{"pos":[99,103],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[110,256],"content":"The current assembly was loaded into the reflection-only context, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">className</ph><ept id=\"p1\">&lt;/code&gt;</ept> requires a dependent assembly that was not preloaded.","source":"The current assembly was loaded into the reflection-only context, and <code>className</code> requires a dependent assembly that was not preloaded."}],"pos":[75231,75494],"yaml":true},{"content":"<code>className</code> requires a dependent assembly, but the file is not a valid assembly.  \n  \n -or-  \n  \n <code>className</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">&lt;code&gt;className&lt;/code&gt;</ph> requires a dependent assembly, but the file is not a valid assembly.","source":"<code>className</code> requires a dependent assembly, but the file is not a valid assembly."},{"pos":[98,102],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[109,250],"content":"<ph id=\"ph1\">&lt;code&gt;className&lt;/code&gt;</ph> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.","source":"<code>className</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version."}],"pos":[75600,75857],"yaml":true},{"content":"Returns the specified type, specifying whether to make a case-sensitive search of the module and whether to throw an exception if the type cannot be found.","nodes":[{"pos":[0,155],"content":"Returns the specified type, specifying whether to make a case-sensitive search of the module and whether to throw an exception if the type cannot be found.","nodes":[{"content":"Returns the specified type, specifying whether to make a case-sensitive search of the module and whether to throw an exception if the type cannot be found.","pos":[0,155]}]}],"pos":[77382,77538],"yaml":true},{"content":"The `throwOnError` parameter affects only what happens when the type is not found. It does not affect any other exceptions that might be thrown. In particular, if the type is found but cannot be loaded, <xref:System.TypeLoadException> can be thrown even if `throwOnError` is `false`.  \n  \n> [!NOTE]\n>  If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).  \n  \n A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>. Calling <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName> on the module that contains the manifest will not search the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>.","nodes":[{"pos":[0,283],"content":"The `throwOnError` parameter affects only what happens when the type is not found. It does not affect any other exceptions that might be thrown. In particular, if the type is found but cannot be loaded, <xref:System.TypeLoadException> can be thrown even if `throwOnError` is `false`.","nodes":[{"content":"The <ph id=\"ph1\">`throwOnError`</ph> parameter affects only what happens when the type is not found.","pos":[0,82],"source":"The `throwOnError` parameter affects only what happens when the type is not found."},{"content":"It does not affect any other exceptions that might be thrown.","pos":[83,144]},{"content":"In particular, if the type is found but cannot be loaded, <ph id=\"ph1\">&lt;xref:System.TypeLoadException&gt;</ph> can be thrown even if <ph id=\"ph2\">`throwOnError`</ph> is <ph id=\"ph3\">`false`</ph>.","pos":[145,283],"source":" In particular, if the type is found but cannot be loaded, <xref:System.TypeLoadException> can be thrown even if `throwOnError` is `false`."}]},{"pos":[291,560],"content":"[!NOTE]\n If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).","leadings":["","> "],"nodes":[{"content":" If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).","pos":[8,267],"nodes":[{"content":"If the type has been forwarded to another assembly, it is still returned by this method.","pos":[1,89]},{"content":"For information on type forwarding, see <bpt id=\"p1\">[</bpt>Type Forwarding in the Common Language Runtime<ept id=\"p1\">](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)</ept>.","pos":[90,259],"source":" For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)."}]}]},{"pos":[567,1001],"content":"A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>. Calling <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName> on the module that contains the manifest will not search the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>.","nodes":[{"content":"A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>. Calling <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName> on the module that contains the manifest will not search the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>.","pos":[0,434],"nodes":[{"content":"A type can be retrieved from a specific module using <ph id=\"ph1\">&lt;xref:System.Reflection.Module.GetType%2A?displayProperty=fullName&gt;</ph>.","pos":[0,121],"source":"A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>."},{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Reflection.Module.GetType%2A?displayProperty=fullName&gt;</ph> on the module that contains the manifest will not search the entire assembly.","pos":[122,275],"source":" Calling <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName> on the module that contains the manifest will not search the entire assembly."},{"content":"To retrieve a type from an assembly, regardless of which module it is in, you must call <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph>.","pos":[276,434],"source":" To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>."}]}]}],"pos":[77549,78558],"yaml":true,"extradata":"MT"},{"content":"The name of the type to locate. The name must be fully qualified with the namespace.","nodes":[{"pos":[0,84],"content":"The name of the type to locate. The name must be fully qualified with the namespace.","nodes":[{"content":"The name of the type to locate. The name must be fully qualified with the namespace.","pos":[0,84],"nodes":[{"content":"The name of the type to locate.","pos":[0,31]},{"content":"The name must be fully qualified with the namespace.","pos":[32,84]}]}]}],"pos":[79511,79596],"yaml":true},{"content":"`true` to throw an exception if the type cannot be found; `false` to return `null`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> to throw an exception if the type cannot be found; <ph id=\"ph2\">`false`</ph> to return <ph id=\"ph3\">`null`</ph>.","source":"`true` to throw an exception if the type cannot be found; `false` to return `null`."}],"pos":[79665,79751],"yaml":true},{"content":"`true` for case-insensitive search; otherwise, `false`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">`true`</ph> for case-insensitive search; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` for case-insensitive search; otherwise, `false`."}],"pos":[79818,79876],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> object representing the specified type, if the type is declared in this module; otherwise, `null`.","nodes":[{"pos":[0,133],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing the specified type, if the type is declared in this module; otherwise, <ph id=\"ph2\">`null`</ph>.","source":"A <xref href=\"System.Type\"></xref> object representing the specified type, if the type is declared in this module; otherwise, `null`."}],"pos":[79931,80065],"yaml":true},{"content":"<code>className</code> is `null`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;className&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>className</code> is `null`."}],"pos":[80227,80261],"yaml":true},{"content":"The class initializers are invoked and an exception is thrown.","nodes":[{"pos":[0,62],"content":"The class initializers are invoked and an exception is thrown.","nodes":[{"content":"The class initializers are invoked and an exception is thrown.","pos":[0,62]}]}],"pos":[80393,80456],"yaml":true},{"content":"<code>className</code> is a zero-length string.","nodes":[{"pos":[0,47],"content":"<ph id=\"ph1\">&lt;code&gt;className&lt;/code&gt;</ph> is a zero-length string.","source":"<code>className</code> is a zero-length string."}],"pos":[80550,80598],"yaml":true},{"content":"<code>throwOnError</code> is `true`, and the type cannot be found.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;throwOnError&lt;/code&gt;</ph> is <ph id=\"ph2\">`true`</ph>, and the type cannot be found.","source":"<code>throwOnError</code> is `true`, and the type cannot be found."}],"pos":[80692,80759],"yaml":true},{"content":"<code>className</code> requires a dependent assembly that could not be found.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">&lt;code&gt;className&lt;/code&gt;</ph> requires a dependent assembly that could not be found.","source":"<code>className</code> requires a dependent assembly that could not be found."}],"pos":[80867,80945],"yaml":true},{"content":"<code>className</code> requires a dependent assembly that was found but could not be loaded.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context, and <code>className</code> requires a dependent assembly that was not preloaded.","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">&lt;code&gt;className&lt;/code&gt;</ph> requires a dependent assembly that was found but could not be loaded.","source":"<code>className</code> requires a dependent assembly that was found but could not be loaded."},{"pos":[99,103],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[110,256],"content":"The current assembly was loaded into the reflection-only context, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">className</ph><ept id=\"p1\">&lt;/code&gt;</ept> requires a dependent assembly that was not preloaded.","source":"The current assembly was loaded into the reflection-only context, and <code>className</code> requires a dependent assembly that was not preloaded."}],"pos":[81045,81308],"yaml":true},{"content":"<code>className</code> requires a dependent assembly, but the file is not a valid assembly.  \n  \n -or-  \n  \n <code>className</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">&lt;code&gt;className&lt;/code&gt;</ph> requires a dependent assembly, but the file is not a valid assembly.","source":"<code>className</code> requires a dependent assembly, but the file is not a valid assembly."},{"pos":[98,102],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[109,250],"content":"<ph id=\"ph1\">&lt;code&gt;className&lt;/code&gt;</ph> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.","source":"<code>className</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version."}],"pos":[81414,81671],"yaml":true},{"content":"Returns all the types defined within this module.","nodes":[{"pos":[0,49],"content":"Returns all the types defined within this module.","nodes":[{"content":"Returns all the types defined within this module.","pos":[0,49]}]}],"pos":[83075,83125],"yaml":true},{"content":"`ReflectionTypeLoadException` is a special load exception. The `ReflectionTypeLoadException.Types` property contains the array of types that were defined in the module and were loaded. This array may contain some null values. The `ReflectionTypeLoadException.LoaderExceptions` property is an array of exceptions that represent the exceptions that were thrown by the loader. The holes in the class array line up with the exceptions.  \n  \n For example, if the class initializers of one of the classes throws an exception while it is being loaded, a `TargetInvocationException` is stored in the corresponding element of the `LoaderExceptions` array.  \n  \n> [!NOTE]\n>  If a type has been forwarded to another assembly, it is not included in the returned array. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).","nodes":[{"pos":[0,431],"content":"`ReflectionTypeLoadException` is a special load exception. The `ReflectionTypeLoadException.Types` property contains the array of types that were defined in the module and were loaded. This array may contain some null values. The `ReflectionTypeLoadException.LoaderExceptions` property is an array of exceptions that represent the exceptions that were thrown by the loader. The holes in the class array line up with the exceptions.","nodes":[{"content":"<ph id=\"ph1\">`ReflectionTypeLoadException`</ph> is a special load exception.","pos":[0,58],"source":"`ReflectionTypeLoadException` is a special load exception."},{"content":"The <ph id=\"ph1\">`ReflectionTypeLoadException.Types`</ph> property contains the array of types that were defined in the module and were loaded.","pos":[59,184],"source":" The `ReflectionTypeLoadException.Types` property contains the array of types that were defined in the module and were loaded."},{"content":"This array may contain some null values.","pos":[185,225]},{"content":"The <ph id=\"ph1\">`ReflectionTypeLoadException.LoaderExceptions`</ph> property is an array of exceptions that represent the exceptions that were thrown by the loader.","pos":[226,373],"source":" The `ReflectionTypeLoadException.LoaderExceptions` property is an array of exceptions that represent the exceptions that were thrown by the loader."},{"content":"The holes in the class array line up with the exceptions.","pos":[374,431]}]},{"pos":[438,646],"content":"For example, if the class initializers of one of the classes throws an exception while it is being loaded, a <ph id=\"ph1\">`TargetInvocationException`</ph> is stored in the corresponding element of the <ph id=\"ph2\">`LoaderExceptions`</ph> array.","source":"For example, if the class initializers of one of the classes throws an exception while it is being loaded, a `TargetInvocationException` is stored in the corresponding element of the `LoaderExceptions` array."},{"pos":[654,926],"content":"[!NOTE]\n If a type has been forwarded to another assembly, it is not included in the returned array. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).","leadings":["","> "],"nodes":[{"content":" If a type has been forwarded to another assembly, it is not included in the returned array. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).","pos":[8,270],"nodes":[{"content":"If a type has been forwarded to another assembly, it is not included in the returned array.","pos":[1,92]},{"content":"For information on type forwarding, see <bpt id=\"p1\">[</bpt>Type Forwarding in the Common Language Runtime<ept id=\"p1\">](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)</ept>.","pos":[93,262],"source":" For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)."}]}]}],"pos":[83136,84070],"yaml":true,"extradata":"MT"},{"content":"An array of type `Type` containing types defined within the module that is reflected by this instance.","nodes":[{"pos":[0,102],"content":"An array of type <ph id=\"ph1\">`Type`</ph> containing types defined within the module that is reflected by this instance.","source":"An array of type `Type` containing types defined within the module that is reflected by this instance."}],"pos":[84204,84307],"yaml":true},{"content":"One or more classes in a module could not be loaded.","nodes":[{"pos":[0,52],"content":"One or more classes in a module could not be loaded.","nodes":[{"content":"One or more classes in a module could not be loaded.","pos":[0,52]}]}],"pos":[84504,84557],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[84669,84719],"yaml":true},{"content":"Returns a value that indicates whether the specified attribute type has been applied to this module.","nodes":[{"pos":[0,100],"content":"Returns a value that indicates whether the specified attribute type has been applied to this module.","nodes":[{"content":"Returns a value that indicates whether the specified attribute type has been applied to this module.","pos":[0,100]}]}],"pos":[86075,86176],"yaml":true},{"content":"The type of custom attribute to test for.","nodes":[{"pos":[0,41],"content":"The type of custom attribute to test for.","nodes":[{"content":"The type of custom attribute to test for.","pos":[0,41]}]}],"pos":[86963,87005],"yaml":true},{"content":"This argument is ignored for objects of this type.","nodes":[{"pos":[0,50],"content":"This argument is ignored for objects of this type.","nodes":[{"content":"This argument is ignored for objects of this type.","pos":[0,50]}]}],"pos":[87069,87120],"yaml":true},{"content":"`true` if one or more instances of <code>attributeType</code> have been applied to this module; otherwise, `false`.","nodes":[{"pos":[0,115],"content":"<ph id=\"ph1\">`true`</ph> if one or more instances of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">attributeType</ph><ept id=\"p1\">&lt;/code&gt;</ept> have been applied to this module; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if one or more instances of <code>attributeType</code> have been applied to this module; otherwise, `false`."}],"pos":[87178,87296],"yaml":true},{"content":"<code>attributeType</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;attributeType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>attributeType</code> is `null`."}],"pos":[87460,87498],"yaml":true},{"content":"<code>attributeType</code> is not a <xref href=\"System.Type\"></xref> object supplied by the runtime. For example, <code>attributeType</code> is a <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> object.","nodes":[{"pos":[0,209],"content":"<code>attributeType</code> is not a <xref href=\"System.Type\"></xref> object supplied by the runtime. For example, <code>attributeType</code> is a <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> object.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;attributeType&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object supplied by the runtime.","pos":[0,100],"source":"<code>attributeType</code> is not a <xref href=\"System.Type\"></xref> object supplied by the runtime."},{"content":"For example, <ph id=\"ph1\">&lt;code&gt;attributeType&lt;/code&gt;</ph> is a <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder\"&gt;&lt;/xref&gt;</ph> object.","pos":[101,209],"source":" For example, <code>attributeType</code> is a <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> object."}]}],"pos":[87592,87802],"yaml":true},{"content":"Gets a value indicating whether the object is a resource.","nodes":[{"pos":[0,57],"content":"Gets a value indicating whether the object is a resource.","nodes":[{"content":"Gets a value indicating whether the object is a resource.","pos":[0,57]}]}],"pos":[88897,88955],"yaml":true},{"content":"`true` if the object is a resource; otherwise, `false`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">`true`</ph> if the object is a resource; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the object is a resource; otherwise, `false`."}],"pos":[89712,89770],"yaml":true},{"content":"Gets the metadata stream version.","nodes":[{"pos":[0,33],"content":"Gets the metadata stream version.","nodes":[{"content":"Gets the metadata stream version.","pos":[0,33]}]}],"pos":[90957,90991],"yaml":true},{"content":"> [!NOTE]\n>  For more information on the metadata header, see \"Partition II: Metadata Definition and Semantics\" in the Common Language Infrastructure (CLI) documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","nodes":[{"pos":[2,453],"content":"[!NOTE]\n For more information on the metadata header, see \"Partition II: Metadata Definition and Semantics\" in the Common Language Infrastructure (CLI) documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","leadings":["","> "],"nodes":[{"content":" For more information on the metadata header, see \"Partition II: Metadata Definition and Semantics\" in the Common Language Infrastructure (CLI) documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","pos":[8,449],"nodes":[{"content":"For more information on the metadata header, see \"Partition II: Metadata Definition and Semantics\" in the Common Language Infrastructure (CLI) documentation.","pos":[1,158]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the ECMA Web site.","pos":[159,441],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site."}]}]}],"pos":[91002,91468],"yaml":true,"extradata":"MT"},{"content":"A 32-bit integer representing the metadata stream version. The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number.","nodes":[{"pos":[0,183],"content":"A 32-bit integer representing the metadata stream version. The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number.","nodes":[{"content":"A 32-bit integer representing the metadata stream version. The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number.","pos":[0,183],"nodes":[{"content":"A 32-bit integer representing the metadata stream version.","pos":[0,58]},{"content":"The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number.","pos":[59,183]}]}]}],"pos":[91591,91775],"yaml":true},{"content":"Gets a token that identifies the module in metadata.","nodes":[{"pos":[0,52],"content":"Gets a token that identifies the module in metadata.","nodes":[{"content":"Gets a token that identifies the module in metadata.","pos":[0,52]}]}],"pos":[92955,93008],"yaml":true},{"content":"The tokens obtained using this property can be passed to the unmanaged Reflection API. For more information, see [Unmanaged Reflection API](http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8).  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","nodes":[{"pos":[0,210],"content":"The tokens obtained using this property can be passed to the unmanaged Reflection API. For more information, see [Unmanaged Reflection API](http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8).","nodes":[{"content":"The tokens obtained using this property can be passed to the unmanaged Reflection API.","pos":[0,86]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Unmanaged Reflection API<ept id=\"p1\">](http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>.","pos":[87,210],"source":" For more information, see [Unmanaged Reflection API](http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)."}]},{"pos":[218,679],"content":"[!NOTE]\n Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","leadings":["","> "],"nodes":[{"content":" Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","pos":[8,459],"nodes":[{"content":"Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[1,168]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the ECMA Web site.","pos":[169,451],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site."}]}]}],"pos":[93019,93706],"yaml":true,"extradata":"MT"},{"content":"An integer token that identifies the current module in metadata.","nodes":[{"pos":[0,64],"content":"An integer token that identifies the current module in metadata.","nodes":[{"content":"An integer token that identifies the current module in metadata.","pos":[0,64]}]}],"pos":[93827,93892],"yaml":true},{"content":"Gets a handle for the module.","nodes":[{"pos":[0,29],"content":"Gets a handle for the module.","nodes":[{"content":"Gets a handle for the module.","pos":[0,29]}]}],"pos":[95064,95094],"yaml":true},{"content":"A <xref href=\"System.ModuleHandle\"></xref> structure for the current module.","nodes":[{"pos":[0,76],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.ModuleHandle\"&gt;&lt;/xref&gt;</ph> structure for the current module.","source":"A <xref href=\"System.ModuleHandle\"></xref> structure for the current module."}],"pos":[95222,95299],"yaml":true},{"content":"Gets a universally unique identifier (UUID) that can be used to distinguish between two versions of a module.","nodes":[{"pos":[0,109],"content":"Gets a universally unique identifier (UUID) that can be used to distinguish between two versions of a module.","nodes":[{"content":"Gets a universally unique identifier (UUID) that can be used to distinguish between two versions of a module.","pos":[0,109]}]}],"pos":[96510,96620],"yaml":true},{"content":"In unmanaged metadata, the GUID returned by the <xref:System.Reflection.Module.ModuleVersionId%2A> property is referred to as the `mvid`, and is stored in the GUID heap.  \n  \n> [!NOTE]\n>  More information about metadata can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","nodes":[{"pos":[0,169],"content":"In unmanaged metadata, the GUID returned by the <ph id=\"ph1\">&lt;xref:System.Reflection.Module.ModuleVersionId%2A&gt;</ph> property is referred to as the <ph id=\"ph2\">`mvid`</ph>, and is stored in the GUID heap.","source":"In unmanaged metadata, the GUID returned by the <xref:System.Reflection.Module.ModuleVersionId%2A> property is referred to as the `mvid`, and is stored in the GUID heap."},{"pos":[177,636],"content":"[!NOTE]\n More information about metadata can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","leadings":["","> "],"nodes":[{"content":" More information about metadata can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","pos":[8,457],"nodes":[{"content":"More information about metadata can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[1,166]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the ECMA Web site.","pos":[167,449],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site."}]}]}],"pos":[96631,97275],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Guid\"></xref> that can be used to distinguish between two versions of a module.","nodes":[{"pos":[0,100],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Guid\"&gt;&lt;/xref&gt;</ph> that can be used to distinguish between two versions of a module.","source":"A <xref href=\"System.Guid\"></xref> that can be used to distinguish between two versions of a module."}],"pos":[97398,97499],"yaml":true},{"content":"Gets a `String` representing the name of the module with the path removed.","nodes":[{"pos":[0,74],"content":"Gets a <ph id=\"ph1\">`String`</ph> representing the name of the module with the path removed.","source":"Gets a `String` representing the name of the module with the path removed."}],"pos":[98791,98866],"yaml":true},{"content":"`Name` is a platform-dependent string.  \n  \n If the assembly for this module was loaded from a byte array then the `FullyQualifiedName` for the module will be: \\<Unknown>.  \n  \n To get the name and the path, use <xref:System.Reflection.Module.FullyQualifiedName%2A>.","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">`Name`</ph> is a platform-dependent string.","source":"`Name` is a platform-dependent string."},{"pos":[45,171],"content":"If the assembly for this module was loaded from a byte array then the <ph id=\"ph1\">`FullyQualifiedName`</ph> for the module will be: <ph id=\"ph2\">\\&lt;</ph>Unknown&gt;.","source":"If the assembly for this module was loaded from a byte array then the `FullyQualifiedName` for the module will be: \\<Unknown>."},{"pos":[178,266],"content":"To get the name and the path, use <xref:System.Reflection.Module.FullyQualifiedName%2A>.","nodes":[{"content":"To get the name and the path, use <ph id=\"ph1\">&lt;xref:System.Reflection.Module.FullyQualifiedName%2A&gt;</ph>.","pos":[0,88],"source":"To get the name and the path, use <xref:System.Reflection.Module.FullyQualifiedName%2A>."}]}],"pos":[98877,99151],"yaml":true,"extradata":"MT"},{"content":"The module name with no path.","nodes":[{"pos":[0,29],"content":"The module name with no path.","nodes":[{"content":"The module name with no path.","pos":[0,29]}]}],"pos":[99808,99838],"yaml":true},{"content":"Indicates whether two <xref href=\"System.Reflection.Module\"></xref> objects are equal.","nodes":[{"pos":[0,86],"content":"Indicates whether two <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Module\"&gt;&lt;/xref&gt;</ph> objects are equal.","source":"Indicates whether two <xref href=\"System.Reflection.Module\"></xref> objects are equal."}],"pos":[101540,101627],"yaml":true},{"content":"The first object to compare.","nodes":[{"pos":[0,28],"content":"The first object to compare.","nodes":[{"content":"The first object to compare.","pos":[0,28]}]}],"pos":[101833,101862],"yaml":true},{"content":"The second object to compare.","nodes":[{"pos":[0,29],"content":"The second object to compare.","nodes":[{"content":"The second object to compare.","pos":[0,29]}]}],"pos":[101934,101964],"yaml":true},{"content":"`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,79],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`."}],"pos":[102022,102104],"yaml":true},{"content":"Indicates whether two <xref href=\"System.Reflection.Module\"></xref> objects are not equal.","nodes":[{"pos":[0,90],"content":"Indicates whether two <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Module\"&gt;&lt;/xref&gt;</ph> objects are not equal.","source":"Indicates whether two <xref href=\"System.Reflection.Module\"></xref> objects are not equal."}],"pos":[103481,103572],"yaml":true},{"content":"The first object to compare.","nodes":[{"pos":[0,28],"content":"The first object to compare.","nodes":[{"content":"The first object to compare.","pos":[0,28]}]}],"pos":[103780,103809],"yaml":true},{"content":"The second object to compare.","nodes":[{"pos":[0,29],"content":"The second object to compare.","nodes":[{"content":"The second object to compare.","pos":[0,29]}]}],"pos":[103881,103911],"yaml":true},{"content":"`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`."}],"pos":[103969,104055],"yaml":true},{"content":"Returns the field identified by the specified metadata token.","nodes":[{"pos":[0,61],"content":"Returns the field identified by the specified metadata token.","nodes":[{"content":"Returns the field identified by the specified metadata token.","pos":[0,61]}]}],"pos":[105288,105350],"yaml":true},{"content":"To resolve a metadata token that identifies a field whose parent `TypeSpec` has a signature containing element type `ELEMENT_TYPE_VAR` or `ELEMENT_TYPE_MVAR`, use the <xref:System.Reflection.Module.ResolveField%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, which allows you to supply the necessary context. That is, when you are resolving a metadata token for a field that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.  \n  \n For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method.","nodes":[{"pos":[0,594],"content":"To resolve a metadata token that identifies a field whose parent `TypeSpec` has a signature containing element type `ELEMENT_TYPE_VAR` or `ELEMENT_TYPE_MVAR`, use the <xref:System.Reflection.Module.ResolveField%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, which allows you to supply the necessary context. That is, when you are resolving a metadata token for a field that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.","nodes":[{"content":"To resolve a metadata token that identifies a field whose parent <ph id=\"ph1\">`TypeSpec`</ph> has a signature containing element type <ph id=\"ph2\">`ELEMENT_TYPE_VAR`</ph> or <ph id=\"ph3\">`ELEMENT_TYPE_MVAR`</ph>, use the <ph id=\"ph4\">&lt;xref:System.Reflection.Module.ResolveField%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29&gt;</ph> method overload, which allows you to supply the necessary context.","pos":[0,336],"source":"To resolve a metadata token that identifies a field whose parent `TypeSpec` has a signature containing element type `ELEMENT_TYPE_VAR` or `ELEMENT_TYPE_MVAR`, use the <xref:System.Reflection.Module.ResolveField%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, which allows you to supply the necessary context."},{"content":"That is, when you are resolving a metadata token for a field that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.","pos":[337,594]}]},{"pos":[602,1063],"content":"[!NOTE]\n Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","leadings":["","> "],"nodes":[{"content":" Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","pos":[8,459],"nodes":[{"content":"Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[1,168]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the ECMA Web site.","pos":[169,451],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site."}]}]},{"pos":[1070,1375],"content":"For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method.","nodes":[{"content":"For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <ph id=\"ph1\">&lt;xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29&gt;</ph> method.","pos":[0,305],"source":"For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method."}]}],"pos":[105361,106746],"yaml":true,"extradata":"MT"},{"content":"A metadata token that identifies a field in the module.","nodes":[{"pos":[0,55],"content":"A metadata token that identifies a field in the module.","nodes":[{"content":"A metadata token that identifies a field in the module.","pos":[0,55]}]}],"pos":[106922,106978],"yaml":true},{"content":"A <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field that is identified by the specified metadata token.","nodes":[{"pos":[0,132],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldInfo\"&gt;&lt;/xref&gt;</ph> object representing the field that is identified by the specified metadata token.","source":"A <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field that is identified by the specified metadata token."}],"pos":[107049,107182],"yaml":true},{"content":"<code>metadataToken</code> is not a token for a field in the scope of the current module.  \n  \n -or-  \n  \n <code>metadataToken</code> identifies a field whose parent `TypeSpec` has a signature containing element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method).","nodes":[{"pos":[0,89],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is not a token for a field in the scope of the current module.","source":"<code>metadataToken</code> is not a token for a field in the scope of the current module."},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,309],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> identifies a field whose parent <ph id=\"ph2\">`TypeSpec`</ph> has a signature containing element type <ph id=\"ph3\">`var`</ph> (a type parameter of a generic type) or <ph id=\"ph4\">`mvar`</ph> (a type parameter of a generic method).","source":"<code>metadataToken</code> identifies a field whose parent `TypeSpec` has a signature containing element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method)."}],"pos":[107341,107657],"yaml":true},{"content":"<code>metadataToken</code> is not a valid token in the scope of the current module.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is not a valid token in the scope of the current module.","source":"<code>metadataToken</code> is not a valid token in the scope of the current module."}],"pos":[107771,107855],"yaml":true},{"content":"Returns the field identified by the specified metadata token, in the context defined by the specified generic type parameters.","nodes":[{"pos":[0,126],"content":"Returns the field identified by the specified metadata token, in the context defined by the specified generic type parameters.","nodes":[{"content":"Returns the field identified by the specified metadata token, in the context defined by the specified generic type parameters.","pos":[0,126]}]}],"pos":[109151,109278],"yaml":true},{"content":"Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. It is always safe to provide these arguments, even when they are not needed.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.  \n  \n For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method.","nodes":[{"pos":[0,497],"content":"Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. It is always safe to provide these arguments, even when they are not needed.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=fullName&gt;</ph> method on the type where <ph id=\"ph2\">`metadataToken`</ph> is in scope to obtain an array of generic type arguments for <ph id=\"ph3\">`genericTypeArguments`</ph>.","pos":[0,200],"source":"Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName&gt;</ph> method on the method where <ph id=\"ph2\">`metadataToken`</ph> is in scope to obtain an array of generic type arguments for <ph id=\"ph3\">`genericTypeArguments`</ph>.","pos":[201,420],"source":" Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`."},{"content":"It is always safe to provide these arguments, even when they are not needed.","pos":[421,497]}]},{"pos":[505,966],"content":"[!NOTE]\n Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","leadings":["","> "],"nodes":[{"content":" Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","pos":[8,459],"nodes":[{"content":"Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[1,168]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the ECMA Web site.","pos":[169,451],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site."}]}]},{"pos":[973,1278],"content":"For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method.","nodes":[{"content":"For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <ph id=\"ph1\">&lt;xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29&gt;</ph> method.","pos":[0,305],"source":"For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method."}]}],"pos":[109289,110577],"yaml":true,"extradata":"MT"},{"content":"A metadata token that identifies a field in the module.","nodes":[{"pos":[0,55],"content":"A metadata token that identifies a field in the module.","nodes":[{"content":"A metadata token that identifies a field in the module.","pos":[0,55]}]}],"pos":[110821,110877],"yaml":true},{"content":"An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic.","nodes":[{"pos":[0,172],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects representing the generic type arguments of the type where the token is in scope, or <ph id=\"ph2\">`null`</ph> if that type is not generic.","source":"An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic."}],"pos":[110953,111126],"yaml":true},{"content":"An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic.","nodes":[{"pos":[0,176],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects representing the generic type arguments of the method where the token is in scope, or <ph id=\"ph2\">`null`</ph> if that method is not generic.","source":"An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic."}],"pos":[111204,111381],"yaml":true},{"content":"A <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field that is identified by the specified metadata token.","nodes":[{"pos":[0,132],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldInfo\"&gt;&lt;/xref&gt;</ph> object representing the field that is identified by the specified metadata token.","source":"A <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field that is identified by the specified metadata token."}],"pos":[111452,111585],"yaml":true},{"content":"<code>metadataToken</code> is not a token for a field in the scope of the current module.  \n  \n -or-  \n  \n <code>metadataToken</code> identifies a field whose parent `TypeSpec` has a signature containing element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>.","nodes":[{"pos":[0,89],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is not a token for a field in the scope of the current module.","source":"<code>metadataToken</code> is not a token for a field in the scope of the current module."},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,465],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> identifies a field whose parent <ph id=\"ph2\">`TypeSpec`</ph> has a signature containing element type <ph id=\"ph3\">`var`</ph> (a type parameter of a generic type) or <ph id=\"ph4\">`mvar`</ph> (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <ph id=\"ph5\">&lt;code&gt;genericTypeArguments&lt;/code&gt;</ph> and <ph id=\"ph6\">&lt;code&gt;genericMethodArguments&lt;/code&gt;</ph>.","source":"<code>metadataToken</code> identifies a field whose parent `TypeSpec` has a signature containing element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>."}],"pos":[111744,112216],"yaml":true},{"content":"<code>metadataToken</code> is not a valid token in the scope of the current module.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is not a valid token in the scope of the current module.","source":"<code>metadataToken</code> is not a valid token in the scope of the current module."}],"pos":[112330,112414],"yaml":true},{"content":"Returns the type or member identified by the specified metadata token.","nodes":[{"pos":[0,70],"content":"Returns the type or member identified by the specified metadata token.","nodes":[{"content":"Returns the type or member identified by the specified metadata token.","pos":[0,70]}]}],"pos":[113584,113655],"yaml":true},{"content":"To resolve a metadata token for a `MethodSpec` or `TypeSpec` whose signature contains element type `ELEMENT_TYPE_VAR` or `ELEMENT_TYPE_MVAR`, use the <xref:System.Reflection.Module.ResolveMember%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, which allows you to supply the necessary context. That is, when you are resolving a metadata token for a member that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.  \n  \n For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method.","nodes":[{"pos":[0,579],"content":"To resolve a metadata token for a `MethodSpec` or `TypeSpec` whose signature contains element type `ELEMENT_TYPE_VAR` or `ELEMENT_TYPE_MVAR`, use the <xref:System.Reflection.Module.ResolveMember%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, which allows you to supply the necessary context. That is, when you are resolving a metadata token for a member that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.","nodes":[{"content":"To resolve a metadata token for a <ph id=\"ph1\">`MethodSpec`</ph> or <ph id=\"ph2\">`TypeSpec`</ph> whose signature contains element type <ph id=\"ph3\">`ELEMENT_TYPE_VAR`</ph> or <ph id=\"ph4\">`ELEMENT_TYPE_MVAR`</ph>, use the <ph id=\"ph5\">&lt;xref:System.Reflection.Module.ResolveMember%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29&gt;</ph> method overload, which allows you to supply the necessary context.","pos":[0,320],"source":"To resolve a metadata token for a `MethodSpec` or `TypeSpec` whose signature contains element type `ELEMENT_TYPE_VAR` or `ELEMENT_TYPE_MVAR`, use the <xref:System.Reflection.Module.ResolveMember%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, which allows you to supply the necessary context."},{"content":"That is, when you are resolving a metadata token for a member that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.","pos":[321,579]}]},{"pos":[587,1048],"content":"[!NOTE]\n Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","leadings":["","> "],"nodes":[{"content":" Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","pos":[8,459],"nodes":[{"content":"Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[1,168]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the ECMA Web site.","pos":[169,451],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site."}]}]},{"pos":[1055,1360],"content":"For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method.","nodes":[{"content":"For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <ph id=\"ph1\">&lt;xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29&gt;</ph> method.","pos":[0,305],"source":"For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method."}]}],"pos":[113666,115036],"yaml":true,"extradata":"MT"},{"content":"A metadata token that identifies a type or member in the module.","nodes":[{"pos":[0,64],"content":"A metadata token that identifies a type or member in the module.","nodes":[{"content":"A metadata token that identifies a type or member in the module.","pos":[0,64]}]}],"pos":[115214,115279],"yaml":true},{"content":"A <xref href=\"System.Reflection.MemberInfo\"></xref> object representing the type or member that is identified by the specified metadata token.","nodes":[{"pos":[0,142],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> object representing the type or member that is identified by the specified metadata token.","source":"A <xref href=\"System.Reflection.MemberInfo\"></xref> object representing the type or member that is identified by the specified metadata token."}],"pos":[115351,115494],"yaml":true},{"content":"<code>metadataToken</code> is not a token for a type or member in the scope of the current module.  \n  \n -or-  \n  \n <code>metadataToken</code> is a `MethodSpec` or `TypeSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method).  \n  \n -or-  \n  \n <code>metadataToken</code> identifies a property or event.","nodes":[{"pos":[0,98],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is not a token for a type or member in the scope of the current module.","source":"<code>metadataToken</code> is not a token for a type or member in the scope of the current module."},{"pos":[105,109],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[116,305],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is a <ph id=\"ph2\">`MethodSpec`</ph> or <ph id=\"ph3\">`TypeSpec`</ph> whose signature contains element type <ph id=\"ph4\">`var`</ph> (a type parameter of a generic type) or <ph id=\"ph5\">`mvar`</ph> (a type parameter of a generic method).","source":"<code>metadataToken</code> is a `MethodSpec` or `TypeSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method)."},{"pos":[312,316],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[323,381],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> identifies a property or event.","source":"<code>metadataToken</code> identifies a property or event."}],"pos":[115654,116046],"yaml":true},{"content":"<code>metadataToken</code> is not a valid token in the scope of the current module.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is not a valid token in the scope of the current module.","source":"<code>metadataToken</code> is not a valid token in the scope of the current module."}],"pos":[116160,116244],"yaml":true},{"content":"Returns the type or member identified by the specified metadata token, in the context defined by the specified generic type parameters.","nodes":[{"pos":[0,135],"content":"Returns the type or member identified by the specified metadata token, in the context defined by the specified generic type parameters.","nodes":[{"content":"Returns the type or member identified by the specified metadata token, in the context defined by the specified generic type parameters.","pos":[0,135]}]}],"pos":[117546,117682],"yaml":true},{"content":"Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. It is always safe to provide these arguments, even when they are not needed.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.  \n  \n For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method.","nodes":[{"pos":[0,497],"content":"Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. It is always safe to provide these arguments, even when they are not needed.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=fullName&gt;</ph> method on the type where <ph id=\"ph2\">`metadataToken`</ph> is in scope to obtain an array of generic type arguments for <ph id=\"ph3\">`genericTypeArguments`</ph>.","pos":[0,200],"source":"Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName&gt;</ph> method on the method where <ph id=\"ph2\">`metadataToken`</ph> is in scope to obtain an array of generic type arguments for <ph id=\"ph3\">`genericTypeArguments`</ph>.","pos":[201,420],"source":" Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`."},{"content":"It is always safe to provide these arguments, even when they are not needed.","pos":[421,497]}]},{"pos":[505,966],"content":"[!NOTE]\n Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","leadings":["","> "],"nodes":[{"content":" Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","pos":[8,459],"nodes":[{"content":"Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[1,168]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the ECMA Web site.","pos":[169,451],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site."}]}]},{"pos":[973,1278],"content":"For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method.","nodes":[{"content":"For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <ph id=\"ph1\">&lt;xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29&gt;</ph> method.","pos":[0,305],"source":"For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method."}]}],"pos":[117693,118981],"yaml":true,"extradata":"MT"},{"content":"A metadata token that identifies a type or member in the module.","nodes":[{"pos":[0,64],"content":"A metadata token that identifies a type or member in the module.","nodes":[{"content":"A metadata token that identifies a type or member in the module.","pos":[0,64]}]}],"pos":[119227,119292],"yaml":true},{"content":"An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic.","nodes":[{"pos":[0,172],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects representing the generic type arguments of the type where the token is in scope, or <ph id=\"ph2\">`null`</ph> if that type is not generic.","source":"An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic."}],"pos":[119368,119541],"yaml":true},{"content":"An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic.","nodes":[{"pos":[0,176],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects representing the generic type arguments of the method where the token is in scope, or <ph id=\"ph2\">`null`</ph> if that method is not generic.","source":"An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic."}],"pos":[119619,119796],"yaml":true},{"content":"A <xref href=\"System.Reflection.MemberInfo\"></xref> object representing the type or member that is identified by the specified metadata token.","nodes":[{"pos":[0,142],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> object representing the type or member that is identified by the specified metadata token.","source":"A <xref href=\"System.Reflection.MemberInfo\"></xref> object representing the type or member that is identified by the specified metadata token."}],"pos":[119868,120011],"yaml":true},{"content":"<code>metadataToken</code> is not a token for a type or member in the scope of the current module.  \n  \n -or-  \n  \n <code>metadataToken</code> is a `MethodSpec` or `TypeSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>.  \n  \n -or-  \n  \n <code>metadataToken</code> identifies a property or event.","nodes":[{"pos":[0,98],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is not a token for a type or member in the scope of the current module.","source":"<code>metadataToken</code> is not a token for a type or member in the scope of the current module."},{"pos":[105,109],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[116,461],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is a <ph id=\"ph2\">`MethodSpec`</ph> or <ph id=\"ph3\">`TypeSpec`</ph> whose signature contains element type <ph id=\"ph4\">`var`</ph> (a type parameter of a generic type) or <ph id=\"ph5\">`mvar`</ph> (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <ph id=\"ph6\">&lt;code&gt;genericTypeArguments&lt;/code&gt;</ph> and <ph id=\"ph7\">&lt;code&gt;genericMethodArguments&lt;/code&gt;</ph>.","source":"<code>metadataToken</code> is a `MethodSpec` or `TypeSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>."},{"pos":[468,472],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[479,537],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> identifies a property or event.","source":"<code>metadataToken</code> identifies a property or event."}],"pos":[120171,120719],"yaml":true},{"content":"<code>metadataToken</code> is not a valid token in the scope of the current module.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is not a valid token in the scope of the current module.","source":"<code>metadataToken</code> is not a valid token in the scope of the current module."}],"pos":[120833,120917],"yaml":true},{"content":"Returns the method or constructor identified by the specified metadata token, in the context defined by the specified generic type parameters.","nodes":[{"pos":[0,142],"content":"Returns the method or constructor identified by the specified metadata token, in the context defined by the specified generic type parameters.","nodes":[{"content":"Returns the method or constructor identified by the specified metadata token, in the context defined by the specified generic type parameters.","pos":[0,142]}]}],"pos":[122219,122362],"yaml":true},{"content":"Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where `metadataToken` is in scope to obtain an array of generic type arguments for `genericMethodArguments`. It is always safe to provide these arguments, even when they are not needed.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","nodes":[{"pos":[0,499],"content":"Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where `metadataToken` is in scope to obtain an array of generic type arguments for `genericMethodArguments`. It is always safe to provide these arguments, even when they are not needed.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=fullName&gt;</ph> method on the type where <ph id=\"ph2\">`metadataToken`</ph> is in scope to obtain an array of generic type arguments for <ph id=\"ph3\">`genericTypeArguments`</ph>.","pos":[0,200],"source":"Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName&gt;</ph> method on the method where <ph id=\"ph2\">`metadataToken`</ph> is in scope to obtain an array of generic type arguments for <ph id=\"ph3\">`genericMethodArguments`</ph>.","pos":[201,422],"source":" Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where `metadataToken` is in scope to obtain an array of generic type arguments for `genericMethodArguments`."},{"content":"It is always safe to provide these arguments, even when they are not needed.","pos":[423,499]}]},{"pos":[507,968],"content":"[!NOTE]\n Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","leadings":["","> "],"nodes":[{"content":" Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","pos":[8,459],"nodes":[{"content":"Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[1,168]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the ECMA Web site.","pos":[169,451],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site."}]}]}],"pos":[122373,123349],"yaml":true,"extradata":"MT"},{"content":"A metadata token that identifies a method or constructor in the module.","nodes":[{"pos":[0,71],"content":"A metadata token that identifies a method or constructor in the module.","nodes":[{"content":"A metadata token that identifies a method or constructor in the module.","pos":[0,71]}]}],"pos":[127308,127380],"yaml":true},{"content":"An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic.","nodes":[{"pos":[0,172],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects representing the generic type arguments of the type where the token is in scope, or <ph id=\"ph2\">`null`</ph> if that type is not generic.","source":"An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic."}],"pos":[127456,127629],"yaml":true},{"content":"An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic.","nodes":[{"pos":[0,176],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects representing the generic type arguments of the method where the token is in scope, or <ph id=\"ph2\">`null`</ph> if that method is not generic.","source":"An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic."}],"pos":[127707,127884],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodBase\"></xref> object representing the method that is identified by the specified metadata token.","nodes":[{"pos":[0,134],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodBase\"&gt;&lt;/xref&gt;</ph> object representing the method that is identified by the specified metadata token.","source":"A <xref href=\"System.Reflection.MethodBase\"></xref> object representing the method that is identified by the specified metadata token."}],"pos":[127956,128091],"yaml":true},{"content":"<code>metadataToken</code> is not a token for a method or constructor in the scope of the current module.  \n  \n -or-  \n  \n <code>metadataToken</code> is a `MethodSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>.","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is not a token for a method or constructor in the scope of the current module.","source":"<code>metadataToken</code> is not a token for a method or constructor in the scope of the current module."},{"pos":[112,116],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[123,454],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is a <ph id=\"ph2\">`MethodSpec`</ph> whose signature contains element type <ph id=\"ph3\">`var`</ph> (a type parameter of a generic type) or <ph id=\"ph4\">`mvar`</ph> (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <ph id=\"ph5\">&lt;code&gt;genericTypeArguments&lt;/code&gt;</ph> and <ph id=\"ph6\">&lt;code&gt;genericMethodArguments&lt;/code&gt;</ph>.","source":"<code>metadataToken</code> is a `MethodSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>."}],"pos":[128251,128712],"yaml":true},{"content":"<code>metadataToken</code> is not a valid token in the scope of the current module.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is not a valid token in the scope of the current module.","source":"<code>metadataToken</code> is not a valid token in the scope of the current module."}],"pos":[128826,128910],"yaml":true},{"content":"Returns the method or constructor identified by the specified metadata token.","nodes":[{"pos":[0,77],"content":"Returns the method or constructor identified by the specified metadata token.","nodes":[{"content":"Returns the method or constructor identified by the specified metadata token.","pos":[0,77]}]}],"pos":[130080,130158],"yaml":true},{"content":"To resolve a metadata token for a `MethodSpec` whose signature contains element type `ELEMENT_TYPE_VAR` or `ELEMENT_TYPE_MVAR`, use the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, which allows you to supply the necessary context. That is, when you are resolving a metadata token for a method that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","nodes":[{"pos":[0,565],"content":"To resolve a metadata token for a `MethodSpec` whose signature contains element type `ELEMENT_TYPE_VAR` or `ELEMENT_TYPE_MVAR`, use the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, which allows you to supply the necessary context. That is, when you are resolving a metadata token for a method that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.","nodes":[{"content":"To resolve a metadata token for a <ph id=\"ph1\">`MethodSpec`</ph> whose signature contains element type <ph id=\"ph2\">`ELEMENT_TYPE_VAR`</ph> or <ph id=\"ph3\">`ELEMENT_TYPE_MVAR`</ph>, use the <ph id=\"ph4\">&lt;xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29&gt;</ph> method overload, which allows you to supply the necessary context.","pos":[0,306],"source":"To resolve a metadata token for a `MethodSpec` whose signature contains element type `ELEMENT_TYPE_VAR` or `ELEMENT_TYPE_MVAR`, use the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, which allows you to supply the necessary context."},{"content":"That is, when you are resolving a metadata token for a method that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.","pos":[307,565]}]},{"pos":[573,1034],"content":"[!NOTE]\n Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","leadings":["","> "],"nodes":[{"content":" Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","pos":[8,459],"nodes":[{"content":"Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[1,168]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the ECMA Web site.","pos":[169,451],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site."}]}]}],"pos":[130169,131211],"yaml":true,"extradata":"MT"},{"content":"A metadata token that identifies a method or constructor in the module.","nodes":[{"pos":[0,71],"content":"A metadata token that identifies a method or constructor in the module.","nodes":[{"content":"A metadata token that identifies a method or constructor in the module.","pos":[0,71]}]}],"pos":[135144,135216],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodBase\"></xref> object representing the method or constructor that is identified by the specified metadata token.","nodes":[{"pos":[0,149],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodBase\"&gt;&lt;/xref&gt;</ph> object representing the method or constructor that is identified by the specified metadata token.","source":"A <xref href=\"System.Reflection.MethodBase\"></xref> object representing the method or constructor that is identified by the specified metadata token."}],"pos":[135288,135438],"yaml":true},{"content":"<code>metadataToken</code> is not a token for a method or constructor in the scope of the current module.  \n  \n -or-  \n  \n <code>metadataToken</code> is a `MethodSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method).","nodes":[{"pos":[0,105],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is not a token for a method or constructor in the scope of the current module.","source":"<code>metadataToken</code> is not a token for a method or constructor in the scope of the current module."},{"pos":[112,116],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[123,298],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is a <ph id=\"ph2\">`MethodSpec`</ph> whose signature contains element type <ph id=\"ph3\">`var`</ph> (a type parameter of a generic type) or <ph id=\"ph4\">`mvar`</ph> (a type parameter of a generic method).","source":"<code>metadataToken</code> is a `MethodSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method)."}],"pos":[135598,135903],"yaml":true},{"content":"<code>metadataToken</code> is not a valid token in the scope of the current module.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is not a valid token in the scope of the current module.","source":"<code>metadataToken</code> is not a valid token in the scope of the current module."}],"pos":[136017,136101],"yaml":true},{"content":"Returns the signature blob identified by a metadata token.","nodes":[{"pos":[0,58],"content":"Returns the signature blob identified by a metadata token.","nodes":[{"content":"Returns the signature blob identified by a metadata token.","pos":[0,58]}]}],"pos":[137289,137348],"yaml":true},{"content":"> [!NOTE]\n>  Information about metadata tokens and signatures can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","nodes":[{"pos":[2,478],"content":"[!NOTE]\n Information about metadata tokens and signatures can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","leadings":["","> "],"nodes":[{"content":" Information about metadata tokens and signatures can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","pos":[8,474],"nodes":[{"content":"Information about metadata tokens and signatures can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[1,183]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the ECMA Web site.","pos":[184,466],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site."}]}]}],"pos":[137359,137850],"yaml":true,"extradata":"MT"},{"content":"A metadata token that identifies a signature in the module.","nodes":[{"pos":[0,59],"content":"A metadata token that identifies a signature in the module.","nodes":[{"content":"A metadata token that identifies a signature in the module.","pos":[0,59]}]}],"pos":[138017,138077],"yaml":true},{"content":"An array of bytes representing the signature blob.","nodes":[{"pos":[0,50],"content":"An array of bytes representing the signature blob.","nodes":[{"content":"An array of bytes representing the signature blob.","pos":[0,50]}]}],"pos":[138134,138185],"yaml":true},{"content":"<code>metadataToken</code> is not a valid `MemberRef`, `MethodDef`, `TypeSpec`, signature, or `FieldDef` token in the scope of the current module.","nodes":[{"pos":[0,146],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">`MemberRef`</ph>, <ph id=\"ph3\">`MethodDef`</ph>, <ph id=\"ph4\">`TypeSpec`</ph>, signature, or <ph id=\"ph5\">`FieldDef`</ph> token in the scope of the current module.","source":"<code>metadataToken</code> is not a valid `MemberRef`, `MethodDef`, `TypeSpec`, signature, or `FieldDef` token in the scope of the current module."}],"pos":[138348,138495],"yaml":true},{"content":"<code>metadataToken</code> is not a valid token in the scope of the current module.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is not a valid token in the scope of the current module.","source":"<code>metadataToken</code> is not a valid token in the scope of the current module."}],"pos":[138609,138693],"yaml":true},{"content":"Returns the string identified by the specified metadata token.","nodes":[{"pos":[0,62],"content":"Returns the string identified by the specified metadata token.","nodes":[{"content":"Returns the string identified by the specified metadata token.","pos":[0,62]}]}],"pos":[139863,139926],"yaml":true},{"content":"> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","nodes":[{"pos":[2,463],"content":"[!NOTE]\n Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","leadings":["","> "],"nodes":[{"content":" Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","pos":[8,459],"nodes":[{"content":"Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[1,168]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the ECMA Web site.","pos":[169,451],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site."}]}]}],"pos":[139937,140413],"yaml":true,"extradata":"MT"},{"content":"A metadata token that identifies a string in the string heap of the module.","nodes":[{"pos":[0,75],"content":"A metadata token that identifies a string in the string heap of the module.","nodes":[{"content":"A metadata token that identifies a string in the string heap of the module.","pos":[0,75]}]}],"pos":[140577,140653],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> containing a string value from the metadata string heap.","nodes":[{"pos":[0,93],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing a string value from the metadata string heap.","source":"A <xref href=\"System.String\"></xref> containing a string value from the metadata string heap."}],"pos":[140710,140804],"yaml":true},{"content":"<code>metadataToken</code> is not a token for a string in the scope of the current module.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is not a token for a string in the scope of the current module.","source":"<code>metadataToken</code> is not a token for a string in the scope of the current module."}],"pos":[140964,141055],"yaml":true},{"content":"<code>metadataToken</code> is not a valid token in the scope of the current module.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is not a valid token in the scope of the current module.","source":"<code>metadataToken</code> is not a valid token in the scope of the current module."}],"pos":[141169,141253],"yaml":true},{"content":"Returns the type identified by the specified metadata token.","nodes":[{"pos":[0,60],"content":"Returns the type identified by the specified metadata token.","nodes":[{"content":"Returns the type identified by the specified metadata token.","pos":[0,60]}]}],"pos":[142411,142472],"yaml":true},{"content":"To resolve a metadata token for a `TypeSpec` whose signature contains `ELEMENT_TYPE_VAR` or `ELEMENT_TYPE_MVAR`, use the <xref:System.Reflection.Module.ResolveType%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, which allows you to supply the necessary context. That is, when you are resolving a metadata token for a type that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","nodes":[{"pos":[0,546],"content":"To resolve a metadata token for a `TypeSpec` whose signature contains `ELEMENT_TYPE_VAR` or `ELEMENT_TYPE_MVAR`, use the <xref:System.Reflection.Module.ResolveType%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, which allows you to supply the necessary context. That is, when you are resolving a metadata token for a type that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.","nodes":[{"content":"To resolve a metadata token for a <ph id=\"ph1\">`TypeSpec`</ph> whose signature contains <ph id=\"ph2\">`ELEMENT_TYPE_VAR`</ph> or <ph id=\"ph3\">`ELEMENT_TYPE_MVAR`</ph>, use the <ph id=\"ph4\">&lt;xref:System.Reflection.Module.ResolveType%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29&gt;</ph> method overload, which allows you to supply the necessary context.","pos":[0,289],"source":"To resolve a metadata token for a `TypeSpec` whose signature contains `ELEMENT_TYPE_VAR` or `ELEMENT_TYPE_MVAR`, use the <xref:System.Reflection.Module.ResolveType%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, which allows you to supply the necessary context."},{"content":"That is, when you are resolving a metadata token for a type that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.","pos":[290,546]}]},{"pos":[554,1015],"content":"[!NOTE]\n Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","leadings":["","> "],"nodes":[{"content":" Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","pos":[8,459],"nodes":[{"content":"Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[1,168]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the ECMA Web site.","pos":[169,451],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site."}]}]}],"pos":[142483,143506],"yaml":true,"extradata":"MT"},{"content":"A metadata token that identifies a type in the module.","nodes":[{"pos":[0,54],"content":"A metadata token that identifies a type in the module.","nodes":[{"content":"A metadata token that identifies a type in the module.","pos":[0,54]}]}],"pos":[143658,143713],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> object representing the type that is identified by the specified metadata token.","nodes":[{"pos":[0,115],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing the type that is identified by the specified metadata token.","source":"A <xref href=\"System.Type\"></xref> object representing the type that is identified by the specified metadata token."}],"pos":[143768,143884],"yaml":true},{"content":"<code>metadataToken</code> is not a token for a type in the scope of the current module.  \n  \n -or-  \n  \n <code>metadataToken</code> is a `TypeSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method).","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is not a token for a type in the scope of the current module.","source":"<code>metadataToken</code> is not a token for a type in the scope of the current module."},{"pos":[95,99],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[106,279],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is a <ph id=\"ph2\">`TypeSpec`</ph> whose signature contains element type <ph id=\"ph3\">`var`</ph> (a type parameter of a generic type) or <ph id=\"ph4\">`mvar`</ph> (a type parameter of a generic method).","source":"<code>metadataToken</code> is a `TypeSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method)."}],"pos":[144042,144328],"yaml":true},{"content":"<code>metadataToken</code> is not a valid token in the scope of the current module.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is not a valid token in the scope of the current module.","source":"<code>metadataToken</code> is not a valid token in the scope of the current module."}],"pos":[144442,144526],"yaml":true},{"content":"Returns the type identified by the specified metadata token, in the context defined by the specified generic type parameters.","nodes":[{"pos":[0,125],"content":"Returns the type identified by the specified metadata token, in the context defined by the specified generic type parameters.","nodes":[{"content":"Returns the type identified by the specified metadata token, in the context defined by the specified generic type parameters.","pos":[0,125]}]}],"pos":[145816,145942],"yaml":true},{"content":"Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. It is always safe to provide these arguments, even when they are not needed.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.  \n  \n For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method.","nodes":[{"pos":[0,497],"content":"Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. It is always safe to provide these arguments, even when they are not needed.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=fullName&gt;</ph> method on the type where <ph id=\"ph2\">`metadataToken`</ph> is in scope to obtain an array of generic type arguments for <ph id=\"ph3\">`genericTypeArguments`</ph>.","pos":[0,200],"source":"Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName&gt;</ph> method on the method where <ph id=\"ph2\">`metadataToken`</ph> is in scope to obtain an array of generic type arguments for <ph id=\"ph3\">`genericTypeArguments`</ph>.","pos":[201,420],"source":" Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`."},{"content":"It is always safe to provide these arguments, even when they are not needed.","pos":[421,497]}]},{"pos":[505,966],"content":"[!NOTE]\n Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","leadings":["","> "],"nodes":[{"content":" Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.","pos":[8,459],"nodes":[{"content":"Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[1,168]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the ECMA Web site.","pos":[169,451],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site."}]}]},{"pos":[973,1278],"content":"For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method.","nodes":[{"content":"For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <ph id=\"ph1\">&lt;xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29&gt;</ph> method.","pos":[0,305],"source":"For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method."}]}],"pos":[145953,147241],"yaml":true,"extradata":"MT"},{"content":"A metadata token that identifies a type in the module.","nodes":[{"pos":[0,54],"content":"A metadata token that identifies a type in the module.","nodes":[{"content":"A metadata token that identifies a type in the module.","pos":[0,54]}]}],"pos":[147461,147516],"yaml":true},{"content":"An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic.","nodes":[{"pos":[0,172],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects representing the generic type arguments of the type where the token is in scope, or <ph id=\"ph2\">`null`</ph> if that type is not generic.","source":"An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic."}],"pos":[147592,147765],"yaml":true},{"content":"An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic.","nodes":[{"pos":[0,176],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects representing the generic type arguments of the method where the token is in scope, or <ph id=\"ph2\">`null`</ph> if that method is not generic.","source":"An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic."}],"pos":[147843,148020],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> object representing the type that is identified by the specified metadata token.","nodes":[{"pos":[0,115],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing the type that is identified by the specified metadata token.","source":"A <xref href=\"System.Type\"></xref> object representing the type that is identified by the specified metadata token."}],"pos":[148075,148191],"yaml":true},{"content":"<code>metadataToken</code> is not a token for a type in the scope of the current module.  \n  \n -or-  \n  \n <code>metadataToken</code> is a `TypeSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>.","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is not a token for a type in the scope of the current module.","source":"<code>metadataToken</code> is not a token for a type in the scope of the current module."},{"pos":[95,99],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[106,435],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is a <ph id=\"ph2\">`TypeSpec`</ph> whose signature contains element type <ph id=\"ph3\">`var`</ph> (a type parameter of a generic type) or <ph id=\"ph4\">`mvar`</ph> (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <ph id=\"ph5\">&lt;code&gt;genericTypeArguments&lt;/code&gt;</ph> and <ph id=\"ph6\">&lt;code&gt;genericMethodArguments&lt;/code&gt;</ph>.","source":"<code>metadataToken</code> is a `TypeSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>."}],"pos":[148349,148791],"yaml":true},{"content":"<code>metadataToken</code> is not a valid token in the scope of the current module.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">&lt;code&gt;metadataToken&lt;/code&gt;</ph> is not a valid token in the scope of the current module.","source":"<code>metadataToken</code> is not a valid token in the scope of the current module."}],"pos":[148905,148989],"yaml":true},{"content":"Gets a string representing the name of the module.","nodes":[{"pos":[0,50],"content":"Gets a string representing the name of the module.","nodes":[{"content":"Gets a string representing the name of the module.","pos":[0,50]}]}],"pos":[150096,150147],"yaml":true},{"content":"The `ScopeName` property is not used by the common language runtime, but you can use it to store any string you want in the property when you emit a module using the metadata APIs. Reflection itself does not allow you to set the `ScopeName` property.","nodes":[{"pos":[0,250],"content":"The `ScopeName` property is not used by the common language runtime, but you can use it to store any string you want in the property when you emit a module using the metadata APIs. Reflection itself does not allow you to set the `ScopeName` property.","nodes":[{"content":"The <ph id=\"ph1\">`ScopeName`</ph> property is not used by the common language runtime, but you can use it to store any string you want in the property when you emit a module using the metadata APIs.","pos":[0,180],"source":"The `ScopeName` property is not used by the common language runtime, but you can use it to store any string you want in the property when you emit a module using the metadata APIs."},{"content":"Reflection itself does not allow you to set the <ph id=\"ph1\">`ScopeName`</ph> property.","pos":[181,250],"source":" Reflection itself does not allow you to set the `ScopeName` property."}]}],"pos":[150158,150409],"yaml":true,"extradata":"MT"},{"content":"The module name.","nodes":[{"pos":[0,16],"content":"The module name.","nodes":[{"content":"The module name.","pos":[0,16]}]}],"pos":[151101,151118],"yaml":true},{"content":"Returns the name of the module.","nodes":[{"pos":[0,31],"content":"Returns the name of the module.","nodes":[{"content":"Returns the name of the module.","pos":[0,31]}]}],"pos":[152432,152464],"yaml":true},{"content":"A `String` representing the name of this module.","nodes":[{"pos":[0,48],"content":"A <ph id=\"ph1\">`String`</ph> representing the name of this module.","source":"A `String` representing the name of this module."}],"pos":[153207,153256],"yaml":true},{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"pos":[0,67],"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","pos":[0,67]}]}],"pos":[159306,159374],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"pos":[0,186],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.","pos":[110,186],"source":" For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library."}]}],"pos":[159385,159572],"yaml":true,"extradata":"MT"},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[159772,159815],"yaml":true},{"content":"Passed-in array of names to be mapped.","nodes":[{"pos":[0,38],"content":"Passed-in array of names to be mapped.","nodes":[{"content":"Passed-in array of names to be mapped.","pos":[0,38]}]}],"pos":[159880,159919],"yaml":true},{"content":"Count of the names to be mapped.","nodes":[{"pos":[0,32],"content":"Count of the names to be mapped.","nodes":[{"content":"Count of the names to be mapped.","pos":[0,32]}]}],"pos":[159981,160014],"yaml":true},{"content":"The locale context in which to interpret the names.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret the names.","nodes":[{"content":"The locale context in which to interpret the names.","pos":[0,51]}]}],"pos":[160074,160126],"yaml":true},{"content":"Caller-allocated array that receives the IDs corresponding to the names.","nodes":[{"pos":[0,72],"content":"Caller-allocated array that receives the IDs corresponding to the names.","nodes":[{"content":"Caller-allocated array that receives the IDs corresponding to the names.","pos":[0,72]}]}],"pos":[160190,160263],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[160474,160557],"yaml":true},{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"pos":[0,114],"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","pos":[0,114]}]}],"pos":[161815,161930],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"pos":[0,184],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.","pos":[110,184],"source":" For more information about `IDispatch::GetTypeInfo`, see the MSDN Library."}]}],"pos":[161941,162126],"yaml":true,"extradata":"MT"},{"content":"The type information to return.","nodes":[{"pos":[0,31],"content":"The type information to return.","nodes":[{"content":"The type information to return.","pos":[0,31]}]}],"pos":[162294,162326],"yaml":true},{"content":"The locale identifier for the type information.","nodes":[{"pos":[0,47],"content":"The locale identifier for the type information.","nodes":[{"content":"The locale identifier for the type information.","pos":[0,47]}]}],"pos":[162386,162434],"yaml":true},{"content":"Receives a pointer to the requested type information object.","nodes":[{"pos":[0,60],"content":"Receives a pointer to the requested type information object.","nodes":[{"content":"Receives a pointer to the requested type information object.","pos":[0,60]}]}],"pos":[162497,162558],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[162767,162850],"yaml":true},{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"pos":[0,92],"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","pos":[0,92]}]}],"pos":[164009,164102],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"pos":[0,189],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.","pos":[110,189],"source":" For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library."}]}],"pos":[164113,164303],"yaml":true,"extradata":"MT"},{"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"pos":[0,100],"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"content":"Points to a location that receives the number of type information interfaces provided by the object.","pos":[0,100]}]}],"pos":[164455,164556],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[164770,164853],"yaml":true},{"content":"Provides access to properties and methods exposed by an object.","nodes":[{"pos":[0,63],"content":"Provides access to properties and methods exposed by an object.","nodes":[{"content":"Provides access to properties and methods exposed by an object.","pos":[0,63]}]}],"pos":[166396,166460],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"pos":[0,179],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::Invoke`</ph>, see the MSDN Library.","pos":[110,179],"source":" For more information about `IDispatch::Invoke`, see the MSDN Library."}]}],"pos":[166471,166651],"yaml":true,"extradata":"MT"},{"content":"Identifies the member.","nodes":[{"pos":[0,22],"content":"Identifies the member.","nodes":[{"content":"Identifies the member.","pos":[0,22]}]}],"pos":[166914,166937],"yaml":true},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[166995,167038],"yaml":true},{"content":"The locale context in which to interpret arguments.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret arguments.","nodes":[{"content":"The locale context in which to interpret arguments.","pos":[0,51]}]}],"pos":[167098,167150],"yaml":true},{"content":"Flags describing the context of the call.","nodes":[{"pos":[0,41],"content":"Flags describing the context of the call.","nodes":[{"content":"Flags describing the context of the call.","pos":[0,41]}]}],"pos":[167211,167253],"yaml":true},{"content":"Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"pos":[0,159],"content":"Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"content":"Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.","pos":[0,159]}]}],"pos":[167320,167480],"yaml":true},{"content":"Pointer to the location where the result is to be stored.","nodes":[{"pos":[0,57],"content":"Pointer to the location where the result is to be stored.","nodes":[{"content":"Pointer to the location where the result is to be stored.","pos":[0,57]}]}],"pos":[167546,167604],"yaml":true},{"content":"Pointer to a structure that contains exception information.","nodes":[{"pos":[0,59],"content":"Pointer to a structure that contains exception information.","nodes":[{"content":"Pointer to a structure that contains exception information.","pos":[0,59]}]}],"pos":[167670,167730],"yaml":true},{"content":"The index of the first argument that has an error.","nodes":[{"pos":[0,50],"content":"The index of the first argument that has an error.","nodes":[{"content":"The index of the first argument that has an error.","pos":[0,50]}]}],"pos":[167794,167845],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[168049,168132],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Module\n  commentId: T:System.Reflection.Module\n  id: Module\n  children:\n  - System.Reflection.Module.#ctor\n  - System.Reflection.Module.Assembly\n  - System.Reflection.Module.CustomAttributes\n  - System.Reflection.Module.Equals(System.Object)\n  - System.Reflection.Module.FilterTypeName\n  - System.Reflection.Module.FilterTypeNameIgnoreCase\n  - System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)\n  - System.Reflection.Module.FullyQualifiedName\n  - System.Reflection.Module.GetCustomAttributes(System.Boolean)\n  - System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.Module.GetCustomAttributesData\n  - System.Reflection.Module.GetField(System.String)\n  - System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.Module.GetFields(System.Reflection.BindingFlags)\n  - System.Reflection.Module.GetFields\n  - System.Reflection.Module.GetHashCode\n  - System.Reflection.Module.GetMethod(System.String)\n  - System.Reflection.Module.GetMethod(System.String,System.Type[])\n  - System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.Module.GetMethods\n  - System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)\n  - System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)\n  - System.Reflection.Module.GetSignerCertificate\n  - System.Reflection.Module.GetType(System.String)\n  - System.Reflection.Module.GetType(System.String,System.Boolean)\n  - System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)\n  - System.Reflection.Module.GetTypes\n  - System.Reflection.Module.IsDefined(System.Type,System.Boolean)\n  - System.Reflection.Module.IsResource\n  - System.Reflection.Module.MDStreamVersion\n  - System.Reflection.Module.MetadataToken\n  - System.Reflection.Module.ModuleHandle\n  - System.Reflection.Module.ModuleVersionId\n  - System.Reflection.Module.Name\n  - System.Reflection.Module.op_Equality(System.Reflection.Module,System.Reflection.Module)\n  - System.Reflection.Module.op_Inequality(System.Reflection.Module,System.Reflection.Module)\n  - System.Reflection.Module.ResolveField(System.Int32)\n  - System.Reflection.Module.ResolveField(System.Int32,System.Type[],System.Type[])\n  - System.Reflection.Module.ResolveMember(System.Int32)\n  - System.Reflection.Module.ResolveMember(System.Int32,System.Type[],System.Type[])\n  - System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])\n  - System.Reflection.Module.ResolveMethod(System.Int32)\n  - System.Reflection.Module.ResolveSignature(System.Int32)\n  - System.Reflection.Module.ResolveString(System.Int32)\n  - System.Reflection.Module.ResolveType(System.Int32)\n  - System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])\n  - System.Reflection.Module.ScopeName\n  - System.Reflection.Module.ToString\n  - System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.Module.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  - System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  langs:\n  - csharp\n  name: Module\n  nameWithType: Module\n  fullName: System.Reflection.Module\n  type: Class\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Performs reflection on a module.\n  remarks: \"A module is a portable executable file, such as type.dll or application.exe, consisting of one or more classes and interfaces. There may be multiple namespaces contained in a single module, and a namespace may span multiple modules.  \\n  \\n One or more modules deployed as a unit compose an assembly. For information about creating an assembly with more than one module, see [Multifile Assemblies](~/docs/framework/app-domains/multifile-assemblies.md).  \\n  \\n Note that a .NET Framework module is not the same as a module in Visual Basic, which is used by a programmers to organize functions and subroutines in an application.\"\n  example:\n  - \"The following code examples show how to use reflection to get information about modules:  \\n  \\n [!code-csharp[System.Reflection.Module#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Module#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class Module : System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._Module, System.Runtime.Serialization.ISerializable\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Reflection.Emit.ModuleBuilder\n  implements:\n  - System.Reflection.ICustomAttributeProvider\n  - System.Runtime.InteropServices._Module\n  - System.Runtime.Serialization.ISerializable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  extensionMethods:\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)\n  - System.Reflection.ModuleExtensions.GetModuleVersionId(System.Reflection.Module)\n  - System.Reflection.ModuleExtensions.HasModuleVersionId(System.Reflection.Module)\n  attributes:\n  - type: System.Runtime.InteropServices.ClassInterfaceAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.#ctor\n  commentId: M:System.Reflection.Module.#ctor\n  id: '#ctor'\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: Module()\n  nameWithType: Module.Module()\n  fullName: Module.Module()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Initializes a new instance of the <xref href=\"System.Reflection.Module\"></xref> class.\n  remarks: This constructor is invoked by derived classes during the construction of <xref:System.Reflection.Module> objects.\n  syntax:\n    content: protected Module ();\n    parameters: []\n  overload: System.Reflection.Module.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.Assembly\n  commentId: P:System.Reflection.Module.Assembly\n  id: Assembly\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: Assembly\n  nameWithType: Module.Assembly\n  fullName: Module.Assembly\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the appropriate <xref href=\"System.Reflection.Assembly\"></xref> for this instance of <xref href=\"System.Reflection.Module\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example displays the full name of the specified assembly in the specified module.  \\n  \\n [!code-cpp[System.Reflection.Module.Assembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.Assembly Example/CPP/class1.cpp#1)]\\n [!code-csharp[System.Reflection.Module.Assembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.Assembly Example/CS/class1.cs#1)]\\n [!code-vb[System.Reflection.Module.Assembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.Assembly Example/VB/class1.vb#1)]\"\n  syntax:\n    content: public virtual System.Reflection.Assembly Assembly { get; }\n    return:\n      type: System.Reflection.Assembly\n      description: An `Assembly` object.\n  overload: System.Reflection.Module.Assembly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.CustomAttributes\n  commentId: P:System.Reflection.Module.CustomAttributes\n  id: CustomAttributes\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: CustomAttributes\n  nameWithType: Module.CustomAttributes\n  fullName: Module.CustomAttributes\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a collection that contains this module's custom attributes.\n  syntax:\n    content: public virtual System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData> CustomAttributes { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}\n      description: A collection that contains this module's custom attributes.\n  overload: System.Reflection.Module.CustomAttributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.Equals(System.Object)\n  commentId: M:System.Reflection.Module.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: Module.Equals(Object)\n  fullName: Module.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Determines whether this module and the specified object are equal.\n  syntax:\n    content: public override bool Equals (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The object to compare with this instance.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>o</code> is equal to this instance; otherwise, `false`.'\n  overload: System.Reflection.Module.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.FilterTypeName\n  commentId: F:System.Reflection.Module.FilterTypeName\n  id: FilterTypeName\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: FilterTypeName\n  nameWithType: Module.FilterTypeName\n  fullName: Module.FilterTypeName\n  type: Field\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: A `TypeFilter` object that filters the list of types defined in this module based upon the name. This field is case-sensitive and read-only.\n  remarks: The filter supports a trailing \"*\" wildcard.\n  example:\n  - \"The following example displays the module names that match the specified search criteria.  \\n  \\n [!code-cpp[System.Reflection.Module.FilterTypeName Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.FilterTypeName Example/CPP/class1.cpp#1)]\\n [!code-csharp[System.Reflection.Module.FilterTypeName Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.FilterTypeName Example/CS/class1.cs#1)]\\n [!code-vb[System.Reflection.Module.FilterTypeName Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.FilterTypeName Example/VB/class1.vb#1)]\"\n  syntax:\n    content: public static readonly System.Reflection.TypeFilter FilterTypeName;\n    return:\n      type: System.Reflection.TypeFilter\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.FilterTypeNameIgnoreCase\n  commentId: F:System.Reflection.Module.FilterTypeNameIgnoreCase\n  id: FilterTypeNameIgnoreCase\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: FilterTypeNameIgnoreCase\n  nameWithType: Module.FilterTypeNameIgnoreCase\n  fullName: Module.FilterTypeNameIgnoreCase\n  type: Field\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: A `TypeFilter` object that filters the list of types defined in this module based upon the name. This field is case-insensitive and read-only.\n  remarks: The filter supports a trailing \"*\" wildcard.\n  example:\n  - \"The following example displays the module names that match the specified search criteria, ignoring the case.  \\n  \\n [!code-cpp[System.Reflection.Module.FilterTypeNameIgnoreCase Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.FilterTypeNameIgnoreCase Example/CPP/class1.cpp#1)]\\n [!code-csharp[System.Reflection.Module.FilterTypeNameIgnoreCase Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.FilterTypeNameIgnoreCase Example/CS/class1.cs#1)]\\n [!code-vb[System.Reflection.Module.FilterTypeNameIgnoreCase Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.FilterTypeNameIgnoreCase Example/VB/class1.vb#1)]\"\n  syntax:\n    content: public static readonly System.Reflection.TypeFilter FilterTypeNameIgnoreCase;\n    return:\n      type: System.Reflection.TypeFilter\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)\n  commentId: M:System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)\n  id: FindTypes(System.Reflection.TypeFilter,System.Object)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: FindTypes(TypeFilter, Object)\n  nameWithType: Module.FindTypes(TypeFilter, Object)\n  fullName: Module.FindTypes(TypeFilter, Object)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns an array of classes accepted by the given filter and filter criteria.\n  remarks: \"<xref:System.Reflection.ReflectionTypeLoadException> is a special class load exception. The `ReflectionTypeLoadException.Types` property contains the array of classes that were defined in the module and were loaded. This array may contain some null values. The `ReflectionTypeLoadException.LoaderExceptions` property is an array of exceptions that represent the exceptions that were thrown by the class loader. The holes in the class array line up with the exceptions.  \\n  \\n The delegate given by `filter` is called for each class in the module, passing along the `Type` object representing the class as well as the given `filterCriteria`. If `filter` returns a particular class, that class will be included in the returned array. If `filter` returns `null`, all classes are returned and `filterCriteria` is ignored.  \\n  \\n `FindTypes` cannot be used to look up parameterized types such as arrays.\"\n  example:\n  - \"The following example demonstrates the `FindTypes` method.  \\n  \\n [!code-cpp[System.Reflection.Module.FilterTypeName Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.FilterTypeName Example/CPP/class1.cpp#1)]\\n [!code-csharp[System.Reflection.Module.FilterTypeName Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.FilterTypeName Example/CS/class1.cs#1)]\\n [!code-vb[System.Reflection.Module.FilterTypeName Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.FilterTypeName Example/VB/class1.vb#1)]\"\n  syntax:\n    content: public virtual Type[] FindTypes (System.Reflection.TypeFilter filter, object filterCriteria);\n    parameters:\n    - id: filter\n      type: System.Reflection.TypeFilter\n      description: The delegate used to filter the classes.\n    - id: filterCriteria\n      type: System.Object\n      description: An Object used to filter the classes.\n    return:\n      type: System.Type[]\n      description: An array of type `Type` containing classes that were accepted by the filter.\n  overload: System.Reflection.Module.FindTypes*\n  exceptions:\n  - type: System.Reflection.ReflectionTypeLoadException\n    commentId: T:System.Reflection.ReflectionTypeLoadException\n    description: One or more classes in a module could not be loaded.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.FullyQualifiedName\n  commentId: P:System.Reflection.Module.FullyQualifiedName\n  id: FullyQualifiedName\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: FullyQualifiedName\n  nameWithType: Module.FullyQualifiedName\n  fullName: Module.FullyQualifiedName\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a string representing the fully qualified name and path to this module.\n  remarks: \"To get the name without the path, use <xref:System.Reflection.Module.Name%2A>.  \\n  \\n If the assembly for this module was loaded from a byte array then the `FullyQualifiedName` for the module will be: \\\\<Unknown>.  \\n  \\n> [!NOTE]\\n>  The case of module name is platform-dependent.\"\n  example:\n  - \"The following example displays the fully qualified name of the specified module.  \\n  \\n [!code-cpp[System.Reflection.Module.FullyQualifiedName#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.FullyQualifiedName/CPP/class1.cpp#1)]\\n [!code-csharp[System.Reflection.Module.FullyQualifiedName#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.FullyQualifiedName/CS/class1.cs#1)]\\n [!code-vb[System.Reflection.Module.FullyQualifiedName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.FullyQualifiedName/VB/class1.vb#1)]\"\n  syntax:\n    content: public virtual string FullyQualifiedName { get; }\n    return:\n      type: System.String\n      description: The fully qualified module name.\n  overload: System.Reflection.Module.FullyQualifiedName*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permissions.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.GetCustomAttributes(System.Boolean)\n  commentId: M:System.Reflection.Module.GetCustomAttributes(System.Boolean)\n  id: GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: GetCustomAttributes(Boolean)\n  nameWithType: Module.GetCustomAttributes(Boolean)\n  fullName: Module.GetCustomAttributes(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns all custom attributes.\n  remarks: ''\n  example:\n  - \"The following example displays the module names that match the specified search criteria.  \\n  \\n [!code-cpp[System.Reflection.Module.GetCustomAttributes 1Arg Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.GetCustomAttributes 1Arg Example/CPP/class1.cpp#1)]\\n [!code-csharp[System.Reflection.Module.GetCustomAttributes 1Arg Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.GetCustomAttributes 1Arg Example/CS/class1.cs#1)]\\n [!code-vb[System.Reflection.Module.GetCustomAttributes 1Arg Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.GetCustomAttributes 1Arg Example/VB/class1.vb#1)]\"\n  syntax:\n    content: public virtual object[] GetCustomAttributes (bool inherit);\n    parameters:\n    - id: inherit\n      type: System.Boolean\n      description: This argument is ignored for objects of this type.\n    return:\n      type: System.Object[]\n      description: An array of type `Object` containing all custom attributes.\n  overload: System.Reflection.Module.GetCustomAttributes*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)\n  id: GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: Module.GetCustomAttributes(Type, Boolean)\n  fullName: Module.GetCustomAttributes(Type, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets custom attributes of the specified type.\n  remarks: ''\n  example:\n  - \"The following example displays the module names of the specified type that match the specified search criteria.  \\n  \\n [!code-cpp[System.Reflection.Module.GetCustomAttributes 2Arg Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.GetCustomAttributes 2Arg Example/CPP/class1.cpp#1)]\\n [!code-csharp[System.Reflection.Module.GetCustomAttributes 2Arg Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.GetCustomAttributes 2Arg Example/CS/class1.cs#1)]\\n [!code-vb[System.Reflection.Module.GetCustomAttributes 2Arg Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.GetCustomAttributes 2Arg Example/VB/class1.vb#1)]\"\n  syntax:\n    content: public virtual object[] GetCustomAttributes (Type attributeType, bool inherit);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: The type of attribute to get.\n    - id: inherit\n      type: System.Boolean\n      description: This argument is ignored for objects of this type.\n    return:\n      type: System.Object[]\n      description: An array of type `Object` containing all custom attributes of the specified type.\n  overload: System.Reflection.Module.GetCustomAttributes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>attributeType</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>attributeType</code> is not a <xref href=\"System.Type\"></xref> object supplied by the runtime. For example, <code>attributeType</code> is a <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> object.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.GetCustomAttributesData\n  commentId: M:System.Reflection.Module.GetCustomAttributesData\n  id: GetCustomAttributesData\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: GetCustomAttributesData()\n  nameWithType: Module.GetCustomAttributesData()\n  fullName: Module.GetCustomAttributesData()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a list of <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects for the current module, which can be used in the reflection-only context.\n  remarks: Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context. Methods such as <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName> and <xref:System.Reflection.Module.GetCustomAttributes%2A?displayProperty=fullName> cannot be used in such cases, because they create instances of the attributes. Code in the reflection-only context cannot be executed. For more information and example code, see the <xref:System.Reflection.CustomAttributeData> class.\n  syntax:\n    content: public virtual System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}\n      description: A generic list of <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects representing data about the attributes that have been applied to the current module.\n  overload: System.Reflection.Module.GetCustomAttributesData*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.GetField(System.String)\n  commentId: M:System.Reflection.Module.GetField(System.String)\n  id: GetField(System.String)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: GetField(String)\n  nameWithType: Module.GetField(String)\n  fullName: Module.GetField(String)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a field having the specified name.\n  syntax:\n    content: public System.Reflection.FieldInfo GetField (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The field name.\n    return:\n      type: System.Reflection.FieldInfo\n      description: A `FieldInfo` object having the specified name, or `null` if the field does not exist.\n  overload: System.Reflection.Module.GetField*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>name</code> parameter is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)\n  id: GetField(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: GetField(String, BindingFlags)\n  nameWithType: Module.GetField(String, BindingFlags)\n  fullName: Module.GetField(String, BindingFlags)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a field having the specified name and binding attributes.\n  syntax:\n    content: public virtual System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: name\n      type: System.String\n      description: The field name.\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: One of the `BindingFlags` bit flags used to control the search.\n    return:\n      type: System.Reflection.FieldInfo\n      description: A `FieldInfo` object having the specified name and binding attributes, or `null` if the field does not exist.\n  overload: System.Reflection.Module.GetField*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>name</code> parameter is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.GetFields(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Module.GetFields(System.Reflection.BindingFlags)\n  id: GetFields(System.Reflection.BindingFlags)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: GetFields(BindingFlags)\n  nameWithType: Module.GetFields(BindingFlags)\n  fullName: Module.GetFields(BindingFlags)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the global fields defined on the module that match the specified binding flags.\n  remarks: The <xref:System.Reflection.Module.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.\n  syntax:\n    content: public virtual System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingFlags);\n    parameters:\n    - id: bindingFlags\n      type: System.Reflection.BindingFlags\n      description: A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values that limit the search.\n    return:\n      type: System.Reflection.FieldInfo[]\n      description: An array of type <xref href=\"System.Reflection.FieldInfo\"></xref> representing the global fields defined on the module that match the specified binding flags; if no global fields match the binding flags, an empty array is returned.\n  overload: System.Reflection.Module.GetFields*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.GetFields\n  commentId: M:System.Reflection.Module.GetFields\n  id: GetFields\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: GetFields()\n  nameWithType: Module.GetFields()\n  fullName: Module.GetFields()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the global fields defined on the module.\n  remarks: The <xref:System.Reflection.Module.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.\n  syntax:\n    content: public System.Reflection.FieldInfo[] GetFields ();\n    parameters: []\n    return:\n      type: System.Reflection.FieldInfo[]\n      description: An array of <xref href=\"System.Reflection.FieldInfo\"></xref> objects representing the global fields defined on the module; if there are no global fields, an empty array is returned.\n  overload: System.Reflection.Module.GetFields*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.GetHashCode\n  commentId: M:System.Reflection.Module.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: Module.GetHashCode()\n  fullName: Module.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the hash code for this instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer hash code.\n  overload: System.Reflection.Module.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.GetMethod(System.String)\n  commentId: M:System.Reflection.Module.GetMethod(System.String)\n  id: GetMethod(System.String)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: GetMethod(String)\n  nameWithType: Module.GetMethod(String)\n  fullName: Module.GetMethod(String)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a method having the specified name.\n  syntax:\n    content: public System.Reflection.MethodInfo GetMethod (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The method name.\n    return:\n      type: System.Reflection.MethodInfo\n      description: A `MethodInfo` object having the specified name, or `null` if the method does not exist.\n  overload: System.Reflection.Module.GetMethod*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.GetMethod(System.String,System.Type[])\n  commentId: M:System.Reflection.Module.GetMethod(System.String,System.Type[])\n  id: GetMethod(System.String,System.Type[])\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: GetMethod(String, Type[])\n  nameWithType: Module.GetMethod(String, Type[])\n  fullName: Module.GetMethod(String, Type[])\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a method having the specified name and parameter types.\n  syntax:\n    content: public System.Reflection.MethodInfo GetMethod (string name, Type[] types);\n    parameters:\n    - id: name\n      type: System.String\n      description: The method name.\n    - id: types\n      type: System.Type[]\n      description: The parameter types to search for.\n    return:\n      type: System.Reflection.MethodInfo\n      description: A `MethodInfo` object in accordance with the specified criteria, or `null` if the method does not exist.\n  overload: System.Reflection.Module.GetMethod*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`, <code>types</code> is `null`, or <code>types</code> (i) is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  commentId: M:System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  id: GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  nameWithType: Module.GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  fullName: Module.GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a method having the specified name, binding information, calling convention, and parameter types and modifiers.\n  syntax:\n    content: public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);\n    parameters:\n    - id: name\n      type: System.String\n      description: The method name.\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: One of the `BindingFlags` bit flags used to control the search.\n    - id: binder\n      type: System.Reflection.Binder\n      description: An object that implements `Binder`, containing properties related to this method.\n    - id: callConvention\n      type: System.Reflection.CallingConventions\n      description: The calling convention for the method.\n    - id: types\n      type: System.Type[]\n      description: The parameter types to search for.\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.\n    return:\n      type: System.Reflection.MethodInfo\n      description: A `MethodInfo` object in accordance with the specified criteria, or `null` if the method does not exist.\n  overload: System.Reflection.Module.GetMethod*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`, <code>types</code> is `null`, or <code>types</code> (i) is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  commentId: M:System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  id: GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  nameWithType: Module.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  fullName: Module.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the method implementation in accordance with the specified criteria.\n  syntax:\n    content: protected virtual System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);\n    parameters:\n    - id: name\n      type: System.String\n      description: The method name.\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: One of the `BindingFlags` bit flags used to control the search.\n    - id: binder\n      type: System.Reflection.Binder\n      description: An object that implements `Binder`, containing properties related to this method.\n    - id: callConvention\n      type: System.Reflection.CallingConventions\n      description: The calling convention for the method.\n    - id: types\n      type: System.Type[]\n      description: The parameter types to search for.\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.\n    return:\n      type: System.Reflection.MethodInfo\n      description: A `MethodInfo` object containing implementation information as specified, or `null` if the method does not exist.\n  overload: System.Reflection.Module.GetMethodImpl*\n  exceptions:\n  - type: System.Reflection.AmbiguousMatchException\n    commentId: T:System.Reflection.AmbiguousMatchException\n    description: <code>types</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.GetMethods\n  commentId: M:System.Reflection.Module.GetMethods\n  id: GetMethods\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: GetMethods()\n  nameWithType: Module.GetMethods()\n  fullName: Module.GetMethods()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the global methods defined on the module.\n  syntax:\n    content: public System.Reflection.MethodInfo[] GetMethods ();\n    parameters: []\n    return:\n      type: System.Reflection.MethodInfo[]\n      description: An array of <xref href=\"System.Reflection.MethodInfo\"></xref> objects representing all the global methods defined on the module; if there are no global methods, an empty array is returned.\n  overload: System.Reflection.Module.GetMethods*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)\n  id: GetMethods(System.Reflection.BindingFlags)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: GetMethods(BindingFlags)\n  nameWithType: Module.GetMethods(BindingFlags)\n  fullName: Module.GetMethods(BindingFlags)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the global methods defined on the module that match the specified binding flags.\n  syntax:\n    content: public virtual System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingFlags);\n    parameters:\n    - id: bindingFlags\n      type: System.Reflection.BindingFlags\n      description: A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values that limit the search.\n    return:\n      type: System.Reflection.MethodInfo[]\n      description: An array of type <xref href=\"System.Reflection.MethodInfo\"></xref> representing the global methods defined on the module that match the specified binding flags; if no global methods match the binding flags, an empty array is returned.\n  overload: System.Reflection.Module.GetMethods*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: Module.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: Module.GetObjectData(SerializationInfo, StreamingContext)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Provides an <xref href=\"System.Runtime.Serialization.ISerializable\"></xref> implementation for serialized objects.\n  syntax:\n    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The information and data needed to serialize or deserialize an object.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The context for the serialization.\n  overload: System.Reflection.Module.GetObjectData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>info</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)\n  commentId: M:System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)\n  id: GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: GetPEKind(PortableExecutableKinds, ImageFileMachine)\n  nameWithType: Module.GetPEKind(PortableExecutableKinds, ImageFileMachine)\n  fullName: Module.GetPEKind(PortableExecutableKinds, ImageFileMachine)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a pair of values indicating the nature of the code in a module and the platform targeted by the module.\n  syntax:\n    content: public virtual void GetPEKind (out System.Reflection.PortableExecutableKinds peKind, out System.Reflection.ImageFileMachine machine);\n    parameters:\n    - id: peKind\n      type: System.Reflection.PortableExecutableKinds\n      description: When this method returns, a combination of the <xref href=\"System.Reflection.PortableExecutableKinds\"></xref> values indicating the nature of the code in the module.\n    - id: machine\n      type: System.Reflection.ImageFileMachine\n      description: When this method returns, one of the <xref href=\"System.Reflection.ImageFileMachine\"></xref> values indicating the platform targeted by the module.\n  overload: System.Reflection.Module.GetPEKind*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.GetSignerCertificate\n  commentId: M:System.Reflection.Module.GetSignerCertificate\n  id: GetSignerCertificate\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: GetSignerCertificate()\n  nameWithType: Module.GetSignerCertificate()\n  fullName: Module.GetSignerCertificate()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Returns an `X509Certificate` object corresponding to the certificate included in the Authenticode signature of the assembly which this module belongs to. If the assembly has not been Authenticode signed, `null` is returned.\n  syntax:\n    content: public virtual System.Security.Cryptography.X509Certificates.X509Certificate GetSignerCertificate ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: An `X509Certificate` object, or `null` if the assembly to which this module belongs has not been Authenticode signed.\n  overload: System.Reflection.Module.GetSignerCertificate*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.GetType(System.String)\n  commentId: M:System.Reflection.Module.GetType(System.String)\n  id: GetType(System.String)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: GetType(String)\n  nameWithType: Module.GetType(String)\n  fullName: Module.GetType(String)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the specified type, performing a case-sensitive search.\n  remarks: \"> [!NOTE]\\n>  If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).  \\n  \\n A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>. Calling <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName> on the module that contains the manifest will not search the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>.\"\n  example:\n  - \"The following example displays the name of a type in the specified module.  \\n  \\n [!code-cpp[System.Reflection.Module.GetType 1Arg Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.GetType 1Arg Example/CPP/class1.cpp#1)]\\n [!code-csharp[System.Reflection.Module.GetType 1Arg Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.GetType 1Arg Example/CS/class1.cs#1)]\\n [!code-vb[System.Reflection.Module.GetType 1Arg Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.GetType 1Arg Example/VB/class1.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public virtual Type GetType (string className);\n    parameters:\n    - id: className\n      type: System.String\n      description: The name of the type to locate. The name must be fully qualified with the namespace.\n    return:\n      type: System.Type\n      description: A `Type` object representing the given type, if the type is in this module; otherwise, `null`.\n  overload: System.Reflection.Module.GetType*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>className</code> is `null`.\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: The class initializers are invoked and an exception is thrown.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>className</code> is a zero-length string.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>className</code> requires a dependent assembly that could not be found.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"<code>className</code> requires a dependent assembly that was found but could not be loaded.  \\n  \\n -or-  \\n  \\n The current assembly was loaded into the reflection-only context, and <code>className</code> requires a dependent assembly that was not preloaded.\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>className</code> requires a dependent assembly, but the file is not a valid assembly.  \\n  \\n -or-  \\n  \\n <code>className</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.GetType(System.String,System.Boolean)\n  commentId: M:System.Reflection.Module.GetType(System.String,System.Boolean)\n  id: GetType(System.String,System.Boolean)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: GetType(String, Boolean)\n  nameWithType: Module.GetType(String, Boolean)\n  fullName: Module.GetType(String, Boolean)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the specified type, searching the module with the specified case sensitivity.\n  remarks: \"> [!NOTE]\\n>  If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).  \\n  \\n A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>. Calling <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName> on the module that contains the manifest will not search the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>.\"\n  example:\n  - \"The following example displays the name of a type in the specified module, specifying `false` for the `ignoreCase` parameter so that case will not be ignored.  \\n  \\n [!code-cpp[System.Reflection.Module.GetType 2Arg Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.GetType 2Arg Example/CPP/class1.cpp#1)]\\n [!code-csharp[System.Reflection.Module.GetType 2Arg Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.GetType 2Arg Example/CS/class1.cs#1)]\\n [!code-vb[System.Reflection.Module.GetType 2Arg Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.GetType 2Arg Example/VB/class1.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public virtual Type GetType (string className, bool ignoreCase);\n    parameters:\n    - id: className\n      type: System.String\n      description: The name of the type to locate. The name must be fully qualified with the namespace.\n    - id: ignoreCase\n      type: System.Boolean\n      description: '`true` for case-insensitive search; otherwise, `false`.'\n    return:\n      type: System.Type\n      description: A `Type` object representing the given type, if the type is in this module; otherwise, `null`.\n  overload: System.Reflection.Module.GetType*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>className</code> is `null`.\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: The class initializers are invoked and an exception is thrown.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>className</code> is a zero-length string.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>className</code> requires a dependent assembly that could not be found.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"<code>className</code> requires a dependent assembly that was found but could not be loaded.  \\n  \\n -or-  \\n  \\n The current assembly was loaded into the reflection-only context, and <code>className</code> requires a dependent assembly that was not preloaded.\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>className</code> requires a dependent assembly, but the file is not a valid assembly.  \\n  \\n -or-  \\n  \\n <code>className</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)\n  commentId: M:System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)\n  id: GetType(System.String,System.Boolean,System.Boolean)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: GetType(String, Boolean, Boolean)\n  nameWithType: Module.GetType(String, Boolean, Boolean)\n  fullName: Module.GetType(String, Boolean, Boolean)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the specified type, specifying whether to make a case-sensitive search of the module and whether to throw an exception if the type cannot be found.\n  remarks: \"The `throwOnError` parameter affects only what happens when the type is not found. It does not affect any other exceptions that might be thrown. In particular, if the type is found but cannot be loaded, <xref:System.TypeLoadException> can be thrown even if `throwOnError` is `false`.  \\n  \\n> [!NOTE]\\n>  If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).  \\n  \\n A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>. Calling <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName> on the module that contains the manifest will not search the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>.\"\n  example:\n  - \"The following example displays the name of a type in the specified module. The `throwOnError` and `ignoreCase` parameters are specified as `false`.  \\n  \\n [!code-cpp[System.Reflection.Module.GetType 3Arg Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.GetType 3Arg Example/CPP/class1.cpp#1)]\\n [!code-csharp[System.Reflection.Module.GetType 3Arg Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.GetType 3Arg Example/CS/class1.cs#1)]\\n [!code-vb[System.Reflection.Module.GetType 3Arg Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.GetType 3Arg Example/VB/class1.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public virtual Type GetType (string className, bool throwOnError, bool ignoreCase);\n    parameters:\n    - id: className\n      type: System.String\n      description: The name of the type to locate. The name must be fully qualified with the namespace.\n    - id: throwOnError\n      type: System.Boolean\n      description: '`true` to throw an exception if the type cannot be found; `false` to return `null`.'\n    - id: ignoreCase\n      type: System.Boolean\n      description: '`true` for case-insensitive search; otherwise, `false`.'\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object representing the specified type, if the type is declared in this module; otherwise, `null`.\n  overload: System.Reflection.Module.GetType*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>className</code> is `null`.\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: The class initializers are invoked and an exception is thrown.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>className</code> is a zero-length string.\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: <code>throwOnError</code> is `true`, and the type cannot be found.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>className</code> requires a dependent assembly that could not be found.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"<code>className</code> requires a dependent assembly that was found but could not be loaded.  \\n  \\n -or-  \\n  \\n The current assembly was loaded into the reflection-only context, and <code>className</code> requires a dependent assembly that was not preloaded.\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>className</code> requires a dependent assembly, but the file is not a valid assembly.  \\n  \\n -or-  \\n  \\n <code>className</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.GetTypes\n  commentId: M:System.Reflection.Module.GetTypes\n  id: GetTypes\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: GetTypes()\n  nameWithType: Module.GetTypes()\n  fullName: Module.GetTypes()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns all the types defined within this module.\n  remarks: \"`ReflectionTypeLoadException` is a special load exception. The `ReflectionTypeLoadException.Types` property contains the array of types that were defined in the module and were loaded. This array may contain some null values. The `ReflectionTypeLoadException.LoaderExceptions` property is an array of exceptions that represent the exceptions that were thrown by the loader. The holes in the class array line up with the exceptions.  \\n  \\n For example, if the class initializers of one of the classes throws an exception while it is being loaded, a `TargetInvocationException` is stored in the corresponding element of the `LoaderExceptions` array.  \\n  \\n> [!NOTE]\\n>  If a type has been forwarded to another assembly, it is not included in the returned array. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).\"\n  syntax:\n    content: public virtual Type[] GetTypes ();\n    parameters: []\n    return:\n      type: System.Type[]\n      description: An array of type `Type` containing types defined within the module that is reflected by this instance.\n  overload: System.Reflection.Module.GetTypes*\n  exceptions:\n  - type: System.Reflection.ReflectionTypeLoadException\n    commentId: T:System.Reflection.ReflectionTypeLoadException\n    description: One or more classes in a module could not be loaded.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.IsDefined(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Module.IsDefined(System.Type,System.Boolean)\n  id: IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: IsDefined(Type, Boolean)\n  nameWithType: Module.IsDefined(Type, Boolean)\n  fullName: Module.IsDefined(Type, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a value that indicates whether the specified attribute type has been applied to this module.\n  remarks: ''\n  example:\n  - \"The following example demonstrates a use of the `IsDefined` method.  \\n  \\n [!code-cpp[System.Reflection.Module.IsDefined Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.IsDefined Example/CPP/class1.cpp#1)]\\n [!code-csharp[System.Reflection.Module.IsDefined Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.IsDefined Example/CS/class1.cs#1)]\\n [!code-vb[System.Reflection.Module.IsDefined Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.IsDefined Example/VB/class1.vb#1)]\"\n  syntax:\n    content: public virtual bool IsDefined (Type attributeType, bool inherit);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: The type of custom attribute to test for.\n    - id: inherit\n      type: System.Boolean\n      description: This argument is ignored for objects of this type.\n    return:\n      type: System.Boolean\n      description: '`true` if one or more instances of <code>attributeType</code> have been applied to this module; otherwise, `false`.'\n  overload: System.Reflection.Module.IsDefined*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>attributeType</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>attributeType</code> is not a <xref href=\"System.Type\"></xref> object supplied by the runtime. For example, <code>attributeType</code> is a <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> object.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.IsResource\n  commentId: M:System.Reflection.Module.IsResource\n  id: IsResource\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: IsResource()\n  nameWithType: Module.IsResource()\n  fullName: Module.IsResource()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the object is a resource.\n  remarks: ''\n  example:\n  - \"The following example demonstrates a use of the `IsResource` method.  \\n  \\n [!code-cpp[System.Reflection.Module.IsResource Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.IsResource Example/CPP/class1.cpp#1)]\\n [!code-csharp[System.Reflection.Module.IsResource Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.IsResource Example/CS/class1.cs#1)]\\n [!code-vb[System.Reflection.Module.IsResource Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.IsResource Example/VB/class1.vb#1)]\"\n  syntax:\n    content: public virtual bool IsResource ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the object is a resource; otherwise, `false`.'\n  overload: System.Reflection.Module.IsResource*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.MDStreamVersion\n  commentId: P:System.Reflection.Module.MDStreamVersion\n  id: MDStreamVersion\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: MDStreamVersion\n  nameWithType: Module.MDStreamVersion\n  fullName: Module.MDStreamVersion\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the metadata stream version.\n  remarks: >-\n    > [!NOTE]\n\n    >  For more information on the metadata header, see \"Partition II: Metadata Definition and Semantics\" in the Common Language Infrastructure (CLI) documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.\n  syntax:\n    content: public virtual int MDStreamVersion { get; }\n    return:\n      type: System.Int32\n      description: A 32-bit integer representing the metadata stream version. The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number.\n  overload: System.Reflection.Module.MDStreamVersion*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.MetadataToken\n  commentId: P:System.Reflection.Module.MetadataToken\n  id: MetadataToken\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: MetadataToken\n  nameWithType: Module.MetadataToken\n  fullName: Module.MetadataToken\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a token that identifies the module in metadata.\n  remarks: \"The tokens obtained using this property can be passed to the unmanaged Reflection API. For more information, see [Unmanaged Reflection API](http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8).  \\n  \\n> [!NOTE]\\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.\"\n  syntax:\n    content: public virtual int MetadataToken { get; }\n    return:\n      type: System.Int32\n      description: An integer token that identifies the current module in metadata.\n  overload: System.Reflection.Module.MetadataToken*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.ModuleHandle\n  commentId: P:System.Reflection.Module.ModuleHandle\n  id: ModuleHandle\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: ModuleHandle\n  nameWithType: Module.ModuleHandle\n  fullName: Module.ModuleHandle\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a handle for the module.\n  syntax:\n    content: public ModuleHandle ModuleHandle { get; }\n    return:\n      type: System.ModuleHandle\n      description: A <xref href=\"System.ModuleHandle\"></xref> structure for the current module.\n  overload: System.Reflection.Module.ModuleHandle*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.ModuleVersionId\n  commentId: P:System.Reflection.Module.ModuleVersionId\n  id: ModuleVersionId\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: ModuleVersionId\n  nameWithType: Module.ModuleVersionId\n  fullName: Module.ModuleVersionId\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a universally unique identifier (UUID) that can be used to distinguish between two versions of a module.\n  remarks: \"In unmanaged metadata, the GUID returned by the <xref:System.Reflection.Module.ModuleVersionId%2A> property is referred to as the `mvid`, and is stored in the GUID heap.  \\n  \\n> [!NOTE]\\n>  More information about metadata can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.\"\n  syntax:\n    content: public virtual Guid ModuleVersionId { get; }\n    return:\n      type: System.Guid\n      description: A <xref href=\"System.Guid\"></xref> that can be used to distinguish between two versions of a module.\n  overload: System.Reflection.Module.ModuleVersionId*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.Name\n  commentId: P:System.Reflection.Module.Name\n  id: Name\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: Name\n  nameWithType: Module.Name\n  fullName: Module.Name\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a `String` representing the name of the module with the path removed.\n  remarks: \"`Name` is a platform-dependent string.  \\n  \\n If the assembly for this module was loaded from a byte array then the `FullyQualifiedName` for the module will be: \\\\<Unknown>.  \\n  \\n To get the name and the path, use <xref:System.Reflection.Module.FullyQualifiedName%2A>.\"\n  example:\n  - \"This example shows the effect of the `ScopeName`, `FullyQualifiedName`, and `Name` properties.  \\n  \\n [!code-cpp[Classic Module.Name Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Module.Name Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Module.Name Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Module.Name Example/CS/source.cs#1)]\\n [!code-vb[Classic Module.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Module.Name Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual string Name { get; }\n    return:\n      type: System.String\n      description: The module name with no path.\n  overload: System.Reflection.Module.Name*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.op_Equality(System.Reflection.Module,System.Reflection.Module)\n  commentId: M:System.Reflection.Module.op_Equality(System.Reflection.Module,System.Reflection.Module)\n  id: op_Equality(System.Reflection.Module,System.Reflection.Module)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: op_Equality(Module, Module)\n  nameWithType: Module.op_Equality(Module, Module)\n  fullName: Module.op_Equality(Module, Module)\n  type: Operator\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Indicates whether two <xref href=\"System.Reflection.Module\"></xref> objects are equal.\n  syntax:\n    content: public static bool op_Equality (System.Reflection.Module left, System.Reflection.Module right);\n    parameters:\n    - id: left\n      type: System.Reflection.Module\n      description: The first object to compare.\n    - id: right\n      type: System.Reflection.Module\n      description: The second object to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`.'\n  overload: System.Reflection.Module.op_Equality*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.op_Inequality(System.Reflection.Module,System.Reflection.Module)\n  commentId: M:System.Reflection.Module.op_Inequality(System.Reflection.Module,System.Reflection.Module)\n  id: op_Inequality(System.Reflection.Module,System.Reflection.Module)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: op_Inequality(Module, Module)\n  nameWithType: Module.op_Inequality(Module, Module)\n  fullName: Module.op_Inequality(Module, Module)\n  type: Operator\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Indicates whether two <xref href=\"System.Reflection.Module\"></xref> objects are not equal.\n  syntax:\n    content: public static bool op_Inequality (System.Reflection.Module left, System.Reflection.Module right);\n    parameters:\n    - id: left\n      type: System.Reflection.Module\n      description: The first object to compare.\n    - id: right\n      type: System.Reflection.Module\n      description: The second object to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`.'\n  overload: System.Reflection.Module.op_Inequality*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.ResolveField(System.Int32)\n  commentId: M:System.Reflection.Module.ResolveField(System.Int32)\n  id: ResolveField(System.Int32)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: ResolveField(Int32)\n  nameWithType: Module.ResolveField(Int32)\n  fullName: Module.ResolveField(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the field identified by the specified metadata token.\n  remarks: \"To resolve a metadata token that identifies a field whose parent `TypeSpec` has a signature containing element type `ELEMENT_TYPE_VAR` or `ELEMENT_TYPE_MVAR`, use the <xref:System.Reflection.Module.ResolveField%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, which allows you to supply the necessary context. That is, when you are resolving a metadata token for a field that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.  \\n  \\n> [!NOTE]\\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.  \\n  \\n For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method.\"\n  syntax:\n    content: public System.Reflection.FieldInfo ResolveField (int metadataToken);\n    parameters:\n    - id: metadataToken\n      type: System.Int32\n      description: A metadata token that identifies a field in the module.\n    return:\n      type: System.Reflection.FieldInfo\n      description: A <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field that is identified by the specified metadata token.\n  overload: System.Reflection.Module.ResolveField*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>metadataToken</code> is not a token for a field in the scope of the current module.  \\n  \\n -or-  \\n  \\n <code>metadataToken</code> identifies a field whose parent `TypeSpec` has a signature containing element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method).\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>metadataToken</code> is not a valid token in the scope of the current module.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.ResolveField(System.Int32,System.Type[],System.Type[])\n  commentId: M:System.Reflection.Module.ResolveField(System.Int32,System.Type[],System.Type[])\n  id: ResolveField(System.Int32,System.Type[],System.Type[])\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: ResolveField(Int32, Type[], Type[])\n  nameWithType: Module.ResolveField(Int32, Type[], Type[])\n  fullName: Module.ResolveField(Int32, Type[], Type[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the field identified by the specified metadata token, in the context defined by the specified generic type parameters.\n  remarks: \"Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. It is always safe to provide these arguments, even when they are not needed.  \\n  \\n> [!NOTE]\\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.  \\n  \\n For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method.\"\n  syntax:\n    content: public virtual System.Reflection.FieldInfo ResolveField (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);\n    parameters:\n    - id: metadataToken\n      type: System.Int32\n      description: A metadata token that identifies a field in the module.\n    - id: genericTypeArguments\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic.\n    - id: genericMethodArguments\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic.\n    return:\n      type: System.Reflection.FieldInfo\n      description: A <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field that is identified by the specified metadata token.\n  overload: System.Reflection.Module.ResolveField*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>metadataToken</code> is not a token for a field in the scope of the current module.  \\n  \\n -or-  \\n  \\n <code>metadataToken</code> identifies a field whose parent `TypeSpec` has a signature containing element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>metadataToken</code> is not a valid token in the scope of the current module.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.ResolveMember(System.Int32)\n  commentId: M:System.Reflection.Module.ResolveMember(System.Int32)\n  id: ResolveMember(System.Int32)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: ResolveMember(Int32)\n  nameWithType: Module.ResolveMember(Int32)\n  fullName: Module.ResolveMember(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the type or member identified by the specified metadata token.\n  remarks: \"To resolve a metadata token for a `MethodSpec` or `TypeSpec` whose signature contains element type `ELEMENT_TYPE_VAR` or `ELEMENT_TYPE_MVAR`, use the <xref:System.Reflection.Module.ResolveMember%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, which allows you to supply the necessary context. That is, when you are resolving a metadata token for a member that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.  \\n  \\n> [!NOTE]\\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.  \\n  \\n For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method.\"\n  syntax:\n    content: public System.Reflection.MemberInfo ResolveMember (int metadataToken);\n    parameters:\n    - id: metadataToken\n      type: System.Int32\n      description: A metadata token that identifies a type or member in the module.\n    return:\n      type: System.Reflection.MemberInfo\n      description: A <xref href=\"System.Reflection.MemberInfo\"></xref> object representing the type or member that is identified by the specified metadata token.\n  overload: System.Reflection.Module.ResolveMember*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>metadataToken</code> is not a token for a type or member in the scope of the current module.  \\n  \\n -or-  \\n  \\n <code>metadataToken</code> is a `MethodSpec` or `TypeSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method).  \\n  \\n -or-  \\n  \\n <code>metadataToken</code> identifies a property or event.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>metadataToken</code> is not a valid token in the scope of the current module.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.ResolveMember(System.Int32,System.Type[],System.Type[])\n  commentId: M:System.Reflection.Module.ResolveMember(System.Int32,System.Type[],System.Type[])\n  id: ResolveMember(System.Int32,System.Type[],System.Type[])\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: ResolveMember(Int32, Type[], Type[])\n  nameWithType: Module.ResolveMember(Int32, Type[], Type[])\n  fullName: Module.ResolveMember(Int32, Type[], Type[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the type or member identified by the specified metadata token, in the context defined by the specified generic type parameters.\n  remarks: \"Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. It is always safe to provide these arguments, even when they are not needed.  \\n  \\n> [!NOTE]\\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.  \\n  \\n For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method.\"\n  syntax:\n    content: public virtual System.Reflection.MemberInfo ResolveMember (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);\n    parameters:\n    - id: metadataToken\n      type: System.Int32\n      description: A metadata token that identifies a type or member in the module.\n    - id: genericTypeArguments\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic.\n    - id: genericMethodArguments\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic.\n    return:\n      type: System.Reflection.MemberInfo\n      description: A <xref href=\"System.Reflection.MemberInfo\"></xref> object representing the type or member that is identified by the specified metadata token.\n  overload: System.Reflection.Module.ResolveMember*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>metadataToken</code> is not a token for a type or member in the scope of the current module.  \\n  \\n -or-  \\n  \\n <code>metadataToken</code> is a `MethodSpec` or `TypeSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>.  \\n  \\n -or-  \\n  \\n <code>metadataToken</code> identifies a property or event.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>metadataToken</code> is not a valid token in the scope of the current module.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])\n  commentId: M:System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])\n  id: ResolveMethod(System.Int32,System.Type[],System.Type[])\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: ResolveMethod(Int32, Type[], Type[])\n  nameWithType: Module.ResolveMethod(Int32, Type[], Type[])\n  fullName: Module.ResolveMethod(Int32, Type[], Type[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the method or constructor identified by the specified metadata token, in the context defined by the specified generic type parameters.\n  remarks: \"Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where `metadataToken` is in scope to obtain an array of generic type arguments for `genericMethodArguments`. It is always safe to provide these arguments, even when they are not needed.  \\n  \\n> [!NOTE]\\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.\"\n  example:\n  - \"The following example shows how to use the two overloads of the <xref:System.Reflection.Module.ResolveMethod%2A> method to resolve metadata tokens from call sites in generic and non-generic contexts.  \\n  \\n The code example defines two generic types, `G1<Tg1>` and `G2<Tg2>`, each of which has a generic method. `G1<Tg1>` also has a non-generic method that uses the type parameter `Tg1` for its parameter. The generic method `GM2<Tgm2>` in type `G2<Tg2>` contains several method calls:  \\n  \\n-   Case 1: The generic method `GM1<Tgm1>` is called, using the type parameters of `G2<Tg2>` and `GM2<Tgm2>` as the type arguments. In other words, the parameter types of the called method will depend on the types that are used to construct a closed generic type from the type definition for `G2<Tg2>`.  \\n  \\n-   Case 2: The non-generic method `M1` is called. The parameter of this method uses the type parameter of the defining type, `G1<Tg1>`, which is replaced in this case by the type parameter of the enclosing type, `G2<Tg2>`.  \\n  \\n-   Case 3: The generic method `GM1<Tgm1>` is called, specifying <xref:System.Int32> and <xref:System.Object> for the type arguments of the generic type and the generic method, respectively. This method call does not depend on the type parameters of the enclosing type or method.  \\n  \\n-   Case 4: The non-generic method `M1` of the `Example` class is called. This method call does not depend on the type parameters of the enclosing type or method.  \\n  \\n In addition, the example defines the non-generic `Example` class. This class has a method `M` that makes a call to a generic method.  \\n  \\n-   Case 5: The generic method `GM1<Tgm1>` is called, specifying <xref:System.Int32> and <xref:System.Object> for the type arguments of the generic type and the generic method, respectively. The context for this method has no enclosing generic type or generic method.  \\n  \\n For each case, the example first constructs a <xref:System.Reflection.MethodInfo> that represents the called method, and then resolves the token using the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, using the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> methods to get the values for the `genericTypeArguments` and `genericMethodArguments` parameters. This technique works in all cases, because the methods return <xref:System.Type.EmptyTypes?displayProperty=fullName> for non-generic contexts. The example compares the resolved <xref:System.Reflection.MethodInfo> with the constructed <xref:System.Reflection.MethodInfo>.  \\n  \\n The example then attempts to use the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%29> method overload to resolve the token. This works in cases 3, 4, and 5, because the method calls do not depend on the generic context. In cases 1 and 2, an exception is thrown because there is insufficient information to resolve the token.  \\n  \\n The metadata token values are hard-coded as an enumeration. If you change this code example, the token values are likely to change. To determine the new token values, compile the code and use Ildasm.exe with the **/TOKENS** option to examine the assembly. The tokens can be found at the points of call. Insert the new values into the enumeration, and recompile the example.  \\n  \\n [!code-csharp[Module.MethodResolve#1](~/samples/snippets/csharp/VS_Snippets_CLR/Module.MethodResolve/cs/source.cs#1)]\\n [!code-vb[Module.MethodResolve#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Module.MethodResolve/vb/source.vb#1)]\"\n  syntax:\n    content: public virtual System.Reflection.MethodBase ResolveMethod (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);\n    parameters:\n    - id: metadataToken\n      type: System.Int32\n      description: A metadata token that identifies a method or constructor in the module.\n    - id: genericTypeArguments\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic.\n    - id: genericMethodArguments\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic.\n    return:\n      type: System.Reflection.MethodBase\n      description: A <xref href=\"System.Reflection.MethodBase\"></xref> object representing the method that is identified by the specified metadata token.\n  overload: System.Reflection.Module.ResolveMethod*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>metadataToken</code> is not a token for a method or constructor in the scope of the current module.  \\n  \\n -or-  \\n  \\n <code>metadataToken</code> is a `MethodSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>metadataToken</code> is not a valid token in the scope of the current module.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.ResolveMethod(System.Int32)\n  commentId: M:System.Reflection.Module.ResolveMethod(System.Int32)\n  id: ResolveMethod(System.Int32)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: ResolveMethod(Int32)\n  nameWithType: Module.ResolveMethod(Int32)\n  fullName: Module.ResolveMethod(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the method or constructor identified by the specified metadata token.\n  remarks: \"To resolve a metadata token for a `MethodSpec` whose signature contains element type `ELEMENT_TYPE_VAR` or `ELEMENT_TYPE_MVAR`, use the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, which allows you to supply the necessary context. That is, when you are resolving a metadata token for a method that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.  \\n  \\n> [!NOTE]\\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.\"\n  example:\n  - \"The following example shows how to use the two overloads of the <xref:System.Reflection.Module.ResolveMethod%2A> method to resolve metadata tokens from call sites in generic and non-generic contexts.  \\n  \\n The code example defines two generic types, `G1<Tg1>` and `G2<Tg2>` (`G1(Of Tg1)` and `G2(Of Tg2)` in Visual Basic), each of which has a generic method. `G1<Tg1>` also has a non-generic method that uses the type parameter `Tg1` for its parameter. The generic method `GM2<Tgm2>` in type `G2<Tg2>` contains several method calls:  \\n  \\n-   Case 1: The generic method `GM1<Tgm1>` is called, using the type parameters of `G2<Tg2>` and `GM2<Tgm2>` as the type arguments. In other words, the parameter types of the called method will depend on the types that are used to construct a closed generic type from the type definition for `G2<Tg2>`.  \\n  \\n-   Case 2: The non-generic method `M1` is called. The parameter of this method uses the type parameter of the defining type, `G1<Tg1>`, which is replaced in this case by the type parameter of the enclosing type, `G2<Tg2>`.  \\n  \\n-   Case 3: The generic method `GM1<Tgm1>` is called, specifying <xref:System.Int32> and <xref:System.Object> for the type arguments of the generic type and the generic method, respectively. This method call does not depend on the type parameters of the enclosing type or method.  \\n  \\n-   Case 4: The non-generic method `M1` of the `Example` class is called. This method call does not depend on the type parameters of the enclosing type or method.  \\n  \\n In addition, the example defines the non-generic `Example` class. This class has a method `M` that makes a call to a generic method:  \\n  \\n-   Case 5: The generic method `GM1` is called, specifying <xref:System.Int32> and <xref:System.Object> for the type arguments of the generic type and the generic method, respectively. The context for this method has no enclosing generic type or generic method.  \\n  \\n For each case, the example first constructs a <xref:System.Reflection.MethodInfo> that represents the called method, and then resolves the token using the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, using the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> methods to get the values for the `genericTypeArguments` and `genericMethodArguments` parameters. This technique works in all cases, because the methods return <xref:System.Type.EmptyTypes?displayProperty=fullName> for non-generic contexts. The example compares the resolved <xref:System.Reflection.MethodInfo> with the constructed <xref:System.Reflection.MethodInfo>.  \\n  \\n The example then attempts to use the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%29> method overload to resolve the token. This works in cases 3, 4, and 5, because the method calls do not depend on the generic context. In cases 1 and 2, an exception is thrown because there is insufficient information to resolve the token.  \\n  \\n The metadata token values are hard-coded as an enumeration. If you change this code example, the token values are likely to change. To determine the new token values, compile the code and use Ildasm.exe with the **/TOKENS** option to examine the assembly. The tokens can be found at the points of call. Insert the new values into the enumeration, and recompile the example.  \\n  \\n [!code-csharp[Module.MethodResolve#1](~/samples/snippets/csharp/VS_Snippets_CLR/Module.MethodResolve/cs/source.cs#1)]\\n [!code-vb[Module.MethodResolve#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Module.MethodResolve/vb/source.vb#1)]\"\n  syntax:\n    content: public System.Reflection.MethodBase ResolveMethod (int metadataToken);\n    parameters:\n    - id: metadataToken\n      type: System.Int32\n      description: A metadata token that identifies a method or constructor in the module.\n    return:\n      type: System.Reflection.MethodBase\n      description: A <xref href=\"System.Reflection.MethodBase\"></xref> object representing the method or constructor that is identified by the specified metadata token.\n  overload: System.Reflection.Module.ResolveMethod*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>metadataToken</code> is not a token for a method or constructor in the scope of the current module.  \\n  \\n -or-  \\n  \\n <code>metadataToken</code> is a `MethodSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method).\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>metadataToken</code> is not a valid token in the scope of the current module.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.ResolveSignature(System.Int32)\n  commentId: M:System.Reflection.Module.ResolveSignature(System.Int32)\n  id: ResolveSignature(System.Int32)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: ResolveSignature(Int32)\n  nameWithType: Module.ResolveSignature(Int32)\n  fullName: Module.ResolveSignature(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the signature blob identified by a metadata token.\n  remarks: >-\n    > [!NOTE]\n\n    >  Information about metadata tokens and signatures can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.\n  syntax:\n    content: public virtual byte[] ResolveSignature (int metadataToken);\n    parameters:\n    - id: metadataToken\n      type: System.Int32\n      description: A metadata token that identifies a signature in the module.\n    return:\n      type: System.Byte[]\n      description: An array of bytes representing the signature blob.\n  overload: System.Reflection.Module.ResolveSignature*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>metadataToken</code> is not a valid `MemberRef`, `MethodDef`, `TypeSpec`, signature, or `FieldDef` token in the scope of the current module.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>metadataToken</code> is not a valid token in the scope of the current module.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.ResolveString(System.Int32)\n  commentId: M:System.Reflection.Module.ResolveString(System.Int32)\n  id: ResolveString(System.Int32)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: ResolveString(Int32)\n  nameWithType: Module.ResolveString(Int32)\n  fullName: Module.ResolveString(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the string identified by the specified metadata token.\n  remarks: >-\n    > [!NOTE]\n\n    >  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.\n  syntax:\n    content: public virtual string ResolveString (int metadataToken);\n    parameters:\n    - id: metadataToken\n      type: System.Int32\n      description: A metadata token that identifies a string in the string heap of the module.\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> containing a string value from the metadata string heap.\n  overload: System.Reflection.Module.ResolveString*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>metadataToken</code> is not a token for a string in the scope of the current module.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>metadataToken</code> is not a valid token in the scope of the current module.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.ResolveType(System.Int32)\n  commentId: M:System.Reflection.Module.ResolveType(System.Int32)\n  id: ResolveType(System.Int32)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: ResolveType(Int32)\n  nameWithType: Module.ResolveType(Int32)\n  fullName: Module.ResolveType(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the type identified by the specified metadata token.\n  remarks: \"To resolve a metadata token for a `TypeSpec` whose signature contains `ELEMENT_TYPE_VAR` or `ELEMENT_TYPE_MVAR`, use the <xref:System.Reflection.Module.ResolveType%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload, which allows you to supply the necessary context. That is, when you are resolving a metadata token for a type that depends on the generic type parameters of the generic type and/or the generic method in which the token is embedded, you must use the overload that allows you to supply those type parameters.  \\n  \\n> [!NOTE]\\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.\"\n  syntax:\n    content: public Type ResolveType (int metadataToken);\n    parameters:\n    - id: metadataToken\n      type: System.Int32\n      description: A metadata token that identifies a type in the module.\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object representing the type that is identified by the specified metadata token.\n  overload: System.Reflection.Module.ResolveType*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>metadataToken</code> is not a token for a type in the scope of the current module.  \\n  \\n -or-  \\n  \\n <code>metadataToken</code> is a `TypeSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method).\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>metadataToken</code> is not a valid token in the scope of the current module.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])\n  commentId: M:System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])\n  id: ResolveType(System.Int32,System.Type[],System.Type[])\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: ResolveType(Int32, Type[], Type[])\n  nameWithType: Module.ResolveType(Int32, Type[], Type[])\n  fullName: Module.ResolveType(Int32, Type[], Type[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the type identified by the specified metadata token, in the context defined by the specified generic type parameters.\n  remarks: \"Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where `metadataToken` is in scope to obtain an array of generic type arguments for `genericTypeArguments`. It is always safe to provide these arguments, even when they are not needed.  \\n  \\n> [!NOTE]\\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.  \\n  \\n For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the <xref:System.Reflection.Module.ResolveMethod%28System.Int32%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method.\"\n  syntax:\n    content: public virtual Type ResolveType (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);\n    parameters:\n    - id: metadataToken\n      type: System.Int32\n      description: A metadata token that identifies a type in the module.\n    - id: genericTypeArguments\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic.\n    - id: genericMethodArguments\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic.\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object representing the type that is identified by the specified metadata token.\n  overload: System.Reflection.Module.ResolveType*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>metadataToken</code> is not a token for a type in the scope of the current module.  \\n  \\n -or-  \\n  \\n <code>metadataToken</code> is a `TypeSpec` whose signature contains element type `var` (a type parameter of a generic type) or `mvar` (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of <code>genericTypeArguments</code> and <code>genericMethodArguments</code>.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>metadataToken</code> is not a valid token in the scope of the current module.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.ScopeName\n  commentId: P:System.Reflection.Module.ScopeName\n  id: ScopeName\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: ScopeName\n  nameWithType: Module.ScopeName\n  fullName: Module.ScopeName\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a string representing the name of the module.\n  remarks: The `ScopeName` property is not used by the common language runtime, but you can use it to store any string you want in the property when you emit a module using the metadata APIs. Reflection itself does not allow you to set the `ScopeName` property.\n  example:\n  - \"This example shows the effect of the `ScopeName`, `FullyQualifiedName`, and `Name` properties.  \\n  \\n [!code-cpp[Classic Module.ScopeName Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Module.ScopeName Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Module.ScopeName Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Module.ScopeName Example/CS/source.cs#1)]\\n [!code-vb[Classic Module.ScopeName Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Module.ScopeName Example/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual string ScopeName { get; }\n    return:\n      type: System.String\n      description: The module name.\n  overload: System.Reflection.Module.ScopeName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.ToString\n  commentId: M:System.Reflection.Module.ToString\n  id: ToString\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: Module.ToString()\n  fullName: Module.ToString()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the name of the module.\n  remarks: ''\n  example:\n  - \"The following example demonstrates a use of the `ToString` method.  \\n  \\n [!code-cpp[System.Reflection.Module.ToString Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Module.ToString Example/CPP/class1.cpp#1)]\\n [!code-csharp[System.Reflection.Module.ToString Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Module.ToString Example/CS/class1.cs#1)]\\n [!code-vb[System.Reflection.Module.ToString Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Module.ToString Example/VB/class1.vb#1)]\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A `String` representing the name of this module.\n  overload: System.Reflection.Module.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  commentId: M:System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  id: System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  isEii: true\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType: Module.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: Module.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  type: Method\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: object[] ICustomAttributeProvider.GetCustomAttributes (bool inherit);\n    parameters:\n    - id: inherit\n      type: System.Boolean\n      description: ''\n    return:\n      type: System.Object[]\n      description: ''\n  overload: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.5\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  id: System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  isEii: true\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType: Module.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: Module.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  type: Method\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: object[] ICustomAttributeProvider.GetCustomAttributes (Type attributeType, bool inherit);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: ''\n    - id: inherit\n      type: System.Boolean\n      description: ''\n    return:\n      type: System.Object[]\n      description: ''\n  overload: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.5\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Module.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  id: System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  isEii: true\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType: Module.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: Module.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  type: Method\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: bool ICustomAttributeProvider.IsDefined (Type attributeType, bool inherit);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: ''\n    - id: inherit\n      type: System.Boolean\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#IsDefined*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.5\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_Module#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: _Module.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: Module._Module.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: Module._Module.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Maps a set of names to a corresponding set of dispatch identifiers.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.\n  syntax:\n    content: void _Module.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);\n    parameters:\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: rgszNames\n      type: System.IntPtr\n      description: Passed-in array of names to be mapped.\n    - id: cNames\n      type: System.UInt32\n      description: Count of the names to be mapped.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret the names.\n    - id: rgDispId\n      type: System.IntPtr\n      description: Caller-allocated array that receives the IDs corresponding to the names.\n  overload: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_Module#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: _Module.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: Module._Module.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: Module._Module.GetTypeInfo(UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.\n  syntax:\n    content: void _Module.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);\n    parameters:\n    - id: iTInfo\n      type: System.UInt32\n      description: The type information to return.\n    - id: lcid\n      type: System.UInt32\n      description: The locale identifier for the type information.\n    - id: ppTInfo\n      type: System.IntPtr\n      description: Receives a pointer to the requested type information object.\n  overload: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount(System.UInt32@)\n  commentId: M:System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount(System.UInt32@)\n  id: System#Runtime#InteropServices#_Module#GetTypeInfoCount(System.UInt32@)\n  isEii: true\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: _Module.GetTypeInfoCount(UInt32)\n  nameWithType: Module._Module.GetTypeInfoCount(UInt32)\n  fullName: Module._Module.GetTypeInfoCount(UInt32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.\n  syntax:\n    content: void _Module.GetTypeInfoCount (out uint pcTInfo);\n    parameters:\n    - id: pcTInfo\n      type: System.UInt32\n      description: Points to a location that receives the number of type information interfaces provided by the object.\n  overload: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  commentId: M:System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  id: System#Runtime#InteropServices#_Module#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  name: _Module.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: Module._Module.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: Module._Module.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Provides access to properties and methods exposed by an object.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.\n  syntax:\n    content: void _Module.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);\n    parameters:\n    - id: dispIdMember\n      type: System.UInt32\n      description: Identifies the member.\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret arguments.\n    - id: wFlags\n      type: System.Int16\n      description: Flags describing the context of the call.\n    - id: pDispParams\n      type: System.IntPtr\n      description: Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.\n    - id: pVarResult\n      type: System.IntPtr\n      description: Pointer to the location where the result is to be stored.\n    - id: pExcepInfo\n      type: System.IntPtr\n      description: Pointer to a structure that contains exception information.\n    - id: puArgErr\n      type: System.IntPtr\n      description: The index of the first argument that has an error.\n  overload: System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Reflection.ReflectionTypeLoadException\n  parent: System.Reflection\n  isExternal: false\n  name: ReflectionTypeLoadException\n  nameWithType: ReflectionTypeLoadException\n  fullName: System.Reflection.ReflectionTypeLoadException\n- uid: System.Security.SecurityException\n  parent: System.Security\n  isExternal: false\n  name: SecurityException\n  nameWithType: SecurityException\n  fullName: System.Security.SecurityException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Reflection.AmbiguousMatchException\n  parent: System.Reflection\n  isExternal: false\n  name: AmbiguousMatchException\n  nameWithType: AmbiguousMatchException\n  fullName: System.Reflection.AmbiguousMatchException\n- uid: System.Reflection.TargetInvocationException\n  parent: System.Reflection\n  isExternal: false\n  name: TargetInvocationException\n  nameWithType: TargetInvocationException\n  fullName: System.Reflection.TargetInvocationException\n- uid: System.IO.FileNotFoundException\n  parent: System.IO\n  isExternal: false\n  name: FileNotFoundException\n  nameWithType: FileNotFoundException\n  fullName: System.IO.FileNotFoundException\n- uid: System.IO.FileLoadException\n  parent: System.IO\n  isExternal: false\n  name: FileLoadException\n  nameWithType: FileLoadException\n  fullName: System.IO.FileLoadException\n- uid: System.BadImageFormatException\n  parent: System\n  isExternal: false\n  name: BadImageFormatException\n  nameWithType: BadImageFormatException\n  fullName: System.BadImageFormatException\n- uid: System.TypeLoadException\n  parent: System\n  isExternal: false\n  name: TypeLoadException\n  nameWithType: TypeLoadException\n  fullName: System.TypeLoadException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.NotImplementedException\n  parent: System\n  isExternal: false\n  name: NotImplementedException\n  nameWithType: NotImplementedException\n  fullName: System.NotImplementedException\n- uid: System.Reflection.Module.#ctor\n  parent: System.Reflection.Module\n  isExternal: false\n  name: Module()\n  nameWithType: Module.Module()\n  fullName: Module.Module()\n- uid: System.Reflection.Module.Assembly\n  parent: System.Reflection.Module\n  isExternal: false\n  name: Assembly\n  nameWithType: Module.Assembly\n  fullName: Module.Assembly\n- uid: System.Reflection.Assembly\n  parent: System.Reflection\n  isExternal: false\n  name: Assembly\n  nameWithType: Assembly\n  fullName: System.Reflection.Assembly\n- uid: System.Reflection.Module.CustomAttributes\n  parent: System.Reflection.Module\n  isExternal: false\n  name: CustomAttributes\n  nameWithType: Module.CustomAttributes\n  fullName: Module.CustomAttributes\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Reflection.CustomAttributeData\n  name: CustomAttributeData\n  nameWithType: CustomAttributeData\n  fullName: System.Reflection.CustomAttributeData\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<CustomAttributeData>\n  nameWithType: IEnumerable<CustomAttributeData>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Reflection.CustomAttributeData\n    name: CustomAttributeData\n    nameWithType: CustomAttributeData\n    fullName: System.Reflection.CustomAttributeData\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Reflection.Module.Equals(System.Object)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Module.Equals(Object)\n  fullName: Module.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.Module.FilterTypeName\n  parent: System.Reflection.Module\n  isExternal: false\n  name: FilterTypeName\n  nameWithType: Module.FilterTypeName\n  fullName: Module.FilterTypeName\n- uid: System.Reflection.TypeFilter\n  parent: System.Reflection\n  isExternal: false\n  name: TypeFilter\n  nameWithType: TypeFilter\n  fullName: System.Reflection.TypeFilter\n- uid: System.Reflection.Module.FilterTypeNameIgnoreCase\n  parent: System.Reflection.Module\n  isExternal: false\n  name: FilterTypeNameIgnoreCase\n  nameWithType: Module.FilterTypeNameIgnoreCase\n  fullName: Module.FilterTypeNameIgnoreCase\n- uid: System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: FindTypes(TypeFilter, Object)\n  nameWithType: Module.FindTypes(TypeFilter, Object)\n  fullName: Module.FindTypes(TypeFilter, Object)\n- uid: System.Type\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Type[]\n  parent: System\n  isExternal: false\n  name: Type[]\n  nameWithType: Type[]\n  fullName: System.Type[]\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Module.FullyQualifiedName\n  parent: System.Reflection.Module\n  isExternal: false\n  name: FullyQualifiedName\n  nameWithType: Module.FullyQualifiedName\n  fullName: Module.FullyQualifiedName\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Reflection.Module.GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetCustomAttributes(Boolean)\n  nameWithType: Module.GetCustomAttributes(Boolean)\n  fullName: Module.GetCustomAttributes(Boolean)\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: Module.GetCustomAttributes(Type, Boolean)\n  fullName: Module.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.Module.GetCustomAttributesData\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetCustomAttributesData()\n  nameWithType: Module.GetCustomAttributesData()\n  fullName: Module.GetCustomAttributesData()\n- uid: System.Collections.Generic.IList`1\n  name: IList<T>\n  nameWithType: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<CustomAttributeData>\n  nameWithType: IList<CustomAttributeData>\n  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeData>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Reflection.CustomAttributeData\n    name: CustomAttributeData\n    nameWithType: CustomAttributeData\n    fullName: System.Reflection.CustomAttributeData\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Reflection.Module.GetField(System.String)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetField(String)\n  nameWithType: Module.GetField(String)\n  fullName: Module.GetField(String)\n- uid: System.Reflection.FieldInfo\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo\n  nameWithType: FieldInfo\n  fullName: System.Reflection.FieldInfo\n- uid: System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetField(String, BindingFlags)\n  nameWithType: Module.GetField(String, BindingFlags)\n  fullName: Module.GetField(String, BindingFlags)\n- uid: System.Reflection.BindingFlags\n  parent: System.Reflection\n  isExternal: false\n  name: BindingFlags\n  nameWithType: BindingFlags\n  fullName: System.Reflection.BindingFlags\n- uid: System.Reflection.Module.GetFields(System.Reflection.BindingFlags)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetFields(BindingFlags)\n  nameWithType: Module.GetFields(BindingFlags)\n  fullName: Module.GetFields(BindingFlags)\n- uid: System.Reflection.FieldInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo[]\n  nameWithType: FieldInfo[]\n  fullName: System.Reflection.FieldInfo[]\n  spec.csharp:\n  - uid: System.Reflection.FieldInfo\n    name: FieldInfo\n    nameWithType: FieldInfo\n    fullName: System.Reflection.FieldInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Module.GetFields\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetFields()\n  nameWithType: Module.GetFields()\n  fullName: Module.GetFields()\n- uid: System.Reflection.Module.GetHashCode\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Module.GetHashCode()\n  fullName: Module.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Module.GetMethod(System.String)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetMethod(String)\n  nameWithType: Module.GetMethod(String)\n  fullName: Module.GetMethod(String)\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Reflection.Module.GetMethod(System.String,System.Type[])\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetMethod(String, Type[])\n  nameWithType: Module.GetMethod(String, Type[])\n  fullName: Module.GetMethod(String, Type[])\n- uid: System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  nameWithType: Module.GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  fullName: Module.GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n- uid: System.Reflection.Binder\n  parent: System.Reflection\n  isExternal: false\n  name: Binder\n  nameWithType: Binder\n  fullName: System.Reflection.Binder\n- uid: System.Reflection.CallingConventions\n  parent: System.Reflection\n  isExternal: false\n  name: CallingConventions\n  nameWithType: CallingConventions\n  fullName: System.Reflection.CallingConventions\n- uid: System.Reflection.ParameterModifier\n  name: ParameterModifier\n  nameWithType: ParameterModifier\n  fullName: System.Reflection.ParameterModifier\n- uid: System.Reflection.ParameterModifier[]\n  parent: System.Reflection\n  isExternal: false\n  name: ParameterModifier[]\n  nameWithType: ParameterModifier[]\n  fullName: System.Reflection.ParameterModifier[]\n  spec.csharp:\n  - uid: System.Reflection.ParameterModifier\n    name: ParameterModifier\n    nameWithType: ParameterModifier\n    fullName: System.Reflection.ParameterModifier\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  nameWithType: Module.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  fullName: Module.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n- uid: System.Reflection.Module.GetMethods\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetMethods()\n  nameWithType: Module.GetMethods()\n  fullName: Module.GetMethods()\n- uid: System.Reflection.MethodInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo[]\n  nameWithType: MethodInfo[]\n  fullName: System.Reflection.MethodInfo[]\n  spec.csharp:\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    nameWithType: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetMethods(BindingFlags)\n  nameWithType: Module.GetMethods(BindingFlags)\n  fullName: Module.GetMethods(BindingFlags)\n- uid: System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: Module.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: Module.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetPEKind(PortableExecutableKinds, ImageFileMachine)\n  nameWithType: Module.GetPEKind(PortableExecutableKinds, ImageFileMachine)\n  fullName: Module.GetPEKind(PortableExecutableKinds, ImageFileMachine)\n- uid: System.Reflection.PortableExecutableKinds\n  parent: System.Reflection\n  isExternal: false\n  name: PortableExecutableKinds\n  nameWithType: PortableExecutableKinds\n  fullName: System.Reflection.PortableExecutableKinds\n- uid: System.Reflection.ImageFileMachine\n  parent: System.Reflection\n  isExternal: false\n  name: ImageFileMachine\n  nameWithType: ImageFileMachine\n  fullName: System.Reflection.ImageFileMachine\n- uid: System.Reflection.Module.GetSignerCertificate\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetSignerCertificate()\n  nameWithType: Module.GetSignerCertificate()\n  fullName: Module.GetSignerCertificate()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509Certificate\n  nameWithType: X509Certificate\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate\n- uid: System.Reflection.Module.GetType(System.String)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetType(String)\n  nameWithType: Module.GetType(String)\n  fullName: Module.GetType(String)\n- uid: System.Reflection.Module.GetType(System.String,System.Boolean)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetType(String, Boolean)\n  nameWithType: Module.GetType(String, Boolean)\n  fullName: Module.GetType(String, Boolean)\n- uid: System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetType(String, Boolean, Boolean)\n  nameWithType: Module.GetType(String, Boolean, Boolean)\n  fullName: Module.GetType(String, Boolean, Boolean)\n- uid: System.Reflection.Module.GetTypes\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetTypes()\n  nameWithType: Module.GetTypes()\n  fullName: Module.GetTypes()\n- uid: System.Reflection.Module.IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: IsDefined(Type, Boolean)\n  nameWithType: Module.IsDefined(Type, Boolean)\n  fullName: Module.IsDefined(Type, Boolean)\n- uid: System.Reflection.Module.IsResource\n  parent: System.Reflection.Module\n  isExternal: false\n  name: IsResource()\n  nameWithType: Module.IsResource()\n  fullName: Module.IsResource()\n- uid: System.Reflection.Module.MDStreamVersion\n  parent: System.Reflection.Module\n  isExternal: false\n  name: MDStreamVersion\n  nameWithType: Module.MDStreamVersion\n  fullName: Module.MDStreamVersion\n- uid: System.Reflection.Module.MetadataToken\n  parent: System.Reflection.Module\n  isExternal: false\n  name: MetadataToken\n  nameWithType: Module.MetadataToken\n  fullName: Module.MetadataToken\n- uid: System.Reflection.Module.ModuleHandle\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ModuleHandle\n  nameWithType: Module.ModuleHandle\n  fullName: Module.ModuleHandle\n- uid: System.ModuleHandle\n  parent: System\n  isExternal: false\n  name: ModuleHandle\n  nameWithType: ModuleHandle\n  fullName: System.ModuleHandle\n- uid: System.Reflection.Module.ModuleVersionId\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ModuleVersionId\n  nameWithType: Module.ModuleVersionId\n  fullName: Module.ModuleVersionId\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Reflection.Module.Name\n  parent: System.Reflection.Module\n  isExternal: false\n  name: Name\n  nameWithType: Module.Name\n  fullName: Module.Name\n- uid: System.Reflection.Module.op_Equality(System.Reflection.Module,System.Reflection.Module)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: op_Equality(Module, Module)\n  nameWithType: Module.op_Equality(Module, Module)\n  fullName: Module.op_Equality(Module, Module)\n- uid: System.Reflection.Module\n  parent: System.Reflection\n  isExternal: false\n  name: Module\n  nameWithType: Module\n  fullName: System.Reflection.Module\n- uid: System.Reflection.Module.op_Inequality(System.Reflection.Module,System.Reflection.Module)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: op_Inequality(Module, Module)\n  nameWithType: Module.op_Inequality(Module, Module)\n  fullName: Module.op_Inequality(Module, Module)\n- uid: System.Reflection.Module.ResolveField(System.Int32)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ResolveField(Int32)\n  nameWithType: Module.ResolveField(Int32)\n  fullName: Module.ResolveField(Int32)\n- uid: System.Reflection.Module.ResolveField(System.Int32,System.Type[],System.Type[])\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ResolveField(Int32, Type[], Type[])\n  nameWithType: Module.ResolveField(Int32, Type[], Type[])\n  fullName: Module.ResolveField(Int32, Type[], Type[])\n- uid: System.Reflection.Module.ResolveMember(System.Int32)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ResolveMember(Int32)\n  nameWithType: Module.ResolveMember(Int32)\n  fullName: Module.ResolveMember(Int32)\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo\n- uid: System.Reflection.Module.ResolveMember(System.Int32,System.Type[],System.Type[])\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ResolveMember(Int32, Type[], Type[])\n  nameWithType: Module.ResolveMember(Int32, Type[], Type[])\n  fullName: Module.ResolveMember(Int32, Type[], Type[])\n- uid: System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ResolveMethod(Int32, Type[], Type[])\n  nameWithType: Module.ResolveMethod(Int32, Type[], Type[])\n  fullName: Module.ResolveMethod(Int32, Type[], Type[])\n- uid: System.Reflection.MethodBase\n  parent: System.Reflection\n  isExternal: false\n  name: MethodBase\n  nameWithType: MethodBase\n  fullName: System.Reflection.MethodBase\n- uid: System.Reflection.Module.ResolveMethod(System.Int32)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ResolveMethod(Int32)\n  nameWithType: Module.ResolveMethod(Int32)\n  fullName: Module.ResolveMethod(Int32)\n- uid: System.Reflection.Module.ResolveSignature(System.Int32)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ResolveSignature(Int32)\n  nameWithType: Module.ResolveSignature(Int32)\n  fullName: Module.ResolveSignature(Int32)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Module.ResolveString(System.Int32)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ResolveString(Int32)\n  nameWithType: Module.ResolveString(Int32)\n  fullName: Module.ResolveString(Int32)\n- uid: System.Reflection.Module.ResolveType(System.Int32)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ResolveType(Int32)\n  nameWithType: Module.ResolveType(Int32)\n  fullName: Module.ResolveType(Int32)\n- uid: System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ResolveType(Int32, Type[], Type[])\n  nameWithType: Module.ResolveType(Int32, Type[], Type[])\n  fullName: Module.ResolveType(Int32, Type[], Type[])\n- uid: System.Reflection.Module.ScopeName\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ScopeName\n  nameWithType: Module.ScopeName\n  fullName: Module.ScopeName\n- uid: System.Reflection.Module.ToString\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ToString()\n  nameWithType: Module.ToString()\n  fullName: Module.ToString()\n- uid: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType: Module.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: Module.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n- uid: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType: Module.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: Module.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType: Module.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: Module.ICustomAttributeProvider.IsDefined(Type, Boolean)\n- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: _Module.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: Module._Module.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: Module._Module.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: _Module.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: Module._Module.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: Module._Module.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: _Module.GetTypeInfoCount(UInt32)\n  nameWithType: Module._Module.GetTypeInfoCount(UInt32)\n  fullName: Module._Module.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.Module\n  isExternal: false\n  name: _Module.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: Module._Module.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: Module._Module.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Reflection.Module.#ctor*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: Module\n  nameWithType: Module.Module\n  fullName: Module.Module\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.Assembly*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: Assembly\n  nameWithType: Module.Assembly\n  fullName: Module.Assembly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.CustomAttributes*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: CustomAttributes\n  nameWithType: Module.CustomAttributes\n  fullName: Module.CustomAttributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.Equals*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: Equals\n  nameWithType: Module.Equals\n  fullName: Module.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.FindTypes*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: FindTypes\n  nameWithType: Module.FindTypes\n  fullName: Module.FindTypes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.FullyQualifiedName*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: FullyQualifiedName\n  nameWithType: Module.FullyQualifiedName\n  fullName: Module.FullyQualifiedName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.GetCustomAttributes*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetCustomAttributes\n  nameWithType: Module.GetCustomAttributes\n  fullName: Module.GetCustomAttributes\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.GetCustomAttributesData*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetCustomAttributesData\n  nameWithType: Module.GetCustomAttributesData\n  fullName: Module.GetCustomAttributesData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.GetField*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetField\n  nameWithType: Module.GetField\n  fullName: Module.GetField\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.GetFields*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetFields\n  nameWithType: Module.GetFields\n  fullName: Module.GetFields\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.GetHashCode*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetHashCode\n  nameWithType: Module.GetHashCode\n  fullName: Module.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.GetMethod*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetMethod\n  nameWithType: Module.GetMethod\n  fullName: Module.GetMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.GetMethodImpl*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetMethodImpl\n  nameWithType: Module.GetMethodImpl\n  fullName: Module.GetMethodImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.GetMethods*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetMethods\n  nameWithType: Module.GetMethods\n  fullName: Module.GetMethods\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.GetObjectData*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetObjectData\n  nameWithType: Module.GetObjectData\n  fullName: Module.GetObjectData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.GetPEKind*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetPEKind\n  nameWithType: Module.GetPEKind\n  fullName: Module.GetPEKind\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.GetSignerCertificate*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetSignerCertificate\n  nameWithType: Module.GetSignerCertificate\n  fullName: Module.GetSignerCertificate\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.GetType*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetType\n  nameWithType: Module.GetType\n  fullName: Module.GetType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netstandard-1.3\n  - netstandard-1.4\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.GetTypes*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: GetTypes\n  nameWithType: Module.GetTypes\n  fullName: Module.GetTypes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.IsDefined*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: IsDefined\n  nameWithType: Module.IsDefined\n  fullName: Module.IsDefined\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.IsResource*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: IsResource\n  nameWithType: Module.IsResource\n  fullName: Module.IsResource\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.MDStreamVersion*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: MDStreamVersion\n  nameWithType: Module.MDStreamVersion\n  fullName: Module.MDStreamVersion\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.MetadataToken*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: MetadataToken\n  nameWithType: Module.MetadataToken\n  fullName: Module.MetadataToken\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.ModuleHandle*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ModuleHandle\n  nameWithType: Module.ModuleHandle\n  fullName: Module.ModuleHandle\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.ModuleVersionId*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ModuleVersionId\n  nameWithType: Module.ModuleVersionId\n  fullName: Module.ModuleVersionId\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.Name*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: Name\n  nameWithType: Module.Name\n  fullName: Module.Name\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.op_Equality*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: op_Equality\n  nameWithType: Module.op_Equality\n  fullName: Module.op_Equality\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.op_Inequality*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: op_Inequality\n  nameWithType: Module.op_Inequality\n  fullName: Module.op_Inequality\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.ResolveField*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ResolveField\n  nameWithType: Module.ResolveField\n  fullName: Module.ResolveField\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.ResolveMember*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ResolveMember\n  nameWithType: Module.ResolveMember\n  fullName: Module.ResolveMember\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.ResolveMethod*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ResolveMethod\n  nameWithType: Module.ResolveMethod\n  fullName: Module.ResolveMethod\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.ResolveSignature*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ResolveSignature\n  nameWithType: Module.ResolveSignature\n  fullName: Module.ResolveSignature\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.ResolveString*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ResolveString\n  nameWithType: Module.ResolveString\n  fullName: Module.ResolveString\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.ResolveType*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ResolveType\n  nameWithType: Module.ResolveType\n  fullName: Module.ResolveType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.ScopeName*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ScopeName\n  nameWithType: Module.ScopeName\n  fullName: Module.ScopeName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.ToString*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: ToString\n  nameWithType: Module.ToString\n  fullName: Module.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  nameWithType: Module.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  fullName: Module.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#IsDefined*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: System.Reflection.ICustomAttributeProvider.IsDefined\n  nameWithType: Module.System.Reflection.ICustomAttributeProvider.IsDefined\n  fullName: Module.System.Reflection.ICustomAttributeProvider.IsDefined\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: System.Runtime.InteropServices._Module.GetIDsOfNames\n  nameWithType: Module.System.Runtime.InteropServices._Module.GetIDsOfNames\n  fullName: Module.System.Runtime.InteropServices._Module.GetIDsOfNames\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: System.Runtime.InteropServices._Module.GetTypeInfo\n  nameWithType: Module.System.Runtime.InteropServices._Module.GetTypeInfo\n  fullName: Module.System.Runtime.InteropServices._Module.GetTypeInfo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: System.Runtime.InteropServices._Module.GetTypeInfoCount\n  nameWithType: Module.System.Runtime.InteropServices._Module.GetTypeInfoCount\n  fullName: Module.System.Runtime.InteropServices._Module.GetTypeInfoCount\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke*\n  parent: System.Reflection.Module\n  isExternal: false\n  name: System.Runtime.InteropServices._Module.Invoke\n  nameWithType: Module.System.Runtime.InteropServices._Module.Invoke\n  fullName: Module.System.Runtime.InteropServices._Module.Invoke\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Module.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(Module, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(Module, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(Module, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(Module)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(Module)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(Module)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(Module)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(Module)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(Module)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(Module, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(Module, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(Module, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(Module)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(Module)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(Module)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(Module, Type)\n  nameWithType: CustomAttributeExtensions.IsDefined(Module, Type)\n  fullName: CustomAttributeExtensions.IsDefined(Module, Type)\n- uid: System.Reflection.ModuleExtensions.GetModuleVersionId(System.Reflection.Module)\n  parent: System.Reflection.ModuleExtensions\n  isExternal: false\n  name: GetModuleVersionId(Module)\n  nameWithType: ModuleExtensions.GetModuleVersionId(Module)\n  fullName: ModuleExtensions.GetModuleVersionId(Module)\n- uid: System.Reflection.ModuleExtensions.HasModuleVersionId(System.Reflection.Module)\n  parent: System.Reflection.ModuleExtensions\n  isExternal: false\n  name: HasModuleVersionId(Module)\n  nameWithType: ModuleExtensions.HasModuleVersionId(Module)\n  fullName: ModuleExtensions.HasModuleVersionId(Module)\n- uid: System.Reflection.ICustomAttributeProvider\n  parent: System.Reflection\n  isExternal: false\n  name: ICustomAttributeProvider\n  nameWithType: ICustomAttributeProvider\n  fullName: System.Reflection.ICustomAttributeProvider\n- uid: System.Runtime.InteropServices._Module\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: _Module\n  nameWithType: _Module\n  fullName: System.Runtime.InteropServices._Module\n- uid: System.Runtime.Serialization.ISerializable\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: ISerializable\n  nameWithType: ISerializable\n  fullName: System.Runtime.Serialization.ISerializable\n"}