{"nodes":[{"content":"Binds a <xref href=\"System.Windows.Input.RoutedCommand\"></xref> to the event handlers that implement the command.","nodes":[{"pos":[0,113],"content":"Binds a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;&lt;/xref&gt;</ph> to the event handlers that implement the command.","source":"Binds a <xref href=\"System.Windows.Input.RoutedCommand\"></xref> to the event handlers that implement the command."}],"pos":[1064,1178],"yaml":true},{"content":"A <xref:System.Windows.Input.CommandBinding> associates a command with the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> and <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events which implement and determine the status of the command.  \n  \n When the <xref:System.Windows.Input.RoutedCommand.Execute%2A> or <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> or the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events are raised on the command target.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command, the appropriate handlers are called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the events are routed through the element tree until an element that has a <xref:System.Windows.Input.CommandBinding> is found.  \n  \n A <xref:System.Windows.Input.CommandBinding> has limited use with an <xref:System.Windows.Input.ICommand> that is not a<xref:System.Windows.Input.RoutedCommand>.  This is because a <xref:System.Windows.Input.CommandBinding> binds the command to the <xref:System.Windows.Input.ExecutedRoutedEventHandler> and the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which listen to the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> routed events which are raised when the <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of the <xref:System.Windows.Input.RoutedCommand> are called.","nodes":[{"pos":[0,368],"content":"A <xref:System.Windows.Input.CommandBinding> associates a command with the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> and <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events which implement and determine the status of the command.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> associates a command with the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandBinding.PreviewExecuted&gt;</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Windows.Input.CommandBinding.PreviewCanExecute&gt;</ph><ph id=\"ph6\">/</ph><ph id=\"ph7\">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> events which implement and determine the status of the command.","pos":[0,368],"source":"A <xref:System.Windows.Input.CommandBinding> associates a command with the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> and <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events which implement and determine the status of the command."}]},{"pos":[375,1191],"content":"When the <xref:System.Windows.Input.RoutedCommand.Execute%2A> or <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> or the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events are raised on the command target.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command, the appropriate handlers are called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the events are routed through the element tree until an element that has a <xref:System.Windows.Input.CommandBinding> is found.","nodes":[{"content":"When the <xref:System.Windows.Input.RoutedCommand.Execute%2A> or <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> or the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events are raised on the command target.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command, the appropriate handlers are called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the events are routed through the element tree until an element that has a <xref:System.Windows.Input.CommandBinding> is found.","pos":[0,816],"nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> method of a <ph id=\"ph3\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> is called, the <ph id=\"ph4\">&lt;xref:System.Windows.Input.CommandBinding.PreviewExecuted&gt;</ph><ph id=\"ph5\">/</ph><ph id=\"ph6\">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> or the <ph id=\"ph7\">&lt;xref:System.Windows.Input.CommandBinding.PreviewCanExecute&gt;</ph><ph id=\"ph8\">/</ph><ph id=\"ph9\">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> events are raised on the command target.","pos":[0,463],"source":"When the <xref:System.Windows.Input.RoutedCommand.Execute%2A> or <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> or the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events are raised on the command target."},{"content":"If the command target has a <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> for the command, the appropriate handlers are called.","pos":[465,589],"source":"  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command, the appropriate handlers are called."},{"content":"If the command target does not have a <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> for the command, the events are routed through the element tree until an element that has a <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is found.","pos":[591,816],"source":"  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the events are routed through the element tree until an element that has a <xref:System.Windows.Input.CommandBinding> is found."}]}]},{"pos":[1198,1917],"content":"A <xref:System.Windows.Input.CommandBinding> has limited use with an <xref:System.Windows.Input.ICommand> that is not a<xref:System.Windows.Input.RoutedCommand>.  This is because a <xref:System.Windows.Input.CommandBinding> binds the command to the <xref:System.Windows.Input.ExecutedRoutedEventHandler> and the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which listen to the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> routed events which are raised when the <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of the <xref:System.Windows.Input.RoutedCommand> are called.","nodes":[{"content":"A <xref:System.Windows.Input.CommandBinding> has limited use with an <xref:System.Windows.Input.ICommand> that is not a<xref:System.Windows.Input.RoutedCommand>.  This is because a <xref:System.Windows.Input.CommandBinding> binds the command to the <xref:System.Windows.Input.ExecutedRoutedEventHandler> and the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which listen to the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> routed events which are raised when the <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of the <xref:System.Windows.Input.RoutedCommand> are called.","pos":[0,719],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> has limited use with an <ph id=\"ph2\">&lt;xref:System.Windows.Input.ICommand&gt;</ph> that is not a<ph id=\"ph3\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.","pos":[0,161],"source":"A <xref:System.Windows.Input.CommandBinding> has limited use with an <xref:System.Windows.Input.ICommand> that is not a<xref:System.Windows.Input.RoutedCommand>."},{"content":"This is because a <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> binds the command to the <ph id=\"ph2\">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> and the <ph id=\"ph3\">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> which listen to the <ph id=\"ph4\">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> routed events which are raised when the <ph id=\"ph6\">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> and <ph id=\"ph7\">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> method of the <ph id=\"ph8\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> are called.","pos":[163,719],"source":"  This is because a <xref:System.Windows.Input.CommandBinding> binds the command to the <xref:System.Windows.Input.ExecutedRoutedEventHandler> and the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which listen to the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> routed events which are raised when the <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of the <xref:System.Windows.Input.RoutedCommand> are called."}]}]}],"pos":[1189,3113],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Input.CommandBinding\"></xref> class.","nodes":[{"pos":[0,97],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Windows.Input.CommandBinding\"></xref> class."}],"pos":[4441,4539],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Input.CommandBinding\"></xref> class by using the specified <xref href=\"System.Windows.Input.ICommand\"></xref>.","nodes":[{"pos":[0,171],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;&lt;/xref&gt;</ph> class by using the specified <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.ICommand\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Windows.Input.CommandBinding\"></xref> class by using the specified <xref href=\"System.Windows.Input.ICommand\"></xref>."}],"pos":[5729,5901],"yaml":true},{"content":"The command to base the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref> on.","nodes":[{"pos":[0,87],"content":"The command to base the new <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;&lt;/xref&gt;</ph> on.","source":"The command to base the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref> on."}],"pos":[6082,6170],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Input.CommandBinding\"></xref> class by using the specified <xref href=\"System.Windows.Input.ICommand\"></xref> and the specified <xref href=\"System.Windows.Input.CommandBinding.Executed\"></xref> event handler.","nodes":[{"pos":[0,269],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;&lt;/xref&gt;</ph> class by using the specified <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.ICommand\"&gt;&lt;/xref&gt;</ph> and the specified <ph id=\"ph3\">&lt;xref href=\"System.Windows.Input.CommandBinding.Executed\"&gt;&lt;/xref&gt;</ph> event handler.","source":"Initializes a new instance of the <xref href=\"System.Windows.Input.CommandBinding\"></xref> class by using the specified <xref href=\"System.Windows.Input.ICommand\"></xref> and the specified <xref href=\"System.Windows.Input.CommandBinding.Executed\"></xref> event handler."}],"pos":[7520,7790],"yaml":true},{"content":"The command to base the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref> on.","nodes":[{"pos":[0,87],"content":"The command to base the new <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;&lt;/xref&gt;</ph> on.","source":"The command to base the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref> on."}],"pos":[8029,8117],"yaml":true},{"content":"The handler for the <xref href=\"System.Windows.Input.CommandBinding.Executed\"></xref> event on the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref>.","nodes":[{"pos":[0,159],"content":"The handler for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.CommandBinding.Executed\"&gt;&lt;/xref&gt;</ph> event on the new <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;&lt;/xref&gt;</ph>.","source":"The handler for the <xref href=\"System.Windows.Input.CommandBinding.Executed\"></xref> event on the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref>."}],"pos":[8215,8375],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Input.CommandBinding\"></xref> class by using the specified <xref href=\"System.Windows.Input.ICommand\"></xref> and the specified <xref href=\"System.Windows.Input.CommandBinding.Executed\"></xref> and <xref href=\"System.Windows.Input.CommandBinding.CanExecute\"></xref> event handlers.","nodes":[{"pos":[0,342],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;&lt;/xref&gt;</ph> class by using the specified <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.ICommand\"&gt;&lt;/xref&gt;</ph> and the specified <ph id=\"ph3\">&lt;xref href=\"System.Windows.Input.CommandBinding.Executed\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph4\">&lt;xref href=\"System.Windows.Input.CommandBinding.CanExecute\"&gt;&lt;/xref&gt;</ph> event handlers.","source":"Initializes a new instance of the <xref href=\"System.Windows.Input.CommandBinding\"></xref> class by using the specified <xref href=\"System.Windows.Input.ICommand\"></xref> and the specified <xref href=\"System.Windows.Input.CommandBinding.Executed\"></xref> and <xref href=\"System.Windows.Input.CommandBinding.CanExecute\"></xref> event handlers."}],"pos":[9965,10308],"yaml":true},{"content":"The command to base the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref> on.","nodes":[{"pos":[0,87],"content":"The command to base the new <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;&lt;/xref&gt;</ph> on.","source":"The command to base the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref> on."}],"pos":[10609,10697],"yaml":true},{"content":"The handler for the <xref href=\"System.Windows.Input.CommandBinding.Executed\"></xref> event on the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref>.","nodes":[{"pos":[0,159],"content":"The handler for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.CommandBinding.Executed\"&gt;&lt;/xref&gt;</ph> event on the new <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;&lt;/xref&gt;</ph>.","source":"The handler for the <xref href=\"System.Windows.Input.CommandBinding.Executed\"></xref> event on the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref>."}],"pos":[10795,10955],"yaml":true},{"content":"The handler for the <xref href=\"System.Windows.Input.CommandBinding.CanExecute\"></xref> event on the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref>.","nodes":[{"pos":[0,161],"content":"The handler for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.CommandBinding.CanExecute\"&gt;&lt;/xref&gt;</ph> event on the new <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;&lt;/xref&gt;</ph>.","source":"The handler for the <xref href=\"System.Windows.Input.CommandBinding.CanExecute\"></xref> event on the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref>."}],"pos":[11057,11219],"yaml":true},{"content":"Occurs when the command associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref> initiates a check to determine whether the command can be executed on the command target.","nodes":[{"pos":[0,191],"content":"Occurs when the command associated with this <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;&lt;/xref&gt;</ph> initiates a check to determine whether the command can be executed on the command target.","source":"Occurs when the command associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref> initiates a check to determine whether the command can be executed on the command target."}],"pos":[12213,12405],"yaml":true},{"content":"When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> event is raised on the command target.  If the event is not handled, the <xref:System.Windows.Input.CommandBinding.CanExecute> event is raised.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  \n  \n<a name=\"routedEventInfo_CanExecute\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.Input.CommandManager.CanExecuteEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>.","nodes":[{"pos":[0,855],"content":"When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> event is raised on the command target.  If the event is not handled, the <xref:System.Windows.Input.CommandBinding.CanExecute> event is raised.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.","nodes":[{"content":"When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> event is raised on the command target.  If the event is not handled, the <xref:System.Windows.Input.CommandBinding.CanExecute> event is raised.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.","pos":[0,855],"nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> method on a <ph id=\"ph2\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> is called, the <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandBinding.PreviewCanExecute&gt;</ph> event is raised on the command target.","pos":[0,233],"source":"When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> event is raised on the command target."},{"content":"If the event is not handled, the <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> event is raised.","pos":[235,338],"source":"  If the event is not handled, the <xref:System.Windows.Input.CommandBinding.CanExecute> event is raised."},{"content":"If the command target has a <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> for the command, the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> handler for that <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is called.","pos":[340,556],"source":"  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> handler for that <xref:System.Windows.Input.CommandBinding> is called."},{"content":"If the command target does not have a <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> for the command, the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> event bubbles up the element tree searching for an element that has a <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> associated with the command.","pos":[558,855],"source":"  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command."}]}]},{"pos":[909,933],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[954,970],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[971,1029],"content":"<xref:System.Windows.Input.CommandManager.CanExecuteEvent>","nodes":[]},{"pos":[1034,1050],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1051,1059],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1064,1072],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1073,1129],"content":"<xref:System.Windows.Input.CanExecuteRoutedEventHandler>","nodes":[]},{"pos":[1140,1238],"content":"The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding.PreviewCanExecute&gt;</ph>.","pos":[0,98],"source":"The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>."}]}],"pos":[12416,13670],"yaml":true,"extradata":"MT"},{"content":"Gets or sets the <xref href=\"System.Windows.Input.ICommand\"></xref> associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref>.","nodes":[{"pos":[0,146],"content":"Gets or sets the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.ICommand\"&gt;&lt;/xref&gt;</ph> associated with this <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets the <xref href=\"System.Windows.Input.ICommand\"></xref> associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref>."}],"pos":[16215,16362],"yaml":true},{"content":"The command associated with this binding.","nodes":[{"pos":[0,41],"content":"The command associated with this binding.","nodes":[{"content":"The command associated with this binding.","pos":[0,41]}]}],"pos":[18599,18641],"yaml":true},{"content":"Occurs when the command associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref> executes.","nodes":[{"pos":[0,111],"content":"Occurs when the command associated with this <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;&lt;/xref&gt;</ph> executes.","source":"Occurs when the command associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref> executes."}],"pos":[19688,19800],"yaml":true},{"content":"When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event on the command target.  If the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event is not handled, the <xref:System.Windows.Input.CommandBinding.Executed> event is raised on the command target.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the specific command, the <xref:System.Windows.Input.CommandBinding.Executed> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for that specific command the <xref:System.Windows.Input.CommandBinding.Executed> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If a <xref:System.Windows.Input.CommandBinding> is not found, the command is not handled.  \n  \n<a name=\"routedEventInfo_Executed\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.Input.CommandManager.ExecutedEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewExecuted>.","nodes":[{"pos":[0,966],"content":"When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event on the command target.  If the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event is not handled, the <xref:System.Windows.Input.CommandBinding.Executed> event is raised on the command target.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the specific command, the <xref:System.Windows.Input.CommandBinding.Executed> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for that specific command the <xref:System.Windows.Input.CommandBinding.Executed> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If a <xref:System.Windows.Input.CommandBinding> is not found, the command is not handled.","nodes":[{"content":"When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event on the command target.  If the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event is not handled, the <xref:System.Windows.Input.CommandBinding.Executed> event is raised on the command target.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the specific command, the <xref:System.Windows.Input.CommandBinding.Executed> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for that specific command the <xref:System.Windows.Input.CommandBinding.Executed> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If a <xref:System.Windows.Input.CommandBinding> is not found, the command is not handled.","pos":[0,966],"nodes":[{"content":"When a <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> executes, it raises the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandBinding.PreviewExecuted&gt;</ph> event on the command target.","pos":[0,160],"source":"When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event on the command target."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding.PreviewExecuted&gt;</ph> event is not handled, the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> event is raised on the command target.","pos":[162,344],"source":"  If the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event is not handled, the <xref:System.Windows.Input.CommandBinding.Executed> event is raised on the command target."},{"content":"If the command target has a <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> for the specific command, the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> handler for that <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is called.","pos":[346,569],"source":"  If the command target has a <xref:System.Windows.Input.CommandBinding> for the specific command, the <xref:System.Windows.Input.CommandBinding.Executed> handler for that <xref:System.Windows.Input.CommandBinding> is called."},{"content":"If the command target does not have a <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> for that specific command the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> event bubbles up the element tree searching for an element that has a <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> associated with the command.","pos":[571,875],"source":"  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for that specific command the <xref:System.Windows.Input.CommandBinding.Executed> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command."},{"content":"If a <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is not found, the command is not handled.","pos":[877,966],"source":"  If a <xref:System.Windows.Input.CommandBinding> is not found, the command is not handled."}]}]},{"pos":[1018,1042],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1063,1079],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1080,1136],"content":"<xref:System.Windows.Input.CommandManager.ExecutedEvent>","nodes":[]},{"pos":[1141,1157],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1158,1166],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1171,1179],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1180,1234],"content":"<xref:System.Windows.Input.ExecutedRoutedEventHandler>","nodes":[]},{"pos":[1245,1341],"content":"The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewExecuted>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding.PreviewExecuted&gt;</ph>.","pos":[0,96],"source":"The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewExecuted>."}]}],"pos":[19811,21168],"yaml":true,"extradata":"MT"},{"content":"Occurs when the command associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref> initiates a check to determine whether the command can be executed on the current command target.","nodes":[{"pos":[0,199],"content":"Occurs when the command associated with this <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;&lt;/xref&gt;</ph> initiates a check to determine whether the command can be executed on the current command target.","source":"Occurs when the command associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref> initiates a check to determine whether the command can be executed on the current command target."}],"pos":[23743,23943],"yaml":true},{"content":"When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> event is raised on the command target if the command target has a <xref:System.Windows.Input.CommandBinding> for the command. Then the <xref:System.Windows.Input.CommandBinding.CanExecute> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If the event is not handled, the <xref:System.Windows.Input.CommandBinding.CanExecute> event is raised.  \n  \n<a name=\"routedEventInfo_PreviewCanExecute\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.CanExecute>.","nodes":[{"pos":[0,858],"content":"When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> event is raised on the command target if the command target has a <xref:System.Windows.Input.CommandBinding> for the command. Then the <xref:System.Windows.Input.CommandBinding.CanExecute> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If the event is not handled, the <xref:System.Windows.Input.CommandBinding.CanExecute> event is raised.","nodes":[{"content":"When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> event is raised on the command target if the command target has a <xref:System.Windows.Input.CommandBinding> for the command. Then the <xref:System.Windows.Input.CommandBinding.CanExecute> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If the event is not handled, the <xref:System.Windows.Input.CommandBinding.CanExecute> event is raised.","pos":[0,858],"nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> method on a <ph id=\"ph2\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> is called, the <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandBinding.PreviewCanExecute&gt;</ph> event is raised on the command target if the command target has a <ph id=\"ph4\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> for the command.","pos":[0,320],"source":"When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> event is raised on the command target if the command target has a <xref:System.Windows.Input.CommandBinding> for the command."},{"content":"Then the <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> handler for that <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is called.","pos":[321,454],"source":" Then the <xref:System.Windows.Input.CommandBinding.CanExecute> handler for that <xref:System.Windows.Input.CommandBinding> is called."},{"content":"If the command target does not have a <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> for the command, the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> event bubbles up the element tree searching for an element that has a <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> associated with the command.","pos":[456,753],"source":"  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command."},{"content":"If the event is not handled, the <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> event is raised.","pos":[755,858],"source":"  If the event is not handled, the <xref:System.Windows.Input.CommandBinding.CanExecute> event is raised."}]}]},{"pos":[919,943],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[964,980],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[981,1046],"content":"<xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>","nodes":[]},{"pos":[1051,1067],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1068,1077],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1082,1090],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1091,1147],"content":"<xref:System.Windows.Input.CanExecuteRoutedEventHandler>","nodes":[]},{"pos":[1158,1248],"content":"The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.CanExecute>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph>.","pos":[0,90],"source":"The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.CanExecute>."}]}],"pos":[23954,25218],"yaml":true,"extradata":"MT"},{"content":"Occurs when the command associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref> executes.","nodes":[{"pos":[0,111],"content":"Occurs when the command associated with this <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;&lt;/xref&gt;</ph> executes.","source":"Occurs when the command associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref> executes."}],"pos":[26388,26500],"yaml":true},{"content":"When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event on the command target.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event tunnels down the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If the preview event is not handled, the <xref:System.Windows.Input.CommandBinding.Executed> event is raised on command target.  \n  \n<a name=\"routedEventInfo_PreviewExecuted\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.Executed>.","nodes":[{"pos":[0,816],"content":"When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event on the command target.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event tunnels down the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If the preview event is not handled, the <xref:System.Windows.Input.CommandBinding.Executed> event is raised on command target.","nodes":[{"content":"When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event on the command target.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event tunnels down the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If the preview event is not handled, the <xref:System.Windows.Input.CommandBinding.Executed> event is raised on command target.","pos":[0,816],"nodes":[{"content":"When a <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> executes, it raises the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandBinding.PreviewExecuted&gt;</ph> event on the command target.","pos":[0,160],"source":"When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event on the command target."},{"content":"If the command target has a <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> for the command the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandBinding.PreviewExecuted&gt;</ph> handler for that <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is called.","pos":[162,382],"source":"  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> handler for that <xref:System.Windows.Input.CommandBinding> is called."},{"content":"If the command target does not have a <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> for the command the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandBinding.PreviewExecuted&gt;</ph> event tunnels down the element tree searching for an element that has a <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> associated with the command.","pos":[384,687],"source":"  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event tunnels down the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command."},{"content":"If the preview event is not handled, the <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> event is raised on command target.","pos":[689,816],"source":"  If the preview event is not handled, the <xref:System.Windows.Input.CommandBinding.Executed> event is raised on command target."}]}]},{"pos":[875,899],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[920,936],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[937,1000],"content":"<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>","nodes":[]},{"pos":[1005,1021],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1022,1031],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1036,1044],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1045,1099],"content":"<xref:System.Windows.Input.ExecutedRoutedEventHandler>","nodes":[]},{"pos":[1110,1198],"content":"The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.Executed>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph>.","pos":[0,88],"source":"The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.Executed>."}]}],"pos":[26511,27725],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.CommandBinding\n  commentId: T:System.Windows.Input.CommandBinding\n  id: CommandBinding\n  children:\n  - System.Windows.Input.CommandBinding.#ctor\n  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)\n  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)\n  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)\n  - System.Windows.Input.CommandBinding.CanExecute\n  - System.Windows.Input.CommandBinding.Command\n  - System.Windows.Input.CommandBinding.Executed\n  - System.Windows.Input.CommandBinding.PreviewCanExecute\n  - System.Windows.Input.CommandBinding.PreviewExecuted\n  langs:\n  - csharp\n  name: CommandBinding\n  nameWithType: CommandBinding\n  fullName: System.Windows.Input.CommandBinding\n  type: Class\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Binds a <xref href=\"System.Windows.Input.RoutedCommand\"></xref> to the event handlers that implement the command.\n  remarks: \"A <xref:System.Windows.Input.CommandBinding> associates a command with the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> and <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events which implement and determine the status of the command.  \\n  \\n When the <xref:System.Windows.Input.RoutedCommand.Execute%2A> or <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> or the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events are raised on the command target.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command, the appropriate handlers are called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the events are routed through the element tree until an element that has a <xref:System.Windows.Input.CommandBinding> is found.  \\n  \\n A <xref:System.Windows.Input.CommandBinding> has limited use with an <xref:System.Windows.Input.ICommand> that is not a<xref:System.Windows.Input.RoutedCommand>.  This is because a <xref:System.Windows.Input.CommandBinding> binds the command to the <xref:System.Windows.Input.ExecutedRoutedEventHandler> and the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which listen to the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> routed events which are raised when the <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of the <xref:System.Windows.Input.RoutedCommand> are called.\"\n  syntax:\n    content: public class CommandBinding\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.CommandBinding.#ctor\n  commentId: M:System.Windows.Input.CommandBinding.#ctor\n  id: '#ctor'\n  parent: System.Windows.Input.CommandBinding\n  langs:\n  - csharp\n  name: CommandBinding()\n  nameWithType: CommandBinding.CommandBinding()\n  fullName: CommandBinding.CommandBinding()\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.CommandBinding\"></xref> class.\n  syntax:\n    content: public CommandBinding ();\n    parameters: []\n  overload: System.Windows.Input.CommandBinding.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)\n  commentId: M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)\n  id: '#ctor(System.Windows.Input.ICommand)'\n  parent: System.Windows.Input.CommandBinding\n  langs:\n  - csharp\n  name: CommandBinding(ICommand)\n  nameWithType: CommandBinding.CommandBinding(ICommand)\n  fullName: CommandBinding.CommandBinding(ICommand)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.CommandBinding\"></xref> class by using the specified <xref href=\"System.Windows.Input.ICommand\"></xref>.\n  syntax:\n    content: public CommandBinding (System.Windows.Input.ICommand command);\n    parameters:\n    - id: command\n      type: System.Windows.Input.ICommand\n      description: The command to base the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref> on.\n  overload: System.Windows.Input.CommandBinding.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)\n  commentId: M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)\n  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)'\n  parent: System.Windows.Input.CommandBinding\n  langs:\n  - csharp\n  name: CommandBinding(ICommand, ExecutedRoutedEventHandler)\n  nameWithType: CommandBinding.CommandBinding(ICommand, ExecutedRoutedEventHandler)\n  fullName: CommandBinding.CommandBinding(ICommand, ExecutedRoutedEventHandler)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.CommandBinding\"></xref> class by using the specified <xref href=\"System.Windows.Input.ICommand\"></xref> and the specified <xref href=\"System.Windows.Input.CommandBinding.Executed\"></xref> event handler.\n  syntax:\n    content: public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed);\n    parameters:\n    - id: command\n      type: System.Windows.Input.ICommand\n      description: The command to base the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref> on.\n    - id: executed\n      type: System.Windows.Input.ExecutedRoutedEventHandler\n      description: The handler for the <xref href=\"System.Windows.Input.CommandBinding.Executed\"></xref> event on the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref>.\n  overload: System.Windows.Input.CommandBinding.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)\n  commentId: M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)\n  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)'\n  parent: System.Windows.Input.CommandBinding\n  langs:\n  - csharp\n  name: CommandBinding(ICommand, ExecutedRoutedEventHandler, CanExecuteRoutedEventHandler)\n  nameWithType: CommandBinding.CommandBinding(ICommand, ExecutedRoutedEventHandler, CanExecuteRoutedEventHandler)\n  fullName: CommandBinding.CommandBinding(ICommand, ExecutedRoutedEventHandler, CanExecuteRoutedEventHandler)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.CommandBinding\"></xref> class by using the specified <xref href=\"System.Windows.Input.ICommand\"></xref> and the specified <xref href=\"System.Windows.Input.CommandBinding.Executed\"></xref> and <xref href=\"System.Windows.Input.CommandBinding.CanExecute\"></xref> event handlers.\n  syntax:\n    content: public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed, System.Windows.Input.CanExecuteRoutedEventHandler canExecute);\n    parameters:\n    - id: command\n      type: System.Windows.Input.ICommand\n      description: The command to base the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref> on.\n    - id: executed\n      type: System.Windows.Input.ExecutedRoutedEventHandler\n      description: The handler for the <xref href=\"System.Windows.Input.CommandBinding.Executed\"></xref> event on the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref>.\n    - id: canExecute\n      type: System.Windows.Input.CanExecuteRoutedEventHandler\n      description: The handler for the <xref href=\"System.Windows.Input.CommandBinding.CanExecute\"></xref> event on the new <xref href=\"System.Windows.Input.RoutedCommand\"></xref>.\n  overload: System.Windows.Input.CommandBinding.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.CommandBinding.CanExecute\n  commentId: E:System.Windows.Input.CommandBinding.CanExecute\n  id: CanExecute\n  parent: System.Windows.Input.CommandBinding\n  langs:\n  - csharp\n  name: CanExecute\n  nameWithType: CommandBinding.CanExecute\n  fullName: CommandBinding.CanExecute\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Occurs when the command associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref> initiates a check to determine whether the command can be executed on the command target.\n  remarks: \"When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> event is raised on the command target.  If the event is not handled, the <xref:System.Windows.Input.CommandBinding.CanExecute> event is raised.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  \\n  \\n<a name=\\\"routedEventInfo_CanExecute\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.Input.CommandManager.CanExecuteEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>.\"\n  example:\n  - \"The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \\n  \\n [!code-xml[commandwithhandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  \\n  \\n [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]\\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  \\n  \\n The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.  \\n  \\n [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]\\n [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]\"\n  syntax:\n    content: public event System.Windows.Input.CanExecuteRoutedEventHandler CanExecute;\n    return:\n      type: System.Windows.Input.CanExecuteRoutedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.CommandBinding.Command\n  commentId: P:System.Windows.Input.CommandBinding.Command\n  id: Command\n  parent: System.Windows.Input.CommandBinding\n  langs:\n  - csharp\n  name: Command\n  nameWithType: CommandBinding.Command\n  fullName: CommandBinding.Command\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets or sets the <xref href=\"System.Windows.Input.ICommand\"></xref> associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \\n  \\n [!code-xml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  \\n  \\n [!code-csharp[commandhandlerprocedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]\\n [!code-vb[commandhandlerprocedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  \\n  \\n The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.  \\n  \\n [!code-csharp[commandWithHandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]\\n [!code-vb[commandWithHandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  \\n  \\n The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.  \\n  \\n [!code-csharp[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]\\n [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]\"\n  syntax:\n    content: >-\n      [System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)]\n\n      public System.Windows.Input.ICommand Command { get; set; }\n    return:\n      type: System.Windows.Input.ICommand\n      description: The command associated with this binding.\n  overload: System.Windows.Input.CommandBinding.Command*\n  exceptions: []\n  attributes:\n  - type: System.Windows.LocalizabilityAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.CommandBinding.Executed\n  commentId: E:System.Windows.Input.CommandBinding.Executed\n  id: Executed\n  parent: System.Windows.Input.CommandBinding\n  langs:\n  - csharp\n  name: Executed\n  nameWithType: CommandBinding.Executed\n  fullName: CommandBinding.Executed\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Occurs when the command associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref> executes.\n  remarks: \"When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event on the command target.  If the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event is not handled, the <xref:System.Windows.Input.CommandBinding.Executed> event is raised on the command target.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the specific command, the <xref:System.Windows.Input.CommandBinding.Executed> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for that specific command the <xref:System.Windows.Input.CommandBinding.Executed> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If a <xref:System.Windows.Input.CommandBinding> is not found, the command is not handled.  \\n  \\n<a name=\\\"routedEventInfo_Executed\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.Input.CommandManager.ExecutedEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewExecuted>.\"\n  example:\n  - \"The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \\n  \\n [!code-xml[commandwithhandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  \\n  \\n [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]\\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  \\n  \\n The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.  \\n  \\n [!code-csharp[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]\\n [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]\"\n  syntax:\n    content: public event System.Windows.Input.ExecutedRoutedEventHandler Executed;\n    return:\n      type: System.Windows.Input.ExecutedRoutedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.CommandBinding.PreviewCanExecute\n  commentId: E:System.Windows.Input.CommandBinding.PreviewCanExecute\n  id: PreviewCanExecute\n  parent: System.Windows.Input.CommandBinding\n  langs:\n  - csharp\n  name: PreviewCanExecute\n  nameWithType: CommandBinding.PreviewCanExecute\n  fullName: CommandBinding.PreviewCanExecute\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Occurs when the command associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref> initiates a check to determine whether the command can be executed on the current command target.\n  remarks: \"When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> event is raised on the command target if the command target has a <xref:System.Windows.Input.CommandBinding> for the command. Then the <xref:System.Windows.Input.CommandBinding.CanExecute> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If the event is not handled, the <xref:System.Windows.Input.CommandBinding.CanExecute> event is raised.  \\n  \\n<a name=\\\"routedEventInfo_PreviewCanExecute\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.CanExecute>.\"\n  syntax:\n    content: public event System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute;\n    return:\n      type: System.Windows.Input.CanExecuteRoutedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.CommandBinding.PreviewExecuted\n  commentId: E:System.Windows.Input.CommandBinding.PreviewExecuted\n  id: PreviewExecuted\n  parent: System.Windows.Input.CommandBinding\n  langs:\n  - csharp\n  name: PreviewExecuted\n  nameWithType: CommandBinding.PreviewExecuted\n  fullName: CommandBinding.PreviewExecuted\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Occurs when the command associated with this <xref href=\"System.Windows.Input.CommandBinding\"></xref> executes.\n  remarks: \"When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event on the command target.  If the command target has a <xref:System.Windows.Input.CommandBinding> for the command the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> handler for that <xref:System.Windows.Input.CommandBinding> is called.  If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event tunnels down the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.  If the preview event is not handled, the <xref:System.Windows.Input.CommandBinding.Executed> event is raised on command target.  \\n  \\n<a name=\\\"routedEventInfo_PreviewExecuted\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.Executed>.\"\n  syntax:\n    content: public event System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted;\n    return:\n      type: System.Windows.Input.ExecutedRoutedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Input.CommandBinding.#ctor\n  parent: System.Windows.Input.CommandBinding\n  isExternal: false\n  name: CommandBinding()\n  nameWithType: CommandBinding.CommandBinding()\n  fullName: CommandBinding.CommandBinding()\n- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)\n  parent: System.Windows.Input.CommandBinding\n  isExternal: false\n  name: CommandBinding(ICommand)\n  nameWithType: CommandBinding.CommandBinding(ICommand)\n  fullName: CommandBinding.CommandBinding(ICommand)\n- uid: System.Windows.Input.ICommand\n  parent: System.Windows.Input\n  isExternal: false\n  name: ICommand\n  nameWithType: ICommand\n  fullName: System.Windows.Input.ICommand\n- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)\n  parent: System.Windows.Input.CommandBinding\n  isExternal: false\n  name: CommandBinding(ICommand, ExecutedRoutedEventHandler)\n  nameWithType: CommandBinding.CommandBinding(ICommand, ExecutedRoutedEventHandler)\n  fullName: CommandBinding.CommandBinding(ICommand, ExecutedRoutedEventHandler)\n- uid: System.Windows.Input.ExecutedRoutedEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: ExecutedRoutedEventHandler\n  nameWithType: ExecutedRoutedEventHandler\n  fullName: System.Windows.Input.ExecutedRoutedEventHandler\n- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)\n  parent: System.Windows.Input.CommandBinding\n  isExternal: false\n  name: CommandBinding(ICommand, ExecutedRoutedEventHandler, CanExecuteRoutedEventHandler)\n  nameWithType: CommandBinding.CommandBinding(ICommand, ExecutedRoutedEventHandler, CanExecuteRoutedEventHandler)\n  fullName: CommandBinding.CommandBinding(ICommand, ExecutedRoutedEventHandler, CanExecuteRoutedEventHandler)\n- uid: System.Windows.Input.CanExecuteRoutedEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: CanExecuteRoutedEventHandler\n  nameWithType: CanExecuteRoutedEventHandler\n  fullName: System.Windows.Input.CanExecuteRoutedEventHandler\n- uid: System.Windows.Input.CommandBinding.CanExecute\n  parent: System.Windows.Input.CommandBinding\n  isExternal: false\n  name: CanExecute\n  nameWithType: CommandBinding.CanExecute\n  fullName: CommandBinding.CanExecute\n- uid: System.Windows.Input.CommandBinding.Command\n  parent: System.Windows.Input.CommandBinding\n  isExternal: false\n  name: Command\n  nameWithType: CommandBinding.Command\n  fullName: CommandBinding.Command\n- uid: System.Windows.Input.CommandBinding.Executed\n  parent: System.Windows.Input.CommandBinding\n  isExternal: false\n  name: Executed\n  nameWithType: CommandBinding.Executed\n  fullName: CommandBinding.Executed\n- uid: System.Windows.Input.CommandBinding.PreviewCanExecute\n  parent: System.Windows.Input.CommandBinding\n  isExternal: false\n  name: PreviewCanExecute\n  nameWithType: CommandBinding.PreviewCanExecute\n  fullName: CommandBinding.PreviewCanExecute\n- uid: System.Windows.Input.CommandBinding.PreviewExecuted\n  parent: System.Windows.Input.CommandBinding\n  isExternal: false\n  name: PreviewExecuted\n  nameWithType: CommandBinding.PreviewExecuted\n  fullName: CommandBinding.PreviewExecuted\n- uid: System.Windows.Input.CommandBinding.#ctor*\n  parent: System.Windows.Input.CommandBinding\n  isExternal: false\n  name: CommandBinding\n  nameWithType: CommandBinding.CommandBinding\n  fullName: CommandBinding.CommandBinding\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml\n- uid: System.Windows.Input.CommandBinding.Command*\n  parent: System.Windows.Input.CommandBinding\n  isExternal: false\n  name: Command\n  nameWithType: CommandBinding.Command\n  fullName: CommandBinding.Command\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/CommandBinding.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}