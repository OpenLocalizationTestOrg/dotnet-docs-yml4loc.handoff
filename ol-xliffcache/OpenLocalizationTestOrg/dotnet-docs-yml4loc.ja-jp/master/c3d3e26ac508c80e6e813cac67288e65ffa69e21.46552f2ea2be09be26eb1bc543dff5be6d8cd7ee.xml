{"nodes":[{"content":"Specifies options to control the buffering behavior of a partitioner","nodes":[{"pos":[0,68],"content":"Specifies options to control the buffering behavior of a partitioner","nodes":[{"content":"Specifies options to control the buffering behavior of a partitioner","pos":[0,68]}]}],"pos":[683,752],"yaml":true},{"content":"Out-of-the-box partitioners are created with a set of default behaviors. For example, by default, some form of buffering and chunking will be used to achieve optimal performance in the common scenario where an <xref:System.Collections.Generic.IEnumerable%601> implementation is fast and non-blocking. These behaviors can be overridden by this enumeration by using the <xref:System.Collections.Concurrent.Partitioner.Create%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,459],"content":"Out-of-the-box partitioners are created with a set of default behaviors. For example, by default, some form of buffering and chunking will be used to achieve optimal performance in the common scenario where an <xref:System.Collections.Generic.IEnumerable%601> implementation is fast and non-blocking. These behaviors can be overridden by this enumeration by using the <xref:System.Collections.Concurrent.Partitioner.Create%2A?displayProperty=fullName> method.","nodes":[{"content":"Out-of-the-box partitioners are created with a set of default behaviors. For example, by default, some form of buffering and chunking will be used to achieve optimal performance in the common scenario where an <xref:System.Collections.Generic.IEnumerable%601> implementation is fast and non-blocking. These behaviors can be overridden by this enumeration by using the <xref:System.Collections.Concurrent.Partitioner.Create%2A?displayProperty=fullName> method.","pos":[0,459],"nodes":[{"content":"Out-of-the-box partitioners are created with a set of default behaviors.","pos":[0,72]},{"content":"For example, by default, some form of buffering and chunking will be used to achieve optimal performance in the common scenario where an <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> implementation is fast and non-blocking.","pos":[73,300],"source":" For example, by default, some form of buffering and chunking will be used to achieve optimal performance in the common scenario where an <xref:System.Collections.Generic.IEnumerable%601> implementation is fast and non-blocking."},{"content":"These behaviors can be overridden by this enumeration by using the <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.Partitioner.Create%2A?displayProperty=fullName&gt;</ph> method.","pos":[301,459],"source":" These behaviors can be overridden by this enumeration by using the <xref:System.Collections.Concurrent.Partitioner.Create%2A?displayProperty=fullName> method."}]}]}],"pos":[763,1223],"yaml":true,"extradata":"MT"},{"content":"Create a partitioner that takes items from the source enumerable one at a time and does not use intermediate storage that can be accessed more efficiently by multiple threads. This option provides support for low latency (items will be processed as soon as they are available from the source) and provides partial support for dependencies between items (a thread cannot deadlock waiting for an item that the thread itself is responsible for processing).","nodes":[{"pos":[0,453],"content":"Create a partitioner that takes items from the source enumerable one at a time and does not use intermediate storage that can be accessed more efficiently by multiple threads. This option provides support for low latency (items will be processed as soon as they are available from the source) and provides partial support for dependencies between items (a thread cannot deadlock waiting for an item that the thread itself is responsible for processing).","nodes":[{"content":"Create a partitioner that takes items from the source enumerable one at a time and does not use intermediate storage that can be accessed more efficiently by multiple threads. This option provides support for low latency (items will be processed as soon as they are available from the source) and provides partial support for dependencies between items (a thread cannot deadlock waiting for an item that the thread itself is responsible for processing).","pos":[0,453],"nodes":[{"content":"Create a partitioner that takes items from the source enumerable one at a time and does not use intermediate storage that can be accessed more efficiently by multiple threads.","pos":[0,175]},{"content":"This option provides support for low latency (items will be processed as soon as they are available from the source) and provides partial support for dependencies between items (a thread cannot deadlock waiting for an item that the thread itself is responsible for processing).","pos":[176,453]}]}]}],"pos":[2996,3450],"yaml":true},{"content":"Use the default behavior, which is to use buffering to achieve optimal performance.","nodes":[{"pos":[0,83],"content":"Use the default behavior, which is to use buffering to achieve optimal performance.","nodes":[{"content":"Use the default behavior, which is to use buffering to achieve optimal performance.","pos":[0,83]}]}],"pos":[5033,5117],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Concurrent.EnumerablePartitionerOptions\n  commentId: T:System.Collections.Concurrent.EnumerablePartitionerOptions\n  id: EnumerablePartitionerOptions\n  children:\n  - System.Collections.Concurrent.EnumerablePartitionerOptions.NoBuffering\n  - System.Collections.Concurrent.EnumerablePartitionerOptions.None\n  langs:\n  - csharp\n  name: EnumerablePartitionerOptions\n  nameWithType: EnumerablePartitionerOptions\n  fullName: System.Collections.Concurrent.EnumerablePartitionerOptions\n  type: Enum\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Specifies options to control the buffering behavior of a partitioner\n  remarks: Out-of-the-box partitioners are created with a set of default behaviors. For example, by default, some form of buffering and chunking will be used to achieve optimal performance in the common scenario where an <xref:System.Collections.Generic.IEnumerable%601> implementation is fast and non-blocking. These behaviors can be overridden by this enumeration by using the <xref:System.Collections.Concurrent.Partitioner.Create%2A?displayProperty=fullName> method.\n  syntax:\n    content: >-\n      [System.Flags]\n\n      public enum EnumerablePartitionerOptions\n  inheritance:\n  - System.Object\n  - System.ValueType\n  - System.Enum\n  attributes:\n  - type: System.FlagsAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/EnumerablePartitionerOptions.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.EnumerablePartitionerOptions.NoBuffering\n  commentId: F:System.Collections.Concurrent.EnumerablePartitionerOptions.NoBuffering\n  id: NoBuffering\n  parent: System.Collections.Concurrent.EnumerablePartitionerOptions\n  langs:\n  - csharp\n  name: NoBuffering\n  nameWithType: EnumerablePartitionerOptions.NoBuffering\n  fullName: EnumerablePartitionerOptions.NoBuffering\n  type: Field\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Create a partitioner that takes items from the source enumerable one at a time and does not use intermediate storage that can be accessed more efficiently by multiple threads. This option provides support for low latency (items will be processed as soon as they are available from the source) and provides partial support for dependencies between items (a thread cannot deadlock waiting for an item that the thread itself is responsible for processing).\n  syntax:\n    content: NoBuffering\n    return:\n      type: System.Collections.Concurrent.EnumerablePartitionerOptions\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/EnumerablePartitionerOptions.xml\n- uid: System.Collections.Concurrent.EnumerablePartitionerOptions.None\n  commentId: F:System.Collections.Concurrent.EnumerablePartitionerOptions.None\n  id: None\n  parent: System.Collections.Concurrent.EnumerablePartitionerOptions\n  langs:\n  - csharp\n  name: None\n  nameWithType: EnumerablePartitionerOptions.None\n  fullName: EnumerablePartitionerOptions.None\n  type: Field\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Use the default behavior, which is to use buffering to achieve optimal performance.\n  syntax:\n    content: None\n    return:\n      type: System.Collections.Concurrent.EnumerablePartitionerOptions\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/EnumerablePartitionerOptions.xml\nreferences:\n- uid: System.Enum\n  parent: System\n  isExternal: false\n  name: Enum\n  nameWithType: Enum\n  fullName: System.Enum\n- uid: System.Collections.Concurrent.EnumerablePartitionerOptions.NoBuffering\n  parent: System.Collections.Concurrent.EnumerablePartitionerOptions\n  isExternal: false\n  name: NoBuffering\n  nameWithType: EnumerablePartitionerOptions.NoBuffering\n  fullName: EnumerablePartitionerOptions.NoBuffering\n- uid: System.Collections.Concurrent.EnumerablePartitionerOptions\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: EnumerablePartitionerOptions\n  nameWithType: EnumerablePartitionerOptions\n  fullName: System.Collections.Concurrent.EnumerablePartitionerOptions\n- uid: System.Collections.Concurrent.EnumerablePartitionerOptions.None\n  parent: System.Collections.Concurrent.EnumerablePartitionerOptions\n  isExternal: false\n  name: None\n  nameWithType: EnumerablePartitionerOptions.None\n  fullName: EnumerablePartitionerOptions.None\n"}