### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ECDsa
  commentId: T:System.Security.Cryptography.ECDsa
  id: ECDsa
  children:
  - System.Security.Cryptography.ECDsa.#ctor
  - System.Security.Cryptography.ECDsa.Create
  - System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)
  - System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)
  - System.Security.Cryptography.ECDsa.Create(System.String)
  - System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)
  - System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)
  - System.Security.Cryptography.ECDsa.FromXmlString(System.String)
  - System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)
  - System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)
  - System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  - System.Security.Cryptography.ECDsa.SignatureAlgorithm
  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignHash(System.Byte[])
  - System.Security.Cryptography.ECDsa.ToXmlString(System.Boolean)
  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])
  langs:
  - csharp
  name: ECDsa
  nameWithType: ECDsa
  fullName: System.Security.Cryptography.ECDsa
  type: Class
  assemblies:
  - System.Security.Cryptography.Algorithms
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Provides an abstract base class that encapsulates the Elliptic Curve Digital Signature Algorithm (ECDSA).
  remarks: This class serves as the abstract base class for <xref:System.Security.Cryptography.ECDsaCng> derivations.
  syntax:
    content: 'public abstract class ECDsa : System.Security.Cryptography.AsymmetricAlgorithm'
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  derivedClasses:
  - System.Security.Cryptography.ECDsaCng
  - System.Security.Cryptography.ECDsaOpenSsl
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsa.#ctor
  commentId: M:System.Security.Cryptography.ECDsa.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: ECDsa()
  nameWithType: ECDsa.ECDsa()
  fullName: ECDsa.ECDsa()
  type: Constructor
  assemblies:
  - System.Security.Cryptography.Algorithms
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.ECDsa"></xref> class.
  remarks: This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDsa> class. The <xref:System.Security.Cryptography.ECDsaCng> class is the only implementation currently supported by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]. You may provide your own custom implementation.
  syntax:
    content: protected ECDsa ();
    parameters: []
  overload: System.Security.Cryptography.ECDsa.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsa.Create
  commentId: M:System.Security.Cryptography.ECDsa.Create
  id: Create
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: Create()
  nameWithType: ECDsa.Create()
  fullName: ECDsa.Create()
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).
  syntax:
    content: public static System.Security.Cryptography.ECDsa Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.ECDsa
      description: A new instance of the default implementation (<xref href="System.Security.Cryptography.ECDsaCng"></xref>) of this class.
  overload: System.Security.Cryptography.ECDsa.Create*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)
  commentId: M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)
  id: Create(System.Security.Cryptography.ECCurve)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: Create(ECCurve)
  nameWithType: ECDsa.Create(ECCurve)
  fullName: ECDsa.Create(ECCurve)
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA) with a newly generated key over the specified curve.
  syntax:
    content: public static System.Security.Cryptography.ECDsa Create (System.Security.Cryptography.ECCurve curve);
    parameters:
    - id: curve
      type: System.Security.Cryptography.ECCurve
      description: The curve to use for key generation.
    return:
      type: System.Security.Cryptography.ECDsa
      description: A new instance of the default implementation (<xref href="System.Security.Cryptography.ECDsaCng"></xref>) of this class.
  overload: System.Security.Cryptography.ECDsa.Create*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)
  commentId: M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)
  id: Create(System.Security.Cryptography.ECParameters)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: Create(ECParameters)
  nameWithType: ECDsa.Create(ECParameters)
  fullName: ECDsa.Create(ECParameters)
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA) using the specified parameters as the key.
  syntax:
    content: public static System.Security.Cryptography.ECDsa Create (System.Security.Cryptography.ECParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.ECParameters
      description: The parameters representing the key to use.
    return:
      type: System.Security.Cryptography.ECDsa
      description: A new instance of the default implementation (<xref href="System.Security.Cryptography.ECDsaCng"></xref>) of this class.
  overload: System.Security.Cryptography.ECDsa.Create*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsa.Create(System.String)
  commentId: M:System.Security.Cryptography.ECDsa.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: Create(String)
  nameWithType: ECDsa.Create(String)
  fullName: ECDsa.Create(String)
  type: Method
  assemblies:
  - System.Core
  - netstandard
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Creates a new instance of the specified implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).
  remarks: "If you develop your own implementation of an <xref:System.Security.Cryptography.ECDsa> object, you can use the <xref:System.Security.Cryptography.ECDsa.Create%28System.String%29> method overload to create a custom `algorithm` string that specifies your implementation.  \n  \n If you specify a custom value for the `algorithm` parameter, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDSA object can be created."
  syntax:
    content: public static System.Security.Cryptography.ECDsa Create (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "The name of an ECDSA implementation. The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]:  \n  \n \\- \"ECDsa\"  \n  \n \\- \"ECDsaCng\"  \n  \n \\- \"System.Security.Cryptography.ECDsaCng\"  \n  \n You can also provide the name of a custom ECDSA implementation."
    return:
      type: System.Security.Cryptography.ECDsa
      description: A new instance of the specified implementation of this class. If the specified algorithm name does not map to an ECDSA implementation, this method returns `null`.
  overload: System.Security.Cryptography.ECDsa.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>algorithm</code> parameter is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)
  commentId: M:System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)
  id: ExportExplicitParameters(System.Boolean)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: ExportExplicitParameters(Boolean)
  nameWithType: ECDsa.ExportExplicitParameters(Boolean)
  fullName: ECDsa.ExportExplicitParameters(Boolean)
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, exports the explicit parameters for an elliptic curve.
  syntax:
    content: public virtual System.Security.Cryptography.ECParameters ExportExplicitParameters (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: '`true` to include private parameters; otherwise, `false`.'
    return:
      type: System.Security.Cryptography.ECParameters
      description: The parameters representing the point on the curve for this key, using the explicit curve format.
  overload: System.Security.Cryptography.ECDsa.ExportExplicitParameters*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: A derived class must override this method.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)
  commentId: M:System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)
  id: ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: ExportParameters(Boolean)
  nameWithType: ECDsa.ExportParameters(Boolean)
  fullName: ECDsa.ExportParameters(Boolean)
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, exports the named or explicit parameters for an elliptic curve. If the curve has a name, the <xref href="System.Security.Cryptography.ECParameters.Curve"></xref> field contains named curve parameters, otherwise it         contains explicit parameters.
  syntax:
    content: public virtual System.Security.Cryptography.ECParameters ExportParameters (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: '`true` to include private parameters; otherwise, `false`.'
    return:
      type: System.Security.Cryptography.ECParameters
      description: The parameters representing the point on the curve for this key.
  overload: System.Security.Cryptography.ECDsa.ExportParameters*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: A derived class must override this method.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsa.FromXmlString(System.String)
  commentId: M:System.Security.Cryptography.ECDsa.FromXmlString(System.String)
  id: FromXmlString(System.String)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: FromXmlString(String)
  nameWithType: ECDsa.FromXmlString(String)
  fullName: ECDsa.FromXmlString(String)
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public override void FromXmlString (string xmlString);
    parameters:
    - id: xmlString
      type: System.String
      description: ''
  overload: System.Security.Cryptography.ECDsa.FromXmlString*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
- uid: System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)
  commentId: M:System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)
  id: GenerateKey(System.Security.Cryptography.ECCurve)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: GenerateKey(ECCurve)
  nameWithType: ECDsa.GenerateKey(ECCurve)
  fullName: ECDsa.GenerateKey(ECCurve)
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, generates a new public/private key pair for the specified curve.
  syntax:
    content: public virtual void GenerateKey (System.Security.Cryptography.ECCurve curve);
    parameters:
    - id: curve
      type: System.Security.Cryptography.ECCurve
      description: The curve to use.
  overload: System.Security.Cryptography.ECDsa.GenerateKey*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: A derived class must override this method.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: HashData(Stream, HashAlgorithmName)
  nameWithType: ECDsa.HashData(Stream, HashAlgorithmName)
  fullName: ECDsa.HashData(Stream, HashAlgorithmName)
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, computes the hash value of the specified binary stream by using the specified hashing algorithm.
  syntax:
    content: protected virtual byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: The binary stream to hash.
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: The algorithm to use to hash the data.
    return:
      type: System.Byte[]
      description: The hashed data.
  overload: System.Security.Cryptography.ECDsa.HashData*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: A derived class must override this method.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)
  nameWithType: ECDsa.HashData(Byte[], Int32, Int32, HashAlgorithmName)
  fullName: ECDsa.HashData(Byte[], Int32, Int32, HashAlgorithmName)
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, computes the hash value of the specified portion of a byte array by using the specified hashing algorithm.
  syntax:
    content: protected virtual byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: The data to be hashed.
    - id: offset
      type: System.Int32
      description: The index of the first byte in <code>data</code> to be hashed.
    - id: count
      type: System.Int32
      description: The number of bytes to hash.
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: The algorithm to use to hash the data.
    return:
      type: System.Byte[]
      description: The hashed data.
  overload: System.Security.Cryptography.ECDsa.HashData*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: A derived class must override this method.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)
  commentId: M:System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)
  id: ImportParameters(System.Security.Cryptography.ECParameters)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: ImportParameters(ECParameters)
  nameWithType: ECDsa.ImportParameters(ECParameters)
  fullName: ECDsa.ImportParameters(ECParameters)
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, imports the specified parameters.
  syntax:
    content: public virtual void ImportParameters (System.Security.Cryptography.ECParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.ECParameters
      description: The curve parameters.
  overload: System.Security.Cryptography.ECDsa.ImportParameters*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: A derived class must override this method.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  commentId: P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: ECDsa.KeyExchangeAlgorithm
  fullName: ECDsa.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - System.Core
  - netstandard
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Gets the name of the key exchange algorithm.
  remarks: "This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.  \n  \n The Elliptic Curve Digital Signature Algorithm (ECDSA) is used for digital signature generation; it is not used for key derivation Therefore, this property returns `null`."
  syntax:
    content: public override string KeyExchangeAlgorithm { get; }
    return:
      type: System.String
      description: Always `null`.
  overload: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm
  commentId: P:System.Security.Cryptography.ECDsa.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: ECDsa.SignatureAlgorithm
  fullName: ECDsa.SignatureAlgorithm
  type: Property
  assemblies:
  - System.Core
  - netstandard
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Gets the name of the signature algorithm.
  syntax:
    content: public override string SignatureAlgorithm { get; }
    return:
      type: System.String
      description: The string "ECDsa".
  overload: System.Security.Cryptography.ECDsa.SignatureAlgorithm*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignData(Byte[], HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[], HashAlgorithmName)
  fullName: ECDsa.SignData(Byte[], HashAlgorithmName)
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Computes the hash value of the specified byte array using the specified hash algorithm and signs the resulting hash value.
  syntax:
    content: public virtual byte[] SignData (byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: The input data for which to compute the hash.
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: The hash algorithm to use to create the hash value.
    return:
      type: System.Byte[]
      description: The ECDSA signature for the specified data.
  overload: System.Security.Cryptography.ECDsa.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>data</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>hashAlgorithm</code>.<xref href="System.Security.Cryptography.HashAlgorithmName.Name"></xref> is `null` or <xref href="System.String.Empty"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignData(Stream, HashAlgorithmName)
  nameWithType: ECDsa.SignData(Stream, HashAlgorithmName)
  fullName: ECDsa.SignData(Stream, HashAlgorithmName)
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Computes the hash value of the specified stream using the specified hash algorithm and signs the resulting hash value.
  syntax:
    content: public virtual byte[] SignData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: The input stream for which to compute the hash.
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: The hash algorithm to use to create the hash value.
    return:
      type: System.Byte[]
      description: The ECDSA signature for the specified data.
  overload: System.Security.Cryptography.ECDsa.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>data</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>hashAlgorithm</code>.<xref href="System.Security.Cryptography.HashAlgorithmName.Name"></xref> is `null` or <xref href="System.String.Empty"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignData(Byte[], Int32, Int32, HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[], Int32, Int32, HashAlgorithmName)
  fullName: ECDsa.SignData(Byte[], Int32, Int32, HashAlgorithmName)
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Computes the hash value of a portion of the specified byte array using the specified hash algorithm and signs the resulting hash value.
  syntax:
    content: public virtual byte[] SignData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: The input data for which to compute the hash.
    - id: offset
      type: System.Int32
      description: The offset into the array at which to begin using data.
    - id: count
      type: System.Int32
      description: The number of bytes in the array to use as data.
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: The hash algorithm to use to create the hash value.
    return:
      type: System.Byte[]
      description: The ECDSA signature for the specified data.
  overload: System.Security.Cryptography.ECDsa.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>data</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>hashAlgorithm</code>.<xref href="System.Security.Cryptography.HashAlgorithmName.Name"></xref> is `null` or <xref href="System.String.Empty"></xref>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> is less than zero.  \n  \n -or-  \n  \n <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsa.SignHash(System.Byte[])
  commentId: M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])
  id: SignHash(System.Byte[])
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignHash(Byte[])
  nameWithType: ECDsa.SignHash(Byte[])
  fullName: ECDsa.SignHash(Byte[])
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Generates a digital signature for the specified hash value.
  syntax:
    content: public abstract byte[] SignHash (byte[] hash);
    parameters:
    - id: hash
      type: System.Byte[]
      description: The hash value of the data that is being signed.
    return:
      type: System.Byte[]
      description: A digital signature that consists of the given hash value encrypted with the private key.
  overload: System.Security.Cryptography.ECDsa.SignHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>hash</code> parameter is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsa.ToXmlString(System.Boolean)
  commentId: M:System.Security.Cryptography.ECDsa.ToXmlString(System.Boolean)
  id: ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: ToXmlString(Boolean)
  nameWithType: ECDsa.ToXmlString(Boolean)
  fullName: ECDsa.ToXmlString(Boolean)
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public override string ToXmlString (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: ''
    return:
      type: System.String
      description: ''
  overload: System.Security.Cryptography.ECDsa.ToXmlString*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: VerifyData(Byte[], Byte[], HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[], Byte[], HashAlgorithmName)
  fullName: ECDsa.VerifyData(Byte[], Byte[], HashAlgorithmName)
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and comparing it to the provided signature.
  syntax:
    content: public bool VerifyData (byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: The signed data.
    - id: signature
      type: System.Byte[]
      description: The signature data to be verified.
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: The hash algorithm used to create the hash value of the data.
    return:
      type: System.Boolean
      description: '`true` if the signature is valid; otherwise, `false`.'
  overload: System.Security.Cryptography.ECDsa.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code> is `null`.  \n  \n -or-  \n  \n <code>signature</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>hashAlgorithm</code>.<xref href="System.Security.Cryptography.HashAlgorithmName.Name"></xref> is `null` or <xref href="System.String.Empty"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: VerifyData(Stream, Byte[], HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Stream, Byte[], HashAlgorithmName)
  fullName: ECDsa.VerifyData(Stream, Byte[], HashAlgorithmName)
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and comparing it to the provided signature.
  syntax:
    content: public bool VerifyData (System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: The signed data.
    - id: signature
      type: System.Byte[]
      description: The signature data to be verified.
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: The hash algorithm used to create the hash value of the data.
    return:
      type: System.Boolean
      description: '`true` if the signature is valid; otherwise, `false`.'
  overload: System.Security.Cryptography.ECDsa.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code> is `null`.  \n  \n -or-  \n  \n <code>signature</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>hashAlgorithm</code>.<xref href="System.Security.Cryptography.HashAlgorithmName.Name"></xref> is `null` or <xref href="System.String.Empty"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)
  fullName: ECDsa.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and comparing it to the provided signature.
  syntax:
    content: public virtual bool VerifyData (byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: The signed data.
    - id: offset
      type: System.Int32
      description: The starting index at which to compute the hash.
    - id: count
      type: System.Int32
      description: The number of bytes to hash.
    - id: signature
      type: System.Byte[]
      description: The signature data to be verified.
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: The hash algorithm used to create the hash value of the data.
    return:
      type: System.Boolean
      description: '`true` if the signature is valid; otherwise, `false`.'
  overload: System.Security.Cryptography.ECDsa.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code> is `null`.  \n  \n -or-  \n  \n <code>signature</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>hashAlgorithm</code>.<xref href="System.Security.Cryptography.HashAlgorithmName.Name"></xref> is `null` or <xref href="System.String.Empty"></xref>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> is less than zero.  \n  \n -or-  \n  \n <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>offset</code> + <code>count</code> – 1 results in an index that is beyond the upper bound of <code>data</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])
  commentId: M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])
  id: VerifyHash(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: VerifyHash(Byte[], Byte[])
  nameWithType: ECDsa.VerifyHash(Byte[], Byte[])
  fullName: ECDsa.VerifyHash(Byte[], Byte[])
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  - System.Core
  - netstandard
  namespace: System.Security.Cryptography
  summary: Verifies a digital signature against the specified hash value.
  remarks: The signature is first decrypted by using the public key, and then compared to the hash value for verification.
  syntax:
    content: public abstract bool VerifyHash (byte[] hash, byte[] signature);
    parameters:
    - id: hash
      type: System.Byte[]
      description: The hash value of a block of data.
    - id: signature
      type: System.Byte[]
      description: The digital signature to be verified.
    return:
      type: System.Boolean
      description: '`true` if the hash value equals the decrypted signature; otherwise, `false`.'
  overload: System.Security.Cryptography.ECDsa.VerifyHash*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.NotImplementedException
  parent: System
  isExternal: false
  name: NotImplementedException
  nameWithType: NotImplementedException
  fullName: System.NotImplementedException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.ECDsa.#ctor
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: ECDsa()
  nameWithType: ECDsa.ECDsa()
  fullName: ECDsa.ECDsa()
- uid: System.Security.Cryptography.ECDsa.Create
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: Create()
  nameWithType: ECDsa.Create()
  fullName: ECDsa.Create()
- uid: System.Security.Cryptography.ECDsa
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDsa
  nameWithType: ECDsa
  fullName: System.Security.Cryptography.ECDsa
- uid: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: Create(ECCurve)
  nameWithType: ECDsa.Create(ECCurve)
  fullName: ECDsa.Create(ECCurve)
- uid: System.Security.Cryptography.ECCurve
  parent: System.Security.Cryptography
  isExternal: false
  name: ECCurve
  nameWithType: ECCurve
  fullName: System.Security.Cryptography.ECCurve
- uid: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: Create(ECParameters)
  nameWithType: ECDsa.Create(ECParameters)
  fullName: ECDsa.Create(ECParameters)
- uid: System.Security.Cryptography.ECParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: ECParameters
  nameWithType: ECParameters
  fullName: System.Security.Cryptography.ECParameters
- uid: System.Security.Cryptography.ECDsa.Create(System.String)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: Create(String)
  nameWithType: ECDsa.Create(String)
  fullName: ECDsa.Create(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: ExportExplicitParameters(Boolean)
  nameWithType: ECDsa.ExportExplicitParameters(Boolean)
  fullName: ECDsa.ExportExplicitParameters(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: ExportParameters(Boolean)
  nameWithType: ECDsa.ExportParameters(Boolean)
  fullName: ECDsa.ExportParameters(Boolean)
- uid: System.Security.Cryptography.ECDsa.FromXmlString(System.String)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: FromXmlString(String)
  nameWithType: ECDsa.FromXmlString(String)
  fullName: ECDsa.FromXmlString(String)
- uid: System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: GenerateKey(ECCurve)
  nameWithType: ECDsa.GenerateKey(ECCurve)
  fullName: ECDsa.GenerateKey(ECCurve)
- uid: System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: HashData(Stream, HashAlgorithmName)
  nameWithType: ECDsa.HashData(Stream, HashAlgorithmName)
  fullName: ECDsa.HashData(Stream, HashAlgorithmName)
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)
  nameWithType: ECDsa.HashData(Byte[], Int32, Int32, HashAlgorithmName)
  fullName: ECDsa.HashData(Byte[], Int32, Int32, HashAlgorithmName)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: ImportParameters(ECParameters)
  nameWithType: ECDsa.ImportParameters(ECParameters)
  fullName: ECDsa.ImportParameters(ECParameters)
- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: ECDsa.KeyExchangeAlgorithm
  fullName: ECDsa.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: ECDsa.SignatureAlgorithm
  fullName: ECDsa.SignatureAlgorithm
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData(Byte[], HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[], HashAlgorithmName)
  fullName: ECDsa.SignData(Byte[], HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData(Stream, HashAlgorithmName)
  nameWithType: ECDsa.SignData(Stream, HashAlgorithmName)
  fullName: ECDsa.SignData(Stream, HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData(Byte[], Int32, Int32, HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[], Int32, Int32, HashAlgorithmName)
  fullName: ECDsa.SignData(Byte[], Int32, Int32, HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.SignHash(System.Byte[])
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignHash(Byte[])
  nameWithType: ECDsa.SignHash(Byte[])
  fullName: ECDsa.SignHash(Byte[])
- uid: System.Security.Cryptography.ECDsa.ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: ToXmlString(Boolean)
  nameWithType: ECDsa.ToXmlString(Boolean)
  fullName: ECDsa.ToXmlString(Boolean)
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData(Byte[], Byte[], HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[], Byte[], HashAlgorithmName)
  fullName: ECDsa.VerifyData(Byte[], Byte[], HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData(Stream, Byte[], HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Stream, Byte[], HashAlgorithmName)
  fullName: ECDsa.VerifyData(Stream, Byte[], HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)
  fullName: ECDsa.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyHash(Byte[], Byte[])
  nameWithType: ECDsa.VerifyHash(Byte[], Byte[])
  fullName: ECDsa.VerifyHash(Byte[], Byte[])
- uid: System.Security.Cryptography.ECDsa.#ctor*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: ECDsa
  nameWithType: ECDsa.ECDsa
  fullName: ECDsa.ECDsa
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
- uid: System.Security.Cryptography.ECDsa.Create*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: Create
  nameWithType: ECDsa.Create
  fullName: ECDsa.Create
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
- uid: System.Security.Cryptography.ECDsa.ExportExplicitParameters*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: ExportExplicitParameters
  nameWithType: ECDsa.ExportExplicitParameters
  fullName: ECDsa.ExportExplicitParameters
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
- uid: System.Security.Cryptography.ECDsa.ExportParameters*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: ExportParameters
  nameWithType: ECDsa.ExportParameters
  fullName: ECDsa.ExportParameters
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
- uid: System.Security.Cryptography.ECDsa.FromXmlString*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: FromXmlString
  nameWithType: ECDsa.FromXmlString
  fullName: ECDsa.FromXmlString
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
- uid: System.Security.Cryptography.ECDsa.GenerateKey*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: GenerateKey
  nameWithType: ECDsa.GenerateKey
  fullName: ECDsa.GenerateKey
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
- uid: System.Security.Cryptography.ECDsa.HashData*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: HashData
  nameWithType: ECDsa.HashData
  fullName: ECDsa.HashData
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
- uid: System.Security.Cryptography.ECDsa.ImportParameters*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: ImportParameters
  nameWithType: ECDsa.ImportParameters
  fullName: ECDsa.ImportParameters
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.7
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: ECDsa.KeyExchangeAlgorithm
  fullName: ECDsa.KeyExchangeAlgorithm
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: ECDsa.SignatureAlgorithm
  fullName: ECDsa.SignatureAlgorithm
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
- uid: System.Security.Cryptography.ECDsa.SignData*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData
  nameWithType: ECDsa.SignData
  fullName: ECDsa.SignData
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
- uid: System.Security.Cryptography.ECDsa.SignHash*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignHash
  nameWithType: ECDsa.SignHash
  fullName: ECDsa.SignHash
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
- uid: System.Security.Cryptography.ECDsa.ToXmlString*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: ToXmlString
  nameWithType: ECDsa.ToXmlString
  fullName: ECDsa.ToXmlString
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
- uid: System.Security.Cryptography.ECDsa.VerifyData*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData
  nameWithType: ECDsa.VerifyData
  fullName: ECDsa.VerifyData
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
- uid: System.Security.Cryptography.ECDsa.VerifyHash*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyHash
  nameWithType: ECDsa.VerifyHash
  fullName: ECDsa.VerifyHash
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDsa.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Clear()
  nameWithType: AsymmetricAlgorithm.Clear()
  fullName: AsymmetricAlgorithm.Clear()
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Dispose()
  nameWithType: AsymmetricAlgorithm.Dispose()
  fullName: AsymmetricAlgorithm.Dispose()
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: AsymmetricAlgorithm.Dispose(Boolean)
  fullName: AsymmetricAlgorithm.Dispose(Boolean)
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeySize
  nameWithType: AsymmetricAlgorithm.KeySize
  fullName: AsymmetricAlgorithm.KeySize
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeySizeValue
  nameWithType: AsymmetricAlgorithm.KeySizeValue
  fullName: AsymmetricAlgorithm.KeySizeValue
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: LegalKeySizes
  nameWithType: AsymmetricAlgorithm.LegalKeySizes
  fullName: AsymmetricAlgorithm.LegalKeySizes
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: LegalKeySizesValue
  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue
  fullName: AsymmetricAlgorithm.LegalKeySizesValue
