{"nodes":[{"content":"Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <xref href=\"System.Windows.WeakEventManager\"></xref>.","nodes":[{"pos":[0,164],"content":"Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager\"&gt;&lt;/xref&gt;</ph>.","source":"Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <xref href=\"System.Windows.WeakEventManager\"></xref>."}],"pos":[477,642],"yaml":true},{"content":"The <xref:System.Windows.WeakEventManager> (a dispatcher) forwards an event by calling the <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> method on classes that implement this interface, and that have been added as listeners by calling <xref:System.Windows.WeakEventManager> methods beforehand.  \n  \n The principal reason for following the WeakEvent pattern is when the event source has an object lifetime that is potentially independent of the event listeners. Using the central event dispatching of a <xref:System.Windows.WeakEventManager> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners. By contrast, a normal event hookup using `+=` or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers. This keeps the listener references from being garbage collected in a timely fashion.  \n  \n One common situation where the relationships between sources and listeners suggests the use of this pattern is the handling of update events coming from sources for data bindings.  \n  \n You can use the WeakEvent pattern to listen for events that are external to your application. You only need to define a <xref:System.Windows.WeakEventManager> for it, provide listening behavior in <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, and use the <xref:System.Windows.WeakEventManager> to attach the handler references rather than `+=`.","nodes":[{"pos":[0,308],"content":"The <xref:System.Windows.WeakEventManager> (a dispatcher) forwards an event by calling the <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> method on classes that implement this interface, and that have been added as listeners by calling <xref:System.Windows.WeakEventManager> methods beforehand.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager&gt;</ph> (a dispatcher) forwards an event by calling the <ph id=\"ph2\">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> method on classes that implement this interface, and that have been added as listeners by calling <ph id=\"ph3\">&lt;xref:System.Windows.WeakEventManager&gt;</ph> methods beforehand.","pos":[0,308],"source":"The <xref:System.Windows.WeakEventManager> (a dispatcher) forwards an event by calling the <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> method on classes that implement this interface, and that have been added as listeners by calling <xref:System.Windows.WeakEventManager> methods beforehand."}]},{"pos":[315,966],"content":"The principal reason for following the WeakEvent pattern is when the event source has an object lifetime that is potentially independent of the event listeners. Using the central event dispatching of a <xref:System.Windows.WeakEventManager> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners. By contrast, a normal event hookup using `+=` or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers. This keeps the listener references from being garbage collected in a timely fashion.","nodes":[{"content":"The principal reason for following the WeakEvent pattern is when the event source has an object lifetime that is potentially independent of the event listeners.","pos":[0,160]},{"content":"Using the central event dispatching of a <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager&gt;</ph> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners.","pos":[161,385],"source":" Using the central event dispatching of a <xref:System.Windows.WeakEventManager> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners."},{"content":"By contrast, a normal event hookup using <ph id=\"ph1\">`+=`</ph> or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers.","pos":[386,566],"source":" By contrast, a normal event hookup using `+=` or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers."},{"content":"This keeps the listener references from being garbage collected in a timely fashion.","pos":[567,651]}]},{"pos":[973,1152],"content":"One common situation where the relationships between sources and listeners suggests the use of this pattern is the handling of update events coming from sources for data bindings.","nodes":[{"content":"One common situation where the relationships between sources and listeners suggests the use of this pattern is the handling of update events coming from sources for data bindings.","pos":[0,179]}]},{"pos":[1159,1519],"content":"You can use the WeakEvent pattern to listen for events that are external to your application. You only need to define a <xref:System.Windows.WeakEventManager> for it, provide listening behavior in <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, and use the <xref:System.Windows.WeakEventManager> to attach the handler references rather than `+=`.","nodes":[{"content":"You can use the WeakEvent pattern to listen for events that are external to your application.","pos":[0,93]},{"content":"You only need to define a <ph id=\"ph1\">&lt;xref:System.Windows.WeakEventManager&gt;</ph> for it, provide listening behavior in <ph id=\"ph2\">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph>, and use the <ph id=\"ph3\">&lt;xref:System.Windows.WeakEventManager&gt;</ph> to attach the handler references rather than <ph id=\"ph4\">`+=`</ph>.","pos":[94,360],"source":" You only need to define a <xref:System.Windows.WeakEventManager> for it, provide listening behavior in <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, and use the <xref:System.Windows.WeakEventManager> to attach the handler references rather than `+=`."}]}],"pos":[653,2181],"yaml":true,"extradata":"MT"},{"content":"Receives events from the centralized event manager.","nodes":[{"pos":[0,51],"content":"Receives events from the centralized event manager.","nodes":[{"content":"Receives events from the centralized event manager.","pos":[0,51]}]}],"pos":[3915,3967],"yaml":true},{"content":"The type of the <xref href=\"System.Windows.WeakEventManager\"></xref> calling this method.","nodes":[{"pos":[0,89],"content":"The type of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager\"&gt;&lt;/xref&gt;</ph> calling this method.","source":"The type of the <xref href=\"System.Windows.WeakEventManager\"></xref> calling this method."}],"pos":[5033,5123],"yaml":true},{"content":"Object that originated the event.","nodes":[{"pos":[0,33],"content":"Object that originated the event.","nodes":[{"content":"Object that originated the event.","pos":[0,33]}]}],"pos":[5185,5219],"yaml":true},{"content":"Event data.","nodes":[{"pos":[0,11],"content":"Event data.","nodes":[{"content":"Event data.","pos":[0,11]}]}],"pos":[5279,5291],"yaml":true},{"content":"`true` if the listener handled the event. It is considered an error by the <xref href=\"System.Windows.WeakEventManager\"></xref> handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] to register a listener for an event that the listener does not handle. Regardless, the method should return `false` if it receives an event that it does not recognize or handle.","nodes":[{"pos":[0,389],"content":"`true` if the listener handled the event. It is considered an error by the <xref href=\"System.Windows.WeakEventManager\"></xref> handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] to register a listener for an event that the listener does not handle. Regardless, the method should return `false` if it receives an event that it does not recognize or handle.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the listener handled the event.","pos":[0,41],"source":"`true` if the listener handled the event."},{"content":"It is considered an error by the <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager\"&gt;&lt;/xref&gt;</ph> handling in <ph id=\"ph2\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> to register a listener for an event that the listener does not handle.","pos":[42,282],"source":" It is considered an error by the <xref href=\"System.Windows.WeakEventManager\"></xref> handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] to register a listener for an event that the listener does not handle."},{"content":"Regardless, the method should return <ph id=\"ph1\">`false`</ph> if it receives an event that it does not recognize or handle.","pos":[283,389],"source":" Regardless, the method should return `false` if it receives an event that it does not recognize or handle."}]}],"pos":[5349,5741],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.IWeakEventListener\n  commentId: T:System.Windows.IWeakEventListener\n  id: IWeakEventListener\n  children:\n  - System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)\n  langs:\n  - csharp\n  name: IWeakEventListener\n  nameWithType: IWeakEventListener\n  fullName: System.Windows.IWeakEventListener\n  type: Interface\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <xref href=\"System.Windows.WeakEventManager\"></xref>.\n  remarks: \"The <xref:System.Windows.WeakEventManager> (a dispatcher) forwards an event by calling the <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> method on classes that implement this interface, and that have been added as listeners by calling <xref:System.Windows.WeakEventManager> methods beforehand.  \\n  \\n The principal reason for following the WeakEvent pattern is when the event source has an object lifetime that is potentially independent of the event listeners. Using the central event dispatching of a <xref:System.Windows.WeakEventManager> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners. By contrast, a normal event hookup using `+=` or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers. This keeps the listener references from being garbage collected in a timely fashion.  \\n  \\n One common situation where the relationships between sources and listeners suggests the use of this pattern is the handling of update events coming from sources for data bindings.  \\n  \\n You can use the WeakEvent pattern to listen for events that are external to your application. You only need to define a <xref:System.Windows.WeakEventManager> for it, provide listening behavior in <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, and use the <xref:System.Windows.WeakEventManager> to attach the handler references rather than `+=`.\"\n  syntax:\n    content: public interface IWeakEventListener\n  derivedClasses:\n  - System.Windows.Controls.ItemCollection\n  - System.Windows.Controls.ItemContainerGenerator\n  - System.Windows.Controls.Primitives.GridViewRowPresenterBase\n  - System.Windows.Controls.Ribbon.RibbonGallery\n  - System.Windows.Controls.Ribbon.RibbonGalleryCategory\n  - System.Windows.Data.BindingExpression\n  - System.Windows.Data.BindingExpressionBase\n  - System.Windows.Data.CollectionContainer\n  - System.Windows.Data.CollectionViewSource\n  - System.Windows.Data.CompositeCollection\n  implements: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/IWeakEventListener.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)\n  commentId: M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)\n  id: ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)\n  parent: System.Windows.IWeakEventListener\n  langs:\n  - csharp\n  name: ReceiveWeakEvent(Type, Object, EventArgs)\n  nameWithType: IWeakEventListener.ReceiveWeakEvent(Type, Object, EventArgs)\n  fullName: IWeakEventListener.ReceiveWeakEvent(Type, Object, EventArgs)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Receives events from the centralized event manager.\n  remarks: ''\n  example:\n  - \"The following example implements <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> to provide WeakEvent pattern support for two hypothetical events `ClockwiseSpin` and `CounterclockwiseSpin` that each have a dedicated <xref:System.Windows.WeakEventManager> (not shown). This implementation calls class handler stubs for each supported event, casting the event data (in this case the two events share an event data type `SpinEventArgs`). The implementation returns `false` if the event received is not one that is expected.  \\n  \\n [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]\\n [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]\"\n  syntax:\n    content: public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);\n    parameters:\n    - id: managerType\n      type: System.Type\n      description: The type of the <xref href=\"System.Windows.WeakEventManager\"></xref> calling this method.\n    - id: sender\n      type: System.Object\n      description: Object that originated the event.\n    - id: e\n      type: System.EventArgs\n      description: Event data.\n    return:\n      type: System.Boolean\n      description: '`true` if the listener handled the event. It is considered an error by the <xref href=\"System.Windows.WeakEventManager\"></xref> handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] to register a listener for an event that the listener does not handle. Regardless, the method should return `false` if it receives an event that it does not recognize or handle.'\n  overload: System.Windows.IWeakEventListener.ReceiveWeakEvent*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/IWeakEventListener.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)\n  parent: System.Windows.IWeakEventListener\n  isExternal: false\n  name: ReceiveWeakEvent(Type, Object, EventArgs)\n  nameWithType: IWeakEventListener.ReceiveWeakEvent(Type, Object, EventArgs)\n  fullName: IWeakEventListener.ReceiveWeakEvent(Type, Object, EventArgs)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.Windows.IWeakEventListener.ReceiveWeakEvent*\n  parent: System.Windows.IWeakEventListener\n  isExternal: false\n  name: ReceiveWeakEvent\n  nameWithType: IWeakEventListener.ReceiveWeakEvent\n  fullName: IWeakEventListener.ReceiveWeakEvent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/IWeakEventListener.xml\n"}