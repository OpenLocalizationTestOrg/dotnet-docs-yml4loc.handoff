### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.MethodBuilder
  commentId: T:System.Reflection.Emit.MethodBuilder
  id: MethodBuilder
  children:
  - System.Reflection.Emit.MethodBuilder.#ctor
  - System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)
  - System.Reflection.Emit.MethodBuilder.Attributes
  - System.Reflection.Emit.MethodBuilder.CallingConvention
  - System.Reflection.Emit.MethodBuilder.ContainsGenericParameters
  - System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)
  - System.Reflection.Emit.MethodBuilder.DeclaringType
  - System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])
  - System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
  - System.Reflection.Emit.MethodBuilder.Equals(System.Object)
  - System.Reflection.Emit.MethodBuilder.GetBaseDefinition
  - System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)
  - System.Reflection.Emit.MethodBuilder.GetGenericArguments
  - System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition
  - System.Reflection.Emit.MethodBuilder.GetHashCode
  - System.Reflection.Emit.MethodBuilder.GetILGenerator
  - System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)
  - System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags
  - System.Reflection.Emit.MethodBuilder.GetModule
  - System.Reflection.Emit.MethodBuilder.GetParameters
  - System.Reflection.Emit.MethodBuilder.GetToken
  - System.Reflection.Emit.MethodBuilder.InitLocals
  - System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  - System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)
  - System.Reflection.Emit.MethodBuilder.IsGenericMethod
  - System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition
  - System.Reflection.Emit.MethodBuilder.IsSecurityCritical
  - System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical
  - System.Reflection.Emit.MethodBuilder.IsSecurityTransparent
  - System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])
  - System.Reflection.Emit.MethodBuilder.MethodHandle
  - System.Reflection.Emit.MethodBuilder.MethodImplementationFlags
  - System.Reflection.Emit.MethodBuilder.Module
  - System.Reflection.Emit.MethodBuilder.Name
  - System.Reflection.Emit.MethodBuilder.ReflectedType
  - System.Reflection.Emit.MethodBuilder.ReturnParameter
  - System.Reflection.Emit.MethodBuilder.ReturnType
  - System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes
  - System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  - System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  - System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)
  - System.Reflection.Emit.MethodBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)
  - System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})
  - System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])
  - System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)
  - System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  - System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])
  - System.Reflection.Emit.MethodBuilder.Signature
  - System.Reflection.Emit.MethodBuilder.ToString
  - System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  langs:
  - csharp
  name: MethodBuilder
  nameWithType: MethodBuilder
  fullName: System.Reflection.Emit.MethodBuilder
  type: Class
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Defines and represents a method (or constructor) on a dynamic class.
  remarks: "The <xref:System.Reflection.Emit.MethodBuilder> class is used to fully describe a method in Microsoft intermediate language (MSIL), including the name, attributes, signature, and method body. It is used in conjunction with the <xref:System.Reflection.Emit.TypeBuilder> class to create classes at runtime.  \n  \n## Global methods and methods as type members  \n You can use reflection emit to define global methods and to define methods as type members. The APIs that define methods return <xref:System.Reflection.Emit.MethodBuilder> objects.  \n  \n### Global methods  \n A global method is defined by using the <xref:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod%2A?displayProperty=fullName> method, which returns a **MethodBuilder** object.  \n  \n Global methods must be static. If a dynamic module contains global methods, the <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A?displayProperty=fullName> method must be called before persisting the dynamic module or the containing dynamic assembly because the common language runtime postpones fixing up the dynamic module until all global functions have been defined.  \n  \n A global native method is defined by using the <xref:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod%2A?displayProperty=fullName> method. Platform invoke (PInvoke) methods must not be declared abstract or virtual. The runtime sets the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute for a platform invoke method.  \n  \n### Methods as members of types  \n A method is defined as a type member by using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method, which returns a <xref:System.Reflection.Emit.MethodBuilder> object.  \n  \n The <xref:System.Reflection.Emit.MethodBuilder.DefineParameter%2A> method is used to set the name and parameter attributes of a parameter, or of the return value. The<xref:System.Reflection.Emit.ParameterBuilder> object returned by this method represents a parameter or the return value. The <xref:System.Reflection.Emit.ParameterBuilder> object can be used to set the marshaling, to set the constant value, and to apply custom attributes.  \n  \n## Attributes  \n Members of the <xref:System.Reflection.MethodAttributes> enumeration define the precise character of a dynamic method:  \n  \n-   Static methods are specified using the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.  \n  \n-   Final methods (methods that cannot be overridden) are specified using the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.  \n  \n-   Virtual methods are specified using the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.  \n  \n-   Abstract methods are specified using the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.  \n  \n-   Several attributes determine method visibility. See the description of the <xref:System.Reflection.MethodAttributes> enumeration.  \n  \n-   Methods that implement overloaded operators must set the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.  \n  \n-   Finalizers must set the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.  \n  \n## Known Issues  \n  \n-   Although <xref:System.Reflection.Emit.MethodBuilder> is derived from <xref:System.Reflection.MethodInfo>, some of the abstract methods defined in the <xref:System.Reflection.MethodInfo> class are not fully implemented in <xref:System.Reflection.Emit.MethodBuilder>. These <xref:System.Reflection.Emit.MethodBuilder> methods throw the <xref:System.NotSupportedException>. For example the <xref:System.Reflection.Emit.MethodBuilder.Invoke%2A?displayProperty=fullName> method is not fully implemented. You can reflect on these methods by retrieving the enclosing type using the <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> methods.  \n  \n-   Custom modifiers are supported starting with the .NET Framework version 2.0. They are not supported in earlier versions."
  example:
  - "The following example uses the <xref:System.Reflection.Emit.MethodBuilder> class to create a method within a dynamic type.  \n  \n [!code-cpp[System.Reflection.Emit.MethodBuilder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder Example/CPP/source.cpp#1)]\n [!code-csharp[System.Reflection.Emit.MethodBuilder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder Example/CS/source.cs#1)]\n [!code-vb[System.Reflection.Emit.MethodBuilder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class MethodBuilder : System.Reflection.MethodInfo, System.Runtime.InteropServices._MethodBuilder
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  - System.Reflection.MethodBase
  - System.Reflection.MethodInfo
  implements:
  - System.Runtime.InteropServices._MethodBuilder
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.GetCustomAttributesData
  - System.Reflection.MemberInfo.MetadataToken
  - System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  - System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.MethodBase.GetCurrentMethod
  - System.Reflection.MethodBase.GetMethodBody
  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  - System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
  - System.Reflection.MethodBase.IsAbstract
  - System.Reflection.MethodBase.IsAssembly
  - System.Reflection.MethodBase.IsConstructor
  - System.Reflection.MethodBase.IsFamily
  - System.Reflection.MethodBase.IsFamilyAndAssembly
  - System.Reflection.MethodBase.IsFamilyOrAssembly
  - System.Reflection.MethodBase.IsFinal
  - System.Reflection.MethodBase.IsHideBySig
  - System.Reflection.MethodBase.IsPrivate
  - System.Reflection.MethodBase.IsPublic
  - System.Reflection.MethodBase.IsSpecialName
  - System.Reflection.MethodBase.IsStatic
  - System.Reflection.MethodBase.IsVirtual
  - System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)
  - System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual
  - System.Reflection.MethodInfo.CreateDelegate(System.Type)
  - System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)
  - System.Reflection.MethodInfo.MemberType
  - System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)
  - System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)
  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType
  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  extensionMethods:
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)
  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)
  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)
  - System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)
  - System.Reflection.MethodInfoExtensions.GetBaseDefinition(System.Reflection.MethodInfo)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)
  attributes:
  - type: System.Runtime.InteropServices.ClassInterfaceAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.#ctor
  commentId: M:System.Reflection.Emit.MethodBuilder.#ctor
  id: '#ctor'
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: MethodBuilder()
  nameWithType: MethodBuilder.MethodBuilder()
  fullName: MethodBuilder.MethodBuilder()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  syntax:
    content: protected MethodBuilder ();
    parameters: []
  overload: System.Reflection.Emit.MethodBuilder.#ctor*
  exceptions: []
  version:
  - xamarinios-10.8
  monikers:
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)
  commentId: M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)
  id: AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: AddDeclarativeSecurity(SecurityAction, PermissionSet)
  nameWithType: MethodBuilder.AddDeclarativeSecurity(SecurityAction, PermissionSet)
  fullName: MethodBuilder.AddDeclarativeSecurity(SecurityAction, PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Adds declarative security to this method.
  remarks: "<xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A> can be called several times, with each call specifying a security action (such as `Demand`, `Assert`, and `Deny`) and a set of permissions that the action applies to.  \n  \n> [!NOTE]\n>  In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a method by using the <xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A> method are stored in the old XML metadata format. See Emitting Declarative Security Attributes."
  example:
  - "The code sample below illustrates the contextual use of `AddDeclarativeSecurity` to require the caller of a method to have unrestricted permissions.  \n  \n [!code-cpp[System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example/CPP/source.cpp#1)]\n [!code-csharp[System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example/CS/source.cs#1)]\n [!code-vb[System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example/VB/source.vb#1)]"
  syntax:
    content: public void AddDeclarativeSecurity (System.Security.Permissions.SecurityAction action, System.Security.PermissionSet pset);
    parameters:
    - id: action
      type: System.Security.Permissions.SecurityAction
      description: The security action to be taken (Demand, Assert, and so on).
    - id: pset
      type: System.Security.PermissionSet
      description: The set of permissions the action applies to.
  overload: System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>action</code> is invalid (`RequestMinimum`, `RequestOptional`, and `RequestRefuse` are invalid).
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The containing type has been created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n The permission set <code>pset</code> contains an action that was added earlier by <xref href=\"System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)\"></xref>.  \n  \n -or-  \n  \n For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>pset</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.Attributes
  commentId: P:System.Reflection.Emit.MethodBuilder.Attributes
  id: Attributes
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: Attributes
  nameWithType: MethodBuilder.Attributes
  fullName: MethodBuilder.Attributes
  type: Property
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves the attributes for this method.
  syntax:
    content: public override System.Reflection.MethodAttributes Attributes { get; }
    return:
      type: System.Reflection.MethodAttributes
      description: Read-only. Retrieves the `MethodAttributes` for this method.
  overload: System.Reflection.Emit.MethodBuilder.Attributes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.CallingConvention
  commentId: P:System.Reflection.Emit.MethodBuilder.CallingConvention
  id: CallingConvention
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: CallingConvention
  nameWithType: MethodBuilder.CallingConvention
  fullName: MethodBuilder.CallingConvention
  type: Property
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the calling convention of the method.
  syntax:
    content: public override System.Reflection.CallingConventions CallingConvention { get; }
    return:
      type: System.Reflection.CallingConventions
      description: Read-only. The calling convention of the method.
  overload: System.Reflection.Emit.MethodBuilder.CallingConvention*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.ContainsGenericParameters
  commentId: P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters
  id: ContainsGenericParameters
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: ContainsGenericParameters
  nameWithType: MethodBuilder.ContainsGenericParameters
  fullName: MethodBuilder.ContainsGenericParameters
  type: Property
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for this type.
  remarks: "A <xref:System.Reflection.Emit.MethodBuilder> always represents a generic method definition, and thus cannot be invoked.  \n  \n For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A?displayProperty=fullName>. For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>."
  syntax:
    content: public override bool ContainsGenericParameters { get; }
    return:
      type: System.Boolean
      description: Not supported.
  overload: System.Reflection.Emit.MethodBuilder.ContainsGenericParameters*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The invoked method is not supported in the base class.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)
  commentId: M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)
  id: CreateMethodBody(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: CreateMethodBody(Byte[], Int32)
  nameWithType: MethodBuilder.CreateMethodBody(Byte[], Int32)
  fullName: MethodBuilder.CreateMethodBody(Byte[], Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Creates the body of the method using a supplied byte array of Microsoft intermediate language (MSIL) instructions.
  remarks: "This method creates the method's body from `il`, an array containing MSIL instructions as opcodes. The number of bytes of valid MSIL is given by count.  \n  \n> [!NOTE]\n>  This is currently not fully supported. The user cannot supply the location of token fix ups and exception handlers."
  example:
  - "In the example provided below, a simple method that adds two integers is generated via opcode using `CreateMethodBody`.  \n  \n [!code-cpp[System.Refelction.Emit.MethodBuilder.CreateMethodBody Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Refelction.Emit.MethodBuilder.CreateMethodBody Example/CPP/source.cpp#1)]\n [!code-csharp[System.Refelction.Emit.MethodBuilder.CreateMethodBody Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Refelction.Emit.MethodBuilder.CreateMethodBody Example/CS/source.cs#1)]\n [!code-vb[System.Refelction.Emit.MethodBuilder.CreateMethodBody Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Refelction.Emit.MethodBuilder.CreateMethodBody Example/VB/source.vb#1)]"
  syntax:
    content: public void CreateMethodBody (byte[] il, int count);
    parameters:
    - id: il
      type: System.Byte[]
      description: An array containing valid MSIL instructions. If this parameter is `null`, the method's body is cleared.
    - id: count
      type: System.Int32
      description: The number of valid bytes in the MSIL array. This value is ignored if MSIL is `null`.
  overload: System.Reflection.Emit.MethodBuilder.CreateMethodBody*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>count</code> is not within the range of indexes of the supplied MSIL instruction array and <code>il</code> is not `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The containing type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n This method was called previously on this `MethodBuilder` with an <code>il</code> argument that was not `null`.  \n  \n -or-  \n  \n For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.DeclaringType
  commentId: P:System.Reflection.Emit.MethodBuilder.DeclaringType
  id: DeclaringType
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: DeclaringType
  nameWithType: MethodBuilder.DeclaringType
  fullName: MethodBuilder.DeclaringType
  type: Property
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the type that declares this method.
  remarks: ''
  example:
  - "The following code illustrates the use of the `Type` property.  \n  \n [!code-cpp[MethodBuilderClass_TypeSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBuilderClass_TypeSample/CPP/methodbuilderclass.cpp#1)]\n [!code-csharp[MethodBuilderClass_TypeSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBuilderClass_TypeSample/CS/methodbuilderclass.cs#1)]\n [!code-vb[MethodBuilderClass_TypeSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBuilderClass_TypeSample/VB/methodbuilderclass.vb#1)]"
  syntax:
    content: public override Type DeclaringType { get; }
    return:
      type: System.Type
      description: Read-only. The type that declares this method.
  overload: System.Reflection.Emit.MethodBuilder.DeclaringType*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])
  commentId: M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])
  id: DefineGenericParameters(System.String[])
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: DefineGenericParameters(String[])
  nameWithType: MethodBuilder.DefineGenericParameters(String[])
  fullName: MethodBuilder.DefineGenericParameters(String[])
  type: Method
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets the number of generic type parameters for the current method, specifies their names, and returns an array of <xref href="System.Reflection.Emit.GenericTypeParameterBuilder"></xref> objects that can be used to define their constraints.
  remarks: "Calling the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method makes the current method generic. There is no way to undo this change. Calling this method a second time causes an <xref:System.InvalidOperationException>.  \n  \n The type parameters of the generic method can be retrieved later by using the <xref:System.Reflection.Emit.MethodBuilder.GetGenericArguments%2A> method.  \n  \n By convention, a type parameter name is a single uppercase letter.  \n  \n For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=fullName>. For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>."
  example:
  - "The following code example creates a dynamic type, `DemoType`, which contains the dynamic generic method `DemoMethod`. This method has two generic type parameters, one of which is used as a parameter, and the other as the return type.  \n  \n When the code is executed, the dynamic assembly is saved as DemoGenericMethod1.dll, and can be examined using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).  \n  \n> [!NOTE]\n>  This code example generates a simple method body that merely returns a null reference. For a code example with a more fully developed method body that creates and uses generic types, see [How to: Define a Generic Method with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-method-with-reflection-emit.md).  \n  \n [!code-cpp[GenericMethodBuilder#1](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#1)]\n [!code-csharp[GenericMethodBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#1)]\n [!code-vb[GenericMethodBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#1)]"
  syntax:
    content: public System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters (string[] names);
    parameters:
    - id: names
      type: System.String[]
      description: An array of strings that represent the names of the generic type parameters.
    return:
      type: System.Reflection.Emit.GenericTypeParameterBuilder[]
      description: An array of <xref href="System.Reflection.Emit.GenericTypeParameterBuilder"></xref> objects representing the type parameters of the generic method.
  overload: System.Reflection.Emit.MethodBuilder.DefineGenericParameters*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Generic type parameters have already been defined for this method.  \n  \n -or-  \n  \n The method has been completed already.  \n  \n -or-  \n  \n The <xref href=\"System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)\"></xref> method has been called for the current method."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>names</code> is `null`.  \n  \n -or-  \n  \n An element of <code>names</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>names</code> is an empty array.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
  commentId: M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
  id: DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: DefineParameter(Int32, ParameterAttributes, String)
  nameWithType: MethodBuilder.DefineParameter(Int32, ParameterAttributes, String)
  fullName: MethodBuilder.DefineParameter(Int32, ParameterAttributes, String)
  type: Method
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets the parameter attributes and the name of a parameter of this method, or of the return value of this method. Returns a ParameterBuilder that can be used to apply custom attributes.
  remarks: "The <xref:System.Reflection.Emit.ParameterBuilder> object returned by this method can be used to set the default value for a parameter or to apply custom attributes.  \n  \n Parameter numbering begins with 1, so `position` is 1 for the first parameter. If `position` is zero, this method affects the return value.  \n  \n> [!NOTE]\n>  In the .NET Framework versions 1.0 and 1.1, an exception is thrown if `position` is zero, so this method cannot be used to modify attributes of the return value in those versions."
  syntax:
    content: public System.Reflection.Emit.ParameterBuilder DefineParameter (int position, System.Reflection.ParameterAttributes attributes, string strParamName);
    parameters:
    - id: position
      type: System.Int32
      description: The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter; the number 0 represents the return value of the method.
    - id: attributes
      type: System.Reflection.ParameterAttributes
      description: The parameter attributes of the parameter.
    - id: strParamName
      type: System.String
      description: The name of the parameter. The name can be the null string.
    return:
      type: System.Reflection.Emit.ParameterBuilder
      description: Returns a `ParameterBuilder` object that represents a parameter of this method or the return value of this method.
  overload: System.Reflection.Emit.MethodBuilder.DefineParameter*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The method has no parameters.  \n  \n -or-  \n  \n <code>position</code> is less than zero.  \n  \n -or-  \n  \n <code>position</code> is greater than the number of the method's parameters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The containing type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.Equals(System.Object)
  commentId: M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: MethodBuilder.Equals(Object)
  fullName: MethodBuilder.Equals(Object)
  type: Method
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Determines whether the given object is equal to this instance.
  remarks: Equality is determined by having the same name, attributes, and signature.
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with this `MethodBuilder` instance.
    return:
      type: System.Boolean
      description: '`true` if <code>obj</code> is an instance of `MethodBuilder` and is equal to this object; otherwise, `false`.'
  overload: System.Reflection.Emit.MethodBuilder.Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.GetBaseDefinition
  commentId: M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition
  id: GetBaseDefinition
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: GetBaseDefinition()
  nameWithType: MethodBuilder.GetBaseDefinition()
  fullName: MethodBuilder.GetBaseDefinition()
  type: Method
  assemblies:
  - mscorlib
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Return the base implementation for a method.
  remarks: This always returns the current `MethodBuilder` object.
  syntax:
    content: public override System.Reflection.MethodInfo GetBaseDefinition ();
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: The base implementation of this method.
  overload: System.Reflection.Emit.MethodBuilder.GetBaseDefinition*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)
  commentId: M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)
  id: GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: GetCustomAttributes(Type, Boolean)
  nameWithType: MethodBuilder.GetCustomAttributes(Type, Boolean)
  fullName: MethodBuilder.GetCustomAttributes(Type, Boolean)
  type: Method
  assemblies:
  - mscorlib
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns the custom attributes identified by the given type.
  syntax:
    content: public override object[] GetCustomAttributes (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: The custom attribute type.
    - id: inherit
      type: System.Boolean
      description: Specifies whether to search this member's inheritance chain to find the custom attributes.
    return:
      type: System.Object[]
      description: Returns an array of objects representing the attributes of this method that are of type <code>attributeType</code>.
  overload: System.Reflection.Emit.MethodBuilder.GetCustomAttributes*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: This method is not currently supported. Retrieve the method using <xref href="System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])"></xref> and call <xref href="System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)"></xref> on the returned <xref href="System.Reflection.MethodInfo"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)
  commentId: M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)
  id: GetCustomAttributes(System.Boolean)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: GetCustomAttributes(Boolean)
  nameWithType: MethodBuilder.GetCustomAttributes(Boolean)
  fullName: MethodBuilder.GetCustomAttributes(Boolean)
  type: Method
  assemblies:
  - mscorlib
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns all the custom attributes defined for this method.
  syntax:
    content: public override object[] GetCustomAttributes (bool inherit);
    parameters:
    - id: inherit
      type: System.Boolean
      description: Specifies whether to search this member's inheritance chain to find the custom attributes.
    return:
      type: System.Object[]
      description: Returns an array of objects representing all the custom attributes of this method.
  overload: System.Reflection.Emit.MethodBuilder.GetCustomAttributes*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: This method is not currently supported. Retrieve the method using <xref href="System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])"></xref> and call <xref href="System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)"></xref> on the returned <xref href="System.Reflection.MethodInfo"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.GetGenericArguments
  commentId: M:System.Reflection.Emit.MethodBuilder.GetGenericArguments
  id: GetGenericArguments
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: GetGenericArguments()
  nameWithType: MethodBuilder.GetGenericArguments()
  fullName: MethodBuilder.GetGenericArguments()
  type: Method
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns an array of <xref href="System.Reflection.Emit.GenericTypeParameterBuilder"></xref> objects that represent the type parameters of the method, if it is generic.
  remarks: "The type parameters of a generic method also are returned by the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method that is used to define them.  \n  \n For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName>. For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>."
  syntax:
    content: public override Type[] GetGenericArguments ();
    parameters: []
    return:
      type: System.Type[]
      description: An array of <xref href="System.Reflection.Emit.GenericTypeParameterBuilder"></xref> objects representing the type parameters, if the method is generic, or `null` if the method is not generic.
  overload: System.Reflection.Emit.MethodBuilder.GetGenericArguments*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition
  commentId: M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition
  id: GetGenericMethodDefinition
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: GetGenericMethodDefinition()
  nameWithType: MethodBuilder.GetGenericMethodDefinition()
  fullName: MethodBuilder.GetGenericMethodDefinition()
  type: Method
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns this method.
  remarks: "A <xref:System.Reflection.Emit.MethodBuilder> cannot be used to emit a constructed generic method directly. The emitted method is a generic method definition.  \n  \n For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=fullName>. For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>."
  syntax:
    content: public override System.Reflection.MethodInfo GetGenericMethodDefinition ();
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: The current instance of <xref href="System.Reflection.Emit.MethodBuilder"></xref>.
  overload: System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The current method is not generic. That is, the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethod"></xref> property returns `false`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.GetHashCode
  commentId: M:System.Reflection.Emit.MethodBuilder.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: MethodBuilder.GetHashCode()
  fullName: MethodBuilder.GetHashCode()
  type: Method
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the hash code for this method.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: The hash code for this method.
  overload: System.Reflection.Emit.MethodBuilder.GetHashCode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.GetILGenerator
  commentId: M:System.Reflection.Emit.MethodBuilder.GetILGenerator
  id: GetILGenerator
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: GetILGenerator()
  nameWithType: MethodBuilder.GetILGenerator()
  fullName: MethodBuilder.GetILGenerator()
  type: Method
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns an `ILGenerator` for this method with a default Microsoft intermediate language (MSIL) stream size of 64 bytes.
  remarks: ''
  example:
  - "The code sample below demonstrates the contextual usage of the `GetILGenerator` method, creating and emitting a dynamic assembly that will calculate the dot product of two points in 3D space.  \n  \n [!code-cpp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CPP/source.cpp#1)]\n [!code-csharp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CS/source.cs#1)]\n [!code-vb[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/VB/source.vb#1)]"
  syntax:
    content: public System.Reflection.Emit.ILGenerator GetILGenerator ();
    parameters: []
    return:
      type: System.Reflection.Emit.ILGenerator
      description: Returns an `ILGenerator` object for this method.
  overload: System.Reflection.Emit.MethodBuilder.GetILGenerator*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The method should not have a body because of its <xref href=\"System.Reflection.MethodAttributes\"></xref> or <xref href=\"System.Reflection.MethodImplAttributes\"></xref> flags, for example because it has the <xref href=\"System.Reflection.MethodAttributes.PinvokeImpl\"></xref> flag.  \n  \n -or-  \n  \n The method is a generic method, but not a generic method definition. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)
  commentId: M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)
  id: GetILGenerator(System.Int32)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: GetILGenerator(Int32)
  nameWithType: MethodBuilder.GetILGenerator(Int32)
  fullName: MethodBuilder.GetILGenerator(Int32)
  type: Method
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns an `ILGenerator` for this method with the specified Microsoft intermediate language (MSIL) stream size.
  remarks: ''
  example:
  - "The code sample below demonstrates the contextual usage of the `GetILGenerator` method, creating and emitting a dynamic assembly that will calculate the dot product of two points in 3D space.  \n  \n [!code-cpp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CPP/source.cpp#1)]\n [!code-csharp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CS/source.cs#1)]\n [!code-vb[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/VB/source.vb#1)]"
  syntax:
    content: public System.Reflection.Emit.ILGenerator GetILGenerator (int size);
    parameters:
    - id: size
      type: System.Int32
      description: The size of the MSIL stream, in bytes.
    return:
      type: System.Reflection.Emit.ILGenerator
      description: Returns an `ILGenerator` object for this method.
  overload: System.Reflection.Emit.MethodBuilder.GetILGenerator*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The method should not have a body because of its <xref href=\"System.Reflection.MethodAttributes\"></xref> or <xref href=\"System.Reflection.MethodImplAttributes\"></xref> flags, for example because it has the <xref href=\"System.Reflection.MethodAttributes.PinvokeImpl\"></xref> flag.  \n  \n -or-  \n  \n The method is a generic method, but not a generic method definition. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags
  commentId: M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags
  id: GetMethodImplementationFlags
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: GetMethodImplementationFlags()
  nameWithType: MethodBuilder.GetMethodImplementationFlags()
  fullName: MethodBuilder.GetMethodImplementationFlags()
  type: Method
  assemblies:
  - mscorlib
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns the implementation flags for the method.
  syntax:
    content: public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();
    parameters: []
    return:
      type: System.Reflection.MethodImplAttributes
      description: Returns the implementation flags for the method.
  overload: System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.GetModule
  commentId: M:System.Reflection.Emit.MethodBuilder.GetModule
  id: GetModule
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: GetModule()
  nameWithType: MethodBuilder.GetModule()
  fullName: MethodBuilder.GetModule()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a reference to the module that contains this method.
  remarks: ''
  example:
  - "The sample code below illustrates the usage of the `GetModule` method to retrieve information about a dynamically-generated module.  \n  \n [!code-cpp[System.Reflection.Emit.MethodBuilder.GetModule#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetModule/CPP/source3.cpp#1)]\n [!code-csharp[System.Reflection.Emit.MethodBuilder.GetModule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetModule/CS/source3.cs#1)]\n [!code-vb[System.Reflection.Emit.MethodBuilder.GetModule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetModule/VB/source3.vb#1)]"
  syntax:
    content: public System.Reflection.Module GetModule ();
    parameters: []
    return:
      type: System.Reflection.Module
      description: Returns a reference to the module that contains this method.
  overload: System.Reflection.Emit.MethodBuilder.GetModule*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.GetParameters
  commentId: M:System.Reflection.Emit.MethodBuilder.GetParameters
  id: GetParameters
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: GetParameters()
  nameWithType: MethodBuilder.GetParameters()
  fullName: MethodBuilder.GetParameters()
  type: Method
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the parameters of this method.
  remarks: ''
  example:
  - "The code sample below illustrates the use of `GetParameters` to discover information on the parameters passed to a dynamically-generated method.  \n  \n [!code-cpp[System.Reflection.Emit.MethodBuilder.GetParameters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetParameters Example/CPP/source4.cpp#1)]\n [!code-csharp[System.Reflection.Emit.MethodBuilder.GetParameters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetParameters Example/CS/source4.cs#1)]\n [!code-vb[System.Reflection.Emit.MethodBuilder.GetParameters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetParameters Example/VB/source4.vb#1)]"
  syntax:
    content: public override System.Reflection.ParameterInfo[] GetParameters ();
    parameters: []
    return:
      type: System.Reflection.ParameterInfo[]
      description: An array of `ParameterInfo` objects that represent the parameters of the method.
  overload: System.Reflection.Emit.MethodBuilder.GetParameters*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: This method is not currently supported. Retrieve the method using <xref href="System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])"></xref> and call `GetParameters` on the returned <xref href="System.Reflection.MethodInfo"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.GetToken
  commentId: M:System.Reflection.Emit.MethodBuilder.GetToken
  id: GetToken
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: GetToken()
  nameWithType: MethodBuilder.GetToken()
  fullName: MethodBuilder.GetToken()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the `MethodToken` that represents the token for this method.
  syntax:
    content: public System.Reflection.Emit.MethodToken GetToken ();
    parameters: []
    return:
      type: System.Reflection.Emit.MethodToken
      description: Returns the `MethodToken` of this method.
  overload: System.Reflection.Emit.MethodBuilder.GetToken*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.InitLocals
  commentId: P:System.Reflection.Emit.MethodBuilder.InitLocals
  id: InitLocals
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: InitLocals
  nameWithType: MethodBuilder.InitLocals
  fullName: MethodBuilder.InitLocals
  type: Property
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets or sets a Boolean value that specifies whether the local variables in this method are zero initialized. The default value of this property is `true`.
  remarks: If this property is set to `true`, the emitted MSIL includes initialization of local variables. If it is set to `false`, local variables are not initialized and the generated code is unverifiable.
  syntax:
    content: public bool InitLocals { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the local variables in this method should be zero initialized; otherwise `false`.'
  overload: System.Reflection.Emit.MethodBuilder.InitLocals*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: For the current method, the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethod"></xref> property is `true`, but the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"></xref> property is `false`. (Get or set.)
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  commentId: M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  id: Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)
  nameWithType: MethodBuilder.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)
  fullName: MethodBuilder.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Dynamically invokes the method reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.
  remarks: "If the method is static, the `obj` parameter is ignored. For non-static methods, `obj` should be an instance of a class that inherits or declares the method and must be the same type as this class. If the method has no parameters, the value of `parameters` should be `null`. Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters for the method reflected by this instance.  \n  \n> [!NOTE]\n>  Access restrictions are ignored for fully-trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully-trusted."
  syntax:
    content: public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
    parameters:
    - id: obj
      type: System.Object
      description: The object on which to invoke the specified method. If the method is static, this parameter is ignored.
    - id: invokeAttr
      type: System.Reflection.BindingFlags
      description: 'This must be a bit flag from <xref href="System.Reflection.BindingFlags"></xref> : `InvokeMethod`, `NonPublic`, and so on.'
    - id: binder
      type: System.Reflection.Binder
      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If binder is `null`, the default binder is used. For more details, see <xref href="System.Reflection.Binder"></xref>.
    - id: parameters
      type: System.Object[]
      description: An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this should be `null`.
    - id: culture
      type: System.Globalization.CultureInfo
      description: An instance of <xref href="System.Globalization.CultureInfo"></xref> used to govern the coercion of types. If this is null, the <xref href="System.Globalization.CultureInfo"></xref> for the current thread is used. (Note that this is necessary to, for example, convert a <xref href="System.String"></xref> that represents 1000 to a <xref href="System.Double"></xref> value, since 1000 is represented differently by different cultures.)
    return:
      type: System.Object
      description: Returns an object containing the return value of the invoked method.
  overload: System.Reflection.Emit.MethodBuilder.Invoke*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: This method is not currently supported. Retrieve the method using <xref href="System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])"></xref> and call <xref href="System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"></xref> on the returned <xref href="System.Reflection.MethodInfo"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)
  commentId: M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)
  id: IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: IsDefined(Type, Boolean)
  nameWithType: MethodBuilder.IsDefined(Type, Boolean)
  fullName: MethodBuilder.IsDefined(Type, Boolean)
  type: Method
  assemblies:
  - mscorlib
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Checks if the specified custom attribute type is defined.
  syntax:
    content: public override bool IsDefined (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: The custom attribute type.
    - id: inherit
      type: System.Boolean
      description: Specifies whether to search this member's inheritance chain to find the custom attributes.
    return:
      type: System.Boolean
      description: '`true` if the specified custom attribute type is defined; otherwise, `false`.'
  overload: System.Reflection.Emit.MethodBuilder.IsDefined*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: This method is not currently supported. Retrieve the method using <xref href="System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])"></xref> and call <xref href="System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)"></xref> on the returned <xref href="System.Reflection.MethodInfo"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.IsGenericMethod
  commentId: P:System.Reflection.Emit.MethodBuilder.IsGenericMethod
  id: IsGenericMethod
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: IsGenericMethod
  nameWithType: MethodBuilder.IsGenericMethod
  fullName: MethodBuilder.IsGenericMethod
  type: Property
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a value indicating whether the method is a generic method.
  remarks: A method is generic if it has type parameters. You can make a method generic by calling the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method to add type parameters. This change cannot be reversed.
  example:
  - "The following code example displays the status of a method. This code is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.  \n  \n [!code-cpp[GenericMethodBuilder#7](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#7)]\n [!code-csharp[GenericMethodBuilder#7](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#7)]\n [!code-vb[GenericMethodBuilder#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#7)]"
  syntax:
    content: public override bool IsGenericMethod { get; }
    return:
      type: System.Boolean
      description: '`true` if the method is generic; otherwise, `false`.'
  overload: System.Reflection.Emit.MethodBuilder.IsGenericMethod*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition
  commentId: P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition
  id: IsGenericMethodDefinition
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: IsGenericMethodDefinition
  nameWithType: MethodBuilder.IsGenericMethodDefinition
  fullName: MethodBuilder.IsGenericMethodDefinition
  type: Property
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a value indicating whether the current <xref href="System.Reflection.Emit.MethodBuilder"></xref> object represents the definition of a generic method.
  remarks: A <xref:System.Reflection.Emit.MethodBuilder> can only be used to create generic method definitions; it cannot be used to create a constructed generic method directly. However, a subclass of <xref:System.Reflection.Emit.MethodBuilder> might represent a constructed generic method.
  example:
  - "The following code example displays the status of a method. This code is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.  \n  \n [!code-cpp[GenericMethodBuilder#7](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#7)]\n [!code-csharp[GenericMethodBuilder#7](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#7)]\n [!code-vb[GenericMethodBuilder#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#7)]"
  syntax:
    content: public override bool IsGenericMethodDefinition { get; }
    return:
      type: System.Boolean
      description: '`true` if the current <xref href="System.Reflection.Emit.MethodBuilder"></xref> object represents the definition of a generic method; otherwise, `false`.'
  overload: System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.IsSecurityCritical
  commentId: P:System.Reflection.Emit.MethodBuilder.IsSecurityCritical
  id: IsSecurityCritical
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: IsSecurityCritical
  nameWithType: MethodBuilder.IsSecurityCritical
  fullName: MethodBuilder.IsSecurityCritical
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Throws a <xref href="System.NotSupportedException"></xref> in all cases.
  remarks: To determine whether a method in a dynamic assembly is security-critical, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecurityCritical%2A> property on the resulting <xref:System.Reflection.MethodInfo>.
  syntax:
    content: public override bool IsSecurityCritical { get; }
    return:
      type: System.Boolean
      description: Throws a <xref href="System.NotSupportedException"></xref> in all cases.
  overload: System.Reflection.Emit.MethodBuilder.IsSecurityCritical*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: In all cases. This property is not supported in dynamic assemblies.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical
  commentId: P:System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical
  id: IsSecuritySafeCritical
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: IsSecuritySafeCritical
  nameWithType: MethodBuilder.IsSecuritySafeCritical
  fullName: MethodBuilder.IsSecuritySafeCritical
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Throws a <xref href="System.NotSupportedException"></xref> in all cases.
  remarks: To determine whether a method in a dynamic assembly is security-safe-critical, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A> property on the resulting <xref:System.Reflection.MethodInfo>.
  syntax:
    content: public override bool IsSecuritySafeCritical { get; }
    return:
      type: System.Boolean
      description: Throws a <xref href="System.NotSupportedException"></xref> in all cases.
  overload: System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: In all cases. This property is not supported in dynamic assemblies.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.IsSecurityTransparent
  commentId: P:System.Reflection.Emit.MethodBuilder.IsSecurityTransparent
  id: IsSecurityTransparent
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: IsSecurityTransparent
  nameWithType: MethodBuilder.IsSecurityTransparent
  fullName: MethodBuilder.IsSecurityTransparent
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Throws a <xref href="System.NotSupportedException"></xref> in all cases.
  remarks: To determine whether a method in a dynamic assembly is security-transparent, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> property on the resulting <xref:System.Reflection.MethodInfo>.
  syntax:
    content: public override bool IsSecurityTransparent { get; }
    return:
      type: System.Boolean
      description: Throws a <xref href="System.NotSupportedException"></xref> in all cases.
  overload: System.Reflection.Emit.MethodBuilder.IsSecurityTransparent*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: In all cases. This property is not supported in dynamic assemblies.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])
  commentId: M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])
  id: MakeGenericMethod(System.Type[])
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: MakeGenericMethod(Type[])
  nameWithType: MethodBuilder.MakeGenericMethod(Type[])
  fullName: MethodBuilder.MakeGenericMethod(Type[])
  type: Method
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a generic method constructed from the current generic method definition using the specified generic type arguments.
  remarks: When you are emitting dynamic code, you might need to emit a call to a method constructed from the generic method definition represented by a <xref:System.Reflection.Emit.MethodBuilder>, before the enclosing type has been completed. You can use the <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> method to create a <xref:System.Reflection.MethodInfo> for such a constructed method, and use the <xref:System.Reflection.MethodInfo> in the emitted call.
  example:
  - "The following code example creates a constructed method from an incomplete generic method definition in an incomplete type.  \n  \n The example creates a transient assembly and module with a single type, adds a method `M`, and makes the method generic by adding a type parameter T using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method. The type parameter is used as the type of the method's parameter, and also as its return type. The generic method definition is not given a body, and the enclosing type is not completed. The <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> method is then used to make the constructed method `M<String>` (`M(Of String)` in Visual Basic). The example code has no output, because the subclass of <xref:System.Reflection.MethodInfo> returned by the <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> method does not allow reflection over its parameters.  \n  \n> [!NOTE]\n>  For another code example that uses <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A>, see <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A>. <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> is also used extensively when emitting code that uses generic types. See [How to: Define a Generic Method with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-method-with-reflection-emit.md).  \n  \n [!code-cpp[MethodBuilder.MakeGenericMethod#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBuilder.MakeGenericMethod/cpp/source.cpp#1)]\n [!code-csharp[MethodBuilder.MakeGenericMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBuilder.MakeGenericMethod/cs/source.cs#1)]\n [!code-vb[MethodBuilder.MakeGenericMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBuilder.MakeGenericMethod/vb/source.vb#1)]"
  syntax:
    content: public override System.Reflection.MethodInfo MakeGenericMethod (Type[] typeArguments);
    parameters:
    - id: typeArguments
      type: System.Type[]
      description: An array of <xref href="System.Type"></xref> objects that represent the type arguments for the generic method.
    return:
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo"></xref> representing the generic method constructed from the current generic method definition using the specified generic type arguments.
  overload: System.Reflection.Emit.MethodBuilder.MakeGenericMethod*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.MethodHandle
  commentId: P:System.Reflection.Emit.MethodBuilder.MethodHandle
  id: MethodHandle
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: MethodHandle
  nameWithType: MethodBuilder.MethodHandle
  fullName: MethodBuilder.MethodHandle
  type: Property
  assemblies:
  - mscorlib
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Retrieves the internal handle for the method. Use this handle to access the underlying metadata handle.
  syntax:
    content: public override RuntimeMethodHandle MethodHandle { get; }
    return:
      type: System.RuntimeMethodHandle
      description: Read-only. The internal handle for the method. Use this handle to access the underlying metadata handle.
  overload: System.Reflection.Emit.MethodBuilder.MethodHandle*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: This method is not currently supported. Retrieve the method using <xref href="System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])"></xref> and call <xref href="System.Reflection.MethodBase.MethodHandle"></xref> on the returned <xref href="System.Reflection.MethodInfo"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.MethodImplementationFlags
  commentId: P:System.Reflection.Emit.MethodBuilder.MethodImplementationFlags
  id: MethodImplementationFlags
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: MethodImplementationFlags
  nameWithType: MethodBuilder.MethodImplementationFlags
  fullName: MethodBuilder.MethodImplementationFlags
  type: Property
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }
    return:
      type: System.Reflection.MethodImplAttributes
      description: ''
  overload: System.Reflection.Emit.MethodBuilder.MethodImplementationFlags*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  monikers:
  - netcore-1.0
  - netcore-1.1
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.Module
  commentId: P:System.Reflection.Emit.MethodBuilder.Module
  id: Module
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: Module
  nameWithType: MethodBuilder.Module
  fullName: MethodBuilder.Module
  type: Property
  assemblies:
  - mscorlib
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets the module in which the current method is being defined.
  remarks: "This property is provided as a convenience. It is equivalent to using the <xref:System.Reflection.Emit.MethodBuilder.DeclaringType%2A> property to get the type in which the method is being declared, and then calling the <xref:System.Type.Module%2A> property of the resulting <xref:System.Type> object.  \n  \n This property is also equivalent to calling <xref:System.Reflection.Emit.MethodBuilder.GetModule%2A>."
  syntax:
    content: public override System.Reflection.Module Module { get; }
    return:
      type: System.Reflection.Module
      description: The <xref href="System.Reflection.Module"></xref> in which the member represented by the current <xref href="System.Reflection.MemberInfo"></xref> is being defined.
  overload: System.Reflection.Emit.MethodBuilder.Module*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.Name
  commentId: P:System.Reflection.Emit.MethodBuilder.Name
  id: Name
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: Name
  nameWithType: MethodBuilder.Name
  fullName: MethodBuilder.Name
  type: Property
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves the name of this method.
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: Read-only. Retrieves a string containing the simple name of this method.
  overload: System.Reflection.Emit.MethodBuilder.Name*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.ReflectedType
  commentId: P:System.Reflection.Emit.MethodBuilder.ReflectedType
  id: ReflectedType
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: ReflectedType
  nameWithType: MethodBuilder.ReflectedType
  fullName: MethodBuilder.ReflectedType
  type: Property
  assemblies:
  - mscorlib
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Retrieves the class that was used in reflection to obtain this object.
  syntax:
    content: public override Type ReflectedType { get; }
    return:
      type: System.Type
      description: Read-only. The type used to obtain this method.
  overload: System.Reflection.Emit.MethodBuilder.ReflectedType*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.ReturnParameter
  commentId: P:System.Reflection.Emit.MethodBuilder.ReturnParameter
  id: ReturnParameter
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: ReturnParameter
  nameWithType: MethodBuilder.ReturnParameter
  fullName: MethodBuilder.ReturnParameter
  type: Property
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a <xref href="System.Reflection.ParameterInfo"></xref> object that contains information about the return type of the method, such as whether the return type has custom modifiers.
  remarks: Compiler designers can use the <xref:System.Reflection.ParameterInfo> object returned by this property to discover whether custom modifiers, such as <xref:Microsoft.VisualC.IsConstModifier>, have been applied to the return type.
  syntax:
    content: public override System.Reflection.ParameterInfo ReturnParameter { get; }
    return:
      type: System.Reflection.ParameterInfo
      description: A <xref href="System.Reflection.ParameterInfo"></xref> object that contains information about the return type.
  overload: System.Reflection.Emit.MethodBuilder.ReturnParameter*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The declaring type has not been created.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.ReturnType
  commentId: P:System.Reflection.Emit.MethodBuilder.ReturnType
  id: ReturnType
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: ReturnType
  nameWithType: MethodBuilder.ReturnType
  fullName: MethodBuilder.ReturnType
  type: Property
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the return type of the method represented by this <xref href="System.Reflection.Emit.MethodBuilder"></xref>.
  remarks: >-
    > [!NOTE]

    >  Starting with the .NET Framework 2.0 and the .NET Compact Framework 2.0, this member is inherited from the base class, <xref:System.Reflection.MethodInfo>. See <xref:System.Reflection.MethodInfo.ReturnType%2A?displayProperty=fullName>.
  syntax:
    content: public override Type ReturnType { get; }
    return:
      type: System.Type
      description: The return type of the method.
  overload: System.Reflection.Emit.MethodBuilder.ReturnType*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes
  commentId: P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes
  id: ReturnTypeCustomAttributes
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: ReturnTypeCustomAttributes
  nameWithType: MethodBuilder.ReturnTypeCustomAttributes
  fullName: MethodBuilder.ReturnTypeCustomAttributes
  type: Property
  assemblies:
  - mscorlib
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns the custom attributes of the method's return type.
  remarks: This method always returns `null`. Get the <xref:System.Reflection.MethodInfo> after the containing <xref:System.Type> has been created and invoked <xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A> on the <xref:System.Reflection.MethodInfo>.
  syntax:
    content: public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }
    return:
      type: System.Reflection.ICustomAttributeProvider
      description: Read-only. The custom attributes of the method's return type.
  overload: System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  commentId: M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: SetCustomAttribute(ConstructorInfo, Byte[])
  nameWithType: MethodBuilder.SetCustomAttribute(ConstructorInfo, Byte[])
  fullName: MethodBuilder.SetCustomAttribute(ConstructorInfo, Byte[])
  type: Method
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets a custom attribute using a specified custom attribute blob.
  remarks: "For details on how to format `binaryAttribute`, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  \n  \n The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method can interact with the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method when the two methods are used in combination. See the Remarks section of the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method for details."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
      description: The constructor for the custom attribute.
    - id: binaryAttribute
      type: System.Byte[]
      description: A byte blob representing the attributes.
  overload: System.Reflection.Emit.MethodBuilder.SetCustomAttribute*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>con</code> or <code>binaryAttribute</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: For the current method, the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethod"></xref> property is `true`, but the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"></xref> property is `false`.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  commentId: M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: SetCustomAttribute(CustomAttributeBuilder)
  nameWithType: MethodBuilder.SetCustomAttribute(CustomAttributeBuilder)
  fullName: MethodBuilder.SetCustomAttribute(CustomAttributeBuilder)
  type: Method
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets a custom attribute using a custom attribute builder.
  remarks: The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method can interact with the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method when the two methods are used in combination. See the Remarks section of the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method for details.
  syntax:
    content: public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);
    parameters:
    - id: customBuilder
      type: System.Reflection.Emit.CustomAttributeBuilder
      description: An instance of a helper class to describe the custom attribute.
  overload: System.Reflection.Emit.MethodBuilder.SetCustomAttribute*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>customBuilder</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: For the current method, the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethod"></xref> property is `true`, but the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"></xref> property is `false`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)
  commentId: M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)
  id: SetImplementationFlags(System.Reflection.MethodImplAttributes)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: SetImplementationFlags(MethodImplAttributes)
  nameWithType: MethodBuilder.SetImplementationFlags(MethodImplAttributes)
  fullName: MethodBuilder.SetImplementationFlags(MethodImplAttributes)
  type: Method
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets the implementation flags for this method.
  remarks: "When you use the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method in combination with the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method, be aware of potential interactions. For example, using the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method to add the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute also sets the <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> flag. If you subsequently call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method, the <xref:System.Reflection.MethodImplAttributes.PreserveSig> flag is overwritten. There are two ways to avoid this:  \n  \n-   Call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method before you call the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method. The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method always respects existing method implementation flags.  \n  \n-   When you set implementation flags, call the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A> method to retrieve the existing flags, use bitwise OR to add your flag, and then call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method."
  example:
  - "The code sample below illustrates the contextual use of the `SetImplementationFlags` method to describe the implementation of MSIL in a method body.  \n  \n [!code-cpp[System.Reflection.Emit.MethodBuilder.SetImplementationFlags Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetImplementationFlags Example/CPP/source.cpp#1)]\n [!code-csharp[System.Reflection.Emit.MethodBuilder.SetImplementationFlags Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetImplementationFlags Example/CS/source.cs#1)]\n [!code-vb[System.Reflection.Emit.MethodBuilder.SetImplementationFlags Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetImplementationFlags Example/VB/source.vb#1)]"
  syntax:
    content: public void SetImplementationFlags (System.Reflection.MethodImplAttributes attributes);
    parameters:
    - id: attributes
      type: System.Reflection.MethodImplAttributes
      description: The implementation flags to set.
  overload: System.Reflection.Emit.MethodBuilder.SetImplementationFlags*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The containing type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)
  commentId: M:System.Reflection.Emit.MethodBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)
  id: SetMarshal(System.Reflection.Emit.UnmanagedMarshal)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: SetMarshal(UnmanagedMarshal)
  nameWithType: MethodBuilder.SetMarshal(UnmanagedMarshal)
  fullName: MethodBuilder.SetMarshal(UnmanagedMarshal)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets marshaling information for the return type of this method.
  remarks: ''
  example:
  - "The code sample below illustrates the contextual usage of the `SetMarshal` method to marshal the results of a method call as a different type.  \n  \n [!code-cpp[System.Reflection.Emit.MethodBuilder.SetMarshal Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetMarshal Example/CPP/source.cpp#1)]\n [!code-csharp[System.Reflection.Emit.MethodBuilder.SetMarshal Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetMarshal Example/CS/source.cs#1)]\n [!code-vb[System.Reflection.Emit.MethodBuilder.SetMarshal Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetMarshal Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Obsolete("An alternate API is available: Emit the MarshalAs custom attribute instead.")]

      public void SetMarshal (System.Reflection.Emit.UnmanagedMarshal unmanagedMarshal);
    parameters:
    - id: unmanagedMarshal
      type: System.Reflection.Emit.UnmanagedMarshal
      description: Marshaling information for the return type of this method.
  overload: System.Reflection.Emit.MethodBuilder.SetMarshal*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The containing type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`."
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})
  commentId: M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})
  id: SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: SetMethodBody(Byte[], Int32, Byte[], IEnumerable<ExceptionHandler>, IEnumerable<Int32>)
  nameWithType: MethodBuilder.SetMethodBody(Byte[], Int32, Byte[], IEnumerable<ExceptionHandler>, IEnumerable<Int32>)
  fullName: MethodBuilder.SetMethodBody(Byte[], Int32, Byte[], IEnumerable<ExceptionHandler>, IEnumerable<Int32>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Creates the body of the method by using a specified byte array of Microsoft intermediate language (MSIL) instructions.
  syntax:
    content: public void SetMethodBody (byte[] il, int maxStack, byte[] localSignature, System.Collections.Generic.IEnumerable<System.Reflection.Emit.ExceptionHandler> exceptionHandlers, System.Collections.Generic.IEnumerable<int> tokenFixups);
    parameters:
    - id: il
      type: System.Byte[]
      description: An array that contains valid MSIL instructions.
    - id: maxStack
      type: System.Int32
      description: The maximum stack evaluation depth.
    - id: localSignature
      type: System.Byte[]
      description: An array of bytes that contain the serialized local variable structure. Specify `null` if the method has no local variables.
    - id: exceptionHandlers
      type: System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler}
      description: A collection that contains the exception handlers for the method. Specify `null` if the method has no exception handlers.
    - id: tokenFixups
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: A collection of values that represent offsets in <code>il</code>, each of which specifies the beginning of a token that may be modified. Specify `null` if the method has no tokens that have to be modified.
  overload: System.Reflection.Emit.MethodBuilder.SetMethodBody*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>il</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>maxStack</code> is negative.  \n  \n -or-  \n  \n One of <code>exceptionHandlers</code> specifies an offset outside of <code>il</code>.  \n  \n -or-  \n  \n One of <code>tokenFixups</code> specifies an offset that is outside the <code>il</code> array."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The containing type was previously created using the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> method.  \n  \n -or-  \n  \n This method was called previously on this <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> object."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])
  commentId: M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])
  id: SetParameters(System.Type[])
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: SetParameters(Type[])
  nameWithType: MethodBuilder.SetParameters(Type[])
  fullName: MethodBuilder.SetParameters(Type[])
  type: Method
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets the number and types of parameters for a method.
  remarks: "If the number and types of the parameters are known when the method is defined, they can be set using any overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method that accepts an array of parameter types. However, a generic method can have parameters whose types are specified by one or more of its own generic type parameters, which cannot be defined until after the method has been defined. Use this method to set the parameter types in that case.  \n  \n If the return type has optional or required custom modifiers, such as <xref:System.Runtime.CompilerServices.IsConst>, use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overload.  \n  \n Calling this method replaces any parameter types that were set using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method."
  example:
  - "The following code example uses the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method to make a method generic. The <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> method is used to give the method one parameter, whose type will be specified by the first generic type parameter. The <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> method is used to give the method a return type, specified by the second generic type parameter.  \n  \n This code is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.  \n  \n [!code-cpp[GenericMethodBuilder#3](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#3)]\n [!code-csharp[GenericMethodBuilder#3](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#3)]\n [!code-vb[GenericMethodBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#3)]  \n[!code-cpp[GenericMethodBuilder#5](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#5)]\n[!code-csharp[GenericMethodBuilder#5](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#5)]\n[!code-vb[GenericMethodBuilder#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#5)]"
  syntax:
    content: public void SetParameters (Type[] parameterTypes);
    parameters:
    - id: parameterTypes
      type: System.Type[]
      description: An array of <xref href="System.Type"></xref> objects representing the parameter types.
  overload: System.Reflection.Emit.MethodBuilder.SetParameters*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The current method is generic, but is not a generic method definition. That is, the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethod"></xref> property is `true`, but the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"></xref> property is `false`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)
  commentId: M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)
  id: SetReturnType(System.Type)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: SetReturnType(Type)
  nameWithType: MethodBuilder.SetReturnType(Type)
  fullName: MethodBuilder.SetReturnType(Type)
  type: Method
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets the return type of the method.
  remarks: "Use this method to set the return type of a generic method, when the return type is specified by one of the generic type parameters of the method. If the return type has optional or required custom modifiers, such as <xref:System.Runtime.CompilerServices.IsConst>, use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overload.  \n  \n Calling this method replaces a return type established using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method."
  example:
  - "The following code example uses the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method to make a method generic. The <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> method is used to give the method one parameter, whose type will be specified by the first generic type parameter. The <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> method is used to give the method a return type, specified by the second generic type parameter.  \n  \n This code is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.  \n  \n [!code-cpp[GenericMethodBuilder#3](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#3)]\n [!code-csharp[GenericMethodBuilder#3](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#3)]\n [!code-vb[GenericMethodBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#3)]  \n[!code-cpp[GenericMethodBuilder#5](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#5)]\n[!code-csharp[GenericMethodBuilder#5](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#5)]\n[!code-vb[GenericMethodBuilder#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#5)]"
  syntax:
    content: public void SetReturnType (Type returnType);
    parameters:
    - id: returnType
      type: System.Type
      description: A <xref href="System.Type"></xref> object that represents the return type of the method.
  overload: System.Reflection.Emit.MethodBuilder.SetReturnType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The current method is generic, but is not a generic method definition. That is, the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethod"></xref> property is `true`, but the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"></xref> property is `false`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  commentId: M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  id: SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: SetSignature(Type, Type[], Type[], Type[], Type[][], Type[][])
  nameWithType: MethodBuilder.SetSignature(Type, Type[], Type[], Type[], Type[][], Type[][])
  fullName: MethodBuilder.SetSignature(Type, Type[], Type[], Type[], Type[][], Type[][])
  type: Method
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets the method signature, including the return type, the parameter types, and the required and optional custom modifiers of the return type and parameter types.
  remarks: "If the return type and the number and types of the parameters are known when the method is defined, they can be established using any overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method that accepts an array of parameter types. However, a generic method can have parameters whose types are specified by one or more of its own generic type parameters, which cannot be defined until after the method has been defined. Use this method to set the parameter types in that case.  \n  \n If neither the return type nor the parameter types have optional or required custom modifiers, such as <xref:Microsoft.VisualC.IsConstModifier>, you can use the <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> and <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> methods.  \n  \n Calling this method replaces the parameters and return type established using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method."
  example:
  - "The following code example contains source code for a generic class named Sample that has a type parameter `T`. The class has a field named `Field`, of type `T`, and a generic method `GM` with its own type parameter, `U`. Method `GM` creates an instance of Sample, substituting its own type parameter `U` for the type parameter of Sample, and stores its input parameter in `Field`. This source code is compiled but not used; you can view it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), and compare it to the code emitted by class `Example`.  \n  \n The code in class `Example` demonstrates the use of the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A> method in emitting generic code. The `Main` method of class `Example` creates a dynamic assembly containing a class named `Sample`, and uses the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=fullName> method to make it generic by adding a type parameter named `T`. A default constructor and a field named `Field`, of type `T`, are added to class `Sample`. A method `GM` is added, and turned into a generic method using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method. The type parameter of `GM` is named `U`. Once the type parameter is defined, the signature of `GM` is added, using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A> method. There is no return type, and no required or custom modifiers, so all the parameters of this method are `null` except `parameterTypes`, which sets the type of the only parameter of the method; this is set to the method's type parameter, `U`. The body of the method creates an instance of the constructed type `Sample<U>` (`Sample(Of U)` in Visual Basic), assigns the method's parameter to `Field`, and then prints the value of `Field`. A dummy type is defined, to hold the entry point method `Main`. In the body of `Main`, the static `GM` method is invoked on the constructed generic type `Sample<int>` (`Sample(Of Integer)` in Visual Basic), with type <xref:System.String> substituted for `U`. The <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A?displayProperty=fullName> method is used to create a <xref:System.Reflection.MethodInfo> for the static `GM` method of the constructed generic type `Sample<U>`, and the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=fullName> method is then used to create a <xref:System.Reflection.MethodInfo> that can emitted in a method call.  \n  \n When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe. You can run TypeBuilderGetFieldExample.exe, and you can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to compare the emitted code with the code for the `Sample` class that is compiled into the code example itself.  \n  \n [!code-csharp[TypeBuilder.GetField_Generic#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.GetField_Generic/cs/source.cs#1)]\n [!code-vb[TypeBuilder.GetField_Generic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.GetField_Generic/VB/source.vb#1)]"
  syntax:
    content: public void SetSignature (Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);
    parameters:
    - id: returnType
      type: System.Type
      description: The return type of the method.
    - id: returnTypeRequiredCustomModifiers
      type: System.Type[]
      description: An array of types representing the required custom modifiers, such as <xref href="System.Runtime.CompilerServices.IsConst"></xref>, for the return type of the method. If the return type has no required custom modifiers, specify `null`.
    - id: returnTypeOptionalCustomModifiers
      type: System.Type[]
      description: An array of types representing the optional custom modifiers, such as <xref href="System.Runtime.CompilerServices.IsConst"></xref>, for the return type of the method. If the return type has no optional custom modifiers, specify `null`.
    - id: parameterTypes
      type: System.Type[]
      description: The types of the parameters of the method.
    - id: parameterTypeRequiredCustomModifiers
      type: System.Type[][]
      description: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href="System.Runtime.CompilerServices.IsConst"></xref>. If a particular parameter has no required custom modifiers, specify `null` instead of an array of types. If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays.
    - id: parameterTypeOptionalCustomModifiers
      type: System.Type[][]
      description: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href="System.Runtime.CompilerServices.IsConst"></xref>. If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types. If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays.
  overload: System.Reflection.Emit.MethodBuilder.SetSignature*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The current method is generic, but is not a generic method definition. That is, the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethod"></xref> property is `true`, but the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition"></xref> property is `false`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])
  commentId: M:System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])
  id: SetSymCustomAttribute(System.String,System.Byte[])
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: SetSymCustomAttribute(String, Byte[])
  nameWithType: MethodBuilder.SetSymCustomAttribute(String, Byte[])
  fullName: MethodBuilder.SetSymCustomAttribute(String, Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Set a symbolic custom attribute using a blob.
  remarks: Unlike the metadata custom attribute, this custom attribute is associated with a symbol writer.
  example:
  - "The code sample below illustrates the contextual usage of the `SetSymCustomAttribute` method to set the byte values for the name and key of a custom attribute attached to a method.  \n  \n [!code-cpp[System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example/CPP/source2.cpp#1)]\n [!code-csharp[System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example/CS/source2.cs#1)]\n [!code-vb[System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example/VB/source2.vb#1)]"
  syntax:
    content: public void SetSymCustomAttribute (string name, byte[] data);
    parameters:
    - id: name
      type: System.String
      description: The name of the symbolic custom attribute.
    - id: data
      type: System.Byte[]
      description: The byte blob that represents the value of the symbolic custom attribute.
  overload: System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The containing type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n The module that contains this method is not a debug module.  \n  \n -or-  \n  \n For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.Signature
  commentId: P:System.Reflection.Emit.MethodBuilder.Signature
  id: Signature
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: Signature
  nameWithType: MethodBuilder.Signature
  fullName: MethodBuilder.Signature
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves the signature of the method.
  syntax:
    content: public string Signature { get; }
    return:
      type: System.String
      description: Read-only. A String containing the signature of the method reflected by this `MethodBase` instance.
  overload: System.Reflection.Emit.MethodBuilder.Signature*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.ToString
  commentId: M:System.Reflection.Emit.MethodBuilder.ToString
  id: ToString
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: ToString()
  nameWithType: MethodBuilder.ToString()
  fullName: MethodBuilder.ToString()
  type: Method
  assemblies:
  - System.Reflection.Emit
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns this `MethodBuilder` instance as a string.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: Returns a string containing the name, attributes, method signature, exceptions, and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.
  overload: System.Reflection.Emit.MethodBuilder.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  commentId: M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: _MethodBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  nameWithType: MethodBuilder._MethodBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  fullName: MethodBuilder._MethodBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Maps a set of names to a corresponding set of dispatch identifiers.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.
  syntax:
    content: void _MethodBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
    parameters:
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: rgszNames
      type: System.IntPtr
      description: Passed-in array of names to be mapped.
    - id: cNames
      type: System.UInt32
      description: Count of the names to be mapped.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret the names.
    - id: rgDispId
      type: System.IntPtr
      description: Caller-allocated array that receives the IDs corresponding to the names.
  overload: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  commentId: M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: _MethodBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)
  nameWithType: MethodBuilder._MethodBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)
  fullName: MethodBuilder._MethodBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.
  syntax:
    content: void _MethodBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);
    parameters:
    - id: iTInfo
      type: System.UInt32
      description: The type information to return.
    - id: lcid
      type: System.UInt32
      description: The locale identifier for the type information.
    - id: ppTInfo
      type: System.IntPtr
      description: Receives a pointer to the requested type information object.
  overload: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount(System.UInt32@)
  commentId: M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount(System.UInt32@)
  id: System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount(System.UInt32@)
  isEii: true
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: _MethodBuilder.GetTypeInfoCount(UInt32)
  nameWithType: MethodBuilder._MethodBuilder.GetTypeInfoCount(UInt32)
  fullName: MethodBuilder._MethodBuilder.GetTypeInfoCount(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.
  syntax:
    content: void _MethodBuilder.GetTypeInfoCount (out uint pcTInfo);
    parameters:
    - id: pcTInfo
      type: System.UInt32
      description: Points to a location that receives the number of type information interfaces provided by the object.
  overload: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  commentId: M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  id: System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  name: _MethodBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  nameWithType: MethodBuilder._MethodBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  fullName: MethodBuilder._MethodBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Provides access to properties and methods exposed by an object.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.
  syntax:
    content: void _MethodBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
    parameters:
    - id: dispIdMember
      type: System.UInt32
      description: Identifies the member.
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret arguments.
    - id: wFlags
      type: System.Int16
      description: Flags describing the context of the call.
    - id: pDispParams
      type: System.IntPtr
      description: Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.
    - id: pVarResult
      type: System.IntPtr
      description: Pointer to the location where the result is to be stored.
    - id: pExcepInfo
      type: System.IntPtr
      description: Pointer to a structure that contains exception information.
    - id: puArgErr
      type: System.IntPtr
      description: The index of the first argument that has an error.
  overload: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.NotImplementedException
  parent: System
  isExternal: false
  name: NotImplementedException
  nameWithType: NotImplementedException
  fullName: System.NotImplementedException
- uid: System.Reflection.Emit.MethodBuilder.#ctor
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: MethodBuilder()
  nameWithType: MethodBuilder.MethodBuilder()
  fullName: MethodBuilder.MethodBuilder()
- uid: System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: AddDeclarativeSecurity(SecurityAction, PermissionSet)
  nameWithType: MethodBuilder.AddDeclarativeSecurity(SecurityAction, PermissionSet)
  fullName: MethodBuilder.AddDeclarativeSecurity(SecurityAction, PermissionSet)
- uid: System.Security.Permissions.SecurityAction
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityAction
  nameWithType: SecurityAction
  fullName: System.Security.Permissions.SecurityAction
- uid: System.Security.PermissionSet
  parent: System.Security
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
- uid: System.Reflection.Emit.MethodBuilder.Attributes
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: Attributes
  nameWithType: MethodBuilder.Attributes
  fullName: MethodBuilder.Attributes
- uid: System.Reflection.MethodAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodAttributes
  nameWithType: MethodAttributes
  fullName: System.Reflection.MethodAttributes
- uid: System.Reflection.Emit.MethodBuilder.CallingConvention
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: CallingConvention
  nameWithType: MethodBuilder.CallingConvention
  fullName: MethodBuilder.CallingConvention
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Reflection.Emit.MethodBuilder.ContainsGenericParameters
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: ContainsGenericParameters
  nameWithType: MethodBuilder.ContainsGenericParameters
  fullName: MethodBuilder.ContainsGenericParameters
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: CreateMethodBody(Byte[], Int32)
  nameWithType: MethodBuilder.CreateMethodBody(Byte[], Int32)
  fullName: MethodBuilder.CreateMethodBody(Byte[], Int32)
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.MethodBuilder.DeclaringType
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: DeclaringType
  nameWithType: MethodBuilder.DeclaringType
  fullName: MethodBuilder.DeclaringType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: DefineGenericParameters(String[])
  nameWithType: MethodBuilder.DefineGenericParameters(String[])
  fullName: MethodBuilder.DefineGenericParameters(String[])
- uid: System.Reflection.Emit.GenericTypeParameterBuilder
  name: GenericTypeParameterBuilder
  nameWithType: GenericTypeParameterBuilder
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder
- uid: System.Reflection.Emit.GenericTypeParameterBuilder[]
  parent: System.Reflection.Emit
  isExternal: false
  name: GenericTypeParameterBuilder[]
  nameWithType: GenericTypeParameterBuilder[]
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder[]
  spec.csharp:
  - uid: System.Reflection.Emit.GenericTypeParameterBuilder
    name: GenericTypeParameterBuilder
    nameWithType: GenericTypeParameterBuilder
    fullName: System.Reflection.Emit.GenericTypeParameterBuilder
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String[]
  parent: System
  isExternal: false
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: DefineParameter(Int32, ParameterAttributes, String)
  nameWithType: MethodBuilder.DefineParameter(Int32, ParameterAttributes, String)
  fullName: MethodBuilder.DefineParameter(Int32, ParameterAttributes, String)
- uid: System.Reflection.Emit.ParameterBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: ParameterBuilder
  nameWithType: ParameterBuilder
  fullName: System.Reflection.Emit.ParameterBuilder
- uid: System.Reflection.ParameterAttributes
  parent: System.Reflection
  isExternal: false
  name: ParameterAttributes
  nameWithType: ParameterAttributes
  fullName: System.Reflection.ParameterAttributes
- uid: System.Reflection.Emit.MethodBuilder.Equals(System.Object)
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: Equals(Object)
  nameWithType: MethodBuilder.Equals(Object)
  fullName: MethodBuilder.Equals(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.Emit.MethodBuilder.GetBaseDefinition
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: GetBaseDefinition()
  nameWithType: MethodBuilder.GetBaseDefinition()
  fullName: MethodBuilder.GetBaseDefinition()
- uid: System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: GetCustomAttributes(Type, Boolean)
  nameWithType: MethodBuilder.GetCustomAttributes(Type, Boolean)
  fullName: MethodBuilder.GetCustomAttributes(Type, Boolean)
- uid: System.Object[]
  parent: System
  isExternal: false
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: GetCustomAttributes(Boolean)
  nameWithType: MethodBuilder.GetCustomAttributes(Boolean)
  fullName: MethodBuilder.GetCustomAttributes(Boolean)
- uid: System.Reflection.Emit.MethodBuilder.GetGenericArguments
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: GetGenericArguments()
  nameWithType: MethodBuilder.GetGenericArguments()
  fullName: MethodBuilder.GetGenericArguments()
- uid: System.Type[]
  parent: System
  isExternal: false
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: GetGenericMethodDefinition()
  nameWithType: MethodBuilder.GetGenericMethodDefinition()
  fullName: MethodBuilder.GetGenericMethodDefinition()
- uid: System.Reflection.Emit.MethodBuilder.GetHashCode
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: GetHashCode()
  nameWithType: MethodBuilder.GetHashCode()
  fullName: MethodBuilder.GetHashCode()
- uid: System.Reflection.Emit.MethodBuilder.GetILGenerator
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: GetILGenerator()
  nameWithType: MethodBuilder.GetILGenerator()
  fullName: MethodBuilder.GetILGenerator()
- uid: System.Reflection.Emit.ILGenerator
  parent: System.Reflection.Emit
  isExternal: false
  name: ILGenerator
  nameWithType: ILGenerator
  fullName: System.Reflection.Emit.ILGenerator
- uid: System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: GetILGenerator(Int32)
  nameWithType: MethodBuilder.GetILGenerator(Int32)
  fullName: MethodBuilder.GetILGenerator(Int32)
- uid: System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: GetMethodImplementationFlags()
  nameWithType: MethodBuilder.GetMethodImplementationFlags()
  fullName: MethodBuilder.GetMethodImplementationFlags()
- uid: System.Reflection.MethodImplAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodImplAttributes
  nameWithType: MethodImplAttributes
  fullName: System.Reflection.MethodImplAttributes
- uid: System.Reflection.Emit.MethodBuilder.GetModule
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: GetModule()
  nameWithType: MethodBuilder.GetModule()
  fullName: MethodBuilder.GetModule()
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Reflection.Emit.MethodBuilder.GetParameters
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: GetParameters()
  nameWithType: MethodBuilder.GetParameters()
  fullName: MethodBuilder.GetParameters()
- uid: System.Reflection.ParameterInfo
  name: ParameterInfo
  nameWithType: ParameterInfo
  fullName: System.Reflection.ParameterInfo
- uid: System.Reflection.ParameterInfo[]
  parent: System.Reflection
  isExternal: false
  name: ParameterInfo[]
  nameWithType: ParameterInfo[]
  fullName: System.Reflection.ParameterInfo[]
  spec.csharp:
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: System.Reflection.ParameterInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Emit.MethodBuilder.GetToken
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: GetToken()
  nameWithType: MethodBuilder.GetToken()
  fullName: MethodBuilder.GetToken()
- uid: System.Reflection.Emit.MethodToken
  parent: System.Reflection.Emit
  isExternal: false
  name: MethodToken
  nameWithType: MethodToken
  fullName: System.Reflection.Emit.MethodToken
- uid: System.Reflection.Emit.MethodBuilder.InitLocals
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: InitLocals
  nameWithType: MethodBuilder.InitLocals
  fullName: MethodBuilder.InitLocals
- uid: System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)
  nameWithType: MethodBuilder.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)
  fullName: MethodBuilder.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: IsDefined(Type, Boolean)
  nameWithType: MethodBuilder.IsDefined(Type, Boolean)
  fullName: MethodBuilder.IsDefined(Type, Boolean)
- uid: System.Reflection.Emit.MethodBuilder.IsGenericMethod
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: IsGenericMethod
  nameWithType: MethodBuilder.IsGenericMethod
  fullName: MethodBuilder.IsGenericMethod
- uid: System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: IsGenericMethodDefinition
  nameWithType: MethodBuilder.IsGenericMethodDefinition
  fullName: MethodBuilder.IsGenericMethodDefinition
- uid: System.Reflection.Emit.MethodBuilder.IsSecurityCritical
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: IsSecurityCritical
  nameWithType: MethodBuilder.IsSecurityCritical
  fullName: MethodBuilder.IsSecurityCritical
- uid: System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: IsSecuritySafeCritical
  nameWithType: MethodBuilder.IsSecuritySafeCritical
  fullName: MethodBuilder.IsSecuritySafeCritical
- uid: System.Reflection.Emit.MethodBuilder.IsSecurityTransparent
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: IsSecurityTransparent
  nameWithType: MethodBuilder.IsSecurityTransparent
  fullName: MethodBuilder.IsSecurityTransparent
- uid: System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: MakeGenericMethod(Type[])
  nameWithType: MethodBuilder.MakeGenericMethod(Type[])
  fullName: MethodBuilder.MakeGenericMethod(Type[])
- uid: System.Reflection.Emit.MethodBuilder.MethodHandle
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: MethodHandle
  nameWithType: MethodBuilder.MethodHandle
  fullName: MethodBuilder.MethodHandle
- uid: System.RuntimeMethodHandle
  parent: System
  isExternal: false
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.Reflection.Emit.MethodBuilder.MethodImplementationFlags
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: MethodImplementationFlags
  nameWithType: MethodBuilder.MethodImplementationFlags
  fullName: MethodBuilder.MethodImplementationFlags
- uid: System.Reflection.Emit.MethodBuilder.Module
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: Module
  nameWithType: MethodBuilder.Module
  fullName: MethodBuilder.Module
- uid: System.Reflection.Emit.MethodBuilder.Name
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: Name
  nameWithType: MethodBuilder.Name
  fullName: MethodBuilder.Name
- uid: System.Reflection.Emit.MethodBuilder.ReflectedType
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: ReflectedType
  nameWithType: MethodBuilder.ReflectedType
  fullName: MethodBuilder.ReflectedType
- uid: System.Reflection.Emit.MethodBuilder.ReturnParameter
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: ReturnParameter
  nameWithType: MethodBuilder.ReturnParameter
  fullName: MethodBuilder.ReturnParameter
- uid: System.Reflection.Emit.MethodBuilder.ReturnType
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: ReturnType
  nameWithType: MethodBuilder.ReturnType
  fullName: MethodBuilder.ReturnType
- uid: System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: ReturnTypeCustomAttributes
  nameWithType: MethodBuilder.ReturnTypeCustomAttributes
  fullName: MethodBuilder.ReturnTypeCustomAttributes
- uid: System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: SetCustomAttribute(ConstructorInfo, Byte[])
  nameWithType: MethodBuilder.SetCustomAttribute(ConstructorInfo, Byte[])
  fullName: MethodBuilder.SetCustomAttribute(ConstructorInfo, Byte[])
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: SetCustomAttribute(CustomAttributeBuilder)
  nameWithType: MethodBuilder.SetCustomAttribute(CustomAttributeBuilder)
  fullName: MethodBuilder.SetCustomAttribute(CustomAttributeBuilder)
- uid: System.Reflection.Emit.CustomAttributeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: CustomAttributeBuilder
  nameWithType: CustomAttributeBuilder
  fullName: System.Reflection.Emit.CustomAttributeBuilder
- uid: System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: SetImplementationFlags(MethodImplAttributes)
  nameWithType: MethodBuilder.SetImplementationFlags(MethodImplAttributes)
  fullName: MethodBuilder.SetImplementationFlags(MethodImplAttributes)
- uid: System.Reflection.Emit.MethodBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: SetMarshal(UnmanagedMarshal)
  nameWithType: MethodBuilder.SetMarshal(UnmanagedMarshal)
  fullName: MethodBuilder.SetMarshal(UnmanagedMarshal)
- uid: System.Reflection.Emit.UnmanagedMarshal
  parent: System.Reflection.Emit
  isExternal: false
  name: UnmanagedMarshal
  nameWithType: UnmanagedMarshal
  fullName: System.Reflection.Emit.UnmanagedMarshal
- uid: System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: SetMethodBody(Byte[], Int32, Byte[], IEnumerable<ExceptionHandler>, IEnumerable<Int32>)
  nameWithType: MethodBuilder.SetMethodBody(Byte[], Int32, Byte[], IEnumerable<ExceptionHandler>, IEnumerable<Int32>)
  fullName: MethodBuilder.SetMethodBody(Byte[], Int32, Byte[], IEnumerable<ExceptionHandler>, IEnumerable<Int32>)
- uid: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Reflection.Emit.ExceptionHandler
  name: ExceptionHandler
  nameWithType: ExceptionHandler
  fullName: System.Reflection.Emit.ExceptionHandler
- uid: System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ExceptionHandler>
  nameWithType: IEnumerable<ExceptionHandler>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.Emit.ExceptionHandler>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.Emit.ExceptionHandler
    name: ExceptionHandler
    nameWithType: ExceptionHandler
    fullName: System.Reflection.Emit.ExceptionHandler
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.IEnumerable{System.Int32}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Int32>
  nameWithType: IEnumerable<Int32>
  fullName: System.Collections.Generic.IEnumerable<System.Int32>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: SetParameters(Type[])
  nameWithType: MethodBuilder.SetParameters(Type[])
  fullName: MethodBuilder.SetParameters(Type[])
- uid: System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: SetReturnType(Type)
  nameWithType: MethodBuilder.SetReturnType(Type)
  fullName: MethodBuilder.SetReturnType(Type)
- uid: System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: SetSignature(Type, Type[], Type[], Type[], Type[][], Type[][])
  nameWithType: MethodBuilder.SetSignature(Type, Type[], Type[], Type[], Type[][], Type[][])
  fullName: MethodBuilder.SetSignature(Type, Type[], Type[], Type[], Type[][], Type[][])
- uid: System.Type[][]
  parent: System
  isExternal: false
  name: Type[][]
  nameWithType: Type[][]
  fullName: System.Type[][]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: SetSymCustomAttribute(String, Byte[])
  nameWithType: MethodBuilder.SetSymCustomAttribute(String, Byte[])
  fullName: MethodBuilder.SetSymCustomAttribute(String, Byte[])
- uid: System.Reflection.Emit.MethodBuilder.Signature
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: Signature
  nameWithType: MethodBuilder.Signature
  fullName: MethodBuilder.Signature
- uid: System.Reflection.Emit.MethodBuilder.ToString
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: ToString()
  nameWithType: MethodBuilder.ToString()
  fullName: MethodBuilder.ToString()
- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: _MethodBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  nameWithType: MethodBuilder._MethodBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  fullName: MethodBuilder._MethodBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: _MethodBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)
  nameWithType: MethodBuilder._MethodBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)
  fullName: MethodBuilder._MethodBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)
- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: _MethodBuilder.GetTypeInfoCount(UInt32)
  nameWithType: MethodBuilder._MethodBuilder.GetTypeInfoCount(UInt32)
  fullName: MethodBuilder._MethodBuilder.GetTypeInfoCount(UInt32)
- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: _MethodBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  nameWithType: MethodBuilder._MethodBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  fullName: MethodBuilder._MethodBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Reflection.Emit.MethodBuilder.#ctor*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: MethodBuilder
  nameWithType: MethodBuilder.MethodBuilder
  fullName: MethodBuilder.MethodBuilder
  monikers:
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: AddDeclarativeSecurity
  nameWithType: MethodBuilder.AddDeclarativeSecurity
  fullName: MethodBuilder.AddDeclarativeSecurity
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.Attributes*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: Attributes
  nameWithType: MethodBuilder.Attributes
  fullName: MethodBuilder.Attributes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.CallingConvention*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: CallingConvention
  nameWithType: MethodBuilder.CallingConvention
  fullName: MethodBuilder.CallingConvention
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.ContainsGenericParameters*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: ContainsGenericParameters
  nameWithType: MethodBuilder.ContainsGenericParameters
  fullName: MethodBuilder.ContainsGenericParameters
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.CreateMethodBody*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: CreateMethodBody
  nameWithType: MethodBuilder.CreateMethodBody
  fullName: MethodBuilder.CreateMethodBody
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.DeclaringType*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: DeclaringType
  nameWithType: MethodBuilder.DeclaringType
  fullName: MethodBuilder.DeclaringType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.DefineGenericParameters*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: DefineGenericParameters
  nameWithType: MethodBuilder.DefineGenericParameters
  fullName: MethodBuilder.DefineGenericParameters
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.DefineParameter*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: DefineParameter
  nameWithType: MethodBuilder.DefineParameter
  fullName: MethodBuilder.DefineParameter
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.Equals*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: Equals
  nameWithType: MethodBuilder.Equals
  fullName: MethodBuilder.Equals
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.GetBaseDefinition*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: GetBaseDefinition
  nameWithType: MethodBuilder.GetBaseDefinition
  fullName: MethodBuilder.GetBaseDefinition
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.GetCustomAttributes*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: GetCustomAttributes
  nameWithType: MethodBuilder.GetCustomAttributes
  fullName: MethodBuilder.GetCustomAttributes
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.GetGenericArguments*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: GetGenericArguments
  nameWithType: MethodBuilder.GetGenericArguments
  fullName: MethodBuilder.GetGenericArguments
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: GetGenericMethodDefinition
  nameWithType: MethodBuilder.GetGenericMethodDefinition
  fullName: MethodBuilder.GetGenericMethodDefinition
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.GetHashCode*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: GetHashCode
  nameWithType: MethodBuilder.GetHashCode
  fullName: MethodBuilder.GetHashCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.GetILGenerator*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: GetILGenerator
  nameWithType: MethodBuilder.GetILGenerator
  fullName: MethodBuilder.GetILGenerator
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: GetMethodImplementationFlags
  nameWithType: MethodBuilder.GetMethodImplementationFlags
  fullName: MethodBuilder.GetMethodImplementationFlags
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.GetModule*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: GetModule
  nameWithType: MethodBuilder.GetModule
  fullName: MethodBuilder.GetModule
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.GetParameters*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: GetParameters
  nameWithType: MethodBuilder.GetParameters
  fullName: MethodBuilder.GetParameters
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.GetToken*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: GetToken
  nameWithType: MethodBuilder.GetToken
  fullName: MethodBuilder.GetToken
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.InitLocals*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: InitLocals
  nameWithType: MethodBuilder.InitLocals
  fullName: MethodBuilder.InitLocals
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.Invoke*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: Invoke
  nameWithType: MethodBuilder.Invoke
  fullName: MethodBuilder.Invoke
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.IsDefined*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: IsDefined
  nameWithType: MethodBuilder.IsDefined
  fullName: MethodBuilder.IsDefined
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.IsGenericMethod*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: IsGenericMethod
  nameWithType: MethodBuilder.IsGenericMethod
  fullName: MethodBuilder.IsGenericMethod
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: IsGenericMethodDefinition
  nameWithType: MethodBuilder.IsGenericMethodDefinition
  fullName: MethodBuilder.IsGenericMethodDefinition
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.IsSecurityCritical*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: IsSecurityCritical
  nameWithType: MethodBuilder.IsSecurityCritical
  fullName: MethodBuilder.IsSecurityCritical
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: IsSecuritySafeCritical
  nameWithType: MethodBuilder.IsSecuritySafeCritical
  fullName: MethodBuilder.IsSecuritySafeCritical
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.IsSecurityTransparent*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: IsSecurityTransparent
  nameWithType: MethodBuilder.IsSecurityTransparent
  fullName: MethodBuilder.IsSecurityTransparent
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.MakeGenericMethod*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: MakeGenericMethod
  nameWithType: MethodBuilder.MakeGenericMethod
  fullName: MethodBuilder.MakeGenericMethod
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.MethodHandle*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: MethodHandle
  nameWithType: MethodBuilder.MethodHandle
  fullName: MethodBuilder.MethodHandle
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.MethodImplementationFlags*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: MethodImplementationFlags
  nameWithType: MethodBuilder.MethodImplementationFlags
  fullName: MethodBuilder.MethodImplementationFlags
  monikers:
  - netcore-1.0
  - netcore-1.1
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.Module*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: Module
  nameWithType: MethodBuilder.Module
  fullName: MethodBuilder.Module
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.Name*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: Name
  nameWithType: MethodBuilder.Name
  fullName: MethodBuilder.Name
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.ReflectedType*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: ReflectedType
  nameWithType: MethodBuilder.ReflectedType
  fullName: MethodBuilder.ReflectedType
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.ReturnParameter*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: ReturnParameter
  nameWithType: MethodBuilder.ReturnParameter
  fullName: MethodBuilder.ReturnParameter
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.ReturnType*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: ReturnType
  nameWithType: MethodBuilder.ReturnType
  fullName: MethodBuilder.ReturnType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: ReturnTypeCustomAttributes
  nameWithType: MethodBuilder.ReturnTypeCustomAttributes
  fullName: MethodBuilder.ReturnTypeCustomAttributes
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.SetCustomAttribute*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: SetCustomAttribute
  nameWithType: MethodBuilder.SetCustomAttribute
  fullName: MethodBuilder.SetCustomAttribute
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.SetImplementationFlags*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: SetImplementationFlags
  nameWithType: MethodBuilder.SetImplementationFlags
  fullName: MethodBuilder.SetImplementationFlags
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.SetMarshal*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: SetMarshal
  nameWithType: MethodBuilder.SetMarshal
  fullName: MethodBuilder.SetMarshal
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.SetMethodBody*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: SetMethodBody
  nameWithType: MethodBuilder.SetMethodBody
  fullName: MethodBuilder.SetMethodBody
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.SetParameters*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: SetParameters
  nameWithType: MethodBuilder.SetParameters
  fullName: MethodBuilder.SetParameters
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.SetReturnType*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: SetReturnType
  nameWithType: MethodBuilder.SetReturnType
  fullName: MethodBuilder.SetReturnType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.SetSignature*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: SetSignature
  nameWithType: MethodBuilder.SetSignature
  fullName: MethodBuilder.SetSignature
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: SetSymCustomAttribute
  nameWithType: MethodBuilder.SetSymCustomAttribute
  fullName: MethodBuilder.SetSymCustomAttribute
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.Signature*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: Signature
  nameWithType: MethodBuilder.Signature
  fullName: MethodBuilder.Signature
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.ToString*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: ToString
  nameWithType: MethodBuilder.ToString
  fullName: MethodBuilder.ToString
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames
  nameWithType: MethodBuilder.System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames
  fullName: MethodBuilder.System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: System.Runtime.InteropServices._MethodBuilder.GetTypeInfo
  nameWithType: MethodBuilder.System.Runtime.InteropServices._MethodBuilder.GetTypeInfo
  fullName: MethodBuilder.System.Runtime.InteropServices._MethodBuilder.GetTypeInfo
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount
  nameWithType: MethodBuilder.System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount
  fullName: MethodBuilder.System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke*
  parent: System.Reflection.Emit.MethodBuilder
  isExternal: false
  name: System.Runtime.InteropServices._MethodBuilder.Invoke
  nameWithType: MethodBuilder.System.Runtime.InteropServices._MethodBuilder.Invoke
  fullName: MethodBuilder.System.Runtime.InteropServices._MethodBuilder.Invoke
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Reflection.MemberInfo.CustomAttributes
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: CustomAttributes
  nameWithType: MemberInfo.CustomAttributes
  fullName: MemberInfo.CustomAttributes
- uid: System.Reflection.MemberInfo.GetCustomAttributesData
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: GetCustomAttributesData()
  nameWithType: MemberInfo.GetCustomAttributesData()
  fullName: MemberInfo.GetCustomAttributesData()
- uid: System.Reflection.MethodInfo.MemberType
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: MemberType
  nameWithType: MethodInfo.MemberType
  fullName: MethodInfo.MemberType
- uid: System.Reflection.MemberInfo.MetadataToken
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: MetadataToken
  nameWithType: MemberInfo.MetadataToken
  fullName: MemberInfo.MetadataToken
- uid: System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: op_Equality(MemberInfo, MemberInfo)
  nameWithType: MemberInfo.op_Equality(MemberInfo, MemberInfo)
  fullName: MemberInfo.op_Equality(MemberInfo, MemberInfo)
- uid: System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: op_Inequality(MemberInfo, MemberInfo)
  nameWithType: MemberInfo.op_Inequality(MemberInfo, MemberInfo)
  fullName: MemberInfo.op_Inequality(MemberInfo, MemberInfo)
- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)
  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)
  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)
- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: ICustomAttributeProvider.IsDefined(Type, Boolean)
  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)
  fullName: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: _MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  nameWithType: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  fullName: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: _MemberInfo.GetType()
  nameWithType: MemberInfo._MemberInfo.GetType()
  fullName: MemberInfo._MemberInfo.GetType()
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: _MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)
  nameWithType: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)
  fullName: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: _MemberInfo.GetTypeInfoCount(UInt32)
  nameWithType: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)
  fullName: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: _MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  nameWithType: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  fullName: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
- uid: System.Reflection.MethodBase.GetCurrentMethod
  parent: System.Reflection.MethodBase
  isExternal: false
  name: GetCurrentMethod()
  nameWithType: MethodBase.GetCurrentMethod()
  fullName: MethodBase.GetCurrentMethod()
- uid: System.Reflection.MethodBase.GetMethodBody
  parent: System.Reflection.MethodBase
  isExternal: false
  name: GetMethodBody()
  nameWithType: MethodBase.GetMethodBody()
  fullName: MethodBase.GetMethodBody()
- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
  parent: System.Reflection.MethodBase
  isExternal: false
  name: GetMethodFromHandle(RuntimeMethodHandle)
  nameWithType: MethodBase.GetMethodFromHandle(RuntimeMethodHandle)
  fullName: MethodBase.GetMethodFromHandle(RuntimeMethodHandle)
- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.MethodBase
  isExternal: false
  name: GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)
  nameWithType: MethodBase.GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)
  fullName: MethodBase.GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)
- uid: System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
  parent: System.Reflection.MethodBase
  isExternal: false
  name: Invoke(Object, Object[])
  nameWithType: MethodBase.Invoke(Object, Object[])
  fullName: MethodBase.Invoke(Object, Object[])
- uid: System.Reflection.MethodBase.IsAbstract
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsAbstract
  nameWithType: MethodBase.IsAbstract
  fullName: MethodBase.IsAbstract
- uid: System.Reflection.MethodBase.IsAssembly
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsAssembly
  nameWithType: MethodBase.IsAssembly
  fullName: MethodBase.IsAssembly
- uid: System.Reflection.MethodBase.IsConstructor
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsConstructor
  nameWithType: MethodBase.IsConstructor
  fullName: MethodBase.IsConstructor
- uid: System.Reflection.MethodBase.IsFamily
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsFamily
  nameWithType: MethodBase.IsFamily
  fullName: MethodBase.IsFamily
- uid: System.Reflection.MethodBase.IsFamilyAndAssembly
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsFamilyAndAssembly
  nameWithType: MethodBase.IsFamilyAndAssembly
  fullName: MethodBase.IsFamilyAndAssembly
- uid: System.Reflection.MethodBase.IsFamilyOrAssembly
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsFamilyOrAssembly
  nameWithType: MethodBase.IsFamilyOrAssembly
  fullName: MethodBase.IsFamilyOrAssembly
- uid: System.Reflection.MethodBase.IsFinal
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsFinal
  nameWithType: MethodBase.IsFinal
  fullName: MethodBase.IsFinal
- uid: System.Reflection.MethodBase.IsHideBySig
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsHideBySig
  nameWithType: MethodBase.IsHideBySig
  fullName: MethodBase.IsHideBySig
- uid: System.Reflection.MethodBase.IsPrivate
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsPrivate
  nameWithType: MethodBase.IsPrivate
  fullName: MethodBase.IsPrivate
- uid: System.Reflection.MethodBase.IsPublic
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsPublic
  nameWithType: MethodBase.IsPublic
  fullName: MethodBase.IsPublic
- uid: System.Reflection.MethodBase.IsSpecialName
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsSpecialName
  nameWithType: MethodBase.IsSpecialName
  fullName: MethodBase.IsSpecialName
- uid: System.Reflection.MethodBase.IsStatic
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsStatic
  nameWithType: MethodBase.IsStatic
  fullName: MethodBase.IsStatic
- uid: System.Reflection.MethodBase.IsVirtual
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsVirtual
  nameWithType: MethodBase.IsVirtual
  fullName: MethodBase.IsVirtual
- uid: System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)
  parent: System.Reflection.MethodBase
  isExternal: false
  name: op_Equality(MethodBase, MethodBase)
  nameWithType: MethodBase.op_Equality(MethodBase, MethodBase)
  fullName: MethodBase.op_Equality(MethodBase, MethodBase)
- uid: System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)
  parent: System.Reflection.MethodBase
  isExternal: false
  name: op_Inequality(MethodBase, MethodBase)
  nameWithType: MethodBase.op_Inequality(MethodBase, MethodBase)
  fullName: MethodBase.op_Inequality(MethodBase, MethodBase)
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.MethodBase
  isExternal: false
  name: _MethodBase.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  nameWithType: MethodBase._MethodBase.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  fullName: MethodBase._MethodBase.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType
  parent: System.Reflection.MethodBase
  isExternal: false
  name: _MethodBase.GetType()
  nameWithType: MethodBase._MethodBase.GetType()
  fullName: MethodBase._MethodBase.GetType()
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.MethodBase
  isExternal: false
  name: _MethodBase.GetTypeInfo(UInt32, UInt32, IntPtr)
  nameWithType: MethodBase._MethodBase.GetTypeInfo(UInt32, UInt32, IntPtr)
  fullName: MethodBase._MethodBase.GetTypeInfo(UInt32, UInt32, IntPtr)
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.MethodBase
  isExternal: false
  name: _MethodBase.GetTypeInfoCount(UInt32)
  nameWithType: MethodBase._MethodBase.GetTypeInfoCount(UInt32)
  fullName: MethodBase._MethodBase.GetTypeInfoCount(UInt32)
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.MethodBase
  isExternal: false
  name: _MethodBase.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  nameWithType: MethodBase._MethodBase.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  fullName: MethodBase._MethodBase.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract
  parent: System.Reflection.MethodBase
  isExternal: false
  name: _MethodBase.IsAbstract
  nameWithType: MethodBase._MethodBase.IsAbstract
  fullName: MethodBase._MethodBase.IsAbstract
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly
  parent: System.Reflection.MethodBase
  isExternal: false
  name: _MethodBase.IsAssembly
  nameWithType: MethodBase._MethodBase.IsAssembly
  fullName: MethodBase._MethodBase.IsAssembly
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor
  parent: System.Reflection.MethodBase
  isExternal: false
  name: _MethodBase.IsConstructor
  nameWithType: MethodBase._MethodBase.IsConstructor
  fullName: MethodBase._MethodBase.IsConstructor
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily
  parent: System.Reflection.MethodBase
  isExternal: false
  name: _MethodBase.IsFamily
  nameWithType: MethodBase._MethodBase.IsFamily
  fullName: MethodBase._MethodBase.IsFamily
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly
  parent: System.Reflection.MethodBase
  isExternal: false
  name: _MethodBase.IsFamilyAndAssembly
  nameWithType: MethodBase._MethodBase.IsFamilyAndAssembly
  fullName: MethodBase._MethodBase.IsFamilyAndAssembly
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly
  parent: System.Reflection.MethodBase
  isExternal: false
  name: _MethodBase.IsFamilyOrAssembly
  nameWithType: MethodBase._MethodBase.IsFamilyOrAssembly
  fullName: MethodBase._MethodBase.IsFamilyOrAssembly
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal
  parent: System.Reflection.MethodBase
  isExternal: false
  name: _MethodBase.IsFinal
  nameWithType: MethodBase._MethodBase.IsFinal
  fullName: MethodBase._MethodBase.IsFinal
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig
  parent: System.Reflection.MethodBase
  isExternal: false
  name: _MethodBase.IsHideBySig
  nameWithType: MethodBase._MethodBase.IsHideBySig
  fullName: MethodBase._MethodBase.IsHideBySig
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate
  parent: System.Reflection.MethodBase
  isExternal: false
  name: _MethodBase.IsPrivate
  nameWithType: MethodBase._MethodBase.IsPrivate
  fullName: MethodBase._MethodBase.IsPrivate
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic
  parent: System.Reflection.MethodBase
  isExternal: false
  name: _MethodBase.IsPublic
  nameWithType: MethodBase._MethodBase.IsPublic
  fullName: MethodBase._MethodBase.IsPublic
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName
  parent: System.Reflection.MethodBase
  isExternal: false
  name: _MethodBase.IsSpecialName
  nameWithType: MethodBase._MethodBase.IsSpecialName
  fullName: MethodBase._MethodBase.IsSpecialName
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic
  parent: System.Reflection.MethodBase
  isExternal: false
  name: _MethodBase.IsStatic
  nameWithType: MethodBase._MethodBase.IsStatic
  fullName: MethodBase._MethodBase.IsStatic
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual
  parent: System.Reflection.MethodBase
  isExternal: false
  name: _MethodBase.IsVirtual
  nameWithType: MethodBase._MethodBase.IsVirtual
  fullName: MethodBase._MethodBase.IsVirtual
- uid: System.Reflection.MethodInfo.CreateDelegate(System.Type)
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: CreateDelegate(Type)
  nameWithType: MethodInfo.CreateDelegate(Type)
  fullName: MethodInfo.CreateDelegate(Type)
- uid: System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: CreateDelegate(Type, Object)
  nameWithType: MethodInfo.CreateDelegate(Type, Object)
  fullName: MethodInfo.CreateDelegate(Type, Object)
- uid: System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: op_Equality(MethodInfo, MethodInfo)
  nameWithType: MethodInfo.op_Equality(MethodInfo, MethodInfo)
  fullName: MethodInfo.op_Equality(MethodInfo, MethodInfo)
- uid: System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: op_Inequality(MethodInfo, MethodInfo)
  nameWithType: MethodInfo.op_Inequality(MethodInfo, MethodInfo)
  fullName: MethodInfo.op_Inequality(MethodInfo, MethodInfo)
- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: _MethodInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  nameWithType: MethodInfo._MethodInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  fullName: MethodInfo._MethodInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: _MethodInfo.GetType()
  nameWithType: MethodInfo._MethodInfo.GetType()
  fullName: MethodInfo._MethodInfo.GetType()
- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: _MethodInfo.GetTypeInfo(UInt32, UInt32, IntPtr)
  nameWithType: MethodInfo._MethodInfo.GetTypeInfo(UInt32, UInt32, IntPtr)
  fullName: MethodInfo._MethodInfo.GetTypeInfo(UInt32, UInt32, IntPtr)
- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: _MethodInfo.GetTypeInfoCount(UInt32)
  nameWithType: MethodInfo._MethodInfo.GetTypeInfoCount(UInt32)
  fullName: MethodInfo._MethodInfo.GetTypeInfoCount(UInt32)
- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: _MethodInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  nameWithType: MethodInfo._MethodInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  fullName: MethodInfo._MethodInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttribute(MemberInfo, Type)
  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)
  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttribute(MemberInfo, Type, Boolean)
  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)
  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttribute<T>(MemberInfo)
  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)
  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttribute<T>(MemberInfo, Boolean)
  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)
  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttributes(MemberInfo)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)
  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttributes(MemberInfo, Boolean)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)
  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttributes(MemberInfo, Type)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)
  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttributes(MemberInfo, Type, Boolean)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)
  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttributes<T>(MemberInfo)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)
  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttributes<T>(MemberInfo, Boolean)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)
  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)
- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: IsDefined(MemberInfo, Type)
  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type)
  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type)
- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: IsDefined(MemberInfo, Type, Boolean)
  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)
  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)
- uid: System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)
  parent: System.Reflection.MemberInfoExtensions
  isExternal: false
  name: GetMetadataToken(MemberInfo)
  nameWithType: MemberInfoExtensions.GetMetadataToken(MemberInfo)
  fullName: MemberInfoExtensions.GetMetadataToken(MemberInfo)
- uid: System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)
  parent: System.Reflection.MemberInfoExtensions
  isExternal: false
  name: HasMetadataToken(MemberInfo)
  nameWithType: MemberInfoExtensions.HasMetadataToken(MemberInfo)
  fullName: MemberInfoExtensions.HasMetadataToken(MemberInfo)
- uid: System.Reflection.MethodInfoExtensions.GetBaseDefinition(System.Reflection.MethodInfo)
  parent: System.Reflection.MethodInfoExtensions
  isExternal: false
  name: GetBaseDefinition(MethodInfo)
  nameWithType: MethodInfoExtensions.GetBaseDefinition(MethodInfo)
  fullName: MethodInfoExtensions.GetBaseDefinition(MethodInfo)
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)
  parent: System.Reflection.RuntimeReflectionExtensions
  isExternal: false
  name: GetRuntimeBaseDefinition(MethodInfo)
  nameWithType: RuntimeReflectionExtensions.GetRuntimeBaseDefinition(MethodInfo)
  fullName: RuntimeReflectionExtensions.GetRuntimeBaseDefinition(MethodInfo)
- uid: System.Runtime.InteropServices._MethodBuilder
  parent: System.Runtime.InteropServices
  isExternal: false
  name: _MethodBuilder
  nameWithType: _MethodBuilder
  fullName: System.Runtime.InteropServices._MethodBuilder
