<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ff024173fb3cbc8716e8135c6596fc08f13d3226</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Controls.Primitives.TextBoxBase.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8c84d551e1fba0ffdef59ebd8991f9184f4d025</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">410ee169270a7471bf5a056175b1524c7f79ca06</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>An abstract base class that provides functionality for text editing controls, including <ph id="ph1">&lt;xref href="System.Windows.Controls.TextBox"&gt;&lt;/xref&gt;</ph> and <ph id="ph2">&lt;xref href="System.Windows.Controls.RichTextBox"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates how the text editing control responds when the user presses the ENTER key.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The ENTER key corresponds to <ph id="ph1">`VK_RETURN`</ph> virtual-key code.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if pressing the ENTER key inserts a new line at the current cursor position; otherwise, the ENTER key is ignored.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`false`</ph> for <ph id="ph2">&lt;xref href="System.Windows.Controls.TextBox"&gt;&lt;/xref&gt;</ph> and <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref href="System.Windows.Controls.RichTextBox"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates how the text editing control responds when the user presses the TAB key.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The TAB key corresponds to <bpt id="p1">**</bpt>VK_TAB<ept id="p1">**</ept> virtual-key code.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if pressing the TAB key inserts a tab character at the current cursor position; <ph id="ph2">`false`</ph> if pressing the TAB key moves the focus to the next control that is marked as a tab stop and does not insert a tab character.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Appends a string to the contents of a text control.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.AppendText%2A&gt;</ph> method enables the user to append text to the contents of a text control without using text concatenation, which, can yield better performance when many concatenations are required.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A string that specifies the text to append to the current contents of the text control.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that determines whether when a user selects part of a word by dragging across it with the mouse, the rest of the word is selected.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.AutoWordSelection%2A&gt;</ph> is enabled, every time that part of a word is selected by the user dragging over part of a word using the mouse, the selection is automatically expanded to include the whole word.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user can override automatic selection of a whole word by momentarily reversing the direction in which the mouse pointer is being dragged as the selection is made.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>This action undoes the automatic selection of the whole word, and enables the user to precisely select part or all of the word.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.AutoWordSelection%2A&gt;</ph> is disabled, a selection is not automatically expanded to include whole words; in this case, precise selections are always determined manually.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> Auto selection does not affect the first word that the user drags across.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is only after this first word boundary is crossed that auto selection takes effect.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if automatic word selection is enabled; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.AutoWordSelection"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Begins a change block.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> When you call <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.BeginChange%2A&gt;</ph>, you must also call <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.EndChange%2A&gt;</ph> to complete the change block otherwise an exception will be thrown.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>A change block logically groups multiple changes into a single undo unit and prevents text content or selection change events from being raised until after the change block.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>This way you can make multiple edits to the text element without the danger of the text element being changed at the same time by another listener.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>A change block is created by calling the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.DeclareChangeBlock%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.BeginChange%2A&gt;</ph> method causes all subsequent changes to be included in the specified change block until a corresponding call to the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.EndChange%2A&gt;</ph> method is made.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the most recent undo action can be redone.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the most recent undo action can be redone; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This property has no default value.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the most recent action can be undone.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the most recent action can be undone; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This property has no default value.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Gets or sets the brush that is used to paint the caret of the text box.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The brush that is used to paint the caret of the text box.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.CaretBrush"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Copies the current selection of the text editing control to the <ph id="ph1">&lt;xref href="System.Windows.Clipboard"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>A copy operation copies the selected text to the <ph id="ph1">&lt;xref:System.Windows.Clipboard&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the selected text is not removed from the text editing control in the process.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>A similar method, <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.Cut%2A&gt;</ph>, moves the current selection to the <ph id="ph2">&lt;xref:System.Windows.Clipboard&gt;</ph> and removes the selected text from the text editing control in the process.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Removes the current selection from the text editing control and copies it to the <ph id="ph1">&lt;xref href="System.Windows.Clipboard"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>A cut operation removes the current selection from the text editing control and copies it to the <ph id="ph1">&lt;xref:System.Windows.Clipboard&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that the selected text is removed (cut) from the text editing control in the process.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>A similar method, <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.Copy%2A&gt;</ph>, copies the current selection to the Clipboard, but does not remove the selected text from the text editing control.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Creates a change block.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>A change block logically groups multiple changes into a single undo unit.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>A change block is created by calling the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.DeclareChangeBlock%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.BeginChange%2A&gt;</ph> method causes all subsequent changes to be included in the specified change block until a corresponding call to the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.EndChange%2A&gt;</ph> method is made.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.IDisposable"&gt;&lt;/xref&gt;</ph> object that refers to a new change block.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Ends a change block.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> When you call <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.BeginChange%2A&gt;</ph>, you must also call <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.EndChange%2A&gt;</ph> to complete the change block otherwise an exception will be thrown.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>A change block logically groups multiple changes into a single undo unit and prevents text content or selection change events from being raised until after the change block.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>This way you can make multiple edits to the text element without the danger of the text element being changed at the same time by another process.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>A change block is created by calling the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.DeclareChangeBlock%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.BeginChange%2A&gt;</ph> method causes all subsequent changes to be included in the specified change block until a corresponding call to the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.EndChange%2A&gt;</ph> method is made.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Gets the vertical size of the visible content area.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A floating-point value that specifies the vertical size of the visible content area, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The value of this property is 0.0 if the text-editing control is not configured to support scrolling.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This property has no default value.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Gets the horizontal size of the visible content area.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A floating-point value that specifies the horizontal size of the visible content area, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The value of this property is 0.0 if the text editing control is not configured to support scrolling.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This property has no default value.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Gets or sets the horizontal scroll position.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The horizontal offset is measured from the right of the visible text area if you are working in right-to-left mode; otherwise, it is measured from the left.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A floating-point value that specifies the horizontal scroll position, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Setting this property causes the text editing control to scroll to the specified horizontal offset.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Reading this property returns the current horizontal offset.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The value of this property is 0.0 if the text editing control is not configured to support scrolling.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This property has no default value.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>An attempt is made to set this property to a negative value.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a horizontal scroll bar is shown.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>A value that is defined by the <ph id="ph1">&lt;xref href="System.Windows.Controls.ScrollBarVisibility"&gt;&lt;/xref&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">&lt;xref href="System.Windows.Visibility.Hidden"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.HorizontalScrollBarVisibility"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the text box displays selected text when the text box does not have focus.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the text box displays selected text when the text box does not have focus; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The registered default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For more information about what can influence the value, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.IsInactiveSelectionHighlightEnabled"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the text editing control is read-only to a user interacting with the control.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value only affects a user who is interacting with the control.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>The contents of a text editing control can always be modified programmatically.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the contents of the text editing control are read-only to a user; otherwise, the contents of the text editing control can be modified by the user.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a read-only text box displays a caret.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.IsReadOnly%2A&gt;</ph> is <ph id="ph2">`true`</ph>, a user can still select and copy text.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.IsReadOnlyCaretVisible%2A&gt;</ph> property is also set to <ph id="ph2">`true`</ph>, a caret will appear in the text box when the text box has keyboard focus.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.IsReadOnly%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.IsReadOnlyCaretVisible%2A&gt;</ph> property has no effect.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a read-only text box displays a caret; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.IsReadOnlyCaretVisible"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.IsReadOnly"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the text box has focus and selected text.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the text box has focus and selected text; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The registered default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For more information about what can influence the value, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.IsSelectionActive"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether undo support is enabled for the text-editing control.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting this property to <ph id="ph1">`false`</ph> clears the undo stack.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, if you disable undo and then re-enable it, undo commands still do not work because the undo stack was emptied when you disabled undo.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>None</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if undo support is enabled; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.IsUndoEnabled"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Scrolls the contents of the control down by one line.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Scrolls the contents of the control to the left by one line.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Scrolls the contents of the control to the right by one line.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Scrolls the contents of the control upward by one line.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Locks the most recent undo unit of the undo stack of the application.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>This prevents the locked unit from being merged with undo units that are added subsequently.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call this method when a non-text undo unit is added to the application's main undo stack.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>This prevents the locked unit from being merged with undo units that are added subsequently.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Is called when a control template is applied.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>Overrides <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.OnApplyTemplate%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Called whenever an unhandled <ph id="ph1">&lt;xref href="System.Windows.FrameworkElement.ContextMenuOpening"&gt;&lt;/xref&gt;</ph> routed event reaches this class in its route.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is somewhat similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: it lets you handle the matching event from derived classes by using a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because the routed event might have been raised by a child element, which is not necessarily the element that invokes handlers.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>Subclasses of <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase&gt;</ph> can call private class handler methods when the event is received along the route.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario is to take the arguments of the event and deliberately mark the event as handled.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Arguments of the event.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;xref href="System.Windows.DragDrop.DragEnter"&gt;&lt;/xref&gt;</ph> attached routed event reaches an element derived from this class in its route.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Provides data about the event.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;xref href="System.Windows.DragDrop.DragLeave"&gt;&lt;/xref&gt;</ph> attached routed event reaches an element derived from this class in its route.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Provides data about the event.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;xref href="System.Windows.DragDrop.DragOver"&gt;&lt;/xref&gt;</ph> attached routed event reaches an element derived from this class in its route.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Provides data about the event.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;xref href="System.Windows.DragDrop.DragEnter"&gt;&lt;/xref&gt;</ph> attached routed event reaches an element derived from this class in its route.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Provides data about the event.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;xref href="System.Windows.DragDrop.GiveFeedback"&gt;&lt;/xref&gt;</ph> attached routed event reaches an element derived from this class in its route.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Provides data about the event.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Keyboard.GotKeyboardFocus"&gt;&lt;/xref&gt;</ph> attached routed event reaches an element derived from this class in its route.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Provides data about the event.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Keyboard.KeyDown"&gt;&lt;/xref&gt;</ph> attached routed event reaches an element derived from this class in its route.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Provides data about the event.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Keyboard.KeyUp"&gt;&lt;/xref&gt;</ph> attached routed event reaches an element derived from this class in its route.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Provides data about the event.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Raises the <ph id="ph1">&lt;xref href="System.Windows.UIElement.LostFocus"&gt;&lt;/xref&gt;</ph> event (using the provided arguments).</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Provides data about the event.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Keyboard.LostKeyboardFocus"&gt;&lt;/xref&gt;</ph> attached routed event reaches an element derived from this class in its route.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Provides data about the event.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Mouse.MouseDown"&gt;&lt;/xref&gt;</ph> attached routed event reaches an element derived from this class in its route.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Provides data about the event.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Mouse.MouseMove"&gt;&lt;/xref&gt;</ph> attached routed event reaches an element derived from this class in its route.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Provides data about the event.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Mouse.MouseUp"&gt;&lt;/xref&gt;</ph> event reaches an element derived from this class in its route.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Arguments of the event.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>These arguments will include details about which mouse button was depressed, and the handled state.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Is called when a <ph id="ph1">&lt;xref href="System.Windows.UIElement.MouseWheel"&gt;&lt;/xref&gt;</ph> event is routed to this class (or to a class that inherits from this class).</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseWheel&gt;</ph> event occurs when the mouse wheel is rolled.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>Overrides <ph id="ph1">&lt;xref:System.Windows.UIElement.OnMouseWheel%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The mouse wheel arguments that are associated with this event.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Called when the <ph id="ph1">&lt;xref href="System.Windows.UIElement.KeyDown"&gt;&lt;/xref&gt;</ph> occurs.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The event data.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;xref href="System.Windows.DragDrop.QueryContinueDrag"&gt;&lt;/xref&gt;</ph> attached  routed event reaches an element derived from this class in its route.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method has no default implementation.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling base() in your implementation is still recommended, in case an intermediate class in the inheritance implemented this method.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>You may call base() either before or after your special handling, depending on your requirements.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>The purpose of this method is somewhat similar to <ph id="ph1">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: it lets you handle the matching event from derived classes by using a class handler instead of an instance handler.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the matching event is a routed event.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation pattern of the On* methods is different for routed events because the routed event may have been raised by a child element, which is not necessarily the element that invokes handlers.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, your implementation needs to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>Subclasses of <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase&gt;</ph> can choose to call private class handler methods when the event is received along the route.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>One scenario is to take the arguments of the event and mark the event as handled.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Provides data about the event.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.Mouse.QueryCursor"&gt;&lt;/xref&gt;</ph> attached routed event reaches an element derived from this class in its route.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Provides data about the event.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Is called when the caret or current selection changes position.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method raises a <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.SelectionChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The arguments that are associated with the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.SelectionChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Is called when the control template changes.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source>Overrides <ph id="ph1">&lt;xref:System.Windows.Controls.Control.OnTemplateChanged%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Controls.ControlTemplate"&gt;&lt;/xref&gt;</ph> object that specifies the control template that is currently active.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Controls.ControlTemplate"&gt;&lt;/xref&gt;</ph> object that specifies a new control template to use.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Is called when content in this editing control changes.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method raises a <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.TextChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The arguments that are associated with the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.TextChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Invoked whenever an unhandled <ph id="ph1">&lt;xref href="System.Windows.Input.TextCompositionManager.TextInput"&gt;&lt;/xref&gt;</ph> attached routed event reaches an element derived from this class in its route.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Implement this method to add class handling for this event.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Provides data about the event.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Scrolls the contents of the control down by one page.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Scrolls the contents of the control to the left by one page.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Scrolls the contents of the control to the right by one page.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Scrolls the contents of the control up by one page.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Pastes the contents of the Clipboard over the current selection in the text editing control.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Undoes the most recent undo command.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>In other words, redoes the most recent undo unit on the undo stack.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the redo operation was successful; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`false`</ph> if there is no undo command available (the undo stack is empty).</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Scrolls the view of the editing control to the end of the content.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Scrolls the view of the editing control to the beginning of the viewport.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Scrolls the contents of the editing control to the specified horizontal offset.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>A double value that specifies the horizontal offset to scroll to.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Scrolls the contents of the editing control to the specified vertical offset.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>A double value that specifies the vertical offset to scroll to.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Selects all the contents of the text editing control.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Gets or sets the brush that highlights selected text.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can specify the brush that highlights selected text by setting the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.SelectionBrush%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.SelectionOpacity%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.SelectionOpacity%2A&gt;</ph> property specifies the opacity of the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.SelectionBrush%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The brush that highlights selected text.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.SelectionBrush"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Occurs when the text selection has changed.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.SelectionChanged"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Gets or sets the opacity of the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.SelectionBrush"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.SelectionOpacity%2A&gt;</ph> is set to 0, the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.SelectionBrush%2A&gt;</ph> is transparent and is not visible.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.SelectionOpacity%2A&gt;</ph> is set to 1.0 or greater, the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.SelectionBrush%2A&gt;</ph> is opaque and the selected text is not visible.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The opacity of the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.SelectionBrush"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>The default is 0.4.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.SelectionOpacity"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Windows.Controls.SpellCheck"&gt;&lt;/xref&gt;</ph> object that provides access to spelling errors in the text contents of a <ph id="ph2">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase"&gt;&lt;/xref&gt;</ph> or <ph id="ph3">&lt;xref href="System.Windows.Controls.RichTextBox"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Controls.SpellCheck"&gt;&lt;/xref&gt;</ph> object that provides access to spelling errors in the text contents of a <ph id="ph2">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase"&gt;&lt;/xref&gt;</ph> or <ph id="ph3">&lt;xref href="System.Windows.Controls.RichTextBox"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>This property has no default value.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Occurs when content changes in the text element.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>, this event occurs when its text changes; for a <ph id="ph2">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>, this event occurs when any content or formatting changes (for example, images, table, or background color).</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routed Event Information</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>Routing strategy</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bubbling</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT">
          <source>Delegate</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.TextChanged"&gt;&lt;/xref&gt;</ph> routed event.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Undoes the most recent undo command.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>In other words, undoes the most recent undo unit on the undo stack.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the undo operation was successful; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>This method returns <ph id="ph1">`false`</ph> if the undo stack is empty.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Gets or sets the number of actions stored in the undo queue.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.UndoLimit%2A&gt;</ph> clears the undo queue.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.UndoLimit%2A&gt;</ph> is set to –1, the undo queue is limited only by the memory that is available.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.UndoLimit%2A&gt;</ph> is set to 0, undo is disabled on the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.UndoLimit%2A&gt;</ph> is introduced in the .NET Framework version 3.5.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Versions and Dependencies<ept id="p1">](~/docs/framework/migration-guide/versions-and-dependencies.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The number of actions stored in the undo queue.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>The default is –1, which means the undo queue is limited to the memory that is available.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.UndoLimit"&gt;&lt;/xref&gt;</ph> is set after calling <ph id="ph2">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.BeginChange"&gt;&lt;/xref&gt;</ph> and before calling <ph id="ph3">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.EndChange"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.UndoLimit"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.TextBoxBase.UndoLimitProperty&gt;</ph> is introduced in the .NET Framework version 3.5.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see<bpt id="p1">[</bpt>Versions and Dependencies<ept id="p1">](~/docs/framework/migration-guide/versions-and-dependencies.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Gets or sets the vertical scroll position.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT">
          <source>The vertical offset is measured from the top of the visible text area.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>A floating-point value that specifies the vertical scroll position, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Setting this property causes the text editing control to scroll to the specified vertical offset.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Reading this property returns the current vertical offset.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>The value of this property is 0.0 if the text editing control is not configured to support scrolling.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>This property has no default value.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>An attempt is made to set this property to a negative value.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a vertical scroll bar is shown.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>A value that is defined by the <ph id="ph1">&lt;xref href="System.Windows.Controls.ScrollBarVisibility"&gt;&lt;/xref&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">&lt;xref href="System.Windows.Visibility.Hidden"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.Primitives.TextBoxBase.VerticalScrollBarVisibility"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Gets the vertical size of the scrollable content area.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>A floating-point value that specifies the vertical size of the scrollable content area, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The value of this property is 0.0 if the text editing control is not configured to support scrolling.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>This property has no default value.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Gets the horizontal size of the scrollable content area.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>A floating-point value that specifies the horizontal size of the scrollable content area, in <ph id="ph1">[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The value of this property is 0.0 if the text editing control is not configured to support scrolling.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>This property has no default value.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>