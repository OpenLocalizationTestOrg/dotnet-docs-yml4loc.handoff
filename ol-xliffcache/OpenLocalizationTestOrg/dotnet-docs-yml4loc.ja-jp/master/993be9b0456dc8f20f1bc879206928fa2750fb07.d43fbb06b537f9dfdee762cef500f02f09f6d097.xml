{"nodes":[{"content":"Provides late-bound math operators, such as <xref href=\"Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)\"></xref> and <xref href=\"Microsoft.VisualBasic.CompilerServices.Operators.CompareObject(System.Object,System.Object,System.Boolean)\"></xref>, which the Visual Basic compiler uses internally.","nodes":[{"pos":[0,334],"content":"Provides late-bound math operators, such as <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"Microsoft.VisualBasic.CompilerServices.Operators.CompareObject(System.Object,System.Object,System.Boolean)\"&gt;&lt;/xref&gt;</ph>, which the Visual Basic compiler uses internally.","source":"Provides late-bound math operators, such as <xref href=\"Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)\"></xref> and <xref href=\"Microsoft.VisualBasic.CompilerServices.Operators.CompareObject(System.Object,System.Object,System.Boolean)\"></xref>, which the Visual Basic compiler uses internally."}],"pos":[3990,4325],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[4336,4438],"yaml":true,"extradata":"MT"},{"content":"Represents the Visual Basic addition (+) operator.","nodes":[{"pos":[0,50],"content":"Represents the Visual Basic addition (+) operator.","nodes":[{"content":"Represents the Visual Basic addition (+) operator.","pos":[0,50]}]}],"pos":[6059,6110],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[6121,6223],"yaml":true,"extradata":"MT"},{"content":"Required. Any numeric expression.","nodes":[{"pos":[0,33],"content":"Required. Any numeric expression.","nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]}],"pos":[6382,6416],"yaml":true},{"content":"Required. Any numeric expression.","nodes":[{"pos":[0,33],"content":"Required. Any numeric expression.","nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]}],"pos":[6477,6511],"yaml":true},{"content":"The sum of <code>Left</code> and <code>Right</code>.","nodes":[{"pos":[0,52],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">Right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The sum of <code>Left</code> and <code>Right</code>."}],"pos":[6568,6621],"yaml":true},{"content":"Represents the Visual Basic `And` operator.","nodes":[{"pos":[0,43],"content":"Represents the Visual Basic <ph id=\"ph1\">`And`</ph> operator.","source":"Represents the Visual Basic `And` operator."}],"pos":[7917,7961],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[7972,8074],"yaml":true,"extradata":"MT"},{"content":"Required. Any `Boolean` or numeric expression.","nodes":[{"pos":[0,46],"content":"Required. Any `Boolean` or numeric expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any <ph id=\"ph1\">`Boolean`</ph> or numeric expression.","pos":[10,46],"source":" Any `Boolean` or numeric expression."}]}],"pos":[8233,8280],"yaml":true},{"content":"Required. Any `Boolean` or numeric expression.","nodes":[{"pos":[0,46],"content":"Required. Any `Boolean` or numeric expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any <ph id=\"ph1\">`Boolean`</ph> or numeric expression.","pos":[10,46],"source":" Any `Boolean` or numeric expression."}]}],"pos":[8341,8388],"yaml":true},{"content":"For `Boolean` operations, `True` if both <code>Left</code> and <code>Right</code> evaluate to `True`; otherwise, `False`. For bitwise operations, 1 if both <code>Left</code> and <code>Right</code> evaluate to 1; otherwise, 0.","nodes":[{"pos":[0,225],"content":"For `Boolean` operations, `True` if both <code>Left</code> and <code>Right</code> evaluate to `True`; otherwise, `False`. For bitwise operations, 1 if both <code>Left</code> and <code>Right</code> evaluate to 1; otherwise, 0.","nodes":[{"content":"For <ph id=\"ph1\">`Boolean`</ph> operations, <ph id=\"ph2\">`True`</ph> if both <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">Left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">Right</ph><ept id=\"p2\">&lt;/code&gt;</ept> evaluate to <ph id=\"ph5\">`True`</ph>; otherwise, <ph id=\"ph6\">`False`</ph>.","pos":[0,121],"source":"For `Boolean` operations, `True` if both <code>Left</code> and <code>Right</code> evaluate to `True`; otherwise, `False`."},{"content":"For bitwise operations, 1 if both <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">Right</ph><ept id=\"p2\">&lt;/code&gt;</ept> evaluate to 1; otherwise, 0.","pos":[122,225],"source":" For bitwise operations, 1 if both <code>Left</code> and <code>Right</code> evaluate to 1; otherwise, 0."}]}],"pos":[8445,8671],"yaml":true},{"content":"Represents Visual Basic comparison operators.","nodes":[{"pos":[0,45],"content":"Represents Visual Basic comparison operators.","nodes":[{"content":"Represents Visual Basic comparison operators.","pos":[0,45]}]}],"pos":[10063,10109],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[10120,10222],"yaml":true,"extradata":"MT"},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[10400,10426],"yaml":true},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[10487,10513],"yaml":true},{"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"pos":[0,85],"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`True`</ph> to perform a case-insensitive string comparison; otherwise, <ph id=\"ph2\">`False`</ph>.","pos":[10,85],"source":"`True` to perform a case-insensitive string comparison; otherwise, `False`."}]}],"pos":[10581,10667],"yaml":true},{"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td>\n          <code>Left</code> is less than <code>Right</code>.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td>\n          <code>Left</code> and <code>Right</code> are equal.  \n  \n </td></tr><tr><td> 1  \n  \n </td><td>\n          <code>Left</code> is greater than <code>Right</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,420],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td>\n          <code>Left</code> is less than <code>Right</code>.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td>\n          <code>Left</code> and <code>Right</code> are equal.  \n  \n </td></tr><tr><td> 1  \n  \n </td><td>\n          <code>Left</code> is greater than <code>Right</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"-1","pos":[95,102],"source":" -1  \n  \n "},{"content":"\n          <code>Left</code> is less than <code>Right</code>.  \n  \n ","pos":[113,181],"nodes":[{"content":"<ph id=\"ph1\">\n          &lt;code&gt;Left&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;code&gt;Right&lt;/code&gt;</ph>.","pos":[0,61],"source":"\n          <code>Left</code> is less than <code>Right</code>."}]},{"content":"0","pos":[200,206],"source":" 0  \n  \n "},{"content":"\n          <code>Left</code> and <code>Right</code> are equal.  \n  \n ","pos":[217,286],"nodes":[{"content":"<ph id=\"ph1\">\n          &lt;code&gt;Left&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;Right&lt;/code&gt;</ph> are equal.","pos":[0,62],"source":"\n          <code>Left</code> and <code>Right</code> are equal."}]},{"content":"1","pos":[305,311],"source":" 1  \n  \n "},{"content":"\n          <code>Left</code> is greater than <code>Right</code>.  \n  \n ","pos":[322,393],"nodes":[{"content":"<ph id=\"ph1\">\n          &lt;code&gt;Left&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;code&gt;Right&lt;/code&gt;</ph>.","pos":[0,64],"source":"\n          <code>Left</code> is greater than <code>Right</code>."}]}]}],"pos":[10723,11164],"yaml":true},{"content":"Represents the Visual Basic equal (=) operator.","nodes":[{"pos":[0,47],"content":"Represents the Visual Basic equal (=) operator.","nodes":[{"content":"Represents the Visual Basic equal (=) operator.","pos":[0,47]}]}],"pos":[12494,12542],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[12553,12655],"yaml":true,"extradata":"MT"},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[12841,12867],"yaml":true},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[12928,12954],"yaml":true},{"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"pos":[0,85],"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`True`</ph> to perform a case-insensitive string comparison; otherwise, <ph id=\"ph2\">`False`</ph>.","pos":[10,85],"source":"`True` to perform a case-insensitive string comparison; otherwise, `False`."}]}],"pos":[13022,13108],"yaml":true},{"content":"`True` if <code>Left</code> and <code>Right</code> are equal; otherwise, `False`.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">`True`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">Left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">Right</ph><ept id=\"p2\">&lt;/code&gt;</ept> are equal; otherwise, <ph id=\"ph4\">`False`</ph>.","source":"`True` if <code>Left</code> and <code>Right</code> are equal; otherwise, `False`."}],"pos":[13165,13249],"yaml":true},{"content":"Represents the Visual Basic greater-than (>) operator.","nodes":[{"pos":[0,54],"content":"Represents the Visual Basic greater-than (>) operator.","nodes":[{"content":"Represents the Visual Basic greater-than (&gt;) operator.","pos":[0,54],"source":"Represents the Visual Basic greater-than (>) operator."}]}],"pos":[14692,14747],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[14758,14860],"yaml":true,"extradata":"MT"},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[15048,15074],"yaml":true},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[15135,15161],"yaml":true},{"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"pos":[0,85],"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`True`</ph> to perform a case-insensitive string comparison; otherwise, <ph id=\"ph2\">`False`</ph>.","pos":[10,85],"source":"`True` to perform a case-insensitive string comparison; otherwise, `False`."}]}],"pos":[15229,15315],"yaml":true},{"content":"`True` if <code>Left</code> is greater than <code>Right</code>; otherwise, `False`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`True`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">Left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">Right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`False`</ph>.","source":"`True` if <code>Left</code> is greater than <code>Right</code>; otherwise, `False`."}],"pos":[15372,15458],"yaml":true},{"content":"Represents the Visual Basic greater-than or equal-to (>=) operator.","nodes":[{"pos":[0,67],"content":"Represents the Visual Basic greater-than or equal-to (>=) operator.","nodes":[{"content":"Represents the Visual Basic greater-than or equal-to (&gt;=) operator.","pos":[0,67],"source":"Represents the Visual Basic greater-than or equal-to (>=) operator."}]}],"pos":[16933,17001],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[17012,17114],"yaml":true,"extradata":"MT"},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[17307,17333],"yaml":true},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[17394,17420],"yaml":true},{"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"pos":[0,85],"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`True`</ph> to perform a case-insensitive string comparison; otherwise, <ph id=\"ph2\">`False`</ph>.","pos":[10,85],"source":"`True` to perform a case-insensitive string comparison; otherwise, `False`."}]}],"pos":[17488,17574],"yaml":true},{"content":"`True` if <code>Left</code> is greater than or equal to <code>Right</code>; otherwise, `False`.","nodes":[{"pos":[0,95],"content":"<ph id=\"ph1\">`True`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">Left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than or equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">Right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`False`</ph>.","source":"`True` if <code>Left</code> is greater than or equal to <code>Right</code>; otherwise, `False`."}],"pos":[17631,17729],"yaml":true},{"content":"Represents the Visual Basic less-than (<) operator.","nodes":[{"pos":[0,51],"content":"Represents the Visual Basic less-than (<) operator.","nodes":[{"content":"Represents the Visual Basic less-than (&lt;) operator.","pos":[0,51],"source":"Represents the Visual Basic less-than (<) operator."}]}],"pos":[19161,19213],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[19224,19326],"yaml":true,"extradata":"MT"},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[19511,19537],"yaml":true},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[19598,19624],"yaml":true},{"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"pos":[0,85],"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`True`</ph> to perform a case-insensitive string comparison; otherwise, <ph id=\"ph2\">`False`</ph>.","pos":[10,85],"source":"`True` to perform a case-insensitive string comparison; otherwise, `False`."}]}],"pos":[19692,19778],"yaml":true},{"content":"`True` if <code>Left</code> is less than <code>Right</code>; otherwise, `False`.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">`True`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">Left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">Right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`False`</ph>.","source":"`True` if <code>Left</code> is less than <code>Right</code>; otherwise, `False`."}],"pos":[19835,19918],"yaml":true},{"content":"Represents the Visual Basic less-than or equal-to (<=) operator.","nodes":[{"pos":[0,64],"content":"Represents the Visual Basic less-than or equal-to (<=) operator.","nodes":[{"content":"Represents the Visual Basic less-than or equal-to (&lt;=) operator.","pos":[0,64],"source":"Represents the Visual Basic less-than or equal-to (<=) operator."}]}],"pos":[21372,21437],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[21448,21550],"yaml":true,"extradata":"MT"},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[21740,21766],"yaml":true},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[21827,21853],"yaml":true},{"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"pos":[0,85],"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`True`</ph> to perform a case-insensitive string comparison; otherwise, <ph id=\"ph2\">`False`</ph>.","pos":[10,85],"source":"`True` to perform a case-insensitive string comparison; otherwise, `False`."}]}],"pos":[21921,22007],"yaml":true},{"content":"`True` if <code>Left</code> is less than or equal to <code>Right</code>; otherwise, `False`.","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">`True`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">Left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than or equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">Right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`False`</ph>.","source":"`True` if <code>Left</code> is less than or equal to <code>Right</code>; otherwise, `False`."}],"pos":[22064,22159],"yaml":true},{"content":"Represents the Visual Basic not-equal (<>) operator.","nodes":[{"pos":[0,52],"content":"Represents the Visual Basic not-equal (<>) operator.","nodes":[{"content":"Represents the Visual Basic not-equal (&lt;&gt;) operator.","pos":[0,52],"source":"Represents the Visual Basic not-equal (<>) operator."}]}],"pos":[23612,23665],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[23676,23778],"yaml":true,"extradata":"MT"},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[23967,23993],"yaml":true},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[24054,24080],"yaml":true},{"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"pos":[0,85],"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`True`</ph> to perform a case-insensitive string comparison; otherwise, <ph id=\"ph2\">`False`</ph>.","pos":[10,85],"source":"`True` to perform a case-insensitive string comparison; otherwise, `False`."}]}],"pos":[24148,24234],"yaml":true},{"content":"`True` if <code>Left</code> is not equal to <code>Right</code>; otherwise, `False`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`True`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">Left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">Right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`False`</ph>.","source":"`True` if <code>Left</code> is not equal to <code>Right</code>; otherwise, `False`."}],"pos":[24291,24377],"yaml":true},{"content":"Performs binary or text string comparison when given two strings.","nodes":[{"pos":[0,65],"content":"Performs binary or text string comparison when given two strings.","nodes":[{"content":"Performs binary or text string comparison when given two strings.","pos":[0,65]}]}],"pos":[25781,25847],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.  \n  \n When the Visual Basic equality operator is used to compare two strings, it passes the strings to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A> method along with a value of `False` for the `TextCompare` argument. This performs a case-sensitive comparison that is either ordinal or based on the current culture, depending on the value of the  statement.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]},{"pos":[108,490],"content":"When the Visual Basic equality operator is used to compare two strings, it passes the strings to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A> method along with a value of `False` for the `TextCompare` argument. This performs a case-sensitive comparison that is either ordinal or based on the current culture, depending on the value of the  statement.","nodes":[{"content":"When the Visual Basic equality operator is used to compare two strings, it passes the strings to the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A&gt;</ph> method along with a value of <ph id=\"ph2\">`False`</ph> for the <ph id=\"ph3\">`TextCompare`</ph> argument.","pos":[0,242],"source":"When the Visual Basic equality operator is used to compare two strings, it passes the strings to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A> method along with a value of `False` for the `TextCompare` argument."},{"content":"This performs a case-sensitive comparison that is either ordinal or based on the current culture, depending on the value of the  statement.","pos":[243,382]}]}],"pos":[25858,26353],"yaml":true,"extradata":"MT"},{"content":"Required. Any `String` expression.","nodes":[{"pos":[0,34],"content":"Required. Any `String` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any <ph id=\"ph1\">`String`</ph> expression.","pos":[10,34],"source":" Any `String` expression."}]}],"pos":[26531,26566],"yaml":true},{"content":"Required. Any `String` expression.","nodes":[{"pos":[0,34],"content":"Required. Any `String` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any <ph id=\"ph1\">`String`</ph> expression.","pos":[10,34],"source":" Any `String` expression."}]}],"pos":[26627,26662],"yaml":true},{"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"pos":[0,85],"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`True`</ph> to perform a case-insensitive string comparison; otherwise, <ph id=\"ph2\">`False`</ph>.","pos":[10,85],"source":"`True` to perform a case-insensitive string comparison; otherwise, `False`."}]}],"pos":[26730,26816],"yaml":true},{"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td>\n          <code>Left</code> is less than <code>Right</code>.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td>\n          <code>Left</code> is equal to <code>Right</code>.  \n  \n </td></tr><tr><td> 1  \n  \n </td><td>\n          <code>Left</code> is greater than <code>Right</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,418],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td>\n          <code>Left</code> is less than <code>Right</code>.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td>\n          <code>Left</code> is equal to <code>Right</code>.  \n  \n </td></tr><tr><td> 1  \n  \n </td><td>\n          <code>Left</code> is greater than <code>Right</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"-1","pos":[95,102],"source":" -1  \n  \n "},{"content":"\n          <code>Left</code> is less than <code>Right</code>.  \n  \n ","pos":[113,181],"nodes":[{"content":"<ph id=\"ph1\">\n          &lt;code&gt;Left&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;code&gt;Right&lt;/code&gt;</ph>.","pos":[0,61],"source":"\n          <code>Left</code> is less than <code>Right</code>."}]},{"content":"0","pos":[200,206],"source":" 0  \n  \n "},{"content":"\n          <code>Left</code> is equal to <code>Right</code>.  \n  \n ","pos":[217,284],"nodes":[{"content":"<ph id=\"ph1\">\n          &lt;code&gt;Left&lt;/code&gt;</ph> is equal to <ph id=\"ph2\">&lt;code&gt;Right&lt;/code&gt;</ph>.","pos":[0,60],"source":"\n          <code>Left</code> is equal to <code>Right</code>."}]},{"content":"1","pos":[303,309],"source":" 1  \n  \n "},{"content":"\n          <code>Left</code> is greater than <code>Right</code>.  \n  \n ","pos":[320,391],"nodes":[{"content":"<ph id=\"ph1\">\n          &lt;code&gt;Left&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;code&gt;Right&lt;/code&gt;</ph>.","pos":[0,64],"source":"\n          <code>Left</code> is greater than <code>Right</code>."}]}]}],"pos":[26872,27311],"yaml":true},{"content":"Represents the Visual Basic concatenation (&) operator.","nodes":[{"pos":[0,55],"content":"Represents the Visual Basic concatenation (&) operator.","nodes":[{"content":"Represents the Visual Basic concatenation (&amp;) operator.","pos":[0,55],"source":"Represents the Visual Basic concatenation (&) operator."}]}],"pos":[28659,28715],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[28726,28828],"yaml":true,"extradata":"MT"},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[28995,29021],"yaml":true},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[29082,29108],"yaml":true},{"content":"A string representing the concatenation of <code>Left</code> and <code>Right</code>.","nodes":[{"pos":[0,84],"content":"A string representing the concatenation of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">Right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A string representing the concatenation of <code>Left</code> and <code>Right</code>."}],"pos":[29165,29250],"yaml":true},{"content":"Represents the overloaded Visual Basic equals (=) operator.","nodes":[{"pos":[0,59],"content":"Represents the overloaded Visual Basic equals (=) operator.","nodes":[{"content":"Represents the overloaded Visual Basic equals (=) operator.","pos":[0,59]}]}],"pos":[30746,30806],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[30817,30919],"yaml":true,"extradata":"MT"},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[31114,31140],"yaml":true},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[31201,31227],"yaml":true},{"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"pos":[0,85],"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`True`</ph> to perform a case-insensitive string comparison; otherwise, <ph id=\"ph2\">`False`</ph>.","pos":[10,85],"source":"`True` to perform a case-insensitive string comparison; otherwise, `False`."}]}],"pos":[31295,31381],"yaml":true},{"content":"The result of the overloaded equals operator. `False` if operator overloading is not supported.","nodes":[{"pos":[0,95],"content":"The result of the overloaded equals operator. `False` if operator overloading is not supported.","nodes":[{"content":"The result of the overloaded equals operator.","pos":[0,45]},{"content":"<ph id=\"ph1\">`False`</ph> if operator overloading is not supported.","pos":[46,95],"source":"`False` if operator overloading is not supported."}]}],"pos":[31439,31535],"yaml":true},{"content":"Represents the overloaded Visual Basic greater-than (>) operator.","nodes":[{"pos":[0,65],"content":"Represents the overloaded Visual Basic greater-than (>) operator.","nodes":[{"content":"Represents the overloaded Visual Basic greater-than (&gt;) operator.","pos":[0,65],"source":"Represents the overloaded Visual Basic greater-than (>) operator."}]}],"pos":[33055,33121],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[33132,33234],"yaml":true,"extradata":"MT"},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[33431,33457],"yaml":true},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[33518,33544],"yaml":true},{"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"pos":[0,85],"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`True`</ph> to perform a case-insensitive string comparison; otherwise, <ph id=\"ph2\">`False`</ph>.","pos":[10,85],"source":"`True` to perform a case-insensitive string comparison; otherwise, `False`."}]}],"pos":[33612,33698],"yaml":true},{"content":"The result of the overloaded greater-than operator. `False` if operator overloading is not supported.","nodes":[{"pos":[0,101],"content":"The result of the overloaded greater-than operator. `False` if operator overloading is not supported.","nodes":[{"content":"The result of the overloaded greater-than operator.","pos":[0,51]},{"content":"<ph id=\"ph1\">`False`</ph> if operator overloading is not supported.","pos":[52,101],"source":"`False` if operator overloading is not supported."}]}],"pos":[33756,33858],"yaml":true},{"content":"Represents the overloaded Visual Basic greater-than or equal-to (>=) operator.","nodes":[{"pos":[0,78],"content":"Represents the overloaded Visual Basic greater-than or equal-to (>=) operator.","nodes":[{"content":"Represents the overloaded Visual Basic greater-than or equal-to (&gt;=) operator.","pos":[0,78],"source":"Represents the overloaded Visual Basic greater-than or equal-to (>=) operator."}]}],"pos":[35410,35489],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[35500,35602],"yaml":true,"extradata":"MT"},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[35804,35830],"yaml":true},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[35891,35917],"yaml":true},{"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"pos":[0,85],"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`True`</ph> to perform a case-insensitive string comparison; otherwise, <ph id=\"ph2\">`False`</ph>.","pos":[10,85],"source":"`True` to perform a case-insensitive string comparison; otherwise, `False`."}]}],"pos":[35985,36071],"yaml":true},{"content":"The result of the overloaded greater-than or equal-to operator. `False` if operator overloading is not supported.","nodes":[{"pos":[0,113],"content":"The result of the overloaded greater-than or equal-to operator. `False` if operator overloading is not supported.","nodes":[{"content":"The result of the overloaded greater-than or equal-to operator.","pos":[0,63]},{"content":"<ph id=\"ph1\">`False`</ph> if operator overloading is not supported.","pos":[64,113],"source":"`False` if operator overloading is not supported."}]}],"pos":[36129,36243],"yaml":true},{"content":"Represents the overloaded Visual Basic less-than (<) operator.","nodes":[{"pos":[0,62],"content":"Represents the overloaded Visual Basic less-than (<) operator.","nodes":[{"content":"Represents the overloaded Visual Basic less-than (&lt;) operator.","pos":[0,62],"source":"Represents the overloaded Visual Basic less-than (<) operator."}]}],"pos":[37752,37815],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[37826,37928],"yaml":true,"extradata":"MT"},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[38122,38148],"yaml":true},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[38209,38235],"yaml":true},{"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"pos":[0,85],"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`True`</ph> to perform a case-insensitive string comparison; otherwise, <ph id=\"ph2\">`False`</ph>.","pos":[10,85],"source":"`True` to perform a case-insensitive string comparison; otherwise, `False`."}]}],"pos":[38303,38389],"yaml":true},{"content":"The result of the overloaded less-than operator. `False` if operator overloading is not supported.","nodes":[{"pos":[0,98],"content":"The result of the overloaded less-than operator. `False` if operator overloading is not supported.","nodes":[{"content":"The result of the overloaded less-than operator.","pos":[0,48]},{"content":"<ph id=\"ph1\">`False`</ph> if operator overloading is not supported.","pos":[49,98],"source":"`False` if operator overloading is not supported."}]}],"pos":[38447,38546],"yaml":true},{"content":"Represents the overloaded Visual Basic less-than or equal-to (<=) operator.","nodes":[{"pos":[0,75],"content":"Represents the overloaded Visual Basic less-than or equal-to (<=) operator.","nodes":[{"content":"Represents the overloaded Visual Basic less-than or equal-to (&lt;=) operator.","pos":[0,75],"source":"Represents the overloaded Visual Basic less-than or equal-to (<=) operator."}]}],"pos":[40077,40153],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[40164,40266],"yaml":true,"extradata":"MT"},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[40465,40491],"yaml":true},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[40552,40578],"yaml":true},{"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"pos":[0,85],"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`True`</ph> to perform a case-insensitive string comparison; otherwise, <ph id=\"ph2\">`False`</ph>.","pos":[10,85],"source":"`True` to perform a case-insensitive string comparison; otherwise, `False`."}]}],"pos":[40646,40732],"yaml":true},{"content":"The result of the overloaded less-than or equal-to operator. `False` if operator overloading is not supported.","nodes":[{"pos":[0,110],"content":"The result of the overloaded less-than or equal-to operator. `False` if operator overloading is not supported.","nodes":[{"content":"The result of the overloaded less-than or equal-to operator.","pos":[0,60]},{"content":"<ph id=\"ph1\">`False`</ph> if operator overloading is not supported.","pos":[61,110],"source":"`False` if operator overloading is not supported."}]}],"pos":[40790,40901],"yaml":true},{"content":"Represents the overloaded Visual Basic not-equal (<>) operator.","nodes":[{"pos":[0,63],"content":"Represents the overloaded Visual Basic not-equal (<>) operator.","nodes":[{"content":"Represents the overloaded Visual Basic not-equal (&lt;&gt;) operator.","pos":[0,63],"source":"Represents the overloaded Visual Basic not-equal (<>) operator."}]}],"pos":[42431,42495],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[42506,42608],"yaml":true,"extradata":"MT"},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[42806,42832],"yaml":true},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[42893,42919],"yaml":true},{"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"pos":[0,85],"content":"Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"<ph id=\"ph1\">`True`</ph> to perform a case-insensitive string comparison; otherwise, <ph id=\"ph2\">`False`</ph>.","pos":[10,85],"source":"`True` to perform a case-insensitive string comparison; otherwise, `False`."}]}],"pos":[42987,43073],"yaml":true},{"content":"The result of the overloaded not-equal operator. `False` if operator overloading is not supported.","nodes":[{"pos":[0,98],"content":"The result of the overloaded not-equal operator. `False` if operator overloading is not supported.","nodes":[{"content":"The result of the overloaded not-equal operator.","pos":[0,48]},{"content":"<ph id=\"ph1\">`False`</ph> if operator overloading is not supported.","pos":[49,98],"source":"`False` if operator overloading is not supported."}]}],"pos":[43131,43230],"yaml":true},{"content":"Represents the Visual Basic division (/) operator.","nodes":[{"pos":[0,50],"content":"Represents the Visual Basic division (/) operator.","nodes":[{"content":"Represents the Visual Basic division (/) operator.","pos":[0,50]}]}],"pos":[44567,44618],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[44629,44731],"yaml":true,"extradata":"MT"},{"content":"Required. Any numeric expression.","nodes":[{"pos":[0,33],"content":"Required. Any numeric expression.","nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]}],"pos":[44893,44927],"yaml":true},{"content":"Required. Any numeric expression.","nodes":[{"pos":[0,33],"content":"Required. Any numeric expression.","nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]}],"pos":[44988,45022],"yaml":true},{"content":"The full quotient of <code>Left</code> divided by <code>Right</code>, including any remainder.","nodes":[{"pos":[0,94],"content":"The full quotient of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Left</ph><ept id=\"p1\">&lt;/code&gt;</ept> divided by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">Right</ph><ept id=\"p2\">&lt;/code&gt;</ept>, including any remainder.","source":"The full quotient of <code>Left</code> divided by <code>Right</code>, including any remainder."}],"pos":[45079,45174],"yaml":true},{"content":"Represents the Visual Basic exponent (^) operator.","nodes":[{"pos":[0,50],"content":"Represents the Visual Basic exponent (^) operator.","nodes":[{"content":"Represents the Visual Basic exponent (^) operator.","pos":[0,50]}]}],"pos":[46503,46554],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[46565,46667],"yaml":true,"extradata":"MT"},{"content":"Required. Any numeric expression.","nodes":[{"pos":[0,33],"content":"Required. Any numeric expression.","nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]}],"pos":[46831,46865],"yaml":true},{"content":"Required. Any numeric expression.","nodes":[{"pos":[0,33],"content":"Required. Any numeric expression.","nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]}],"pos":[46926,46960],"yaml":true},{"content":"The result of <code>Left</code> raised to the power of <code>Right</code>.","nodes":[{"pos":[0,74],"content":"The result of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Left</ph><ept id=\"p1\">&lt;/code&gt;</ept> raised to the power of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">Right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The result of <code>Left</code> raised to the power of <code>Right</code>."}],"pos":[47017,47092],"yaml":true},{"content":"Executes a late-bound evaluation of a user-defined operator. This helper method is not meant to be called directly from your code.","nodes":[{"pos":[0,130],"content":"Executes a late-bound evaluation of a user-defined operator. This helper method is not meant to be called directly from your code.","nodes":[{"content":"Executes a late-bound evaluation of a user-defined operator. This helper method is not meant to be called directly from your code.","pos":[0,130],"nodes":[{"content":"Executes a late-bound evaluation of a user-defined operator.","pos":[0,60]},{"content":"This helper method is not meant to be called directly from your code.","pos":[61,130]}]}]}],"pos":[48549,48680],"yaml":true},{"content":"The user-defined operator.","nodes":[{"pos":[0,26],"content":"The user-defined operator.","nodes":[{"content":"The user-defined operator.","pos":[0,26]}]}],"pos":[48935,48962],"yaml":true},{"content":"Argument values to pass to the user-defined operator.","nodes":[{"pos":[0,53],"content":"Argument values to pass to the user-defined operator.","nodes":[{"content":"Argument values to pass to the user-defined operator.","pos":[0,53]}]}],"pos":[49029,49083],"yaml":true},{"content":"The result returned from the user-defined operator.","nodes":[{"pos":[0,51],"content":"The result returned from the user-defined operator.","nodes":[{"content":"The result returned from the user-defined operator.","pos":[0,51]}]}],"pos":[49140,49192],"yaml":true},{"content":"Represents the Visual Basic integer division (\\\\) operator.","nodes":[{"pos":[0,59],"content":"Represents the Visual Basic integer division (\\\\) operator.","nodes":[{"content":"Represents the Visual Basic integer division (<ph id=\"ph1\">\\\\</ph>) operator.","pos":[0,59],"source":"Represents the Visual Basic integer division (\\\\) operator."}]}],"pos":[50501,50561],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[50572,50674],"yaml":true,"extradata":"MT"},{"content":"Required. Any numeric expression.","nodes":[{"pos":[0,33],"content":"Required. Any numeric expression.","nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]}],"pos":[50839,50873],"yaml":true},{"content":"Required. Any numeric expression.","nodes":[{"pos":[0,33],"content":"Required. Any numeric expression.","nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]}],"pos":[50934,50968],"yaml":true},{"content":"The integer quotient of <code>Left</code> divided by <code>Right</code>, which discards any remainder and retains only the integer portion.","nodes":[{"pos":[0,139],"content":"The integer quotient of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Left</ph><ept id=\"p1\">&lt;/code&gt;</ept> divided by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">Right</ph><ept id=\"p2\">&lt;/code&gt;</ept>, which discards any remainder and retains only the integer portion.","source":"The integer quotient of <code>Left</code> divided by <code>Right</code>, which discards any remainder and retains only the integer portion."}],"pos":[51025,51165],"yaml":true},{"content":"Represents the Visual Basic arithmetic left shift (<<) operator.","nodes":[{"pos":[0,64],"content":"Represents the Visual Basic arithmetic left shift (<<) operator.","nodes":[{"content":"Represents the Visual Basic arithmetic left shift (&lt;&lt;) operator.","pos":[0,64],"source":"Represents the Visual Basic arithmetic left shift (<<) operator."}]}],"pos":[52503,52568],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[52579,52681],"yaml":true,"extradata":"MT"},{"content":"Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`).","nodes":[{"pos":[0,189],"content":"Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`).","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Integral numeric expression.","pos":[10,38]},{"content":"The bit pattern to be shifted.","pos":[39,69]},{"content":"The data type must be an integral type (<ph id=\"ph1\">`SByte`</ph>, <ph id=\"ph2\">`Byte`</ph>, <ph id=\"ph3\">`Short`</ph>, <ph id=\"ph4\">`UShort`</ph>, <ph id=\"ph5\">`Integer`</ph>, <ph id=\"ph6\">`UInteger`</ph>, <ph id=\"ph7\">`Long`</ph>, or <ph id=\"ph8\">`ULong`</ph>).","pos":[70,189],"source":" The data type must be an integral type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)."}]}],"pos":[52853,53043],"yaml":true},{"content":"Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be `Integer` or widen to `Integer`.","nodes":[{"pos":[0,129],"content":"Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be `Integer` or widen to `Integer`.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Numeric expression.","pos":[10,29]},{"content":"The number of bits to shift the bit pattern.","pos":[30,74]},{"content":"The data type must be <ph id=\"ph1\">`Integer`</ph> or widen to <ph id=\"ph2\">`Integer`</ph>.","pos":[75,129],"source":" The data type must be `Integer` or widen to `Integer`."}]}],"pos":[53105,53235],"yaml":true},{"content":"An integral numeric value. The result of shifting the bit pattern. The data type is the same as that of <code>Operand</code>.","nodes":[{"pos":[0,125],"content":"An integral numeric value. The result of shifting the bit pattern. The data type is the same as that of <code>Operand</code>.","nodes":[{"content":"An integral numeric value.","pos":[0,26]},{"content":"The result of shifting the bit pattern.","pos":[27,66]},{"content":"The data type is the same as that of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Operand</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[67,125],"source":" The data type is the same as that of <code>Operand</code>."}]}],"pos":[53292,53418],"yaml":true},{"content":"Represents the Visual Basic `Like` operator.","nodes":[{"pos":[0,44],"content":"Represents the Visual Basic <ph id=\"ph1\">`Like`</ph> operator.","source":"Represents the Visual Basic `Like` operator."}],"pos":[54879,54924],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[54935,55037],"yaml":true,"extradata":"MT"},{"content":"Required. Any expression.","nodes":[{"pos":[0,25],"content":"Required. Any expression.","nodes":[{"content":"Required. Any expression.","pos":[0,25],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any expression.","pos":[10,25]}]}]}],"pos":[55254,55280],"yaml":true},{"content":"Required. Any string expression conforming to the pattern-matching conventions described in Like Operator.","nodes":[{"pos":[0,106],"content":"Required. Any string expression conforming to the pattern-matching conventions described in Like Operator.","nodes":[{"content":"Required. Any string expression conforming to the pattern-matching conventions described in Like Operator.","pos":[0,106],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any string expression conforming to the pattern-matching conventions described in Like Operator.","pos":[10,106]}]}]}],"pos":[55343,55450],"yaml":true},{"content":"Required. A <xref href=\"Microsoft.VisualBasic.CompareMethod\"></xref> value that specifies that the operation use either text or binary comparison.","nodes":[{"pos":[0,146],"content":"Required. A <xref href=\"Microsoft.VisualBasic.CompareMethod\"></xref> value that specifies that the operation use either text or binary comparison.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"A <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.CompareMethod\"&gt;&lt;/xref&gt;</ph> value that specifies that the operation use either text or binary comparison.","pos":[10,146],"source":" A <xref href=\"Microsoft.VisualBasic.CompareMethod\"></xref> value that specifies that the operation use either text or binary comparison."}]}],"pos":[55541,55688],"yaml":true},{"content":"`True` if the string representation of the value in <code>Source</code> satisfies the pattern that is contained in <code>Pattern</code>; otherwise, `False`. `True` if both <code>Source</code> and <code>Pattern</code> are `Nothing`.","nodes":[{"pos":[0,231],"content":"`True` if the string representation of the value in <code>Source</code> satisfies the pattern that is contained in <code>Pattern</code>; otherwise, `False`. `True` if both <code>Source</code> and <code>Pattern</code> are `Nothing`.","nodes":[{"content":"<ph id=\"ph1\">`True`</ph> if the string representation of the value in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">Source</ph><ept id=\"p1\">&lt;/code&gt;</ept> satisfies the pattern that is contained in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">Pattern</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`False`</ph>.","pos":[0,156],"source":"`True` if the string representation of the value in <code>Source</code> satisfies the pattern that is contained in <code>Pattern</code>; otherwise, `False`."},{"content":"<ph id=\"ph1\">`True`</ph> if both <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">Source</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">Pattern</ph><ept id=\"p2\">&lt;/code&gt;</ept> are <ph id=\"ph4\">`Nothing`</ph>.","pos":[157,231],"source":"`True` if both <code>Source</code> and <code>Pattern</code> are `Nothing`."}]}],"pos":[55745,55979],"yaml":true},{"content":"Represents the Visual Basic `Like` operator.","nodes":[{"pos":[0,44],"content":"Represents the Visual Basic <ph id=\"ph1\">`Like`</ph> operator.","source":"Represents the Visual Basic `Like` operator."}],"pos":[57339,57384],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[57395,57497],"yaml":true,"extradata":"MT"},{"content":"Required. Any `String` expression.","nodes":[{"pos":[0,34],"content":"Required. Any `String` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any <ph id=\"ph1\">`String`</ph> expression.","pos":[10,34],"source":" Any `String` expression."}]}],"pos":[57712,57747],"yaml":true},{"content":"Required. Any `String` expression conforming to the pattern-matching conventions described in Like Operator.","nodes":[{"pos":[0,108],"content":"Required. Any `String` expression conforming to the pattern-matching conventions described in Like Operator.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any <ph id=\"ph1\">`String`</ph> expression conforming to the pattern-matching conventions described in Like Operator.","pos":[10,108],"source":" Any `String` expression conforming to the pattern-matching conventions described in Like Operator."}]}],"pos":[57810,57919],"yaml":true},{"content":"Required. A <xref href=\"Microsoft.VisualBasic.CompareMethod\"></xref> value that specifies that the operation use either text or binary comparison.","nodes":[{"pos":[0,146],"content":"Required. A <xref href=\"Microsoft.VisualBasic.CompareMethod\"></xref> value that specifies that the operation use either text or binary comparison.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"A <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.CompareMethod\"&gt;&lt;/xref&gt;</ph> value that specifies that the operation use either text or binary comparison.","pos":[10,146],"source":" A <xref href=\"Microsoft.VisualBasic.CompareMethod\"></xref> value that specifies that the operation use either text or binary comparison."}]}],"pos":[58010,58157],"yaml":true},{"content":"`True` if the value in <code>Source</code> satisfies the pattern that is contained in <code>Pattern</code>; otherwise, `False`. `True` if both <code>Source</code> and <code>Pattern</code> are empty.","nodes":[{"pos":[0,198],"content":"`True` if the value in <code>Source</code> satisfies the pattern that is contained in <code>Pattern</code>; otherwise, `False`. `True` if both <code>Source</code> and <code>Pattern</code> are empty.","nodes":[{"content":"<ph id=\"ph1\">`True`</ph> if the value in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">Source</ph><ept id=\"p1\">&lt;/code&gt;</ept> satisfies the pattern that is contained in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">Pattern</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`False`</ph>.","pos":[0,127],"source":"`True` if the value in <code>Source</code> satisfies the pattern that is contained in <code>Pattern</code>; otherwise, `False`."},{"content":"<ph id=\"ph1\">`True`</ph> if both <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">Source</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">Pattern</ph><ept id=\"p2\">&lt;/code&gt;</ept> are empty.","pos":[128,198],"source":"`True` if both <code>Source</code> and <code>Pattern</code> are empty."}]}],"pos":[58215,58416],"yaml":true},{"content":"Represents the Visual Basic `Mod` operator.","nodes":[{"pos":[0,43],"content":"Represents the Visual Basic <ph id=\"ph1\">`Mod`</ph> operator.","source":"Represents the Visual Basic `Mod` operator."}],"pos":[59617,59661],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[59672,59774],"yaml":true,"extradata":"MT"},{"content":"Required. Any numeric expression.","nodes":[{"pos":[0,33],"content":"Required. Any numeric expression.","nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]}],"pos":[59933,59967],"yaml":true},{"content":"Required. Any numeric expression.","nodes":[{"pos":[0,33],"content":"Required. Any numeric expression.","nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]}],"pos":[60028,60062],"yaml":true},{"content":"The remainder after <code>Left</code> is divided by <code>Right</code>.","nodes":[{"pos":[0,71],"content":"The remainder after <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is divided by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">Right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The remainder after <code>Left</code> is divided by <code>Right</code>."}],"pos":[60119,60191],"yaml":true},{"content":"Represents the Visual Basic multiply (*) operator.","nodes":[{"pos":[0,50],"content":"Represents the Visual Basic multiply (*) operator.","nodes":[{"content":"Represents the Visual Basic multiply (*) operator.","pos":[0,50]}]}],"pos":[61517,61568],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[61579,61681],"yaml":true,"extradata":"MT"},{"content":"Required. Any numeric expression.","nodes":[{"pos":[0,33],"content":"Required. Any numeric expression.","nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]}],"pos":[61845,61879],"yaml":true},{"content":"Required. Any numeric expression.","nodes":[{"pos":[0,33],"content":"Required. Any numeric expression.","nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]}],"pos":[61940,61974],"yaml":true},{"content":"The product of <code>Left</code> and <code>Right</code>.","nodes":[{"pos":[0,56],"content":"The product of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">Right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The product of <code>Left</code> and <code>Right</code>."}],"pos":[62031,62088],"yaml":true},{"content":"Represents the Visual Basic unary minus (–) operator.","nodes":[{"pos":[0,53],"content":"Represents the Visual Basic unary minus (–) operator.","nodes":[{"content":"Represents the Visual Basic unary minus (–) operator.","pos":[0,53]}]}],"pos":[63341,63395],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[63406,63508],"yaml":true,"extradata":"MT"},{"content":"Required. Any numeric expression.","nodes":[{"pos":[0,33],"content":"Required. Any numeric expression.","nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]}],"pos":[63662,63696],"yaml":true},{"content":"The negative value of <code>Operand</code>.","nodes":[{"pos":[0,43],"content":"The negative value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Operand</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The negative value of <code>Operand</code>."}],"pos":[63753,63797],"yaml":true},{"content":"Represents the Visual Basic `Not` operator.","nodes":[{"pos":[0,43],"content":"Represents the Visual Basic <ph id=\"ph1\">`Not`</ph> operator.","source":"Represents the Visual Basic `Not` operator."}],"pos":[65030,65074],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[65085,65187],"yaml":true,"extradata":"MT"},{"content":"Required. Any `Boolean` or numeric expression.","nodes":[{"pos":[0,46],"content":"Required. Any `Boolean` or numeric expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any <ph id=\"ph1\">`Boolean`</ph> or numeric expression.","pos":[10,46],"source":" Any `Boolean` or numeric expression."}]}],"pos":[65338,65385],"yaml":true},{"content":"For `Boolean` operations, `False` if <code>Operand</code> is `True`; otherwise, `True`. For bitwise operations, 1 if <code>Operand</code> is 0; otherwise, 0.","nodes":[{"pos":[0,157],"content":"For `Boolean` operations, `False` if <code>Operand</code> is `True`; otherwise, `True`. For bitwise operations, 1 if <code>Operand</code> is 0; otherwise, 0.","nodes":[{"content":"For <ph id=\"ph1\">`Boolean`</ph> operations, <ph id=\"ph2\">`False`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">Operand</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph4\">`True`</ph>; otherwise, <ph id=\"ph5\">`True`</ph>.","pos":[0,87],"source":"For `Boolean` operations, `False` if <code>Operand</code> is `True`; otherwise, `True`."},{"content":"For bitwise operations, 1 if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Operand</ph><ept id=\"p1\">&lt;/code&gt;</ept> is 0; otherwise, 0.","pos":[88,157],"source":" For bitwise operations, 1 if <code>Operand</code> is 0; otherwise, 0."}]}],"pos":[65442,65600],"yaml":true},{"content":"Represents the Visual Basic `Or` operator.","nodes":[{"pos":[0,42],"content":"Represents the Visual Basic <ph id=\"ph1\">`Or`</ph> operator.","source":"Represents the Visual Basic `Or` operator."}],"pos":[66890,66933],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[66944,67046],"yaml":true,"extradata":"MT"},{"content":"Required. Any `Boolean` or numeric expression.","nodes":[{"pos":[0,46],"content":"Required. Any `Boolean` or numeric expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any <ph id=\"ph1\">`Boolean`</ph> or numeric expression.","pos":[10,46],"source":" Any `Boolean` or numeric expression."}]}],"pos":[67204,67251],"yaml":true},{"content":"Required. Any `Boolean` or numeric expression.","nodes":[{"pos":[0,46],"content":"Required. Any `Boolean` or numeric expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any <ph id=\"ph1\">`Boolean`</ph> or numeric expression.","pos":[10,46],"source":" Any `Boolean` or numeric expression."}]}],"pos":[67312,67359],"yaml":true},{"content":"For `Boolean` operations, `False` if both <code>Left</code> and <code>Right</code> evaluate to `False`; otherwise, `True`. For bitwise operations, 0 if both <code>Left</code> and <code>Right</code> evaluate to 0; otherwise, 1.","nodes":[{"pos":[0,226],"content":"For `Boolean` operations, `False` if both <code>Left</code> and <code>Right</code> evaluate to `False`; otherwise, `True`. For bitwise operations, 0 if both <code>Left</code> and <code>Right</code> evaluate to 0; otherwise, 1.","nodes":[{"content":"For <ph id=\"ph1\">`Boolean`</ph> operations, <ph id=\"ph2\">`False`</ph> if both <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">Left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">Right</ph><ept id=\"p2\">&lt;/code&gt;</ept> evaluate to <ph id=\"ph5\">`False`</ph>; otherwise, <ph id=\"ph6\">`True`</ph>.","pos":[0,122],"source":"For `Boolean` operations, `False` if both <code>Left</code> and <code>Right</code> evaluate to `False`; otherwise, `True`."},{"content":"For bitwise operations, 0 if both <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">Right</ph><ept id=\"p2\">&lt;/code&gt;</ept> evaluate to 0; otherwise, 1.","pos":[123,226],"source":" For bitwise operations, 0 if both <code>Left</code> and <code>Right</code> evaluate to 0; otherwise, 1."}]}],"pos":[67416,67643],"yaml":true},{"content":"Represents the Visual Basic unary plus (+) operator.","nodes":[{"pos":[0,52],"content":"Represents the Visual Basic unary plus (+) operator.","nodes":[{"content":"Represents the Visual Basic unary plus (+) operator.","pos":[0,52]}]}],"pos":[68878,68931],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[68942,69044],"yaml":true,"extradata":"MT"},{"content":"Required. Any numeric expression.","nodes":[{"pos":[0,33],"content":"Required. Any numeric expression.","nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]}],"pos":[69196,69230],"yaml":true},{"content":"The value of <code>Operand</code>. (The sign of the <code>Operand</code> is unchanged.)","nodes":[{"pos":[0,87],"content":"The value of <code>Operand</code>. (The sign of the <code>Operand</code> is unchanged.)","nodes":[{"content":"The value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Operand</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,34],"source":"The value of <code>Operand</code>."},{"content":"(The sign of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Operand</ph><ept id=\"p1\">&lt;/code&gt;</ept> is unchanged.)","pos":[35,87],"source":" (The sign of the <code>Operand</code> is unchanged.)"}]}],"pos":[69287,69375],"yaml":true},{"content":"Represents the Visual Basic arithmetic right shift (>>) operator.","nodes":[{"pos":[0,65],"content":"Represents the Visual Basic arithmetic right shift (>>) operator.","nodes":[{"content":"Represents the Visual Basic arithmetic right shift (&gt;&gt;) operator.","pos":[0,65],"source":"Represents the Visual Basic arithmetic right shift (>>) operator."}]}],"pos":[70714,70780],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[70791,70893],"yaml":true,"extradata":"MT"},{"content":"Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`).","nodes":[{"pos":[0,189],"content":"Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`).","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Integral numeric expression.","pos":[10,38]},{"content":"The bit pattern to be shifted.","pos":[39,69]},{"content":"The data type must be an integral type (<ph id=\"ph1\">`SByte`</ph>, <ph id=\"ph2\">`Byte`</ph>, <ph id=\"ph3\">`Short`</ph>, <ph id=\"ph4\">`UShort`</ph>, <ph id=\"ph5\">`Integer`</ph>, <ph id=\"ph6\">`UInteger`</ph>, <ph id=\"ph7\">`Long`</ph>, or <ph id=\"ph8\">`ULong`</ph>).","pos":[70,189],"source":" The data type must be an integral type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)."}]}],"pos":[71066,71256],"yaml":true},{"content":"Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be `Integer` or widen to `Integer`.","nodes":[{"pos":[0,129],"content":"Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be `Integer` or widen to `Integer`.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Numeric expression.","pos":[10,29]},{"content":"The number of bits to shift the bit pattern.","pos":[30,74]},{"content":"The data type must be <ph id=\"ph1\">`Integer`</ph> or widen to <ph id=\"ph2\">`Integer`</ph>.","pos":[75,129],"source":" The data type must be `Integer` or widen to `Integer`."}]}],"pos":[71318,71448],"yaml":true},{"content":"An integral numeric value. The result of shifting the bit pattern. The data type is the same as that of <code>Operand</code>.","nodes":[{"pos":[0,125],"content":"An integral numeric value. The result of shifting the bit pattern. The data type is the same as that of <code>Operand</code>.","nodes":[{"content":"An integral numeric value.","pos":[0,26]},{"content":"The result of shifting the bit pattern.","pos":[27,66]},{"content":"The data type is the same as that of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Operand</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[67,125],"source":" The data type is the same as that of <code>Operand</code>."}]}],"pos":[71505,71631],"yaml":true},{"content":"Represents the Visual Basic subtraction (–) operator.","nodes":[{"pos":[0,53],"content":"Represents the Visual Basic subtraction (–) operator.","nodes":[{"content":"Represents the Visual Basic subtraction (–) operator.","pos":[0,53]}]}],"pos":[72964,73018],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[73029,73131],"yaml":true,"extradata":"MT"},{"content":"Required. Any numeric expression.","nodes":[{"pos":[0,33],"content":"Required. Any numeric expression.","nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]}],"pos":[73295,73329],"yaml":true},{"content":"Required. Any numeric expression.","nodes":[{"pos":[0,33],"content":"Required. Any numeric expression.","nodes":[{"content":"Required. Any numeric expression.","pos":[0,33],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any numeric expression.","pos":[10,33]}]}]}],"pos":[73390,73424],"yaml":true},{"content":"The difference between <code>Left</code> and <code>Right</code>.","nodes":[{"pos":[0,64],"content":"The difference between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">Right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The difference between <code>Left</code> and <code>Right</code>."}],"pos":[73481,73546],"yaml":true},{"content":"Represents the Visual Basic `Xor` operator.","nodes":[{"pos":[0,43],"content":"Represents the Visual Basic <ph id=\"ph1\">`Xor`</ph> operator.","source":"Represents the Visual Basic `Xor` operator."}],"pos":[74847,74891],"yaml":true},{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"pos":[0,101],"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","nodes":[{"content":"This class supports the Visual Basic compiler and is not intended to be used directly from your code.","pos":[0,101]}]}],"pos":[74902,75004],"yaml":true,"extradata":"MT"},{"content":"Required. Any `Boolean` or numeric expression.","nodes":[{"pos":[0,46],"content":"Required. Any `Boolean` or numeric expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any <ph id=\"ph1\">`Boolean`</ph> or numeric expression.","pos":[10,46],"source":" Any `Boolean` or numeric expression."}]}],"pos":[75163,75210],"yaml":true},{"content":"Required. Any `Boolean` or numeric expression.","nodes":[{"pos":[0,46],"content":"Required. Any `Boolean` or numeric expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any <ph id=\"ph1\">`Boolean`</ph> or numeric expression.","pos":[10,46],"source":" Any `Boolean` or numeric expression."}]}],"pos":[75271,75318],"yaml":true},{"content":"A `Boolean` or numeric value. For a `Boolean` comparison, the return value is the logical exclusion (exclusive logical disjunction) of two `Boolean` values. For bitwise (numeric) operations, the return value is a numeric value that represents the bitwise exclusion (exclusive bitwise disjunction) of two numeric bit patterns. For more information, see [Xor Operator](~/docs/visual-basic/language-reference/operators/xor-operator.md).","nodes":[{"pos":[0,433],"content":"A `Boolean` or numeric value. For a `Boolean` comparison, the return value is the logical exclusion (exclusive logical disjunction) of two `Boolean` values. For bitwise (numeric) operations, the return value is a numeric value that represents the bitwise exclusion (exclusive bitwise disjunction) of two numeric bit patterns. For more information, see [Xor Operator](~/docs/visual-basic/language-reference/operators/xor-operator.md).","nodes":[{"content":"A <ph id=\"ph1\">`Boolean`</ph> or numeric value.","pos":[0,29],"source":"A `Boolean` or numeric value."},{"content":"For a <ph id=\"ph1\">`Boolean`</ph> comparison, the return value is the logical exclusion (exclusive logical disjunction) of two <ph id=\"ph2\">`Boolean`</ph> values.","pos":[30,156],"source":" For a `Boolean` comparison, the return value is the logical exclusion (exclusive logical disjunction) of two `Boolean` values."},{"content":"For bitwise (numeric) operations, the return value is a numeric value that represents the bitwise exclusion (exclusive bitwise disjunction) of two numeric bit patterns.","pos":[157,325]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Xor Operator<ept id=\"p1\">](~/docs/visual-basic/language-reference/operators/xor-operator.md)</ept>.","pos":[326,433],"source":" For more information, see [Xor Operator](~/docs/visual-basic/language-reference/operators/xor-operator.md)."}]}],"pos":[75375,75809],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualBasic.CompilerServices.Operators\n  commentId: T:Microsoft.VisualBasic.CompilerServices.Operators\n  id: Operators\n  children:\n  - Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.AndObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.CompareObject(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectEqual(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreater(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLess(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLessEqual(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectNotEqual(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.CompareString(System.String,System.String,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreater(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLess(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLessEqual(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectNotEqual(System.Object,System.Object,System.Boolean)\n  - Microsoft.VisualBasic.CompilerServices.Operators.DivideObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.ExponentObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.FallbackInvokeUserDefinedOperator(System.Object,System.Object[])\n  - Microsoft.VisualBasic.CompilerServices.Operators.IntDivideObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.LeftShiftObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.LikeObject(System.Object,System.Object,Microsoft.VisualBasic.CompareMethod)\n  - Microsoft.VisualBasic.CompilerServices.Operators.LikeString(System.String,System.String,Microsoft.VisualBasic.CompareMethod)\n  - Microsoft.VisualBasic.CompilerServices.Operators.ModObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.MultiplyObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.NegateObject(System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.NotObject(System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.OrObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.PlusObject(System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.RightShiftObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.SubtractObject(System.Object,System.Object)\n  - Microsoft.VisualBasic.CompilerServices.Operators.XorObject(System.Object,System.Object)\n  langs:\n  - csharp\n  name: Operators\n  nameWithType: Operators\n  fullName: Microsoft.VisualBasic.CompilerServices.Operators\n  type: Class\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Provides late-bound math operators, such as <xref href=\"Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)\"></xref> and <xref href=\"Microsoft.VisualBasic.CompilerServices.Operators.CompareObject(System.Object,System.Object,System.Boolean)\"></xref>, which the Visual Basic compiler uses internally.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public sealed class Operators\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)\n  id: AddObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: AddObject(Object, Object)\n  nameWithType: Operators.AddObject(Object, Object)\n  fullName: Operators.AddObject(Object, Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic addition (+) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object AddObject (object Left, object Right);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any numeric expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any numeric expression.\n    return:\n      type: System.Object\n      description: The sum of <code>Left</code> and <code>Right</code>.\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.AddObject*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.AndObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.AndObject(System.Object,System.Object)\n  id: AndObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: AndObject(Object, Object)\n  nameWithType: Operators.AndObject(Object, Object)\n  fullName: Operators.AndObject(Object, Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic `And` operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object AndObject (object Left, object Right);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any `Boolean` or numeric expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any `Boolean` or numeric expression.\n    return:\n      type: System.Object\n      description: For `Boolean` operations, `True` if both <code>Left</code> and <code>Right</code> evaluate to `True`; otherwise, `False`. For bitwise operations, 1 if both <code>Left</code> and <code>Right</code> evaluate to 1; otherwise, 0.\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.AndObject*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObject(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObject(System.Object,System.Object,System.Boolean)\n  id: CompareObject(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: CompareObject(Object, Object, Boolean)\n  nameWithType: Operators.CompareObject(Object, Object, Boolean)\n  fullName: Operators.CompareObject(Object, Object, Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents Visual Basic comparison operators.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static int CompareObject (object Left, object Right, bool TextCompare);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any expression.\n    - id: TextCompare\n      type: System.Boolean\n      description: Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.\n    return:\n      type: System.Int32\n      description: \"<table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> -1  \\n  \\n </td><td>\\n          <code>Left</code> is less than <code>Right</code>.  \\n  \\n </td></tr><tr><td> 0  \\n  \\n </td><td>\\n          <code>Left</code> and <code>Right</code> are equal.  \\n  \\n </td></tr><tr><td> 1  \\n  \\n </td><td>\\n          <code>Left</code> is greater than <code>Right</code>.  \\n  \\n </td></tr></tbody></table>\"\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.CompareObject*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectEqual(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectEqual(System.Object,System.Object,System.Boolean)\n  id: CompareObjectEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: CompareObjectEqual(Object, Object, Boolean)\n  nameWithType: Operators.CompareObjectEqual(Object, Object, Boolean)\n  fullName: Operators.CompareObjectEqual(Object, Object, Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic equal (=) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object CompareObjectEqual (object Left, object Right, bool TextCompare);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any expression.\n    - id: TextCompare\n      type: System.Boolean\n      description: Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.\n    return:\n      type: System.Object\n      description: '`True` if <code>Left</code> and <code>Right</code> are equal; otherwise, `False`.'\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectEqual*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreater(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreater(System.Object,System.Object,System.Boolean)\n  id: CompareObjectGreater(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: CompareObjectGreater(Object, Object, Boolean)\n  nameWithType: Operators.CompareObjectGreater(Object, Object, Boolean)\n  fullName: Operators.CompareObjectGreater(Object, Object, Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic greater-than (>) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object CompareObjectGreater (object Left, object Right, bool TextCompare);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any expression.\n    - id: TextCompare\n      type: System.Boolean\n      description: Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.\n    return:\n      type: System.Object\n      description: '`True` if <code>Left</code> is greater than <code>Right</code>; otherwise, `False`.'\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreater*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)\n  id: CompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: CompareObjectGreaterEqual(Object, Object, Boolean)\n  nameWithType: Operators.CompareObjectGreaterEqual(Object, Object, Boolean)\n  fullName: Operators.CompareObjectGreaterEqual(Object, Object, Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic greater-than or equal-to (>=) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object CompareObjectGreaterEqual (object Left, object Right, bool TextCompare);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any expression.\n    - id: TextCompare\n      type: System.Boolean\n      description: Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.\n    return:\n      type: System.Object\n      description: '`True` if <code>Left</code> is greater than or equal to <code>Right</code>; otherwise, `False`.'\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreaterEqual*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLess(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLess(System.Object,System.Object,System.Boolean)\n  id: CompareObjectLess(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: CompareObjectLess(Object, Object, Boolean)\n  nameWithType: Operators.CompareObjectLess(Object, Object, Boolean)\n  fullName: Operators.CompareObjectLess(Object, Object, Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic less-than (<) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object CompareObjectLess (object Left, object Right, bool TextCompare);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any expression.\n    - id: TextCompare\n      type: System.Boolean\n      description: Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.\n    return:\n      type: System.Object\n      description: '`True` if <code>Left</code> is less than <code>Right</code>; otherwise, `False`.'\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLess*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLessEqual(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLessEqual(System.Object,System.Object,System.Boolean)\n  id: CompareObjectLessEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: CompareObjectLessEqual(Object, Object, Boolean)\n  nameWithType: Operators.CompareObjectLessEqual(Object, Object, Boolean)\n  fullName: Operators.CompareObjectLessEqual(Object, Object, Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic less-than or equal-to (<=) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object CompareObjectLessEqual (object Left, object Right, bool TextCompare);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any expression.\n    - id: TextCompare\n      type: System.Boolean\n      description: Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.\n    return:\n      type: System.Object\n      description: '`True` if <code>Left</code> is less than or equal to <code>Right</code>; otherwise, `False`.'\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLessEqual*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectNotEqual(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectNotEqual(System.Object,System.Object,System.Boolean)\n  id: CompareObjectNotEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: CompareObjectNotEqual(Object, Object, Boolean)\n  nameWithType: Operators.CompareObjectNotEqual(Object, Object, Boolean)\n  fullName: Operators.CompareObjectNotEqual(Object, Object, Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic not-equal (<>) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object CompareObjectNotEqual (object Left, object Right, bool TextCompare);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any expression.\n    - id: TextCompare\n      type: System.Boolean\n      description: Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.\n    return:\n      type: System.Object\n      description: '`True` if <code>Left</code> is not equal to <code>Right</code>; otherwise, `False`.'\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectNotEqual*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareString(System.String,System.String,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.CompareString(System.String,System.String,System.Boolean)\n  id: CompareString(System.String,System.String,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: CompareString(String, String, Boolean)\n  nameWithType: Operators.CompareString(String, String, Boolean)\n  fullName: Operators.CompareString(String, String, Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Performs binary or text string comparison when given two strings.\n  remarks: \"This class supports the Visual Basic compiler and is not intended to be used directly from your code.  \\n  \\n When the Visual Basic equality operator is used to compare two strings, it passes the strings to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A> method along with a value of `False` for the `TextCompare` argument. This performs a case-sensitive comparison that is either ordinal or based on the current culture, depending on the value of the  statement.\"\n  syntax:\n    content: public static int CompareString (string Left, string Right, bool TextCompare);\n    parameters:\n    - id: Left\n      type: System.String\n      description: Required. Any `String` expression.\n    - id: Right\n      type: System.String\n      description: Required. Any `String` expression.\n    - id: TextCompare\n      type: System.Boolean\n      description: Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.\n    return:\n      type: System.Int32\n      description: \"<table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> -1  \\n  \\n </td><td>\\n          <code>Left</code> is less than <code>Right</code>.  \\n  \\n </td></tr><tr><td> 0  \\n  \\n </td><td>\\n          <code>Left</code> is equal to <code>Right</code>.  \\n  \\n </td></tr><tr><td> 1  \\n  \\n </td><td>\\n          <code>Left</code> is greater than <code>Right</code>.  \\n  \\n </td></tr></tbody></table>\"\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.CompareString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(System.Object,System.Object)\n  id: ConcatenateObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: ConcatenateObject(Object, Object)\n  nameWithType: Operators.ConcatenateObject(Object, Object)\n  fullName: Operators.ConcatenateObject(Object, Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic concatenation (&) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object ConcatenateObject (object Left, object Right);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any expression.\n    return:\n      type: System.Object\n      description: A string representing the concatenation of <code>Left</code> and <code>Right</code>.\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(System.Object,System.Object,System.Boolean)\n  id: ConditionalCompareObjectEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: ConditionalCompareObjectEqual(Object, Object, Boolean)\n  nameWithType: Operators.ConditionalCompareObjectEqual(Object, Object, Boolean)\n  fullName: Operators.ConditionalCompareObjectEqual(Object, Object, Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the overloaded Visual Basic equals (=) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static bool ConditionalCompareObjectEqual (object Left, object Right, bool TextCompare);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any expression.\n    - id: TextCompare\n      type: System.Boolean\n      description: Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.\n    return:\n      type: System.Boolean\n      description: The result of the overloaded equals operator. `False` if operator overloading is not supported.\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreater(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreater(System.Object,System.Object,System.Boolean)\n  id: ConditionalCompareObjectGreater(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: ConditionalCompareObjectGreater(Object, Object, Boolean)\n  nameWithType: Operators.ConditionalCompareObjectGreater(Object, Object, Boolean)\n  fullName: Operators.ConditionalCompareObjectGreater(Object, Object, Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the overloaded Visual Basic greater-than (>) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static bool ConditionalCompareObjectGreater (object Left, object Right, bool TextCompare);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any expression.\n    - id: TextCompare\n      type: System.Boolean\n      description: Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.\n    return:\n      type: System.Boolean\n      description: The result of the overloaded greater-than operator. `False` if operator overloading is not supported.\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreater*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)\n  id: ConditionalCompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: ConditionalCompareObjectGreaterEqual(Object, Object, Boolean)\n  nameWithType: Operators.ConditionalCompareObjectGreaterEqual(Object, Object, Boolean)\n  fullName: Operators.ConditionalCompareObjectGreaterEqual(Object, Object, Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the overloaded Visual Basic greater-than or equal-to (>=) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static bool ConditionalCompareObjectGreaterEqual (object Left, object Right, bool TextCompare);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any expression.\n    - id: TextCompare\n      type: System.Boolean\n      description: Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.\n    return:\n      type: System.Boolean\n      description: The result of the overloaded greater-than or equal-to operator. `False` if operator overloading is not supported.\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreaterEqual*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLess(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLess(System.Object,System.Object,System.Boolean)\n  id: ConditionalCompareObjectLess(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: ConditionalCompareObjectLess(Object, Object, Boolean)\n  nameWithType: Operators.ConditionalCompareObjectLess(Object, Object, Boolean)\n  fullName: Operators.ConditionalCompareObjectLess(Object, Object, Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the overloaded Visual Basic less-than (<) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static bool ConditionalCompareObjectLess (object Left, object Right, bool TextCompare);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any expression.\n    - id: TextCompare\n      type: System.Boolean\n      description: Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.\n    return:\n      type: System.Boolean\n      description: The result of the overloaded less-than operator. `False` if operator overloading is not supported.\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLess*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLessEqual(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLessEqual(System.Object,System.Object,System.Boolean)\n  id: ConditionalCompareObjectLessEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: ConditionalCompareObjectLessEqual(Object, Object, Boolean)\n  nameWithType: Operators.ConditionalCompareObjectLessEqual(Object, Object, Boolean)\n  fullName: Operators.ConditionalCompareObjectLessEqual(Object, Object, Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the overloaded Visual Basic less-than or equal-to (<=) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static bool ConditionalCompareObjectLessEqual (object Left, object Right, bool TextCompare);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any expression.\n    - id: TextCompare\n      type: System.Boolean\n      description: Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.\n    return:\n      type: System.Boolean\n      description: The result of the overloaded less-than or equal-to operator. `False` if operator overloading is not supported.\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLessEqual*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectNotEqual(System.Object,System.Object,System.Boolean)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectNotEqual(System.Object,System.Object,System.Boolean)\n  id: ConditionalCompareObjectNotEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: ConditionalCompareObjectNotEqual(Object, Object, Boolean)\n  nameWithType: Operators.ConditionalCompareObjectNotEqual(Object, Object, Boolean)\n  fullName: Operators.ConditionalCompareObjectNotEqual(Object, Object, Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the overloaded Visual Basic not-equal (<>) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static bool ConditionalCompareObjectNotEqual (object Left, object Right, bool TextCompare);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any expression.\n    - id: TextCompare\n      type: System.Boolean\n      description: Required. `True` to perform a case-insensitive string comparison; otherwise, `False`.\n    return:\n      type: System.Boolean\n      description: The result of the overloaded not-equal operator. `False` if operator overloading is not supported.\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectNotEqual*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.DivideObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.DivideObject(System.Object,System.Object)\n  id: DivideObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: DivideObject(Object, Object)\n  nameWithType: Operators.DivideObject(Object, Object)\n  fullName: Operators.DivideObject(Object, Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic division (/) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object DivideObject (object Left, object Right);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any numeric expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any numeric expression.\n    return:\n      type: System.Object\n      description: The full quotient of <code>Left</code> divided by <code>Right</code>, including any remainder.\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.DivideObject*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ExponentObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ExponentObject(System.Object,System.Object)\n  id: ExponentObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: ExponentObject(Object, Object)\n  nameWithType: Operators.ExponentObject(Object, Object)\n  fullName: Operators.ExponentObject(Object, Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic exponent (^) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object ExponentObject (object Left, object Right);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any numeric expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any numeric expression.\n    return:\n      type: System.Object\n      description: The result of <code>Left</code> raised to the power of <code>Right</code>.\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.ExponentObject*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.FallbackInvokeUserDefinedOperator(System.Object,System.Object[])\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.FallbackInvokeUserDefinedOperator(System.Object,System.Object[])\n  id: FallbackInvokeUserDefinedOperator(System.Object,System.Object[])\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: FallbackInvokeUserDefinedOperator(Object, Object[])\n  nameWithType: Operators.FallbackInvokeUserDefinedOperator(Object, Object[])\n  fullName: Operators.FallbackInvokeUserDefinedOperator(Object, Object[])\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Executes a late-bound evaluation of a user-defined operator. This helper method is not meant to be called directly from your code.\n  syntax:\n    content: >-\n      [System.Obsolete(\"do not use this method\", true)]\n\n      public static object FallbackInvokeUserDefinedOperator (object vbOp, object[] Arguments);\n    parameters:\n    - id: vbOp\n      type: System.Object\n      description: The user-defined operator.\n    - id: Arguments\n      type: System.Object[]\n      description: Argument values to pass to the user-defined operator.\n    return:\n      type: System.Object\n      description: The result returned from the user-defined operator.\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.FallbackInvokeUserDefinedOperator*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.IntDivideObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.IntDivideObject(System.Object,System.Object)\n  id: IntDivideObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: IntDivideObject(Object, Object)\n  nameWithType: Operators.IntDivideObject(Object, Object)\n  fullName: Operators.IntDivideObject(Object, Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic integer division (\\\\) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object IntDivideObject (object Left, object Right);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any numeric expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any numeric expression.\n    return:\n      type: System.Object\n      description: The integer quotient of <code>Left</code> divided by <code>Right</code>, which discards any remainder and retains only the integer portion.\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.IntDivideObject*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.LeftShiftObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.LeftShiftObject(System.Object,System.Object)\n  id: LeftShiftObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: LeftShiftObject(Object, Object)\n  nameWithType: Operators.LeftShiftObject(Object, Object)\n  fullName: Operators.LeftShiftObject(Object, Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic arithmetic left shift (<<) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object LeftShiftObject (object Operand, object Amount);\n    parameters:\n    - id: Operand\n      type: System.Object\n      description: Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`).\n    - id: Amount\n      type: System.Object\n      description: Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be `Integer` or widen to `Integer`.\n    return:\n      type: System.Object\n      description: An integral numeric value. The result of shifting the bit pattern. The data type is the same as that of <code>Operand</code>.\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.LeftShiftObject*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.LikeObject(System.Object,System.Object,Microsoft.VisualBasic.CompareMethod)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.LikeObject(System.Object,System.Object,Microsoft.VisualBasic.CompareMethod)\n  id: LikeObject(System.Object,System.Object,Microsoft.VisualBasic.CompareMethod)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: LikeObject(Object, Object, CompareMethod)\n  nameWithType: Operators.LikeObject(Object, Object, CompareMethod)\n  fullName: Operators.LikeObject(Object, Object, CompareMethod)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic `Like` operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object LikeObject (object Source, object Pattern, Microsoft.VisualBasic.CompareMethod CompareOption);\n    parameters:\n    - id: Source\n      type: System.Object\n      description: Required. Any expression.\n    - id: Pattern\n      type: System.Object\n      description: Required. Any string expression conforming to the pattern-matching conventions described in Like Operator.\n    - id: CompareOption\n      type: Microsoft.VisualBasic.CompareMethod\n      description: Required. A <xref href=\"Microsoft.VisualBasic.CompareMethod\"></xref> value that specifies that the operation use either text or binary comparison.\n    return:\n      type: System.Object\n      description: '`True` if the string representation of the value in <code>Source</code> satisfies the pattern that is contained in <code>Pattern</code>; otherwise, `False`. `True` if both <code>Source</code> and <code>Pattern</code> are `Nothing`.'\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.LikeObject*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.LikeString(System.String,System.String,Microsoft.VisualBasic.CompareMethod)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.LikeString(System.String,System.String,Microsoft.VisualBasic.CompareMethod)\n  id: LikeString(System.String,System.String,Microsoft.VisualBasic.CompareMethod)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: LikeString(String, String, CompareMethod)\n  nameWithType: Operators.LikeString(String, String, CompareMethod)\n  fullName: Operators.LikeString(String, String, CompareMethod)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic `Like` operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static bool LikeString (string Source, string Pattern, Microsoft.VisualBasic.CompareMethod CompareOption);\n    parameters:\n    - id: Source\n      type: System.String\n      description: Required. Any `String` expression.\n    - id: Pattern\n      type: System.String\n      description: Required. Any `String` expression conforming to the pattern-matching conventions described in Like Operator.\n    - id: CompareOption\n      type: Microsoft.VisualBasic.CompareMethod\n      description: Required. A <xref href=\"Microsoft.VisualBasic.CompareMethod\"></xref> value that specifies that the operation use either text or binary comparison.\n    return:\n      type: System.Boolean\n      description: '`True` if the value in <code>Source</code> satisfies the pattern that is contained in <code>Pattern</code>; otherwise, `False`. `True` if both <code>Source</code> and <code>Pattern</code> are empty.'\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.LikeString*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ModObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.ModObject(System.Object,System.Object)\n  id: ModObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: ModObject(Object, Object)\n  nameWithType: Operators.ModObject(Object, Object)\n  fullName: Operators.ModObject(Object, Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic `Mod` operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object ModObject (object Left, object Right);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any numeric expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any numeric expression.\n    return:\n      type: System.Object\n      description: The remainder after <code>Left</code> is divided by <code>Right</code>.\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.ModObject*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.MultiplyObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.MultiplyObject(System.Object,System.Object)\n  id: MultiplyObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: MultiplyObject(Object, Object)\n  nameWithType: Operators.MultiplyObject(Object, Object)\n  fullName: Operators.MultiplyObject(Object, Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic multiply (*) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object MultiplyObject (object Left, object Right);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any numeric expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any numeric expression.\n    return:\n      type: System.Object\n      description: The product of <code>Left</code> and <code>Right</code>.\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.MultiplyObject*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.NegateObject(System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.NegateObject(System.Object)\n  id: NegateObject(System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: NegateObject(Object)\n  nameWithType: Operators.NegateObject(Object)\n  fullName: Operators.NegateObject(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic unary minus (–) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object NegateObject (object Operand);\n    parameters:\n    - id: Operand\n      type: System.Object\n      description: Required. Any numeric expression.\n    return:\n      type: System.Object\n      description: The negative value of <code>Operand</code>.\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.NegateObject*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.NotObject(System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.NotObject(System.Object)\n  id: NotObject(System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: NotObject(Object)\n  nameWithType: Operators.NotObject(Object)\n  fullName: Operators.NotObject(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic `Not` operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object NotObject (object Operand);\n    parameters:\n    - id: Operand\n      type: System.Object\n      description: Required. Any `Boolean` or numeric expression.\n    return:\n      type: System.Object\n      description: For `Boolean` operations, `False` if <code>Operand</code> is `True`; otherwise, `True`. For bitwise operations, 1 if <code>Operand</code> is 0; otherwise, 0.\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.NotObject*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.OrObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.OrObject(System.Object,System.Object)\n  id: OrObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: OrObject(Object, Object)\n  nameWithType: Operators.OrObject(Object, Object)\n  fullName: Operators.OrObject(Object, Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic `Or` operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object OrObject (object Left, object Right);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any `Boolean` or numeric expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any `Boolean` or numeric expression.\n    return:\n      type: System.Object\n      description: For `Boolean` operations, `False` if both <code>Left</code> and <code>Right</code> evaluate to `False`; otherwise, `True`. For bitwise operations, 0 if both <code>Left</code> and <code>Right</code> evaluate to 0; otherwise, 1.\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.OrObject*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.PlusObject(System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.PlusObject(System.Object)\n  id: PlusObject(System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: PlusObject(Object)\n  nameWithType: Operators.PlusObject(Object)\n  fullName: Operators.PlusObject(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic unary plus (+) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object PlusObject (object Operand);\n    parameters:\n    - id: Operand\n      type: System.Object\n      description: Required. Any numeric expression.\n    return:\n      type: System.Object\n      description: The value of <code>Operand</code>. (The sign of the <code>Operand</code> is unchanged.)\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.PlusObject*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.RightShiftObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.RightShiftObject(System.Object,System.Object)\n  id: RightShiftObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: RightShiftObject(Object, Object)\n  nameWithType: Operators.RightShiftObject(Object, Object)\n  fullName: Operators.RightShiftObject(Object, Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic arithmetic right shift (>>) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object RightShiftObject (object Operand, object Amount);\n    parameters:\n    - id: Operand\n      type: System.Object\n      description: Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`).\n    - id: Amount\n      type: System.Object\n      description: Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be `Integer` or widen to `Integer`.\n    return:\n      type: System.Object\n      description: An integral numeric value. The result of shifting the bit pattern. The data type is the same as that of <code>Operand</code>.\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.RightShiftObject*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.SubtractObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.SubtractObject(System.Object,System.Object)\n  id: SubtractObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: SubtractObject(Object, Object)\n  nameWithType: Operators.SubtractObject(Object, Object)\n  fullName: Operators.SubtractObject(Object, Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic subtraction (–) operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object SubtractObject (object Left, object Right);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any numeric expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any numeric expression.\n    return:\n      type: System.Object\n      description: The difference between <code>Left</code> and <code>Right</code>.\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.SubtractObject*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.XorObject(System.Object,System.Object)\n  commentId: M:Microsoft.VisualBasic.CompilerServices.Operators.XorObject(System.Object,System.Object)\n  id: XorObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  langs:\n  - csharp\n  name: XorObject(Object, Object)\n  nameWithType: Operators.XorObject(Object, Object)\n  fullName: Operators.XorObject(Object, Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.CompilerServices\n  summary: Represents the Visual Basic `Xor` operator.\n  remarks: This class supports the Visual Basic compiler and is not intended to be used directly from your code.\n  syntax:\n    content: public static object XorObject (object Left, object Right);\n    parameters:\n    - id: Left\n      type: System.Object\n      description: Required. Any `Boolean` or numeric expression.\n    - id: Right\n      type: System.Object\n      description: Required. Any `Boolean` or numeric expression.\n    return:\n      type: System.Object\n      description: A `Boolean` or numeric value. For a `Boolean` comparison, the return value is the logical exclusion (exclusive logical disjunction) of two `Boolean` values. For bitwise (numeric) operations, the return value is a numeric value that represents the bitwise exclusion (exclusive bitwise disjunction) of two numeric bit patterns. For more information, see [Xor Operator](~/docs/visual-basic/language-reference/operators/xor-operator.md).\n  overload: Microsoft.VisualBasic.CompilerServices.Operators.XorObject*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  internal_use_only: true\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: AddObject(Object, Object)\n  nameWithType: Operators.AddObject(Object, Object)\n  fullName: Operators.AddObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.AndObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: AndObject(Object, Object)\n  nameWithType: Operators.AndObject(Object, Object)\n  fullName: Operators.AndObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObject(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: CompareObject(Object, Object, Boolean)\n  nameWithType: Operators.CompareObject(Object, Object, Boolean)\n  fullName: Operators.CompareObject(Object, Object, Boolean)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: CompareObjectEqual(Object, Object, Boolean)\n  nameWithType: Operators.CompareObjectEqual(Object, Object, Boolean)\n  fullName: Operators.CompareObjectEqual(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreater(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: CompareObjectGreater(Object, Object, Boolean)\n  nameWithType: Operators.CompareObjectGreater(Object, Object, Boolean)\n  fullName: Operators.CompareObjectGreater(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: CompareObjectGreaterEqual(Object, Object, Boolean)\n  nameWithType: Operators.CompareObjectGreaterEqual(Object, Object, Boolean)\n  fullName: Operators.CompareObjectGreaterEqual(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLess(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: CompareObjectLess(Object, Object, Boolean)\n  nameWithType: Operators.CompareObjectLess(Object, Object, Boolean)\n  fullName: Operators.CompareObjectLess(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLessEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: CompareObjectLessEqual(Object, Object, Boolean)\n  nameWithType: Operators.CompareObjectLessEqual(Object, Object, Boolean)\n  fullName: Operators.CompareObjectLessEqual(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectNotEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: CompareObjectNotEqual(Object, Object, Boolean)\n  nameWithType: Operators.CompareObjectNotEqual(Object, Object, Boolean)\n  fullName: Operators.CompareObjectNotEqual(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareString(System.String,System.String,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: CompareString(String, String, Boolean)\n  nameWithType: Operators.CompareString(String, String, Boolean)\n  fullName: Operators.CompareString(String, String, Boolean)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: ConcatenateObject(Object, Object)\n  nameWithType: Operators.ConcatenateObject(Object, Object)\n  fullName: Operators.ConcatenateObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: ConditionalCompareObjectEqual(Object, Object, Boolean)\n  nameWithType: Operators.ConditionalCompareObjectEqual(Object, Object, Boolean)\n  fullName: Operators.ConditionalCompareObjectEqual(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreater(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: ConditionalCompareObjectGreater(Object, Object, Boolean)\n  nameWithType: Operators.ConditionalCompareObjectGreater(Object, Object, Boolean)\n  fullName: Operators.ConditionalCompareObjectGreater(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: ConditionalCompareObjectGreaterEqual(Object, Object, Boolean)\n  nameWithType: Operators.ConditionalCompareObjectGreaterEqual(Object, Object, Boolean)\n  fullName: Operators.ConditionalCompareObjectGreaterEqual(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLess(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: ConditionalCompareObjectLess(Object, Object, Boolean)\n  nameWithType: Operators.ConditionalCompareObjectLess(Object, Object, Boolean)\n  fullName: Operators.ConditionalCompareObjectLess(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLessEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: ConditionalCompareObjectLessEqual(Object, Object, Boolean)\n  nameWithType: Operators.ConditionalCompareObjectLessEqual(Object, Object, Boolean)\n  fullName: Operators.ConditionalCompareObjectLessEqual(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectNotEqual(System.Object,System.Object,System.Boolean)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: ConditionalCompareObjectNotEqual(Object, Object, Boolean)\n  nameWithType: Operators.ConditionalCompareObjectNotEqual(Object, Object, Boolean)\n  fullName: Operators.ConditionalCompareObjectNotEqual(Object, Object, Boolean)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.DivideObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: DivideObject(Object, Object)\n  nameWithType: Operators.DivideObject(Object, Object)\n  fullName: Operators.DivideObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ExponentObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: ExponentObject(Object, Object)\n  nameWithType: Operators.ExponentObject(Object, Object)\n  fullName: Operators.ExponentObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.FallbackInvokeUserDefinedOperator(System.Object,System.Object[])\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: FallbackInvokeUserDefinedOperator(Object, Object[])\n  nameWithType: Operators.FallbackInvokeUserDefinedOperator(Object, Object[])\n  fullName: Operators.FallbackInvokeUserDefinedOperator(Object, Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.IntDivideObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: IntDivideObject(Object, Object)\n  nameWithType: Operators.IntDivideObject(Object, Object)\n  fullName: Operators.IntDivideObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.LeftShiftObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: LeftShiftObject(Object, Object)\n  nameWithType: Operators.LeftShiftObject(Object, Object)\n  fullName: Operators.LeftShiftObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.LikeObject(System.Object,System.Object,Microsoft.VisualBasic.CompareMethod)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: LikeObject(Object, Object, CompareMethod)\n  nameWithType: Operators.LikeObject(Object, Object, CompareMethod)\n  fullName: Operators.LikeObject(Object, Object, CompareMethod)\n- uid: Microsoft.VisualBasic.CompareMethod\n  parent: Microsoft.VisualBasic\n  isExternal: false\n  name: CompareMethod\n  nameWithType: CompareMethod\n  fullName: Microsoft.VisualBasic.CompareMethod\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.LikeString(System.String,System.String,Microsoft.VisualBasic.CompareMethod)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: LikeString(String, String, CompareMethod)\n  nameWithType: Operators.LikeString(String, String, CompareMethod)\n  fullName: Operators.LikeString(String, String, CompareMethod)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ModObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: ModObject(Object, Object)\n  nameWithType: Operators.ModObject(Object, Object)\n  fullName: Operators.ModObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.MultiplyObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: MultiplyObject(Object, Object)\n  nameWithType: Operators.MultiplyObject(Object, Object)\n  fullName: Operators.MultiplyObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.NegateObject(System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: NegateObject(Object)\n  nameWithType: Operators.NegateObject(Object)\n  fullName: Operators.NegateObject(Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.NotObject(System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: NotObject(Object)\n  nameWithType: Operators.NotObject(Object)\n  fullName: Operators.NotObject(Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.OrObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: OrObject(Object, Object)\n  nameWithType: Operators.OrObject(Object, Object)\n  fullName: Operators.OrObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.PlusObject(System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: PlusObject(Object)\n  nameWithType: Operators.PlusObject(Object)\n  fullName: Operators.PlusObject(Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.RightShiftObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: RightShiftObject(Object, Object)\n  nameWithType: Operators.RightShiftObject(Object, Object)\n  fullName: Operators.RightShiftObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.SubtractObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: SubtractObject(Object, Object)\n  nameWithType: Operators.SubtractObject(Object, Object)\n  fullName: Operators.SubtractObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.XorObject(System.Object,System.Object)\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: XorObject(Object, Object)\n  nameWithType: Operators.XorObject(Object, Object)\n  fullName: Operators.XorObject(Object, Object)\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.AddObject*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: AddObject\n  nameWithType: Operators.AddObject\n  fullName: Operators.AddObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.AndObject*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: AndObject\n  nameWithType: Operators.AndObject\n  fullName: Operators.AndObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObject*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: CompareObject\n  nameWithType: Operators.CompareObject\n  fullName: Operators.CompareObject\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectEqual*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: CompareObjectEqual\n  nameWithType: Operators.CompareObjectEqual\n  fullName: Operators.CompareObjectEqual\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreater*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: CompareObjectGreater\n  nameWithType: Operators.CompareObjectGreater\n  fullName: Operators.CompareObjectGreater\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreaterEqual*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: CompareObjectGreaterEqual\n  nameWithType: Operators.CompareObjectGreaterEqual\n  fullName: Operators.CompareObjectGreaterEqual\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLess*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: CompareObjectLess\n  nameWithType: Operators.CompareObjectLess\n  fullName: Operators.CompareObjectLess\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLessEqual*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: CompareObjectLessEqual\n  nameWithType: Operators.CompareObjectLessEqual\n  fullName: Operators.CompareObjectLessEqual\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectNotEqual*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: CompareObjectNotEqual\n  nameWithType: Operators.CompareObjectNotEqual\n  fullName: Operators.CompareObjectNotEqual\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.CompareString*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: CompareString\n  nameWithType: Operators.CompareString\n  fullName: Operators.CompareString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: ConcatenateObject\n  nameWithType: Operators.ConcatenateObject\n  fullName: Operators.ConcatenateObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: ConditionalCompareObjectEqual\n  nameWithType: Operators.ConditionalCompareObjectEqual\n  fullName: Operators.ConditionalCompareObjectEqual\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreater*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: ConditionalCompareObjectGreater\n  nameWithType: Operators.ConditionalCompareObjectGreater\n  fullName: Operators.ConditionalCompareObjectGreater\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreaterEqual*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: ConditionalCompareObjectGreaterEqual\n  nameWithType: Operators.ConditionalCompareObjectGreaterEqual\n  fullName: Operators.ConditionalCompareObjectGreaterEqual\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLess*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: ConditionalCompareObjectLess\n  nameWithType: Operators.ConditionalCompareObjectLess\n  fullName: Operators.ConditionalCompareObjectLess\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLessEqual*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: ConditionalCompareObjectLessEqual\n  nameWithType: Operators.ConditionalCompareObjectLessEqual\n  fullName: Operators.ConditionalCompareObjectLessEqual\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectNotEqual*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: ConditionalCompareObjectNotEqual\n  nameWithType: Operators.ConditionalCompareObjectNotEqual\n  fullName: Operators.ConditionalCompareObjectNotEqual\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.DivideObject*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: DivideObject\n  nameWithType: Operators.DivideObject\n  fullName: Operators.DivideObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ExponentObject*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: ExponentObject\n  nameWithType: Operators.ExponentObject\n  fullName: Operators.ExponentObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.FallbackInvokeUserDefinedOperator*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: FallbackInvokeUserDefinedOperator\n  nameWithType: Operators.FallbackInvokeUserDefinedOperator\n  fullName: Operators.FallbackInvokeUserDefinedOperator\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.IntDivideObject*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: IntDivideObject\n  nameWithType: Operators.IntDivideObject\n  fullName: Operators.IntDivideObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.LeftShiftObject*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: LeftShiftObject\n  nameWithType: Operators.LeftShiftObject\n  fullName: Operators.LeftShiftObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.LikeObject*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: LikeObject\n  nameWithType: Operators.LikeObject\n  fullName: Operators.LikeObject\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.LikeString*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: LikeString\n  nameWithType: Operators.LikeString\n  fullName: Operators.LikeString\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.ModObject*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: ModObject\n  nameWithType: Operators.ModObject\n  fullName: Operators.ModObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.MultiplyObject*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: MultiplyObject\n  nameWithType: Operators.MultiplyObject\n  fullName: Operators.MultiplyObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.NegateObject*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: NegateObject\n  nameWithType: Operators.NegateObject\n  fullName: Operators.NegateObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.NotObject*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: NotObject\n  nameWithType: Operators.NotObject\n  fullName: Operators.NotObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.OrObject*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: OrObject\n  nameWithType: Operators.OrObject\n  fullName: Operators.OrObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.PlusObject*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: PlusObject\n  nameWithType: Operators.PlusObject\n  fullName: Operators.PlusObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.RightShiftObject*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: RightShiftObject\n  nameWithType: Operators.RightShiftObject\n  fullName: Operators.RightShiftObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.SubtractObject*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: SubtractObject\n  nameWithType: Operators.SubtractObject\n  fullName: Operators.SubtractObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: Microsoft.VisualBasic.CompilerServices.Operators.XorObject*\n  parent: Microsoft.VisualBasic.CompilerServices.Operators\n  isExternal: false\n  name: XorObject\n  nameWithType: Operators.XorObject\n  fullName: Operators.XorObject\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.CompilerServices/Operators.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}