{"nodes":[{"content":"The permission that is demanded by <xref href=\"System.Transactions\"></xref> when management of a transaction is escalated to MSDTC. This class cannot be inherited.","nodes":[{"pos":[0,163],"content":"The permission that is demanded by <xref href=\"System.Transactions\"></xref> when management of a transaction is escalated to MSDTC. This class cannot be inherited.","nodes":[{"content":"The permission that is demanded by <ph id=\"ph1\">&lt;xref href=\"System.Transactions\"&gt;&lt;/xref&gt;</ph> when management of a transaction is escalated to MSDTC.","pos":[0,131],"source":"The permission that is demanded by <xref href=\"System.Transactions\"></xref> when management of a transaction is escalated to MSDTC."},{"content":"This class cannot be inherited.","pos":[132,163]}]}],"pos":[1206,1370],"yaml":true},{"content":"A local transaction only consumes resources from a single durable source or mutilple volatitle sources. A distributed transaction, on the other hand, has to interact with multiple durable resources, potentially across the network. When management of a transaction is escalated to MSDTC, the code that initiated the escalation is verified to have this permission. For more information on security levels, see [Security Trust Levels in Accessing Resources](http://msdn.microsoft.com/en-us/8e45acbc-0d81-4f64-9da7-8f766aebff51). For more information on transaction management escalation, see [Transaction Management Escalation](http://msdn.microsoft.com/en-us/5b87ae58-8ccf-4b9b-9715-41e4aade89b7). The security demand affects the code that initiated the escalation, not necessarily the code that originally created the local transaction.","nodes":[{"pos":[0,835],"content":"A local transaction only consumes resources from a single durable source or mutilple volatitle sources. A distributed transaction, on the other hand, has to interact with multiple durable resources, potentially across the network. When management of a transaction is escalated to MSDTC, the code that initiated the escalation is verified to have this permission. For more information on security levels, see [Security Trust Levels in Accessing Resources](http://msdn.microsoft.com/en-us/8e45acbc-0d81-4f64-9da7-8f766aebff51). For more information on transaction management escalation, see [Transaction Management Escalation](http://msdn.microsoft.com/en-us/5b87ae58-8ccf-4b9b-9715-41e4aade89b7). The security demand affects the code that initiated the escalation, not necessarily the code that originally created the local transaction.","nodes":[{"content":"A local transaction only consumes resources from a single durable source or mutilple volatitle sources.","pos":[0,103]},{"content":"A distributed transaction, on the other hand, has to interact with multiple durable resources, potentially across the network.","pos":[104,230]},{"content":"When management of a transaction is escalated to MSDTC, the code that initiated the escalation is verified to have this permission.","pos":[231,362]},{"content":"For more information on security levels, see <bpt id=\"p1\">[</bpt>Security Trust Levels in Accessing Resources<ept id=\"p1\">](http://msdn.microsoft.com/en-us/8e45acbc-0d81-4f64-9da7-8f766aebff51)</ept>.","pos":[363,525],"source":" For more information on security levels, see [Security Trust Levels in Accessing Resources](http://msdn.microsoft.com/en-us/8e45acbc-0d81-4f64-9da7-8f766aebff51)."},{"content":"For more information on transaction management escalation, see <bpt id=\"p1\">[</bpt>Transaction Management Escalation<ept id=\"p1\">](http://msdn.microsoft.com/en-us/5b87ae58-8ccf-4b9b-9715-41e4aade89b7)</ept>.","pos":[526,695],"source":" For more information on transaction management escalation, see [Transaction Management Escalation](http://msdn.microsoft.com/en-us/5b87ae58-8ccf-4b9b-9715-41e4aade89b7)."},{"content":"The security demand affects the code that initiated the escalation, not necessarily the code that originally created the local transaction.","pos":[696,835]}]}],"pos":[1381,2217],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Transactions.DistributedTransactionPermission\"></xref> class.","nodes":[{"pos":[0,114],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Transactions.DistributedTransactionPermission\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Transactions.DistributedTransactionPermission\"></xref> class."}],"pos":[4982,5097],"yaml":true},{"content":"One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values.","nodes":[{"pos":[0,83],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values."}],"pos":[5320,5404],"yaml":true},{"content":"Creates and returns an identical copy of the current permission.","nodes":[{"pos":[0,64],"content":"Creates and returns an identical copy of the current permission.","nodes":[{"content":"Creates and returns an identical copy of the current permission.","pos":[0,64]}]}],"pos":[6520,6585],"yaml":true},{"content":"A copy of the current permission.","nodes":[{"pos":[0,33],"content":"A copy of the current permission.","nodes":[{"content":"A copy of the current permission.","pos":[0,33]}]}],"pos":[6751,6785],"yaml":true},{"content":"Reconstructs a permission with a specified state from an XML encoding.","nodes":[{"pos":[0,70],"content":"Reconstructs a permission with a specified state from an XML encoding.","nodes":[{"content":"Reconstructs a permission with a specified state from an XML encoding.","pos":[0,70]}]}],"pos":[8062,8133],"yaml":true},{"content":"The XML encoding used to reconstruct the permission.","nodes":[{"pos":[0,52],"content":"The XML encoding used to reconstruct the permission.","nodes":[{"content":"The XML encoding used to reconstruct the permission.","pos":[0,52]}]}],"pos":[8341,8394],"yaml":true},{"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","nodes":[{"pos":[0,113],"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","nodes":[{"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","pos":[0,113]}]}],"pos":[9662,9776],"yaml":true},{"content":"A permission to intersect with the current permission. It must be the same type as the current permission.","nodes":[{"pos":[0,106],"content":"A permission to intersect with the current permission. It must be the same type as the current permission.","nodes":[{"content":"A permission to intersect with the current permission. It must be the same type as the current permission.","pos":[0,106],"nodes":[{"content":"A permission to intersect with the current permission.","pos":[0,54]},{"content":"It must be the same type as the current permission.","pos":[55,106]}]}]}],"pos":[9983,10090],"yaml":true},{"content":"A new permission that represents the intersection of the current permission and the specified permission. This new permission is `null` if the intersection is empty.","nodes":[{"pos":[0,165],"content":"A new permission that represents the intersection of the current permission and the specified permission. This new permission is `null` if the intersection is empty.","nodes":[{"content":"A new permission that represents the intersection of the current permission and the specified permission.","pos":[0,105]},{"content":"This new permission is <ph id=\"ph1\">`null`</ph> if the intersection is empty.","pos":[106,165],"source":" This new permission is `null` if the intersection is empty."}]}],"pos":[10161,10327],"yaml":true},{"content":"Returns a value that indicates whether the current permission is a subset of the specified permission.","nodes":[{"pos":[0,102],"content":"Returns a value that indicates whether the current permission is a subset of the specified permission.","nodes":[{"content":"Returns a value that indicates whether the current permission is a subset of the specified permission.","pos":[0,102]}]}],"pos":[11603,11706],"yaml":true},{"content":"A permission to test for the subset relationship. This permission must be the same type as the current permission.","nodes":[{"pos":[0,114],"content":"A permission to test for the subset relationship. This permission must be the same type as the current permission.","nodes":[{"content":"A permission to test for the subset relationship. This permission must be the same type as the current permission.","pos":[0,114],"nodes":[{"content":"A permission to test for the subset relationship.","pos":[0,49]},{"content":"This permission must be the same type as the current permission.","pos":[50,114]}]}]}],"pos":[11891,12006],"yaml":true},{"content":"`true` if the current <xref href=\"System.Security.IPermission\"></xref> is a subset of the specified <xref href=\"System.Security.IPermission\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,169],"content":"<ph id=\"ph1\">`true`</ph> if the current <ph id=\"ph2\">&lt;xref href=\"System.Security.IPermission\"&gt;&lt;/xref&gt;</ph> is a subset of the specified <ph id=\"ph3\">&lt;xref href=\"System.Security.IPermission\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the current <xref href=\"System.Security.IPermission\"></xref> is a subset of the specified <xref href=\"System.Security.IPermission\"></xref>; otherwise, `false`."}],"pos":[12064,12236],"yaml":true},{"content":"Returns a value that indicates whether unrestricted access to the resource that is protected by the current permission is allowed.","nodes":[{"pos":[0,130],"content":"Returns a value that indicates whether unrestricted access to the resource that is protected by the current permission is allowed.","nodes":[{"content":"Returns a value that indicates whether unrestricted access to the resource that is protected by the current permission is allowed.","pos":[0,130]}]}],"pos":[13417,13548],"yaml":true},{"content":"`true` if unrestricted use of the resource protected by the permission is allowed; otherwise, `false`.","nodes":[{"pos":[0,102],"content":"<ph id=\"ph1\">`true`</ph> if unrestricted use of the resource protected by the permission is allowed; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if unrestricted use of the resource protected by the permission is allowed; otherwise, `false`."}],"pos":[13679,13784],"yaml":true},{"content":"Creates an XML encoding of the security object and its current state.","nodes":[{"pos":[0,69],"content":"Creates an XML encoding of the security object and its current state.","nodes":[{"content":"Creates an XML encoding of the security object and its current state.","pos":[0,69]}]}],"pos":[14915,14985],"yaml":true},{"content":"A <xref href=\"System.Security.SecurityElement\"></xref> that contains the XML encoding of the security object, including any state information.","nodes":[{"pos":[0,142],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.SecurityElement\"&gt;&lt;/xref&gt;</ph> that contains the XML encoding of the security object, including any state information.","source":"A <xref href=\"System.Security.SecurityElement\"></xref> that contains the XML encoding of the security object, including any state information."}],"pos":[15160,15303],"yaml":true},{"content":"Creates a permission that is the union of the current permission and the specified permission.","nodes":[{"pos":[0,94],"content":"Creates a permission that is the union of the current permission and the specified permission.","nodes":[{"content":"Creates a permission that is the union of the current permission and the specified permission.","pos":[0,94]}]}],"pos":[16545,16640],"yaml":true},{"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","nodes":[{"pos":[0,107],"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","nodes":[{"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","pos":[0,107],"nodes":[{"content":"A permission to combine with the current permission.","pos":[0,52]},{"content":"It must be of the same type as the current permission.","pos":[53,107]}]}]}],"pos":[16843,16951],"yaml":true},{"content":"An <xref href=\"System.Security.IPermission\"></xref> that represents the union of the current permission and the specified permission.","nodes":[{"pos":[0,133],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Security.IPermission\"&gt;&lt;/xref&gt;</ph> that represents the union of the current permission and the specified permission.","source":"An <xref href=\"System.Security.IPermission\"></xref> that represents the union of the current permission and the specified permission."}],"pos":[17022,17156],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Transactions.DistributedTransactionPermission\n  commentId: T:System.Transactions.DistributedTransactionPermission\n  id: DistributedTransactionPermission\n  children:\n  - System.Transactions.DistributedTransactionPermission.#ctor(System.Security.Permissions.PermissionState)\n  - System.Transactions.DistributedTransactionPermission.Copy\n  - System.Transactions.DistributedTransactionPermission.FromXml(System.Security.SecurityElement)\n  - System.Transactions.DistributedTransactionPermission.Intersect(System.Security.IPermission)\n  - System.Transactions.DistributedTransactionPermission.IsSubsetOf(System.Security.IPermission)\n  - System.Transactions.DistributedTransactionPermission.IsUnrestricted\n  - System.Transactions.DistributedTransactionPermission.ToXml\n  - System.Transactions.DistributedTransactionPermission.Union(System.Security.IPermission)\n  langs:\n  - csharp\n  name: DistributedTransactionPermission\n  nameWithType: DistributedTransactionPermission\n  fullName: System.Transactions.DistributedTransactionPermission\n  type: Class\n  assemblies:\n  - System.Transactions\n  - System.Security.Permissions\n  namespace: System.Transactions\n  summary: The permission that is demanded by <xref href=\"System.Transactions\"></xref> when management of a transaction is escalated to MSDTC. This class cannot be inherited.\n  remarks: A local transaction only consumes resources from a single durable source or mutilple volatitle sources. A distributed transaction, on the other hand, has to interact with multiple durable resources, potentially across the network. When management of a transaction is escalated to MSDTC, the code that initiated the escalation is verified to have this permission. For more information on security levels, see [Security Trust Levels in Accessing Resources](http://msdn.microsoft.com/en-us/8e45acbc-0d81-4f64-9da7-8f766aebff51). For more information on transaction management escalation, see [Transaction Management Escalation](http://msdn.microsoft.com/en-us/5b87ae58-8ccf-4b9b-9715-41e4aade89b7). The security demand affects the code that initiated the escalation, not necessarily the code that originally created the local transaction.\n  syntax:\n    content: 'public sealed class DistributedTransactionPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission'\n  inheritance:\n  - System.Object\n  - System.Security.CodeAccessPermission\n  implements:\n  - System.Security.Permissions.IUnrestrictedPermission\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Security.CodeAccessPermission.Assert\n  - System.Security.CodeAccessPermission.Demand\n  - System.Security.CodeAccessPermission.Deny\n  - System.Security.CodeAccessPermission.Equals(System.Object)\n  - System.Security.CodeAccessPermission.GetHashCode\n  - System.Security.CodeAccessPermission.PermitOnly\n  - System.Security.CodeAccessPermission.RevertAll\n  - System.Security.CodeAccessPermission.RevertAssert\n  - System.Security.CodeAccessPermission.RevertDeny\n  - System.Security.CodeAccessPermission.RevertPermitOnly\n  - System.Security.CodeAccessPermission.System#Security#IPermission#Demand\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly\n  - System.Security.CodeAccessPermission.ToString\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DistributedTransactionPermission.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.DistributedTransactionPermission.#ctor(System.Security.Permissions.PermissionState)\n  commentId: M:System.Transactions.DistributedTransactionPermission.#ctor(System.Security.Permissions.PermissionState)\n  id: '#ctor(System.Security.Permissions.PermissionState)'\n  parent: System.Transactions.DistributedTransactionPermission\n  langs:\n  - csharp\n  name: DistributedTransactionPermission(PermissionState)\n  nameWithType: DistributedTransactionPermission.DistributedTransactionPermission(PermissionState)\n  fullName: DistributedTransactionPermission.DistributedTransactionPermission(PermissionState)\n  type: Constructor\n  assemblies:\n  - System.Transactions\n  - System.Security.Permissions\n  namespace: System.Transactions\n  summary: Initializes a new instance of the <xref href=\"System.Transactions.DistributedTransactionPermission\"></xref> class.\n  syntax:\n    content: public DistributedTransactionPermission (System.Security.Permissions.PermissionState state);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> values.\n  overload: System.Transactions.DistributedTransactionPermission.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DistributedTransactionPermission.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.DistributedTransactionPermission.Copy\n  commentId: M:System.Transactions.DistributedTransactionPermission.Copy\n  id: Copy\n  parent: System.Transactions.DistributedTransactionPermission\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: DistributedTransactionPermission.Copy()\n  fullName: DistributedTransactionPermission.Copy()\n  type: Method\n  assemblies:\n  - System.Transactions\n  - System.Security.Permissions\n  namespace: System.Transactions\n  summary: Creates and returns an identical copy of the current permission.\n  syntax:\n    content: public override System.Security.IPermission Copy ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A copy of the current permission.\n  overload: System.Transactions.DistributedTransactionPermission.Copy*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DistributedTransactionPermission.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.DistributedTransactionPermission.FromXml(System.Security.SecurityElement)\n  commentId: M:System.Transactions.DistributedTransactionPermission.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Transactions.DistributedTransactionPermission\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: DistributedTransactionPermission.FromXml(SecurityElement)\n  fullName: DistributedTransactionPermission.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - System.Transactions\n  - System.Security.Permissions\n  namespace: System.Transactions\n  summary: Reconstructs a permission with a specified state from an XML encoding.\n  syntax:\n    content: public override void FromXml (System.Security.SecurityElement securityElement);\n    parameters:\n    - id: securityElement\n      type: System.Security.SecurityElement\n      description: The XML encoding used to reconstruct the permission.\n  overload: System.Transactions.DistributedTransactionPermission.FromXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DistributedTransactionPermission.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.DistributedTransactionPermission.Intersect(System.Security.IPermission)\n  commentId: M:System.Transactions.DistributedTransactionPermission.Intersect(System.Security.IPermission)\n  id: Intersect(System.Security.IPermission)\n  parent: System.Transactions.DistributedTransactionPermission\n  langs:\n  - csharp\n  name: Intersect(IPermission)\n  nameWithType: DistributedTransactionPermission.Intersect(IPermission)\n  fullName: DistributedTransactionPermission.Intersect(IPermission)\n  type: Method\n  assemblies:\n  - System.Transactions\n  - System.Security.Permissions\n  namespace: System.Transactions\n  summary: Creates and returns a permission that is the intersection of the current permission and the specified permission.\n  syntax:\n    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to intersect with the current permission. It must be the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the intersection of the current permission and the specified permission. This new permission is `null` if the intersection is empty.\n  overload: System.Transactions.DistributedTransactionPermission.Intersect*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DistributedTransactionPermission.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.DistributedTransactionPermission.IsSubsetOf(System.Security.IPermission)\n  commentId: M:System.Transactions.DistributedTransactionPermission.IsSubsetOf(System.Security.IPermission)\n  id: IsSubsetOf(System.Security.IPermission)\n  parent: System.Transactions.DistributedTransactionPermission\n  langs:\n  - csharp\n  name: IsSubsetOf(IPermission)\n  nameWithType: DistributedTransactionPermission.IsSubsetOf(IPermission)\n  fullName: DistributedTransactionPermission.IsSubsetOf(IPermission)\n  type: Method\n  assemblies:\n  - System.Transactions\n  - System.Security.Permissions\n  namespace: System.Transactions\n  summary: Returns a value that indicates whether the current permission is a subset of the specified permission.\n  syntax:\n    content: public override bool IsSubsetOf (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to test for the subset relationship. This permission must be the same type as the current permission.\n    return:\n      type: System.Boolean\n      description: '`true` if the current <xref href=\"System.Security.IPermission\"></xref> is a subset of the specified <xref href=\"System.Security.IPermission\"></xref>; otherwise, `false`.'\n  overload: System.Transactions.DistributedTransactionPermission.IsSubsetOf*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DistributedTransactionPermission.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.DistributedTransactionPermission.IsUnrestricted\n  commentId: M:System.Transactions.DistributedTransactionPermission.IsUnrestricted\n  id: IsUnrestricted\n  parent: System.Transactions.DistributedTransactionPermission\n  langs:\n  - csharp\n  name: IsUnrestricted()\n  nameWithType: DistributedTransactionPermission.IsUnrestricted()\n  fullName: DistributedTransactionPermission.IsUnrestricted()\n  type: Method\n  assemblies:\n  - System.Transactions\n  - System.Security.Permissions\n  namespace: System.Transactions\n  summary: Returns a value that indicates whether unrestricted access to the resource that is protected by the current permission is allowed.\n  syntax:\n    content: public bool IsUnrestricted ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if unrestricted use of the resource protected by the permission is allowed; otherwise, `false`.'\n  overload: System.Transactions.DistributedTransactionPermission.IsUnrestricted*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DistributedTransactionPermission.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.DistributedTransactionPermission.ToXml\n  commentId: M:System.Transactions.DistributedTransactionPermission.ToXml\n  id: ToXml\n  parent: System.Transactions.DistributedTransactionPermission\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: DistributedTransactionPermission.ToXml()\n  fullName: DistributedTransactionPermission.ToXml()\n  type: Method\n  assemblies:\n  - System.Transactions\n  - System.Security.Permissions\n  namespace: System.Transactions\n  summary: Creates an XML encoding of the security object and its current state.\n  syntax:\n    content: public override System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: A <xref href=\"System.Security.SecurityElement\"></xref> that contains the XML encoding of the security object, including any state information.\n  overload: System.Transactions.DistributedTransactionPermission.ToXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DistributedTransactionPermission.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.DistributedTransactionPermission.Union(System.Security.IPermission)\n  commentId: M:System.Transactions.DistributedTransactionPermission.Union(System.Security.IPermission)\n  id: Union(System.Security.IPermission)\n  parent: System.Transactions.DistributedTransactionPermission\n  langs:\n  - csharp\n  name: Union(IPermission)\n  nameWithType: DistributedTransactionPermission.Union(IPermission)\n  fullName: DistributedTransactionPermission.Union(IPermission)\n  type: Method\n  assemblies:\n  - System.Transactions\n  - System.Security.Permissions\n  namespace: System.Transactions\n  summary: Creates a permission that is the union of the current permission and the specified permission.\n  syntax:\n    content: public override System.Security.IPermission Union (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to combine with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: An <xref href=\"System.Security.IPermission\"></xref> that represents the union of the current permission and the specified permission.\n  overload: System.Transactions.DistributedTransactionPermission.Union*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DistributedTransactionPermission.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\nreferences:\n- uid: System.Security.CodeAccessPermission\n  parent: System.Security\n  isExternal: false\n  name: CodeAccessPermission\n  nameWithType: CodeAccessPermission\n  fullName: System.Security.CodeAccessPermission\n- uid: System.Transactions.DistributedTransactionPermission.#ctor(System.Security.Permissions.PermissionState)\n  parent: System.Transactions.DistributedTransactionPermission\n  isExternal: false\n  name: DistributedTransactionPermission(PermissionState)\n  nameWithType: DistributedTransactionPermission.DistributedTransactionPermission(PermissionState)\n  fullName: DistributedTransactionPermission.DistributedTransactionPermission(PermissionState)\n- uid: System.Security.Permissions.PermissionState\n  parent: System.Security.Permissions\n  isExternal: false\n  name: PermissionState\n  nameWithType: PermissionState\n  fullName: System.Security.Permissions.PermissionState\n- uid: System.Transactions.DistributedTransactionPermission.Copy\n  parent: System.Transactions.DistributedTransactionPermission\n  isExternal: false\n  name: Copy()\n  nameWithType: DistributedTransactionPermission.Copy()\n  fullName: DistributedTransactionPermission.Copy()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Transactions.DistributedTransactionPermission.FromXml(System.Security.SecurityElement)\n  parent: System.Transactions.DistributedTransactionPermission\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: DistributedTransactionPermission.FromXml(SecurityElement)\n  fullName: DistributedTransactionPermission.FromXml(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Transactions.DistributedTransactionPermission.Intersect(System.Security.IPermission)\n  parent: System.Transactions.DistributedTransactionPermission\n  isExternal: false\n  name: Intersect(IPermission)\n  nameWithType: DistributedTransactionPermission.Intersect(IPermission)\n  fullName: DistributedTransactionPermission.Intersect(IPermission)\n- uid: System.Transactions.DistributedTransactionPermission.IsSubsetOf(System.Security.IPermission)\n  parent: System.Transactions.DistributedTransactionPermission\n  isExternal: false\n  name: IsSubsetOf(IPermission)\n  nameWithType: DistributedTransactionPermission.IsSubsetOf(IPermission)\n  fullName: DistributedTransactionPermission.IsSubsetOf(IPermission)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Transactions.DistributedTransactionPermission.IsUnrestricted\n  parent: System.Transactions.DistributedTransactionPermission\n  isExternal: false\n  name: IsUnrestricted()\n  nameWithType: DistributedTransactionPermission.IsUnrestricted()\n  fullName: DistributedTransactionPermission.IsUnrestricted()\n- uid: System.Transactions.DistributedTransactionPermission.ToXml\n  parent: System.Transactions.DistributedTransactionPermission\n  isExternal: false\n  name: ToXml()\n  nameWithType: DistributedTransactionPermission.ToXml()\n  fullName: DistributedTransactionPermission.ToXml()\n- uid: System.Transactions.DistributedTransactionPermission.Union(System.Security.IPermission)\n  parent: System.Transactions.DistributedTransactionPermission\n  isExternal: false\n  name: Union(IPermission)\n  nameWithType: DistributedTransactionPermission.Union(IPermission)\n  fullName: DistributedTransactionPermission.Union(IPermission)\n- uid: System.Transactions.DistributedTransactionPermission.#ctor*\n  parent: System.Transactions.DistributedTransactionPermission\n  isExternal: false\n  name: DistributedTransactionPermission\n  nameWithType: DistributedTransactionPermission.DistributedTransactionPermission\n  fullName: DistributedTransactionPermission.DistributedTransactionPermission\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DistributedTransactionPermission.xml\n- uid: System.Transactions.DistributedTransactionPermission.Copy*\n  parent: System.Transactions.DistributedTransactionPermission\n  isExternal: false\n  name: Copy\n  nameWithType: DistributedTransactionPermission.Copy\n  fullName: DistributedTransactionPermission.Copy\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DistributedTransactionPermission.xml\n- uid: System.Transactions.DistributedTransactionPermission.FromXml*\n  parent: System.Transactions.DistributedTransactionPermission\n  isExternal: false\n  name: FromXml\n  nameWithType: DistributedTransactionPermission.FromXml\n  fullName: DistributedTransactionPermission.FromXml\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DistributedTransactionPermission.xml\n- uid: System.Transactions.DistributedTransactionPermission.Intersect*\n  parent: System.Transactions.DistributedTransactionPermission\n  isExternal: false\n  name: Intersect\n  nameWithType: DistributedTransactionPermission.Intersect\n  fullName: DistributedTransactionPermission.Intersect\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DistributedTransactionPermission.xml\n- uid: System.Transactions.DistributedTransactionPermission.IsSubsetOf*\n  parent: System.Transactions.DistributedTransactionPermission\n  isExternal: false\n  name: IsSubsetOf\n  nameWithType: DistributedTransactionPermission.IsSubsetOf\n  fullName: DistributedTransactionPermission.IsSubsetOf\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DistributedTransactionPermission.xml\n- uid: System.Transactions.DistributedTransactionPermission.IsUnrestricted*\n  parent: System.Transactions.DistributedTransactionPermission\n  isExternal: false\n  name: IsUnrestricted\n  nameWithType: DistributedTransactionPermission.IsUnrestricted\n  fullName: DistributedTransactionPermission.IsUnrestricted\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DistributedTransactionPermission.xml\n- uid: System.Transactions.DistributedTransactionPermission.ToXml*\n  parent: System.Transactions.DistributedTransactionPermission\n  isExternal: false\n  name: ToXml\n  nameWithType: DistributedTransactionPermission.ToXml\n  fullName: DistributedTransactionPermission.ToXml\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DistributedTransactionPermission.xml\n- uid: System.Transactions.DistributedTransactionPermission.Union*\n  parent: System.Transactions.DistributedTransactionPermission\n  isExternal: false\n  name: Union\n  nameWithType: DistributedTransactionPermission.Union\n  fullName: DistributedTransactionPermission.Union\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DistributedTransactionPermission.xml\n- uid: System.Security.CodeAccessPermission.Equals(System.Object)\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: CodeAccessPermission.Equals(Object)\n  fullName: CodeAccessPermission.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Security.CodeAccessPermission.GetHashCode\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: CodeAccessPermission.GetHashCode()\n  fullName: CodeAccessPermission.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Security.CodeAccessPermission.ToString\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: ToString()\n  nameWithType: CodeAccessPermission.ToString()\n  fullName: CodeAccessPermission.ToString()\n- uid: System.Security.CodeAccessPermission.Assert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Assert()\n  nameWithType: CodeAccessPermission.Assert()\n  fullName: CodeAccessPermission.Assert()\n- uid: System.Security.CodeAccessPermission.Demand\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Demand()\n  nameWithType: CodeAccessPermission.Demand()\n  fullName: CodeAccessPermission.Demand()\n- uid: System.Security.CodeAccessPermission.Deny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Deny()\n  nameWithType: CodeAccessPermission.Deny()\n  fullName: CodeAccessPermission.Deny()\n- uid: System.Security.CodeAccessPermission.PermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: PermitOnly()\n  nameWithType: CodeAccessPermission.PermitOnly()\n  fullName: CodeAccessPermission.PermitOnly()\n- uid: System.Security.CodeAccessPermission.RevertAll\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertAll()\n  nameWithType: CodeAccessPermission.RevertAll()\n  fullName: CodeAccessPermission.RevertAll()\n- uid: System.Security.CodeAccessPermission.RevertAssert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertAssert()\n  nameWithType: CodeAccessPermission.RevertAssert()\n  fullName: CodeAccessPermission.RevertAssert()\n- uid: System.Security.CodeAccessPermission.RevertDeny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertDeny()\n  nameWithType: CodeAccessPermission.RevertDeny()\n  fullName: CodeAccessPermission.RevertDeny()\n- uid: System.Security.CodeAccessPermission.RevertPermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertPermitOnly()\n  nameWithType: CodeAccessPermission.RevertPermitOnly()\n  fullName: CodeAccessPermission.RevertPermitOnly()\n- uid: System.Security.CodeAccessPermission.System#Security#IPermission#Demand\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IPermission.Demand()\n  nameWithType: CodeAccessPermission.IPermission.Demand()\n  fullName: CodeAccessPermission.IPermission.Demand()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.Assert()\n  nameWithType: CodeAccessPermission.IStackWalk.Assert()\n  fullName: CodeAccessPermission.IStackWalk.Assert()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.Demand()\n  nameWithType: CodeAccessPermission.IStackWalk.Demand()\n  fullName: CodeAccessPermission.IStackWalk.Demand()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.Deny()\n  nameWithType: CodeAccessPermission.IStackWalk.Deny()\n  fullName: CodeAccessPermission.IStackWalk.Deny()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.PermitOnly()\n  nameWithType: CodeAccessPermission.IStackWalk.PermitOnly()\n  fullName: CodeAccessPermission.IStackWalk.PermitOnly()\n- uid: System.Security.Permissions.IUnrestrictedPermission\n  parent: System.Security.Permissions\n  isExternal: false\n  name: IUnrestrictedPermission\n  nameWithType: IUnrestrictedPermission\n  fullName: System.Security.Permissions.IUnrestrictedPermission\n"}