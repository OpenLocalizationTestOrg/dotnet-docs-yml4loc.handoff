### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Composition.Registration.PartBuilder
  commentId: T:System.ComponentModel.Composition.Registration.PartBuilder
  id: PartBuilder
  children:
  - System.ComponentModel.Composition.Registration.PartBuilder.AddMetadata(System.String,System.Func{System.Type,System.Object})
  - System.ComponentModel.Composition.Registration.PartBuilder.AddMetadata(System.String,System.Object)
  - System.ComponentModel.Composition.Registration.PartBuilder.Export
  - System.ComponentModel.Composition.Registration.PartBuilder.Export(System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})
  - System.ComponentModel.Composition.Registration.PartBuilder.Export``1
  - System.ComponentModel.Composition.Registration.PartBuilder.Export``1(System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})
  - System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces
  - System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces(System.Predicate{System.Type})
  - System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces(System.Predicate{System.Type},System.Action{System.Type,System.ComponentModel.Composition.Registration.ExportBuilder})
  - System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ExportBuilder})
  - System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties(System.Predicate{System.Reflection.PropertyInfo})
  - System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties``1(System.Predicate{System.Reflection.PropertyInfo})
  - System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties``1(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ExportBuilder})
  - System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties(System.Predicate{System.Reflection.PropertyInfo})
  - System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ImportBuilder})
  - System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties``1(System.Predicate{System.Reflection.PropertyInfo})
  - System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties``1(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ImportBuilder})
  - System.ComponentModel.Composition.Registration.PartBuilder.SelectConstructor(System.Func{System.Reflection.ConstructorInfo[],System.Reflection.ConstructorInfo})
  - System.ComponentModel.Composition.Registration.PartBuilder.SelectConstructor(System.Func{System.Reflection.ConstructorInfo[],System.Reflection.ConstructorInfo},System.Action{System.Reflection.ParameterInfo,System.ComponentModel.Composition.Registration.ImportBuilder})
  - System.ComponentModel.Composition.Registration.PartBuilder.SetCreationPolicy(System.ComponentModel.Composition.CreationPolicy)
  langs:
  - csharp
  name: PartBuilder
  nameWithType: PartBuilder
  fullName: System.ComponentModel.Composition.Registration.PartBuilder
  type: Class
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: Represents a rule for decorating a set of matching types with Managed Extensibility Framework (MEF) attributes.
  syntax:
    content: public class PartBuilder
  inheritance:
  - System.Object
  derivedClasses:
  - System.ComponentModel.Composition.Registration.PartBuilder`1
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.ComponentModel.Composition.Registration.PartBuilder.AddMetadata(System.String,System.Func{System.Type,System.Object})
  commentId: M:System.ComponentModel.Composition.Registration.PartBuilder.AddMetadata(System.String,System.Func{System.Type,System.Object})
  id: AddMetadata(System.String,System.Func{System.Type,System.Object})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  langs:
  - csharp
  name: AddMetadata(String, Func<Type,Object>)
  nameWithType: PartBuilder.AddMetadata(String, Func<Type,Object>)
  fullName: PartBuilder.AddMetadata(String, Func<Type,Object>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: Adds metadata to the matching types.
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder AddMetadata (string name, Func<Type,object> itemFunc);
    parameters:
    - id: name
      type: System.String
      description: The metadata key.
    - id: itemFunc
      type: System.Func{System.Type,System.Object}
      description: A function that returns the metadata value, given the target type.
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: The current object, to allow chaining.
  overload: System.ComponentModel.Composition.Registration.PartBuilder.AddMetadata*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.ComponentModel.Composition.Registration.PartBuilder.AddMetadata(System.String,System.Object)
  commentId: M:System.ComponentModel.Composition.Registration.PartBuilder.AddMetadata(System.String,System.Object)
  id: AddMetadata(System.String,System.Object)
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  langs:
  - csharp
  name: AddMetadata(String, Object)
  nameWithType: PartBuilder.AddMetadata(String, Object)
  fullName: PartBuilder.AddMetadata(String, Object)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: Adds metadata to the matching types.
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder AddMetadata (string name, object value);
    parameters:
    - id: name
      type: System.String
      description: The metadata key.
    - id: value
      type: System.Object
      description: The metadata value.
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: The current object, to allow chaining.
  overload: System.ComponentModel.Composition.Registration.PartBuilder.AddMetadata*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.ComponentModel.Composition.Registration.PartBuilder.Export
  commentId: M:System.ComponentModel.Composition.Registration.PartBuilder.Export
  id: Export
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  langs:
  - csharp
  name: Export()
  nameWithType: PartBuilder.Export()
  fullName: PartBuilder.Export()
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: Specifies that matching types should be exported.
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder Export ();
    parameters: []
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: The current object, to allow chaining.
  overload: System.ComponentModel.Composition.Registration.PartBuilder.Export*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.ComponentModel.Composition.Registration.PartBuilder.Export(System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})
  commentId: M:System.ComponentModel.Composition.Registration.PartBuilder.Export(System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})
  id: Export(System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  langs:
  - csharp
  name: Export(Action<ExportBuilder>)
  nameWithType: PartBuilder.Export(Action<ExportBuilder>)
  fullName: PartBuilder.Export(Action<ExportBuilder>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: Specifies that matching types should be exported, and provides configuration information for the resulting exports.
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder Export (Action<System.ComponentModel.Composition.Registration.ExportBuilder> exportConfiguration);
    parameters:
    - id: exportConfiguration
      type: System.Action{System.ComponentModel.Composition.Registration.ExportBuilder}
      description: An object that contains configuration information about the export. The default value is `null`.
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: The current object, to allow chaining.
  overload: System.ComponentModel.Composition.Registration.PartBuilder.Export*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.ComponentModel.Composition.Registration.PartBuilder.Export``1
  commentId: M:System.ComponentModel.Composition.Registration.PartBuilder.Export``1
  id: Export``1
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  langs:
  - csharp
  name: Export<T>()
  nameWithType: PartBuilder.Export<T>()
  fullName: PartBuilder.Export<T>()
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: Specifies that matching types should be exported by using the specified contract type.
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder Export<T> ();
    parameters: []
    typeParameters:
    - id: T
      description: The type of contract.
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: The current object, to allow chaining.
  overload: System.ComponentModel.Composition.Registration.PartBuilder.Export``1*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.ComponentModel.Composition.Registration.PartBuilder.Export``1(System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})
  commentId: M:System.ComponentModel.Composition.Registration.PartBuilder.Export``1(System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})
  id: Export``1(System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  langs:
  - csharp
  name: Export<T>(Action<ExportBuilder>)
  nameWithType: PartBuilder.Export<T>(Action<ExportBuilder>)
  fullName: PartBuilder.Export<T>(Action<ExportBuilder>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: Specifies that matching types should be exported by using the specified contract type, and provides configuration information for the resulting exports.
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder Export<T> (Action<System.ComponentModel.Composition.Registration.ExportBuilder> exportConfiguration);
    parameters:
    - id: exportConfiguration
      type: System.Action{System.ComponentModel.Composition.Registration.ExportBuilder}
      description: An object that contains configuration information about the export. The default value is `null`.
    typeParameters:
    - id: T
      description: The type of contract.
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: The current object, to allow chaining.
  overload: System.ComponentModel.Composition.Registration.PartBuilder.Export``1*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces
  commentId: M:System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces
  id: ExportInterfaces
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  langs:
  - csharp
  name: ExportInterfaces()
  nameWithType: PartBuilder.ExportInterfaces()
  fullName: PartBuilder.ExportInterfaces()
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: Specifies that all the interfaces of the matching types should be exported.
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder ExportInterfaces ();
    parameters: []
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: The current object, to allow chaining.
  overload: System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces(System.Predicate{System.Type})
  commentId: M:System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces(System.Predicate{System.Type})
  id: ExportInterfaces(System.Predicate{System.Type})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  langs:
  - csharp
  name: ExportInterfaces(Predicate<Type>)
  nameWithType: PartBuilder.ExportInterfaces(Predicate<Type>)
  fullName: PartBuilder.ExportInterfaces(Predicate<Type>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: Specifies a set of interfaces on the matching types that should be exported.
  remarks: This method will not export <xref:System.IDisposable> or <xref:System.ComponentModel.Composition.IPartImportsSatisfiedNotification> objects.
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder ExportInterfaces (Predicate<Type> interfaceFilter);
    parameters:
    - id: interfaceFilter
      type: System.Predicate{System.Type}
      description: A predicate that specifies a set of interfaces.
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: The current object, to allow chaining.
  overload: System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>interfaceFilter</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces(System.Predicate{System.Type},System.Action{System.Type,System.ComponentModel.Composition.Registration.ExportBuilder})
  commentId: M:System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces(System.Predicate{System.Type},System.Action{System.Type,System.ComponentModel.Composition.Registration.ExportBuilder})
  id: ExportInterfaces(System.Predicate{System.Type},System.Action{System.Type,System.ComponentModel.Composition.Registration.ExportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  langs:
  - csharp
  name: ExportInterfaces(Predicate<Type>, Action<Type,ExportBuilder>)
  nameWithType: PartBuilder.ExportInterfaces(Predicate<Type>, Action<Type,ExportBuilder>)
  fullName: PartBuilder.ExportInterfaces(Predicate<Type>, Action<Type,ExportBuilder>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: Specifies a set of interfaces on the matching types that should be exported, and provides configuration information for the resulting exports.
  remarks: This method will not export <xref:System.IDisposable> or <xref:System.ComponentModel.Composition.IPartImportsSatisfiedNotification> objects.
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder ExportInterfaces (Predicate<Type> interfaceFilter, Action<Type,System.ComponentModel.Composition.Registration.ExportBuilder> exportConfiguration);
    parameters:
    - id: interfaceFilter
      type: System.Predicate{System.Type}
      description: A predicate that specifies a set of interfaces.
    - id: exportConfiguration
      type: System.Action{System.Type,System.ComponentModel.Composition.Registration.ExportBuilder}
      description: An object that contains configuration information about the export. The default value is `null`.
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: The current object, to allow chaining.
  overload: System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>interfaceFilter</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ExportBuilder})
  commentId: M:System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ExportBuilder})
  id: ExportProperties(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ExportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  langs:
  - csharp
  name: ExportProperties(Predicate<PropertyInfo>, Action<PropertyInfo,ExportBuilder>)
  nameWithType: PartBuilder.ExportProperties(Predicate<PropertyInfo>, Action<PropertyInfo,ExportBuilder>)
  fullName: PartBuilder.ExportProperties(Predicate<PropertyInfo>, Action<PropertyInfo,ExportBuilder>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: Specifies a set of properties on the matching types that should be exported, and provides configuration information for those exports.
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder ExportProperties (Predicate<System.Reflection.PropertyInfo> propertyFilter, Action<System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ExportBuilder> exportConfiguration);
    parameters:
    - id: propertyFilter
      type: System.Predicate{System.Reflection.PropertyInfo}
      description: A predicate that specifies a set of properties.
    - id: exportConfiguration
      type: System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ExportBuilder}
      description: An object that contains configuration information about the export. The default value is `null`.
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: The current object, to allow chaining.
  overload: System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>propertyFilter</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties(System.Predicate{System.Reflection.PropertyInfo})
  commentId: M:System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties(System.Predicate{System.Reflection.PropertyInfo})
  id: ExportProperties(System.Predicate{System.Reflection.PropertyInfo})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  langs:
  - csharp
  name: ExportProperties(Predicate<PropertyInfo>)
  nameWithType: PartBuilder.ExportProperties(Predicate<PropertyInfo>)
  fullName: PartBuilder.ExportProperties(Predicate<PropertyInfo>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: Specifies a set of properties that should be exported on the matching types.
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder ExportProperties (Predicate<System.Reflection.PropertyInfo> propertyFilter);
    parameters:
    - id: propertyFilter
      type: System.Predicate{System.Reflection.PropertyInfo}
      description: A predicate that specifies a set of properties.
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: The current object, to allow chaining.
  overload: System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>propertyFilter</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties``1(System.Predicate{System.Reflection.PropertyInfo})
  commentId: M:System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties``1(System.Predicate{System.Reflection.PropertyInfo})
  id: ExportProperties``1(System.Predicate{System.Reflection.PropertyInfo})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  langs:
  - csharp
  name: ExportProperties<T>(Predicate<PropertyInfo>)
  nameWithType: PartBuilder.ExportProperties<T>(Predicate<PropertyInfo>)
  fullName: PartBuilder.ExportProperties<T>(Predicate<PropertyInfo>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: Specifies a set of properties on the matching types that should be exported, by using the specified contract type.
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder ExportProperties<T> (Predicate<System.Reflection.PropertyInfo> propertyFilter);
    parameters:
    - id: propertyFilter
      type: System.Predicate{System.Reflection.PropertyInfo}
      description: A predicate that specifies a set of properties.
    typeParameters:
    - id: T
      description: The type of contract.
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: The current object, to allow chaining.
  overload: System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>propertyFilter</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties``1(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ExportBuilder})
  commentId: M:System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties``1(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ExportBuilder})
  id: ExportProperties``1(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ExportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  langs:
  - csharp
  name: ExportProperties<T>(Predicate<PropertyInfo>, Action<PropertyInfo,ExportBuilder>)
  nameWithType: PartBuilder.ExportProperties<T>(Predicate<PropertyInfo>, Action<PropertyInfo,ExportBuilder>)
  fullName: PartBuilder.ExportProperties<T>(Predicate<PropertyInfo>, Action<PropertyInfo,ExportBuilder>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: Specifies a set of properties on the matching types that should be exported by using the specified contract type, and provides configuration information for the resulting exports.
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder ExportProperties<T> (Predicate<System.Reflection.PropertyInfo> propertyFilter, Action<System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ExportBuilder> exportConfiguration);
    parameters:
    - id: propertyFilter
      type: System.Predicate{System.Reflection.PropertyInfo}
      description: A predicate that specifies a set of properties.
    - id: exportConfiguration
      type: System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ExportBuilder}
      description: An object that contains configuration information about the export. The default value is `null`.
    typeParameters:
    - id: T
      description: The type of contract.
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: The current object, to allow chaining.
  overload: System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>propertyFilter</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties(System.Predicate{System.Reflection.PropertyInfo})
  commentId: M:System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties(System.Predicate{System.Reflection.PropertyInfo})
  id: ImportProperties(System.Predicate{System.Reflection.PropertyInfo})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  langs:
  - csharp
  name: ImportProperties(Predicate<PropertyInfo>)
  nameWithType: PartBuilder.ImportProperties(Predicate<PropertyInfo>)
  fullName: PartBuilder.ImportProperties(Predicate<PropertyInfo>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: Specifies a set of properties on the matching types that should be imported.
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder ImportProperties (Predicate<System.Reflection.PropertyInfo> propertyFilter);
    parameters:
    - id: propertyFilter
      type: System.Predicate{System.Reflection.PropertyInfo}
      description: A predicate that specifies a set of properties.
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: The current object, to allow chaining.
  overload: System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>propertyFilter</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ImportBuilder})
  commentId: M:System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ImportBuilder})
  id: ImportProperties(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ImportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  langs:
  - csharp
  name: ImportProperties(Predicate<PropertyInfo>, Action<PropertyInfo,ImportBuilder>)
  nameWithType: PartBuilder.ImportProperties(Predicate<PropertyInfo>, Action<PropertyInfo,ImportBuilder>)
  fullName: PartBuilder.ImportProperties(Predicate<PropertyInfo>, Action<PropertyInfo,ImportBuilder>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: Specifies a set of properties on the matching types that should be marked as imports, and provides configuration information for the resulting imports.
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder ImportProperties (Predicate<System.Reflection.PropertyInfo> propertyFilter, Action<System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ImportBuilder> importConfiguration);
    parameters:
    - id: propertyFilter
      type: System.Predicate{System.Reflection.PropertyInfo}
      description: A predicate that specifies a set of properties.
    - id: importConfiguration
      type: System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ImportBuilder}
      description: An object that contains configuration information about the import. The default value is `null`.
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: The current object, to allow chaining.
  overload: System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>propertyFilter</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties``1(System.Predicate{System.Reflection.PropertyInfo})
  commentId: M:System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties``1(System.Predicate{System.Reflection.PropertyInfo})
  id: ImportProperties``1(System.Predicate{System.Reflection.PropertyInfo})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  langs:
  - csharp
  name: ImportProperties<T>(Predicate<PropertyInfo>)
  nameWithType: PartBuilder.ImportProperties<T>(Predicate<PropertyInfo>)
  fullName: PartBuilder.ImportProperties<T>(Predicate<PropertyInfo>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: Specifies a set of properties on the matching types that should be marked as imports using the specified contract type.
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder ImportProperties<T> (Predicate<System.Reflection.PropertyInfo> propertyFilter);
    parameters:
    - id: propertyFilter
      type: System.Predicate{System.Reflection.PropertyInfo}
      description: A predicate that specifies a set of properties.
    typeParameters:
    - id: T
      description: The type of contract.
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: The current object, to allow chaining.
  overload: System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>propertyFilter</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties``1(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ImportBuilder})
  commentId: M:System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties``1(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ImportBuilder})
  id: ImportProperties``1(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ImportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  langs:
  - csharp
  name: ImportProperties<T>(Predicate<PropertyInfo>, Action<PropertyInfo,ImportBuilder>)
  nameWithType: PartBuilder.ImportProperties<T>(Predicate<PropertyInfo>, Action<PropertyInfo,ImportBuilder>)
  fullName: PartBuilder.ImportProperties<T>(Predicate<PropertyInfo>, Action<PropertyInfo,ImportBuilder>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: Specifies a set of properties on the matching types that should be marked as imports by using the specified contract type, and provides configuration information for the resulting imports.
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder ImportProperties<T> (Predicate<System.Reflection.PropertyInfo> propertyFilter, Action<System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ImportBuilder> importConfiguration);
    parameters:
    - id: propertyFilter
      type: System.Predicate{System.Reflection.PropertyInfo}
      description: A predicate that specifies a set of properties.
    - id: importConfiguration
      type: System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ImportBuilder}
      description: An object that contains configuration information about the import. The default value is `null`.
    typeParameters:
    - id: T
      description: The type of contract.
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: The current object, to allow chaining.
  overload: System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>propertyFilter</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.ComponentModel.Composition.Registration.PartBuilder.SelectConstructor(System.Func{System.Reflection.ConstructorInfo[],System.Reflection.ConstructorInfo})
  commentId: M:System.ComponentModel.Composition.Registration.PartBuilder.SelectConstructor(System.Func{System.Reflection.ConstructorInfo[],System.Reflection.ConstructorInfo})
  id: SelectConstructor(System.Func{System.Reflection.ConstructorInfo[],System.Reflection.ConstructorInfo})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  langs:
  - csharp
  name: SelectConstructor(Func<ConstructorInfo[],ConstructorInfo>)
  nameWithType: PartBuilder.SelectConstructor(Func<ConstructorInfo[],ConstructorInfo>)
  fullName: PartBuilder.SelectConstructor(Func<ConstructorInfo[],ConstructorInfo>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: Specifies the constructor that matching types should use as an importing constructor.
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder SelectConstructor (Func<System.Reflection.ConstructorInfo[],System.Reflection.ConstructorInfo> constructorFilter);
    parameters:
    - id: constructorFilter
      type: System.Func{System.Reflection.ConstructorInfo[],System.Reflection.ConstructorInfo}
      description: A function that chooses one constructor from a set of constructors.
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: The current object, to allow chaining.
  overload: System.ComponentModel.Composition.Registration.PartBuilder.SelectConstructor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>constructorFilter</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>constructorFilter</code> returns `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>constructorFilter</code> returns a constructor that is not associated with the target type.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.ComponentModel.Composition.Registration.PartBuilder.SelectConstructor(System.Func{System.Reflection.ConstructorInfo[],System.Reflection.ConstructorInfo},System.Action{System.Reflection.ParameterInfo,System.ComponentModel.Composition.Registration.ImportBuilder})
  commentId: M:System.ComponentModel.Composition.Registration.PartBuilder.SelectConstructor(System.Func{System.Reflection.ConstructorInfo[],System.Reflection.ConstructorInfo},System.Action{System.Reflection.ParameterInfo,System.ComponentModel.Composition.Registration.ImportBuilder})
  id: SelectConstructor(System.Func{System.Reflection.ConstructorInfo[],System.Reflection.ConstructorInfo},System.Action{System.Reflection.ParameterInfo,System.ComponentModel.Composition.Registration.ImportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  langs:
  - csharp
  name: SelectConstructor(Func<ConstructorInfo[],ConstructorInfo>, Action<ParameterInfo,ImportBuilder>)
  nameWithType: PartBuilder.SelectConstructor(Func<ConstructorInfo[],ConstructorInfo>, Action<ParameterInfo,ImportBuilder>)
  fullName: PartBuilder.SelectConstructor(Func<ConstructorInfo[],ConstructorInfo>, Action<ParameterInfo,ImportBuilder>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: Specifies the constructor that matching types should use as an importing constructor, and provides configuration information for the resulting import.
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder SelectConstructor (Func<System.Reflection.ConstructorInfo[],System.Reflection.ConstructorInfo> constructorFilter, Action<System.Reflection.ParameterInfo,System.ComponentModel.Composition.Registration.ImportBuilder> importConfiguration);
    parameters:
    - id: constructorFilter
      type: System.Func{System.Reflection.ConstructorInfo[],System.Reflection.ConstructorInfo}
      description: A function that chooses one constructor from a set of constructors.
    - id: importConfiguration
      type: System.Action{System.Reflection.ParameterInfo,System.ComponentModel.Composition.Registration.ImportBuilder}
      description: An object that contains configuration information for the importing constructor. The default is `null`.
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: The current object, to allow chaining.
  overload: System.ComponentModel.Composition.Registration.PartBuilder.SelectConstructor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>constructorFilter</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>constructorFilter</code> returns `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>constructorFilter</code> returns a constructor that is not associated with the target type.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.ComponentModel.Composition.Registration.PartBuilder.SetCreationPolicy(System.ComponentModel.Composition.CreationPolicy)
  commentId: M:System.ComponentModel.Composition.Registration.PartBuilder.SetCreationPolicy(System.ComponentModel.Composition.CreationPolicy)
  id: SetCreationPolicy(System.ComponentModel.Composition.CreationPolicy)
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  langs:
  - csharp
  name: SetCreationPolicy(CreationPolicy)
  nameWithType: PartBuilder.SetCreationPolicy(CreationPolicy)
  fullName: PartBuilder.SetCreationPolicy(CreationPolicy)
  type: Method
  assemblies:
  - System.ComponentModel.Composition.Registration
  namespace: System.ComponentModel.Composition.Registration
  summary: Specifies the creation policy for matching types.
  syntax:
    content: public System.ComponentModel.Composition.Registration.PartBuilder SetCreationPolicy (System.ComponentModel.Composition.CreationPolicy creationPolicy);
    parameters:
    - id: creationPolicy
      type: System.ComponentModel.Composition.CreationPolicy
      description: The creation policy.
    return:
      type: System.ComponentModel.Composition.Registration.PartBuilder
      description: The current object, to allow chaining.
  overload: System.ComponentModel.Composition.Registration.PartBuilder.SetCreationPolicy*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ComponentModel.Composition.Registration.PartBuilder.AddMetadata(System.String,System.Func{System.Type,System.Object})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: AddMetadata(String, Func<Type,Object>)
  nameWithType: PartBuilder.AddMetadata(String, Func<Type,Object>)
  fullName: PartBuilder.AddMetadata(String, Func<Type,Object>)
- uid: System.ComponentModel.Composition.Registration.PartBuilder
  parent: System.ComponentModel.Composition.Registration
  isExternal: false
  name: PartBuilder
  nameWithType: PartBuilder
  fullName: System.ComponentModel.Composition.Registration.PartBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Func`2
  name: Func<T,TResult>
  nameWithType: Func<T,TResult>
  fullName: System.Func<T,TResult>
- uid: System.Type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Func{System.Type,System.Object}
  parent: System
  isExternal: false
  name: Func<Type,Object>
  nameWithType: Func<Type,Object>
  fullName: System.Func<System.Type,System.Object>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Registration.PartBuilder.AddMetadata(System.String,System.Object)
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: AddMetadata(String, Object)
  nameWithType: PartBuilder.AddMetadata(String, Object)
  fullName: PartBuilder.AddMetadata(String, Object)
- uid: System.ComponentModel.Composition.Registration.PartBuilder.Export
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: Export()
  nameWithType: PartBuilder.Export()
  fullName: PartBuilder.Export()
- uid: System.ComponentModel.Composition.Registration.PartBuilder.Export(System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: Export(Action<ExportBuilder>)
  nameWithType: PartBuilder.Export(Action<ExportBuilder>)
  fullName: PartBuilder.Export(Action<ExportBuilder>)
- uid: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
- uid: System.ComponentModel.Composition.Registration.ExportBuilder
  name: ExportBuilder
  nameWithType: ExportBuilder
  fullName: System.ComponentModel.Composition.Registration.ExportBuilder
- uid: System.Action{System.ComponentModel.Composition.Registration.ExportBuilder}
  parent: System
  isExternal: false
  name: Action<ExportBuilder>
  nameWithType: Action<ExportBuilder>
  fullName: System.Action<System.ComponentModel.Composition.Registration.ExportBuilder>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.Composition.Registration.ExportBuilder
    name: ExportBuilder
    nameWithType: ExportBuilder
    fullName: System.ComponentModel.Composition.Registration.ExportBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Registration.PartBuilder.Export``1
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: Export<T>()
  nameWithType: PartBuilder.Export<T>()
  fullName: PartBuilder.Export<T>()
- uid: System.ComponentModel.Composition.Registration.PartBuilder.Export``1(System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: Export<T>(Action<ExportBuilder>)
  nameWithType: PartBuilder.Export<T>(Action<ExportBuilder>)
  fullName: PartBuilder.Export<T>(Action<ExportBuilder>)
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: ExportInterfaces()
  nameWithType: PartBuilder.ExportInterfaces()
  fullName: PartBuilder.ExportInterfaces()
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces(System.Predicate{System.Type})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: ExportInterfaces(Predicate<Type>)
  nameWithType: PartBuilder.ExportInterfaces(Predicate<Type>)
  fullName: PartBuilder.ExportInterfaces(Predicate<Type>)
- uid: System.Predicate`1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
- uid: System.Predicate{System.Type}
  parent: System
  isExternal: false
  name: Predicate<Type>
  nameWithType: Predicate<Type>
  fullName: System.Predicate<System.Type>
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces(System.Predicate{System.Type},System.Action{System.Type,System.ComponentModel.Composition.Registration.ExportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: ExportInterfaces(Predicate<Type>, Action<Type,ExportBuilder>)
  nameWithType: PartBuilder.ExportInterfaces(Predicate<Type>, Action<Type,ExportBuilder>)
  fullName: PartBuilder.ExportInterfaces(Predicate<Type>, Action<Type,ExportBuilder>)
- uid: System.Action`2
  name: Action<T1,T2>
  nameWithType: Action<T1,T2>
  fullName: System.Action<T1,T2>
- uid: System.Action{System.Type,System.ComponentModel.Composition.Registration.ExportBuilder}
  parent: System
  isExternal: false
  name: Action<Type,ExportBuilder>
  nameWithType: Action<Type,ExportBuilder>
  fullName: System.Action<System.Type,System.ComponentModel.Composition.Registration.ExportBuilder>
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.ComponentModel.Composition.Registration.ExportBuilder
    name: ExportBuilder
    nameWithType: ExportBuilder
    fullName: System.ComponentModel.Composition.Registration.ExportBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ExportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: ExportProperties(Predicate<PropertyInfo>, Action<PropertyInfo,ExportBuilder>)
  nameWithType: PartBuilder.ExportProperties(Predicate<PropertyInfo>, Action<PropertyInfo,ExportBuilder>)
  fullName: PartBuilder.ExportProperties(Predicate<PropertyInfo>, Action<PropertyInfo,ExportBuilder>)
- uid: System.Reflection.PropertyInfo
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Predicate{System.Reflection.PropertyInfo}
  parent: System
  isExternal: false
  name: Predicate<PropertyInfo>
  nameWithType: Predicate<PropertyInfo>
  fullName: System.Predicate<System.Reflection.PropertyInfo>
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ExportBuilder}
  parent: System
  isExternal: false
  name: Action<PropertyInfo,ExportBuilder>
  nameWithType: Action<PropertyInfo,ExportBuilder>
  fullName: System.Action<System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ExportBuilder>
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.ComponentModel.Composition.Registration.ExportBuilder
    name: ExportBuilder
    nameWithType: ExportBuilder
    fullName: System.ComponentModel.Composition.Registration.ExportBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties(System.Predicate{System.Reflection.PropertyInfo})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: ExportProperties(Predicate<PropertyInfo>)
  nameWithType: PartBuilder.ExportProperties(Predicate<PropertyInfo>)
  fullName: PartBuilder.ExportProperties(Predicate<PropertyInfo>)
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties``1(System.Predicate{System.Reflection.PropertyInfo})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: ExportProperties<T>(Predicate<PropertyInfo>)
  nameWithType: PartBuilder.ExportProperties<T>(Predicate<PropertyInfo>)
  fullName: PartBuilder.ExportProperties<T>(Predicate<PropertyInfo>)
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties``1(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ExportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: ExportProperties<T>(Predicate<PropertyInfo>, Action<PropertyInfo,ExportBuilder>)
  nameWithType: PartBuilder.ExportProperties<T>(Predicate<PropertyInfo>, Action<PropertyInfo,ExportBuilder>)
  fullName: PartBuilder.ExportProperties<T>(Predicate<PropertyInfo>, Action<PropertyInfo,ExportBuilder>)
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties(System.Predicate{System.Reflection.PropertyInfo})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: ImportProperties(Predicate<PropertyInfo>)
  nameWithType: PartBuilder.ImportProperties(Predicate<PropertyInfo>)
  fullName: PartBuilder.ImportProperties(Predicate<PropertyInfo>)
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ImportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: ImportProperties(Predicate<PropertyInfo>, Action<PropertyInfo,ImportBuilder>)
  nameWithType: PartBuilder.ImportProperties(Predicate<PropertyInfo>, Action<PropertyInfo,ImportBuilder>)
  fullName: PartBuilder.ImportProperties(Predicate<PropertyInfo>, Action<PropertyInfo,ImportBuilder>)
- uid: System.ComponentModel.Composition.Registration.ImportBuilder
  name: ImportBuilder
  nameWithType: ImportBuilder
  fullName: System.ComponentModel.Composition.Registration.ImportBuilder
- uid: System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ImportBuilder}
  parent: System
  isExternal: false
  name: Action<PropertyInfo,ImportBuilder>
  nameWithType: Action<PropertyInfo,ImportBuilder>
  fullName: System.Action<System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ImportBuilder>
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.ComponentModel.Composition.Registration.ImportBuilder
    name: ImportBuilder
    nameWithType: ImportBuilder
    fullName: System.ComponentModel.Composition.Registration.ImportBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties``1(System.Predicate{System.Reflection.PropertyInfo})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: ImportProperties<T>(Predicate<PropertyInfo>)
  nameWithType: PartBuilder.ImportProperties<T>(Predicate<PropertyInfo>)
  fullName: PartBuilder.ImportProperties<T>(Predicate<PropertyInfo>)
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties``1(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ImportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: ImportProperties<T>(Predicate<PropertyInfo>, Action<PropertyInfo,ImportBuilder>)
  nameWithType: PartBuilder.ImportProperties<T>(Predicate<PropertyInfo>, Action<PropertyInfo,ImportBuilder>)
  fullName: PartBuilder.ImportProperties<T>(Predicate<PropertyInfo>, Action<PropertyInfo,ImportBuilder>)
- uid: System.ComponentModel.Composition.Registration.PartBuilder.SelectConstructor(System.Func{System.Reflection.ConstructorInfo[],System.Reflection.ConstructorInfo})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: SelectConstructor(Func<ConstructorInfo[],ConstructorInfo>)
  nameWithType: PartBuilder.SelectConstructor(Func<ConstructorInfo[],ConstructorInfo>)
  fullName: PartBuilder.SelectConstructor(Func<ConstructorInfo[],ConstructorInfo>)
- uid: System.Reflection.ConstructorInfo
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Func{System.Reflection.ConstructorInfo[],System.Reflection.ConstructorInfo}
  parent: System
  isExternal: false
  name: Func<ConstructorInfo[],ConstructorInfo>
  nameWithType: Func<ConstructorInfo[],ConstructorInfo>
  fullName: System.Func<System.Reflection.ConstructorInfo[],System.Reflection.ConstructorInfo>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.ConstructorInfo
    name: ConstructorInfo
    nameWithType: ConstructorInfo
    fullName: System.Reflection.ConstructorInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Reflection.ConstructorInfo
    name: ConstructorInfo
    nameWithType: ConstructorInfo
    fullName: System.Reflection.ConstructorInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Registration.PartBuilder.SelectConstructor(System.Func{System.Reflection.ConstructorInfo[],System.Reflection.ConstructorInfo},System.Action{System.Reflection.ParameterInfo,System.ComponentModel.Composition.Registration.ImportBuilder})
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: SelectConstructor(Func<ConstructorInfo[],ConstructorInfo>, Action<ParameterInfo,ImportBuilder>)
  nameWithType: PartBuilder.SelectConstructor(Func<ConstructorInfo[],ConstructorInfo>, Action<ParameterInfo,ImportBuilder>)
  fullName: PartBuilder.SelectConstructor(Func<ConstructorInfo[],ConstructorInfo>, Action<ParameterInfo,ImportBuilder>)
- uid: System.Reflection.ParameterInfo
  name: ParameterInfo
  nameWithType: ParameterInfo
  fullName: System.Reflection.ParameterInfo
- uid: System.Action{System.Reflection.ParameterInfo,System.ComponentModel.Composition.Registration.ImportBuilder}
  parent: System
  isExternal: false
  name: Action<ParameterInfo,ImportBuilder>
  nameWithType: Action<ParameterInfo,ImportBuilder>
  fullName: System.Action<System.Reflection.ParameterInfo,System.ComponentModel.Composition.Registration.ImportBuilder>
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: System.Reflection.ParameterInfo
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.ComponentModel.Composition.Registration.ImportBuilder
    name: ImportBuilder
    nameWithType: ImportBuilder
    fullName: System.ComponentModel.Composition.Registration.ImportBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Registration.PartBuilder.SetCreationPolicy(System.ComponentModel.Composition.CreationPolicy)
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: SetCreationPolicy(CreationPolicy)
  nameWithType: PartBuilder.SetCreationPolicy(CreationPolicy)
  fullName: PartBuilder.SetCreationPolicy(CreationPolicy)
- uid: System.ComponentModel.Composition.CreationPolicy
  parent: System.ComponentModel.Composition
  isExternal: false
  name: CreationPolicy
  nameWithType: CreationPolicy
  fullName: System.ComponentModel.Composition.CreationPolicy
- uid: System.ComponentModel.Composition.Registration.PartBuilder.AddMetadata*
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: AddMetadata
  nameWithType: PartBuilder.AddMetadata
  fullName: PartBuilder.AddMetadata
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
- uid: System.ComponentModel.Composition.Registration.PartBuilder.Export*
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: Export
  nameWithType: PartBuilder.Export
  fullName: PartBuilder.Export
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
- uid: System.ComponentModel.Composition.Registration.PartBuilder.Export``1*
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: Export<T>
  nameWithType: PartBuilder.Export<T>
  fullName: PartBuilder.Export<T>
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces*
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: ExportInterfaces
  nameWithType: PartBuilder.ExportInterfaces
  fullName: PartBuilder.ExportInterfaces
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties*
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: ExportProperties
  nameWithType: PartBuilder.ExportProperties
  fullName: PartBuilder.ExportProperties
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties``1*
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: ExportProperties<T>
  nameWithType: PartBuilder.ExportProperties<T>
  fullName: PartBuilder.ExportProperties<T>
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties*
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: ImportProperties
  nameWithType: PartBuilder.ImportProperties
  fullName: PartBuilder.ImportProperties
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
- uid: System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties``1*
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: ImportProperties<T>
  nameWithType: PartBuilder.ImportProperties<T>
  fullName: PartBuilder.ImportProperties<T>
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
- uid: System.ComponentModel.Composition.Registration.PartBuilder.SelectConstructor*
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: SelectConstructor
  nameWithType: PartBuilder.SelectConstructor
  fullName: PartBuilder.SelectConstructor
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
- uid: System.ComponentModel.Composition.Registration.PartBuilder.SetCreationPolicy*
  parent: System.ComponentModel.Composition.Registration.PartBuilder
  isExternal: false
  name: SetCreationPolicy
  nameWithType: PartBuilder.SetCreationPolicy
  fullName: PartBuilder.SetCreationPolicy
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Composition.Registration/PartBuilder.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
