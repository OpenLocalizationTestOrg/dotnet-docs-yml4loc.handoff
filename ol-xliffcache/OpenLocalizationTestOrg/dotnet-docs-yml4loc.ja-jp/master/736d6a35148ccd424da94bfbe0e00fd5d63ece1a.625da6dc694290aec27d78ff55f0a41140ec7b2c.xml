{"nodes":[{"content":"Represents a dynamic operation.","nodes":[{"pos":[0,31],"content":"Represents a dynamic operation.","nodes":[{"content":"Represents a dynamic operation.","pos":[0,31]}]}],"pos":[3745,3777],"yaml":true},{"content":"Dispatches to the specific visit method for this node type. For example, <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> calls the <xref href=\"System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)\"></xref>.","nodes":[{"pos":[0,274],"content":"Dispatches to the specific visit method for this node type. For example, <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> calls the <xref href=\"System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)\"></xref>.","nodes":[{"content":"Dispatches to the specific visit method for this node type.","pos":[0,59]},{"content":"For example, <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.MethodCallExpression\"&gt;&lt;/xref&gt;</ph> calls the <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)\"&gt;&lt;/xref&gt;</ph>.","pos":[60,274],"source":" For example, <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> calls the <xref href=\"System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)\"></xref>."}]}],"pos":[45710,45985],"yaml":true},{"content":"This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>. Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class. However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.","nodes":[{"pos":[0,443],"content":"This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>. Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class. However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.","nodes":[{"content":"This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>. Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class. However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.","pos":[0,443],"nodes":[{"content":"This default implementation for <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ExpressionType.Extension&gt;</ph> nodes calls <ph id=\"ph2\">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.","pos":[0,167],"source":"This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>."},{"content":"Override this method to call into a more specific method on a derived visitor class of the <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ExpressionVisitor&gt;</ph> class.","pos":[168,314],"source":" Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class."},{"content":"However, it should still support unknown visitors by calling <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.","pos":[315,443],"source":" However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>."}]}]}],"pos":[45996,46440],"yaml":true,"extradata":"MT"},{"content":"The visitor to visit this node with.","nodes":[{"pos":[0,36],"content":"The visitor to visit this node with.","nodes":[{"content":"The visitor to visit this node with.","pos":[0,36]}]}],"pos":[46684,46721],"yaml":true},{"content":"The result of visiting this node.","nodes":[{"pos":[0,33],"content":"The result of visiting this node.","nodes":[{"content":"The result of visiting this node.","pos":[0,33]}]}],"pos":[46799,46833],"yaml":true},{"content":"Gets the arguments to the dynamic operation.","nodes":[{"pos":[0,44],"content":"Gets the arguments to the dynamic operation.","nodes":[{"content":"Gets the arguments to the dynamic operation.","pos":[0,44]}]}],"pos":[48175,48220],"yaml":true},{"content":"The read-only collections containing the arguments to the dynamic operation.","nodes":[{"pos":[0,76],"content":"The read-only collections containing the arguments to the dynamic operation.","nodes":[{"content":"The read-only collections containing the arguments to the dynamic operation.","pos":[0,76]}]}],"pos":[48484,48561],"yaml":true},{"content":"Gets the <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>, which determines the run-time behavior of the dynamic site.","nodes":[{"pos":[0,137],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph>, which determines the run-time behavior of the dynamic site.","source":"Gets the <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>, which determines the run-time behavior of the dynamic site."}],"pos":[49910,50048],"yaml":true},{"content":"The <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>, which determines the run-time behavior of the dynamic site.","nodes":[{"pos":[0,132],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph>, which determines the run-time behavior of the dynamic site.","source":"The <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>, which determines the run-time behavior of the dynamic site."}],"pos":[50231,50364],"yaml":true},{"content":"Gets the type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.","nodes":[{"pos":[0,104],"content":"Gets the type of the delegate used by the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.CallSite\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>."}],"pos":[51746,51851],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> object representing the type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.","nodes":[{"pos":[0,156],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing the type of the delegate used by the <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSite\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Type\"></xref> object representing the type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>."}],"pos":[51963,52120],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.","nodes":[{"pos":[0,199],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>."}],"pos":[54022,54222],"yaml":true},{"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type.","nodes":[{"pos":[0,166],"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> property of the result is inferred from the types of the arguments and the specified return type.","pos":[0,166],"source":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type."}]}],"pos":[54233,54400],"yaml":true,"extradata":"MT"},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[54758,54804],"yaml":true},{"content":"The result type of the dynamic expression.","nodes":[{"pos":[0,42],"content":"The result type of the dynamic expression.","nodes":[{"content":"The result type of the dynamic expression.","pos":[0,42]}]}],"pos":[54868,54911],"yaml":true},{"content":"The arguments to the dynamic operation.","nodes":[{"pos":[0,39],"content":"The arguments to the dynamic operation.","nodes":[{"content":"The arguments to the dynamic operation.","pos":[0,39]}]}],"pos":[55037,55077],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>,  and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,412],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph>,  and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>,  and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[55162,55575],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.","nodes":[{"pos":[0,199],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>."}],"pos":[57291,57491],"yaml":true},{"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type.","nodes":[{"pos":[0,166],"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> property of the result is inferred from the types of the arguments and the specified return type.","pos":[0,166],"source":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type."}]}],"pos":[57502,57669],"yaml":true,"extradata":"MT"},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[57982,58028],"yaml":true},{"content":"The result type of the dynamic expression.","nodes":[{"pos":[0,42],"content":"The result type of the dynamic expression.","nodes":[{"content":"The result type of the dynamic expression.","pos":[0,42]}]}],"pos":[58092,58135],"yaml":true},{"content":"The first argument to the dynamic operation.","nodes":[{"pos":[0,44],"content":"The first argument to the dynamic operation.","nodes":[{"content":"The first argument to the dynamic operation.","pos":[0,44]}]}],"pos":[58216,58261],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>,  and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,412],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph>,  and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>,  and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[58346,58759],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.","nodes":[{"pos":[0,199],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>."}],"pos":[60509,60709],"yaml":true},{"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type.","nodes":[{"pos":[0,166],"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> property of the result is inferred from the types of the arguments and the specified return type.","pos":[0,166],"source":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type."}]}],"pos":[60720,60887],"yaml":true,"extradata":"MT"},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[61207,61253],"yaml":true},{"content":"The result type of the dynamic expression.","nodes":[{"pos":[0,42],"content":"The result type of the dynamic expression.","nodes":[{"content":"The result type of the dynamic expression.","pos":[0,42]}]}],"pos":[61317,61360],"yaml":true},{"content":"The arguments to the dynamic operation.","nodes":[{"pos":[0,39],"content":"The arguments to the dynamic operation.","nodes":[{"content":"The arguments to the dynamic operation.","pos":[0,39]}]}],"pos":[61448,61488],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,411],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph>, and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[61573,61985],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.","nodes":[{"pos":[0,199],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>."}],"pos":[63864,64064],"yaml":true},{"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type.","nodes":[{"pos":[0,166],"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> property of the result is inferred from the types of the arguments and the specified return type.","pos":[0,166],"source":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type."}]}],"pos":[64075,64242],"yaml":true,"extradata":"MT"},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[64596,64642],"yaml":true},{"content":"The result type of the dynamic expression.","nodes":[{"pos":[0,42],"content":"The result type of the dynamic expression.","nodes":[{"content":"The result type of the dynamic expression.","pos":[0,42]}]}],"pos":[64706,64749],"yaml":true},{"content":"The first argument to the dynamic operation.","nodes":[{"pos":[0,44],"content":"The first argument to the dynamic operation.","nodes":[{"content":"The first argument to the dynamic operation.","pos":[0,44]}]}],"pos":[64830,64875],"yaml":true},{"content":"The second argument to the dynamic operation.","nodes":[{"pos":[0,45],"content":"The second argument to the dynamic operation.","nodes":[{"content":"The second argument to the dynamic operation.","pos":[0,45]}]}],"pos":[64956,65002],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,411],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph>, and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[65087,65499],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.","nodes":[{"pos":[0,199],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>."}],"pos":[67519,67719],"yaml":true},{"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type.","nodes":[{"pos":[0,166],"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> property of the result is inferred from the types of the arguments and the specified return type.","pos":[0,166],"source":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type."}]}],"pos":[67730,67897],"yaml":true,"extradata":"MT"},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[68292,68338],"yaml":true},{"content":"The result type of the dynamic expression.","nodes":[{"pos":[0,42],"content":"The result type of the dynamic expression.","nodes":[{"content":"The result type of the dynamic expression.","pos":[0,42]}]}],"pos":[68402,68445],"yaml":true},{"content":"The first argument to the dynamic operation.","nodes":[{"pos":[0,44],"content":"The first argument to the dynamic operation.","nodes":[{"content":"The first argument to the dynamic operation.","pos":[0,44]}]}],"pos":[68526,68571],"yaml":true},{"content":"The second argument to the dynamic operation.","nodes":[{"pos":[0,45],"content":"The second argument to the dynamic operation.","nodes":[{"content":"The second argument to the dynamic operation.","pos":[0,45]}]}],"pos":[68652,68698],"yaml":true},{"content":"The third argument to the dynamic operation.","nodes":[{"pos":[0,44],"content":"The third argument to the dynamic operation.","nodes":[{"content":"The third argument to the dynamic operation.","pos":[0,44]}]}],"pos":[68779,68824],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,411],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph>, and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[68909,69321],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.","nodes":[{"pos":[0,199],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>."}],"pos":[71460,71660],"yaml":true},{"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type.","nodes":[{"pos":[0,166],"content":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;</ph> property of the result is inferred from the types of the arguments and the specified return type.","pos":[0,166],"source":"The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type."}]}],"pos":[71671,71838],"yaml":true,"extradata":"MT"},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[72274,72320],"yaml":true},{"content":"The result type of the dynamic expression.","nodes":[{"pos":[0,42],"content":"The result type of the dynamic expression.","nodes":[{"content":"The result type of the dynamic expression.","pos":[0,42]}]}],"pos":[72384,72427],"yaml":true},{"content":"The first argument to the dynamic operation.","nodes":[{"pos":[0,44],"content":"The first argument to the dynamic operation.","nodes":[{"content":"The first argument to the dynamic operation.","pos":[0,44]}]}],"pos":[72508,72553],"yaml":true},{"content":"The second argument to the dynamic operation.","nodes":[{"pos":[0,45],"content":"The second argument to the dynamic operation.","nodes":[{"content":"The second argument to the dynamic operation.","pos":[0,45]}]}],"pos":[72634,72680],"yaml":true},{"content":"The third argument to the dynamic operation.","nodes":[{"pos":[0,44],"content":"The third argument to the dynamic operation.","nodes":[{"content":"The third argument to the dynamic operation.","pos":[0,44]}]}],"pos":[72761,72806],"yaml":true},{"content":"The fourth argument to the dynamic operation.","nodes":[{"pos":[0,45],"content":"The fourth argument to the dynamic operation.","nodes":[{"content":"The fourth argument to the dynamic operation.","pos":[0,45]}]}],"pos":[72887,72933],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,411],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph>, and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[73018,73430],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and four arguments.","nodes":[{"pos":[0,218],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph> and four arguments.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and four arguments."}],"pos":[75615,75834],"yaml":true},{"content":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.","nodes":[{"pos":[0,99],"content":"The type of the delegate used by the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.CallSite\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>."}],"pos":[76247,76347],"yaml":true},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[76442,76488],"yaml":true},{"content":"The first argument to the dynamic operation.","nodes":[{"pos":[0,44],"content":"The first argument to the dynamic operation.","nodes":[{"content":"The first argument to the dynamic operation.","pos":[0,44]}]}],"pos":[76569,76614],"yaml":true},{"content":"The second argument to the dynamic operation.","nodes":[{"pos":[0,45],"content":"The second argument to the dynamic operation.","nodes":[{"content":"The second argument to the dynamic operation.","pos":[0,45]}]}],"pos":[76695,76741],"yaml":true},{"content":"The third argument to the dynamic operation.","nodes":[{"pos":[0,44],"content":"The third argument to the dynamic operation.","nodes":[{"content":"The third argument to the dynamic operation.","pos":[0,44]}]}],"pos":[76822,76867],"yaml":true},{"content":"The fourth argument to the dynamic operation.","nodes":[{"pos":[0,45],"content":"The fourth argument to the dynamic operation.","nodes":[{"content":"The fourth argument to the dynamic operation.","pos":[0,45]}]}],"pos":[76948,76994],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,489],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph>, and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[77079,77569],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and three arguments.","nodes":[{"pos":[0,219],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph> and three arguments.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and three arguments."}],"pos":[79617,79837],"yaml":true},{"content":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.","nodes":[{"pos":[0,99],"content":"The type of the delegate used by the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.CallSite\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>."}],"pos":[80209,80309],"yaml":true},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[80404,80450],"yaml":true},{"content":"The first argument to the dynamic operation.","nodes":[{"pos":[0,44],"content":"The first argument to the dynamic operation.","nodes":[{"content":"The first argument to the dynamic operation.","pos":[0,44]}]}],"pos":[80531,80576],"yaml":true},{"content":"The second argument to the dynamic operation.","nodes":[{"pos":[0,45],"content":"The second argument to the dynamic operation.","nodes":[{"content":"The second argument to the dynamic operation.","pos":[0,45]}]}],"pos":[80657,80703],"yaml":true},{"content":"The third argument to the dynamic operation.","nodes":[{"pos":[0,44],"content":"The third argument to the dynamic operation.","nodes":[{"content":"The third argument to the dynamic operation.","pos":[0,44]}]}],"pos":[80784,80829],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,489],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph>, and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[80914,81404],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and two arguments.","nodes":[{"pos":[0,217],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph> and two arguments.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and two arguments."}],"pos":[83311,83529],"yaml":true},{"content":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.","nodes":[{"pos":[0,99],"content":"The type of the delegate used by the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.CallSite\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>."}],"pos":[83860,83960],"yaml":true},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[84055,84101],"yaml":true},{"content":"The first argument to the dynamic operation.","nodes":[{"pos":[0,44],"content":"The first argument to the dynamic operation.","nodes":[{"content":"The first argument to the dynamic operation.","pos":[0,44]}]}],"pos":[84182,84227],"yaml":true},{"content":"The second argument to the dynamic operation.","nodes":[{"pos":[0,45],"content":"The second argument to the dynamic operation.","nodes":[{"content":"The second argument to the dynamic operation.","pos":[0,45]}]}],"pos":[84308,84354],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,489],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph>, and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[84439,84929],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and one argument.","nodes":[{"pos":[0,216],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph> and one argument.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and one argument."}],"pos":[86695,86912],"yaml":true},{"content":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.","nodes":[{"pos":[0,99],"content":"The type of the delegate used by the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.CallSite\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>."}],"pos":[87202,87302],"yaml":true},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[87397,87443],"yaml":true},{"content":"The argument to the dynamic operation.","nodes":[{"pos":[0,38],"content":"The argument to the dynamic operation.","nodes":[{"content":"The argument to the dynamic operation.","pos":[0,38]}]}],"pos":[87524,87563],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,489],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph>, and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[87648,88138],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.","nodes":[{"pos":[0,199],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>."}],"pos":[90063,90263],"yaml":true},{"content":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.","nodes":[{"pos":[0,99],"content":"The type of the delegate used by the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.CallSite\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>."}],"pos":[90598,90698],"yaml":true},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[90793,90839],"yaml":true},{"content":"The arguments to the dynamic operation.","nodes":[{"pos":[0,39],"content":"The arguments to the dynamic operation.","nodes":[{"content":"The arguments to the dynamic operation.","pos":[0,39]}]}],"pos":[90965,91005],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,489],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph>, and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[91090,91580],"yaml":true},{"content":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.","nodes":[{"pos":[0,199],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that represents a dynamic operation bound by the provided <ph id=\"ph2\">&lt;xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>."}],"pos":[93358,93558],"yaml":true},{"content":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.","nodes":[{"pos":[0,99],"content":"The type of the delegate used by the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.CallSite\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>."}],"pos":[93855,93955],"yaml":true},{"content":"The runtime binder for the dynamic operation.","nodes":[{"pos":[0,45],"content":"The runtime binder for the dynamic operation.","nodes":[{"content":"The runtime binder for the dynamic operation.","pos":[0,45]}]}],"pos":[94050,94096],"yaml":true},{"content":"The arguments to the dynamic operation.","nodes":[{"pos":[0,39],"content":"The arguments to the dynamic operation.","nodes":[{"content":"The arguments to the dynamic operation.","pos":[0,39]}]}],"pos":[94184,94224],"yaml":true},{"content":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.","nodes":[{"pos":[0,489],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression\"&gt;&lt;/xref&gt;</ph> that has <ph id=\"ph2\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"&gt;&lt;/xref&gt;</ph> equal to <ph id=\"ph3\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"&gt;&lt;/xref&gt;</ph>, and has the <ph id=\"ph4\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> set to the specified values.","source":"A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values."}],"pos":[94309,94799],"yaml":true},{"content":"Returns the node type of this expression. Extension nodes should return <xref href=\"System.Linq.Expressions.ExpressionType.Extension\"></xref> when overriding this method.","nodes":[{"pos":[0,170],"content":"Returns the node type of this expression. Extension nodes should return <xref href=\"System.Linq.Expressions.ExpressionType.Extension\"></xref> when overriding this method.","nodes":[{"content":"Returns the node type of this expression.","pos":[0,41]},{"content":"Extension nodes should return <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ExpressionType.Extension\"&gt;&lt;/xref&gt;</ph> when overriding this method.","pos":[42,170],"source":" Extension nodes should return <xref href=\"System.Linq.Expressions.ExpressionType.Extension\"></xref> when overriding this method."}]}],"pos":[96140,96311],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> of the expression.","nodes":[{"pos":[0,82],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.ExpressionType\"&gt;&lt;/xref&gt;</ph> of the expression.","source":"The <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> of the expression."}],"pos":[96496,96579],"yaml":true},{"content":"Gets the static type of the expression that this <xref href=\"System.Linq.Expressions.Expression\"></xref> represents.","nodes":[{"pos":[0,116],"content":"Gets the static type of the expression that this <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph> represents.","source":"Gets the static type of the expression that this <xref href=\"System.Linq.Expressions.Expression\"></xref> represents."}],"pos":[97893,98010],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.DynamicExpression.Type\"></xref> that represents the static type of the expression.","nodes":[{"pos":[0,122],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Type\"&gt;&lt;/xref&gt;</ph> that represents the static type of the expression.","source":"The <xref href=\"System.Linq.Expressions.DynamicExpression.Type\"></xref> that represents the static type of the expression."}],"pos":[98123,98246],"yaml":true},{"content":"Compares the value sent to the parameter, <code>arguments</code>, to the `Arguments` property of the current instance of `DynamicExpression`. If the values of the parameter and the property are equal, the current instance is returned. If they are not equal, a new `DynamicExpression` instance is returned that is identical to the current instance except that the `Arguments` property is set to the value of parameter <code>arguments</code>.","nodes":[{"pos":[0,440],"content":"Compares the value sent to the parameter, <code>arguments</code>, to the `Arguments` property of the current instance of `DynamicExpression`. If the values of the parameter and the property are equal, the current instance is returned. If they are not equal, a new `DynamicExpression` instance is returned that is identical to the current instance except that the `Arguments` property is set to the value of parameter <code>arguments</code>.","nodes":[{"content":"Compares the value sent to the parameter, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept>, to the <ph id=\"ph2\">`Arguments`</ph> property of the current instance of <ph id=\"ph3\">`DynamicExpression`</ph>.","pos":[0,141],"source":"Compares the value sent to the parameter, <code>arguments</code>, to the `Arguments` property of the current instance of `DynamicExpression`."},{"content":"If the values of the parameter and the property are equal, the current instance is returned.","pos":[142,234]},{"content":"If they are not equal, a new <ph id=\"ph1\">`DynamicExpression`</ph> instance is returned that is identical to the current instance except that the <ph id=\"ph2\">`Arguments`</ph> property is set to the value of parameter <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">arguments</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[235,440],"source":" If they are not equal, a new `DynamicExpression` instance is returned that is identical to the current instance except that the `Arguments` property is set to the value of parameter <code>arguments</code>."}]}],"pos":[99891,100332],"yaml":true},{"content":"The <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> property of the result.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"&gt;&lt;/xref&gt;</ph> property of the result.","source":"The <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> property of the result."}],"pos":[100641,100742],"yaml":true},{"content":"This expression if no children are changed or an expression with the updated children.","nodes":[{"pos":[0,86],"content":"This expression if no children are changed or an expression with the updated children.","nodes":[{"content":"This expression if no children are changed or an expression with the updated children.","pos":[0,86]}]}],"pos":[100827,100914],"yaml":true},{"content":"Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.","nodes":[{"pos":[0,198],"content":"Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.","nodes":[{"content":"Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.","pos":[0,198],"nodes":[{"content":"Returns the number of arguments to the expression tree node.","pos":[0,60]},{"content":"You should not use this member.","pos":[62,93]},{"content":"It is only public due to assembly refactoring, and it is used internally for performance optimizations.","pos":[95,198]}]}]}],"pos":[102496,102695],"yaml":true},{"content":"Returns <xref href=\"System.Int32\"></xref>.","nodes":[{"pos":[0,42],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Int32\"></xref>."}],"pos":[102843,102886],"yaml":true},{"content":"Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.","nodes":[{"pos":[0,204],"content":"Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.","nodes":[{"content":"Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.","pos":[0,204],"nodes":[{"content":"Returns the argument at index, throwing if index is out of bounds.","pos":[0,66]},{"content":"You should not use this member.","pos":[68,99]},{"content":"It is only public due to assembly refactoring, and it is used internally for performance optimizations.","pos":[101,204]}]}]}],"pos":[104372,104577],"yaml":true},{"content":"The index of the argument.","nodes":[{"pos":[0,26],"content":"The index of the argument.","nodes":[{"content":"The index of the argument.","pos":[0,26]}]}],"pos":[104754,104781],"yaml":true},{"content":"Returns <xref href=\"System.Linq.Expressions.Expression\"></xref>.","nodes":[{"pos":[0,64],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Linq.Expressions.Expression\"></xref>."}],"pos":[104859,104924],"yaml":true},{"content":"Optionally creates the CallSite and returns the CallSite for the DynamicExpression’s polymorphic inline cache.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.","nodes":[{"pos":[0,248],"content":"Optionally creates the CallSite and returns the CallSite for the DynamicExpression’s polymorphic inline cache.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.","nodes":[{"content":"Optionally creates the CallSite and returns the CallSite for the DynamicExpression’s polymorphic inline cache.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.","pos":[0,248],"nodes":[{"content":"Optionally creates the CallSite and returns the CallSite for the DynamicExpression’s polymorphic inline cache.","pos":[0,110]},{"content":"You should not use this member.","pos":[112,143]},{"content":"It is only public due to assembly refactoring, and it is used internally for performance optimizations.","pos":[145,248]}]}]}],"pos":[106435,106684],"yaml":true},{"content":"Returns <xref href=\"System.Object\"></xref>.","nodes":[{"pos":[0,43],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Object\"></xref>."}],"pos":[106828,106872],"yaml":true},{"content":"Rewrite this node replacing the dynamic expression’s arguments with the provided values.  The number of <code>args</code> needs to match the number of the current expression.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.  This helper method allows re-writing of nodes to be independent of the specific implementation class deriving from DynamicExpression that is being used at the call site.","nodes":[{"pos":[0,481],"content":"Rewrite this node replacing the dynamic expression’s arguments with the provided values.  The number of <code>args</code> needs to match the number of the current expression.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.  This helper method allows re-writing of nodes to be independent of the specific implementation class deriving from DynamicExpression that is being used at the call site.","nodes":[{"content":"Rewrite this node replacing the dynamic expression’s arguments with the provided values.","pos":[0,88]},{"content":"The number of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept> needs to match the number of the current expression.","pos":[90,174],"source":"  The number of <code>args</code> needs to match the number of the current expression."},{"content":"You should not use this type.","pos":[176,205]},{"content":"It is only public due to assembly refactoring, and it is used internally for performance optimizations.","pos":[207,310]},{"content":"This helper method allows re-writing of nodes to be independent of the specific implementation class deriving from DynamicExpression that is being used at the call site.","pos":[312,481]}]}],"pos":[108495,108977],"yaml":true},{"content":"The arguments.","nodes":[{"pos":[0,14],"content":"The arguments.","nodes":[{"content":"The arguments.","pos":[0,14]}]}],"pos":[109206,109221],"yaml":true},{"content":"Returns <xref href=\"System.Linq.Expressions.Expression\"></xref>, the rewritten expression.","nodes":[{"pos":[0,90],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Linq.Expressions.Expression\"&gt;&lt;/xref&gt;</ph>, the rewritten expression.","source":"Returns <xref href=\"System.Linq.Expressions.Expression\"></xref>, the rewritten expression."}],"pos":[109299,109390],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Linq.Expressions.DynamicExpression\n  commentId: T:System.Linq.Expressions.DynamicExpression\n  id: DynamicExpression\n  children:\n  - System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  - System.Linq.Expressions.DynamicExpression.Arguments\n  - System.Linq.Expressions.DynamicExpression.Binder\n  - System.Linq.Expressions.DynamicExpression.DelegateType\n  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.DynamicExpression.NodeType\n  - System.Linq.Expressions.DynamicExpression.Type\n  - System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount\n  - System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)\n  - System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite\n  - System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])\n  langs:\n  - csharp\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n  type: Class\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Represents a dynamic operation.\n  syntax:\n    content: 'public class DynamicExpression : System.Linq.Expressions.Expression, System.Linq.Expressions.IDynamicExpression'\n  inheritance:\n  - System.Object\n  - System.Linq.Expressions.Expression\n  implements:\n  - System.Linq.Expressions.IDynamicExpression\n  inheritedMembers:\n  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.CanReduce\n  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)\n  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Constant(System.Object)\n  - System.Linq.Expressions.Expression.Constant(System.Object,System.Type)\n  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Default(System.Type)\n  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Empty\n  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)\n  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)\n  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)\n  - System.Linq.Expressions.Expression.GetActionType(System.Type[])\n  - System.Linq.Expressions.Expression.GetDelegateType(System.Type[])\n  - System.Linq.Expressions.Expression.GetFuncType(System.Type[])\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Label\n  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Label(System.String)\n  - System.Linq.Expressions.Expression.Label(System.Type)\n  - System.Linq.Expressions.Expression.Label(System.Type,System.String)\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)\n  - System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})\n  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])\n  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])\n  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])\n  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.New(System.Type)\n  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Parameter(System.Type)\n  - System.Linq.Expressions.Expression.Parameter(System.Type,System.String)\n  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)\n  - System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)\n  - System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Reduce\n  - System.Linq.Expressions.Expression.ReduceAndCheck\n  - System.Linq.Expressions.Expression.ReduceExtensions\n  - System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Rethrow\n  - System.Linq.Expressions.Expression.Rethrow(System.Type)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)\n  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  - System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])\n  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String)\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)\n  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)\n  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.ToString\n  - System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  - System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  - System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)\n  - System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)\n  - System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  - System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)\n  - System.Linq.Expressions.Expression.Variable(System.Type)\n  - System.Linq.Expressions.Expression.Variable(System.Type,System.String)\n  - System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  commentId: M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  id: Accept(System.Linq.Expressions.ExpressionVisitor)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: Accept(ExpressionVisitor)\n  nameWithType: DynamicExpression.Accept(ExpressionVisitor)\n  fullName: DynamicExpression.Accept(ExpressionVisitor)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Dispatches to the specific visit method for this node type. For example, <xref href=\"System.Linq.Expressions.MethodCallExpression\"></xref> calls the <xref href=\"System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)\"></xref>.\n  remarks: This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>. Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class. However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.\n  syntax:\n    content: protected override System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);\n    parameters:\n    - id: visitor\n      type: System.Linq.Expressions.ExpressionVisitor\n      description: The visitor to visit this node with.\n    return:\n      type: System.Linq.Expressions.Expression\n      description: The result of visiting this node.\n  overload: System.Linq.Expressions.DynamicExpression.Accept*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.DynamicExpression.Arguments\n  commentId: P:System.Linq.Expressions.DynamicExpression.Arguments\n  id: Arguments\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: Arguments\n  nameWithType: DynamicExpression.Arguments\n  fullName: DynamicExpression.Arguments\n  type: Property\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Gets the arguments to the dynamic operation.\n  syntax:\n    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> Arguments { get; }\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}\n      description: The read-only collections containing the arguments to the dynamic operation.\n  overload: System.Linq.Expressions.DynamicExpression.Arguments*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.DynamicExpression.Binder\n  commentId: P:System.Linq.Expressions.DynamicExpression.Binder\n  id: Binder\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: Binder\n  nameWithType: DynamicExpression.Binder\n  fullName: DynamicExpression.Binder\n  type: Property\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Gets the <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>, which determines the run-time behavior of the dynamic site.\n  syntax:\n    content: public System.Runtime.CompilerServices.CallSiteBinder Binder { get; }\n    return:\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>, which determines the run-time behavior of the dynamic site.\n  overload: System.Linq.Expressions.DynamicExpression.Binder*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.DynamicExpression.DelegateType\n  commentId: P:System.Linq.Expressions.DynamicExpression.DelegateType\n  id: DelegateType\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: DelegateType\n  nameWithType: DynamicExpression.DelegateType\n  fullName: DynamicExpression.DelegateType\n  type: Property\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Gets the type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.\n  syntax:\n    content: public Type DelegateType { get; }\n    return:\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> object representing the type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.\n  overload: System.Linq.Expressions.DynamicExpression.DelegateType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)\n  fullName: DynamicExpression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.\n  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: returnType\n      type: System.Type\n      description: The result type of the dynamic expression.\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: The arguments to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>,  and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.DynamicExpression.Dynamic*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder, Type, Expression)\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression)\n  fullName: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.\n  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: returnType\n      type: System.Type\n      description: The result type of the dynamic expression.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The first argument to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>,  and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.DynamicExpression.Dynamic*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder, Type, Expression[])\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression[])\n  fullName: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression[])\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.\n  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: returnType\n      type: System.Type\n      description: The result type of the dynamic expression.\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: The arguments to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.DynamicExpression.Dynamic*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder, Type, Expression, Expression)\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression, Expression)\n  fullName: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.\n  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: returnType\n      type: System.Type\n      description: The result type of the dynamic expression.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The first argument to the dynamic operation.\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: The second argument to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.DynamicExpression.Dynamic*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)\n  fullName: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.\n  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: returnType\n      type: System.Type\n      description: The result type of the dynamic expression.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The first argument to the dynamic operation.\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: The second argument to the dynamic operation.\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: The third argument to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.DynamicExpression.Dynamic*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)\n  fullName: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.\n  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result is inferred from the types of the arguments and the specified return type.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);\n    parameters:\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: returnType\n      type: System.Type\n      description: The result type of the dynamic expression.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The first argument to the dynamic operation.\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: The second argument to the dynamic operation.\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: The third argument to the dynamic operation.\n    - id: arg3\n      type: System.Linq.Expressions.Expression\n      description: The fourth argument to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.DynamicExpression.Dynamic*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)\n  nameWithType: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)\n  fullName: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and four arguments.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The first argument to the dynamic operation.\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: The second argument to the dynamic operation.\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: The third argument to the dynamic operation.\n    - id: arg3\n      type: System.Linq.Expressions.Expression\n      description: The fourth argument to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.DynamicExpression.MakeDynamic*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)\n  nameWithType: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)\n  fullName: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and three arguments.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The first argument to the dynamic operation.\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: The second argument to the dynamic operation.\n    - id: arg2\n      type: System.Linq.Expressions.Expression\n      description: The third argument to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.DynamicExpression.MakeDynamic*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression)\n  nameWithType: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression, Expression)\n  fullName: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression, Expression)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and two arguments.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The first argument to the dynamic operation.\n    - id: arg1\n      type: System.Linq.Expressions.Expression\n      description: The second argument to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.DynamicExpression.MakeDynamic*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: MakeDynamic(Type, CallSiteBinder, Expression)\n  nameWithType: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression)\n  fullName: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref> and one argument.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: arg0\n      type: System.Linq.Expressions.Expression\n      description: The argument to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.DynamicExpression.MakeDynamic*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)\n  nameWithType: DynamicExpression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)\n  fullName: DynamicExpression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: The arguments to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.DynamicExpression.MakeDynamic*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: MakeDynamic(Type, CallSiteBinder, Expression[])\n  nameWithType: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression[])\n  fullName: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression[])\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\"></xref>.\n  syntax:\n    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression[] arguments);\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\"></xref>.\n    - id: binder\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: The runtime binder for the dynamic operation.\n    - id: arguments\n      type: System.Linq.Expressions.Expression[]\n      description: The arguments to the dynamic operation.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: A <xref href=\"System.Linq.Expressions.DynamicExpression\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> set to the specified values.\n  overload: System.Linq.Expressions.DynamicExpression.MakeDynamic*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.DynamicExpression.NodeType\n  commentId: P:System.Linq.Expressions.DynamicExpression.NodeType\n  id: NodeType\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: NodeType\n  nameWithType: DynamicExpression.NodeType\n  fullName: DynamicExpression.NodeType\n  type: Property\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Returns the node type of this expression. Extension nodes should return <xref href=\"System.Linq.Expressions.ExpressionType.Extension\"></xref> when overriding this method.\n  syntax:\n    content: public override sealed System.Linq.Expressions.ExpressionType NodeType { get; }\n    return:\n      type: System.Linq.Expressions.ExpressionType\n      description: The <xref href=\"System.Linq.Expressions.ExpressionType\"></xref> of the expression.\n  overload: System.Linq.Expressions.DynamicExpression.NodeType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: billchi\n  manager: ghogen\n- uid: System.Linq.Expressions.DynamicExpression.Type\n  commentId: P:System.Linq.Expressions.DynamicExpression.Type\n  id: Type\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: Type\n  nameWithType: DynamicExpression.Type\n  fullName: DynamicExpression.Type\n  type: Property\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Gets the static type of the expression that this <xref href=\"System.Linq.Expressions.Expression\"></xref> represents.\n  syntax:\n    content: public override Type Type { get; }\n    return:\n      type: System.Type\n      description: The <xref href=\"System.Linq.Expressions.DynamicExpression.Type\"></xref> that represents the static type of the expression.\n  overload: System.Linq.Expressions.DynamicExpression.Type*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  id: Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: Update(IEnumerable<Expression>)\n  nameWithType: DynamicExpression.Update(IEnumerable<Expression>)\n  fullName: DynamicExpression.Update(IEnumerable<Expression>)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Compares the value sent to the parameter, <code>arguments</code>, to the `Arguments` property of the current instance of `DynamicExpression`. If the values of the parameter and the property are equal, the current instance is returned. If they are not equal, a new `DynamicExpression` instance is returned that is identical to the current instance except that the `Arguments` property is set to the value of parameter <code>arguments</code>.\n  syntax:\n    content: public System.Linq.Expressions.DynamicExpression Update (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);\n    parameters:\n    - id: arguments\n      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n      description: The <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\"></xref> property of the result.\n    return:\n      type: System.Linq.Expressions.DynamicExpression\n      description: This expression if no children are changed or an expression with the updated children.\n  overload: System.Linq.Expressions.DynamicExpression.Update*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount\n  commentId: P:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount\n  id: System#Linq#Expressions#IArgumentProvider#ArgumentCount\n  isEii: true\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: IArgumentProvider.ArgumentCount\n  nameWithType: DynamicExpression.IArgumentProvider.ArgumentCount\n  fullName: DynamicExpression.IArgumentProvider.ArgumentCount\n  type: Property\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.\n  syntax:\n    content: int System.Linq.Expressions.IArgumentProvider.ArgumentCount { get; }\n    return:\n      type: System.Int32\n      description: Returns <xref href=\"System.Int32\"></xref>.\n  overload: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.author: billchi\n  manager: douge\n- uid: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)\n  commentId: M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)\n  id: System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)\n  isEii: true\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: IArgumentProvider.GetArgument(Int32)\n  nameWithType: DynamicExpression.IArgumentProvider.GetArgument(Int32)\n  fullName: DynamicExpression.IArgumentProvider.GetArgument(Int32)\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.\n  syntax:\n    content: System.Linq.Expressions.Expression IArgumentProvider.GetArgument (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The index of the argument.\n    return:\n      type: System.Linq.Expressions.Expression\n      description: Returns <xref href=\"System.Linq.Expressions.Expression\"></xref>.\n  overload: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite\n  commentId: M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite\n  id: System#Linq#Expressions#IDynamicExpression#CreateCallSite\n  isEii: true\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: IDynamicExpression.CreateCallSite()\n  nameWithType: DynamicExpression.IDynamicExpression.CreateCallSite()\n  fullName: DynamicExpression.IDynamicExpression.CreateCallSite()\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Optionally creates the CallSite and returns the CallSite for the DynamicExpression’s polymorphic inline cache.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.\n  syntax:\n    content: object IDynamicExpression.CreateCallSite ();\n    parameters: []\n    return:\n      type: System.Object\n      description: Returns <xref href=\"System.Object\"></xref>.\n  overload: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\n- uid: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])\n  commentId: M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])\n  id: System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])\n  isEii: true\n  parent: System.Linq.Expressions.DynamicExpression\n  langs:\n  - csharp\n  name: IDynamicExpression.Rewrite(Expression[])\n  nameWithType: DynamicExpression.IDynamicExpression.Rewrite(Expression[])\n  fullName: DynamicExpression.IDynamicExpression.Rewrite(Expression[])\n  type: Method\n  assemblies:\n  - System.Dynamic.Runtime\n  - System.Core\n  - netstandard\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: Rewrite this node replacing the dynamic expression’s arguments with the provided values.  The number of <code>args</code> needs to match the number of the current expression.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.  This helper method allows re-writing of nodes to be independent of the specific implementation class deriving from DynamicExpression that is being used at the call site.\n  syntax:\n    content: System.Linq.Expressions.Expression IDynamicExpression.Rewrite (System.Linq.Expressions.Expression[] args);\n    parameters:\n    - id: args\n      type: System.Linq.Expressions.Expression[]\n      description: The arguments.\n    return:\n      type: System.Linq.Expressions.Expression\n      description: Returns <xref href=\"System.Linq.Expressions.Expression\"></xref>, the rewritten expression.\n  overload: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n  ms.technology:\n  - dotnet-standard\n  author: BillWagner\n  ms.author: wiwagn\n  manager: wpickett\nreferences:\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  nameWithType: Expression\n  fullName: System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Accept(ExpressionVisitor)\n  nameWithType: DynamicExpression.Accept(ExpressionVisitor)\n  fullName: DynamicExpression.Accept(ExpressionVisitor)\n- uid: System.Linq.Expressions.ExpressionVisitor\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ExpressionVisitor\n  nameWithType: ExpressionVisitor\n  fullName: System.Linq.Expressions.ExpressionVisitor\n- uid: System.Linq.Expressions.DynamicExpression.Arguments\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Arguments\n  nameWithType: DynamicExpression.Arguments\n  fullName: DynamicExpression.Arguments\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n  name: ReadOnlyCollection<T>\n  nameWithType: ReadOnlyCollection<T>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}\n  parent: System.Collections.ObjectModel\n  isExternal: false\n  name: ReadOnlyCollection<Expression>\n  nameWithType: ReadOnlyCollection<Expression>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Linq.Expressions.Expression\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Expressions.DynamicExpression.Binder\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Binder\n  nameWithType: DynamicExpression.Binder\n  fullName: DynamicExpression.Binder\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  nameWithType: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Linq.Expressions.DynamicExpression.DelegateType\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: DelegateType\n  nameWithType: DynamicExpression.DelegateType\n  fullName: DynamicExpression.DelegateType\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)\n  fullName: DynamicExpression.Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.DynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DynamicExpression\n  nameWithType: DynamicExpression\n  fullName: System.Linq.Expressions.DynamicExpression\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Expression>\n  nameWithType: IEnumerable<Expression>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Linq.Expressions.Expression\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Dynamic(CallSiteBinder, Type, Expression)\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression)\n  fullName: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression)\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Dynamic(CallSiteBinder, Type, Expression[])\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression[])\n  fullName: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression[])\n- uid: System.Linq.Expressions.Expression[]\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression[]\n  nameWithType: Expression[]\n  fullName: System.Linq.Expressions.Expression[]\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression\n    name: Expression\n    nameWithType: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Dynamic(CallSiteBinder, Type, Expression, Expression)\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression, Expression)\n  fullName: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression, Expression)\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)\n  fullName: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)\n  nameWithType: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)\n  fullName: DynamicExpression.Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)\n  nameWithType: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)\n  fullName: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)\n  nameWithType: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)\n  fullName: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression)\n  nameWithType: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression, Expression)\n  fullName: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression, Expression)\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: MakeDynamic(Type, CallSiteBinder, Expression)\n  nameWithType: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression)\n  fullName: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression)\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)\n  nameWithType: DynamicExpression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)\n  fullName: DynamicExpression.MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: MakeDynamic(Type, CallSiteBinder, Expression[])\n  nameWithType: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression[])\n  fullName: DynamicExpression.MakeDynamic(Type, CallSiteBinder, Expression[])\n- uid: System.Linq.Expressions.DynamicExpression.NodeType\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: NodeType\n  nameWithType: DynamicExpression.NodeType\n  fullName: DynamicExpression.NodeType\n- uid: System.Linq.Expressions.ExpressionType\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ExpressionType\n  nameWithType: ExpressionType\n  fullName: System.Linq.Expressions.ExpressionType\n- uid: System.Linq.Expressions.DynamicExpression.Type\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Type\n  nameWithType: DynamicExpression.Type\n  fullName: DynamicExpression.Type\n- uid: System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Update(IEnumerable<Expression>)\n  nameWithType: DynamicExpression.Update(IEnumerable<Expression>)\n  fullName: DynamicExpression.Update(IEnumerable<Expression>)\n- uid: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: IArgumentProvider.ArgumentCount\n  nameWithType: DynamicExpression.IArgumentProvider.ArgumentCount\n  fullName: DynamicExpression.IArgumentProvider.ArgumentCount\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: IArgumentProvider.GetArgument(Int32)\n  nameWithType: DynamicExpression.IArgumentProvider.GetArgument(Int32)\n  fullName: DynamicExpression.IArgumentProvider.GetArgument(Int32)\n- uid: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: IDynamicExpression.CreateCallSite()\n  nameWithType: DynamicExpression.IDynamicExpression.CreateCallSite()\n  fullName: DynamicExpression.IDynamicExpression.CreateCallSite()\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: IDynamicExpression.Rewrite(Expression[])\n  nameWithType: DynamicExpression.IDynamicExpression.Rewrite(Expression[])\n  fullName: DynamicExpression.IDynamicExpression.Rewrite(Expression[])\n- uid: System.Linq.Expressions.DynamicExpression.Accept*\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Accept\n  nameWithType: DynamicExpression.Accept\n  fullName: DynamicExpression.Accept\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n- uid: System.Linq.Expressions.DynamicExpression.Arguments*\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Arguments\n  nameWithType: DynamicExpression.Arguments\n  fullName: DynamicExpression.Arguments\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n- uid: System.Linq.Expressions.DynamicExpression.Binder*\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Binder\n  nameWithType: DynamicExpression.Binder\n  fullName: DynamicExpression.Binder\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n- uid: System.Linq.Expressions.DynamicExpression.DelegateType*\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: DelegateType\n  nameWithType: DynamicExpression.DelegateType\n  fullName: DynamicExpression.DelegateType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n- uid: System.Linq.Expressions.DynamicExpression.Dynamic*\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Dynamic\n  nameWithType: DynamicExpression.Dynamic\n  fullName: DynamicExpression.Dynamic\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic*\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: MakeDynamic\n  nameWithType: DynamicExpression.MakeDynamic\n  fullName: DynamicExpression.MakeDynamic\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n- uid: System.Linq.Expressions.DynamicExpression.NodeType*\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: NodeType\n  nameWithType: DynamicExpression.NodeType\n  fullName: DynamicExpression.NodeType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n- uid: System.Linq.Expressions.DynamicExpression.Type*\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Type\n  nameWithType: DynamicExpression.Type\n  fullName: DynamicExpression.Type\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n- uid: System.Linq.Expressions.DynamicExpression.Update*\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: Update\n  nameWithType: DynamicExpression.Update\n  fullName: DynamicExpression.Update\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n- uid: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount*\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: System.Linq.Expressions.IArgumentProvider.ArgumentCount\n  nameWithType: DynamicExpression.System.Linq.Expressions.IArgumentProvider.ArgumentCount\n  fullName: DynamicExpression.System.Linq.Expressions.IArgumentProvider.ArgumentCount\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n- uid: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument*\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: System.Linq.Expressions.IArgumentProvider.GetArgument\n  nameWithType: DynamicExpression.System.Linq.Expressions.IArgumentProvider.GetArgument\n  fullName: DynamicExpression.System.Linq.Expressions.IArgumentProvider.GetArgument\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n- uid: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite*\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: System.Linq.Expressions.IDynamicExpression.CreateCallSite\n  nameWithType: DynamicExpression.System.Linq.Expressions.IDynamicExpression.CreateCallSite\n  fullName: DynamicExpression.System.Linq.Expressions.IDynamicExpression.CreateCallSite\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n- uid: System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite*\n  parent: System.Linq.Expressions.DynamicExpression\n  isExternal: false\n  name: System.Linq.Expressions.IDynamicExpression.Rewrite\n  nameWithType: DynamicExpression.System.Linq.Expressions.IDynamicExpression.Rewrite\n  fullName: DynamicExpression.System.Linq.Expressions.IDynamicExpression.Rewrite\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Linq.Expressions/DynamicExpression.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Linq.Expressions.Expression.ToString\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ToString()\n  nameWithType: Expression.ToString()\n  fullName: Expression.ToString()\n- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Add(Expression, Expression)\n  nameWithType: Expression.Add(Expression, Expression)\n  fullName: Expression.Add(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Add(Expression, Expression, MethodInfo)\n  nameWithType: Expression.Add(Expression, Expression, MethodInfo)\n  fullName: Expression.Add(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddAssign(Expression, Expression)\n  nameWithType: Expression.AddAssign(Expression, Expression)\n  fullName: Expression.AddAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.AddAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.AddAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.AddAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddAssignChecked(Expression, Expression)\n  nameWithType: Expression.AddAssignChecked(Expression, Expression)\n  fullName: Expression.AddAssignChecked(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddAssignChecked(Expression, Expression, MethodInfo)\n  nameWithType: Expression.AddAssignChecked(Expression, Expression, MethodInfo)\n  fullName: Expression.AddAssignChecked(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddChecked(Expression, Expression)\n  nameWithType: Expression.AddChecked(Expression, Expression)\n  fullName: Expression.AddChecked(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AddChecked(Expression, Expression, MethodInfo)\n  nameWithType: Expression.AddChecked(Expression, Expression, MethodInfo)\n  fullName: Expression.AddChecked(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: And(Expression, Expression)\n  nameWithType: Expression.And(Expression, Expression)\n  fullName: Expression.And(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: And(Expression, Expression, MethodInfo)\n  nameWithType: Expression.And(Expression, Expression, MethodInfo)\n  fullName: Expression.And(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AndAlso(Expression, Expression, MethodInfo)\n  nameWithType: Expression.AndAlso(Expression, Expression, MethodInfo)\n  fullName: Expression.AndAlso(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AndAlso(Expression, Expression)\n  nameWithType: Expression.AndAlso(Expression, Expression)\n  fullName: Expression.AndAlso(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AndAssign(Expression, Expression)\n  nameWithType: Expression.AndAssign(Expression, Expression)\n  fullName: Expression.AndAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AndAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.AndAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.AndAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: AndAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.AndAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ArrayAccess(Expression, IEnumerable<Expression>)\n  nameWithType: Expression.ArrayAccess(Expression, IEnumerable<Expression>)\n  fullName: Expression.ArrayAccess(Expression, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ArrayAccess(Expression, Expression[])\n  nameWithType: Expression.ArrayAccess(Expression, Expression[])\n  fullName: Expression.ArrayAccess(Expression, Expression[])\n- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ArrayIndex(Expression, Expression[])\n  nameWithType: Expression.ArrayIndex(Expression, Expression[])\n  fullName: Expression.ArrayIndex(Expression, Expression[])\n- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ArrayIndex(Expression, IEnumerable<Expression>)\n  nameWithType: Expression.ArrayIndex(Expression, IEnumerable<Expression>)\n  fullName: Expression.ArrayIndex(Expression, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ArrayIndex(Expression, Expression)\n  nameWithType: Expression.ArrayIndex(Expression, Expression)\n  fullName: Expression.ArrayIndex(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ArrayLength(Expression)\n  nameWithType: Expression.ArrayLength(Expression)\n  fullName: Expression.ArrayLength(Expression)\n- uid: System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Assign(Expression, Expression)\n  nameWithType: Expression.Assign(Expression, Expression)\n  fullName: Expression.Assign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Bind(MemberInfo, Expression)\n  nameWithType: Expression.Bind(MemberInfo, Expression)\n  fullName: Expression.Bind(MemberInfo, Expression)\n- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Bind(MethodInfo, Expression)\n  nameWithType: Expression.Bind(MethodInfo, Expression)\n  fullName: Expression.Bind(MethodInfo, Expression)\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>)\n  nameWithType: Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>)\n  fullName: Expression.Block(Type, IEnumerable<ParameterExpression>, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Expression, Expression, Expression)\n  nameWithType: Expression.Block(Expression, Expression, Expression)\n  fullName: Expression.Block(Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Expression, Expression, Expression, Expression, Expression)\n  nameWithType: Expression.Block(Expression, Expression, Expression, Expression, Expression)\n  fullName: Expression.Block(Expression, Expression, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Type, IEnumerable<ParameterExpression>, Expression[])\n  nameWithType: Expression.Block(Type, IEnumerable<ParameterExpression>, Expression[])\n  fullName: Expression.Block(Type, IEnumerable<ParameterExpression>, Expression[])\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Type, Expression[])\n  nameWithType: Expression.Block(Type, Expression[])\n  fullName: Expression.Block(Type, Expression[])\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Expression, Expression, Expression, Expression)\n  nameWithType: Expression.Block(Expression, Expression, Expression, Expression)\n  fullName: Expression.Block(Expression, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Expression, Expression)\n  nameWithType: Expression.Block(Expression, Expression)\n  fullName: Expression.Block(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(IEnumerable<ParameterExpression>, Expression[])\n  nameWithType: Expression.Block(IEnumerable<ParameterExpression>, Expression[])\n  fullName: Expression.Block(IEnumerable<ParameterExpression>, Expression[])\n- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>)\n  nameWithType: Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>)\n  fullName: Expression.Block(IEnumerable<ParameterExpression>, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Expression[])\n  nameWithType: Expression.Block(Expression[])\n  fullName: Expression.Block(Expression[])\n- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(IEnumerable<Expression>)\n  nameWithType: Expression.Block(IEnumerable<Expression>)\n  fullName: Expression.Block(IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Block(Type, IEnumerable<Expression>)\n  nameWithType: Expression.Block(Type, IEnumerable<Expression>)\n  fullName: Expression.Block(Type, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Break(LabelTarget)\n  nameWithType: Expression.Break(LabelTarget)\n  fullName: Expression.Break(LabelTarget)\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Break(LabelTarget, Expression)\n  nameWithType: Expression.Break(LabelTarget, Expression)\n  fullName: Expression.Break(LabelTarget, Expression)\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Break(LabelTarget, Type)\n  nameWithType: Expression.Break(LabelTarget, Type)\n  fullName: Expression.Break(LabelTarget, Type)\n- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Break(LabelTarget, Expression, Type)\n  nameWithType: Expression.Break(LabelTarget, Expression, Type)\n  fullName: Expression.Break(LabelTarget, Expression, Type)\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(MethodInfo, Expression, Expression, Expression, Expression, Expression)\n  nameWithType: Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression)\n  fullName: Expression.Call(MethodInfo, Expression, Expression, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(Expression, MethodInfo, Expression, Expression, Expression)\n  nameWithType: Expression.Call(Expression, MethodInfo, Expression, Expression, Expression)\n  fullName: Expression.Call(Expression, MethodInfo, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(Type, String, Type[], Expression[])\n  nameWithType: Expression.Call(Type, String, Type[], Expression[])\n  fullName: Expression.Call(Type, String, Type[], Expression[])\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(MethodInfo, Expression, Expression, Expression)\n  nameWithType: Expression.Call(MethodInfo, Expression, Expression, Expression)\n  fullName: Expression.Call(MethodInfo, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(Expression, String, Type[], Expression[])\n  nameWithType: Expression.Call(Expression, String, Type[], Expression[])\n  fullName: Expression.Call(Expression, String, Type[], Expression[])\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(Expression, MethodInfo, Expression, Expression)\n  nameWithType: Expression.Call(Expression, MethodInfo, Expression, Expression)\n  fullName: Expression.Call(Expression, MethodInfo, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(MethodInfo, Expression, Expression, Expression, Expression)\n  nameWithType: Expression.Call(MethodInfo, Expression, Expression, Expression, Expression)\n  fullName: Expression.Call(MethodInfo, Expression, Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(Expression, MethodInfo, Expression[])\n  nameWithType: Expression.Call(Expression, MethodInfo, Expression[])\n  fullName: Expression.Call(Expression, MethodInfo, Expression[])\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(Expression, MethodInfo, IEnumerable<Expression>)\n  nameWithType: Expression.Call(Expression, MethodInfo, IEnumerable<Expression>)\n  fullName: Expression.Call(Expression, MethodInfo, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(MethodInfo, Expression[])\n  nameWithType: Expression.Call(MethodInfo, Expression[])\n  fullName: Expression.Call(MethodInfo, Expression[])\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(MethodInfo, Expression)\n  nameWithType: Expression.Call(MethodInfo, Expression)\n  fullName: Expression.Call(MethodInfo, Expression)\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(MethodInfo, IEnumerable<Expression>)\n  nameWithType: Expression.Call(MethodInfo, IEnumerable<Expression>)\n  fullName: Expression.Call(MethodInfo, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(Expression, MethodInfo)\n  nameWithType: Expression.Call(Expression, MethodInfo)\n  fullName: Expression.Call(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Call(MethodInfo, Expression, Expression)\n  nameWithType: Expression.Call(MethodInfo, Expression, Expression)\n  fullName: Expression.Call(MethodInfo, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.CanReduce\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: CanReduce\n  nameWithType: Expression.CanReduce\n  fullName: Expression.CanReduce\n- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Catch(ParameterExpression, Expression)\n  nameWithType: Expression.Catch(ParameterExpression, Expression)\n  fullName: Expression.Catch(ParameterExpression, Expression)\n- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Catch(Type, Expression)\n  nameWithType: Expression.Catch(Type, Expression)\n  fullName: Expression.Catch(Type, Expression)\n- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Catch(ParameterExpression, Expression, Expression)\n  nameWithType: Expression.Catch(ParameterExpression, Expression, Expression)\n  fullName: Expression.Catch(ParameterExpression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Catch(Type, Expression, Expression)\n  nameWithType: Expression.Catch(Type, Expression, Expression)\n  fullName: Expression.Catch(Type, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ClearDebugInfo(SymbolDocumentInfo)\n  nameWithType: Expression.ClearDebugInfo(SymbolDocumentInfo)\n  fullName: Expression.ClearDebugInfo(SymbolDocumentInfo)\n- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Coalesce(Expression, Expression, LambdaExpression)\n  nameWithType: Expression.Coalesce(Expression, Expression, LambdaExpression)\n  fullName: Expression.Coalesce(Expression, Expression, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Coalesce(Expression, Expression)\n  nameWithType: Expression.Coalesce(Expression, Expression)\n  fullName: Expression.Coalesce(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Condition(Expression, Expression, Expression)\n  nameWithType: Expression.Condition(Expression, Expression, Expression)\n  fullName: Expression.Condition(Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Condition(Expression, Expression, Expression, Type)\n  nameWithType: Expression.Condition(Expression, Expression, Expression, Type)\n  fullName: Expression.Condition(Expression, Expression, Expression, Type)\n- uid: System.Linq.Expressions.Expression.Constant(System.Object)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Constant(Object)\n  nameWithType: Expression.Constant(Object)\n  fullName: Expression.Constant(Object)\n- uid: System.Linq.Expressions.Expression.Constant(System.Object,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Constant(Object, Type)\n  nameWithType: Expression.Constant(Object, Type)\n  fullName: Expression.Constant(Object, Type)\n- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Continue(LabelTarget)\n  nameWithType: Expression.Continue(LabelTarget)\n  fullName: Expression.Continue(LabelTarget)\n- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Continue(LabelTarget, Type)\n  nameWithType: Expression.Continue(LabelTarget, Type)\n  fullName: Expression.Continue(LabelTarget, Type)\n- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Convert(Expression, Type)\n  nameWithType: Expression.Convert(Expression, Type)\n  fullName: Expression.Convert(Expression, Type)\n- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Convert(Expression, Type, MethodInfo)\n  nameWithType: Expression.Convert(Expression, Type, MethodInfo)\n  fullName: Expression.Convert(Expression, Type, MethodInfo)\n- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ConvertChecked(Expression, Type)\n  nameWithType: Expression.ConvertChecked(Expression, Type)\n  fullName: Expression.ConvertChecked(Expression, Type)\n- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ConvertChecked(Expression, Type, MethodInfo)\n  nameWithType: Expression.ConvertChecked(Expression, Type, MethodInfo)\n  fullName: Expression.ConvertChecked(Expression, Type, MethodInfo)\n- uid: System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)\n  nameWithType: Expression.DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)\n  fullName: Expression.DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)\n- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Decrement(Expression)\n  nameWithType: Expression.Decrement(Expression)\n  fullName: Expression.Decrement(Expression)\n- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Decrement(Expression, MethodInfo)\n  nameWithType: Expression.Decrement(Expression, MethodInfo)\n  fullName: Expression.Decrement(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Default(System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Default(Type)\n  nameWithType: Expression.Default(Type)\n  fullName: Expression.Default(Type)\n- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Divide(Expression, Expression)\n  nameWithType: Expression.Divide(Expression, Expression)\n  fullName: Expression.Divide(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Divide(Expression, Expression, MethodInfo)\n  nameWithType: Expression.Divide(Expression, Expression, MethodInfo)\n  fullName: Expression.Divide(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: DivideAssign(Expression, Expression)\n  nameWithType: Expression.DivideAssign(Expression, Expression)\n  fullName: Expression.DivideAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: DivideAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.DivideAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.DivideAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: DivideAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.DivideAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ElementInit(MethodInfo, IEnumerable<Expression>)\n  nameWithType: Expression.ElementInit(MethodInfo, IEnumerable<Expression>)\n  fullName: Expression.ElementInit(MethodInfo, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ElementInit(MethodInfo, Expression[])\n  nameWithType: Expression.ElementInit(MethodInfo, Expression[])\n  fullName: Expression.ElementInit(MethodInfo, Expression[])\n- uid: System.Linq.Expressions.Expression.Empty\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Empty()\n  nameWithType: Expression.Empty()\n  fullName: Expression.Empty()\n- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Equal(Expression, Expression)\n  nameWithType: Expression.Equal(Expression, Expression)\n  fullName: Expression.Equal(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Equal(Expression, Expression, Boolean, MethodInfo)\n  nameWithType: Expression.Equal(Expression, Expression, Boolean, MethodInfo)\n  fullName: Expression.Equal(Expression, Expression, Boolean, MethodInfo)\n- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ExclusiveOr(Expression, Expression, MethodInfo)\n  nameWithType: Expression.ExclusiveOr(Expression, Expression, MethodInfo)\n  fullName: Expression.ExclusiveOr(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ExclusiveOr(Expression, Expression)\n  nameWithType: Expression.ExclusiveOr(Expression, Expression)\n  fullName: Expression.ExclusiveOr(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ExclusiveOrAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.ExclusiveOrAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ExclusiveOrAssign(Expression, Expression)\n  nameWithType: Expression.ExclusiveOrAssign(Expression, Expression)\n  fullName: Expression.ExclusiveOrAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Field(Expression, FieldInfo)\n  nameWithType: Expression.Field(Expression, FieldInfo)\n  fullName: Expression.Field(Expression, FieldInfo)\n- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Field(Expression, String)\n  nameWithType: Expression.Field(Expression, String)\n  fullName: Expression.Field(Expression, String)\n- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Field(Expression, Type, String)\n  nameWithType: Expression.Field(Expression, Type, String)\n  fullName: Expression.Field(Expression, Type, String)\n- uid: System.Linq.Expressions.Expression.GetActionType(System.Type[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GetActionType(Type[])\n  nameWithType: Expression.GetActionType(Type[])\n  fullName: Expression.GetActionType(Type[])\n- uid: System.Linq.Expressions.Expression.GetDelegateType(System.Type[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GetDelegateType(Type[])\n  nameWithType: Expression.GetDelegateType(Type[])\n  fullName: Expression.GetDelegateType(Type[])\n- uid: System.Linq.Expressions.Expression.GetFuncType(System.Type[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GetFuncType(Type[])\n  nameWithType: Expression.GetFuncType(Type[])\n  fullName: Expression.GetFuncType(Type[])\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Goto(LabelTarget, Expression, Type)\n  nameWithType: Expression.Goto(LabelTarget, Expression, Type)\n  fullName: Expression.Goto(LabelTarget, Expression, Type)\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Goto(LabelTarget, Type)\n  nameWithType: Expression.Goto(LabelTarget, Type)\n  fullName: Expression.Goto(LabelTarget, Type)\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Goto(LabelTarget)\n  nameWithType: Expression.Goto(LabelTarget)\n  fullName: Expression.Goto(LabelTarget)\n- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Goto(LabelTarget, Expression)\n  nameWithType: Expression.Goto(LabelTarget, Expression)\n  fullName: Expression.Goto(LabelTarget, Expression)\n- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GreaterThan(Expression, Expression)\n  nameWithType: Expression.GreaterThan(Expression, Expression)\n  fullName: Expression.GreaterThan(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GreaterThan(Expression, Expression, Boolean, MethodInfo)\n  nameWithType: Expression.GreaterThan(Expression, Expression, Boolean, MethodInfo)\n  fullName: Expression.GreaterThan(Expression, Expression, Boolean, MethodInfo)\n- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GreaterThanOrEqual(Expression, Expression)\n  nameWithType: Expression.GreaterThanOrEqual(Expression, Expression)\n  fullName: Expression.GreaterThanOrEqual(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo)\n  nameWithType: Expression.GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo)\n  fullName: Expression.GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo)\n- uid: System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: IfThen(Expression, Expression)\n  nameWithType: Expression.IfThen(Expression, Expression)\n  fullName: Expression.IfThen(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: IfThenElse(Expression, Expression, Expression)\n  nameWithType: Expression.IfThenElse(Expression, Expression, Expression)\n  fullName: Expression.IfThenElse(Expression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Increment(Expression, MethodInfo)\n  nameWithType: Expression.Increment(Expression, MethodInfo)\n  fullName: Expression.Increment(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Increment(Expression)\n  nameWithType: Expression.Increment(Expression)\n  fullName: Expression.Increment(Expression)\n- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Invoke(Expression, Expression[])\n  nameWithType: Expression.Invoke(Expression, Expression[])\n  fullName: Expression.Invoke(Expression, Expression[])\n- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Invoke(Expression, IEnumerable<Expression>)\n  nameWithType: Expression.Invoke(Expression, IEnumerable<Expression>)\n  fullName: Expression.Invoke(Expression, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: IsFalse(Expression)\n  nameWithType: Expression.IsFalse(Expression)\n  fullName: Expression.IsFalse(Expression)\n- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: IsFalse(Expression, MethodInfo)\n  nameWithType: Expression.IsFalse(Expression, MethodInfo)\n  fullName: Expression.IsFalse(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: IsTrue(Expression)\n  nameWithType: Expression.IsTrue(Expression)\n  fullName: Expression.IsTrue(Expression)\n- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: IsTrue(Expression, MethodInfo)\n  nameWithType: Expression.IsTrue(Expression, MethodInfo)\n  fullName: Expression.IsTrue(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Label\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Label()\n  nameWithType: Expression.Label()\n  fullName: Expression.Label()\n- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Label(LabelTarget)\n  nameWithType: Expression.Label(LabelTarget)\n  fullName: Expression.Label(LabelTarget)\n- uid: System.Linq.Expressions.Expression.Label(System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Label(String)\n  nameWithType: Expression.Label(String)\n  fullName: Expression.Label(String)\n- uid: System.Linq.Expressions.Expression.Label(System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Label(Type)\n  nameWithType: Expression.Label(Type)\n  fullName: Expression.Label(Type)\n- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Label(LabelTarget, Expression)\n  nameWithType: Expression.Label(LabelTarget, Expression)\n  fullName: Expression.Label(LabelTarget, Expression)\n- uid: System.Linq.Expressions.Expression.Label(System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Label(Type, String)\n  nameWithType: Expression.Label(Type, String)\n  fullName: Expression.Label(Type, String)\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Type, Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Type, Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Type, Expression, String, Boolean, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Type, Expression, String, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Type, Expression, String, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Type, Expression, String, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Type, Expression, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Type, Expression, Boolean, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Type, Expression, Boolean, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Expression, String, Boolean, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Type, Expression, ParameterExpression[])\n  nameWithType: Expression.Lambda(Type, Expression, ParameterExpression[])\n  fullName: Expression.Lambda(Type, Expression, ParameterExpression[])\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Type, Expression, Boolean, ParameterExpression[])\n  nameWithType: Expression.Lambda(Type, Expression, Boolean, ParameterExpression[])\n  fullName: Expression.Lambda(Type, Expression, Boolean, ParameterExpression[])\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression, String, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression, String, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Expression, String, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression, Boolean, ParameterExpression[])\n  nameWithType: Expression.Lambda(Expression, Boolean, ParameterExpression[])\n  fullName: Expression.Lambda(Expression, Boolean, ParameterExpression[])\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression, Boolean, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Expression, Boolean, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Type, Expression, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Type, Expression, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression, ParameterExpression[])\n  nameWithType: Expression.Lambda(Expression, ParameterExpression[])\n  fullName: Expression.Lambda(Expression, ParameterExpression[])\n- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda(Expression, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda(Expression, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda(Expression, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda<TDelegate>(Expression, String, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda<TDelegate>(Expression, String, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda<TDelegate>(Expression, String, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])\n  nameWithType: Expression.Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])\n  fullName: Expression.Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda<TDelegate>(Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda<TDelegate>(Expression, String, Boolean, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda<TDelegate>(Expression, String, Boolean, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda<TDelegate>(Expression, ParameterExpression[])\n  nameWithType: Expression.Lambda<TDelegate>(Expression, ParameterExpression[])\n  fullName: Expression.Lambda<TDelegate>(Expression, ParameterExpression[])\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda<TDelegate>(Expression, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Lambda<TDelegate>(Expression, Boolean, IEnumerable<ParameterExpression>)\n  nameWithType: Expression.Lambda<TDelegate>(Expression, Boolean, IEnumerable<ParameterExpression>)\n  fullName: Expression.Lambda<TDelegate>(Expression, Boolean, IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LeftShift(Expression, Expression)\n  nameWithType: Expression.LeftShift(Expression, Expression)\n  fullName: Expression.LeftShift(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LeftShift(Expression, Expression, MethodInfo)\n  nameWithType: Expression.LeftShift(Expression, Expression, MethodInfo)\n  fullName: Expression.LeftShift(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LeftShiftAssign(Expression, Expression)\n  nameWithType: Expression.LeftShiftAssign(Expression, Expression)\n  fullName: Expression.LeftShiftAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LeftShiftAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.LeftShiftAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.LeftShiftAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LessThan(Expression, Expression)\n  nameWithType: Expression.LessThan(Expression, Expression)\n  fullName: Expression.LessThan(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LessThan(Expression, Expression, Boolean, MethodInfo)\n  nameWithType: Expression.LessThan(Expression, Expression, Boolean, MethodInfo)\n  fullName: Expression.LessThan(Expression, Expression, Boolean, MethodInfo)\n- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LessThanOrEqual(Expression, Expression)\n  nameWithType: Expression.LessThanOrEqual(Expression, Expression)\n  fullName: Expression.LessThanOrEqual(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: LessThanOrEqual(Expression, Expression, Boolean, MethodInfo)\n  nameWithType: Expression.LessThanOrEqual(Expression, Expression, Boolean, MethodInfo)\n  fullName: Expression.LessThanOrEqual(Expression, Expression, Boolean, MethodInfo)\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListBind(MethodInfo, ElementInit[])\n  nameWithType: Expression.ListBind(MethodInfo, ElementInit[])\n  fullName: Expression.ListBind(MethodInfo, ElementInit[])\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListBind(MethodInfo, IEnumerable<ElementInit>)\n  nameWithType: Expression.ListBind(MethodInfo, IEnumerable<ElementInit>)\n  fullName: Expression.ListBind(MethodInfo, IEnumerable<ElementInit>)\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListBind(MemberInfo, IEnumerable<ElementInit>)\n  nameWithType: Expression.ListBind(MemberInfo, IEnumerable<ElementInit>)\n  fullName: Expression.ListBind(MemberInfo, IEnumerable<ElementInit>)\n- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListBind(MemberInfo, ElementInit[])\n  nameWithType: Expression.ListBind(MemberInfo, ElementInit[])\n  fullName: Expression.ListBind(MemberInfo, ElementInit[])\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListInit(NewExpression, IEnumerable<ElementInit>)\n  nameWithType: Expression.ListInit(NewExpression, IEnumerable<ElementInit>)\n  fullName: Expression.ListInit(NewExpression, IEnumerable<ElementInit>)\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListInit(NewExpression, IEnumerable<Expression>)\n  nameWithType: Expression.ListInit(NewExpression, IEnumerable<Expression>)\n  fullName: Expression.ListInit(NewExpression, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListInit(NewExpression, ElementInit[])\n  nameWithType: Expression.ListInit(NewExpression, ElementInit[])\n  fullName: Expression.ListInit(NewExpression, ElementInit[])\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListInit(NewExpression, Expression[])\n  nameWithType: Expression.ListInit(NewExpression, Expression[])\n  fullName: Expression.ListInit(NewExpression, Expression[])\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListInit(NewExpression, MethodInfo, IEnumerable<Expression>)\n  nameWithType: Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>)\n  fullName: Expression.ListInit(NewExpression, MethodInfo, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ListInit(NewExpression, MethodInfo, Expression[])\n  nameWithType: Expression.ListInit(NewExpression, MethodInfo, Expression[])\n  fullName: Expression.ListInit(NewExpression, MethodInfo, Expression[])\n- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Loop(Expression)\n  nameWithType: Expression.Loop(Expression)\n  fullName: Expression.Loop(Expression)\n- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Loop(Expression, LabelTarget)\n  nameWithType: Expression.Loop(Expression, LabelTarget)\n  fullName: Expression.Loop(Expression, LabelTarget)\n- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Loop(Expression, LabelTarget, LabelTarget)\n  nameWithType: Expression.Loop(Expression, LabelTarget, LabelTarget)\n  fullName: Expression.Loop(Expression, LabelTarget, LabelTarget)\n- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeBinary(ExpressionType, Expression, Expression)\n  nameWithType: Expression.MakeBinary(ExpressionType, Expression, Expression)\n  fullName: Expression.MakeBinary(ExpressionType, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo)\n  nameWithType: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo)\n  fullName: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo)\n- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression)\n  nameWithType: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression)\n  fullName: Expression.MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeCatchBlock(Type, ParameterExpression, Expression, Expression)\n  nameWithType: Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression)\n  fullName: Expression.MakeCatchBlock(Type, ParameterExpression, Expression, Expression)\n- uid: System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)\n  nameWithType: Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)\n  fullName: Expression.MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)\n- uid: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>)\n  nameWithType: Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>)\n  fullName: Expression.MakeIndex(Expression, PropertyInfo, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeMemberAccess(Expression, MemberInfo)\n  nameWithType: Expression.MakeMemberAccess(Expression, MemberInfo)\n  fullName: Expression.MakeMemberAccess(Expression, MemberInfo)\n- uid: System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>)\n  nameWithType: Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>)\n  fullName: Expression.MakeTry(Type, Expression, Expression, Expression, IEnumerable<CatchBlock>)\n- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeUnary(ExpressionType, Expression, Type)\n  nameWithType: Expression.MakeUnary(ExpressionType, Expression, Type)\n  fullName: Expression.MakeUnary(ExpressionType, Expression, Type)\n- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MakeUnary(ExpressionType, Expression, Type, MethodInfo)\n  nameWithType: Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo)\n  fullName: Expression.MakeUnary(ExpressionType, Expression, Type, MethodInfo)\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MemberBind(MethodInfo, MemberBinding[])\n  nameWithType: Expression.MemberBind(MethodInfo, MemberBinding[])\n  fullName: Expression.MemberBind(MethodInfo, MemberBinding[])\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MemberBind(MethodInfo, IEnumerable<MemberBinding>)\n  nameWithType: Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>)\n  fullName: Expression.MemberBind(MethodInfo, IEnumerable<MemberBinding>)\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MemberBind(MemberInfo, IEnumerable<MemberBinding>)\n  nameWithType: Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>)\n  fullName: Expression.MemberBind(MemberInfo, IEnumerable<MemberBinding>)\n- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MemberBind(MemberInfo, MemberBinding[])\n  nameWithType: Expression.MemberBind(MemberInfo, MemberBinding[])\n  fullName: Expression.MemberBind(MemberInfo, MemberBinding[])\n- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MemberInit(NewExpression, IEnumerable<MemberBinding>)\n  nameWithType: Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>)\n  fullName: Expression.MemberInit(NewExpression, IEnumerable<MemberBinding>)\n- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MemberInit(NewExpression, MemberBinding[])\n  nameWithType: Expression.MemberInit(NewExpression, MemberBinding[])\n  fullName: Expression.MemberInit(NewExpression, MemberBinding[])\n- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Modulo(Expression, Expression)\n  nameWithType: Expression.Modulo(Expression, Expression)\n  fullName: Expression.Modulo(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Modulo(Expression, Expression, MethodInfo)\n  nameWithType: Expression.Modulo(Expression, Expression, MethodInfo)\n  fullName: Expression.Modulo(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ModuloAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.ModuloAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.ModuloAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ModuloAssign(Expression, Expression)\n  nameWithType: Expression.ModuloAssign(Expression, Expression)\n  fullName: Expression.ModuloAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Multiply(Expression, Expression, MethodInfo)\n  nameWithType: Expression.Multiply(Expression, Expression, MethodInfo)\n  fullName: Expression.Multiply(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Multiply(Expression, Expression)\n  nameWithType: Expression.Multiply(Expression, Expression)\n  fullName: Expression.Multiply(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyAssign(Expression, Expression)\n  nameWithType: Expression.MultiplyAssign(Expression, Expression)\n  fullName: Expression.MultiplyAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.MultiplyAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.MultiplyAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyAssignChecked(Expression, Expression)\n  nameWithType: Expression.MultiplyAssignChecked(Expression, Expression)\n  fullName: Expression.MultiplyAssignChecked(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyAssignChecked(Expression, Expression, MethodInfo)\n  nameWithType: Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo)\n  fullName: Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyChecked(Expression, Expression)\n  nameWithType: Expression.MultiplyChecked(Expression, Expression)\n  fullName: Expression.MultiplyChecked(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: MultiplyChecked(Expression, Expression, MethodInfo)\n  nameWithType: Expression.MultiplyChecked(Expression, Expression, MethodInfo)\n  fullName: Expression.MultiplyChecked(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Negate(Expression, MethodInfo)\n  nameWithType: Expression.Negate(Expression, MethodInfo)\n  fullName: Expression.Negate(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Negate(Expression)\n  nameWithType: Expression.Negate(Expression)\n  fullName: Expression.Negate(Expression)\n- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NegateChecked(Expression)\n  nameWithType: Expression.NegateChecked(Expression)\n  fullName: Expression.NegateChecked(Expression)\n- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NegateChecked(Expression, MethodInfo)\n  nameWithType: Expression.NegateChecked(Expression, MethodInfo)\n  fullName: Expression.NegateChecked(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: New(ConstructorInfo)\n  nameWithType: Expression.New(ConstructorInfo)\n  fullName: Expression.New(ConstructorInfo)\n- uid: System.Linq.Expressions.Expression.New(System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: New(Type)\n  nameWithType: Expression.New(Type)\n  fullName: Expression.New(Type)\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: New(ConstructorInfo, IEnumerable<Expression>)\n  nameWithType: Expression.New(ConstructorInfo, IEnumerable<Expression>)\n  fullName: Expression.New(ConstructorInfo, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: New(ConstructorInfo, Expression[])\n  nameWithType: Expression.New(ConstructorInfo, Expression[])\n  fullName: Expression.New(ConstructorInfo, Expression[])\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>)\n  nameWithType: Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>)\n  fullName: Expression.New(ConstructorInfo, IEnumerable<Expression>, IEnumerable<MemberInfo>)\n- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: New(ConstructorInfo, IEnumerable<Expression>, MemberInfo[])\n  nameWithType: Expression.New(ConstructorInfo, IEnumerable<Expression>, MemberInfo[])\n  fullName: Expression.New(ConstructorInfo, IEnumerable<Expression>, MemberInfo[])\n- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NewArrayBounds(Type, Expression[])\n  nameWithType: Expression.NewArrayBounds(Type, Expression[])\n  fullName: Expression.NewArrayBounds(Type, Expression[])\n- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NewArrayBounds(Type, IEnumerable<Expression>)\n  nameWithType: Expression.NewArrayBounds(Type, IEnumerable<Expression>)\n  fullName: Expression.NewArrayBounds(Type, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NewArrayInit(Type, IEnumerable<Expression>)\n  nameWithType: Expression.NewArrayInit(Type, IEnumerable<Expression>)\n  fullName: Expression.NewArrayInit(Type, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NewArrayInit(Type, Expression[])\n  nameWithType: Expression.NewArrayInit(Type, Expression[])\n  fullName: Expression.NewArrayInit(Type, Expression[])\n- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Not(Expression)\n  nameWithType: Expression.Not(Expression)\n  fullName: Expression.Not(Expression)\n- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Not(Expression, MethodInfo)\n  nameWithType: Expression.Not(Expression, MethodInfo)\n  fullName: Expression.Not(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NotEqual(Expression, Expression)\n  nameWithType: Expression.NotEqual(Expression, Expression)\n  fullName: Expression.NotEqual(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: NotEqual(Expression, Expression, Boolean, MethodInfo)\n  nameWithType: Expression.NotEqual(Expression, Expression, Boolean, MethodInfo)\n  fullName: Expression.NotEqual(Expression, Expression, Boolean, MethodInfo)\n- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OnesComplement(Expression)\n  nameWithType: Expression.OnesComplement(Expression)\n  fullName: Expression.OnesComplement(Expression)\n- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OnesComplement(Expression, MethodInfo)\n  nameWithType: Expression.OnesComplement(Expression, MethodInfo)\n  fullName: Expression.OnesComplement(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Or(Expression, Expression)\n  nameWithType: Expression.Or(Expression, Expression)\n  fullName: Expression.Or(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Or(Expression, Expression, MethodInfo)\n  nameWithType: Expression.Or(Expression, Expression, MethodInfo)\n  fullName: Expression.Or(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OrAssign(Expression, Expression)\n  nameWithType: Expression.OrAssign(Expression, Expression)\n  fullName: Expression.OrAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OrAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.OrAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.OrAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OrAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.OrAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OrElse(Expression, Expression)\n  nameWithType: Expression.OrElse(Expression, Expression)\n  fullName: Expression.OrElse(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: OrElse(Expression, Expression, MethodInfo)\n  nameWithType: Expression.OrElse(Expression, Expression, MethodInfo)\n  fullName: Expression.OrElse(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Parameter(System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Parameter(Type, String)\n  nameWithType: Expression.Parameter(Type, String)\n  fullName: Expression.Parameter(Type, String)\n- uid: System.Linq.Expressions.Expression.Parameter(System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Parameter(Type)\n  nameWithType: Expression.Parameter(Type)\n  fullName: Expression.Parameter(Type)\n- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PostDecrementAssign(Expression, MethodInfo)\n  nameWithType: Expression.PostDecrementAssign(Expression, MethodInfo)\n  fullName: Expression.PostDecrementAssign(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PostDecrementAssign(Expression)\n  nameWithType: Expression.PostDecrementAssign(Expression)\n  fullName: Expression.PostDecrementAssign(Expression)\n- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PostIncrementAssign(Expression)\n  nameWithType: Expression.PostIncrementAssign(Expression)\n  fullName: Expression.PostIncrementAssign(Expression)\n- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PostIncrementAssign(Expression, MethodInfo)\n  nameWithType: Expression.PostIncrementAssign(Expression, MethodInfo)\n  fullName: Expression.PostIncrementAssign(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Power(Expression, Expression)\n  nameWithType: Expression.Power(Expression, Expression)\n  fullName: Expression.Power(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Power(Expression, Expression, MethodInfo)\n  nameWithType: Expression.Power(Expression, Expression, MethodInfo)\n  fullName: Expression.Power(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PowerAssign(Expression, Expression)\n  nameWithType: Expression.PowerAssign(Expression, Expression)\n  fullName: Expression.PowerAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PowerAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.PowerAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.PowerAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PowerAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.PowerAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PreDecrementAssign(Expression)\n  nameWithType: Expression.PreDecrementAssign(Expression)\n  fullName: Expression.PreDecrementAssign(Expression)\n- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PreDecrementAssign(Expression, MethodInfo)\n  nameWithType: Expression.PreDecrementAssign(Expression, MethodInfo)\n  fullName: Expression.PreDecrementAssign(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PreIncrementAssign(Expression)\n  nameWithType: Expression.PreIncrementAssign(Expression)\n  fullName: Expression.PreIncrementAssign(Expression)\n- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PreIncrementAssign(Expression, MethodInfo)\n  nameWithType: Expression.PreIncrementAssign(Expression, MethodInfo)\n  fullName: Expression.PreIncrementAssign(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Property(Expression, String, Expression[])\n  nameWithType: Expression.Property(Expression, String, Expression[])\n  fullName: Expression.Property(Expression, String, Expression[])\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Property(Expression, PropertyInfo, Expression[])\n  nameWithType: Expression.Property(Expression, PropertyInfo, Expression[])\n  fullName: Expression.Property(Expression, PropertyInfo, Expression[])\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Property(Expression, PropertyInfo, IEnumerable<Expression>)\n  nameWithType: Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>)\n  fullName: Expression.Property(Expression, PropertyInfo, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Property(Expression, Type, String)\n  nameWithType: Expression.Property(Expression, Type, String)\n  fullName: Expression.Property(Expression, Type, String)\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Property(Expression, PropertyInfo)\n  nameWithType: Expression.Property(Expression, PropertyInfo)\n  fullName: Expression.Property(Expression, PropertyInfo)\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Property(Expression, MethodInfo)\n  nameWithType: Expression.Property(Expression, MethodInfo)\n  fullName: Expression.Property(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Property(Expression, String)\n  nameWithType: Expression.Property(Expression, String)\n  fullName: Expression.Property(Expression, String)\n- uid: System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: PropertyOrField(Expression, String)\n  nameWithType: Expression.PropertyOrField(Expression, String)\n  fullName: Expression.PropertyOrField(Expression, String)\n- uid: System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Quote(Expression)\n  nameWithType: Expression.Quote(Expression)\n  fullName: Expression.Quote(Expression)\n- uid: System.Linq.Expressions.Expression.Reduce\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Reduce()\n  nameWithType: Expression.Reduce()\n  fullName: Expression.Reduce()\n- uid: System.Linq.Expressions.Expression.ReduceAndCheck\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ReduceAndCheck()\n  nameWithType: Expression.ReduceAndCheck()\n  fullName: Expression.ReduceAndCheck()\n- uid: System.Linq.Expressions.Expression.ReduceExtensions\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ReduceExtensions()\n  nameWithType: Expression.ReduceExtensions()\n  fullName: Expression.ReduceExtensions()\n- uid: System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ReferenceEqual(Expression, Expression)\n  nameWithType: Expression.ReferenceEqual(Expression, Expression)\n  fullName: Expression.ReferenceEqual(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: ReferenceNotEqual(Expression, Expression)\n  nameWithType: Expression.ReferenceNotEqual(Expression, Expression)\n  fullName: Expression.ReferenceNotEqual(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Rethrow(System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Rethrow(Type)\n  nameWithType: Expression.Rethrow(Type)\n  fullName: Expression.Rethrow(Type)\n- uid: System.Linq.Expressions.Expression.Rethrow\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Rethrow()\n  nameWithType: Expression.Rethrow()\n  fullName: Expression.Rethrow()\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Return(LabelTarget)\n  nameWithType: Expression.Return(LabelTarget)\n  fullName: Expression.Return(LabelTarget)\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Return(LabelTarget, Expression)\n  nameWithType: Expression.Return(LabelTarget, Expression)\n  fullName: Expression.Return(LabelTarget, Expression)\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Return(LabelTarget, Type)\n  nameWithType: Expression.Return(LabelTarget, Type)\n  fullName: Expression.Return(LabelTarget, Type)\n- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Return(LabelTarget, Expression, Type)\n  nameWithType: Expression.Return(LabelTarget, Expression, Type)\n  fullName: Expression.Return(LabelTarget, Expression, Type)\n- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RightShift(Expression, Expression)\n  nameWithType: Expression.RightShift(Expression, Expression)\n  fullName: Expression.RightShift(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RightShift(Expression, Expression, MethodInfo)\n  nameWithType: Expression.RightShift(Expression, Expression, MethodInfo)\n  fullName: Expression.RightShift(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RightShiftAssign(Expression, Expression)\n  nameWithType: Expression.RightShiftAssign(Expression, Expression)\n  fullName: Expression.RightShiftAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RightShiftAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.RightShiftAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.RightShiftAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RuntimeVariables(ParameterExpression[])\n  nameWithType: Expression.RuntimeVariables(ParameterExpression[])\n  fullName: Expression.RuntimeVariables(ParameterExpression[])\n- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: RuntimeVariables(IEnumerable<ParameterExpression>)\n  nameWithType: Expression.RuntimeVariables(IEnumerable<ParameterExpression>)\n  fullName: Expression.RuntimeVariables(IEnumerable<ParameterExpression>)\n- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Subtract(Expression, Expression)\n  nameWithType: Expression.Subtract(Expression, Expression)\n  fullName: Expression.Subtract(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Subtract(Expression, Expression, MethodInfo)\n  nameWithType: Expression.Subtract(Expression, Expression, MethodInfo)\n  fullName: Expression.Subtract(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractAssign(Expression, Expression)\n  nameWithType: Expression.SubtractAssign(Expression, Expression)\n  fullName: Expression.SubtractAssign(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractAssign(Expression, Expression, MethodInfo)\n  nameWithType: Expression.SubtractAssign(Expression, Expression, MethodInfo)\n  fullName: Expression.SubtractAssign(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  nameWithType: Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n  fullName: Expression.SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)\n- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractAssignChecked(Expression, Expression)\n  nameWithType: Expression.SubtractAssignChecked(Expression, Expression)\n  fullName: Expression.SubtractAssignChecked(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractAssignChecked(Expression, Expression, MethodInfo)\n  nameWithType: Expression.SubtractAssignChecked(Expression, Expression, MethodInfo)\n  fullName: Expression.SubtractAssignChecked(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractChecked(Expression, Expression, MethodInfo)\n  nameWithType: Expression.SubtractChecked(Expression, Expression, MethodInfo)\n  fullName: Expression.SubtractChecked(Expression, Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SubtractChecked(Expression, Expression)\n  nameWithType: Expression.SubtractChecked(Expression, Expression)\n  fullName: Expression.SubtractChecked(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Switch(Type, Expression, Expression, MethodInfo, SwitchCase[])\n  nameWithType: Expression.Switch(Type, Expression, Expression, MethodInfo, SwitchCase[])\n  fullName: Expression.Switch(Type, Expression, Expression, MethodInfo, SwitchCase[])\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Switch(Expression, SwitchCase[])\n  nameWithType: Expression.Switch(Expression, SwitchCase[])\n  fullName: Expression.Switch(Expression, SwitchCase[])\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Switch(Expression, Expression, SwitchCase[])\n  nameWithType: Expression.Switch(Expression, Expression, SwitchCase[])\n  fullName: Expression.Switch(Expression, Expression, SwitchCase[])\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)\n  nameWithType: Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)\n  fullName: Expression.Switch(Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)\n- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Switch(Expression, Expression, MethodInfo, SwitchCase[])\n  nameWithType: Expression.Switch(Expression, Expression, MethodInfo, SwitchCase[])\n  fullName: Expression.Switch(Expression, Expression, MethodInfo, SwitchCase[])\n- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)\n  nameWithType: Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)\n  fullName: Expression.Switch(Type, Expression, Expression, MethodInfo, IEnumerable<SwitchCase>)\n- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SwitchCase(Expression, Expression[])\n  nameWithType: Expression.SwitchCase(Expression, Expression[])\n  fullName: Expression.SwitchCase(Expression, Expression[])\n- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SwitchCase(Expression, IEnumerable<Expression>)\n  nameWithType: Expression.SwitchCase(Expression, IEnumerable<Expression>)\n  fullName: Expression.SwitchCase(Expression, IEnumerable<Expression>)\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SymbolDocument(String, Guid, Guid, Guid)\n  nameWithType: Expression.SymbolDocument(String, Guid, Guid, Guid)\n  fullName: Expression.SymbolDocument(String, Guid, Guid, Guid)\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SymbolDocument(String, Guid, Guid)\n  nameWithType: Expression.SymbolDocument(String, Guid, Guid)\n  fullName: Expression.SymbolDocument(String, Guid, Guid)\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SymbolDocument(String)\n  nameWithType: Expression.SymbolDocument(String)\n  fullName: Expression.SymbolDocument(String)\n- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: SymbolDocument(String, Guid)\n  nameWithType: Expression.SymbolDocument(String, Guid)\n  fullName: Expression.SymbolDocument(String, Guid)\n- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Throw(Expression)\n  nameWithType: Expression.Throw(Expression)\n  fullName: Expression.Throw(Expression)\n- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Throw(Expression, Type)\n  nameWithType: Expression.Throw(Expression, Type)\n  fullName: Expression.Throw(Expression, Type)\n- uid: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryCatch(Expression, CatchBlock[])\n  nameWithType: Expression.TryCatch(Expression, CatchBlock[])\n  fullName: Expression.TryCatch(Expression, CatchBlock[])\n- uid: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryCatchFinally(Expression, Expression, CatchBlock[])\n  nameWithType: Expression.TryCatchFinally(Expression, Expression, CatchBlock[])\n  fullName: Expression.TryCatchFinally(Expression, Expression, CatchBlock[])\n- uid: System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryFault(Expression, Expression)\n  nameWithType: Expression.TryFault(Expression, Expression)\n  fullName: Expression.TryFault(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryFinally(Expression, Expression)\n  nameWithType: Expression.TryFinally(Expression, Expression)\n  fullName: Expression.TryFinally(Expression, Expression)\n- uid: System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryGetActionType(Type[], Type)\n  nameWithType: Expression.TryGetActionType(Type[], Type)\n  fullName: Expression.TryGetActionType(Type[], Type)\n- uid: System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TryGetFuncType(Type[], Type)\n  nameWithType: Expression.TryGetFuncType(Type[], Type)\n  fullName: Expression.TryGetFuncType(Type[], Type)\n- uid: System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TypeAs(Expression, Type)\n  nameWithType: Expression.TypeAs(Expression, Type)\n  fullName: Expression.TypeAs(Expression, Type)\n- uid: System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TypeEqual(Expression, Type)\n  nameWithType: Expression.TypeEqual(Expression, Type)\n  fullName: Expression.TypeEqual(Expression, Type)\n- uid: System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: TypeIs(Expression, Type)\n  nameWithType: Expression.TypeIs(Expression, Type)\n  fullName: Expression.TypeIs(Expression, Type)\n- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: UnaryPlus(Expression, MethodInfo)\n  nameWithType: Expression.UnaryPlus(Expression, MethodInfo)\n  fullName: Expression.UnaryPlus(Expression, MethodInfo)\n- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: UnaryPlus(Expression)\n  nameWithType: Expression.UnaryPlus(Expression)\n  fullName: Expression.UnaryPlus(Expression)\n- uid: System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Unbox(Expression, Type)\n  nameWithType: Expression.Unbox(Expression, Type)\n  fullName: Expression.Unbox(Expression, Type)\n- uid: System.Linq.Expressions.Expression.Variable(System.Type,System.String)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Variable(Type, String)\n  nameWithType: Expression.Variable(Type, String)\n  fullName: Expression.Variable(Type, String)\n- uid: System.Linq.Expressions.Expression.Variable(System.Type)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: Variable(Type)\n  nameWithType: Expression.Variable(Type)\n  fullName: Expression.Variable(Type)\n- uid: System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)\n  parent: System.Linq.Expressions.Expression\n  isExternal: false\n  name: VisitChildren(ExpressionVisitor)\n  nameWithType: Expression.VisitChildren(ExpressionVisitor)\n  fullName: Expression.VisitChildren(ExpressionVisitor)\n- uid: System.Linq.Expressions.IDynamicExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: IDynamicExpression\n  nameWithType: IDynamicExpression\n  fullName: System.Linq.Expressions.IDynamicExpression\n"}