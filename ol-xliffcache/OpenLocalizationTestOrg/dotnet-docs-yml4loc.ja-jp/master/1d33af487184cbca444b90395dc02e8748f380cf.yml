### YamlMime:ManagedReference
items:
- uid: System.Web.Caching.CacheDependency
  commentId: T:System.Web.Caching.CacheDependency
  id: CacheDependency
  children:
  - System.Web.Caching.CacheDependency.#ctor
  - System.Web.Caching.CacheDependency.#ctor(System.String)
  - System.Web.Caching.CacheDependency.#ctor(System.String[])
  - System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)
  - System.Web.Caching.CacheDependency.DependencyDispose
  - System.Web.Caching.CacheDependency.Dispose
  - System.Web.Caching.CacheDependency.FinishInit
  - System.Web.Caching.CacheDependency.GetFileDependencies
  - System.Web.Caching.CacheDependency.GetUniqueID
  - System.Web.Caching.CacheDependency.HasChanged
  - System.Web.Caching.CacheDependency.ItemRemoved
  - System.Web.Caching.CacheDependency.KeepDependenciesAlive
  - System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)
  - System.Web.Caching.CacheDependency.SetCacheDependencyChanged(System.Action{System.Object,System.EventArgs})
  - System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)
  - System.Web.Caching.CacheDependency.TakeOwnership
  - System.Web.Caching.CacheDependency.UtcLastModified
  langs:
  - csharp
  name: CacheDependency
  nameWithType: CacheDependency
  fullName: System.Web.Caching.CacheDependency
  type: Class
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Establishes a dependency relationship between an item stored in an ASP.NET application's <xref href="System.Web.Caching.Cache"></xref> object and a file, cache key, an array of either, or another <xref href="System.Web.Caching.CacheDependency"></xref> object. The <xref href="System.Web.Caching.CacheDependency"></xref> class monitors the dependency relationships so that when any of them changes, the cached item will be automatically removed.
  remarks: "If you add an item to the cache that is dependent on another object, such as a file or array of files, the dependent item is automatically removed from the cache when the object changes. For example, suppose you create a <xref:System.Data.DataSet> object based on data in an XML file. You can add the <xref:System.Data.DataSet> to the cache with a <xref:System.Web.Caching.CacheDependency> object that makes the <xref:System.Data.DataSet> dependent on the XML file. If the XML file changes, the <xref:System.Data.DataSet> is removed from the cache.  \n  \n You can add items with dependencies to your application's cache with the <xref:System.Web.Caching.Cache.Add%2A> and <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> methods. You cannot use the <xref:System.Web.Caching.Cache.Item%2A> property to add items to the cache with dependencies.  \n  \n To set up a dependency, you create an instance of the <xref:System.Web.Caching.CacheDependency> class, specifying the files, keys, or directories on which the item is dependent, and then pass the dependency to the <xref:System.Web.Caching.Cache.Add%2A> or <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method. The <xref:System.Web.Caching.CacheDependency> instance can represent a single file or directory, an array of files or directories, or an array of files or directories along with an array of cache keys (these represent other items stored in the <xref:System.Web.Caching.Cache> object)."
  example:
  - "The following code example demonstrates using the <xref:System.Web.Caching.CacheDependency.HasChanged%2A> property to determine whether a <xref:System.Web.Caching.CacheDependency> changed since the previous request for an item in the <xref:System.Web.Caching.Cache>. The `dt` value passed in the `start` parameter is set to <xref:System.DateTime.Now%2A?displayProperty=fullName>.  \n  \n [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]\n [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]"
  syntax:
    content: 'public class CacheDependency : IDisposable'
  inheritance:
  - System.Object
  derivedClasses:
  - System.Web.Caching.AggregateCacheDependency
  - System.Web.Caching.SqlCacheDependency
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.Caching.CacheDependency.#ctor
  commentId: M:System.Web.Caching.CacheDependency.#ctor
  id: '#ctor'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency()
  nameWithType: CacheDependency.CacheDependency()
  fullName: CacheDependency.CacheDependency()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Initializes a new instance of the <xref href="System.Web.Caching.CacheDependency"></xref> class.
  remarks: If you want to derive your own class from <xref:System.Web.Caching.CacheDependency>, implement this version of the <xref:System.Web.Caching.CacheDependency.%23ctor%2A> constructor.
  example:
  - "The following code example is a class that implements this version of the <xref:System.Web.Caching.CacheDependency> constructor as all classes that derive from <xref:System.Web.Caching.CacheDependency> are required to.  \n  \n [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]"
  syntax:
    content: protected CacheDependency ();
    parameters: []
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.Caching.CacheDependency.#ctor(System.String)
  commentId: M:System.Web.Caching.CacheDependency.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String)
  nameWithType: CacheDependency.CacheDependency(String)
  fullName: CacheDependency.CacheDependency(String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Initializes a new instance of the <xref href="System.Web.Caching.CacheDependency"></xref> class that monitors a file or directory for changes.
  remarks: "If the directory or file specified in the `filename` parameter is not found in the file system, it will be treated as missing. If the directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when the directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file."
  example:
  - "The following code example creates an instance of the <xref:System.Web.Caching.CacheDependency> class with a dependency on an XML file. The <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method then adds an item to the <xref:System.Web.Caching.Cache> that is dependent upon that file.  \n  \n [!code-csharp[Classic CacheDependency.CacheDependency Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic CacheDependency.CacheDependency Example/CS/source.cs#1)]\n [!code-vb[Classic CacheDependency.CacheDependency Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic CacheDependency.CacheDependency Example/VB/source.vb#1)]  \n  \n You can also use the following technique to add an item to the <xref:System.Web.Caching.Cache> with a dependency on a file.  \n  \n [!code-csharp[Single File Dependency Cache entry#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Single File Dependency Cache entry/CS/DependencySingleFilecs.aspx#1)]\n [!code-vb[Single File Dependency Cache entry#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Single File Dependency Cache entry/VB/DependencySingleFilevb.aspx#1)]"
  syntax:
    content: public CacheDependency (string filename);
    parameters:
    - id: filename
      type: System.String
      description: The path to a file or directory that the cached object is dependent upon. When this resource changes, the cached object becomes obsolete and is removed from the cache.
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[])
  commentId: M:System.Web.Caching.CacheDependency.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[])
  nameWithType: CacheDependency.CacheDependency(String[])
  fullName: CacheDependency.CacheDependency(String[])
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Initializes a new instance of the <xref href="System.Web.Caching.CacheDependency"></xref> class that monitors an array of paths (to files or directories) for changes.
  remarks: "If any of the files or directories in the array changes or is removed from the array, the cached item becomes obsolete and is removed from the application's <xref:System.Web.Caching.Cache> object.  \n  \n Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  When you create the array that contains the file dependencies, you must define the number of files that the item you are adding to the <xref:System.Web.Caching.Cache> is dependent on."
  example:
  - "The following code example demonstrates how to use the <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method to add an item to the <xref:System.Web.Caching.Cache> with dependencies on an array of files. You can also make the item dependent on an array of directories.  \n  \n [!code-csharp[Multiple file based dependency#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Multiple file based dependency/CS/DependencyMultiFilecs.aspx#1)]\n [!code-vb[Multiple file based dependency#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Multiple file based dependency/VB/DependencyMultiFilevb.aspx#1)]"
  syntax:
    content: public CacheDependency (string[] filenames);
    parameters:
    - id: filenames
      type: System.String[]
      description: An array of paths (to files or directories) that the cached object is dependent upon. When any of these resources changes, the cached object becomes obsolete and is removed from the cache.
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)
  commentId: M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)
  id: '#ctor(System.String,System.DateTime)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String, DateTime)
  nameWithType: CacheDependency.CacheDependency(String, DateTime)
  fullName: CacheDependency.CacheDependency(String, DateTime)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Initializes a new instance of the <xref href="System.Web.Caching.CacheDependency"></xref> class that monitors a file or directory for changes.
  remarks: "If the directory or file specified in the `filename` parameter is not found in the file system, it will be treated as missing. If the directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when the directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  Change tracking begins immediately and is not directly based on the `start` parameter. Use the `start` parameter to pass a date and time in the past against which you want to check the last modified date of the directory or file passed in the `filename` parameter. If the last modified date is later than the date and time set passed in the `start` parameter, the cached item is removed from the <xref:System.Web.Caching.Cache>."
  example:
  - "The following code example uses this constructor to instantiate a <xref:System.Web.Caching.CacheDependency> object, then inserts an item into the <xref:System.Web.Caching.Cache> with that dependency. The `dt` value passed in the `start` parameter is set to <xref:System.DateTime.Now%2A?displayProperty=fullName>.  \n  \n [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]\n [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]"
  syntax:
    content: public CacheDependency (string filename, DateTime start);
    parameters:
    - id: filename
      type: System.String
      description: The path to a file or directory that the cached object is dependent upon. When this resource changes, the cached object becomes obsolete and is removed from the cache.
    - id: start
      type: System.DateTime
      description: The time against which to check the last modified date of the directory or file.
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)
  commentId: M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)
  id: '#ctor(System.String[],System.DateTime)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[], DateTime)
  nameWithType: CacheDependency.CacheDependency(String[], DateTime)
  fullName: CacheDependency.CacheDependency(String[], DateTime)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Initializes a new instance of the <xref href="System.Web.Caching.CacheDependency"></xref> class that monitors an array of paths (to files or directories) for changes and specifies a time when change monitoring begins.
  remarks: "If any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  Change tracking begins immediately and is not directly based on the `start` parameter. Use the `start` parameter to pass a date and time in the past against which you want to check the last modified date of the array passed in the `filenames` parameter. If the last modified date of any object in the array is later than the date and time set passed in the `start` parameter, the cached item is removed from the <xref:System.Web.Caching.Cache>."
  example:
  - "The following code example creates a <xref:System.Web.Caching.CacheDependency> object that passes two XML files and a <xref:System.DateTime.Now%2A?displayProperty=fullName> value when the object is included as a parameter argument in an <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method call.  \n  \n [!code-csharp[CacheDependency Constructor4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor4/CS/depmultifilestimecs.aspx#1)]\n [!code-vb[CacheDependency Constructor4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor4/VB/depmultifilestimevb.aspx#1)]"
  syntax:
    content: public CacheDependency (string[] filenames, DateTime start);
    parameters:
    - id: filenames
      type: System.String[]
      description: An array of paths (to files or directories) that the cached object is dependent upon. When any of these resources changes, the cached object becomes obsolete and is removed from the cache.
    - id: start
      type: System.DateTime
      description: The time against which to check the last modified date of the objects in the array.
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])
  commentId: M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])
  id: '#ctor(System.String[],System.String[])'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[], String[])
  nameWithType: CacheDependency.CacheDependency(String[], String[])
  fullName: CacheDependency.CacheDependency(String[], String[])
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Initializes a new instance of the <xref href="System.Web.Caching.CacheDependency"></xref> class that monitors an array of paths (to files or directories), an array of cache keys, or both for changes.
  remarks: "Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file."
  example:
  - "The following code fragment demonstrates how to insert an item into your application's <xref:System.Web.Caching.Cache> with a dependency on a key to another item placed in the cache. Since this method uses array syntax, you must define the number of keys on which the item you are adding to the <xref:System.Web.Caching.Cache> is dependent.  \n  \n [!code-csharp[Key based dependency#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Key based dependency/CS/DependencyKeycs.aspx#1)]\n [!code-vb[Key based dependency#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Key based dependency/VB/DependencyKeyvb.aspx#1)]"
  syntax:
    content: public CacheDependency (string[] filenames, string[] cachekeys);
    parameters:
    - id: filenames
      type: System.String[]
      description: An array of paths (to files or directories) that the cached object is dependent upon. When any of these resources changes, the cached object becomes obsolete and is removed from the cache.
    - id: cachekeys
      type: System.String[]
      description: An array of cache keys that the new object monitors for changes. When any of these cache keys changes, the cached object associated with this dependency object becomes obsolete and is removed from the cache.
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)
  commentId: M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)
  id: '#ctor(System.String[],System.String[],System.DateTime)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[], String[], DateTime)
  nameWithType: CacheDependency.CacheDependency(String[], String[], DateTime)
  fullName: CacheDependency.CacheDependency(String[], String[], DateTime)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Initializes a new instance of the <xref href="System.Web.Caching.CacheDependency"></xref> class that monitors an array of paths (to files or directories), an array of cache keys, or both for changes.
  remarks: "Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  Change tracking begins immediately and is not directly based on the `start` parameter. Use the `start` parameter to pass a date and time in the past against which you want to check the last modified date of any object passed in the `filenames` or `cachekeys` parameters. If the last modified date of any of those objects is later than the date and time set passed in the `start` parameter, the cached item is removed from the <xref:System.Web.Caching.Cache>."
  example:
  - "The following code example creates a `CreateDependency` method. When this method is called, it creates a <xref:System.DateTime> object and the <xref:System.Web.Caching.Cache.Item%2A?displayProperty=fullName> property is used to add an item to the cache with a `key` parameter of `key1` and a value of `Value 1`. An array of strings, `dependencyKey`, is then created with the value of `key1` as well. This <xref:System.Web.Caching.CacheDependency> constructor then instantiates a <xref:System.Web.Caching.CacheDependency> object that passes `dependencyKey` and the <xref:System.DateTime> object as parameter arguments. The <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method is called next, using the <xref:System.Web.Caching.CacheDependency> object as a parameter. This makes the object added to the cache using the <xref:System.Web.Caching.Cache.Insert%2A> method dependent on the `key1` key.  \n  \n [!code-csharp[CacheDependency Constructor6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor6/CS/depkeytimecs.aspx#1)]\n [!code-vb[CacheDependency Constructor6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor6/VB/depkeytimevb.aspx#1)]"
  syntax:
    content: public CacheDependency (string[] filenames, string[] cachekeys, DateTime start);
    parameters:
    - id: filenames
      type: System.String[]
      description: An array of paths (to files or directories) that the cached object is dependent upon. When any of these resources changes, the cached object becomes obsolete and is removed from the cache.
    - id: cachekeys
      type: System.String[]
      description: An array of cache keys that the new object monitors for changes. When any of these cache keys changes, the cached object associated with this dependency object becomes obsolete and is removed from the cache.
    - id: start
      type: System.DateTime
      description: The date and time against which to check the last modified date of the objects passed in the <code>filenames</code> and <code>cachekeys</code> arrays.
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)
  commentId: M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)
  id: '#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[], String[], CacheDependency)
  nameWithType: CacheDependency.CacheDependency(String[], String[], CacheDependency)
  fullName: CacheDependency.CacheDependency(String[], String[], CacheDependency)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Initializes a new instance of the <xref href="System.Web.Caching.CacheDependency"></xref> class that monitors an array of paths (to files or directories), an array of cache keys, or both for changes. It also makes itself dependent upon a separate instance of the <xref href="System.Web.Caching.CacheDependency"></xref> class.
  remarks: "Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file."
  example:
  - "The following code example creates a `CreateDependency` method. When this method is called, it uses the <xref:System.Web.Caching.Cache.Item%2A?displayProperty=fullName> property to add an item to the cache with a `key` parameter of `key1` and a value of `Value 1`. An array of strings, `dependencyKey`, is then created with the value of `key1` as well. The <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=fullName> constructor is used to create a <xref:System.Web.Caching.CacheDependency> object, `dep1`, which passes `dependencyKey` as a parameter argument. A second <xref:System.Web.Caching.CacheDependency> object, `dep2`, is created using this constructor, with `dep1` passed as the third parameter argument. This second dependency is dependent on the first. The <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method is called next, using the second <xref:System.Web.Caching.CacheDependency> object as a parameter. If the first dependency changes in any way, the cached item will be invalidated.  \n  \n [!code-csharp[CacheDependency Constructor7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor7/CS/dependencycs.aspx#1)]\n [!code-vb[CacheDependency Constructor7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor7/VB/dependencyvb.aspx#1)]"
  syntax:
    content: public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency);
    parameters:
    - id: filenames
      type: System.String[]
      description: An array of paths (to files or directories) that the cached object is dependent upon. When any of these resources changes, the cached object becomes obsolete and is removed from the cache.
    - id: cachekeys
      type: System.String[]
      description: An array of cache keys that the new object monitors for changes. When any of these cache keys changes, the cached object associated with this dependency object becomes obsolete and is removed from the cache.
    - id: dependency
      type: System.Web.Caching.CacheDependency
      description: Another instance of the <xref href="System.Web.Caching.CacheDependency"></xref> class that this instance is dependent upon.
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)
  commentId: M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)
  id: '#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[], String[], CacheDependency, DateTime)
  nameWithType: CacheDependency.CacheDependency(String[], String[], CacheDependency, DateTime)
  fullName: CacheDependency.CacheDependency(String[], String[], CacheDependency, DateTime)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Initializes a new instance of the <xref href="System.Web.Caching.CacheDependency"></xref> class that monitors an array of paths (to files or directories), an array of cache keys, or both for changes. It also makes itself dependent upon another instance of the <xref href="System.Web.Caching.CacheDependency"></xref> class and a time when the change monitoring begins.
  remarks: "Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  Change tracking begins immediately and is not directly based on the `start` parameter. Use the `start` parameter to pass a date and time in the past against which you want to check the last modified date of any of the objects passed in the `filenames`, `cachekeys`, or `dependency` parameters. If the last modified date for any of those objects is later than the date and time passed in the `start` parameter, the cached item is removed from the <xref:System.Web.Caching.Cache>."
  example:
  - "The following code example shows a `CreateDependency` method. When this method is called, it creates a <xref:System.DateTime> object and the <xref:System.Web.Caching.Cache.Item%2A?displayProperty=fullName> property is used to add an item to the cache with a key parameter of `key1` and a value of `Value 1`. An array of strings, `dependencyKey`, is then created with the value at its first (and only) index set to the value of `key1` as well. The <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=fullName> constructor is then used to create a <xref:System.Web.Caching.CacheDependency> object, `dep1`, which passes `dependencyKey` as a parameter argument. A second <xref:System.Web.Caching.CacheDependency> object, `dep2`, is then created using this constructor, with `dep1` and the <xref:System.DateTime> object passed as parameter arguments. This second dependency is dependent on the first, and dependency monitoring will begin 10 seconds after the `CreateDependency` method is called. The <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method is called next, using the second <xref:System.Web.Caching.CacheDependency> object as a parameter. If the first dependency changes in any way, the cached item will be invalidated.  \n  \n [!code-csharp[CacheDependency Constructor8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor8/CS/dependencytimecs.aspx#1)]\n [!code-vb[CacheDependency Constructor8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor8/VB/dependencytimevb.aspx#1)]"
  syntax:
    content: public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency, DateTime start);
    parameters:
    - id: filenames
      type: System.String[]
      description: An array of paths (to files or directories) that the cached object is dependent upon. When any of these resources changes, the cached object becomes obsolete and is removed from the cache.
    - id: cachekeys
      type: System.String[]
      description: An array of cache keys that the new object monitors for changes. When any of these cache keys changes, the cached object associated with this dependency object becomes obsolete and is removed from the cache.
    - id: dependency
      type: System.Web.Caching.CacheDependency
      description: Another instance of the <xref href="System.Web.Caching.CacheDependency"></xref> class that this instance is dependent upon.
    - id: start
      type: System.DateTime
      description: The time against which to check the last modified date of the objects in the arrays and the <xref href="System.Web.Caching.CacheDependency"></xref> object.
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.Caching.CacheDependency.DependencyDispose
  commentId: M:System.Web.Caching.CacheDependency.DependencyDispose
  id: DependencyDispose
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: DependencyDispose()
  nameWithType: CacheDependency.DependencyDispose()
  fullName: CacheDependency.DependencyDispose()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Releases the resources used by the <xref href="System.Web.Caching.CacheDependency"></xref> class and any classes that derive from <xref href="System.Web.Caching.CacheDependency"></xref>.
  remarks: Any class that derives from the <xref:System.Web.Caching.CacheDependency> class is required to implement this method to clean up resources the derived class has used.
  example:
  - "The following code example shows a class that inherits from the <xref:System.Web.Caching.CacheDependency> class and overrides the <xref:System.Web.Caching.CacheDependency.DependencyDispose%2A> method. When this method is called, it sets a custom Boolean property named `Disposed` to `true`.  \n  \n [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]"
  syntax:
    content: protected virtual void DependencyDispose ();
    parameters: []
  overload: System.Web.Caching.CacheDependency.DependencyDispose*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.Caching.CacheDependency.Dispose
  commentId: M:System.Web.Caching.CacheDependency.Dispose
  id: Dispose
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: Dispose()
  nameWithType: CacheDependency.Dispose()
  fullName: CacheDependency.Dispose()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Releases the resources used by the <xref href="System.Web.Caching.CacheDependency"></xref> object.
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Web.Caching.CacheDependency.Dispose*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.Caching.CacheDependency.FinishInit
  commentId: M:System.Web.Caching.CacheDependency.FinishInit
  id: FinishInit
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: FinishInit()
  nameWithType: CacheDependency.FinishInit()
  fullName: CacheDependency.FinishInit()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Completes initialization of the <xref href="System.Web.Caching.CacheDependency"></xref> object.
  remarks: The <xref:System.Web.Caching.CacheDependency.FinishInit%2A> method completes the initialization of the <xref:System.Web.Caching.CacheDependency> object. This method is called by all <xref:System.Web.Caching.CacheDependency> constructors.
  syntax:
    content: protected void FinishInit ();
    parameters: []
  overload: System.Web.Caching.CacheDependency.FinishInit*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.Caching.CacheDependency.GetFileDependencies
  commentId: M:System.Web.Caching.CacheDependency.GetFileDependencies
  id: GetFileDependencies
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: GetFileDependencies()
  nameWithType: CacheDependency.GetFileDependencies()
  fullName: CacheDependency.GetFileDependencies()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Gets the file dependencies.
  syntax:
    content: public virtual string[] GetFileDependencies ();
    parameters: []
    return:
      type: System.String[]
      description: The file dependencies.
  overload: System.Web.Caching.CacheDependency.GetFileDependencies*
  exceptions: []
  version:
  - netframework-4.6.2
  - netframework-4.7
  monikers:
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.Caching.CacheDependency.GetUniqueID
  commentId: M:System.Web.Caching.CacheDependency.GetUniqueID
  id: GetUniqueID
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: GetUniqueID()
  nameWithType: CacheDependency.GetUniqueID()
  fullName: CacheDependency.GetUniqueID()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Retrieves a unique identifier for a <xref href="System.Web.Caching.CacheDependency"></xref> object.
  remarks: "This method can be particularly useful for tracking multiple instances of the <xref:System.Web.Caching.CacheDependency> class associated with an item or an application.  \n  \n The identifier is a combination of either the file name (for a file dependency) or the key name (for a cache-key dependency) and a string that this method assigns to the dependency. In classes that derive from the <xref:System.Web.Caching.CacheDependency> class, you can override this method to customize how it generates the unique identifier."
  example:
  - "The following code example creates an <xref:System.Web.Caching.AggregateCacheDependency> object, named `aggDep`, with two <xref:System.Web.Caching.CacheDependency> objects in its array. Once `aggDep` is instantiated, the code calls the <xref:System.Web.Caching.CacheDependency.GetUniqueID%2A> method to generate a unique identifier for both dependencies that `aggDep` contains and displays the identifiers to the containing page. An item is then added to the <xref:System.Web.Caching.Cache>, using the <xref:System.Web.Caching.Cache.Insert%2A> method, with `aggDep` as a dependency.  \n  \n [!code-vb[CachingSamples_AggregateCacheDependency1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CachingSamples_AggregateCacheDependency1/VB/aggregatecachedependencysamplevb.aspx#3)]"
  syntax:
    content: public virtual string GetUniqueID ();
    parameters: []
    return:
      type: System.String
      description: The unique identifier for the <xref href="System.Web.Caching.CacheDependency"></xref> object.
  overload: System.Web.Caching.CacheDependency.GetUniqueID*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.Caching.CacheDependency.HasChanged
  commentId: P:System.Web.Caching.CacheDependency.HasChanged
  id: HasChanged
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: HasChanged
  nameWithType: CacheDependency.HasChanged
  fullName: CacheDependency.HasChanged
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Gets a value indicating whether the <xref href="System.Web.Caching.CacheDependency"></xref> object has changed.
  remarks: You can add an item to an ASP.NET application's <xref:System.Web.Caching.Cache> with a <xref:System.Web.Caching.CacheDependency>. When the <xref:System.Web.Caching.CacheDependency> changes, the item added to the <xref:System.Web.Caching.Cache> is invalidated and removed from the cache. You can use this property to determine whether a <xref:System.Web.Caching.CacheDependency> has changed, and recreate the item in the <xref:System.Web.Caching.Cache> if that has occurred.
  example:
  - "The following code example demonstrates using the <xref:System.Web.Caching.CacheDependency.HasChanged%2A> property to determine whether a <xref:System.Web.Caching.CacheDependency> changed since the previous request for an item in the <xref:System.Web.Caching.Cache>. The `dt` value passed in the `start` parameter is set to <xref:System.DateTime.Now%2A?displayProperty=fullName>.  \n  \n [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]\n [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]"
  syntax:
    content: public bool HasChanged { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Web.Caching.CacheDependency"></xref> object has changed; otherwise, `false`. The default is `false`.'
  overload: System.Web.Caching.CacheDependency.HasChanged*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.Caching.CacheDependency.ItemRemoved
  commentId: M:System.Web.Caching.CacheDependency.ItemRemoved
  id: ItemRemoved
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: ItemRemoved()
  nameWithType: CacheDependency.ItemRemoved()
  fullName: CacheDependency.ItemRemoved()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Called when a monitored cache entry is removed.
  syntax:
    content: public void ItemRemoved ();
    parameters: []
  overload: System.Web.Caching.CacheDependency.ItemRemoved*
  exceptions: []
  version:
  - netframework-4.7
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.author: riande
  manager: wpickett
- uid: System.Web.Caching.CacheDependency.KeepDependenciesAlive
  commentId: M:System.Web.Caching.CacheDependency.KeepDependenciesAlive
  id: KeepDependenciesAlive
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: KeepDependenciesAlive()
  nameWithType: CacheDependency.KeepDependenciesAlive()
  fullName: CacheDependency.KeepDependenciesAlive()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Updates the last access time of every cache item that depends on this item.
  syntax:
    content: public void KeepDependenciesAlive ();
    parameters: []
  overload: System.Web.Caching.CacheDependency.KeepDependenciesAlive*
  exceptions: []
  version:
  - netframework-4.7
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.author: riande
  manager: wpickett
- uid: System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)
  commentId: M:System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)
  id: NotifyDependencyChanged(System.Object,System.EventArgs)
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: NotifyDependencyChanged(Object, EventArgs)
  nameWithType: CacheDependency.NotifyDependencyChanged(Object, EventArgs)
  fullName: CacheDependency.NotifyDependencyChanged(Object, EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Notifies the base <xref href="System.Web.Caching.CacheDependency"></xref> object that the dependency represented by a derived <xref href="System.Web.Caching.CacheDependency"></xref> class has changed.
  remarks: "Any class that derives from the <xref:System.Web.Caching.CacheDependency> class must implement this method.  \n  \n When you derive from the <xref:System.Web.Caching.CacheDependency> class, you use the base functionality of any method or property that you have not overridden. When you create an instance of the derived class, it represents the files, cache keys, database tables, or other arbitrary objects that you want to make a cached item dependent upon. When a dependency item changes, this method notifies the base functionality of the <xref:System.Web.Caching.CacheDependency> class that the item has changed, so that the values of the <xref:System.Web.Caching.CacheDependency.HasChanged%2A> and <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> properties can be updated."
  example:
  - "The following code example shows a class that inherits from the <xref:System.Web.Caching.CacheDependency> class. It creates a public method, `ResetDependency`, that uses the <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> method to change the time at which the dependency was modified, and then calls the <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> method.  \n  \n [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]"
  syntax:
    content: protected void NotifyDependencyChanged (object sender, EventArgs e);
    parameters:
    - id: sender
      type: System.Object
      description: The source of the event.
    - id: e
      type: System.EventArgs
      description: An <xref href="System.EventArgs"></xref> object that contains the event data.
  overload: System.Web.Caching.CacheDependency.NotifyDependencyChanged*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.Caching.CacheDependency.SetCacheDependencyChanged(System.Action{System.Object,System.EventArgs})
  commentId: M:System.Web.Caching.CacheDependency.SetCacheDependencyChanged(System.Action{System.Object,System.EventArgs})
  id: SetCacheDependencyChanged(System.Action{System.Object,System.EventArgs})
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: SetCacheDependencyChanged(Action<Object,EventArgs>)
  nameWithType: CacheDependency.SetCacheDependencyChanged(Action<Object,EventArgs>)
  fullName: CacheDependency.SetCacheDependencyChanged(Action<Object,EventArgs>)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Adds an Action method to handle notifying interested party in changes to this dependency.
  syntax:
    content: public void SetCacheDependencyChanged (Action<object,EventArgs> dependencyChangedAction);
    parameters:
    - id: dependencyChangedAction
      type: System.Action{System.Object,System.EventArgs}
      description: The dependency changed action.
  overload: System.Web.Caching.CacheDependency.SetCacheDependencyChanged*
  exceptions: []
  version:
  - netframework-4.7
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.author: riande
  manager: wpickett
- uid: System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)
  commentId: M:System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)
  id: SetUtcLastModified(System.DateTime)
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: SetUtcLastModified(DateTime)
  nameWithType: CacheDependency.SetUtcLastModified(DateTime)
  fullName: CacheDependency.SetUtcLastModified(DateTime)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Marks the time when a dependency last changed.
  remarks: ''
  example:
  - "The following code example shows a class that inherits from the <xref:System.Web.Caching.CacheDependency> class. It creates a public method, `ResetDependency`, that uses the <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> method to change the time at which the dependency was modified, and then calls the <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> method.  \n  \n [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]"
  syntax:
    content: protected void SetUtcLastModified (DateTime utcLastModified);
    parameters:
    - id: utcLastModified
      type: System.DateTime
      description: The time when the dependency last changed.
  overload: System.Web.Caching.CacheDependency.SetUtcLastModified*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
- uid: System.Web.Caching.CacheDependency.TakeOwnership
  commentId: M:System.Web.Caching.CacheDependency.TakeOwnership
  id: TakeOwnership
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: TakeOwnership()
  nameWithType: CacheDependency.TakeOwnership()
  fullName: CacheDependency.TakeOwnership()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Allows the first user to declare exclusive ownership of this dependency.
  remarks: This method declares that the dependency is used. If another item previously called this method and took ownership, `false` is returned. A  <xref:System.Web.Caching.CacheDependency> can only be used by one cache entry. When an item is added to a cache with any cache dependencies specified, the cache should take ownership of those dependencies to make sure that they are not reused somewhere else.
  syntax:
    content: public bool TakeOwnership ();
    parameters: []
    return:
      type: System.Boolean
      description: >-
        `true`
            `true` if the item was the first to take ownership otherwise `false`. `false`.
  overload: System.Web.Caching.CacheDependency.TakeOwnership*
  exceptions: []
  version:
  - netframework-4.7
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.author: riande
  manager: wpickett
- uid: System.Web.Caching.CacheDependency.UtcLastModified
  commentId: P:System.Web.Caching.CacheDependency.UtcLastModified
  id: UtcLastModified
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: UtcLastModified
  nameWithType: CacheDependency.UtcLastModified
  fullName: CacheDependency.UtcLastModified
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: Gets the time when the dependency was last changed.
  remarks: This property is measured in Coordinated Universal Time (UTC) (also known as Greenwich Mean Time).
  example:
  - "The following code example uses the <xref:System.Web.Caching.AggregateCacheDependency> class to add an item, with two <xref:System.Web.Caching.CacheDependency> object dependencies, to the <xref:System.Web.Caching.Cache>. When a request for the <xref:System.Web.Caching.Cache> item is made, the code checks whether the item is in the <xref:System.Web.Caching.Cache>. If it is, the <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> property is converted to a string and displayed on the page. If it is not, the item and its two dependencies are created and added to the <xref:System.Web.Caching.Cache>.  \n  \n [!code-vb[CachingSamples_AggregateCacheDependency1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CachingSamples_AggregateCacheDependency1/VB/aggregatecachedependencysamplevb.aspx#2)]"
  syntax:
    content: public DateTime UtcLastModified { get; }
    return:
      type: System.DateTime
      description: The time when the dependency was last changed.
  overload: System.Web.Caching.CacheDependency.UtcLastModified*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
  ms.technology:
  - dotnet-webforms
  ms.author: riande
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.Caching.CacheDependency.#ctor
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency()
  nameWithType: CacheDependency.CacheDependency()
  fullName: CacheDependency.CacheDependency()
- uid: System.Web.Caching.CacheDependency.#ctor(System.String)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String)
  nameWithType: CacheDependency.CacheDependency(String)
  fullName: CacheDependency.CacheDependency(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[])
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[])
  nameWithType: CacheDependency.CacheDependency(String[])
  fullName: CacheDependency.CacheDependency(String[])
- uid: System.String[]
  parent: System
  isExternal: false
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String, DateTime)
  nameWithType: CacheDependency.CacheDependency(String, DateTime)
  fullName: CacheDependency.CacheDependency(String, DateTime)
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[], DateTime)
  nameWithType: CacheDependency.CacheDependency(String[], DateTime)
  fullName: CacheDependency.CacheDependency(String[], DateTime)
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[], String[])
  nameWithType: CacheDependency.CacheDependency(String[], String[])
  fullName: CacheDependency.CacheDependency(String[], String[])
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[], String[], DateTime)
  nameWithType: CacheDependency.CacheDependency(String[], String[], DateTime)
  fullName: CacheDependency.CacheDependency(String[], String[], DateTime)
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[], String[], CacheDependency)
  nameWithType: CacheDependency.CacheDependency(String[], String[], CacheDependency)
  fullName: CacheDependency.CacheDependency(String[], String[], CacheDependency)
- uid: System.Web.Caching.CacheDependency
  parent: System.Web.Caching
  isExternal: false
  name: CacheDependency
  nameWithType: CacheDependency
  fullName: System.Web.Caching.CacheDependency
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[], String[], CacheDependency, DateTime)
  nameWithType: CacheDependency.CacheDependency(String[], String[], CacheDependency, DateTime)
  fullName: CacheDependency.CacheDependency(String[], String[], CacheDependency, DateTime)
- uid: System.Web.Caching.CacheDependency.DependencyDispose
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: DependencyDispose()
  nameWithType: CacheDependency.DependencyDispose()
  fullName: CacheDependency.DependencyDispose()
- uid: System.Web.Caching.CacheDependency.Dispose
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: Dispose()
  nameWithType: CacheDependency.Dispose()
  fullName: CacheDependency.Dispose()
- uid: System.Web.Caching.CacheDependency.FinishInit
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: FinishInit()
  nameWithType: CacheDependency.FinishInit()
  fullName: CacheDependency.FinishInit()
- uid: System.Web.Caching.CacheDependency.GetFileDependencies
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: GetFileDependencies()
  nameWithType: CacheDependency.GetFileDependencies()
  fullName: CacheDependency.GetFileDependencies()
- uid: System.Web.Caching.CacheDependency.GetUniqueID
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: GetUniqueID()
  nameWithType: CacheDependency.GetUniqueID()
  fullName: CacheDependency.GetUniqueID()
- uid: System.Web.Caching.CacheDependency.HasChanged
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: HasChanged
  nameWithType: CacheDependency.HasChanged
  fullName: CacheDependency.HasChanged
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Caching.CacheDependency.ItemRemoved
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: ItemRemoved()
  nameWithType: CacheDependency.ItemRemoved()
  fullName: CacheDependency.ItemRemoved()
- uid: System.Web.Caching.CacheDependency.KeepDependenciesAlive
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: KeepDependenciesAlive()
  nameWithType: CacheDependency.KeepDependenciesAlive()
  fullName: CacheDependency.KeepDependenciesAlive()
- uid: System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: NotifyDependencyChanged(Object, EventArgs)
  nameWithType: CacheDependency.NotifyDependencyChanged(Object, EventArgs)
  fullName: CacheDependency.NotifyDependencyChanged(Object, EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: false
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.Caching.CacheDependency.SetCacheDependencyChanged(System.Action{System.Object,System.EventArgs})
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: SetCacheDependencyChanged(Action<Object,EventArgs>)
  nameWithType: CacheDependency.SetCacheDependencyChanged(Action<Object,EventArgs>)
  fullName: CacheDependency.SetCacheDependencyChanged(Action<Object,EventArgs>)
- uid: System.Action`2
  name: Action<T1,T2>
  nameWithType: Action<T1,T2>
  fullName: System.Action<T1,T2>
- uid: System.Action{System.Object,System.EventArgs}
  parent: System
  isExternal: false
  name: Action<Object,EventArgs>
  nameWithType: Action<Object,EventArgs>
  fullName: System.Action<System.Object,System.EventArgs>
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.EventArgs
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: SetUtcLastModified(DateTime)
  nameWithType: CacheDependency.SetUtcLastModified(DateTime)
  fullName: CacheDependency.SetUtcLastModified(DateTime)
- uid: System.Web.Caching.CacheDependency.TakeOwnership
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: TakeOwnership()
  nameWithType: CacheDependency.TakeOwnership()
  fullName: CacheDependency.TakeOwnership()
- uid: System.Web.Caching.CacheDependency.UtcLastModified
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: UtcLastModified
  nameWithType: CacheDependency.UtcLastModified
  fullName: CacheDependency.UtcLastModified
- uid: System.Web.Caching.CacheDependency.#ctor*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency
  nameWithType: CacheDependency.CacheDependency
  fullName: CacheDependency.CacheDependency
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
- uid: System.Web.Caching.CacheDependency.DependencyDispose*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: DependencyDispose
  nameWithType: CacheDependency.DependencyDispose
  fullName: CacheDependency.DependencyDispose
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
- uid: System.Web.Caching.CacheDependency.Dispose*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: Dispose
  nameWithType: CacheDependency.Dispose
  fullName: CacheDependency.Dispose
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
- uid: System.Web.Caching.CacheDependency.FinishInit*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: FinishInit
  nameWithType: CacheDependency.FinishInit
  fullName: CacheDependency.FinishInit
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
- uid: System.Web.Caching.CacheDependency.GetFileDependencies*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: GetFileDependencies
  nameWithType: CacheDependency.GetFileDependencies
  fullName: CacheDependency.GetFileDependencies
  monikers:
  - netframework-4.6.2
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
- uid: System.Web.Caching.CacheDependency.GetUniqueID*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: GetUniqueID
  nameWithType: CacheDependency.GetUniqueID
  fullName: CacheDependency.GetUniqueID
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
- uid: System.Web.Caching.CacheDependency.HasChanged*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: HasChanged
  nameWithType: CacheDependency.HasChanged
  fullName: CacheDependency.HasChanged
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
- uid: System.Web.Caching.CacheDependency.ItemRemoved*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: ItemRemoved
  nameWithType: CacheDependency.ItemRemoved
  fullName: CacheDependency.ItemRemoved
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
- uid: System.Web.Caching.CacheDependency.KeepDependenciesAlive*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: KeepDependenciesAlive
  nameWithType: CacheDependency.KeepDependenciesAlive
  fullName: CacheDependency.KeepDependenciesAlive
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
- uid: System.Web.Caching.CacheDependency.NotifyDependencyChanged*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: NotifyDependencyChanged
  nameWithType: CacheDependency.NotifyDependencyChanged
  fullName: CacheDependency.NotifyDependencyChanged
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
- uid: System.Web.Caching.CacheDependency.SetCacheDependencyChanged*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: SetCacheDependencyChanged
  nameWithType: CacheDependency.SetCacheDependencyChanged
  fullName: CacheDependency.SetCacheDependencyChanged
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
- uid: System.Web.Caching.CacheDependency.SetUtcLastModified*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: SetUtcLastModified
  nameWithType: CacheDependency.SetUtcLastModified
  fullName: CacheDependency.SetUtcLastModified
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
- uid: System.Web.Caching.CacheDependency.TakeOwnership*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: TakeOwnership
  nameWithType: CacheDependency.TakeOwnership
  fullName: CacheDependency.TakeOwnership
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
- uid: System.Web.Caching.CacheDependency.UtcLastModified*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: UtcLastModified
  nameWithType: CacheDependency.UtcLastModified
  fullName: CacheDependency.UtcLastModified
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Caching/CacheDependency.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
