{"nodes":[{"content":"Provides a low-level encapsulation of a window handle and a window procedure.","nodes":[{"pos":[0,77],"content":"Provides a low-level encapsulation of a window handle and a window procedure.","nodes":[{"content":"Provides a low-level encapsulation of a window handle and a window procedure.","pos":[0,77]}]}],"pos":[1111,1189],"yaml":true},{"content":"This class automatically manages window class creation and registration.  \n  \n A window is not eligible for garbage collection when it is associated with a window handle. To ensure proper garbage collection, handles must either be destroyed manually using <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> or released using <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.  \n  \n> [!NOTE]\n>  The <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> method is called when the WM_NCDESTROY message is processed. This means there are cases in which when you do not need to manually call <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, but it is good practice to do so.  \n  \n The <xref:System.Windows.Forms.NativeWindow> class provides the following properties and methods to manage handles: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.","nodes":[{"pos":[0,72],"content":"This class automatically manages window class creation and registration.","nodes":[{"content":"This class automatically manages window class creation and registration.","pos":[0,72]}]},{"pos":[79,390],"content":"A window is not eligible for garbage collection when it is associated with a window handle. To ensure proper garbage collection, handles must either be destroyed manually using <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> or released using <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.","nodes":[{"content":"A window is not eligible for garbage collection when it is associated with a window handle. To ensure proper garbage collection, handles must either be destroyed manually using <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> or released using <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.","pos":[0,311],"nodes":[{"content":"A window is not eligible for garbage collection when it is associated with a window handle.","pos":[0,91]},{"content":"To ensure proper garbage collection, handles must either be destroyed manually using <ph id=\"ph1\">&lt;xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A&gt;</ph> or released using <ph id=\"ph2\">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>.","pos":[92,311],"source":" To ensure proper garbage collection, handles must either be destroyed manually using <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> or released using <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>."}]}]},{"pos":[398,698],"content":"[!NOTE]\n The <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> method is called when the WM_NCDESTROY message is processed. This means there are cases in which when you do not need to manually call <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, but it is good practice to do so.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> method is called when the WM_NCDESTROY message is processed. This means there are cases in which when you do not need to manually call <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, but it is good practice to do so.","pos":[8,298],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph> method is called when the WM_NCDESTROY message is processed.","pos":[1,123],"source":" The <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> method is called when the WM_NCDESTROY message is processed."},{"content":"This means there are cases in which when you do not need to manually call <ph id=\"ph1\">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>, but it is good practice to do so.","pos":[124,290],"source":" This means there are cases in which when you do not need to manually call <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, but it is good practice to do so."}]}]},{"pos":[705,1110],"content":"The <xref:System.Windows.Forms.NativeWindow> class provides the following properties and methods to manage handles: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class provides the following properties and methods to manage handles: <ph id=\"ph2\">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A&gt;</ph>, and <ph id=\"ph6\">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>.","pos":[0,405],"source":"The <xref:System.Windows.Forms.NativeWindow> class provides the following properties and methods to manage handles: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>."}]}],"pos":[1200,2320],"yaml":true,"extradata":"MT"},{"content":"Initializes an instance of the <xref href=\"System.Windows.Forms.NativeWindow\"></xref> class.","nodes":[{"pos":[0,92],"content":"Initializes an instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Forms.NativeWindow\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes an instance of the <xref href=\"System.Windows.Forms.NativeWindow\"></xref> class."}],"pos":[5766,5859],"yaml":true},{"content":"This is the default <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> constructor provided by the compiler. The <xref:System.Windows.Forms.NativeWindow> class also has a static constructor that initializes application domain-wide message handlers and hash tables.","nodes":[{"pos":[0,265],"content":"This is the default <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> constructor provided by the compiler. The <xref:System.Windows.Forms.NativeWindow> class also has a static constructor that initializes application domain-wide message handlers and hash tables.","nodes":[{"content":"This is the default <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> constructor provided by the compiler. The <xref:System.Windows.Forms.NativeWindow> class also has a static constructor that initializes application domain-wide message handlers and hash tables.","pos":[0,265],"nodes":[{"content":"This is the default <ph id=\"ph1\">&lt;xref:System.Windows.Forms.NativeWindow.%23ctor%2A&gt;</ph> constructor provided by the compiler.","pos":[0,109],"source":"This is the default <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> constructor provided by the compiler."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class also has a static constructor that initializes application domain-wide message handlers and hash tables.","pos":[110,265],"source":" The <xref:System.Windows.Forms.NativeWindow> class also has a static constructor that initializes application domain-wide message handlers and hash tables."}]}]}],"pos":[5870,6136],"yaml":true,"extradata":"MT"},{"content":"Assigns a handle to this window.","nodes":[{"pos":[0,32],"content":"Assigns a handle to this window.","nodes":[{"content":"Assigns a handle to this window.","pos":[0,32]}]}],"pos":[7273,7306],"yaml":true},{"content":"<xref:System.Windows.Forms.NativeWindow.WndProc%2A> intercepts window messages sent to the `handle` parameter. Use <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> to reset the handle's window procedure to the default window procedure.  \n  \n The <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> method calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to indicate that the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.  \n  \n> [!NOTE]\n>  The handle to assign cannot be in a different application process.","nodes":[{"pos":[0,244],"content":"<xref:System.Windows.Forms.NativeWindow.WndProc%2A> intercepts window messages sent to the `handle` parameter. Use <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> to reset the handle's window procedure to the default window procedure.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> intercepts window messages sent to the <ph id=\"ph2\">`handle`</ph> parameter.","pos":[0,110],"source":"<xref:System.Windows.Forms.NativeWindow.WndProc%2A> intercepts window messages sent to the `handle` parameter."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph> to reset the handle's window procedure to the default window procedure.","pos":[111,244],"source":" Use <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> to reset the handle's window procedure to the default window procedure."}]},{"pos":[251,501],"content":"The <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> method calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to indicate that the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph> method calls the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph> method to indicate that the value of the <ph id=\"ph3\">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> property has changed.","pos":[0,250],"source":"The <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> method calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to indicate that the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed."}]},{"pos":[509,586],"content":"[!NOTE]\n The handle to assign cannot be in a different application process.","leadings":["","> "],"nodes":[{"content":"The handle to assign cannot be in a different application process.","pos":[9,75]}]}],"pos":[7317,7911],"yaml":true,"extradata":"MT"},{"content":"The handle to assign to this window.","nodes":[{"pos":[0,36],"content":"The handle to assign to this window.","nodes":[{"content":"The handle to assign to this window.","pos":[0,36]}]}],"pos":[9667,9704],"yaml":true},{"content":"This window already has a handle.","nodes":[{"pos":[0,33],"content":"This window already has a handle.","nodes":[{"content":"This window already has a handle.","pos":[0,33]}]}],"pos":[9856,9890],"yaml":true},{"content":"The windows procedure for the associated native window could not be retrieved.","nodes":[{"pos":[0,78],"content":"The windows procedure for the associated native window could not be retrieved.","nodes":[{"content":"The windows procedure for the associated native window could not be retrieved.","pos":[0,78]}]}],"pos":[10008,10087],"yaml":true},{"content":"Creates a window and its handle with the specified creation parameters.","nodes":[{"pos":[0,71],"content":"Creates a window and its handle with the specified creation parameters.","nodes":[{"content":"Creates a window and its handle with the specified creation parameters.","pos":[0,71]}]}],"pos":[11166,11238],"yaml":true},{"content":"The `cp` parameter specifies the values that are passed to the native Win32 `CreateWindowEx` method to create a window and its handle.  \n  \n When the <xref:System.Windows.Forms.CreateParams.ClassName%2A> field is not `null`, the newly created window handle inherits from the specified class. For example, if <xref:System.Windows.Forms.CreateParams.ClassName%2A> is set to `BUTTON`, the newly created window is based on the Win32 `BUTTON` window class. The <xref:System.Windows.Forms.CreateParams.Param%2A> property of the <xref:System.Windows.Forms.CreateParams.ClassName%2A> object must either be `null` or reference an instance of a class that was declared as a structure.  \n  \n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \n  \n> [!NOTE]\n>  The class name provided is registered with the operating system.","nodes":[{"pos":[0,134],"content":"The <ph id=\"ph1\">`cp`</ph> parameter specifies the values that are passed to the native Win32 <ph id=\"ph2\">`CreateWindowEx`</ph> method to create a window and its handle.","source":"The `cp` parameter specifies the values that are passed to the native Win32 `CreateWindowEx` method to create a window and its handle."},{"pos":[141,674],"content":"When the <xref:System.Windows.Forms.CreateParams.ClassName%2A> field is not `null`, the newly created window handle inherits from the specified class. For example, if <xref:System.Windows.Forms.CreateParams.ClassName%2A> is set to `BUTTON`, the newly created window is based on the Win32 `BUTTON` window class. The <xref:System.Windows.Forms.CreateParams.Param%2A> property of the <xref:System.Windows.Forms.CreateParams.ClassName%2A> object must either be `null` or reference an instance of a class that was declared as a structure.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> field is not <ph id=\"ph2\">`null`</ph>, the newly created window handle inherits from the specified class.","pos":[0,150],"source":"When the <xref:System.Windows.Forms.CreateParams.ClassName%2A> field is not `null`, the newly created window handle inherits from the specified class."},{"content":"For example, if <ph id=\"ph1\">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> is set to <ph id=\"ph2\">`BUTTON`</ph>, the newly created window is based on the Win32 <ph id=\"ph3\">`BUTTON`</ph> window class.","pos":[151,310],"source":" For example, if <xref:System.Windows.Forms.CreateParams.ClassName%2A> is set to `BUTTON`, the newly created window is based on the Win32 `BUTTON` window class."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.CreateParams.Param%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> object must either be <ph id=\"ph3\">`null`</ph> or reference an instance of a class that was declared as a structure.","pos":[311,533],"source":" The <xref:System.Windows.Forms.CreateParams.Param%2A> property of the <xref:System.Windows.Forms.CreateParams.ClassName%2A> object must either be `null` or reference an instance of a class that was declared as a structure."}]},{"pos":[681,915],"content":"This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.","nodes":[{"content":"This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.","pos":[0,234],"nodes":[{"content":"This code is an excerpt from the example shown in the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class overview.","pos":[0,110],"source":"This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview."},{"content":"Some code is not shown for the purpose of brevity.","pos":[111,161]},{"content":"See <ph id=\"ph1\">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> for the whole code listing.","pos":[162,234],"source":" See <xref:System.Windows.Forms.NativeWindow> for the whole code listing."}]}]},{"pos":[923,998],"content":"[!NOTE]\n The class name provided is registered with the operating system.","leadings":["","> "],"nodes":[{"content":"The class name provided is registered with the operating system.","pos":[9,73]}]}],"pos":[11249,12257],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Forms.CreateParams\"></xref> that specifies the creation parameters for this window.","nodes":[{"pos":[0,112],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Forms.CreateParams\"&gt;&lt;/xref&gt;</ph> that specifies the creation parameters for this window.","source":"A <xref href=\"System.Windows.Forms.CreateParams\"></xref> that specifies the creation parameters for this window."}],"pos":[13810,13923],"yaml":true},{"content":"The operating system ran out of resources when trying to create the native window.","nodes":[{"pos":[0,82],"content":"The operating system ran out of resources when trying to create the native window.","nodes":[{"content":"The operating system ran out of resources when trying to create the native window.","pos":[0,82]}]}],"pos":[14097,14180],"yaml":true},{"content":"The native Win32 API could not create the specified window.","nodes":[{"pos":[0,59],"content":"The native Win32 API could not create the specified window.","nodes":[{"content":"The native Win32 API could not create the specified window.","pos":[0,59]}]}],"pos":[14298,14358],"yaml":true},{"content":"The handle of the current native window is already assigned; in explanation, the <xref href=\"System.Windows.Forms.NativeWindow.Handle\"></xref> property is not equal to <xref href=\"System.IntPtr.Zero\"></xref>.","nodes":[{"pos":[0,208],"content":"The handle of the current native window is already assigned; in explanation, the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Forms.NativeWindow.Handle\"&gt;&lt;/xref&gt;</ph> property is not equal to <ph id=\"ph2\">&lt;xref href=\"System.IntPtr.Zero\"&gt;&lt;/xref&gt;</ph>.","source":"The handle of the current native window is already assigned; in explanation, the <xref href=\"System.Windows.Forms.NativeWindow.Handle\"></xref> property is not equal to <xref href=\"System.IntPtr.Zero\"></xref>."}],"pos":[14468,14677],"yaml":true},{"content":"Invokes the default window procedure associated with this window.","nodes":[{"pos":[0,65],"content":"Invokes the default window procedure associated with this window.","nodes":[{"content":"Invokes the default window procedure associated with this window.","pos":[0,65]}]}],"pos":[15717,15783],"yaml":true},{"content":"Typically, you only call the <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> method when you are intercepting window messages and would like the default window procedure to handle the message. <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> should not be called to send a window message to the window; call the Win32 `SendMessage` function instead.  \n  \n It is an error to call <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property is 0.","nodes":[{"pos":[0,362],"content":"Typically, you only call the <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> method when you are intercepting window messages and would like the default window procedure to handle the message. <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> should not be called to send a window message to the window; call the Win32 `SendMessage` function instead.","nodes":[{"content":"Typically, you only call the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.NativeWindow.DefWndProc%2A&gt;</ph> method when you are intercepting window messages and would like the default window procedure to handle the message.","pos":[0,199],"source":"Typically, you only call the <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> method when you are intercepting window messages and would like the default window procedure to handle the message."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Forms.NativeWindow.DefWndProc%2A&gt;</ph> should not be called to send a window message to the window; call the Win32 <ph id=\"ph2\">`SendMessage`</ph> function instead.","pos":[200,362],"source":" <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> should not be called to send a window message to the window; call the Win32 `SendMessage` function instead."}]},{"pos":[369,521],"content":"It is an error to call <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property is 0.","nodes":[{"content":"It is an error to call <ph id=\"ph1\">&lt;xref:System.Windows.Forms.NativeWindow.DefWndProc%2A&gt;</ph> when the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> property is 0.","pos":[0,152],"source":"It is an error to call <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property is 0."}]}],"pos":[15794,16320],"yaml":true,"extradata":"MT"},{"content":"The message that is currently being processed.","nodes":[{"pos":[0,46],"content":"The message that is currently being processed.","nodes":[{"content":"The message that is currently being processed.","pos":[0,46]}]}],"pos":[16492,16539],"yaml":true},{"content":"Destroys the window and its handle.","nodes":[{"pos":[0,35],"content":"Destroys the window and its handle.","nodes":[{"content":"Destroys the window and its handle.","pos":[0,35]}]}],"pos":[17558,17594],"yaml":true},{"content":"This method destroys the window associated with the <xref:System.Windows.Forms.NativeWindow.Handle%2A>, sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0, and calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to reflect the change. Typically, you only call <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> when you are done with the native window.  \n  \n> [!NOTE]\n>  The <xref:System.Windows.Forms.NativeWindow> class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message.","nodes":[{"pos":[0,406],"content":"This method destroys the window associated with the <xref:System.Windows.Forms.NativeWindow.Handle%2A>, sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0, and calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to reflect the change. Typically, you only call <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> when you are done with the native window.","nodes":[{"content":"This method destroys the window associated with the <xref:System.Windows.Forms.NativeWindow.Handle%2A>, sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0, and calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to reflect the change. Typically, you only call <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> when you are done with the native window.","pos":[0,406],"nodes":[{"content":"This method destroys the window associated with the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph>, sets the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> property to 0, and calls the <ph id=\"ph3\">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph> method to reflect the change.","pos":[0,281],"source":"This method destroys the window associated with the <xref:System.Windows.Forms.NativeWindow.Handle%2A>, sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0, and calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to reflect the change."},{"content":"Typically, you only call <ph id=\"ph1\">&lt;xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A&gt;</ph> when you are done with the native window.","pos":[282,406],"source":" Typically, you only call <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> when you are done with the native window."}]}]},{"pos":[414,587],"content":"[!NOTE]\n The <xref:System.Windows.Forms.NativeWindow> class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message.","leadings":["","> "],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message.","pos":[9,171],"source":" The <xref:System.Windows.Forms.NativeWindow> class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message."}]}],"pos":[17605,18198],"yaml":true,"extradata":"MT"},{"content":"Releases the resources associated with this window.","nodes":[{"pos":[0,51],"content":"Releases the resources associated with this window.","nodes":[{"content":"Releases the resources associated with this window.","pos":[0,51]}]}],"pos":[19270,19322],"yaml":true},{"content":"The <xref:System.Windows.Forms.NativeWindow.Finalize%2A> method removes the Win32 derived class associated with the current <xref:System.Windows.Forms.NativeWindow> instance, releases the handle, and posts a WM_CLOSE message to the associated window.","nodes":[{"pos":[0,250],"content":"The <xref:System.Windows.Forms.NativeWindow.Finalize%2A> method removes the Win32 derived class associated with the current <xref:System.Windows.Forms.NativeWindow> instance, releases the handle, and posts a WM_CLOSE message to the associated window.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.NativeWindow.Finalize%2A&gt;</ph> method removes the Win32 derived class associated with the current <ph id=\"ph2\">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> instance, releases the handle, and posts a WM_CLOSE message to the associated window.","pos":[0,250],"source":"The <xref:System.Windows.Forms.NativeWindow.Finalize%2A> method removes the Win32 derived class associated with the current <xref:System.Windows.Forms.NativeWindow> instance, releases the handle, and posts a WM_CLOSE message to the associated window."}]}],"pos":[19333,19584],"yaml":true,"extradata":"MT"},{"content":"Retrieves the window associated with the specified handle.","nodes":[{"pos":[0,58],"content":"Retrieves the window associated with the specified handle.","nodes":[{"content":"Retrieves the window associated with the specified handle.","pos":[0,58]}]}],"pos":[20706,20765],"yaml":true},{"content":"If you receive a handle from another method, use this method to retrieve the window associated with the handle. The handle must already be owned by another <xref:System.Windows.Forms.NativeWindow> in the current process; otherwise, `null` is returned.","nodes":[{"pos":[0,251],"content":"If you receive a handle from another method, use this method to retrieve the window associated with the handle. The handle must already be owned by another <xref:System.Windows.Forms.NativeWindow> in the current process; otherwise, `null` is returned.","nodes":[{"content":"If you receive a handle from another method, use this method to retrieve the window associated with the handle.","pos":[0,111]},{"content":"The handle must already be owned by another <ph id=\"ph1\">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> in the current process; otherwise, <ph id=\"ph2\">`null`</ph> is returned.","pos":[112,251],"source":" The handle must already be owned by another <xref:System.Windows.Forms.NativeWindow> in the current process; otherwise, `null` is returned."}]}],"pos":[20776,21028],"yaml":true,"extradata":"MT"},{"content":"A handle to a window.","nodes":[{"pos":[0,21],"content":"A handle to a window.","nodes":[{"content":"A handle to a window.","pos":[0,21]}]}],"pos":[21205,21227],"yaml":true},{"content":"The <xref href=\"System.Windows.Forms.NativeWindow\"></xref> associated with the specified handle. This method returns `null` when the handle does not have an associated window.","nodes":[{"pos":[0,175],"content":"The <xref href=\"System.Windows.Forms.NativeWindow\"></xref> associated with the specified handle. This method returns `null` when the handle does not have an associated window.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Forms.NativeWindow\"&gt;&lt;/xref&gt;</ph> associated with the specified handle.","pos":[0,96],"source":"The <xref href=\"System.Windows.Forms.NativeWindow\"></xref> associated with the specified handle."},{"content":"This method returns <ph id=\"ph1\">`null`</ph> when the handle does not have an associated window.","pos":[97,175],"source":" This method returns `null` when the handle does not have an associated window."}]}],"pos":[21304,21480],"yaml":true},{"content":"Gets the handle for this window.","nodes":[{"pos":[0,32],"content":"Gets the handle for this window.","nodes":[{"content":"Gets the handle for this window.","pos":[0,32]}]}],"pos":[22431,22464],"yaml":true},{"content":"Use this method when calling Windows API methods that require a handle for a window or control.","nodes":[{"pos":[0,95],"content":"Use this method when calling Windows API methods that require a handle for a window or control.","nodes":[{"content":"Use this method when calling Windows API methods that require a handle for a window or control.","pos":[0,95]}]}],"pos":[22475,22571],"yaml":true,"extradata":"MT"},{"content":"If successful, an <xref href=\"System.IntPtr\"></xref> representing the handle to the associated native Win32 window; otherwise, 0 if no handle is associated with the window.","nodes":[{"pos":[0,172],"content":"If successful, an <ph id=\"ph1\">&lt;xref href=\"System.IntPtr\"&gt;&lt;/xref&gt;</ph> representing the handle to the associated native Win32 window; otherwise, 0 if no handle is associated with the window.","source":"If successful, an <xref href=\"System.IntPtr\"></xref> representing the handle to the associated native Win32 window; otherwise, 0 if no handle is associated with the window."}],"pos":[24239,24412],"yaml":true},{"content":"Specifies a notification method that is called when the handle for a window is changed.","nodes":[{"pos":[0,87],"content":"Specifies a notification method that is called when the handle for a window is changed.","nodes":[{"content":"Specifies a notification method that is called when the handle for a window is changed.","pos":[0,87]}]}],"pos":[25433,25521],"yaml":true},{"content":"This method is invoked when the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.","nodes":[{"pos":[0,117],"content":"This method is invoked when the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.","nodes":[{"content":"This method is invoked when the value of the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> property has changed.","pos":[0,117],"source":"This method is invoked when the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed."}]}],"pos":[25532,25650],"yaml":true,"extradata":"MT"},{"content":"When overridden in a derived class, manages an unhandled thread exception.","nodes":[{"pos":[0,74],"content":"When overridden in a derived class, manages an unhandled thread exception.","nodes":[{"content":"When overridden in a derived class, manages an unhandled thread exception.","pos":[0,74]}]}],"pos":[28663,28738],"yaml":true},{"content":"Typically, <xref:System.Windows.Forms.Application.OnThreadException%2A> handles thread exceptions.","nodes":[{"pos":[0,98],"content":"Typically, <xref:System.Windows.Forms.Application.OnThreadException%2A> handles thread exceptions.","nodes":[{"content":"Typically, <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Application.OnThreadException%2A&gt;</ph> handles thread exceptions.","pos":[0,98],"source":"Typically, <xref:System.Windows.Forms.Application.OnThreadException%2A> handles thread exceptions."}]}],"pos":[28749,28848],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Exception\"></xref> that specifies the unhandled thread exception.","nodes":[{"pos":[0,87],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> that specifies the unhandled thread exception.","source":"An <xref href=\"System.Exception\"></xref> that specifies the unhandled thread exception."}],"pos":[29003,29091],"yaml":true},{"content":"Releases the handle associated with this window.","nodes":[{"pos":[0,48],"content":"Releases the handle associated with this window.","nodes":[{"content":"Releases the handle associated with this window.","pos":[0,48]}]}],"pos":[30117,30166],"yaml":true},{"content":"This method does not destroy the window handle. Instead, it sets the handle's window procedure to the default window procedure. It sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0 and calls <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> to reflect the change.  \n  \n A window automatically calls this method if it receives a native Win32 WM_NCDESTROY message, indicating that Windows has destroyed the handle.","nodes":[{"pos":[0,296],"content":"This method does not destroy the window handle. Instead, it sets the handle's window procedure to the default window procedure. It sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0 and calls <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> to reflect the change.","nodes":[{"content":"This method does not destroy the window handle. Instead, it sets the handle's window procedure to the default window procedure. It sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0 and calls <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> to reflect the change.","pos":[0,296],"nodes":[{"content":"This method does not destroy the window handle.","pos":[0,47]},{"content":"Instead, it sets the handle's window procedure to the default window procedure.","pos":[48,127]},{"content":"It sets the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> property to 0 and calls <ph id=\"ph2\">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph> to reflect the change.","pos":[128,296],"source":" It sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0 and calls <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> to reflect the change."}]}]},{"pos":[303,445],"content":"A window automatically calls this method if it receives a native Win32 WM_NCDESTROY message, indicating that Windows has destroyed the handle.","nodes":[{"content":"A window automatically calls this method if it receives a native Win32 WM_NCDESTROY message, indicating that Windows has destroyed the handle.","pos":[0,142]}]}],"pos":[30177,30627],"yaml":true,"extradata":"MT"},{"content":"Invokes the default window procedure associated with this window.","nodes":[{"pos":[0,65],"content":"Invokes the default window procedure associated with this window.","nodes":[{"content":"Invokes the default window procedure associated with this window.","pos":[0,65]}]}],"pos":[33416,33482],"yaml":true},{"content":"This method is called when a window message is sent to the handle of the window.","nodes":[{"pos":[0,80],"content":"This method is called when a window message is sent to the handle of the window.","nodes":[{"content":"This method is called when a window message is sent to the handle of the window.","pos":[0,80]}]}],"pos":[33493,33574],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Forms.Message\"></xref> that is associated with the current Windows message.","nodes":[{"pos":[0,104],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Forms.Message\"&gt;&lt;/xref&gt;</ph> that is associated with the current Windows message.","source":"A <xref href=\"System.Windows.Forms.Message\"></xref> that is associated with the current Windows message."}],"pos":[35364,35469],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Forms.NativeWindow\n  commentId: T:System.Windows.Forms.NativeWindow\n  id: NativeWindow\n  children:\n  - System.Windows.Forms.NativeWindow.#ctor\n  - System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)\n  - System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)\n  - System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)\n  - System.Windows.Forms.NativeWindow.DestroyHandle\n  - System.Windows.Forms.NativeWindow.Finalize\n  - System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)\n  - System.Windows.Forms.NativeWindow.Handle\n  - System.Windows.Forms.NativeWindow.OnHandleChange\n  - System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)\n  - System.Windows.Forms.NativeWindow.ReleaseHandle\n  - System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)\n  langs:\n  - csharp\n  name: NativeWindow\n  nameWithType: NativeWindow\n  fullName: System.Windows.Forms.NativeWindow\n  type: Class\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Provides a low-level encapsulation of a window handle and a window procedure.\n  remarks: \"This class automatically manages window class creation and registration.  \\n  \\n A window is not eligible for garbage collection when it is associated with a window handle. To ensure proper garbage collection, handles must either be destroyed manually using <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> or released using <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> method is called when the WM_NCDESTROY message is processed. This means there are cases in which when you do not need to manually call <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, but it is good practice to do so.  \\n  \\n The <xref:System.Windows.Forms.NativeWindow> class provides the following properties and methods to manage handles: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.\"\n  example:\n  - \"The following code example demonstrates intercepting operating system window messages in a window procedure, and creating a window with a specific operating system window class name. The example creates two classes that inherit from <xref:System.Windows.Forms.NativeWindow> that accomplish this.  \\n  \\n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message. The class demonstrates the usage of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use. The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.  \\n  \\n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`. The class demonstrates using the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and overriding the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.  \\n  \\n [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]\\n [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]\\n [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]\"\n  syntax:\n    content: 'public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements:\n  - System.Windows.Forms.IWin32Window\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n  ms.technology:\n  - dotnet-winforms\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Forms.NativeWindow.#ctor\n  commentId: M:System.Windows.Forms.NativeWindow.#ctor\n  id: '#ctor'\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: NativeWindow()\n  nameWithType: NativeWindow.NativeWindow()\n  fullName: NativeWindow.NativeWindow()\n  type: Constructor\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Initializes an instance of the <xref href=\"System.Windows.Forms.NativeWindow\"></xref> class.\n  remarks: This is the default <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> constructor provided by the compiler. The <xref:System.Windows.Forms.NativeWindow> class also has a static constructor that initializes application domain-wide message handlers and hash tables.\n  syntax:\n    content: public NativeWindow ();\n    parameters: []\n  overload: System.Windows.Forms.NativeWindow.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n  ms.technology:\n  - dotnet-winforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)\n  commentId: M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)\n  id: AssignHandle(System.IntPtr)\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: AssignHandle(IntPtr)\n  nameWithType: NativeWindow.AssignHandle(IntPtr)\n  fullName: NativeWindow.AssignHandle(IntPtr)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Assigns a handle to this window.\n  remarks: \"<xref:System.Windows.Forms.NativeWindow.WndProc%2A> intercepts window messages sent to the `handle` parameter. Use <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> to reset the handle's window procedure to the default window procedure.  \\n  \\n The <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> method calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to indicate that the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.  \\n  \\n> [!NOTE]\\n>  The handle to assign cannot be in a different application process.\"\n  example:\n  - \"The following code example demonstrates intercepting operating system window messages in a window procedure. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \\n  \\n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message. The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify which window handle the <xref:System.Windows.Forms.NativeWindow> will use. The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.  \\n  \\n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \\n  \\n [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]\\n [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]\\n [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]\"\n  syntax:\n    content: public void AssignHandle (IntPtr handle);\n    parameters:\n    - id: handle\n      type: System.IntPtr\n      description: The handle to assign to this window.\n  overload: System.Windows.Forms.NativeWindow.AssignHandle*\n  exceptions:\n  - type: System.Exception\n    commentId: T:System.Exception\n    description: This window already has a handle.\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: The windows procedure for the associated native window could not be retrieved.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n  ms.technology:\n  - dotnet-winforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)\n  commentId: M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)\n  id: CreateHandle(System.Windows.Forms.CreateParams)\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: CreateHandle(CreateParams)\n  nameWithType: NativeWindow.CreateHandle(CreateParams)\n  fullName: NativeWindow.CreateHandle(CreateParams)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Creates a window and its handle with the specified creation parameters.\n  remarks: \"The `cp` parameter specifies the values that are passed to the native Win32 `CreateWindowEx` method to create a window and its handle.  \\n  \\n When the <xref:System.Windows.Forms.CreateParams.ClassName%2A> field is not `null`, the newly created window handle inherits from the specified class. For example, if <xref:System.Windows.Forms.CreateParams.ClassName%2A> is set to `BUTTON`, the newly created window is based on the Win32 `BUTTON` window class. The <xref:System.Windows.Forms.CreateParams.Param%2A> property of the <xref:System.Windows.Forms.CreateParams.ClassName%2A> object must either be `null` or reference an instance of a class that was declared as a structure.  \\n  \\n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \\n  \\n> [!NOTE]\\n>  The class name provided is registered with the operating system.\"\n  example:\n  - \"The following code example demonstrates creating a window with a specific operating system window class name. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \\n  \\n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`. This creates a Win32 button window. The location and size of the button is set, along with specifying additional window styles. The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received. Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.  \\n  \\n> [!NOTE]\\n>  Some control types send their window messages to the window parent instead of the window. See the Windows Platform SDK for more information.  \\n  \\n [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]\\n [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]\\n [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]\"\n  syntax:\n    content: public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);\n    parameters:\n    - id: cp\n      type: System.Windows.Forms.CreateParams\n      description: A <xref href=\"System.Windows.Forms.CreateParams\"></xref> that specifies the creation parameters for this window.\n  overload: System.Windows.Forms.NativeWindow.CreateHandle*\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: The operating system ran out of resources when trying to create the native window.\n  - type: System.ComponentModel.Win32Exception\n    commentId: T:System.ComponentModel.Win32Exception\n    description: The native Win32 API could not create the specified window.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The handle of the current native window is already assigned; in explanation, the <xref href=\"System.Windows.Forms.NativeWindow.Handle\"></xref> property is not equal to <xref href=\"System.IntPtr.Zero\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n  ms.technology:\n  - dotnet-winforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)\n  commentId: M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)\n  id: DefWndProc(System.Windows.Forms.Message@)\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: DefWndProc(Message)\n  nameWithType: NativeWindow.DefWndProc(Message)\n  fullName: NativeWindow.DefWndProc(Message)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Invokes the default window procedure associated with this window.\n  remarks: \"Typically, you only call the <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> method when you are intercepting window messages and would like the default window procedure to handle the message. <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> should not be called to send a window message to the window; call the Win32 `SendMessage` function instead.  \\n  \\n It is an error to call <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property is 0.\"\n  syntax:\n    content: public void DefWndProc (ref System.Windows.Forms.Message m);\n    parameters:\n    - id: m\n      type: System.Windows.Forms.Message\n      description: The message that is currently being processed.\n  overload: System.Windows.Forms.NativeWindow.DefWndProc*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n  ms.technology:\n  - dotnet-winforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Forms.NativeWindow.DestroyHandle\n  commentId: M:System.Windows.Forms.NativeWindow.DestroyHandle\n  id: DestroyHandle\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: DestroyHandle()\n  nameWithType: NativeWindow.DestroyHandle()\n  fullName: NativeWindow.DestroyHandle()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Destroys the window and its handle.\n  remarks: \"This method destroys the window associated with the <xref:System.Windows.Forms.NativeWindow.Handle%2A>, sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0, and calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to reflect the change. Typically, you only call <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> when you are done with the native window.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Windows.Forms.NativeWindow> class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message.\"\n  syntax:\n    content: public virtual void DestroyHandle ();\n    parameters: []\n  overload: System.Windows.Forms.NativeWindow.DestroyHandle*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n  ms.technology:\n  - dotnet-winforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Forms.NativeWindow.Finalize\n  commentId: M:System.Windows.Forms.NativeWindow.Finalize\n  id: Finalize\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: NativeWindow.Finalize()\n  fullName: NativeWindow.Finalize()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Releases the resources associated with this window.\n  remarks: The <xref:System.Windows.Forms.NativeWindow.Finalize%2A> method removes the Win32 derived class associated with the current <xref:System.Windows.Forms.NativeWindow> instance, releases the handle, and posts a WM_CLOSE message to the associated window.\n  syntax:\n    content: ~NativeWindow ();\n    parameters: []\n  overload: System.Windows.Forms.NativeWindow.Finalize*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n  ms.technology:\n  - dotnet-winforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)\n  commentId: M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)\n  id: FromHandle(System.IntPtr)\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: FromHandle(IntPtr)\n  nameWithType: NativeWindow.FromHandle(IntPtr)\n  fullName: NativeWindow.FromHandle(IntPtr)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Retrieves the window associated with the specified handle.\n  remarks: If you receive a handle from another method, use this method to retrieve the window associated with the handle. The handle must already be owned by another <xref:System.Windows.Forms.NativeWindow> in the current process; otherwise, `null` is returned.\n  syntax:\n    content: public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);\n    parameters:\n    - id: handle\n      type: System.IntPtr\n      description: A handle to a window.\n    return:\n      type: System.Windows.Forms.NativeWindow\n      description: The <xref href=\"System.Windows.Forms.NativeWindow\"></xref> associated with the specified handle. This method returns `null` when the handle does not have an associated window.\n  overload: System.Windows.Forms.NativeWindow.FromHandle*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n  ms.technology:\n  - dotnet-winforms\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Forms.NativeWindow.Handle\n  commentId: P:System.Windows.Forms.NativeWindow.Handle\n  id: Handle\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: Handle\n  nameWithType: NativeWindow.Handle\n  fullName: NativeWindow.Handle\n  type: Property\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Gets the handle for this window.\n  remarks: Use this method when calling Windows API methods that require a handle for a window or control.\n  example:\n  - \"The following code example demonstrates creating a window with a specific operating system window class name. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this. The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.  \\n  \\n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to BUTTON. This creates a Win32 button window. The location and size of the button is set, along with specifying additional window styles. The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received. Although the example looks for the WM_ACTIVATEAPP message, this could be replaced in a real program with window messages specific to the type created.  \\n  \\n> [!NOTE]\\n>  Some control types send their window messages to the window parent instead of the window. See the Windows Platform SDK for more information.  \\n  \\n [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]\\n [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]\\n [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]\"\n  syntax:\n    content: public IntPtr Handle { get; }\n    return:\n      type: System.IntPtr\n      description: If successful, an <xref href=\"System.IntPtr\"></xref> representing the handle to the associated native Win32 window; otherwise, 0 if no handle is associated with the window.\n  overload: System.Windows.Forms.NativeWindow.Handle*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n  ms.technology:\n  - dotnet-winforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Forms.NativeWindow.OnHandleChange\n  commentId: M:System.Windows.Forms.NativeWindow.OnHandleChange\n  id: OnHandleChange\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: OnHandleChange()\n  nameWithType: NativeWindow.OnHandleChange()\n  fullName: NativeWindow.OnHandleChange()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Specifies a notification method that is called when the handle for a window is changed.\n  remarks: This method is invoked when the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.\n  example:\n  - \"The following code example demonstrates creating a window with a specific operating system window class name. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this. The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.  \\n  \\n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`. This creates a Win32 button window. The location and size of the button is set, along with specifying additional window styles. The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received. Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.  \\n  \\n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \\n  \\n> [!NOTE]\\n>  Some control types send their window messages to the window parent instead of the window. See the Windows Platform SDK for more information.  \\n  \\n [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]\\n [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]\\n [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]\"\n  syntax:\n    content: protected virtual void OnHandleChange ();\n    parameters: []\n  overload: System.Windows.Forms.NativeWindow.OnHandleChange*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n  ms.technology:\n  - dotnet-winforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)\n  commentId: M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)\n  id: OnThreadException(System.Exception)\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: OnThreadException(Exception)\n  nameWithType: NativeWindow.OnThreadException(Exception)\n  fullName: NativeWindow.OnThreadException(Exception)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: When overridden in a derived class, manages an unhandled thread exception.\n  remarks: Typically, <xref:System.Windows.Forms.Application.OnThreadException%2A> handles thread exceptions.\n  syntax:\n    content: protected virtual void OnThreadException (Exception e);\n    parameters:\n    - id: e\n      type: System.Exception\n      description: An <xref href=\"System.Exception\"></xref> that specifies the unhandled thread exception.\n  overload: System.Windows.Forms.NativeWindow.OnThreadException*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n  ms.technology:\n  - dotnet-winforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Forms.NativeWindow.ReleaseHandle\n  commentId: M:System.Windows.Forms.NativeWindow.ReleaseHandle\n  id: ReleaseHandle\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: ReleaseHandle()\n  nameWithType: NativeWindow.ReleaseHandle()\n  fullName: NativeWindow.ReleaseHandle()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Releases the handle associated with this window.\n  remarks: \"This method does not destroy the window handle. Instead, it sets the handle's window procedure to the default window procedure. It sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0 and calls <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> to reflect the change.  \\n  \\n A window automatically calls this method if it receives a native Win32 WM_NCDESTROY message, indicating that Windows has destroyed the handle.\"\n  example:\n  - \"The following code example demonstrates intercepting operating system window messages in a window procedure. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \\n  \\n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message. The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use. The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.  \\n  \\n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \\n  \\n [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]\\n [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]\\n [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]\"\n  syntax:\n    content: public virtual void ReleaseHandle ();\n    parameters: []\n  overload: System.Windows.Forms.NativeWindow.ReleaseHandle*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n  ms.technology:\n  - dotnet-winforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)\n  commentId: M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)\n  id: WndProc(System.Windows.Forms.Message@)\n  parent: System.Windows.Forms.NativeWindow\n  langs:\n  - csharp\n  name: WndProc(Message)\n  nameWithType: NativeWindow.WndProc(Message)\n  fullName: NativeWindow.WndProc(Message)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Invokes the default window procedure associated with this window.\n  remarks: This method is called when a window message is sent to the handle of the window.\n  example:\n  - \"The following code example demonstrates intercepting operating system window messages in a window procedure. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \\n  \\n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message. The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use. The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.  \\n  \\n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \\n  \\n [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]\\n [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]\\n [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]\"\n  syntax:\n    content: protected virtual void WndProc (ref System.Windows.Forms.Message m);\n    parameters:\n    - id: m\n      type: System.Windows.Forms.Message\n      description: A <xref href=\"System.Windows.Forms.Message\"></xref> that is associated with the current Windows message.\n  overload: System.Windows.Forms.NativeWindow.WndProc*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n  ms.technology:\n  - dotnet-winforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.MarshalByRefObject\n  parent: System\n  isExternal: false\n  name: MarshalByRefObject\n  nameWithType: MarshalByRefObject\n  fullName: System.MarshalByRefObject\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.ComponentModel.Win32Exception\n  parent: System.ComponentModel\n  isExternal: false\n  name: Win32Exception\n  nameWithType: Win32Exception\n  fullName: System.ComponentModel.Win32Exception\n- uid: System.OutOfMemoryException\n  parent: System\n  isExternal: false\n  name: OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Windows.Forms.NativeWindow.#ctor\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: NativeWindow()\n  nameWithType: NativeWindow.NativeWindow()\n  fullName: NativeWindow.NativeWindow()\n- uid: System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: AssignHandle(IntPtr)\n  nameWithType: NativeWindow.AssignHandle(IntPtr)\n  fullName: NativeWindow.AssignHandle(IntPtr)\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: CreateHandle(CreateParams)\n  nameWithType: NativeWindow.CreateHandle(CreateParams)\n  fullName: NativeWindow.CreateHandle(CreateParams)\n- uid: System.Windows.Forms.CreateParams\n  parent: System.Windows.Forms\n  isExternal: false\n  name: CreateParams\n  nameWithType: CreateParams\n  fullName: System.Windows.Forms.CreateParams\n- uid: System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: DefWndProc(Message)\n  nameWithType: NativeWindow.DefWndProc(Message)\n  fullName: NativeWindow.DefWndProc(Message)\n- uid: System.Windows.Forms.Message\n  parent: System.Windows.Forms\n  isExternal: false\n  name: Message\n  nameWithType: Message\n  fullName: System.Windows.Forms.Message\n- uid: System.Windows.Forms.NativeWindow.DestroyHandle\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: DestroyHandle()\n  nameWithType: NativeWindow.DestroyHandle()\n  fullName: NativeWindow.DestroyHandle()\n- uid: System.Windows.Forms.NativeWindow.Finalize\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: Finalize()\n  nameWithType: NativeWindow.Finalize()\n  fullName: NativeWindow.Finalize()\n- uid: System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: FromHandle(IntPtr)\n  nameWithType: NativeWindow.FromHandle(IntPtr)\n  fullName: NativeWindow.FromHandle(IntPtr)\n- uid: System.Windows.Forms.NativeWindow\n  parent: System.Windows.Forms\n  isExternal: false\n  name: NativeWindow\n  nameWithType: NativeWindow\n  fullName: System.Windows.Forms.NativeWindow\n- uid: System.Windows.Forms.NativeWindow.Handle\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: Handle\n  nameWithType: NativeWindow.Handle\n  fullName: NativeWindow.Handle\n- uid: System.Windows.Forms.NativeWindow.OnHandleChange\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: OnHandleChange()\n  nameWithType: NativeWindow.OnHandleChange()\n  fullName: NativeWindow.OnHandleChange()\n- uid: System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: OnThreadException(Exception)\n  nameWithType: NativeWindow.OnThreadException(Exception)\n  fullName: NativeWindow.OnThreadException(Exception)\n- uid: System.Windows.Forms.NativeWindow.ReleaseHandle\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: ReleaseHandle()\n  nameWithType: NativeWindow.ReleaseHandle()\n  fullName: NativeWindow.ReleaseHandle()\n- uid: System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: WndProc(Message)\n  nameWithType: NativeWindow.WndProc(Message)\n  fullName: NativeWindow.WndProc(Message)\n- uid: System.Windows.Forms.NativeWindow.#ctor*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: NativeWindow\n  nameWithType: NativeWindow.NativeWindow\n  fullName: NativeWindow.NativeWindow\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n- uid: System.Windows.Forms.NativeWindow.AssignHandle*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: AssignHandle\n  nameWithType: NativeWindow.AssignHandle\n  fullName: NativeWindow.AssignHandle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n- uid: System.Windows.Forms.NativeWindow.CreateHandle*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: CreateHandle\n  nameWithType: NativeWindow.CreateHandle\n  fullName: NativeWindow.CreateHandle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n- uid: System.Windows.Forms.NativeWindow.DefWndProc*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: DefWndProc\n  nameWithType: NativeWindow.DefWndProc\n  fullName: NativeWindow.DefWndProc\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n- uid: System.Windows.Forms.NativeWindow.DestroyHandle*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: DestroyHandle\n  nameWithType: NativeWindow.DestroyHandle\n  fullName: NativeWindow.DestroyHandle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n- uid: System.Windows.Forms.NativeWindow.Finalize*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: Finalize\n  nameWithType: NativeWindow.Finalize\n  fullName: NativeWindow.Finalize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n- uid: System.Windows.Forms.NativeWindow.FromHandle*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: FromHandle\n  nameWithType: NativeWindow.FromHandle\n  fullName: NativeWindow.FromHandle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n- uid: System.Windows.Forms.NativeWindow.Handle*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: Handle\n  nameWithType: NativeWindow.Handle\n  fullName: NativeWindow.Handle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n- uid: System.Windows.Forms.NativeWindow.OnHandleChange*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: OnHandleChange\n  nameWithType: NativeWindow.OnHandleChange\n  fullName: NativeWindow.OnHandleChange\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n- uid: System.Windows.Forms.NativeWindow.OnThreadException*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: OnThreadException\n  nameWithType: NativeWindow.OnThreadException\n  fullName: NativeWindow.OnThreadException\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n- uid: System.Windows.Forms.NativeWindow.ReleaseHandle*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: ReleaseHandle\n  nameWithType: NativeWindow.ReleaseHandle\n  fullName: NativeWindow.ReleaseHandle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n- uid: System.Windows.Forms.NativeWindow.WndProc*\n  parent: System.Windows.Forms.NativeWindow\n  isExternal: false\n  name: WndProc\n  nameWithType: NativeWindow.WndProc\n  fullName: NativeWindow.WndProc\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: CreateObjRef(Type)\n  nameWithType: MarshalByRefObject.CreateObjRef(Type)\n  fullName: MarshalByRefObject.CreateObjRef(Type)\n- uid: System.MarshalByRefObject.GetLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: GetLifetimeService()\n  nameWithType: MarshalByRefObject.GetLifetimeService()\n  fullName: MarshalByRefObject.GetLifetimeService()\n- uid: System.MarshalByRefObject.InitializeLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: InitializeLifetimeService()\n  nameWithType: MarshalByRefObject.InitializeLifetimeService()\n  fullName: MarshalByRefObject.InitializeLifetimeService()\n- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: MemberwiseClone(Boolean)\n  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)\n  fullName: MarshalByRefObject.MemberwiseClone(Boolean)\n- uid: System.Windows.Forms.IWin32Window\n  parent: System.Windows.Forms\n  isExternal: false\n  name: IWin32Window\n  nameWithType: IWin32Window\n  fullName: System.Windows.Forms.IWin32Window\n"}