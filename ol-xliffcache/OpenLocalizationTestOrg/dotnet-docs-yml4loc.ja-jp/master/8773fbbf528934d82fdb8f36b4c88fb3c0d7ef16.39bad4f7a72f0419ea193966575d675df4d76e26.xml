{"nodes":[{"content":"Provides a slimmed down version of <xref href=\"System.Threading.ManualResetEvent\"></xref>.","nodes":[{"pos":[0,90],"content":"Provides a slimmed down version of <ph id=\"ph1\">&lt;xref href=\"System.Threading.ManualResetEvent\"&gt;&lt;/xref&gt;</ph>.","source":"Provides a slimmed down version of <xref href=\"System.Threading.ManualResetEvent\"></xref>."}],"pos":[1430,1521],"yaml":true},{"content":"You can use this class for better performance than <xref:System.Threading.ManualResetEvent> when wait times are expected to be very short, and when the event does not cross a process boundary. <xref:System.Threading.ManualResetEventSlim> uses busy spinning for a short time while it waits for the event to become signaled. When wait times are short, spinning can be much less expensive than waiting by using wait handles. However, if the event does not become signaled within a certain period of time, <xref:System.Threading.ManualResetEventSlim> resorts to a regular event handle wait.","nodes":[{"pos":[0,586],"content":"You can use this class for better performance than <xref:System.Threading.ManualResetEvent> when wait times are expected to be very short, and when the event does not cross a process boundary. <xref:System.Threading.ManualResetEventSlim> uses busy spinning for a short time while it waits for the event to become signaled. When wait times are short, spinning can be much less expensive than waiting by using wait handles. However, if the event does not become signaled within a certain period of time, <xref:System.Threading.ManualResetEventSlim> resorts to a regular event handle wait.","nodes":[{"content":"You can use this class for better performance than <xref:System.Threading.ManualResetEvent> when wait times are expected to be very short, and when the event does not cross a process boundary. <xref:System.Threading.ManualResetEventSlim> uses busy spinning for a short time while it waits for the event to become signaled. When wait times are short, spinning can be much less expensive than waiting by using wait handles. However, if the event does not become signaled within a certain period of time, <xref:System.Threading.ManualResetEventSlim> resorts to a regular event handle wait.","pos":[0,586],"nodes":[{"content":"You can use this class for better performance than <ph id=\"ph1\">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> when wait times are expected to be very short, and when the event does not cross a process boundary.","pos":[0,192],"source":"You can use this class for better performance than <xref:System.Threading.ManualResetEvent> when wait times are expected to be very short, and when the event does not cross a process boundary."},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> uses busy spinning for a short time while it waits for the event to become signaled.","pos":[193,322],"source":" <xref:System.Threading.ManualResetEventSlim> uses busy spinning for a short time while it waits for the event to become signaled."},{"content":"When wait times are short, spinning can be much less expensive than waiting by using wait handles.","pos":[323,421]},{"content":"However, if the event does not become signaled within a certain period of time, <ph id=\"ph1\">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> resorts to a regular event handle wait.","pos":[422,586],"source":" However, if the event does not become signaled within a certain period of time, <xref:System.Threading.ManualResetEventSlim> resorts to a regular event handle wait."}]}]}],"pos":[1532,2119],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> class with an initial state of nonsignaled.","nodes":[{"pos":[0,136],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.ManualResetEventSlim\"&gt;&lt;/xref&gt;</ph> class with an initial state of nonsignaled.","source":"Initializes a new instance of the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> class with an initial state of nonsignaled."}],"pos":[4860,4997],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> class with a Boolean value indicating whether to set the intial state to signaled.","nodes":[{"pos":[0,175],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.ManualResetEventSlim\"&gt;&lt;/xref&gt;</ph> class with a Boolean value indicating whether to set the intial state to signaled.","source":"Initializes a new instance of the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> class with a Boolean value indicating whether to set the intial state to signaled."}],"pos":[6716,6892],"yaml":true},{"content":"true to set the initial state signaled; false to set the initial state to nonsignaled.","nodes":[{"pos":[0,86],"content":"true to set the initial state signaled; false to set the initial state to nonsignaled.","nodes":[{"content":"true to set the initial state signaled; false to set the initial state to nonsignaled.","pos":[0,86]}]}],"pos":[7049,7136],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> class with a Boolean value indicating whether to set the intial state to signaled and a specified spin count.","nodes":[{"pos":[0,202],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.ManualResetEventSlim\"&gt;&lt;/xref&gt;</ph> class with a Boolean value indicating whether to set the intial state to signaled and a specified spin count.","source":"Initializes a new instance of the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> class with a Boolean value indicating whether to set the intial state to signaled and a specified spin count."}],"pos":[8841,9044],"yaml":true},{"content":"true to set the initial state to signaled; false to set the initial state to nonsignaled.","nodes":[{"pos":[0,89],"content":"true to set the initial state to signaled; false to set the initial state to nonsignaled.","nodes":[{"content":"true to set the initial state to signaled; false to set the initial state to nonsignaled.","pos":[0,89]}]}],"pos":[9216,9306],"yaml":true},{"content":"The number of spin waits that will occur before falling back to a kernel-based wait operation.","nodes":[{"pos":[0,94],"content":"The number of spin waits that will occur before falling back to a kernel-based wait operation.","nodes":[{"content":"The number of spin waits that will occur before falling back to a kernel-based wait operation.","pos":[0,94]}]}],"pos":[9370,9465],"yaml":true},{"content":"<code>spinCount</code> is less than 0 or greater than the maximum allowed value.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">&lt;code&gt;spinCount&lt;/code&gt;</ph> is less than 0 or greater than the maximum allowed value.","source":"<code>spinCount</code> is less than 0 or greater than the maximum allowed value."}],"pos":[9650,9731],"yaml":true},{"content":"Releases all resources used by the current instance of the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> class.","nodes":[{"pos":[0,124],"content":"Releases all resources used by the current instance of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.ManualResetEventSlim\"&gt;&lt;/xref&gt;</ph> class.","source":"Releases all resources used by the current instance of the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> class."}],"pos":[11193,11318],"yaml":true},{"content":"Call `Dispose` when you are finished using the <xref:System.Threading.ManualResetEventSlim>. The `Dispose` method leaves the <xref:System.Threading.ManualResetEventSlim> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.ManualResetEventSlim> so the garbage collector can reclaim the memory that the <xref:System.Threading.ManualResetEventSlim> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \n  \n> [!NOTE]\n>  Always call `Dispose` before you release your last reference to the <xref:System.Threading.ManualResetEventSlim>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.ManualResetEventSlim> object's `Finalize` method.","nodes":[{"pos":[0,417],"content":"Call `Dispose` when you are finished using the <xref:System.Threading.ManualResetEventSlim>. The `Dispose` method leaves the <xref:System.Threading.ManualResetEventSlim> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.ManualResetEventSlim> so the garbage collector can reclaim the memory that the <xref:System.Threading.ManualResetEventSlim> was occupying.","nodes":[{"content":"Call <ph id=\"ph1\">`Dispose`</ph> when you are finished using the <ph id=\"ph2\">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>.","pos":[0,92],"source":"Call `Dispose` when you are finished using the <xref:System.Threading.ManualResetEventSlim>."},{"content":"The <ph id=\"ph1\">`Dispose`</ph> method leaves the <ph id=\"ph2\">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> in an unusable state.","pos":[93,191],"source":" The `Dispose` method leaves the <xref:System.Threading.ManualResetEventSlim> in an unusable state."},{"content":"After calling <ph id=\"ph1\">`Dispose`</ph>, you must release all references to the <ph id=\"ph2\">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> so the garbage collector can reclaim the memory that the <ph id=\"ph3\">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> was occupying.","pos":[192,417],"source":" After calling `Dispose`, you must release all references to the <xref:System.Threading.ManualResetEventSlim> so the garbage collector can reclaim the memory that the <xref:System.Threading.ManualResetEventSlim> was occupying."}]},{"pos":[424,629],"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.","source":"For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md)."},{"pos":[637,927],"content":"[!NOTE]\n Always call `Dispose` before you release your last reference to the <xref:System.Threading.ManualResetEventSlim>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.ManualResetEventSlim> object's `Finalize` method.","leadings":["","> "],"nodes":[{"content":" Always call `Dispose` before you release your last reference to the <xref:System.Threading.ManualResetEventSlim>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.ManualResetEventSlim> object's `Finalize` method.","pos":[8,288],"nodes":[{"content":"Always call <ph id=\"ph1\">`Dispose`</ph> before you release your last reference to the <ph id=\"ph2\">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>.","pos":[1,114],"source":" Always call `Dispose` before you release your last reference to the <xref:System.Threading.ManualResetEventSlim>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id=\"ph1\">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> object's <ph id=\"ph2\">`Finalize`</ph> method.","pos":[115,280],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.ManualResetEventSlim> object's `Finalize` method."}]}]}],"pos":[11329,12264],"yaml":true,"extradata":"MT"},{"content":"Releases the unmanaged resources used by the <xref href=\"System.Threading.ManualResetEventSlim\"></xref>, and optionally releases the managed resources.","nodes":[{"pos":[0,151],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Threading.ManualResetEventSlim\"&gt;&lt;/xref&gt;</ph>, and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.Threading.ManualResetEventSlim\"></xref>, and optionally releases the managed resources."}],"pos":[13937,14089],"yaml":true},{"content":"Unlike most of the members of <xref:System.Threading.ManualResetEventSlim>, <xref:System.Threading.ManualResetEventSlim.Dispose%2A> is not thread-safe and may not be used concurrently with other members of this instance.","nodes":[{"pos":[0,220],"content":"Unlike most of the members of <xref:System.Threading.ManualResetEventSlim>, <xref:System.Threading.ManualResetEventSlim.Dispose%2A> is not thread-safe and may not be used concurrently with other members of this instance.","nodes":[{"content":"Unlike most of the members of <ph id=\"ph1\">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Threading.ManualResetEventSlim.Dispose%2A&gt;</ph> is not thread-safe and may not be used concurrently with other members of this instance.","pos":[0,220],"source":"Unlike most of the members of <xref:System.Threading.ManualResetEventSlim>, <xref:System.Threading.ManualResetEventSlim.Dispose%2A> is not thread-safe and may not be used concurrently with other members of this instance."}]}],"pos":[14100,14321],"yaml":true,"extradata":"MT"},{"content":"true to release both managed and unmanaged resources; false to release only unmanaged resources.","nodes":[{"pos":[0,96],"content":"true to release both managed and unmanaged resources; false to release only unmanaged resources.","nodes":[{"content":"true to release both managed and unmanaged resources; false to release only unmanaged resources.","pos":[0,96]}]}],"pos":[14475,14572],"yaml":true},{"content":"Gets whether the event is set.","nodes":[{"pos":[0,30],"content":"Gets whether the event is set.","nodes":[{"content":"Gets whether the event is set.","pos":[0,30]}]}],"pos":[16094,16125],"yaml":true},{"content":"true if the event has is set; otherwise, false.","nodes":[{"pos":[0,47],"content":"true if the event has is set; otherwise, false.","nodes":[{"content":"true if the event has is set; otherwise, false.","pos":[0,47]}]}],"pos":[16233,16281],"yaml":true},{"content":"Sets the state of the event to nonsignaled, which causes threads to block.","nodes":[{"pos":[0,74],"content":"Sets the state of the event to nonsignaled, which causes threads to block.","nodes":[{"content":"Sets the state of the event to nonsignaled, which causes threads to block.","pos":[0,74]}]}],"pos":[17805,17880],"yaml":true},{"content":"<xref:System.Threading.ManualResetEventSlim.Reset%2A> can be called concurrently with all members except <xref:System.Threading.ManualResetEventSlim.WaitHandle%2A>.","nodes":[{"pos":[0,164],"content":"<xref:System.Threading.ManualResetEventSlim.Reset%2A> can be called concurrently with all members except <xref:System.Threading.ManualResetEventSlim.WaitHandle%2A>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.ManualResetEventSlim.Reset%2A&gt;</ph> can be called concurrently with all members except <ph id=\"ph2\">&lt;xref:System.Threading.ManualResetEventSlim.WaitHandle%2A&gt;</ph>.","pos":[0,164],"source":"<xref:System.Threading.ManualResetEventSlim.Reset%2A> can be called concurrently with all members except <xref:System.Threading.ManualResetEventSlim.WaitHandle%2A>."}]}],"pos":[17891,18056],"yaml":true,"extradata":"MT"},{"content":"The object has already been disposed.","nodes":[{"pos":[0,37],"content":"The object has already been disposed.","nodes":[{"content":"The object has already been disposed.","pos":[0,37]}]}],"pos":[18297,18335],"yaml":true},{"content":"Sets the state of the event to signaled, which allows one or more threads waiting on the event to proceed.","nodes":[{"pos":[0,106],"content":"Sets the state of the event to signaled, which allows one or more threads waiting on the event to proceed.","nodes":[{"content":"Sets the state of the event to signaled, which allows one or more threads waiting on the event to proceed.","pos":[0,106]}]}],"pos":[19773,19880],"yaml":true},{"content":"Gets the number of spin waits that will occur before falling back to a kernel-based wait operation.","nodes":[{"pos":[0,99],"content":"Gets the number of spin waits that will occur before falling back to a kernel-based wait operation.","nodes":[{"content":"Gets the number of spin waits that will occur before falling back to a kernel-based wait operation.","pos":[0,99]}]}],"pos":[21484,21584],"yaml":true},{"content":"Returns the number of spin waits that will occur before falling back to a kernel-based wait operation.","nodes":[{"pos":[0,102],"content":"Returns the number of spin waits that will occur before falling back to a kernel-based wait operation.","nodes":[{"content":"Returns the number of spin waits that will occur before falling back to a kernel-based wait operation.","pos":[0,102]}]}],"pos":[21693,21796],"yaml":true},{"content":"Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\"></xref> is set.","nodes":[{"pos":[0,110],"content":"Blocks the current thread until the current <ph id=\"ph1\">&lt;xref href=\"System.Threading.ManualResetEventSlim\"&gt;&lt;/xref&gt;</ph> is set.","source":"Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\"></xref> is set."}],"pos":[23318,23429],"yaml":true},{"content":"The caller of this method blocks indefinitely until the current instance is set. The caller will return immediately if the event is currently in a set state.","nodes":[{"pos":[0,157],"content":"The caller of this method blocks indefinitely until the current instance is set. The caller will return immediately if the event is currently in a set state.","nodes":[{"content":"The caller of this method blocks indefinitely until the current instance is set. The caller will return immediately if the event is currently in a set state.","pos":[0,157],"nodes":[{"content":"The caller of this method blocks indefinitely until the current instance is set.","pos":[0,80]},{"content":"The caller will return immediately if the event is currently in a set state.","pos":[81,157]}]}]}],"pos":[23440,23598],"yaml":true,"extradata":"MT"},{"content":"The maximum number of waiters has been exceeded.","nodes":[{"pos":[0,48],"content":"The maximum number of waiters has been exceeded.","nodes":[{"content":"The maximum number of waiters has been exceeded.","pos":[0,48]}]}],"pos":[23841,23890],"yaml":true},{"content":"The object has already been disposed.","nodes":[{"pos":[0,37],"content":"The object has already been disposed.","nodes":[{"content":"The object has already been disposed.","pos":[0,37]}]}],"pos":[23996,24034],"yaml":true},{"content":"Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\"></xref> is set, using a 32-bit signed integer to measure the time interval.","nodes":[{"pos":[0,170],"content":"Blocks the current thread until the current <ph id=\"ph1\">&lt;xref href=\"System.Threading.ManualResetEventSlim\"&gt;&lt;/xref&gt;</ph> is set, using a 32-bit signed integer to measure the time interval.","source":"Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\"></xref> is set, using a 32-bit signed integer to measure the time interval."}],"pos":[25535,25706],"yaml":true},{"content":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref>(-1) to wait indefinitely.","nodes":[{"pos":[0,119],"content":"The number of milliseconds to wait, or <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph>(-1) to wait indefinitely.","source":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref>(-1) to wait indefinitely."}],"pos":[25863,25983],"yaml":true},{"content":"`true` if the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> was set; otherwise, `false`.","nodes":[{"pos":[0,101],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Threading.ManualResetEventSlim\"&gt;&lt;/xref&gt;</ph> was set; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> was set; otherwise, `false`."}],"pos":[26041,26145],"yaml":true},{"content":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.","source":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out."}],"pos":[26329,26437],"yaml":true},{"content":"The maximum number of waiters has been exceeded.","nodes":[{"pos":[0,48],"content":"The maximum number of waiters has been exceeded.","nodes":[{"content":"The maximum number of waiters has been exceeded.","pos":[0,48]}]}],"pos":[26547,26596],"yaml":true},{"content":"The object has already been disposed.","nodes":[{"pos":[0,37],"content":"The object has already been disposed.","nodes":[{"content":"The object has already been disposed.","pos":[0,37]}]}],"pos":[26702,26740],"yaml":true},{"content":"Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\"></xref> receives a signal, while observing a <xref href=\"System.Threading.CancellationToken\"></xref>.","nodes":[{"pos":[0,196],"content":"Blocks the current thread until the current <ph id=\"ph1\">&lt;xref href=\"System.Threading.ManualResetEventSlim\"&gt;&lt;/xref&gt;</ph> receives a signal, while observing a <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph>.","source":"Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\"></xref> receives a signal, while observing a <xref href=\"System.Threading.CancellationToken\"></xref>."}],"pos":[28343,28540],"yaml":true},{"content":"The caller of this method blocks indefinitely until the current instance is set. The caller will return immediately if the event is currently in a set state.","nodes":[{"pos":[0,157],"content":"The caller of this method blocks indefinitely until the current instance is set. The caller will return immediately if the event is currently in a set state.","nodes":[{"content":"The caller of this method blocks indefinitely until the current instance is set. The caller will return immediately if the event is currently in a set state.","pos":[0,157],"nodes":[{"content":"The caller of this method blocks indefinitely until the current instance is set.","pos":[0,80]},{"content":"The caller will return immediately if the event is currently in a set state.","pos":[81,157]}]}]}],"pos":[28551,28709],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> to observe.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> to observe.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> to observe."}],"pos":[28915,28987],"yaml":true},{"content":"The maximum number of waiters has been exceeded.","nodes":[{"pos":[0,48],"content":"The maximum number of waiters has been exceeded.","nodes":[{"content":"The maximum number of waiters has been exceeded.","pos":[0,48]}]}],"pos":[29167,29216],"yaml":true},{"content":"<code>cancellationToken</code> was canceled.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;cancellationToken&lt;/code&gt;</ph> was canceled.","source":"<code>cancellationToken</code> was canceled."}],"pos":[29328,29373],"yaml":true},{"content":"The object has already been disposed or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has been disposed.","nodes":[{"pos":[0,168],"content":"The object has already been disposed or the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"The object has already been disposed or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has been disposed."}],"pos":[29479,29648],"yaml":true},{"content":"Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\"></xref> is set, using a <xref href=\"System.TimeSpan\"></xref> to measure the time interval.","nodes":[{"pos":[0,185],"content":"Blocks the current thread until the current <ph id=\"ph1\">&lt;xref href=\"System.Threading.ManualResetEventSlim\"&gt;&lt;/xref&gt;</ph> is set, using a <ph id=\"ph2\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> to measure the time interval.","source":"Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\"></xref> is set, using a <xref href=\"System.TimeSpan\"></xref> to measure the time interval."}],"pos":[31167,31353],"yaml":true},{"content":"A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely.","nodes":[{"pos":[0,186],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that represents the number of milliseconds to wait, or a <ph id=\"ph2\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that represents -1 milliseconds to wait indefinitely.","source":"A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely."}],"pos":[31494,31681],"yaml":true},{"content":"`true` if the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> was set; otherwise, `false`.","nodes":[{"pos":[0,101],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Threading.ManualResetEventSlim\"&gt;&lt;/xref&gt;</ph> was set; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> was set; otherwise, `false`."}],"pos":[31739,31843],"yaml":true},{"content":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out.  \n  \n -or-  \n  \n The number of milliseconds in <code>timeout</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,108],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.","source":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out."},{"pos":[115,119],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[126,236],"content":"The number of milliseconds in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The number of milliseconds in <code>timeout</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[32027,32272],"yaml":true},{"content":"The maximum number of waiters has been exceeded.","nodes":[{"pos":[0,48],"content":"The maximum number of waiters has been exceeded.","nodes":[{"content":"The maximum number of waiters has been exceeded.","pos":[0,48]}]}],"pos":[32382,32431],"yaml":true},{"content":"The object has already been disposed.","nodes":[{"pos":[0,37],"content":"The object has already been disposed.","nodes":[{"content":"The object has already been disposed.","pos":[0,37]}]}],"pos":[32537,32575],"yaml":true},{"content":"Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\"></xref> is set, using a 32-bit signed integer to measure the time interval, while observing a <xref href=\"System.Threading.CancellationToken\"></xref>.","nodes":[{"pos":[0,245],"content":"Blocks the current thread until the current <ph id=\"ph1\">&lt;xref href=\"System.Threading.ManualResetEventSlim\"&gt;&lt;/xref&gt;</ph> is set, using a 32-bit signed integer to measure the time interval, while observing a <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph>.","source":"Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\"></xref> is set, using a 32-bit signed integer to measure the time interval, while observing a <xref href=\"System.Threading.CancellationToken\"></xref>."}],"pos":[34238,34484],"yaml":true},{"content":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref>(-1) to wait indefinitely.","nodes":[{"pos":[0,119],"content":"The number of milliseconds to wait, or <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph>(-1) to wait indefinitely.","source":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref>(-1) to wait indefinitely."}],"pos":[34695,34815],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> to observe.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> to observe.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> to observe."}],"pos":[34909,34981],"yaml":true},{"content":"`true` if the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> was set; otherwise, `false`.","nodes":[{"pos":[0,101],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Threading.ManualResetEventSlim\"&gt;&lt;/xref&gt;</ph> was set; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> was set; otherwise, `false`."}],"pos":[35039,35143],"yaml":true},{"content":"<code>cancellationToken</code> was canceled.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;cancellationToken&lt;/code&gt;</ph> was canceled.","source":"<code>cancellationToken</code> was canceled."}],"pos":[35325,35370],"yaml":true},{"content":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.","source":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out."}],"pos":[35484,35592],"yaml":true},{"content":"The maximum number of waiters has been exceeded.","nodes":[{"pos":[0,48],"content":"The maximum number of waiters has been exceeded.","nodes":[{"content":"The maximum number of waiters has been exceeded.","pos":[0,48]}]}],"pos":[35702,35751],"yaml":true},{"content":"The object has already been disposed or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has been disposed.","nodes":[{"pos":[0,168],"content":"The object has already been disposed or the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"The object has already been disposed or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has been disposed."}],"pos":[35857,36026],"yaml":true},{"content":"Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\"></xref> is set, using a <xref href=\"System.TimeSpan\"></xref> to measure the time interval, while observing a <xref href=\"System.Threading.CancellationToken\"></xref>.","nodes":[{"pos":[0,260],"content":"Blocks the current thread until the current <ph id=\"ph1\">&lt;xref href=\"System.Threading.ManualResetEventSlim\"&gt;&lt;/xref&gt;</ph> is set, using a <ph id=\"ph2\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> to measure the time interval, while observing a <ph id=\"ph3\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph>.","source":"Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\"></xref> is set, using a <xref href=\"System.TimeSpan\"></xref> to measure the time interval, while observing a <xref href=\"System.Threading.CancellationToken\"></xref>."}],"pos":[37707,37968],"yaml":true},{"content":"A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely.","nodes":[{"pos":[0,186],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that represents the number of milliseconds to wait, or a <ph id=\"ph2\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that represents -1 milliseconds to wait indefinitely.","source":"A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely."}],"pos":[38163,38350],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> to observe.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> to observe.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> to observe."}],"pos":[38444,38516],"yaml":true},{"content":"`true` if the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> was set; otherwise, `false`.","nodes":[{"pos":[0,101],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Threading.ManualResetEventSlim\"&gt;&lt;/xref&gt;</ph> was set; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> was set; otherwise, `false`."}],"pos":[38574,38678],"yaml":true},{"content":"<code>cancellationToken</code> was canceled.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;cancellationToken&lt;/code&gt;</ph> was canceled.","source":"<code>cancellationToken</code> was canceled."}],"pos":[38860,38905],"yaml":true},{"content":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out.  \n  \n -or-  \n  \n The number of milliseconds in <code>timeout</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,108],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.","source":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out."},{"pos":[115,119],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[126,236],"content":"The number of milliseconds in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The number of milliseconds in <code>timeout</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[39019,39264],"yaml":true},{"content":"The maximum number of waiters has been exceeded.","nodes":[{"pos":[0,48],"content":"The maximum number of waiters has been exceeded.","nodes":[{"content":"The maximum number of waiters has been exceeded.","pos":[0,48]}]}],"pos":[39374,39423],"yaml":true},{"content":"The object has already been disposed or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has been disposed.","nodes":[{"pos":[0,168],"content":"The object has already been disposed or the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"The object has already been disposed or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has been disposed."}],"pos":[39529,39698],"yaml":true},{"content":"Gets the underlying <xref href=\"System.Threading.WaitHandle\"></xref> object for this <xref href=\"System.Threading.ManualResetEventSlim\"></xref>.","nodes":[{"pos":[0,144],"content":"Gets the underlying <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitHandle\"&gt;&lt;/xref&gt;</ph> object for this <ph id=\"ph2\">&lt;xref href=\"System.Threading.ManualResetEventSlim\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the underlying <xref href=\"System.Threading.WaitHandle\"></xref> object for this <xref href=\"System.Threading.ManualResetEventSlim\"></xref>."}],"pos":[41174,41319],"yaml":true},{"content":"Accessing this property forces initialization of an underlying event object if one hasn't already been created. To simply wait on this <xref:System.Threading.ManualResetEventSlim>, the public Wait methods should be preferred. It is recommended to dispose the <xref:System.Threading.ManualResetEventSlim> instance after accessing this property, in order to prevent a resource leak.","nodes":[{"pos":[0,380],"content":"Accessing this property forces initialization of an underlying event object if one hasn't already been created. To simply wait on this <xref:System.Threading.ManualResetEventSlim>, the public Wait methods should be preferred. It is recommended to dispose the <xref:System.Threading.ManualResetEventSlim> instance after accessing this property, in order to prevent a resource leak.","nodes":[{"content":"Accessing this property forces initialization of an underlying event object if one hasn't already been created. To simply wait on this <xref:System.Threading.ManualResetEventSlim>, the public Wait methods should be preferred. It is recommended to dispose the <xref:System.Threading.ManualResetEventSlim> instance after accessing this property, in order to prevent a resource leak.","pos":[0,380],"nodes":[{"content":"Accessing this property forces initialization of an underlying event object if one hasn't already been created.","pos":[0,111]},{"content":"To simply wait on this <ph id=\"ph1\">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>, the public Wait methods should be preferred.","pos":[112,225],"source":" To simply wait on this <xref:System.Threading.ManualResetEventSlim>, the public Wait methods should be preferred."},{"content":"It is recommended to dispose the <ph id=\"ph1\">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> instance after accessing this property, in order to prevent a resource leak.","pos":[226,380],"source":" It is recommended to dispose the <xref:System.Threading.ManualResetEventSlim> instance after accessing this property, in order to prevent a resource leak."}]}]}],"pos":[41330,41711],"yaml":true,"extradata":"MT"},{"content":"The underlying <xref href=\"System.Threading.WaitHandle\"></xref> event object fore this <xref href=\"System.Threading.ManualResetEventSlim\"></xref>.","nodes":[{"pos":[0,146],"content":"The underlying <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitHandle\"&gt;&lt;/xref&gt;</ph> event object fore this <ph id=\"ph2\">&lt;xref href=\"System.Threading.ManualResetEventSlim\"&gt;&lt;/xref&gt;</ph>.","source":"The underlying <xref href=\"System.Threading.WaitHandle\"></xref> event object fore this <xref href=\"System.Threading.ManualResetEventSlim\"></xref>."}],"pos":[41860,42007],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.ManualResetEventSlim\n  commentId: T:System.Threading.ManualResetEventSlim\n  id: ManualResetEventSlim\n  children:\n  - System.Threading.ManualResetEventSlim.#ctor\n  - System.Threading.ManualResetEventSlim.#ctor(System.Boolean)\n  - System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)\n  - System.Threading.ManualResetEventSlim.Dispose\n  - System.Threading.ManualResetEventSlim.Dispose(System.Boolean)\n  - System.Threading.ManualResetEventSlim.IsSet\n  - System.Threading.ManualResetEventSlim.Reset\n  - System.Threading.ManualResetEventSlim.Set\n  - System.Threading.ManualResetEventSlim.SpinCount\n  - System.Threading.ManualResetEventSlim.Wait\n  - System.Threading.ManualResetEventSlim.Wait(System.Int32)\n  - System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)\n  - System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)\n  - System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)\n  - System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)\n  - System.Threading.ManualResetEventSlim.WaitHandle\n  langs:\n  - csharp\n  name: ManualResetEventSlim\n  nameWithType: ManualResetEventSlim\n  fullName: System.Threading.ManualResetEventSlim\n  type: Class\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Provides a slimmed down version of <xref href=\"System.Threading.ManualResetEvent\"></xref>.\n  remarks: You can use this class for better performance than <xref:System.Threading.ManualResetEvent> when wait times are expected to be very short, and when the event does not cross a process boundary. <xref:System.Threading.ManualResetEventSlim> uses busy spinning for a short time while it waits for the event to become signaled. When wait times are short, spinning can be much less expensive than waiting by using wait handles. However, if the event does not become signaled within a certain period of time, <xref:System.Threading.ManualResetEventSlim> resorts to a regular event handle wait.\n  example:\n  - \"The following example shows how to use a <xref:System.Threading.ManualResetEventSlim>. For more information about the use of `SpinCount` and other best practices concerning the use of this type, see [ManualResetEvent and ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md).  \\n  \\n [!code-csharp[System.Threading.ManualResetEventSlim#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.manualreseteventslim/cs/mres.cs#01)]\\n [!code-vb[System.Threading.ManualResetEventSlim#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.manualreseteventslim/vb/mres.vb#01)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public class ManualResetEventSlim : IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ManualResetEventSlim.#ctor\n  commentId: M:System.Threading.ManualResetEventSlim.#ctor\n  id: '#ctor'\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  name: ManualResetEventSlim()\n  nameWithType: ManualResetEventSlim.ManualResetEventSlim()\n  fullName: ManualResetEventSlim.ManualResetEventSlim()\n  type: Constructor\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Initializes a new instance of the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> class with an initial state of nonsignaled.\n  syntax:\n    content: public ManualResetEventSlim ();\n    parameters: []\n  overload: System.Threading.ManualResetEventSlim.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ManualResetEventSlim.#ctor(System.Boolean)\n  commentId: M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  name: ManualResetEventSlim(Boolean)\n  nameWithType: ManualResetEventSlim.ManualResetEventSlim(Boolean)\n  fullName: ManualResetEventSlim.ManualResetEventSlim(Boolean)\n  type: Constructor\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Initializes a new instance of the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> class with a Boolean value indicating whether to set the intial state to signaled.\n  syntax:\n    content: public ManualResetEventSlim (bool initialState);\n    parameters:\n    - id: initialState\n      type: System.Boolean\n      description: true to set the initial state signaled; false to set the initial state to nonsignaled.\n  overload: System.Threading.ManualResetEventSlim.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)\n  commentId: M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)\n  id: '#ctor(System.Boolean,System.Int32)'\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  name: ManualResetEventSlim(Boolean, Int32)\n  nameWithType: ManualResetEventSlim.ManualResetEventSlim(Boolean, Int32)\n  fullName: ManualResetEventSlim.ManualResetEventSlim(Boolean, Int32)\n  type: Constructor\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Initializes a new instance of the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> class with a Boolean value indicating whether to set the intial state to signaled and a specified spin count.\n  syntax:\n    content: public ManualResetEventSlim (bool initialState, int spinCount);\n    parameters:\n    - id: initialState\n      type: System.Boolean\n      description: true to set the initial state to signaled; false to set the initial state to nonsignaled.\n    - id: spinCount\n      type: System.Int32\n      description: The number of spin waits that will occur before falling back to a kernel-based wait operation.\n  overload: System.Threading.ManualResetEventSlim.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>spinCount</code> is less than 0 or greater than the maximum allowed value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ManualResetEventSlim.Dispose\n  commentId: M:System.Threading.ManualResetEventSlim.Dispose\n  id: Dispose\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: ManualResetEventSlim.Dispose()\n  fullName: ManualResetEventSlim.Dispose()\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Releases all resources used by the current instance of the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> class.\n  remarks: \"Call `Dispose` when you are finished using the <xref:System.Threading.ManualResetEventSlim>. The `Dispose` method leaves the <xref:System.Threading.ManualResetEventSlim> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.ManualResetEventSlim> so the garbage collector can reclaim the memory that the <xref:System.Threading.ManualResetEventSlim> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \\n  \\n> [!NOTE]\\n>  Always call `Dispose` before you release your last reference to the <xref:System.Threading.ManualResetEventSlim>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.ManualResetEventSlim> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Threading.ManualResetEventSlim.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ManualResetEventSlim.Dispose(System.Boolean)\n  commentId: M:System.Threading.ManualResetEventSlim.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: ManualResetEventSlim.Dispose(Boolean)\n  fullName: ManualResetEventSlim.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Threading.ManualResetEventSlim\"></xref>, and optionally releases the managed resources.\n  remarks: Unlike most of the members of <xref:System.Threading.ManualResetEventSlim>, <xref:System.Threading.ManualResetEventSlim.Dispose%2A> is not thread-safe and may not be used concurrently with other members of this instance.\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: true to release both managed and unmanaged resources; false to release only unmanaged resources.\n  overload: System.Threading.ManualResetEventSlim.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ManualResetEventSlim.IsSet\n  commentId: P:System.Threading.ManualResetEventSlim.IsSet\n  id: IsSet\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  name: IsSet\n  nameWithType: ManualResetEventSlim.IsSet\n  fullName: ManualResetEventSlim.IsSet\n  type: Property\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Gets whether the event is set.\n  syntax:\n    content: public bool IsSet { get; }\n    return:\n      type: System.Boolean\n      description: true if the event has is set; otherwise, false.\n  overload: System.Threading.ManualResetEventSlim.IsSet*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ManualResetEventSlim.Reset\n  commentId: M:System.Threading.ManualResetEventSlim.Reset\n  id: Reset\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: ManualResetEventSlim.Reset()\n  fullName: ManualResetEventSlim.Reset()\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Sets the state of the event to nonsignaled, which causes threads to block.\n  remarks: <xref:System.Threading.ManualResetEventSlim.Reset%2A> can be called concurrently with all members except <xref:System.Threading.ManualResetEventSlim.WaitHandle%2A>.\n  syntax:\n    content: public void Reset ();\n    parameters: []\n  overload: System.Threading.ManualResetEventSlim.Reset*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object has already been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ManualResetEventSlim.Set\n  commentId: M:System.Threading.ManualResetEventSlim.Set\n  id: Set\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  name: Set()\n  nameWithType: ManualResetEventSlim.Set()\n  fullName: ManualResetEventSlim.Set()\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Sets the state of the event to signaled, which allows one or more threads waiting on the event to proceed.\n  syntax:\n    content: public void Set ();\n    parameters: []\n  overload: System.Threading.ManualResetEventSlim.Set*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ManualResetEventSlim.SpinCount\n  commentId: P:System.Threading.ManualResetEventSlim.SpinCount\n  id: SpinCount\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  name: SpinCount\n  nameWithType: ManualResetEventSlim.SpinCount\n  fullName: ManualResetEventSlim.SpinCount\n  type: Property\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Gets the number of spin waits that will occur before falling back to a kernel-based wait operation.\n  syntax:\n    content: public int SpinCount { get; }\n    return:\n      type: System.Int32\n      description: Returns the number of spin waits that will occur before falling back to a kernel-based wait operation.\n  overload: System.Threading.ManualResetEventSlim.SpinCount*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ManualResetEventSlim.Wait\n  commentId: M:System.Threading.ManualResetEventSlim.Wait\n  id: Wait\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  name: Wait()\n  nameWithType: ManualResetEventSlim.Wait()\n  fullName: ManualResetEventSlim.Wait()\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\"></xref> is set.\n  remarks: The caller of this method blocks indefinitely until the current instance is set. The caller will return immediately if the event is currently in a set state.\n  syntax:\n    content: public void Wait ();\n    parameters: []\n  overload: System.Threading.ManualResetEventSlim.Wait*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The maximum number of waiters has been exceeded.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object has already been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ManualResetEventSlim.Wait(System.Int32)\n  commentId: M:System.Threading.ManualResetEventSlim.Wait(System.Int32)\n  id: Wait(System.Int32)\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  name: Wait(Int32)\n  nameWithType: ManualResetEventSlim.Wait(Int32)\n  fullName: ManualResetEventSlim.Wait(Int32)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\"></xref> is set, using a 32-bit signed integer to measure the time interval.\n  syntax:\n    content: public bool Wait (int millisecondsTimeout);\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref>(-1) to wait indefinitely.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> was set; otherwise, `false`.'\n  overload: System.Threading.ManualResetEventSlim.Wait*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The maximum number of waiters has been exceeded.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object has already been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)\n  commentId: M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)\n  id: Wait(System.Threading.CancellationToken)\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  name: Wait(CancellationToken)\n  nameWithType: ManualResetEventSlim.Wait(CancellationToken)\n  fullName: ManualResetEventSlim.Wait(CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\"></xref> receives a signal, while observing a <xref href=\"System.Threading.CancellationToken\"></xref>.\n  remarks: The caller of this method blocks indefinitely until the current instance is set. The caller will return immediately if the event is currently in a set state.\n  syntax:\n    content: public void Wait (System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> to observe.\n  overload: System.Threading.ManualResetEventSlim.Wait*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The maximum number of waiters has been exceeded.\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: <code>cancellationToken</code> was canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object has already been disposed or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)\n  commentId: M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)\n  id: Wait(System.TimeSpan)\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  name: Wait(TimeSpan)\n  nameWithType: ManualResetEventSlim.Wait(TimeSpan)\n  fullName: ManualResetEventSlim.Wait(TimeSpan)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\"></xref> is set, using a <xref href=\"System.TimeSpan\"></xref> to measure the time interval.\n  syntax:\n    content: public bool Wait (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> was set; otherwise, `false`.'\n  overload: System.Threading.ManualResetEventSlim.Wait*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out.  \\n  \\n -or-  \\n  \\n The number of milliseconds in <code>timeout</code> is greater than <xref href=\\\"System.Int32.MaxValue\\\"></xref>.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The maximum number of waiters has been exceeded.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object has already been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)\n  id: Wait(System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  name: Wait(Int32, CancellationToken)\n  nameWithType: ManualResetEventSlim.Wait(Int32, CancellationToken)\n  fullName: ManualResetEventSlim.Wait(Int32, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\"></xref> is set, using a 32-bit signed integer to measure the time interval, while observing a <xref href=\"System.Threading.CancellationToken\"></xref>.\n  syntax:\n    content: public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref>(-1) to wait indefinitely.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> to observe.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> was set; otherwise, `false`.'\n  overload: System.Threading.ManualResetEventSlim.Wait*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: <code>cancellationToken</code> was canceled.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The maximum number of waiters has been exceeded.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object has already been disposed or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)\n  commentId: M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)\n  id: Wait(System.TimeSpan,System.Threading.CancellationToken)\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  name: Wait(TimeSpan, CancellationToken)\n  nameWithType: ManualResetEventSlim.Wait(TimeSpan, CancellationToken)\n  fullName: ManualResetEventSlim.Wait(TimeSpan, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\"></xref> is set, using a <xref href=\"System.TimeSpan\"></xref> to measure the time interval, while observing a <xref href=\"System.Threading.CancellationToken\"></xref>.\n  syntax:\n    content: public bool Wait (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\"></xref> that represents -1 milliseconds to wait indefinitely.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> to observe.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Threading.ManualResetEventSlim\"></xref> was set; otherwise, `false`.'\n  overload: System.Threading.ManualResetEventSlim.Wait*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: <code>cancellationToken</code> was canceled.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out.  \\n  \\n -or-  \\n  \\n The number of milliseconds in <code>timeout</code> is greater than <xref href=\\\"System.Int32.MaxValue\\\"></xref>.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The maximum number of waiters has been exceeded.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The object has already been disposed or the <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ManualResetEventSlim.WaitHandle\n  commentId: P:System.Threading.ManualResetEventSlim.WaitHandle\n  id: WaitHandle\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  name: WaitHandle\n  nameWithType: ManualResetEventSlim.WaitHandle\n  fullName: ManualResetEventSlim.WaitHandle\n  type: Property\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Gets the underlying <xref href=\"System.Threading.WaitHandle\"></xref> object for this <xref href=\"System.Threading.ManualResetEventSlim\"></xref>.\n  remarks: Accessing this property forces initialization of an underlying event object if one hasn't already been created. To simply wait on this <xref:System.Threading.ManualResetEventSlim>, the public Wait methods should be preferred. It is recommended to dispose the <xref:System.Threading.ManualResetEventSlim> instance after accessing this property, in order to prevent a resource leak.\n  syntax:\n    content: public System.Threading.WaitHandle WaitHandle { get; }\n    return:\n      type: System.Threading.WaitHandle\n      description: The underlying <xref href=\"System.Threading.WaitHandle\"></xref> event object fore this <xref href=\"System.Threading.ManualResetEventSlim\"></xref>.\n  overload: System.Threading.ManualResetEventSlim.WaitHandle*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.OperationCanceledException\n  parent: System\n  isExternal: false\n  name: OperationCanceledException\n  nameWithType: OperationCanceledException\n  fullName: System.OperationCanceledException\n- uid: System.Threading.ManualResetEventSlim.#ctor\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: ManualResetEventSlim()\n  nameWithType: ManualResetEventSlim.ManualResetEventSlim()\n  fullName: ManualResetEventSlim.ManualResetEventSlim()\n- uid: System.Threading.ManualResetEventSlim.#ctor(System.Boolean)\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: ManualResetEventSlim(Boolean)\n  nameWithType: ManualResetEventSlim.ManualResetEventSlim(Boolean)\n  fullName: ManualResetEventSlim.ManualResetEventSlim(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: ManualResetEventSlim(Boolean, Int32)\n  nameWithType: ManualResetEventSlim.ManualResetEventSlim(Boolean, Int32)\n  fullName: ManualResetEventSlim.ManualResetEventSlim(Boolean, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Threading.ManualResetEventSlim.Dispose\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: Dispose()\n  nameWithType: ManualResetEventSlim.Dispose()\n  fullName: ManualResetEventSlim.Dispose()\n- uid: System.Threading.ManualResetEventSlim.Dispose(System.Boolean)\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: ManualResetEventSlim.Dispose(Boolean)\n  fullName: ManualResetEventSlim.Dispose(Boolean)\n- uid: System.Threading.ManualResetEventSlim.IsSet\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: IsSet\n  nameWithType: ManualResetEventSlim.IsSet\n  fullName: ManualResetEventSlim.IsSet\n- uid: System.Threading.ManualResetEventSlim.Reset\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: Reset()\n  nameWithType: ManualResetEventSlim.Reset()\n  fullName: ManualResetEventSlim.Reset()\n- uid: System.Threading.ManualResetEventSlim.Set\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: Set()\n  nameWithType: ManualResetEventSlim.Set()\n  fullName: ManualResetEventSlim.Set()\n- uid: System.Threading.ManualResetEventSlim.SpinCount\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: SpinCount\n  nameWithType: ManualResetEventSlim.SpinCount\n  fullName: ManualResetEventSlim.SpinCount\n- uid: System.Threading.ManualResetEventSlim.Wait\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: Wait()\n  nameWithType: ManualResetEventSlim.Wait()\n  fullName: ManualResetEventSlim.Wait()\n- uid: System.Threading.ManualResetEventSlim.Wait(System.Int32)\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: Wait(Int32)\n  nameWithType: ManualResetEventSlim.Wait(Int32)\n  fullName: ManualResetEventSlim.Wait(Int32)\n- uid: System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: Wait(CancellationToken)\n  nameWithType: ManualResetEventSlim.Wait(CancellationToken)\n  fullName: ManualResetEventSlim.Wait(CancellationToken)\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: Wait(TimeSpan)\n  nameWithType: ManualResetEventSlim.Wait(TimeSpan)\n  fullName: ManualResetEventSlim.Wait(TimeSpan)\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: Wait(Int32, CancellationToken)\n  nameWithType: ManualResetEventSlim.Wait(Int32, CancellationToken)\n  fullName: ManualResetEventSlim.Wait(Int32, CancellationToken)\n- uid: System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: Wait(TimeSpan, CancellationToken)\n  nameWithType: ManualResetEventSlim.Wait(TimeSpan, CancellationToken)\n  fullName: ManualResetEventSlim.Wait(TimeSpan, CancellationToken)\n- uid: System.Threading.ManualResetEventSlim.WaitHandle\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: WaitHandle\n  nameWithType: ManualResetEventSlim.WaitHandle\n  fullName: ManualResetEventSlim.WaitHandle\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandle\n  nameWithType: WaitHandle\n  fullName: System.Threading.WaitHandle\n- uid: System.Threading.ManualResetEventSlim.#ctor*\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: ManualResetEventSlim\n  nameWithType: ManualResetEventSlim.ManualResetEventSlim\n  fullName: ManualResetEventSlim.ManualResetEventSlim\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n- uid: System.Threading.ManualResetEventSlim.Dispose*\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: Dispose\n  nameWithType: ManualResetEventSlim.Dispose\n  fullName: ManualResetEventSlim.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n- uid: System.Threading.ManualResetEventSlim.IsSet*\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: IsSet\n  nameWithType: ManualResetEventSlim.IsSet\n  fullName: ManualResetEventSlim.IsSet\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n- uid: System.Threading.ManualResetEventSlim.Reset*\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: Reset\n  nameWithType: ManualResetEventSlim.Reset\n  fullName: ManualResetEventSlim.Reset\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n- uid: System.Threading.ManualResetEventSlim.Set*\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: Set\n  nameWithType: ManualResetEventSlim.Set\n  fullName: ManualResetEventSlim.Set\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n- uid: System.Threading.ManualResetEventSlim.SpinCount*\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: SpinCount\n  nameWithType: ManualResetEventSlim.SpinCount\n  fullName: ManualResetEventSlim.SpinCount\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n- uid: System.Threading.ManualResetEventSlim.Wait*\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: Wait\n  nameWithType: ManualResetEventSlim.Wait\n  fullName: ManualResetEventSlim.Wait\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n- uid: System.Threading.ManualResetEventSlim.WaitHandle*\n  parent: System.Threading.ManualResetEventSlim\n  isExternal: false\n  name: WaitHandle\n  nameWithType: ManualResetEventSlim.WaitHandle\n  fullName: ManualResetEventSlim.WaitHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEventSlim.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}