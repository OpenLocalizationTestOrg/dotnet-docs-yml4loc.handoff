{"nodes":[{"content":"Represents the measurements for the <xref href=\"System.Windows.Controls.VirtualizingPanel.CacheLength\"></xref> attached property.","nodes":[{"pos":[0,129],"content":"Represents the measurements for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Controls.VirtualizingPanel.CacheLength\"&gt;&lt;/xref&gt;</ph> attached property.","source":"Represents the measurements for the <xref href=\"System.Windows.Controls.VirtualizingPanel.CacheLength\"></xref> attached property."}],"pos":[1427,1557],"yaml":true},{"content":"The <xref:System.Windows.Controls.VirtualizingPanel.CacheLength%2A?displayProperty=fullName> attached property specifies the amount of space in which a <xref:System.Windows.Controls.VirtualizingPanel> virtualizes the items before or after the view port (the area in which items are visible).  You can specify uniform cache length my creating a <xref:System.Windows.Controls.VirtualizationCacheLength> by using the constructor that takes a single parameter.  You can use the constructor that takes two parameters to specify different values for the <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> and <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> properties.","nodes":[{"pos":[0,722],"content":"The <xref:System.Windows.Controls.VirtualizingPanel.CacheLength%2A?displayProperty=fullName> attached property specifies the amount of space in which a <xref:System.Windows.Controls.VirtualizingPanel> virtualizes the items before or after the view port (the area in which items are visible).  You can specify uniform cache length my creating a <xref:System.Windows.Controls.VirtualizationCacheLength> by using the constructor that takes a single parameter.  You can use the constructor that takes two parameters to specify different values for the <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> and <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> properties.","nodes":[{"content":"The <xref:System.Windows.Controls.VirtualizingPanel.CacheLength%2A?displayProperty=fullName> attached property specifies the amount of space in which a <xref:System.Windows.Controls.VirtualizingPanel> virtualizes the items before or after the view port (the area in which items are visible).  You can specify uniform cache length my creating a <xref:System.Windows.Controls.VirtualizationCacheLength> by using the constructor that takes a single parameter.  You can use the constructor that takes two parameters to specify different values for the <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> and <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> properties.","pos":[0,722],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.VirtualizingPanel.CacheLength%2A?displayProperty=fullName&gt;</ph> attached property specifies the amount of space in which a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.VirtualizingPanel&gt;</ph> virtualizes the items before or after the view port (the area in which items are visible).","pos":[0,291],"source":"The <xref:System.Windows.Controls.VirtualizingPanel.CacheLength%2A?displayProperty=fullName> attached property specifies the amount of space in which a <xref:System.Windows.Controls.VirtualizingPanel> virtualizes the items before or after the view port (the area in which items are visible)."},{"content":"You can specify uniform cache length my creating a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.VirtualizationCacheLength&gt;</ph> by using the constructor that takes a single parameter.","pos":[293,456],"source":"  You can specify uniform cache length my creating a <xref:System.Windows.Controls.VirtualizationCacheLength> by using the constructor that takes a single parameter."},{"content":"You can use the constructor that takes two parameters to specify different values for the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A&gt;</ph> properties.","pos":[458,722],"source":"  You can use the constructor that takes two parameters to specify different values for the <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> and <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> properties."}]}]}],"pos":[1568,2291],"yaml":true,"extradata":"MT"},{"content":"Creates a new instance of the <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref> class with a uniform cache length for each side of the viewport.","nodes":[{"pos":[0,165],"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Controls.VirtualizationCacheLength\"&gt;&lt;/xref&gt;</ph> class with a uniform cache length for each side of the viewport.","source":"Creates a new instance of the <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref> class with a uniform cache length for each side of the viewport."}],"pos":[3865,4031],"yaml":true},{"content":"The size of the cache before and after the viewport.","nodes":[{"pos":[0,52],"content":"The size of the cache before and after the viewport.","nodes":[{"content":"The size of the cache before and after the viewport.","pos":[0,52]}]}],"pos":[4224,4277],"yaml":true},{"content":"Creates a new instance of the <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref> class with the specified cache lengths for each side of the viewport.","nodes":[{"pos":[0,170],"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Controls.VirtualizationCacheLength\"&gt;&lt;/xref&gt;</ph> class with the specified cache lengths for each side of the viewport.","source":"Creates a new instance of the <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref> class with the specified cache lengths for each side of the viewport."}],"pos":[5544,5715],"yaml":true},{"content":"The size of the cache before the viewport.","nodes":[{"pos":[0,42],"content":"The size of the cache before the viewport.","nodes":[{"content":"The size of the cache before the viewport.","pos":[0,42]}]}],"pos":[5919,5962],"yaml":true},{"content":"The size of the cache after the viewport.","nodes":[{"pos":[0,41],"content":"The size of the cache after the viewport.","nodes":[{"content":"The size of the cache after the viewport.","pos":[0,41]}]}],"pos":[6036,6078],"yaml":true},{"content":"Gets the size of the cache before the viewport when the <xref href=\"System.Windows.Controls.VirtualizingPanel\"></xref> is virtualizing.","nodes":[{"pos":[0,135],"content":"Gets the size of the cache before the viewport when the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Controls.VirtualizingPanel\"&gt;&lt;/xref&gt;</ph> is virtualizing.","source":"Gets the size of the cache before the viewport when the <xref href=\"System.Windows.Controls.VirtualizingPanel\"></xref> is virtualizing."}],"pos":[7223,7359],"yaml":true},{"content":"In this context, \"virtualize\" refers to a technique by which a subset of [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] elements are generated from a larger number of data items based on which items are visible on the screen. Use a cache to avoid generating [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] elements as they’re scrolled into view.","nodes":[{"pos":[0,364],"content":"In this context, \"virtualize\" refers to a technique by which a subset of [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] elements are generated from a larger number of data items based on which items are visible on the screen. Use a cache to avoid generating [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] elements as they’re scrolled into view.","nodes":[{"content":"In this context, \"virtualize\" refers to a technique by which a subset of <ph id=\"ph1\">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> elements are generated from a larger number of data items based on which items are visible on the screen.","pos":[0,234],"source":"In this context, \"virtualize\" refers to a technique by which a subset of [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] elements are generated from a larger number of data items based on which items are visible on the screen."},{"content":"Use a cache to avoid generating <ph id=\"ph1\">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> elements as they’re scrolled into view.","pos":[235,364],"source":" Use a cache to avoid generating [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] elements as they’re scrolled into view."}]}],"pos":[7370,7735],"yaml":true,"extradata":"MT"},{"content":"The size of the cache after the viewport when the <xref href=\"System.Windows.Controls.VirtualizingPanel\"></xref> is virtualizing.","nodes":[{"pos":[0,129],"content":"The size of the cache after the viewport when the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Controls.VirtualizingPanel\"&gt;&lt;/xref&gt;</ph> is virtualizing.","source":"The size of the cache after the viewport when the <xref href=\"System.Windows.Controls.VirtualizingPanel\"></xref> is virtualizing."}],"pos":[7857,7987],"yaml":true},{"content":"Gets the size of the cache after the viewport when the <xref href=\"System.Windows.Controls.VirtualizingPanel\"></xref> is virtualizing.","nodes":[{"pos":[0,134],"content":"Gets the size of the cache after the viewport when the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Controls.VirtualizingPanel\"&gt;&lt;/xref&gt;</ph> is virtualizing.","source":"Gets the size of the cache after the viewport when the <xref href=\"System.Windows.Controls.VirtualizingPanel\"></xref> is virtualizing."}],"pos":[9129,9264],"yaml":true},{"content":"In this context, \"virtualize\" refers to a technique by which a subset of [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] elements are generated from a larger number of data items based on which items are visible on the screen. Use a cache to avoid generating [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] elements as they’re scrolled into view.","nodes":[{"pos":[0,364],"content":"In this context, \"virtualize\" refers to a technique by which a subset of [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] elements are generated from a larger number of data items based on which items are visible on the screen. Use a cache to avoid generating [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] elements as they’re scrolled into view.","nodes":[{"content":"In this context, \"virtualize\" refers to a technique by which a subset of <ph id=\"ph1\">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> elements are generated from a larger number of data items based on which items are visible on the screen.","pos":[0,234],"source":"In this context, \"virtualize\" refers to a technique by which a subset of [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] elements are generated from a larger number of data items based on which items are visible on the screen."},{"content":"Use a cache to avoid generating <ph id=\"ph1\">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> elements as they’re scrolled into view.","pos":[235,364],"source":" Use a cache to avoid generating [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] elements as they’re scrolled into view."}]}],"pos":[9275,9640],"yaml":true,"extradata":"MT"},{"content":"The size of the cache after the viewport when the <xref href=\"System.Windows.Controls.VirtualizingPanel\"></xref> is virtualizing.","nodes":[{"pos":[0,129],"content":"The size of the cache after the viewport when the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Controls.VirtualizingPanel\"&gt;&lt;/xref&gt;</ph> is virtualizing.","source":"The size of the cache after the viewport when the <xref href=\"System.Windows.Controls.VirtualizingPanel\"></xref> is virtualizing."}],"pos":[9763,9893],"yaml":true},{"content":"Determines whether the specified object is equal to the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>.","nodes":[{"pos":[0,135],"content":"Determines whether the specified object is equal to the current <ph id=\"ph1\">&lt;xref href=\"System.Windows.Controls.VirtualizationCacheLength\"&gt;&lt;/xref&gt;</ph>.","source":"Determines whether the specified object is equal to the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>."}],"pos":[11047,11183],"yaml":true},{"content":"The <xref:System.Windows.Controls.VirtualizationCacheLength> checks for value equality.  That is, the two objects are equal if their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> property values are equal and their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> property values are equal.","nodes":[{"pos":[0,354],"content":"The <xref:System.Windows.Controls.VirtualizationCacheLength> checks for value equality.  That is, the two objects are equal if their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> property values are equal and their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> property values are equal.","nodes":[{"content":"The <xref:System.Windows.Controls.VirtualizationCacheLength> checks for value equality.  That is, the two objects are equal if their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> property values are equal and their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> property values are equal.","pos":[0,354],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.VirtualizationCacheLength&gt;</ph> checks for value equality.","pos":[0,87],"source":"The <xref:System.Windows.Controls.VirtualizationCacheLength> checks for value equality."},{"content":"That is, the two objects are equal if their <ph id=\"ph1\">&lt;xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A&gt;</ph> property values are equal and their <ph id=\"ph2\">&lt;xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A&gt;</ph> property values are equal.","pos":[89,354],"source":"  That is, the two objects are equal if their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> property values are equal and their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> property values are equal."}]}]}],"pos":[11194,11549],"yaml":true,"extradata":"MT"},{"content":"The object to compare with the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>.","nodes":[{"pos":[0,110],"content":"The object to compare with the current <ph id=\"ph1\">&lt;xref href=\"System.Windows.Controls.VirtualizationCacheLength\"&gt;&lt;/xref&gt;</ph>.","source":"The object to compare with the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>."}],"pos":[11699,11810],"yaml":true},{"content":"`true` if the specified object is equal to the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,146],"content":"<ph id=\"ph1\">`true`</ph> if the specified object is equal to the current <ph id=\"ph2\">&lt;xref href=\"System.Windows.Controls.VirtualizationCacheLength\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the specified object is equal to the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>; otherwise, `false`."}],"pos":[11868,12017],"yaml":true},{"content":"Determines whether the specified <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref> is equal to the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>.","nodes":[{"pos":[0,199],"content":"Determines whether the specified <ph id=\"ph1\">&lt;xref href=\"System.Windows.Controls.VirtualizationCacheLength\"&gt;&lt;/xref&gt;</ph> is equal to the current <ph id=\"ph2\">&lt;xref href=\"System.Windows.Controls.VirtualizationCacheLength\"&gt;&lt;/xref&gt;</ph>.","source":"Determines whether the specified <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref> is equal to the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>."}],"pos":[13323,13523],"yaml":true},{"content":"The <xref:System.Windows.Controls.VirtualizationCacheLength> checks for value equality.  That is, the two objects are equal if their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> property values are equal and their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> property values are equal.","nodes":[{"pos":[0,354],"content":"The <xref:System.Windows.Controls.VirtualizationCacheLength> checks for value equality.  That is, the two objects are equal if their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> property values are equal and their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> property values are equal.","nodes":[{"content":"The <xref:System.Windows.Controls.VirtualizationCacheLength> checks for value equality.  That is, the two objects are equal if their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> property values are equal and their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> property values are equal.","pos":[0,354],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.VirtualizationCacheLength&gt;</ph> checks for value equality.","pos":[0,87],"source":"The <xref:System.Windows.Controls.VirtualizationCacheLength> checks for value equality."},{"content":"That is, the two objects are equal if their <ph id=\"ph1\">&lt;xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A&gt;</ph> property values are equal and their <ph id=\"ph2\">&lt;xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A&gt;</ph> property values are equal.","pos":[89,354],"source":"  That is, the two objects are equal if their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> property values are equal and their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> property values are equal."}]}]}],"pos":[13534,13889],"yaml":true,"extradata":"MT"},{"content":"The object to compare with the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>.","nodes":[{"pos":[0,110],"content":"The object to compare with the current <ph id=\"ph1\">&lt;xref href=\"System.Windows.Controls.VirtualizationCacheLength\"&gt;&lt;/xref&gt;</ph>.","source":"The object to compare with the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>."}],"pos":[14115,14226],"yaml":true},{"content":"`true` if the specified object is equal to the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,146],"content":"<ph id=\"ph1\">`true`</ph> if the specified object is equal to the current <ph id=\"ph2\">&lt;xref href=\"System.Windows.Controls.VirtualizationCacheLength\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the specified object is equal to the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>; otherwise, `false`."}],"pos":[14284,14433],"yaml":true},{"content":"Gets a hash code for the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>.","nodes":[{"pos":[0,104],"content":"Gets a hash code for the current <ph id=\"ph1\">&lt;xref href=\"System.Windows.Controls.VirtualizationCacheLength\"&gt;&lt;/xref&gt;</ph>.","source":"Gets a hash code for the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>."}],"pos":[15541,15646],"yaml":true},{"content":"A hash code for the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>.","nodes":[{"pos":[0,99],"content":"A hash code for the current <ph id=\"ph1\">&lt;xref href=\"System.Windows.Controls.VirtualizationCacheLength\"&gt;&lt;/xref&gt;</ph>.","source":"A hash code for the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>."}],"pos":[15780,15880],"yaml":true},{"content":"Determines whether the two specified <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref> objects are equal.","nodes":[{"pos":[0,126],"content":"Determines whether the two specified <ph id=\"ph1\">&lt;xref href=\"System.Windows.Controls.VirtualizationCacheLength\"&gt;&lt;/xref&gt;</ph> objects are equal.","source":"Determines whether the two specified <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref> objects are equal."}],"pos":[17454,17581],"yaml":true},{"content":"The <xref:System.Windows.Controls.VirtualizationCacheLength> checks for value equality.  That is, the two objects are equal if their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> property values are equal and their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> property values are equal.","nodes":[{"pos":[0,354],"content":"The <xref:System.Windows.Controls.VirtualizationCacheLength> checks for value equality.  That is, the two objects are equal if their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> property values are equal and their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> property values are equal.","nodes":[{"content":"The <xref:System.Windows.Controls.VirtualizationCacheLength> checks for value equality.  That is, the two objects are equal if their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> property values are equal and their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> property values are equal.","pos":[0,354],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.VirtualizationCacheLength&gt;</ph> checks for value equality.","pos":[0,87],"source":"The <xref:System.Windows.Controls.VirtualizationCacheLength> checks for value equality."},{"content":"That is, the two objects are equal if their <ph id=\"ph1\">&lt;xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A&gt;</ph> property values are equal and their <ph id=\"ph2\">&lt;xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A&gt;</ph> property values are equal.","pos":[89,354],"source":"  That is, the two objects are equal if their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> property values are equal and their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> property values are equal."}]}]}],"pos":[17592,17947],"yaml":true,"extradata":"MT"},{"content":"The first object to compare.","nodes":[{"pos":[0,28],"content":"The first object to compare.","nodes":[{"content":"The first object to compare.","pos":[0,28]}]}],"pos":[18224,18253],"yaml":true},{"content":"The second object to compare.","nodes":[{"pos":[0,29],"content":"The second object to compare.","nodes":[{"content":"The second object to compare.","pos":[0,29]}]}],"pos":[18348,18378],"yaml":true},{"content":"`true` if the specified <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref> are equal; otherwise, `false`.","nodes":[{"pos":[0,125],"content":"<ph id=\"ph1\">`true`</ph> if the specified <ph id=\"ph2\">&lt;xref href=\"System.Windows.Controls.VirtualizationCacheLength\"&gt;&lt;/xref&gt;</ph> are equal; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the specified <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref> are equal; otherwise, `false`."}],"pos":[18436,18564],"yaml":true},{"content":"Determines whether the two specified <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref> objects are equal.","nodes":[{"pos":[0,126],"content":"Determines whether the two specified <ph id=\"ph1\">&lt;xref href=\"System.Windows.Controls.VirtualizationCacheLength\"&gt;&lt;/xref&gt;</ph> objects are equal.","source":"Determines whether the two specified <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref> objects are equal."}],"pos":[20150,20277],"yaml":true},{"content":"The <xref:System.Windows.Controls.VirtualizationCacheLength> checks for value equality.  That is, the two objects are equal if their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> property values are equal and their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> property values are equal.","nodes":[{"pos":[0,354],"content":"The <xref:System.Windows.Controls.VirtualizationCacheLength> checks for value equality.  That is, the two objects are equal if their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> property values are equal and their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> property values are equal.","nodes":[{"content":"The <xref:System.Windows.Controls.VirtualizationCacheLength> checks for value equality.  That is, the two objects are equal if their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> property values are equal and their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> property values are equal.","pos":[0,354],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.VirtualizationCacheLength&gt;</ph> checks for value equality.","pos":[0,87],"source":"The <xref:System.Windows.Controls.VirtualizationCacheLength> checks for value equality."},{"content":"That is, the two objects are equal if their <ph id=\"ph1\">&lt;xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A&gt;</ph> property values are equal and their <ph id=\"ph2\">&lt;xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A&gt;</ph> property values are equal.","pos":[89,354],"source":"  That is, the two objects are equal if their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> property values are equal and their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> property values are equal."}]}]}],"pos":[20288,20643],"yaml":true,"extradata":"MT"},{"content":"The first object to compare.","nodes":[{"pos":[0,28],"content":"The first object to compare.","nodes":[{"content":"The first object to compare.","pos":[0,28]}]}],"pos":[20922,20951],"yaml":true},{"content":"The second object to compare.","nodes":[{"pos":[0,29],"content":"The second object to compare.","nodes":[{"content":"The second object to compare.","pos":[0,29]}]}],"pos":[21046,21076],"yaml":true},{"content":"`true` if the specified <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref> are equal; otherwise, `false`.","nodes":[{"pos":[0,125],"content":"<ph id=\"ph1\">`true`</ph> if the specified <ph id=\"ph2\">&lt;xref href=\"System.Windows.Controls.VirtualizationCacheLength\"&gt;&lt;/xref&gt;</ph> are equal; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the specified <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref> are equal; otherwise, `false`."}],"pos":[21134,21262],"yaml":true},{"content":"Returns a string that represents the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>.","nodes":[{"pos":[0,116],"content":"Returns a string that represents the current <ph id=\"ph1\">&lt;xref href=\"System.Windows.Controls.VirtualizationCacheLength\"&gt;&lt;/xref&gt;</ph>.","source":"Returns a string that represents the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>."}],"pos":[22359,22476],"yaml":true},{"content":"The <xref:System.Windows.Controls.VirtualizationCacheLength.ToString%2A> method returns a string that displays the values of the <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> and <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> properties.","nodes":[{"pos":[0,303],"content":"The <xref:System.Windows.Controls.VirtualizationCacheLength.ToString%2A> method returns a string that displays the values of the <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> and <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> properties.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.VirtualizationCacheLength.ToString%2A&gt;</ph> method returns a string that displays the values of the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A&gt;</ph> properties.","pos":[0,303],"source":"The <xref:System.Windows.Controls.VirtualizationCacheLength.ToString%2A> method returns a string that displays the values of the <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> and <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> properties."}]}],"pos":[22487,22791],"yaml":true,"extradata":"MT"},{"content":"A string that represents the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>.","nodes":[{"pos":[0,108],"content":"A string that represents the current <ph id=\"ph1\">&lt;xref href=\"System.Windows.Controls.VirtualizationCacheLength\"&gt;&lt;/xref&gt;</ph>.","source":"A string that represents the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>."}],"pos":[22926,23035],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Controls.VirtualizationCacheLength\n  commentId: T:System.Windows.Controls.VirtualizationCacheLength\n  id: VirtualizationCacheLength\n  children:\n  - System.Windows.Controls.VirtualizationCacheLength.#ctor(System.Double)\n  - System.Windows.Controls.VirtualizationCacheLength.#ctor(System.Double,System.Double)\n  - System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport\n  - System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport\n  - System.Windows.Controls.VirtualizationCacheLength.Equals(System.Object)\n  - System.Windows.Controls.VirtualizationCacheLength.Equals(System.Windows.Controls.VirtualizationCacheLength)\n  - System.Windows.Controls.VirtualizationCacheLength.GetHashCode\n  - System.Windows.Controls.VirtualizationCacheLength.op_Equality(System.Windows.Controls.VirtualizationCacheLength,System.Windows.Controls.VirtualizationCacheLength)\n  - System.Windows.Controls.VirtualizationCacheLength.op_Inequality(System.Windows.Controls.VirtualizationCacheLength,System.Windows.Controls.VirtualizationCacheLength)\n  - System.Windows.Controls.VirtualizationCacheLength.ToString\n  langs:\n  - csharp\n  name: VirtualizationCacheLength\n  nameWithType: VirtualizationCacheLength\n  fullName: System.Windows.Controls.VirtualizationCacheLength\n  type: Struct\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Represents the measurements for the <xref href=\"System.Windows.Controls.VirtualizingPanel.CacheLength\"></xref> attached property.\n  remarks: The <xref:System.Windows.Controls.VirtualizingPanel.CacheLength%2A?displayProperty=fullName> attached property specifies the amount of space in which a <xref:System.Windows.Controls.VirtualizingPanel> virtualizes the items before or after the view port (the area in which items are visible).  You can specify uniform cache length my creating a <xref:System.Windows.Controls.VirtualizationCacheLength> by using the constructor that takes a single parameter.  You can use the constructor that takes two parameters to specify different values for the <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> and <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> properties.\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(typeof(System.Windows.Controls.VirtualizationCacheLengthConverter))]\n\n      public struct VirtualizationCacheLength : IEquatable<System.Windows.Controls.VirtualizationCacheLength>\n  inheritance:\n  - System.Object\n  - System.ValueType\n  implements:\n  - System.IEquatable{System.Windows.Controls.VirtualizationCacheLength}\n  attributes:\n  - type: System.ComponentModel.TypeConverterAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/VirtualizationCacheLength.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Controls.VirtualizationCacheLength.#ctor(System.Double)\n  commentId: M:System.Windows.Controls.VirtualizationCacheLength.#ctor(System.Double)\n  id: '#ctor(System.Double)'\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  langs:\n  - csharp\n  name: VirtualizationCacheLength(Double)\n  nameWithType: VirtualizationCacheLength.VirtualizationCacheLength(Double)\n  fullName: VirtualizationCacheLength.VirtualizationCacheLength(Double)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Creates a new instance of the <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref> class with a uniform cache length for each side of the viewport.\n  syntax:\n    content: public VirtualizationCacheLength (double cacheBeforeAndAfterViewport);\n    parameters:\n    - id: cacheBeforeAndAfterViewport\n      type: System.Double\n      description: The size of the cache before and after the viewport.\n  overload: System.Windows.Controls.VirtualizationCacheLength.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/VirtualizationCacheLength.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Controls.VirtualizationCacheLength.#ctor(System.Double,System.Double)\n  commentId: M:System.Windows.Controls.VirtualizationCacheLength.#ctor(System.Double,System.Double)\n  id: '#ctor(System.Double,System.Double)'\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  langs:\n  - csharp\n  name: VirtualizationCacheLength(Double, Double)\n  nameWithType: VirtualizationCacheLength.VirtualizationCacheLength(Double, Double)\n  fullName: VirtualizationCacheLength.VirtualizationCacheLength(Double, Double)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Creates a new instance of the <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref> class with the specified cache lengths for each side of the viewport.\n  syntax:\n    content: public VirtualizationCacheLength (double cacheBeforeViewport, double cacheAfterViewport);\n    parameters:\n    - id: cacheBeforeViewport\n      type: System.Double\n      description: The size of the cache before the viewport.\n    - id: cacheAfterViewport\n      type: System.Double\n      description: The size of the cache after the viewport.\n  overload: System.Windows.Controls.VirtualizationCacheLength.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/VirtualizationCacheLength.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport\n  commentId: P:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport\n  id: CacheAfterViewport\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  langs:\n  - csharp\n  name: CacheAfterViewport\n  nameWithType: VirtualizationCacheLength.CacheAfterViewport\n  fullName: VirtualizationCacheLength.CacheAfterViewport\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Gets the size of the cache before the viewport when the <xref href=\"System.Windows.Controls.VirtualizingPanel\"></xref> is virtualizing.\n  remarks: In this context, \"virtualize\" refers to a technique by which a subset of [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] elements are generated from a larger number of data items based on which items are visible on the screen. Use a cache to avoid generating [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] elements as they’re scrolled into view.\n  syntax:\n    content: public double CacheAfterViewport { get; }\n    return:\n      type: System.Double\n      description: The size of the cache after the viewport when the <xref href=\"System.Windows.Controls.VirtualizingPanel\"></xref> is virtualizing.\n  overload: System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/VirtualizationCacheLength.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport\n  commentId: P:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport\n  id: CacheBeforeViewport\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  langs:\n  - csharp\n  name: CacheBeforeViewport\n  nameWithType: VirtualizationCacheLength.CacheBeforeViewport\n  fullName: VirtualizationCacheLength.CacheBeforeViewport\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Gets the size of the cache after the viewport when the <xref href=\"System.Windows.Controls.VirtualizingPanel\"></xref> is virtualizing.\n  remarks: In this context, \"virtualize\" refers to a technique by which a subset of [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] elements are generated from a larger number of data items based on which items are visible on the screen. Use a cache to avoid generating [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] elements as they’re scrolled into view.\n  syntax:\n    content: public double CacheBeforeViewport { get; }\n    return:\n      type: System.Double\n      description: The size of the cache after the viewport when the <xref href=\"System.Windows.Controls.VirtualizingPanel\"></xref> is virtualizing.\n  overload: System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/VirtualizationCacheLength.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Controls.VirtualizationCacheLength.Equals(System.Object)\n  commentId: M:System.Windows.Controls.VirtualizationCacheLength.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: VirtualizationCacheLength.Equals(Object)\n  fullName: VirtualizationCacheLength.Equals(Object)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Determines whether the specified object is equal to the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>.\n  remarks: The <xref:System.Windows.Controls.VirtualizationCacheLength> checks for value equality.  That is, the two objects are equal if their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> property values are equal and their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> property values are equal.\n  syntax:\n    content: public override bool Equals (object oCompare);\n    parameters:\n    - id: oCompare\n      type: System.Object\n      description: The object to compare with the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>.\n    return:\n      type: System.Boolean\n      description: '`true` if the specified object is equal to the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>; otherwise, `false`.'\n  overload: System.Windows.Controls.VirtualizationCacheLength.Equals*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/VirtualizationCacheLength.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Controls.VirtualizationCacheLength.Equals(System.Windows.Controls.VirtualizationCacheLength)\n  commentId: M:System.Windows.Controls.VirtualizationCacheLength.Equals(System.Windows.Controls.VirtualizationCacheLength)\n  id: Equals(System.Windows.Controls.VirtualizationCacheLength)\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  langs:\n  - csharp\n  name: Equals(VirtualizationCacheLength)\n  nameWithType: VirtualizationCacheLength.Equals(VirtualizationCacheLength)\n  fullName: VirtualizationCacheLength.Equals(VirtualizationCacheLength)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Determines whether the specified <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref> is equal to the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>.\n  remarks: The <xref:System.Windows.Controls.VirtualizationCacheLength> checks for value equality.  That is, the two objects are equal if their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> property values are equal and their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> property values are equal.\n  syntax:\n    content: public bool Equals (System.Windows.Controls.VirtualizationCacheLength cacheLength);\n    parameters:\n    - id: cacheLength\n      type: System.Windows.Controls.VirtualizationCacheLength\n      description: The object to compare with the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>.\n    return:\n      type: System.Boolean\n      description: '`true` if the specified object is equal to the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>; otherwise, `false`.'\n  overload: System.Windows.Controls.VirtualizationCacheLength.Equals*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/VirtualizationCacheLength.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Controls.VirtualizationCacheLength.GetHashCode\n  commentId: M:System.Windows.Controls.VirtualizationCacheLength.GetHashCode\n  id: GetHashCode\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: VirtualizationCacheLength.GetHashCode()\n  fullName: VirtualizationCacheLength.GetHashCode()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Gets a hash code for the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>.\n  overload: System.Windows.Controls.VirtualizationCacheLength.GetHashCode*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/VirtualizationCacheLength.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Controls.VirtualizationCacheLength.op_Equality(System.Windows.Controls.VirtualizationCacheLength,System.Windows.Controls.VirtualizationCacheLength)\n  commentId: M:System.Windows.Controls.VirtualizationCacheLength.op_Equality(System.Windows.Controls.VirtualizationCacheLength,System.Windows.Controls.VirtualizationCacheLength)\n  id: op_Equality(System.Windows.Controls.VirtualizationCacheLength,System.Windows.Controls.VirtualizationCacheLength)\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  langs:\n  - csharp\n  name: op_Equality(VirtualizationCacheLength, VirtualizationCacheLength)\n  nameWithType: VirtualizationCacheLength.op_Equality(VirtualizationCacheLength, VirtualizationCacheLength)\n  fullName: VirtualizationCacheLength.op_Equality(VirtualizationCacheLength, VirtualizationCacheLength)\n  type: Operator\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Determines whether the two specified <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref> objects are equal.\n  remarks: The <xref:System.Windows.Controls.VirtualizationCacheLength> checks for value equality.  That is, the two objects are equal if their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> property values are equal and their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> property values are equal.\n  syntax:\n    content: public static bool op_Equality (System.Windows.Controls.VirtualizationCacheLength cl1, System.Windows.Controls.VirtualizationCacheLength cl2);\n    parameters:\n    - id: cl1\n      type: System.Windows.Controls.VirtualizationCacheLength\n      description: The first object to compare.\n    - id: cl2\n      type: System.Windows.Controls.VirtualizationCacheLength\n      description: The second object to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if the specified <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref> are equal; otherwise, `false`.'\n  overload: System.Windows.Controls.VirtualizationCacheLength.op_Equality*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/VirtualizationCacheLength.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Controls.VirtualizationCacheLength.op_Inequality(System.Windows.Controls.VirtualizationCacheLength,System.Windows.Controls.VirtualizationCacheLength)\n  commentId: M:System.Windows.Controls.VirtualizationCacheLength.op_Inequality(System.Windows.Controls.VirtualizationCacheLength,System.Windows.Controls.VirtualizationCacheLength)\n  id: op_Inequality(System.Windows.Controls.VirtualizationCacheLength,System.Windows.Controls.VirtualizationCacheLength)\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  langs:\n  - csharp\n  name: op_Inequality(VirtualizationCacheLength, VirtualizationCacheLength)\n  nameWithType: VirtualizationCacheLength.op_Inequality(VirtualizationCacheLength, VirtualizationCacheLength)\n  fullName: VirtualizationCacheLength.op_Inequality(VirtualizationCacheLength, VirtualizationCacheLength)\n  type: Operator\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Determines whether the two specified <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref> objects are equal.\n  remarks: The <xref:System.Windows.Controls.VirtualizationCacheLength> checks for value equality.  That is, the two objects are equal if their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> property values are equal and their <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> property values are equal.\n  syntax:\n    content: public static bool op_Inequality (System.Windows.Controls.VirtualizationCacheLength cl1, System.Windows.Controls.VirtualizationCacheLength cl2);\n    parameters:\n    - id: cl1\n      type: System.Windows.Controls.VirtualizationCacheLength\n      description: The first object to compare.\n    - id: cl2\n      type: System.Windows.Controls.VirtualizationCacheLength\n      description: The second object to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if the specified <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref> are equal; otherwise, `false`.'\n  overload: System.Windows.Controls.VirtualizationCacheLength.op_Inequality*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/VirtualizationCacheLength.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Controls.VirtualizationCacheLength.ToString\n  commentId: M:System.Windows.Controls.VirtualizationCacheLength.ToString\n  id: ToString\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: VirtualizationCacheLength.ToString()\n  fullName: VirtualizationCacheLength.ToString()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Controls\n  summary: Returns a string that represents the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>.\n  remarks: The <xref:System.Windows.Controls.VirtualizationCacheLength.ToString%2A> method returns a string that displays the values of the <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> and <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> properties.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string that represents the current <xref href=\"System.Windows.Controls.VirtualizationCacheLength\"></xref>.\n  overload: System.Windows.Controls.VirtualizationCacheLength.ToString*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/VirtualizationCacheLength.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  nameWithType: ValueType\n  fullName: System.ValueType\n- uid: System.Windows.Controls.VirtualizationCacheLength.#ctor(System.Double)\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  isExternal: false\n  name: VirtualizationCacheLength(Double)\n  nameWithType: VirtualizationCacheLength.VirtualizationCacheLength(Double)\n  fullName: VirtualizationCacheLength.VirtualizationCacheLength(Double)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Windows.Controls.VirtualizationCacheLength.#ctor(System.Double,System.Double)\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  isExternal: false\n  name: VirtualizationCacheLength(Double, Double)\n  nameWithType: VirtualizationCacheLength.VirtualizationCacheLength(Double, Double)\n  fullName: VirtualizationCacheLength.VirtualizationCacheLength(Double, Double)\n- uid: System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  isExternal: false\n  name: CacheAfterViewport\n  nameWithType: VirtualizationCacheLength.CacheAfterViewport\n  fullName: VirtualizationCacheLength.CacheAfterViewport\n- uid: System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  isExternal: false\n  name: CacheBeforeViewport\n  nameWithType: VirtualizationCacheLength.CacheBeforeViewport\n  fullName: VirtualizationCacheLength.CacheBeforeViewport\n- uid: System.Windows.Controls.VirtualizationCacheLength.Equals(System.Object)\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: VirtualizationCacheLength.Equals(Object)\n  fullName: VirtualizationCacheLength.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Controls.VirtualizationCacheLength.Equals(System.Windows.Controls.VirtualizationCacheLength)\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  isExternal: false\n  name: Equals(VirtualizationCacheLength)\n  nameWithType: VirtualizationCacheLength.Equals(VirtualizationCacheLength)\n  fullName: VirtualizationCacheLength.Equals(VirtualizationCacheLength)\n- uid: System.Windows.Controls.VirtualizationCacheLength\n  parent: System.Windows.Controls\n  isExternal: false\n  name: VirtualizationCacheLength\n  nameWithType: VirtualizationCacheLength\n  fullName: System.Windows.Controls.VirtualizationCacheLength\n- uid: System.Windows.Controls.VirtualizationCacheLength.GetHashCode\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: VirtualizationCacheLength.GetHashCode()\n  fullName: VirtualizationCacheLength.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Controls.VirtualizationCacheLength.op_Equality(System.Windows.Controls.VirtualizationCacheLength,System.Windows.Controls.VirtualizationCacheLength)\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  isExternal: false\n  name: op_Equality(VirtualizationCacheLength, VirtualizationCacheLength)\n  nameWithType: VirtualizationCacheLength.op_Equality(VirtualizationCacheLength, VirtualizationCacheLength)\n  fullName: VirtualizationCacheLength.op_Equality(VirtualizationCacheLength, VirtualizationCacheLength)\n- uid: System.Windows.Controls.VirtualizationCacheLength.op_Inequality(System.Windows.Controls.VirtualizationCacheLength,System.Windows.Controls.VirtualizationCacheLength)\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  isExternal: false\n  name: op_Inequality(VirtualizationCacheLength, VirtualizationCacheLength)\n  nameWithType: VirtualizationCacheLength.op_Inequality(VirtualizationCacheLength, VirtualizationCacheLength)\n  fullName: VirtualizationCacheLength.op_Inequality(VirtualizationCacheLength, VirtualizationCacheLength)\n- uid: System.Windows.Controls.VirtualizationCacheLength.ToString\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  isExternal: false\n  name: ToString()\n  nameWithType: VirtualizationCacheLength.ToString()\n  fullName: VirtualizationCacheLength.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Controls.VirtualizationCacheLength.#ctor*\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  isExternal: false\n  name: VirtualizationCacheLength\n  nameWithType: VirtualizationCacheLength.VirtualizationCacheLength\n  fullName: VirtualizationCacheLength.VirtualizationCacheLength\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/VirtualizationCacheLength.xml\n- uid: System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport*\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  isExternal: false\n  name: CacheAfterViewport\n  nameWithType: VirtualizationCacheLength.CacheAfterViewport\n  fullName: VirtualizationCacheLength.CacheAfterViewport\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/VirtualizationCacheLength.xml\n- uid: System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport*\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  isExternal: false\n  name: CacheBeforeViewport\n  nameWithType: VirtualizationCacheLength.CacheBeforeViewport\n  fullName: VirtualizationCacheLength.CacheBeforeViewport\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/VirtualizationCacheLength.xml\n- uid: System.Windows.Controls.VirtualizationCacheLength.Equals*\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  isExternal: false\n  name: Equals\n  nameWithType: VirtualizationCacheLength.Equals\n  fullName: VirtualizationCacheLength.Equals\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/VirtualizationCacheLength.xml\n- uid: System.Windows.Controls.VirtualizationCacheLength.GetHashCode*\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  isExternal: false\n  name: GetHashCode\n  nameWithType: VirtualizationCacheLength.GetHashCode\n  fullName: VirtualizationCacheLength.GetHashCode\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/VirtualizationCacheLength.xml\n- uid: System.Windows.Controls.VirtualizationCacheLength.op_Equality*\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  isExternal: false\n  name: op_Equality\n  nameWithType: VirtualizationCacheLength.op_Equality\n  fullName: VirtualizationCacheLength.op_Equality\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/VirtualizationCacheLength.xml\n- uid: System.Windows.Controls.VirtualizationCacheLength.op_Inequality*\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  isExternal: false\n  name: op_Inequality\n  nameWithType: VirtualizationCacheLength.op_Inequality\n  fullName: VirtualizationCacheLength.op_Inequality\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/VirtualizationCacheLength.xml\n- uid: System.Windows.Controls.VirtualizationCacheLength.ToString*\n  parent: System.Windows.Controls.VirtualizationCacheLength\n  isExternal: false\n  name: ToString\n  nameWithType: VirtualizationCacheLength.ToString\n  fullName: VirtualizationCacheLength.ToString\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Controls/VirtualizationCacheLength.xml\n- uid: System.IEquatable`1\n  name: IEquatable<T>\n  nameWithType: IEquatable<T>\n  fullName: System.IEquatable<T>\n- uid: System.IEquatable{System.Windows.Controls.VirtualizationCacheLength}\n  parent: System\n  isExternal: false\n  name: IEquatable<VirtualizationCacheLength>\n  nameWithType: IEquatable<VirtualizationCacheLength>\n  fullName: System.IEquatable<System.Windows.Controls.VirtualizationCacheLength>\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    nameWithType: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Windows.Controls.VirtualizationCacheLength\n    name: VirtualizationCacheLength\n    nameWithType: VirtualizationCacheLength\n    fullName: System.Windows.Controls.VirtualizationCacheLength\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n"}