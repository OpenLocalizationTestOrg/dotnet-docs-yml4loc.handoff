### YamlMime:ManagedReference
items:
- uid: System.Deployment.Application.ApplicationDeployment
  commentId: T:System.Deployment.Application.ApplicationDeployment
  id: ApplicationDeployment
  children:
  - System.Deployment.Application.ApplicationDeployment.ActivationUri
  - System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate
  - System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate(System.Boolean)
  - System.Deployment.Application.ApplicationDeployment.CheckForUpdate
  - System.Deployment.Application.ApplicationDeployment.CheckForUpdate(System.Boolean)
  - System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync
  - System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel
  - System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted
  - System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged
  - System.Deployment.Application.ApplicationDeployment.CurrentDeployment
  - System.Deployment.Application.ApplicationDeployment.CurrentVersion
  - System.Deployment.Application.ApplicationDeployment.DataDirectory
  - System.Deployment.Application.ApplicationDeployment.DownloadFileGroup(System.String)
  - System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync(System.String,System.Object)
  - System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync(System.String)
  - System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel(System.String)
  - System.Deployment.Application.ApplicationDeployment.DownloadFileGroupCompleted
  - System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged
  - System.Deployment.Application.ApplicationDeployment.IsFileGroupDownloaded(System.String)
  - System.Deployment.Application.ApplicationDeployment.IsFirstRun
  - System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed
  - System.Deployment.Application.ApplicationDeployment.TimeOfLastUpdateCheck
  - System.Deployment.Application.ApplicationDeployment.Update
  - System.Deployment.Application.ApplicationDeployment.UpdateAsync
  - System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel
  - System.Deployment.Application.ApplicationDeployment.UpdateCompleted
  - System.Deployment.Application.ApplicationDeployment.UpdatedApplicationFullName
  - System.Deployment.Application.ApplicationDeployment.UpdatedVersion
  - System.Deployment.Application.ApplicationDeployment.UpdateLocation
  - System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged
  langs:
  - csharp
  name: ApplicationDeployment
  nameWithType: ApplicationDeployment
  fullName: System.Deployment.Application.ApplicationDeployment
  type: Class
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Supports updates of the current deployment programmatically, and handles on-demand downloading of files. This class cannot be inherited.
  remarks: "You can configure your [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application to check for updates and install them automatically through the `subscription` element of the deployment manifest. Some applications, however, need finer control over their updates. You may want to install required updates programmatically, and prompt users to install optional updates at their convenience. By turning off subscription updates in the deployment manifest, you can take complete control of your application's update policies. Alternatively, you can use automatic subscription in conjunction with <xref:System.Deployment.Application.ApplicationDeployment>, which enables [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] to update the application periodically, but uses <xref:System.Deployment.Application.ApplicationDeployment> to download critical updates shortly after they are released.  \n  \n You can test whether your deployment has an available update by using either the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A> or the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A> method; the latter method raises the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted> event on successful completion. <xref:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate%2A> returns important information about the update, such as its version number and whether it is a required update for current users. If an update is available, you can install it by using <xref:System.Deployment.Application.ApplicationDeployment.Update%2A> or <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A>; the latter method raises the <xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted> event after installation of the update is complete. For large updates, you can receive progress notifications through the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged> and <xref:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged> events, and use the information in <xref:System.ComponentModel.ProgressChangedEventArgs> to notify the user of the download status.  \n  \n You can also use <xref:System.Deployment.Application.ApplicationDeployment> to download large files and assemblies on demand. These files must be marked as \"optional\" within the deployment's application manifest so that they are not downloaded during installation. You can download the files at any point during the application's duration by using the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> or the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> method. You can download assemblies before they are loaded into memory by supplying an event handler for the <xref:System.AppDomain.AssemblyResolve> event on the <xref:System.AppDomain> class. For more information, see [Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API Using the Designer](http://msdn.microsoft.com/library/59a0dd5f-1cab-4f2f-b780-0ab7399905d5).  \n  \n> [!NOTE]\n>  If you update a [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application while the application is running, the user will not see the updates until you call the <xref:System.Windows.Forms.Application.Restart%2A> method of the <xref:System.Windows.Forms.Application>, which will close the current running instance of the application and immediately restart it.  \n  \n <xref:System.Deployment.Application.ApplicationDeployment> has no public constructor; you obtain instances of the class within a [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application through the <xref:System.Deployment.Application.ApplicationDeployment.CurrentDeployment%2A> property. You use the <xref:System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed%2A> property to verify that the current application is a [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application.  \n  \n <xref:System.Deployment.Application.ApplicationDeployment> supports checking for updates and downloading updated files asynchronously by using the new [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), which exposes completion callbacks as class events. <xref:System.Deployment.Application.ApplicationDeployment> starts and manages the threads for you, and calls your application back on the correct UI thread. Through this class, you can update without locking up the application, so that the user can continue working while the update installs. If the user must stop all work while an update takes place, consider using the synchronous methods instead.  \n  \n> [!NOTE]\n>  Performing asynchronous updates requires that your application import both the <xref:System.Deployment.Application> and <xref:System.ComponentModel> namespaces."
  example:
  - "The following code example determines at application load time whether a new update is available; if a required update is available, the code example installs the update asynchronously. This code should be added to a form that contains a <xref:System.Windows.Forms.TextBox> named `downloadStatus`.  \n  \n [!code-cpp[ClickOnceAPI#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ClickOnceAPI/cpp/form1.cpp#1)]\n [!code-csharp[ClickOnceAPI#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ClickOnceAPI/CS/Form1.cs#1)]\n [!code-vb[ClickOnceAPI#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClickOnceAPI/VB/Form1.vb#1)]"
  syntax:
    content: public sealed class ApplicationDeployment
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.ActivationUri
  commentId: P:System.Deployment.Application.ApplicationDeployment.ActivationUri
  id: ActivationUri
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: ActivationUri
  nameWithType: ApplicationDeployment.ActivationUri
  fullName: ApplicationDeployment.ActivationUri
  type: Property
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Gets the URL used to launch the deployment manifest of the application.
  remarks: This property will work in both fully trusted and partially trusted applications.
  example:
  - "The following code shows how to retrieve the URL parameters by using <xref:System.Deployment.Application.ApplicationDeployment.ActivationUri%2A>, and how to use the <xref:System.Web.HttpUtility> class to parse the query string safely. Multiple occurrences of the same query string variable are consolidated in one entry of the returned <xref:System.Collections.Specialized.NameValueCollection>.  \n  \n [!code-csharp[ClickOnceQueryString#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ClickOnceQueryString/CS/Form1.cs#1)]\n [!code-vb[ClickOnceQueryString#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClickOnceQueryString/VB/Form1.vb#1)]"
  syntax:
    content: public Uri ActivationUri { get; }
    return:
      type: System.Uri
      description: A zero-length string if the <code>TrustUrlParameters</code> property in the deployment manifest is `false`, or if the user has supplied a UNC to open the deployment or has opened it locally. Otherwise, the return value is the full URL used to launch the application, including any parameters.
  overload: System.Deployment.Application.ApplicationDeployment.ActivationUri*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate
  commentId: M:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate
  id: CheckForDetailedUpdate
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: CheckForDetailedUpdate()
  nameWithType: ApplicationDeployment.CheckForDetailedUpdate()
  fullName: ApplicationDeployment.CheckForDetailedUpdate()
  type: Method
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Performs the same operation as <xref href="System.Deployment.Application.ApplicationDeployment.CheckForUpdate"></xref>, but returns extended information about the available update.
  remarks: The <xref:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate%2A> method lets synchronous callers get the same extended information that asynchronous callers get using the <xref:System.Deployment.Application.CheckForUpdateCompletedEventArgs> class.
  example:
  - "The following code example uses <xref:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate%2A> to retrieve the information about the latest update. If an update exists, it installs it automatically only if it is a required update; otherwise, it prompts the user.  \n  \n [!code-cpp[ClickOnceAPI#7](~/samples/snippets/cpp/VS_Snippets_Winforms/ClickOnceAPI/cpp/form1.cpp#7)]\n [!code-csharp[ClickOnceAPI#7](~/samples/snippets/csharp/VS_Snippets_Winforms/ClickOnceAPI/CS/Form1.cs#7)]\n [!code-vb[ClickOnceAPI#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClickOnceAPI/VB/Form1.vb#7)]"
  syntax:
    content: public System.Deployment.Application.UpdateCheckInfo CheckForDetailedUpdate ();
    parameters: []
    return:
      type: System.Deployment.Application.UpdateCheckInfo
      description: An <xref href="System.Deployment.Application.UpdateCheckInfo"></xref> for the available update.
  overload: System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The current application is either not configured to support updates, or there is another update check operation already in progress.
  - type: System.Deployment.Application.DeploymentDownloadException
    commentId: T:System.Deployment.Application.DeploymentDownloadException
    description: The deployment manifest cannot be downloaded. This exception will appear in the <xref href="System.ComponentModel.AsyncCompletedEventArgs.Error"></xref> property of the <xref href="System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted"></xref> event.
  - type: System.Deployment.Application.InvalidDeploymentException
    commentId: T:System.Deployment.Application.InvalidDeploymentException
    description: The deployment manifest is corrupted. Regenerate the application's manifest before you attempt to deploy this application to users. This exception will appear in the <xref href="System.ComponentModel.AsyncCompletedEventArgs.Error"></xref> property of the <xref href="System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted"></xref> event.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate(System.Boolean)
  commentId: M:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate(System.Boolean)
  id: CheckForDetailedUpdate(System.Boolean)
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: CheckForDetailedUpdate(Boolean)
  nameWithType: ApplicationDeployment.CheckForDetailedUpdate(Boolean)
  fullName: ApplicationDeployment.CheckForDetailedUpdate(Boolean)
  type: Method
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Performs the same operation as <xref href="System.Deployment.Application.ApplicationDeployment.CheckForUpdate"></xref>, but returns extended information about the available update.
  syntax:
    content: public System.Deployment.Application.UpdateCheckInfo CheckForDetailedUpdate (bool persistUpdateCheckResult);
    parameters:
    - id: persistUpdateCheckResult
      type: System.Boolean
      description: If `false`, the update will be applied silently and no dialog box will be displayed.
    return:
      type: System.Deployment.Application.UpdateCheckInfo
      description: An <xref href="System.Deployment.Application.UpdateCheckInfo"></xref> for the available update.
  overload: System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdate
  commentId: M:System.Deployment.Application.ApplicationDeployment.CheckForUpdate
  id: CheckForUpdate
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: CheckForUpdate()
  nameWithType: ApplicationDeployment.CheckForUpdate()
  fullName: ApplicationDeployment.CheckForUpdate()
  type: Method
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Checks <xref href="System.Deployment.Application.ApplicationDeployment.UpdateLocation"></xref> to determine whether a new update is available.
  remarks: "The <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A> method compares the version of the currently installed deployment with the version specified in the deployment manifest found at <xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation%2A>. If the version on the server is different from the installed version, it returns `true`.  \n  \n This method will block until the check has completed. To check for an update asynchronously, use the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A> method instead.  \n  \n> [!NOTE]\n>  If <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A> discovers that an update is available, and the user chooses not to install it, [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] will prompt the user that an update is available the next time the application is run. There is no way to disable this prompting. (If the application is a required update, [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] will install it without prompting.)"
  example:
  - "The following code example checks for an application update; if one is available, it installs it synchronously.  \n  \n [!code-cpp[ClickOnceAPI#5](~/samples/snippets/cpp/VS_Snippets_Winforms/ClickOnceAPI/cpp/form1.cpp#5)]\n [!code-csharp[ClickOnceAPI#5](~/samples/snippets/csharp/VS_Snippets_Winforms/ClickOnceAPI/CS/Form1.cs#5)]\n [!code-vb[ClickOnceAPI#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClickOnceAPI/VB/Form1.vb#5)]"
  syntax:
    content: public bool CheckForUpdate ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if a new update is available; otherwise, `false`.'
  overload: System.Deployment.Application.ApplicationDeployment.CheckForUpdate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: '[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] throws this exception immediately if you call the <xref href="System.Deployment.Application.ApplicationDeployment.CheckForUpdate"></xref> method while an update is already in progress.'
  - type: System.Deployment.Application.DeploymentDownloadException
    commentId: T:System.Deployment.Application.DeploymentDownloadException
    description: The deployment manifest cannot be downloaded.
  - type: System.Deployment.Application.InvalidDeploymentException
    commentId: T:System.Deployment.Application.InvalidDeploymentException
    description: The deployment manifest is corrupted. You will likely need to redeploy the application to fix this problem.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdate(System.Boolean)
  commentId: M:System.Deployment.Application.ApplicationDeployment.CheckForUpdate(System.Boolean)
  id: CheckForUpdate(System.Boolean)
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: CheckForUpdate(Boolean)
  nameWithType: ApplicationDeployment.CheckForUpdate(Boolean)
  fullName: ApplicationDeployment.CheckForUpdate(Boolean)
  type: Method
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Checks <xref href="System.Deployment.Application.ApplicationDeployment.UpdateLocation"></xref> to determine whether a new update is available.
  syntax:
    content: public bool CheckForUpdate (bool persistUpdateCheckResult);
    parameters:
    - id: persistUpdateCheckResult
      type: System.Boolean
      description: If `false`, the update will be applied silently and no dialog box will be displayed.
    return:
      type: System.Boolean
      description: '`true` if a new update is available; otherwise, `false`.'
  overload: System.Deployment.Application.ApplicationDeployment.CheckForUpdate*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync
  commentId: M:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync
  id: CheckForUpdateAsync
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: CheckForUpdateAsync()
  nameWithType: ApplicationDeployment.CheckForUpdateAsync()
  fullName: ApplicationDeployment.CheckForUpdateAsync()
  type: Method
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Checks <xref href="System.Deployment.Application.ApplicationDeployment.UpdateLocation"></xref> asynchronously to determine whether a new update is available.
  remarks: "<xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A> returns immediately and starts a separate thread for downloading the updated application. When the method completes or is canceled, it raises the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted> event. You can use <xref:System.ComponentModel.AsyncCompletedEventArgs> in this event handler to determine whether the operation was canceled, or if an exception was raised during update.  \n  \n You can cancel an asynchronous update by calling <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel%2A>.  \n  \n> [!NOTE]\n>  If <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A> discovers that an update is available, and the user chooses not to install it, [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] will prompt the user that an update is available the next time the application is run. There is no way to disable this prompting. (If the application is a required update, [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] will install it without prompting.)"
  example:
  - "The following example checks for an update asynchronously, and installs the update if one exists.  \n  \n [!code-cpp[ClickOnceAPI#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ClickOnceAPI/cpp/form1.cpp#1)]\n [!code-csharp[ClickOnceAPI#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ClickOnceAPI/CS/Form1.cs#1)]\n [!code-vb[ClickOnceAPI#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClickOnceAPI/VB/Form1.vb#1)]"
  syntax:
    content: public void CheckForUpdateAsync ();
    parameters: []
  overload: System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: '[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] throws this exception immediately if you call the <xref href="System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync"></xref> method while an update is already in progress.'
  - type: System.Deployment.Application.DeploymentDownloadException
    commentId: T:System.Deployment.Application.DeploymentDownloadException
    description: The deployment manifest cannot be downloaded. This exception appears in the <xref href="System.ComponentModel.AsyncCompletedEventArgs.Error"></xref> property of the <xref href="System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted"></xref> event.
  - type: System.Deployment.Application.InvalidDeploymentException
    commentId: T:System.Deployment.Application.InvalidDeploymentException
    description: The deployment manifest is corrupted. You will likely need to redeploy the application to fix this problem. This exception appears in the <xref href="System.ComponentModel.AsyncCompletedEventArgs.Error"></xref> property of the <xref href="System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted"></xref> event.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel
  commentId: M:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel
  id: CheckForUpdateAsyncCancel
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: CheckForUpdateAsyncCancel()
  nameWithType: ApplicationDeployment.CheckForUpdateAsyncCancel()
  fullName: ApplicationDeployment.CheckForUpdateAsyncCancel()
  type: Method
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Cancels the asynchronous update check.
  remarks: "Use this method to cancel an update check initiated with the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A> method.  \n  \n This method will not cancel any background update that may already be in progress, such as an update started as part of a subscription. For more information about subscriptions, see [Choosing a ClickOnce Update Strategy](http://msdn.microsoft.com/library/d8b6e7bb-4ea0-47f3-91cd-48580bdceccc)."
  syntax:
    content: public void CheckForUpdateAsyncCancel ();
    parameters: []
  overload: System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted
  commentId: E:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted
  id: CheckForUpdateCompleted
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: CheckForUpdateCompleted
  nameWithType: ApplicationDeployment.CheckForUpdateCompleted
  fullName: ApplicationDeployment.CheckForUpdateCompleted
  type: Event
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Occurs when <xref href="System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync"></xref> has completed.
  remarks: The <xref:System.Deployment.Application.CheckForUpdateCompletedEventArgs> class will tell you, among other things, the version of the update, how large the update is, and whether the available update is required or optional.
  example:
  - "The following code example uses <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted> to decide whether to ask the user to install the available application update. If the update is a mandatory upgrade, the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted> event handler does not prompt the user. The example requires that you deploy a Windows Forms application that includes a <xref:System.Windows.Forms.StatusStrip> control, and that this control contain a <xref:System.Windows.Forms.ToolStripStatusLabel> control named `downloadStatus`.  \n  \n [!code-cpp[ClickOnceAPI#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ClickOnceAPI/cpp/form1.cpp#1)]\n [!code-csharp[ClickOnceAPI#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ClickOnceAPI/CS/Form1.cs#1)]\n [!code-vb[ClickOnceAPI#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClickOnceAPI/VB/Form1.vb#1)]"
  syntax:
    content: public event System.Deployment.Application.CheckForUpdateCompletedEventHandler CheckForUpdateCompleted;
    return:
      type: System.Deployment.Application.CheckForUpdateCompletedEventHandler
      description: ''
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged
  commentId: E:System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged
  id: CheckForUpdateProgressChanged
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: CheckForUpdateProgressChanged
  nameWithType: ApplicationDeployment.CheckForUpdateProgressChanged
  fullName: ApplicationDeployment.CheckForUpdateProgressChanged
  type: Event
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Occurs when a progress update is available on a <xref href="System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync"></xref> call.
  remarks: <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged> reports on the download status of the application's deployment manifest. This can be important information for users who are downloading the deployment over slow network connections.
  example:
  - "The following code example uses the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged> event to inform the user how much of the deployment manifest is left to download. The example requires that you deploy a Windows Forms application that includes a <xref:System.Windows.Forms.StatusStrip> control, and that this control contain a <xref:System.Windows.Forms.ToolStripStatusLabel> control named `downloadStatus`..  \n  \n [!code-cpp[ClickOnceAPI#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ClickOnceAPI/cpp/form1.cpp#1)]\n [!code-csharp[ClickOnceAPI#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ClickOnceAPI/CS/Form1.cs#1)]\n [!code-vb[ClickOnceAPI#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClickOnceAPI/VB/Form1.vb#1)]"
  syntax:
    content: public event System.Deployment.Application.DeploymentProgressChangedEventHandler CheckForUpdateProgressChanged;
    return:
      type: System.Deployment.Application.DeploymentProgressChangedEventHandler
      description: ''
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.CurrentDeployment
  commentId: P:System.Deployment.Application.ApplicationDeployment.CurrentDeployment
  id: CurrentDeployment
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: CurrentDeployment
  nameWithType: ApplicationDeployment.CurrentDeployment
  fullName: ApplicationDeployment.CurrentDeployment
  type: Property
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Returns the current <xref href="System.Deployment.Application.ApplicationDeployment"></xref> for this deployment.
  remarks: "You cannot create instances of <xref:System.Deployment.Application.ApplicationDeployment> directly in your application; you must retrieve a valid instance through the <xref:System.Deployment.Application.ApplicationDeployment.CurrentDeployment%2A> property.  \n  \n The <xref:System.Deployment.Application.ApplicationDeployment.CurrentDeployment%2A> static property is valid only from within an application that was deployed using [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]. Attempts to call this property from non-[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] applications will throw an exception. If you are developing an application that may or may not be deployed using [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)], use the <xref:System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed%2A> property to test whether the current program is a [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application."
  example:
  - "The following code example retrieves <xref:System.Deployment.Application.ApplicationDeployment.CurrentDeployment%2A> and checks to determine whether the application has been updated in the past three days.  \n  \n [!code-cpp[ClickOnceAPI#3](~/samples/snippets/cpp/VS_Snippets_Winforms/ClickOnceAPI/cpp/form1.cpp#3)]\n [!code-csharp[ClickOnceAPI#3](~/samples/snippets/csharp/VS_Snippets_Winforms/ClickOnceAPI/CS/Form1.cs#3)]\n [!code-vb[ClickOnceAPI#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClickOnceAPI/VB/Form1.vb#3)]"
  syntax:
    content: public static System.Deployment.Application.ApplicationDeployment CurrentDeployment { get; }
    return:
      type: System.Deployment.Application.ApplicationDeployment
      description: The current deployment.
  overload: System.Deployment.Application.ApplicationDeployment.CurrentDeployment*
  exceptions:
  - type: System.Deployment.Application.InvalidDeploymentException
    commentId: T:System.Deployment.Application.InvalidDeploymentException
    description: You attempted to call this static property from a non-[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.CurrentVersion
  commentId: P:System.Deployment.Application.ApplicationDeployment.CurrentVersion
  id: CurrentVersion
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: CurrentVersion
  nameWithType: ApplicationDeployment.CurrentVersion
  fullName: ApplicationDeployment.CurrentVersion
  type: Property
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Gets the version of the deployment for the current running instance of the application.
  remarks: <xref:System.Deployment.Application.ApplicationDeployment.CurrentVersion%2A> will differ from <xref:System.Deployment.Application.ApplicationDeployment.UpdatedVersion%2A> if a new update has been installed but you have not yet called <xref:System.Windows.Forms.Application.Restart%2A>. If the deployment manifest is configured to perform automatic updates, you can compare these two values to determine if you should restart the application.
  example:
  - "The following code example defines a method that determines whether [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] has updated the application.  \n  \n [!code-cpp[ClickOnceAPI#3](~/samples/snippets/cpp/VS_Snippets_Winforms/ClickOnceAPI/cpp/form1.cpp#3)]\n [!code-csharp[ClickOnceAPI#3](~/samples/snippets/csharp/VS_Snippets_Winforms/ClickOnceAPI/CS/Form1.cs#3)]\n [!code-vb[ClickOnceAPI#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClickOnceAPI/VB/Form1.vb#3)]"
  syntax:
    content: public Version CurrentVersion { get; }
    return:
      type: System.Version
      description: The current deployment version.
  overload: System.Deployment.Application.ApplicationDeployment.CurrentVersion*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.DataDirectory
  commentId: P:System.Deployment.Application.ApplicationDeployment.DataDirectory
  id: DataDirectory
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: DataDirectory
  nameWithType: ApplicationDeployment.DataDirectory
  fullName: ApplicationDeployment.DataDirectory
  type: Property
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Gets the path to the [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] data directory.
  syntax:
    content: public string DataDirectory { get; }
    return:
      type: System.String
      description: A string containing the path to the application's data directory on the local disk.
  overload: System.Deployment.Application.ApplicationDeployment.DataDirectory*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroup(System.String)
  commentId: M:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup(System.String)
  id: DownloadFileGroup(System.String)
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: DownloadFileGroup(String)
  nameWithType: ApplicationDeployment.DownloadFileGroup(String)
  fullName: ApplicationDeployment.DownloadFileGroup(String)
  type: Method
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Downloads a set of optional files on demand.
  remarks: "In a [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application, the files marked \"optional\" in the application manifest are not downloaded during initialization or update. You can use the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> method to download all of the files belonging to a named group on demand, so that they do not consume network resources and disk space until you are sure the user requires them. For example, certain users may need to use a data analysis package included in your application on a daily basis, while other users may never invoke it.  \n  \n To use an assembly you have downloaded with <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A>, you attach an event listener to the <xref:System.AppDomain.AssemblyResolve> event on the <xref:System.AppDomain.CurrentDomain%2A>. For an example, see =[Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API Using the Designer](http://msdn.microsoft.com/library/59a0dd5f-1cab-4f2f-b780-0ab7399905d5).  \n  \n All files are downloaded to the [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application cache and are therefore isolated to the current version of the application. Let's say that after an application downloads a file group, the user installs a new version of the application, but later reverts to the previous version of the application. In this case, the previous version will still have the copies of the files it originally downloaded. For more information about accessing data files, see [Accessing Local and Remote Data in ClickOnce Applications](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d).  \n  \n <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> works in partially trusted applications, that is, in any [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application running with restricted permission. However, if you attempt to load assemblies dynamically, your application will require full trust.  \n  \n On-demand downloading of data files is currently not supported.  \n  \n Your application will not be responsive to user input until the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> method returns. If you need to download files without interrupting the user's workflow, use the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> method instead.  \n  \n You cannot download a single file by its file name alone. To download a single file, assign it a group name in your [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] deployment and download the group using this method."
  example:
  - "The following code example demonstrates how to load an assembly on demand by listening for the <xref:System.AppDomain.AssemblyResolve> event.  \n  \n [!code-csharp[ClickOnceOnDemandCmdLine#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ClickOnceOnDemandCmdLine/CS/Form1.cs#2)]"
  syntax:
    content: public void DownloadFileGroup (string groupName);
    parameters:
    - id: groupName
      type: System.String
      description: The named group of files to download. All files marked "optional" in a [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application require a group name.
  overload: System.Deployment.Application.ApplicationDeployment.DownloadFileGroup*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>groupName</code> parameter is null or zero-length.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync(System.String,System.Object)
  commentId: M:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync(System.String,System.Object)
  id: DownloadFileGroupAsync(System.String,System.Object)
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: DownloadFileGroupAsync(String, Object)
  nameWithType: ApplicationDeployment.DownloadFileGroupAsync(String, Object)
  fullName: ApplicationDeployment.DownloadFileGroupAsync(String, Object)
  type: Method
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Downloads, on demand, a set of optional files in the background, and passes a piece of application state to the event callbacks.
  remarks: "In a [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application, the files marked \"optional\" in the application manifest are not downloaded during initialization or update. You can use the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> method to download all of the files belonging to a named group on demand, so that they do not consume network resources and disk space until you are sure the user requires them. This approach works not only for static files, but also for assemblies that an application may or may not require. For example, certain users may need to use a data analysis package included in your application on a daily basis, while other users may never invoke it. To download assemblies on demand, attach an event listener to the <xref:System.AppDomain.AssemblyResolve> event on the <xref:System.AppDomain.CurrentDomain%2A>.  \n  \n You can download multiple file groups simultaneously by using the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> method. You can distinguish among them by using the <xref:System.Deployment.Application.DeploymentProgressChangedEventArgs.Group%2A> property of the <xref:System.Deployment.Application.DeploymentProgressChangedEventArgs> class, which is passed to the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged> event. If you need to pass a more complex state, you can use  \n  \n <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> to pass in a `state` object.  \n  \n All static files are downloaded to the [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application's data directory and are therefore isolated to the current version of the application. For more information about accessing static files, see [Accessing Local and Remote Data in ClickOnce Applications](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d). . Let's say that after an application downloads a file group, the user installs a new version of the application, but later  user reverts to the previous version of the application. In this case, the previous version will still have the copies of the files it originally downloaded.  \n  \n <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> works in partially trusted applications, that is, in any [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application running with restricted permission. However, if you are attempting to load assemblies dynamically, your application will require full trust.  \n  \n On-demand downloading of data files is currently not supported.  \n  \n To cancel an asynchronous download, call the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel%2A> method."
  syntax:
    content: public void DownloadFileGroupAsync (string groupName, object userState);
    parameters:
    - id: groupName
      type: System.String
      description: The named group of files to download. All files marked "optional" in a [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application require a group name.
    - id: userState
      type: System.Object
      description: An arbitrary object containing state information for the asynchronous operation.
  overload: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>groupName</code> parameter is null or zero-length.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: You cannot initiate more than one download of <code>groupName</code> at a time.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync(System.String)
  commentId: M:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync(System.String)
  id: DownloadFileGroupAsync(System.String)
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: DownloadFileGroupAsync(String)
  nameWithType: ApplicationDeployment.DownloadFileGroupAsync(String)
  fullName: ApplicationDeployment.DownloadFileGroupAsync(String)
  type: Method
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Downloads, on demand, a set of optional files in the background.
  remarks: "In a [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application, the files marked \"optional\" in the application manifest are not downloaded during initialization or update. You can use the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> method to download all of the files belonging to a named group on demand, so that they do not consume network resources and disk space until you are sure the user requires them. This approach works not only for static files, but also for assemblies that an application may or may not require. For example, certain users may need to use a data analysis package included in your application on a daily basis, while other users may never invoke it.  \n  \n To download assemblies on demand, attach an event listener to the <xref:System.AppDomain.AssemblyResolve> event on the <xref:System.AppDomain.CurrentDomain%2A>. For an example, see [Walkthrough: Downloading Assemblies on Demand with the ClickOnce Deployment API](http://msdn.microsoft.com/library/d20e2789-8621-4806-b5b7-841122da1456).  \n  \n All assemblies are downloaded to the [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application cache.  \n  \n All static files are downloaded to the [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application's data directory and are therefore isolated to the current version of the application. Let's say that after an application downloads a file group, the user installs a new version of the application, but later reverts to the previous version of the application. In this case, the previous version will still have the copies of the files it originally downloaded. For more information about accessing static files, see [Accessing Local and Remote Data in ClickOnce Applications](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d).  \n  \n You can download multiple file groups simultaneously using <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A>. You can distinguish among them by using the <xref:System.Deployment.Application.DeploymentProgressChangedEventArgs.Group%2A> property of the <xref:System.Deployment.Application.DeploymentProgressChangedEventArgs> class, which is passed to the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged> event. If you need to pass more complex state, you can use <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> to pass in a `state` object.  \n  \n <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> works in partially trusted applications, that is, in any [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application running with restricted permission. However, if you are attempting to load assemblies dynamically, your application will require full trust.  \n  \n On-demand downloading of data files is currently not supported.  \n  \n You cannot download a single file by its file name alone. To download a single file, assign it a group name in your [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] deployment and download the group using this method.  \n  \n To cancel an asynchronous download, call the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel%2A> method."
  syntax:
    content: public void DownloadFileGroupAsync (string groupName);
    parameters:
    - id: groupName
      type: System.String
      description: The named group of files to download. All files marked "optional" in a [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application require a group name.
  overload: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>groupName</code> parameter is null or zero-length.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: You cannot initiate more than one download of <code>groupName</code> at a time.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel(System.String)
  commentId: M:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel(System.String)
  id: DownloadFileGroupAsyncCancel(System.String)
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: DownloadFileGroupAsyncCancel(String)
  nameWithType: ApplicationDeployment.DownloadFileGroupAsyncCancel(String)
  fullName: ApplicationDeployment.DownloadFileGroupAsyncCancel(String)
  type: Method
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Cancels an asynchronous file download.
  syntax:
    content: public void DownloadFileGroupAsyncCancel (string groupName);
    parameters:
    - id: groupName
      type: System.String
      description: The named group of files to download. All files marked "optional" in a [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application require a group name.
  overload: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>groupName</code> cannot be `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupCompleted
  commentId: E:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupCompleted
  id: DownloadFileGroupCompleted
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: DownloadFileGroupCompleted
  nameWithType: ApplicationDeployment.DownloadFileGroupCompleted
  fullName: ApplicationDeployment.DownloadFileGroupCompleted
  type: Event
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Occurs on the main application thread when a file download is complete.
  remarks: "The <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupCompleted> event is called on the main application thread. It is thread safe to call your application's Windows Forms controls directly within this callback.  \n  \n Check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of the <xref:System.ComponentModel.AsyncCompletedEventArgs> supplied to this callback. If this property is `null`, the download was successful; if it is not `null`, the installation did not succeed, and you can find more information about the installation failure through the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property."
  example:
  - "The following code example downloads a group of Help files in the background. The example requires that you deploy a Windows Forms application that includes a <xref:System.Windows.Forms.StatusStrip> control, and that this control contain a <xref:System.Windows.Forms.ToolStripStatusLabel> control named `downloadStatus`..  \n  \n [!code-cpp[ClickOnceAPI#8](~/samples/snippets/cpp/VS_Snippets_Winforms/ClickOnceAPI/cpp/form1.cpp#8)]\n [!code-csharp[ClickOnceAPI#8](~/samples/snippets/csharp/VS_Snippets_Winforms/ClickOnceAPI/CS/Form1.cs#8)]\n [!code-vb[ClickOnceAPI#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClickOnceAPI/VB/Form1.vb#8)]"
  syntax:
    content: public event System.Deployment.Application.DownloadFileGroupCompletedEventHandler DownloadFileGroupCompleted;
    return:
      type: System.Deployment.Application.DownloadFileGroupCompletedEventHandler
      description: ''
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged
  commentId: E:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged
  id: DownloadFileGroupProgressChanged
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: DownloadFileGroupProgressChanged
  nameWithType: ApplicationDeployment.DownloadFileGroupProgressChanged
  fullName: ApplicationDeployment.DownloadFileGroupProgressChanged
  type: Event
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Occurs when status information is available on a file download operation initiated by a call to <xref href="System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync*"></xref>.
  remarks: "The <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged> event is called on the main application thread. It is thread safe to call your application's Windows Forms controls directly within this callback.  \n  \n Use the information supplied in <xref:System.Deployment.Application.DeploymentProgressChangedEventArgs> to communicate progress information to your users."
  example:
  - "The following code example downloads a group of Help files in the background. The example requires that you deploy a Windows Forms application that includes a <xref:System.Windows.Forms.StatusStrip> control, and that this control contain a <xref:System.Windows.Forms.ToolStripStatusLabel> control named `downloadStatus`.  \n  \n [!code-cpp[ClickOnceAPI#8](~/samples/snippets/cpp/VS_Snippets_Winforms/ClickOnceAPI/cpp/form1.cpp#8)]\n [!code-csharp[ClickOnceAPI#8](~/samples/snippets/csharp/VS_Snippets_Winforms/ClickOnceAPI/CS/Form1.cs#8)]\n [!code-vb[ClickOnceAPI#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClickOnceAPI/VB/Form1.vb#8)]"
  syntax:
    content: public event System.Deployment.Application.DeploymentProgressChangedEventHandler DownloadFileGroupProgressChanged;
    return:
      type: System.Deployment.Application.DeploymentProgressChangedEventHandler
      description: ''
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.IsFileGroupDownloaded(System.String)
  commentId: M:System.Deployment.Application.ApplicationDeployment.IsFileGroupDownloaded(System.String)
  id: IsFileGroupDownloaded(System.String)
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: IsFileGroupDownloaded(String)
  nameWithType: ApplicationDeployment.IsFileGroupDownloaded(String)
  fullName: ApplicationDeployment.IsFileGroupDownloaded(String)
  type: Method
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Checks whether the named file group has already been downloaded to the client computer.
  remarks: "<xref:System.Deployment.Application.ApplicationDeployment.IsFileGroupDownloaded%2A> works in a partially trusted application without any security demands.  \n  \n When you update an application, [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] copies any on-demand data files from the previous version into the new version's data directory. If you download a new version of these files, you should remove any data you want to keep from the old version and move it into the new version."
  example:
  - "The following code example downloads all of the files in the `HelpFiles` group to disk.  \n  \n [!code-cpp[ClickOnceAPI#8](~/samples/snippets/cpp/VS_Snippets_Winforms/ClickOnceAPI/cpp/form1.cpp#8)]\n [!code-csharp[ClickOnceAPI#8](~/samples/snippets/csharp/VS_Snippets_Winforms/ClickOnceAPI/CS/Form1.cs#8)]\n [!code-vb[ClickOnceAPI#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClickOnceAPI/VB/Form1.vb#8)]"
  syntax:
    content: public bool IsFileGroupDownloaded (string groupName);
    parameters:
    - id: groupName
      type: System.String
      description: The named group of files to download. All files marked "optional" in a [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application require a group name.
    return:
      type: System.Boolean
      description: '`true` if the file group has already been downloaded for the current version of this application; otherwise, `false`. If a new version of the application has been installed, and the new version has not added, removed, or altered files in the file group, <xref href="System.Deployment.Application.ApplicationDeployment.IsFileGroupDownloaded(System.String)"></xref> returns `true`.'
  overload: System.Deployment.Application.ApplicationDeployment.IsFileGroupDownloaded*
  exceptions:
  - type: System.Deployment.Application.InvalidDeploymentException
    commentId: T:System.Deployment.Application.InvalidDeploymentException
    description: <code>groupName</code> is not a file group defined in the application manifest.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.IsFirstRun
  commentId: P:System.Deployment.Application.ApplicationDeployment.IsFirstRun
  id: IsFirstRun
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: IsFirstRun
  nameWithType: ApplicationDeployment.IsFirstRun
  fullName: ApplicationDeployment.IsFirstRun
  type: Property
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Gets a value indicating whether this is the first time this application has run on the client computer.
  remarks: "Use <xref:System.Deployment.Application.ApplicationDeployment.IsFirstRun%2A> to determine whether you need to perform any one-time initialization operations the first time your application runs.  \n  \n Do not assume that a <xref:System.Deployment.Application.ApplicationDeployment.IsFirstRun%2A> setting of `true` indicates that this instance of an application is the first one to show its user interface to the user. Due to the way the system schedules processes, one instance of the application may have its <xref:System.Deployment.Application.ApplicationDeployment.IsFirstRun%2A> property set to `true`, but another instance may be the first to render on the screen. The value of this property is reset whenever the user upgrades from one version to the next. If you want to perform an operation only the very first time any version of the application is run, you will need to perform an additional test, such as checking for the existence of a file you created the first time, or storing a flag using **Application Settings**."
  example:
  - "The following code example uses <xref:System.Deployment.Application.ApplicationDeployment.IsFirstRun%2A> to decide whether to check for an update to the file group `HelpFiles`. If one or more of the files have been updated, it calls <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> to obtain the new versions.  \n  \n [!code-csharp[ClickOnceAPI#9](~/samples/snippets/csharp/VS_Snippets_Winforms/ClickOnceAPI/CS/Form1.cs#9)]\n [!code-vb[ClickOnceAPI#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClickOnceAPI/VB/Form1.vb#9)]"
  syntax:
    content: public bool IsFirstRun { get; }
    return:
      type: System.Boolean
      description: '`true` if this version of the application has never run on the client computer before; otherwise, `false`.'
  overload: System.Deployment.Application.ApplicationDeployment.IsFirstRun*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed
  commentId: P:System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed
  id: IsNetworkDeployed
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: IsNetworkDeployed
  nameWithType: ApplicationDeployment.IsNetworkDeployed
  fullName: ApplicationDeployment.IsNetworkDeployed
  type: Property
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Gets a value indicating whether the current application is a [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application.
  remarks: "If you want your application to run both inside and outside of a [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] deployment (for example, if you need to debug your application on the local computer before deploying it), test <xref:System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed%2A> before accessing the <xref:System.Deployment.Application.ApplicationDeployment.CurrentDeployment%2A> property.  \n  \n <xref:System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed%2A> will return `true` regardless of whether the application is installed or hosted online, and regardless of whether it was installed from a Web site, file share, or CD-ROM."
  example:
  - "The following code example retrieves <xref:System.Deployment.Application.ApplicationDeployment.CurrentDeployment%2A> by using <xref:System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed%2A> first to ensure that the reference is not `null`.  \n  \n [!code-cpp[ClickOnceAPI#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ClickOnceAPI/cpp/form1.cpp#2)]\n [!code-csharp[ClickOnceAPI#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ClickOnceAPI/CS/Form1.cs#2)]"
  syntax:
    content: public static bool IsNetworkDeployed { get; }
    return:
      type: System.Boolean
      description: '`true` if this is a [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application; otherwise, `false`.'
  overload: System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.TimeOfLastUpdateCheck
  commentId: P:System.Deployment.Application.ApplicationDeployment.TimeOfLastUpdateCheck
  id: TimeOfLastUpdateCheck
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: TimeOfLastUpdateCheck
  nameWithType: ApplicationDeployment.TimeOfLastUpdateCheck
  fullName: ApplicationDeployment.TimeOfLastUpdateCheck
  type: Property
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Gets the date and the time [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] last checked for an application update.
  remarks: "A [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application can be configured for subscription updates. In this scenario, [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] polls an application's deployment location automatically at intervals defined in the deployment manifest, and determines whether there is an update available. <xref:System.Deployment.Application.ApplicationDeployment.TimeOfLastUpdateCheck%2A> returns the time of the last update check regardless of whether it was initiated by a subscription or by an explicit check using the <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdate%2A>, <xref:System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync%2A>, <xref:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate%2A>, <xref:System.Deployment.Application.ApplicationDeployment.Update%2A>, or <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A> method.  \n  \n If no update check has been performed since the application was installed, <xref:System.Deployment.Application.ApplicationDeployment.TimeOfLastUpdateCheck%2A> returns the installation time."
  example:
  - "The following code example checks whether a [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application has been checked for available updates in the past three days.  \n  \n [!code-cpp[ClickOnceAPI#3](~/samples/snippets/cpp/VS_Snippets_Winforms/ClickOnceAPI/cpp/form1.cpp#3)]\n [!code-csharp[ClickOnceAPI#3](~/samples/snippets/csharp/VS_Snippets_Winforms/ClickOnceAPI/CS/Form1.cs#3)]\n [!code-vb[ClickOnceAPI#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClickOnceAPI/VB/Form1.vb#3)]"
  syntax:
    content: public DateTime TimeOfLastUpdateCheck { get; }
    return:
      type: System.DateTime
      description: The <xref href="System.DateTime"></xref> of the last update check.
  overload: System.Deployment.Application.ApplicationDeployment.TimeOfLastUpdateCheck*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.Update
  commentId: M:System.Deployment.Application.ApplicationDeployment.Update
  id: Update
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: Update()
  nameWithType: ApplicationDeployment.Update()
  fullName: ApplicationDeployment.Update()
  type: Method
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Starts a synchronous download and installation of the latest version of this application.
  remarks: "An application is considered updated when you publish a new version of the application to the location specified by <xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation%2A>, and the version number in the application's deployment manifest is greater than the version number of the application currently installed on the user's computer.  \n  \n The <xref:System.Deployment.Application.ApplicationDeployment.Update%2A> call will block until the update has been downloaded to the client computer and installed into the [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] cache; during this time, the application will not be responsive to the user. If you want to maintain application responsiveness or display a progress report during download, use the <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A> method instead.  \n  \n <xref:System.Deployment.Application.ApplicationDeployment.Update%2A> downloads all of the files that are not marked as \"optional\" in the application manifest. You can download optional files on demand by using the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> or the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> method.  \n  \n [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] may already be updating the application automatically when you call the <xref:System.Deployment.Application.ApplicationDeployment.Update%2A> method; if that happens, calls to this method will throw an <xref:System.InvalidOperationException>.  \n  \n If you have updated one or more files in your deployment, but you have not refreshed your application manifest, you will receive an <xref:System.Deployment.Application.InvalidDeploymentException>. Most of the time, redeploying your [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application solves this problem. You will also receive this exception if a public-key signature on a deployment manifest or application manifest is invalid or missing.  \n  \n An update may request a higher level of trust on the local computer than the previous version of the application. If the application uses Trusted Application Deployment, the common language runtime (CLR) trust manager examines the deployment manifest to determine whether it contains a valid trust license. If the deployment manifest does not contain a valid trust license, [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] stops the installation and throws a <xref:System.Deployment.Application.TrustNotGrantedException>. The <xref:System.Deployment.Application.ApplicationDeployment.Update%2A> method will never display a prompt asking the user whether they want to grant the application permission to run."
  example:
  - "The following code example checks for an application update; if an update is available, it installs it synchronously.  \n  \n [!code-cpp[ClickOnceAPI#6](~/samples/snippets/cpp/VS_Snippets_Winforms/ClickOnceAPI/cpp/form1.cpp#6)]\n [!code-csharp[ClickOnceAPI#6](~/samples/snippets/csharp/VS_Snippets_Winforms/ClickOnceAPI/CS/Form1.cs#6)]\n [!code-vb[ClickOnceAPI#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClickOnceAPI/VB/Form1.vb#6)]"
  syntax:
    content: public bool Update ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if an application has been updated; otherwise, `false`.'
  overload: System.Deployment.Application.ApplicationDeployment.Update*
  exceptions:
  - type: System.Deployment.Application.TrustNotGrantedException
    commentId: T:System.Deployment.Application.TrustNotGrantedException
    description: The local computer did not grant the application the permission level it requested to execute.
  - type: System.Deployment.Application.InvalidDeploymentException
    commentId: T:System.Deployment.Application.InvalidDeploymentException
    description: Your [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] deployment is corrupted. For tips on how to diagnose and correct the problem, see [Troubleshooting ClickOnce Deployments](http://msdn.microsoft.com/library/58e90012-f68b-4852-8ae9-58e361cbcc32).
  - type: System.Deployment.Application.DeploymentDownloadException
    commentId: T:System.Deployment.Application.DeploymentDownloadException
    description: The new deployment could not be downloaded from its location on the network.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The application is currently being updated.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.UpdateAsync
  commentId: M:System.Deployment.Application.ApplicationDeployment.UpdateAsync
  id: UpdateAsync
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: UpdateAsync()
  nameWithType: ApplicationDeployment.UpdateAsync()
  fullName: ApplicationDeployment.UpdateAsync()
  type: Method
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Starts an asynchronous download and installation of the latest version of this application.
  remarks: "An application is considered updated when you publish a new version of the application to the location specified by <xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation%2A>, and the version number in the application's deployment manifest is greater than the version number of the application currently installed on the user's computer.  \n  \n While downloading the update, [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] will raise the <xref:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged> event handler on the main application thread to inform you of the status of the download. When the asynchronous update finishes or encounters an exception, [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] will raise the <xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted> event on the main application thread. Examine the <xref:System.ComponentModel.AsyncCompletedEventArgs> supplied to this event to determine whether the update succeeded.  \n  \n If <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A> throws an exception, [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] calls <xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted> and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.AsyncCompletedEventArgs> to the exception that was thrown.  \n  \n <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A> will download all files in a deployment not marked as \"optional\" in the application manifest. You can download optional files on demand by using the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroup%2A> or the <xref:System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync%2A> method.  \n  \n [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] may already be updating the application automatically when you call the <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A> method; if that happens, calls to this method will throw an <xref:System.InvalidOperationException>.  \n  \n If you have updated one or more files in your deployment, but you have not refreshed your application manifest, you will receive an <xref:System.Deployment.Application.InvalidDeploymentException>. Most of the time, rebuilding your application manifest solves this problem. You will also receive this exception if a public-key signature on a deployment manifest or application manifest is invalid or missing.  \n  \n An update may request a higher level of trust on the local computer than the previous version of the application. If the application uses Trusted Application Deployment, the common language runtime (CLR) trust manager examines the deployment manifest to determine whether it contains a valid trust license. If the deployment manifest does not contain a valid trust license, [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] stops the installation and throws a <xref:System.Deployment.Application.TrustNotGrantedException>. <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A> will never display a prompt asking the user if they want to grant the application permission to run."
  example:
  - "The following code example determines whether a new update is available at application load time; if a required update is available, it installs the update asynchronously. The example requires that you deploy a Windows Forms application that includes a <xref:System.Windows.Forms.StatusStrip> control, and that this control contain a <xref:System.Windows.Forms.ToolStripStatusLabel> control named `downloadStatus`.  \n  \n [!code-cpp[ClickOnceAPI#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ClickOnceAPI/cpp/form1.cpp#1)]\n [!code-csharp[ClickOnceAPI#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ClickOnceAPI/CS/Form1.cs#1)]\n [!code-vb[ClickOnceAPI#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClickOnceAPI/VB/Form1.vb#1)]"
  syntax:
    content: public void UpdateAsync ();
    parameters: []
  overload: System.Deployment.Application.ApplicationDeployment.UpdateAsync*
  exceptions:
  - type: System.Deployment.Application.TrustNotGrantedException
    commentId: T:System.Deployment.Application.TrustNotGrantedException
    description: The local computer did not grant this application the permission level it requested to execute.
  - type: System.Deployment.Application.InvalidDeploymentException
    commentId: T:System.Deployment.Application.InvalidDeploymentException
    description: Your [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] deployment is corrupted. For tips on how to diagnose and correct the problem, see [Troubleshooting ClickOnce Deployments](http://msdn.microsoft.com/library/58e90012-f68b-4852-8ae9-58e361cbcc32).
  - type: System.Deployment.Application.DeploymentDownloadException
    commentId: T:System.Deployment.Application.DeploymentDownloadException
    description: The new deployment could not be downloaded from its location on the network.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel
  commentId: M:System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel
  id: UpdateAsyncCancel
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: UpdateAsyncCancel()
  nameWithType: ApplicationDeployment.UpdateAsyncCancel()
  fullName: ApplicationDeployment.UpdateAsyncCancel()
  type: Method
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Cancels an asynchronous update initiated by <xref href="System.Deployment.Application.ApplicationDeployment.UpdateAsync"></xref>.
  remarks: <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel%2A> only cancels an update initiated by a call to <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsync%2A>; it does not cancel an update started as part of a subscription.
  syntax:
    content: public void UpdateAsyncCancel ();
    parameters: []
  overload: System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.UpdateCompleted
  commentId: E:System.Deployment.Application.ApplicationDeployment.UpdateCompleted
  id: UpdateCompleted
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: UpdateCompleted
  nameWithType: ApplicationDeployment.UpdateCompleted
  fullName: ApplicationDeployment.UpdateCompleted
  type: Event
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Occurs when [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] has finished upgrading the application as the result of a call to <xref href="System.Deployment.Application.ApplicationDeployment.UpdateAsync"></xref>.
  remarks: "The <xref:System.Deployment.Application.ApplicationDeployment.UpdateCompleted> event is called on the main application thread. You may call your application's Windows Forms controls directly within this callback without triggering an exception.  \n  \n Check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of the <xref:System.ComponentModel.AsyncCompletedEventArgs> supplied to this callback. If this property is `null`, the installation was successful; if it is not `null`, the installation did not succeed, and you can find more information about this installation failure through the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property. Once the update has been downloaded, you will need to call the <xref:System.Windows.Forms.Application.Restart%2A> method on the <xref:System.Windows.Forms.Application> to use the newer version of the application.  \n  \n If the installation of the update was canceled by a call to <xref:System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel%2A>, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.ComponentModel.AsyncCompletedEventArgs> class will be `true`.  \n  \n To use this event handler, your application must import both the <xref:System.Deployment.Application> and <xref:System.ComponentModel> namespaces."
  example:
  - "The following code example determines at application load time whether a new update is available; if a required update is available, it installs the update asynchronously. The example requires that you deploy a Windows Forms application that includes a <xref:System.Windows.Forms.StatusStrip> control, and that this control contain a <xref:System.Windows.Forms.ToolStripStatusLabel> control named `downloadStatus`.  \n  \n [!code-cpp[ClickOnceAPI#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ClickOnceAPI/cpp/form1.cpp#1)]\n [!code-csharp[ClickOnceAPI#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ClickOnceAPI/CS/Form1.cs#1)]\n [!code-vb[ClickOnceAPI#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClickOnceAPI/VB/Form1.vb#1)]"
  syntax:
    content: public event System.ComponentModel.AsyncCompletedEventHandler UpdateCompleted;
    return:
      type: System.ComponentModel.AsyncCompletedEventHandler
      description: ''
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.UpdatedApplicationFullName
  commentId: P:System.Deployment.Application.ApplicationDeployment.UpdatedApplicationFullName
  id: UpdatedApplicationFullName
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: UpdatedApplicationFullName
  nameWithType: ApplicationDeployment.UpdatedApplicationFullName
  fullName: ApplicationDeployment.UpdatedApplicationFullName
  type: Property
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Gets the full name of the application after it has been updated.
  syntax:
    content: public string UpdatedApplicationFullName { get; }
    return:
      type: System.String
      description: A <xref href="System.String"></xref> that contains the full name of the application.
  overload: System.Deployment.Application.ApplicationDeployment.UpdatedApplicationFullName*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.UpdatedVersion
  commentId: P:System.Deployment.Application.ApplicationDeployment.UpdatedVersion
  id: UpdatedVersion
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: UpdatedVersion
  nameWithType: ApplicationDeployment.UpdatedVersion
  fullName: ApplicationDeployment.UpdatedVersion
  type: Property
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Gets the version of the update that was recently downloaded.
  remarks: "<xref:System.Deployment.Application.ApplicationDeployment.UpdatedVersion%2A> differs from <xref:System.Deployment.Application.ApplicationDeployment.CurrentVersion%2A> if a new update has been installed but you have not yet called <xref:System.Windows.Forms.Application.Restart%2A> on the <xref:System.Windows.Forms.Application>. If the application's deployment manifest is configured to perform automatic updates, you can compare these two values to determine whether you should restart the application.  \n  \n If the application has not been updated, <xref:System.Deployment.Application.ApplicationDeployment.UpdatedVersion%2A> returns the same value as <xref:System.Deployment.Application.ApplicationDeployment.CurrentVersion%2A>."
  example:
  - "The following code example defines a method that determines whether [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] has updated the application.  \n  \n [!code-cpp[ClickOnceAPI#4](~/samples/snippets/cpp/VS_Snippets_Winforms/ClickOnceAPI/cpp/form1.cpp#4)]\n [!code-csharp[ClickOnceAPI#4](~/samples/snippets/csharp/VS_Snippets_Winforms/ClickOnceAPI/CS/Form1.cs#4)]\n [!code-vb[ClickOnceAPI#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClickOnceAPI/VB/Form1.vb#4)]"
  syntax:
    content: public Version UpdatedVersion { get; }
    return:
      type: System.Version
      description: The <xref href="System.Version"></xref> describing the version of the update.
  overload: System.Deployment.Application.ApplicationDeployment.UpdatedVersion*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.UpdateLocation
  commentId: P:System.Deployment.Application.ApplicationDeployment.UpdateLocation
  id: UpdateLocation
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: UpdateLocation
  nameWithType: ApplicationDeployment.UpdateLocation
  fullName: ApplicationDeployment.UpdateLocation
  type: Property
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Gets the Web site or file share from which this application updates itself.
  remarks: "<xref:System.Deployment.Application.ApplicationDeployment.UpdateLocation%2A> may be different from the Web site used to download the application initially if the application's deployment is configured to use update redirection.  \n  \n This value can be changed only in the application's deployment manifest."
  syntax:
    content: public Uri UpdateLocation { get; }
    return:
      type: System.Uri
      description: The update path, expressed as an HTTP, HTTPS, or file URL; or as a Windows network file path (UNC).
  overload: System.Deployment.Application.ApplicationDeployment.UpdateLocation*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged
  commentId: E:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged
  id: UpdateProgressChanged
  parent: System.Deployment.Application.ApplicationDeployment
  langs:
  - csharp
  name: UpdateProgressChanged
  nameWithType: ApplicationDeployment.UpdateProgressChanged
  fullName: ApplicationDeployment.UpdateProgressChanged
  type: Event
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Occurs when [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] has new status information for an update operation initiated by calling the <xref href="System.Deployment.Application.ApplicationDeployment.UpdateAsync"></xref> method.
  remarks: The <xref:System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged> event is called on the main application thread. You may call your application's Windows Forms controls directly within this callback without triggering an exception.
  example:
  - "The following code example determines at application load time whether a new update is available; if a required update is available, it installs the update asynchronously.  \n  \n [!code-cpp[ClickOnceAPI#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ClickOnceAPI/cpp/form1.cpp#1)]\n [!code-csharp[ClickOnceAPI#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ClickOnceAPI/CS/Form1.cs#1)]\n [!code-vb[ClickOnceAPI#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClickOnceAPI/VB/Form1.vb#1)]"
  syntax:
    content: public event System.Deployment.Application.DeploymentProgressChangedEventHandler UpdateProgressChanged;
    return:
      type: System.Deployment.Application.DeploymentProgressChangedEventHandler
      description: ''
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
  ms.technology:
  - dotnet-standard
  author: stevehoag
  ms.author: shoag
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Deployment.Application.DeploymentDownloadException
  parent: System.Deployment.Application
  isExternal: false
  name: DeploymentDownloadException
  nameWithType: DeploymentDownloadException
  fullName: System.Deployment.Application.DeploymentDownloadException
- uid: System.Deployment.Application.InvalidDeploymentException
  parent: System.Deployment.Application
  isExternal: false
  name: InvalidDeploymentException
  nameWithType: InvalidDeploymentException
  fullName: System.Deployment.Application.InvalidDeploymentException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Deployment.Application.TrustNotGrantedException
  parent: System.Deployment.Application
  isExternal: false
  name: TrustNotGrantedException
  nameWithType: TrustNotGrantedException
  fullName: System.Deployment.Application.TrustNotGrantedException
- uid: System.Deployment.Application.ApplicationDeployment.ActivationUri
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: ActivationUri
  nameWithType: ApplicationDeployment.ActivationUri
  fullName: ApplicationDeployment.ActivationUri
- uid: System.Uri
  parent: System
  isExternal: false
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: CheckForDetailedUpdate()
  nameWithType: ApplicationDeployment.CheckForDetailedUpdate()
  fullName: ApplicationDeployment.CheckForDetailedUpdate()
- uid: System.Deployment.Application.UpdateCheckInfo
  parent: System.Deployment.Application
  isExternal: false
  name: UpdateCheckInfo
  nameWithType: UpdateCheckInfo
  fullName: System.Deployment.Application.UpdateCheckInfo
- uid: System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate(System.Boolean)
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: CheckForDetailedUpdate(Boolean)
  nameWithType: ApplicationDeployment.CheckForDetailedUpdate(Boolean)
  fullName: ApplicationDeployment.CheckForDetailedUpdate(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdate
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: CheckForUpdate()
  nameWithType: ApplicationDeployment.CheckForUpdate()
  fullName: ApplicationDeployment.CheckForUpdate()
- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdate(System.Boolean)
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: CheckForUpdate(Boolean)
  nameWithType: ApplicationDeployment.CheckForUpdate(Boolean)
  fullName: ApplicationDeployment.CheckForUpdate(Boolean)
- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: CheckForUpdateAsync()
  nameWithType: ApplicationDeployment.CheckForUpdateAsync()
  fullName: ApplicationDeployment.CheckForUpdateAsync()
- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: CheckForUpdateAsyncCancel()
  nameWithType: ApplicationDeployment.CheckForUpdateAsyncCancel()
  fullName: ApplicationDeployment.CheckForUpdateAsyncCancel()
- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdateCompleted
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: CheckForUpdateCompleted
  nameWithType: ApplicationDeployment.CheckForUpdateCompleted
  fullName: ApplicationDeployment.CheckForUpdateCompleted
- uid: System.Deployment.Application.CheckForUpdateCompletedEventHandler
  parent: System.Deployment.Application
  isExternal: false
  name: CheckForUpdateCompletedEventHandler
  nameWithType: CheckForUpdateCompletedEventHandler
  fullName: System.Deployment.Application.CheckForUpdateCompletedEventHandler
- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdateProgressChanged
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: CheckForUpdateProgressChanged
  nameWithType: ApplicationDeployment.CheckForUpdateProgressChanged
  fullName: ApplicationDeployment.CheckForUpdateProgressChanged
- uid: System.Deployment.Application.DeploymentProgressChangedEventHandler
  parent: System.Deployment.Application
  isExternal: false
  name: DeploymentProgressChangedEventHandler
  nameWithType: DeploymentProgressChangedEventHandler
  fullName: System.Deployment.Application.DeploymentProgressChangedEventHandler
- uid: System.Deployment.Application.ApplicationDeployment.CurrentDeployment
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: CurrentDeployment
  nameWithType: ApplicationDeployment.CurrentDeployment
  fullName: ApplicationDeployment.CurrentDeployment
- uid: System.Deployment.Application.ApplicationDeployment
  parent: System.Deployment.Application
  isExternal: false
  name: ApplicationDeployment
  nameWithType: ApplicationDeployment
  fullName: System.Deployment.Application.ApplicationDeployment
- uid: System.Deployment.Application.ApplicationDeployment.CurrentVersion
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: CurrentVersion
  nameWithType: ApplicationDeployment.CurrentVersion
  fullName: ApplicationDeployment.CurrentVersion
- uid: System.Version
  parent: System
  isExternal: false
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Deployment.Application.ApplicationDeployment.DataDirectory
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: DataDirectory
  nameWithType: ApplicationDeployment.DataDirectory
  fullName: ApplicationDeployment.DataDirectory
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroup(System.String)
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: DownloadFileGroup(String)
  nameWithType: ApplicationDeployment.DownloadFileGroup(String)
  fullName: ApplicationDeployment.DownloadFileGroup(String)
- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync(System.String,System.Object)
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: DownloadFileGroupAsync(String, Object)
  nameWithType: ApplicationDeployment.DownloadFileGroupAsync(String, Object)
  fullName: ApplicationDeployment.DownloadFileGroupAsync(String, Object)
- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync(System.String)
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: DownloadFileGroupAsync(String)
  nameWithType: ApplicationDeployment.DownloadFileGroupAsync(String)
  fullName: ApplicationDeployment.DownloadFileGroupAsync(String)
- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel(System.String)
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: DownloadFileGroupAsyncCancel(String)
  nameWithType: ApplicationDeployment.DownloadFileGroupAsyncCancel(String)
  fullName: ApplicationDeployment.DownloadFileGroupAsyncCancel(String)
- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupCompleted
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: DownloadFileGroupCompleted
  nameWithType: ApplicationDeployment.DownloadFileGroupCompleted
  fullName: ApplicationDeployment.DownloadFileGroupCompleted
- uid: System.Deployment.Application.DownloadFileGroupCompletedEventHandler
  parent: System.Deployment.Application
  isExternal: false
  name: DownloadFileGroupCompletedEventHandler
  nameWithType: DownloadFileGroupCompletedEventHandler
  fullName: System.Deployment.Application.DownloadFileGroupCompletedEventHandler
- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupProgressChanged
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: DownloadFileGroupProgressChanged
  nameWithType: ApplicationDeployment.DownloadFileGroupProgressChanged
  fullName: ApplicationDeployment.DownloadFileGroupProgressChanged
- uid: System.Deployment.Application.ApplicationDeployment.IsFileGroupDownloaded(System.String)
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: IsFileGroupDownloaded(String)
  nameWithType: ApplicationDeployment.IsFileGroupDownloaded(String)
  fullName: ApplicationDeployment.IsFileGroupDownloaded(String)
- uid: System.Deployment.Application.ApplicationDeployment.IsFirstRun
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: IsFirstRun
  nameWithType: ApplicationDeployment.IsFirstRun
  fullName: ApplicationDeployment.IsFirstRun
- uid: System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: IsNetworkDeployed
  nameWithType: ApplicationDeployment.IsNetworkDeployed
  fullName: ApplicationDeployment.IsNetworkDeployed
- uid: System.Deployment.Application.ApplicationDeployment.TimeOfLastUpdateCheck
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: TimeOfLastUpdateCheck
  nameWithType: ApplicationDeployment.TimeOfLastUpdateCheck
  fullName: ApplicationDeployment.TimeOfLastUpdateCheck
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Deployment.Application.ApplicationDeployment.Update
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: Update()
  nameWithType: ApplicationDeployment.Update()
  fullName: ApplicationDeployment.Update()
- uid: System.Deployment.Application.ApplicationDeployment.UpdateAsync
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: UpdateAsync()
  nameWithType: ApplicationDeployment.UpdateAsync()
  fullName: ApplicationDeployment.UpdateAsync()
- uid: System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: UpdateAsyncCancel()
  nameWithType: ApplicationDeployment.UpdateAsyncCancel()
  fullName: ApplicationDeployment.UpdateAsyncCancel()
- uid: System.Deployment.Application.ApplicationDeployment.UpdateCompleted
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: UpdateCompleted
  nameWithType: ApplicationDeployment.UpdateCompleted
  fullName: ApplicationDeployment.UpdateCompleted
- uid: System.ComponentModel.AsyncCompletedEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: AsyncCompletedEventHandler
  nameWithType: AsyncCompletedEventHandler
  fullName: System.ComponentModel.AsyncCompletedEventHandler
- uid: System.Deployment.Application.ApplicationDeployment.UpdatedApplicationFullName
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: UpdatedApplicationFullName
  nameWithType: ApplicationDeployment.UpdatedApplicationFullName
  fullName: ApplicationDeployment.UpdatedApplicationFullName
- uid: System.Deployment.Application.ApplicationDeployment.UpdatedVersion
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: UpdatedVersion
  nameWithType: ApplicationDeployment.UpdatedVersion
  fullName: ApplicationDeployment.UpdatedVersion
- uid: System.Deployment.Application.ApplicationDeployment.UpdateLocation
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: UpdateLocation
  nameWithType: ApplicationDeployment.UpdateLocation
  fullName: ApplicationDeployment.UpdateLocation
- uid: System.Deployment.Application.ApplicationDeployment.UpdateProgressChanged
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: UpdateProgressChanged
  nameWithType: ApplicationDeployment.UpdateProgressChanged
  fullName: ApplicationDeployment.UpdateProgressChanged
- uid: System.Deployment.Application.ApplicationDeployment.ActivationUri*
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: ActivationUri
  nameWithType: ApplicationDeployment.ActivationUri
  fullName: ApplicationDeployment.ActivationUri
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
- uid: System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate*
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: CheckForDetailedUpdate
  nameWithType: ApplicationDeployment.CheckForDetailedUpdate
  fullName: ApplicationDeployment.CheckForDetailedUpdate
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdate*
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: CheckForUpdate
  nameWithType: ApplicationDeployment.CheckForUpdate
  fullName: ApplicationDeployment.CheckForUpdate
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsync*
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: CheckForUpdateAsync
  nameWithType: ApplicationDeployment.CheckForUpdateAsync
  fullName: ApplicationDeployment.CheckForUpdateAsync
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
- uid: System.Deployment.Application.ApplicationDeployment.CheckForUpdateAsyncCancel*
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: CheckForUpdateAsyncCancel
  nameWithType: ApplicationDeployment.CheckForUpdateAsyncCancel
  fullName: ApplicationDeployment.CheckForUpdateAsyncCancel
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
- uid: System.Deployment.Application.ApplicationDeployment.CurrentDeployment*
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: CurrentDeployment
  nameWithType: ApplicationDeployment.CurrentDeployment
  fullName: ApplicationDeployment.CurrentDeployment
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
- uid: System.Deployment.Application.ApplicationDeployment.CurrentVersion*
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: CurrentVersion
  nameWithType: ApplicationDeployment.CurrentVersion
  fullName: ApplicationDeployment.CurrentVersion
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
- uid: System.Deployment.Application.ApplicationDeployment.DataDirectory*
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: DataDirectory
  nameWithType: ApplicationDeployment.DataDirectory
  fullName: ApplicationDeployment.DataDirectory
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroup*
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: DownloadFileGroup
  nameWithType: ApplicationDeployment.DownloadFileGroup
  fullName: ApplicationDeployment.DownloadFileGroup
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsync*
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: DownloadFileGroupAsync
  nameWithType: ApplicationDeployment.DownloadFileGroupAsync
  fullName: ApplicationDeployment.DownloadFileGroupAsync
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
- uid: System.Deployment.Application.ApplicationDeployment.DownloadFileGroupAsyncCancel*
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: DownloadFileGroupAsyncCancel
  nameWithType: ApplicationDeployment.DownloadFileGroupAsyncCancel
  fullName: ApplicationDeployment.DownloadFileGroupAsyncCancel
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
- uid: System.Deployment.Application.ApplicationDeployment.IsFileGroupDownloaded*
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: IsFileGroupDownloaded
  nameWithType: ApplicationDeployment.IsFileGroupDownloaded
  fullName: ApplicationDeployment.IsFileGroupDownloaded
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
- uid: System.Deployment.Application.ApplicationDeployment.IsFirstRun*
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: IsFirstRun
  nameWithType: ApplicationDeployment.IsFirstRun
  fullName: ApplicationDeployment.IsFirstRun
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
- uid: System.Deployment.Application.ApplicationDeployment.IsNetworkDeployed*
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: IsNetworkDeployed
  nameWithType: ApplicationDeployment.IsNetworkDeployed
  fullName: ApplicationDeployment.IsNetworkDeployed
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
- uid: System.Deployment.Application.ApplicationDeployment.TimeOfLastUpdateCheck*
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: TimeOfLastUpdateCheck
  nameWithType: ApplicationDeployment.TimeOfLastUpdateCheck
  fullName: ApplicationDeployment.TimeOfLastUpdateCheck
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
- uid: System.Deployment.Application.ApplicationDeployment.Update*
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: Update
  nameWithType: ApplicationDeployment.Update
  fullName: ApplicationDeployment.Update
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
- uid: System.Deployment.Application.ApplicationDeployment.UpdateAsync*
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: UpdateAsync
  nameWithType: ApplicationDeployment.UpdateAsync
  fullName: ApplicationDeployment.UpdateAsync
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
- uid: System.Deployment.Application.ApplicationDeployment.UpdateAsyncCancel*
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: UpdateAsyncCancel
  nameWithType: ApplicationDeployment.UpdateAsyncCancel
  fullName: ApplicationDeployment.UpdateAsyncCancel
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
- uid: System.Deployment.Application.ApplicationDeployment.UpdatedApplicationFullName*
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: UpdatedApplicationFullName
  nameWithType: ApplicationDeployment.UpdatedApplicationFullName
  fullName: ApplicationDeployment.UpdatedApplicationFullName
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
- uid: System.Deployment.Application.ApplicationDeployment.UpdatedVersion*
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: UpdatedVersion
  nameWithType: ApplicationDeployment.UpdatedVersion
  fullName: ApplicationDeployment.UpdatedVersion
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
- uid: System.Deployment.Application.ApplicationDeployment.UpdateLocation*
  parent: System.Deployment.Application.ApplicationDeployment
  isExternal: false
  name: UpdateLocation
  nameWithType: ApplicationDeployment.UpdateLocation
  fullName: ApplicationDeployment.UpdateLocation
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Deployment.Application/ApplicationDeployment.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
