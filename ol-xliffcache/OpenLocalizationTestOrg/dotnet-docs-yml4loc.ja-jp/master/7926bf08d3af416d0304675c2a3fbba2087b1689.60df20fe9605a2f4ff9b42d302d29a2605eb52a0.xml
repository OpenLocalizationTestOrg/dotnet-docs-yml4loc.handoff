{"nodes":[{"content":"Holds the strong name signature information for a manifest.","nodes":[{"pos":[0,59],"content":"Holds the strong name signature information for a manifest.","nodes":[{"content":"Holds the strong name signature information for a manifest.","pos":[0,59]}]}],"pos":[881,941],"yaml":true},{"content":"Gets the hash algorithm that is used to calculate the strong name signature.","nodes":[{"pos":[0,76],"content":"Gets the hash algorithm that is used to calculate the strong name signature.","nodes":[{"content":"Gets the hash algorithm that is used to calculate the strong name signature.","pos":[0,76]}]}],"pos":[2436,2513],"yaml":true},{"content":"The name of the hash algorithm that is used to calculate the strong name signature.","nodes":[{"pos":[0,83],"content":"The name of the hash algorithm that is used to calculate the strong name signature.","nodes":[{"content":"The name of the hash algorithm that is used to calculate the strong name signature.","pos":[0,83]}]}],"pos":[2630,2714],"yaml":true},{"content":"Gets the HRESULT value of the result code.","nodes":[{"pos":[0,42],"content":"Gets the HRESULT value of the result code.","nodes":[{"content":"Gets the HRESULT value of the result code.","pos":[0,42]}]}],"pos":[3859,3902],"yaml":true},{"content":"The HRESULT value of the result code.","nodes":[{"pos":[0,37],"content":"The HRESULT value of the result code.","nodes":[{"content":"The HRESULT value of the result code.","pos":[0,37]}]}],"pos":[4009,4047],"yaml":true},{"content":"Gets a value indicating whether the strong name signature is valid.","nodes":[{"pos":[0,67],"content":"Gets a value indicating whether the strong name signature is valid.","nodes":[{"content":"Gets a value indicating whether the strong name signature is valid.","pos":[0,67]}]}],"pos":[5186,5254],"yaml":true},{"content":"`true` if the strong name signature is valid; otherwise, `false`.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">`true`</ph> if the strong name signature is valid; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the strong name signature is valid; otherwise, `false`."}],"pos":[5364,5432],"yaml":true},{"content":"Gets the public key that is used to verify the signature.","nodes":[{"pos":[0,57],"content":"Gets the public key that is used to verify the signature.","nodes":[{"content":"Gets the public key that is used to verify the signature.","pos":[0,57]}]}],"pos":[6583,6641],"yaml":true},{"content":"The only case that returns `null` is when <xref:System.Security.Cryptography.StrongNameSignatureInformation.IsValid%2A> is `false`.  If the signature is valid, there will always be a key.","nodes":[{"pos":[0,187],"content":"The only case that returns `null` is when <xref:System.Security.Cryptography.StrongNameSignatureInformation.IsValid%2A> is `false`.  If the signature is valid, there will always be a key.","nodes":[{"content":"The only case that returns <ph id=\"ph1\">`null`</ph> is when <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.StrongNameSignatureInformation.IsValid%2A&gt;</ph> is <ph id=\"ph3\">`false`</ph>.","pos":[0,131],"source":"The only case that returns `null` is when <xref:System.Security.Cryptography.StrongNameSignatureInformation.IsValid%2A> is `false`."},{"content":"If the signature is valid, there will always be a key.","pos":[133,187]}]}],"pos":[6652,6840],"yaml":true,"extradata":"MT"},{"content":"The public key that is used to verify the signature.","nodes":[{"pos":[0,52],"content":"The public key that is used to verify the signature.","nodes":[{"content":"The public key that is used to verify the signature.","pos":[0,52]}]}],"pos":[7030,7083],"yaml":true},{"content":"Gets the results of verifying the strong name signature.","nodes":[{"pos":[0,56],"content":"Gets the results of verifying the strong name signature.","nodes":[{"content":"Gets the results of verifying the strong name signature.","pos":[0,56]}]}],"pos":[8290,8347],"yaml":true},{"content":"This property and the <xref:System.Security.Cryptography.StrongNameSignatureInformation.HResult%2A> property are two ways to determine whether an error occurred during verification. This property lists well-known errors that might occur. The <xref:System.Security.Cryptography.StrongNameSignatureInformation.HResult%2A> property can be checked if the error is not covered by the <xref:System.Security.Cryptography.SignatureVerificationResult> enumeration.","nodes":[{"pos":[0,455],"content":"This property and the <xref:System.Security.Cryptography.StrongNameSignatureInformation.HResult%2A> property are two ways to determine whether an error occurred during verification. This property lists well-known errors that might occur. The <xref:System.Security.Cryptography.StrongNameSignatureInformation.HResult%2A> property can be checked if the error is not covered by the <xref:System.Security.Cryptography.SignatureVerificationResult> enumeration.","nodes":[{"content":"This property and the <xref:System.Security.Cryptography.StrongNameSignatureInformation.HResult%2A> property are two ways to determine whether an error occurred during verification. This property lists well-known errors that might occur. The <xref:System.Security.Cryptography.StrongNameSignatureInformation.HResult%2A> property can be checked if the error is not covered by the <xref:System.Security.Cryptography.SignatureVerificationResult> enumeration.","pos":[0,455],"nodes":[{"content":"This property and the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.StrongNameSignatureInformation.HResult%2A&gt;</ph> property are two ways to determine whether an error occurred during verification.","pos":[0,181],"source":"This property and the <xref:System.Security.Cryptography.StrongNameSignatureInformation.HResult%2A> property are two ways to determine whether an error occurred during verification."},{"content":"This property lists well-known errors that might occur.","pos":[182,237]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.StrongNameSignatureInformation.HResult%2A&gt;</ph> property can be checked if the error is not covered by the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.SignatureVerificationResult&gt;</ph> enumeration.","pos":[238,455],"source":" The <xref:System.Security.Cryptography.StrongNameSignatureInformation.HResult%2A> property can be checked if the error is not covered by the <xref:System.Security.Cryptography.SignatureVerificationResult> enumeration."}]}]}],"pos":[8358,8814],"yaml":true,"extradata":"MT"},{"content":"The result codes for signature verification.","nodes":[{"pos":[0,44],"content":"The result codes for signature verification.","nodes":[{"content":"The result codes for signature verification.","pos":[0,44]}]}],"pos":[9029,9074],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.StrongNameSignatureInformation\n  commentId: T:System.Security.Cryptography.StrongNameSignatureInformation\n  id: StrongNameSignatureInformation\n  children:\n  - System.Security.Cryptography.StrongNameSignatureInformation.HashAlgorithm\n  - System.Security.Cryptography.StrongNameSignatureInformation.HResult\n  - System.Security.Cryptography.StrongNameSignatureInformation.IsValid\n  - System.Security.Cryptography.StrongNameSignatureInformation.PublicKey\n  - System.Security.Cryptography.StrongNameSignatureInformation.VerificationResult\n  langs:\n  - csharp\n  name: StrongNameSignatureInformation\n  nameWithType: StrongNameSignatureInformation\n  fullName: System.Security.Cryptography.StrongNameSignatureInformation\n  type: Class\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Holds the strong name signature information for a manifest.\n  syntax:\n    content: public sealed class StrongNameSignatureInformation\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/StrongNameSignatureInformation.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.HashAlgorithm\n  commentId: P:System.Security.Cryptography.StrongNameSignatureInformation.HashAlgorithm\n  id: HashAlgorithm\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  langs:\n  - csharp\n  name: HashAlgorithm\n  nameWithType: StrongNameSignatureInformation.HashAlgorithm\n  fullName: StrongNameSignatureInformation.HashAlgorithm\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the hash algorithm that is used to calculate the strong name signature.\n  syntax:\n    content: public string HashAlgorithm { get; }\n    return:\n      type: System.String\n      description: The name of the hash algorithm that is used to calculate the strong name signature.\n  overload: System.Security.Cryptography.StrongNameSignatureInformation.HashAlgorithm*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/StrongNameSignatureInformation.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.HResult\n  commentId: P:System.Security.Cryptography.StrongNameSignatureInformation.HResult\n  id: HResult\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  langs:\n  - csharp\n  name: HResult\n  nameWithType: StrongNameSignatureInformation.HResult\n  fullName: StrongNameSignatureInformation.HResult\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the HRESULT value of the result code.\n  syntax:\n    content: public int HResult { get; }\n    return:\n      type: System.Int32\n      description: The HRESULT value of the result code.\n  overload: System.Security.Cryptography.StrongNameSignatureInformation.HResult*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/StrongNameSignatureInformation.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.IsValid\n  commentId: P:System.Security.Cryptography.StrongNameSignatureInformation.IsValid\n  id: IsValid\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  langs:\n  - csharp\n  name: IsValid\n  nameWithType: StrongNameSignatureInformation.IsValid\n  fullName: StrongNameSignatureInformation.IsValid\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets a value indicating whether the strong name signature is valid.\n  syntax:\n    content: public bool IsValid { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the strong name signature is valid; otherwise, `false`.'\n  overload: System.Security.Cryptography.StrongNameSignatureInformation.IsValid*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/StrongNameSignatureInformation.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.PublicKey\n  commentId: P:System.Security.Cryptography.StrongNameSignatureInformation.PublicKey\n  id: PublicKey\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  langs:\n  - csharp\n  name: PublicKey\n  nameWithType: StrongNameSignatureInformation.PublicKey\n  fullName: StrongNameSignatureInformation.PublicKey\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the public key that is used to verify the signature.\n  remarks: The only case that returns `null` is when <xref:System.Security.Cryptography.StrongNameSignatureInformation.IsValid%2A> is `false`.  If the signature is valid, there will always be a key.\n  syntax:\n    content: public System.Security.Cryptography.AsymmetricAlgorithm PublicKey { get; }\n    return:\n      type: System.Security.Cryptography.AsymmetricAlgorithm\n      description: The public key that is used to verify the signature.\n  overload: System.Security.Cryptography.StrongNameSignatureInformation.PublicKey*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/StrongNameSignatureInformation.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.VerificationResult\n  commentId: P:System.Security.Cryptography.StrongNameSignatureInformation.VerificationResult\n  id: VerificationResult\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  langs:\n  - csharp\n  name: VerificationResult\n  nameWithType: StrongNameSignatureInformation.VerificationResult\n  fullName: StrongNameSignatureInformation.VerificationResult\n  type: Property\n  assemblies:\n  - System.Core\n  namespace: System.Security.Cryptography\n  summary: Gets the results of verifying the strong name signature.\n  remarks: This property and the <xref:System.Security.Cryptography.StrongNameSignatureInformation.HResult%2A> property are two ways to determine whether an error occurred during verification. This property lists well-known errors that might occur. The <xref:System.Security.Cryptography.StrongNameSignatureInformation.HResult%2A> property can be checked if the error is not covered by the <xref:System.Security.Cryptography.SignatureVerificationResult> enumeration.\n  syntax:\n    content: public System.Security.Cryptography.SignatureVerificationResult VerificationResult { get; }\n    return:\n      type: System.Security.Cryptography.SignatureVerificationResult\n      description: The result codes for signature verification.\n  overload: System.Security.Cryptography.StrongNameSignatureInformation.VerificationResult*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/StrongNameSignatureInformation.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.HashAlgorithm\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: StrongNameSignatureInformation.HashAlgorithm\n  fullName: StrongNameSignatureInformation.HashAlgorithm\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.HResult\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  isExternal: false\n  name: HResult\n  nameWithType: StrongNameSignatureInformation.HResult\n  fullName: StrongNameSignatureInformation.HResult\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.IsValid\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  isExternal: false\n  name: IsValid\n  nameWithType: StrongNameSignatureInformation.IsValid\n  fullName: StrongNameSignatureInformation.IsValid\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.PublicKey\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  isExternal: false\n  name: PublicKey\n  nameWithType: StrongNameSignatureInformation.PublicKey\n  fullName: StrongNameSignatureInformation.PublicKey\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.VerificationResult\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  isExternal: false\n  name: VerificationResult\n  nameWithType: StrongNameSignatureInformation.VerificationResult\n  fullName: StrongNameSignatureInformation.VerificationResult\n- uid: System.Security.Cryptography.SignatureVerificationResult\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: SignatureVerificationResult\n  nameWithType: SignatureVerificationResult\n  fullName: System.Security.Cryptography.SignatureVerificationResult\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.HashAlgorithm*\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: StrongNameSignatureInformation.HashAlgorithm\n  fullName: StrongNameSignatureInformation.HashAlgorithm\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/StrongNameSignatureInformation.xml\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.HResult*\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  isExternal: false\n  name: HResult\n  nameWithType: StrongNameSignatureInformation.HResult\n  fullName: StrongNameSignatureInformation.HResult\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/StrongNameSignatureInformation.xml\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.IsValid*\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  isExternal: false\n  name: IsValid\n  nameWithType: StrongNameSignatureInformation.IsValid\n  fullName: StrongNameSignatureInformation.IsValid\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/StrongNameSignatureInformation.xml\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.PublicKey*\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  isExternal: false\n  name: PublicKey\n  nameWithType: StrongNameSignatureInformation.PublicKey\n  fullName: StrongNameSignatureInformation.PublicKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/StrongNameSignatureInformation.xml\n- uid: System.Security.Cryptography.StrongNameSignatureInformation.VerificationResult*\n  parent: System.Security.Cryptography.StrongNameSignatureInformation\n  isExternal: false\n  name: VerificationResult\n  nameWithType: StrongNameSignatureInformation.VerificationResult\n  fullName: StrongNameSignatureInformation.VerificationResult\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/StrongNameSignatureInformation.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}