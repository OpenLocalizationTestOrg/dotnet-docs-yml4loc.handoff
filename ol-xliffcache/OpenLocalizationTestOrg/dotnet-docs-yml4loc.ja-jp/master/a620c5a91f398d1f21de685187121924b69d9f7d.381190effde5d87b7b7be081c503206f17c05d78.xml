{"nodes":[{"content":"Provides a base class for XAML markup extension implementations that can be supported by .NET Framework XAML Services and other XAML readers and XAML writers.","nodes":[{"pos":[0,158],"content":"Provides a base class for XAML markup extension implementations that can be supported by .NET Framework XAML Services and other XAML readers and XAML writers.","nodes":[{"content":"Provides a base class for XAML markup extension implementations that can be supported by .NET Framework XAML Services and other XAML readers and XAML writers.","pos":[0,158]}]}],"pos":[512,671],"yaml":true},{"content":"Markup extensions return objects to callers, based on the input of string attribute values or markup elements in XAML. Markup extensions return objects in a more sophisticated way than type converters alone can accomplish. A XAML object writer invokes a type converter because a type or member has a type converter implementation associated with it. From the CLR frame of reference, this means that a type or member is <xref:System.ComponentModel.TypeConverterAttribute> attributed. From the XAML type system perspective, this means that a XAML type or a XAML member has a value for its `TypeConverter` property. The invocation of a type converter is tied to the type or property definition, and is always invoked by XAML processing for these cases. In contrast, a markup extension is more under the control of user code and user-produced markup, and can be applied whenever an application scenario demands it. A markup extension can be invoked and can be used for setting different type-member values, so long as the markup extension's return type is assignable to that value.  \n  \n For information on creating a custom markup extension, see <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>. For more information on markup extensions in general, see [Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md). If you are building on WPF and using or creating markup extensions for XAML, other relevant information can be found in the topic [Markup Extensions and WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).  \n  \n The <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> method of each markup extension implementation can use an <xref:System.IServiceProvider> at run time that can provide context. This  <xref:System.IServiceProvider> is then queried for specific services that pass information, such as <xref:System.Windows.Markup.IProvideValueTarget> or <xref:System.Windows.Markup.IXamlTypeResolver>. For more information on service contexts for a markup extension, see [Service Contexts Available to Type Converters and Markup Extensions](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md).  \n  \n Derived classes should be attributed with <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> to inform consumers of the most specific return type available from the markup extension's <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> implementation.","nodes":[{"pos":[0,1077],"content":"Markup extensions return objects to callers, based on the input of string attribute values or markup elements in XAML. Markup extensions return objects in a more sophisticated way than type converters alone can accomplish. A XAML object writer invokes a type converter because a type or member has a type converter implementation associated with it. From the CLR frame of reference, this means that a type or member is <xref:System.ComponentModel.TypeConverterAttribute> attributed. From the XAML type system perspective, this means that a XAML type or a XAML member has a value for its `TypeConverter` property. The invocation of a type converter is tied to the type or property definition, and is always invoked by XAML processing for these cases. In contrast, a markup extension is more under the control of user code and user-produced markup, and can be applied whenever an application scenario demands it. A markup extension can be invoked and can be used for setting different type-member values, so long as the markup extension's return type is assignable to that value.","nodes":[{"content":"Markup extensions return objects to callers, based on the input of string attribute values or markup elements in XAML.","pos":[0,118]},{"content":"Markup extensions return objects in a more sophisticated way than type converters alone can accomplish.","pos":[119,222]},{"content":"A XAML object writer invokes a type converter because a type or member has a type converter implementation associated with it.","pos":[223,349]},{"content":"From the CLR frame of reference, this means that a type or member is <ph id=\"ph1\">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> attributed.","pos":[350,482],"source":" From the CLR frame of reference, this means that a type or member is <xref:System.ComponentModel.TypeConverterAttribute> attributed."},{"content":"From the XAML type system perspective, this means that a XAML type or a XAML member has a value for its <ph id=\"ph1\">`TypeConverter`</ph> property.","pos":[483,612],"source":" From the XAML type system perspective, this means that a XAML type or a XAML member has a value for its `TypeConverter` property."},{"content":"The invocation of a type converter is tied to the type or property definition, and is always invoked by XAML processing for these cases.","pos":[613,749]},{"content":"In contrast, a markup extension is more under the control of user code and user-produced markup, and can be applied whenever an application scenario demands it.","pos":[750,910]},{"content":"A markup extension can be invoked and can be used for setting different type-member values, so long as the markup extension's return type is assignable to that value.","pos":[911,1077]}]},{"pos":[1084,1601],"content":"For information on creating a custom markup extension, see <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>. For more information on markup extensions in general, see [Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md). If you are building on WPF and using or creating markup extensions for XAML, other relevant information can be found in the topic [Markup Extensions and WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).","nodes":[{"content":"For information on creating a custom markup extension, see <ph id=\"ph1\">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph>.","pos":[0,120],"source":"For information on creating a custom markup extension, see <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>."},{"content":"For more information on markup extensions in general, see <bpt id=\"p1\">[</bpt>Markup Extensions for XAML Overview<ept id=\"p1\">](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)</ept>.","pos":[121,288],"source":" For more information on markup extensions in general, see [Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)."},{"content":"If you are building on WPF and using or creating markup extensions for XAML, other relevant information can be found in the topic <bpt id=\"p1\">[</bpt>Markup Extensions and WPF XAML<ept id=\"p1\">](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)</ept>.","pos":[289,517],"source":" If you are building on WPF and using or creating markup extensions for XAML, other relevant information can be found in the topic [Markup Extensions and WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)."}]},{"pos":[1608,2248],"content":"The <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> method of each markup extension implementation can use an <xref:System.IServiceProvider> at run time that can provide context. This  <xref:System.IServiceProvider> is then queried for specific services that pass information, such as <xref:System.Windows.Markup.IProvideValueTarget> or <xref:System.Windows.Markup.IXamlTypeResolver>. For more information on service contexts for a markup extension, see [Service Contexts Available to Type Converters and Markup Extensions](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph> method of each markup extension implementation can use an <ph id=\"ph2\">&lt;xref:System.IServiceProvider&gt;</ph> at run time that can provide context.","pos":[0,191],"source":"The <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> method of each markup extension implementation can use an <xref:System.IServiceProvider> at run time that can provide context."},{"content":"This  <ph id=\"ph1\">&lt;xref:System.IServiceProvider&gt;</ph> is then queried for specific services that pass information, such as <ph id=\"ph2\">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.Markup.IXamlTypeResolver&gt;</ph>.","pos":[192,397],"source":" This  <xref:System.IServiceProvider> is then queried for specific services that pass information, such as <xref:System.Windows.Markup.IProvideValueTarget> or <xref:System.Windows.Markup.IXamlTypeResolver>."},{"content":"For more information on service contexts for a markup extension, see <bpt id=\"p1\">[</bpt>Service Contexts Available to Type Converters and Markup Extensions<ept id=\"p1\">](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)</ept>.","pos":[398,640],"source":" For more information on service contexts for a markup extension, see [Service Contexts Available to Type Converters and Markup Extensions](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md)."}]},{"pos":[2255,2528],"content":"Derived classes should be attributed with <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> to inform consumers of the most specific return type available from the markup extension's <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> implementation.","nodes":[{"content":"Derived classes should be attributed with <ph id=\"ph1\">&lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;</ph> to inform consumers of the most specific return type available from the markup extension's <ph id=\"ph2\">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph> implementation.","pos":[0,273],"source":"Derived classes should be attributed with <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> to inform consumers of the most specific return type available from the markup extension's <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> implementation."}]}],"pos":[682,3219],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of a class derived from <xref href=\"System.Windows.Markup.MarkupExtension\"></xref>.","nodes":[{"pos":[0,110],"content":"Initializes a new instance of a class derived from <ph id=\"ph1\">&lt;xref href=\"System.Windows.Markup.MarkupExtension\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of a class derived from <xref href=\"System.Windows.Markup.MarkupExtension\"></xref>."}],"pos":[5554,5665],"yaml":true},{"content":"The <xref:System.Windows.Markup.MarkupExtension> abstract class does not hold any private values that require initialization.","nodes":[{"pos":[0,125],"content":"The <xref:System.Windows.Markup.MarkupExtension> abstract class does not hold any private values that require initialization.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Markup.MarkupExtension&gt;</ph> abstract class does not hold any private values that require initialization.","pos":[0,125],"source":"The <xref:System.Windows.Markup.MarkupExtension> abstract class does not hold any private values that require initialization."}]}],"pos":[5676,5802],"yaml":true,"extradata":"MT"},{"content":"When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.","nodes":[{"pos":[0,134],"content":"When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.","nodes":[{"content":"When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.","pos":[0,134]}]}],"pos":[6979,7114],"yaml":true},{"content":"When a XAML processor processes a type node and member value that is a markup extension, it invokes the <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> method of that markup extension and writes the result into the object graph or serialization stream. The XAML object writer passes service context to each such implementation through the `serviceProvider` parameter.  \n  \n See \"Notes to Implementers\" section for more information on how to implement <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> in a custom markup extension.  \n  \n## WPF Usage Notes  \n  \n> [!IMPORTANT]\n>  WPF classes that have specific interactions with markup set operations should not rely on <xref:System.Windows.Markup.IReceiveMarkupExtension> for a [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] implementation. Use <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>-attributed callbacks instead.","nodes":[{"pos":[0,380],"content":"When a XAML processor processes a type node and member value that is a markup extension, it invokes the <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> method of that markup extension and writes the result into the object graph or serialization stream. The XAML object writer passes service context to each such implementation through the `serviceProvider` parameter.","nodes":[{"content":"When a XAML processor processes a type node and member value that is a markup extension, it invokes the <ph id=\"ph1\">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph> method of that markup extension and writes the result into the object graph or serialization stream.","pos":[0,265],"source":"When a XAML processor processes a type node and member value that is a markup extension, it invokes the <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> method of that markup extension and writes the result into the object graph or serialization stream."},{"content":"The XAML object writer passes service context to each such implementation through the <ph id=\"ph1\">`serviceProvider`</ph> parameter.","pos":[266,380],"source":" The XAML object writer passes service context to each such implementation through the `serviceProvider` parameter."}]},{"pos":[387,554],"content":"See \"Notes to Implementers\" section for more information on how to implement <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> in a custom markup extension.","nodes":[{"content":"See \"Notes to Implementers\" section for more information on how to implement <ph id=\"ph1\">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph> in a custom markup extension.","pos":[0,167],"source":"See \"Notes to Implementers\" section for more information on how to implement <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> in a custom markup extension."}]},{"pos":[563,578],"content":"WPF Usage Notes","linkify":"WPF Usage Notes","nodes":[{"content":"WPF Usage Notes","pos":[0,15]}]},{"pos":[586,919],"content":"[!IMPORTANT]\n WPF classes that have specific interactions with markup set operations should not rely on <xref:System.Windows.Markup.IReceiveMarkupExtension> for a [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] implementation. Use <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>-attributed callbacks instead.","leadings":["","> "],"nodes":[{"content":" WPF classes that have specific interactions with markup set operations should not rely on <xref:System.Windows.Markup.IReceiveMarkupExtension> for a [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] implementation. Use <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>-attributed callbacks instead.","pos":[13,331],"nodes":[{"content":"WPF classes that have specific interactions with markup set operations should not rely on <ph id=\"ph1\">&lt;xref:System.Windows.Markup.IReceiveMarkupExtension&gt;</ph> for a <ph id=\"ph2\">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph> implementation.","pos":[1,223],"source":" WPF classes that have specific interactions with markup set operations should not rely on <xref:System.Windows.Markup.IReceiveMarkupExtension> for a [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] implementation."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute&gt;</ph>-attributed callbacks instead.","pos":[224,318],"source":" Use <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>-attributed callbacks instead."}]}]}],"pos":[7125,8056],"yaml":true,"extradata":"MT"},{"content":"A service provider helper that can provide services for the markup extension.","nodes":[{"pos":[0,77],"content":"A service provider helper that can provide services for the markup extension.","nodes":[{"content":"A service provider helper that can provide services for the markup extension.","pos":[0,77]}]}],"pos":[8248,8326],"yaml":true},{"content":"The object value to set on the property where the extension is applied.","nodes":[{"pos":[0,71],"content":"The object value to set on the property where the extension is applied.","nodes":[{"content":"The object value to set on the property where the extension is applied.","pos":[0,71]}]}],"pos":[8383,8455],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Markup.MarkupExtension\n  commentId: T:System.Windows.Markup.MarkupExtension\n  id: MarkupExtension\n  children:\n  - System.Windows.Markup.MarkupExtension.#ctor\n  - System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)\n  langs:\n  - csharp\n  name: MarkupExtension\n  nameWithType: MarkupExtension\n  fullName: System.Windows.Markup.MarkupExtension\n  type: Class\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Provides a base class for XAML markup extension implementations that can be supported by .NET Framework XAML Services and other XAML readers and XAML writers.\n  remarks: \"Markup extensions return objects to callers, based on the input of string attribute values or markup elements in XAML. Markup extensions return objects in a more sophisticated way than type converters alone can accomplish. A XAML object writer invokes a type converter because a type or member has a type converter implementation associated with it. From the CLR frame of reference, this means that a type or member is <xref:System.ComponentModel.TypeConverterAttribute> attributed. From the XAML type system perspective, this means that a XAML type or a XAML member has a value for its `TypeConverter` property. The invocation of a type converter is tied to the type or property definition, and is always invoked by XAML processing for these cases. In contrast, a markup extension is more under the control of user code and user-produced markup, and can be applied whenever an application scenario demands it. A markup extension can be invoked and can be used for setting different type-member values, so long as the markup extension's return type is assignable to that value.  \\n  \\n For information on creating a custom markup extension, see <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>. For more information on markup extensions in general, see [Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md). If you are building on WPF and using or creating markup extensions for XAML, other relevant information can be found in the topic [Markup Extensions and WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).  \\n  \\n The <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> method of each markup extension implementation can use an <xref:System.IServiceProvider> at run time that can provide context. This  <xref:System.IServiceProvider> is then queried for specific services that pass information, such as <xref:System.Windows.Markup.IProvideValueTarget> or <xref:System.Windows.Markup.IXamlTypeResolver>. For more information on service contexts for a markup extension, see [Service Contexts Available to Type Converters and Markup Extensions](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md).  \\n  \\n Derived classes should be attributed with <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> to inform consumers of the most specific return type available from the markup extension's <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> implementation.\"\n  syntax:\n    content: public abstract class MarkupExtension\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Activities.Presentation.CachedResourceDictionaryExtension\n  - System.Activities.XamlIntegration.DynamicUpdateMapExtension\n  - System.Activities.XamlIntegration.PropertyReferenceExtension`1\n  - System.ServiceModel.EndpointIdentityExtension\n  - System.ServiceModel.XamlIntegration.SpnEndpointIdentityExtension\n  - System.ServiceModel.XamlIntegration.UpnEndpointIdentityExtension\n  - System.ServiceModel.XamlIntegration.XPathMessageContextMarkupExtension\n  - System.Windows.ColorConvertedBitmapExtension\n  - System.Windows.DynamicResourceExtension\n  - System.Windows.ResourceKey\n  - System.Windows.StaticResourceExtension\n  - System.Windows.TemplateBindingExtension\n  - System.Windows.ThemeDictionaryExtension\n  - System.Windows.Data.BindingBase\n  - System.Windows.Data.RelativeSource\n  - System.Windows.Markup.ArrayExtension\n  - System.Windows.Markup.NullExtension\n  - System.Windows.Markup.Reference\n  - System.Windows.Markup.StaticExtension\n  - System.Windows.Markup.TypeExtension\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/MarkupExtension.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\n- uid: System.Windows.Markup.MarkupExtension.#ctor\n  commentId: M:System.Windows.Markup.MarkupExtension.#ctor\n  id: '#ctor'\n  parent: System.Windows.Markup.MarkupExtension\n  langs:\n  - csharp\n  name: MarkupExtension()\n  nameWithType: MarkupExtension.MarkupExtension()\n  fullName: MarkupExtension.MarkupExtension()\n  type: Constructor\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Initializes a new instance of a class derived from <xref href=\"System.Windows.Markup.MarkupExtension\"></xref>.\n  remarks: The <xref:System.Windows.Markup.MarkupExtension> abstract class does not hold any private values that require initialization.\n  syntax:\n    content: protected MarkupExtension ();\n    parameters: []\n  overload: System.Windows.Markup.MarkupExtension.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/MarkupExtension.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\n- uid: System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)\n  commentId: M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)\n  id: ProvideValue(System.IServiceProvider)\n  parent: System.Windows.Markup.MarkupExtension\n  langs:\n  - csharp\n  name: ProvideValue(IServiceProvider)\n  nameWithType: MarkupExtension.ProvideValue(IServiceProvider)\n  fullName: MarkupExtension.ProvideValue(IServiceProvider)\n  type: Method\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.\n  remarks: \"When a XAML processor processes a type node and member value that is a markup extension, it invokes the <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> method of that markup extension and writes the result into the object graph or serialization stream. The XAML object writer passes service context to each such implementation through the `serviceProvider` parameter.  \\n  \\n See \\\"Notes to Implementers\\\" section for more information on how to implement <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> in a custom markup extension.  \\n  \\n## WPF Usage Notes  \\n  \\n> [!IMPORTANT]\\n>  WPF classes that have specific interactions with markup set operations should not rely on <xref:System.Windows.Markup.IReceiveMarkupExtension> for a [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] implementation. Use <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>-attributed callbacks instead.\"\n  syntax:\n    content: public abstract object ProvideValue (IServiceProvider serviceProvider);\n    parameters:\n    - id: serviceProvider\n      type: System.IServiceProvider\n      description: A service provider helper that can provide services for the markup extension.\n    return:\n      type: System.Object\n      description: The object value to set on the property where the extension is applied.\n  overload: System.Windows.Markup.MarkupExtension.ProvideValue*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/MarkupExtension.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Markup.MarkupExtension.#ctor\n  parent: System.Windows.Markup.MarkupExtension\n  isExternal: false\n  name: MarkupExtension()\n  nameWithType: MarkupExtension.MarkupExtension()\n  fullName: MarkupExtension.MarkupExtension()\n- uid: System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)\n  parent: System.Windows.Markup.MarkupExtension\n  isExternal: false\n  name: ProvideValue(IServiceProvider)\n  nameWithType: MarkupExtension.ProvideValue(IServiceProvider)\n  fullName: MarkupExtension.ProvideValue(IServiceProvider)\n- uid: System.IServiceProvider\n  parent: System\n  isExternal: false\n  name: IServiceProvider\n  nameWithType: IServiceProvider\n  fullName: System.IServiceProvider\n- uid: System.Windows.Markup.MarkupExtension.#ctor*\n  parent: System.Windows.Markup.MarkupExtension\n  isExternal: false\n  name: MarkupExtension\n  nameWithType: MarkupExtension.MarkupExtension\n  fullName: MarkupExtension.MarkupExtension\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/MarkupExtension.xml\n- uid: System.Windows.Markup.MarkupExtension.ProvideValue*\n  parent: System.Windows.Markup.MarkupExtension\n  isExternal: false\n  name: ProvideValue\n  nameWithType: MarkupExtension.ProvideValue\n  fullName: MarkupExtension.ProvideValue\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/MarkupExtension.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}