{"nodes":[{"content":"Defines and represents a method (or constructor) on a dynamic class.","nodes":[{"pos":[0,68],"content":"Defines and represents a method (or constructor) on a dynamic class.","nodes":[{"content":"Defines and represents a method (or constructor) on a dynamic class.","pos":[0,68]}]}],"pos":[4815,4884],"yaml":true},{"content":"The <xref:System.Reflection.Emit.MethodBuilder> class is used to fully describe a method in Microsoft intermediate language (MSIL), including the name, attributes, signature, and method body. It is used in conjunction with the <xref:System.Reflection.Emit.TypeBuilder> class to create classes at runtime.  \n  \n## Global methods and methods as type members  \n You can use reflection emit to define global methods and to define methods as type members. The APIs that define methods return <xref:System.Reflection.Emit.MethodBuilder> objects.  \n  \n### Global methods  \n A global method is defined by using the <xref:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod%2A?displayProperty=fullName> method, which returns a **MethodBuilder** object.  \n  \n Global methods must be static. If a dynamic module contains global methods, the <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A?displayProperty=fullName> method must be called before persisting the dynamic module or the containing dynamic assembly because the common language runtime postpones fixing up the dynamic module until all global functions have been defined.  \n  \n A global native method is defined by using the <xref:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod%2A?displayProperty=fullName> method. Platform invoke (PInvoke) methods must not be declared abstract or virtual. The runtime sets the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute for a platform invoke method.  \n  \n### Methods as members of types  \n A method is defined as a type member by using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method, which returns a <xref:System.Reflection.Emit.MethodBuilder> object.  \n  \n The <xref:System.Reflection.Emit.MethodBuilder.DefineParameter%2A> method is used to set the name and parameter attributes of a parameter, or of the return value. The<xref:System.Reflection.Emit.ParameterBuilder> object returned by this method represents a parameter or the return value. The <xref:System.Reflection.Emit.ParameterBuilder> object can be used to set the marshaling, to set the constant value, and to apply custom attributes.  \n  \n## Attributes  \n Members of the <xref:System.Reflection.MethodAttributes> enumeration define the precise character of a dynamic method:  \n  \n-   Static methods are specified using the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.  \n  \n-   Final methods (methods that cannot be overridden) are specified using the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.  \n  \n-   Virtual methods are specified using the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.  \n  \n-   Abstract methods are specified using the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.  \n  \n-   Several attributes determine method visibility. See the description of the <xref:System.Reflection.MethodAttributes> enumeration.  \n  \n-   Methods that implement overloaded operators must set the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.  \n  \n-   Finalizers must set the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.  \n  \n## Known Issues  \n  \n-   Although <xref:System.Reflection.Emit.MethodBuilder> is derived from <xref:System.Reflection.MethodInfo>, some of the abstract methods defined in the <xref:System.Reflection.MethodInfo> class are not fully implemented in <xref:System.Reflection.Emit.MethodBuilder>. These <xref:System.Reflection.Emit.MethodBuilder> methods throw the <xref:System.NotSupportedException>. For example the <xref:System.Reflection.Emit.MethodBuilder.Invoke%2A?displayProperty=fullName> method is not fully implemented. You can reflect on these methods by retrieving the enclosing type using the <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> methods.  \n  \n-   Custom modifiers are supported starting with the .NET Framework version 2.0. They are not supported in earlier versions.","nodes":[{"pos":[0,304],"content":"The <xref:System.Reflection.Emit.MethodBuilder> class is used to fully describe a method in Microsoft intermediate language (MSIL), including the name, attributes, signature, and method body. It is used in conjunction with the <xref:System.Reflection.Emit.TypeBuilder> class to create classes at runtime.","nodes":[{"content":"The <xref:System.Reflection.Emit.MethodBuilder> class is used to fully describe a method in Microsoft intermediate language (MSIL), including the name, attributes, signature, and method body. It is used in conjunction with the <xref:System.Reflection.Emit.TypeBuilder> class to create classes at runtime.","pos":[0,304],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> class is used to fully describe a method in Microsoft intermediate language (MSIL), including the name, attributes, signature, and method body.","pos":[0,191],"source":"The <xref:System.Reflection.Emit.MethodBuilder> class is used to fully describe a method in Microsoft intermediate language (MSIL), including the name, attributes, signature, and method body."},{"content":"It is used in conjunction with the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> class to create classes at runtime.","pos":[192,304],"source":" It is used in conjunction with the <xref:System.Reflection.Emit.TypeBuilder> class to create classes at runtime."}]}]},{"pos":[313,355],"content":"Global methods and methods as type members","linkify":"Global methods and methods as type members","nodes":[{"content":"Global methods and methods as type members","pos":[0,42]}]},{"pos":[359,539],"content":"You can use reflection emit to define global methods and to define methods as type members. The APIs that define methods return <xref:System.Reflection.Emit.MethodBuilder> objects.","nodes":[{"content":"You can use reflection emit to define global methods and to define methods as type members. The APIs that define methods return <xref:System.Reflection.Emit.MethodBuilder> objects.","pos":[0,180],"nodes":[{"content":"You can use reflection emit to define global methods and to define methods as type members.","pos":[0,91]},{"content":"The APIs that define methods return <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> objects.","pos":[92,180],"source":" The APIs that define methods return <xref:System.Reflection.Emit.MethodBuilder> objects."}]}]},{"pos":[549,563],"content":"Global methods","linkify":"Global methods","nodes":[{"content":"Global methods","pos":[0,14]}]},{"pos":[567,747],"content":"A global method is defined by using the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod%2A?displayProperty=fullName&gt;</ph> method, which returns a <bpt id=\"p1\">**</bpt>MethodBuilder<ept id=\"p1\">**</ept> object.","source":"A global method is defined by using the <xref:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod%2A?displayProperty=fullName> method, which returns a **MethodBuilder** object."},{"pos":[754,1142],"content":"Global methods must be static. If a dynamic module contains global methods, the <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A?displayProperty=fullName> method must be called before persisting the dynamic module or the containing dynamic assembly because the common language runtime postpones fixing up the dynamic module until all global functions have been defined.","nodes":[{"content":"Global methods must be static. If a dynamic module contains global methods, the <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A?displayProperty=fullName> method must be called before persisting the dynamic module or the containing dynamic assembly because the common language runtime postpones fixing up the dynamic module until all global functions have been defined.","pos":[0,388],"nodes":[{"content":"Global methods must be static.","pos":[0,30]},{"content":"If a dynamic module contains global methods, the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A?displayProperty=fullName&gt;</ph> method must be called before persisting the dynamic module or the containing dynamic assembly because the common language runtime postpones fixing up the dynamic module until all global functions have been defined.","pos":[31,388],"source":" If a dynamic module contains global methods, the <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A?displayProperty=fullName> method must be called before persisting the dynamic module or the containing dynamic assembly because the common language runtime postpones fixing up the dynamic module until all global functions have been defined."}]}]},{"pos":[1149,1499],"content":"A global native method is defined by using the <xref:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod%2A?displayProperty=fullName> method. Platform invoke (PInvoke) methods must not be declared abstract or virtual. The runtime sets the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute for a platform invoke method.","nodes":[{"content":"A global native method is defined by using the <xref:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod%2A?displayProperty=fullName> method. Platform invoke (PInvoke) methods must not be declared abstract or virtual. The runtime sets the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute for a platform invoke method.","pos":[0,350],"nodes":[{"content":"A global native method is defined by using the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,146],"source":"A global native method is defined by using the <xref:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod%2A?displayProperty=fullName> method."},{"content":"Platform invoke (PInvoke) methods must not be declared abstract or virtual.","pos":[147,222]},{"content":"The runtime sets the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph> attribute for a platform invoke method.","pos":[223,350],"source":" The runtime sets the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute for a platform invoke method."}]}]},{"pos":[1509,1536],"content":"Methods as members of types","linkify":"Methods as members of types","nodes":[{"content":"Methods as members of types","pos":[0,27]}]},{"pos":[1540,1748],"content":"A method is defined as a type member by using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method, which returns a <xref:System.Reflection.Emit.MethodBuilder> object.","nodes":[{"content":"A method is defined as a type member by using the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName&gt;</ph> method, which returns a <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> object.","pos":[0,208],"source":"A method is defined as a type member by using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method, which returns a <xref:System.Reflection.Emit.MethodBuilder> object."}]},{"pos":[1755,2194],"content":"The <xref:System.Reflection.Emit.MethodBuilder.DefineParameter%2A> method is used to set the name and parameter attributes of a parameter, or of the return value. The<xref:System.Reflection.Emit.ParameterBuilder> object returned by this method represents a parameter or the return value. The <xref:System.Reflection.Emit.ParameterBuilder> object can be used to set the marshaling, to set the constant value, and to apply custom attributes.","nodes":[{"content":"The <xref:System.Reflection.Emit.MethodBuilder.DefineParameter%2A> method is used to set the name and parameter attributes of a parameter, or of the return value. The<xref:System.Reflection.Emit.ParameterBuilder> object returned by this method represents a parameter or the return value. The <xref:System.Reflection.Emit.ParameterBuilder> object can be used to set the marshaling, to set the constant value, and to apply custom attributes.","pos":[0,439],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineParameter%2A&gt;</ph> method is used to set the name and parameter attributes of a parameter, or of the return value.","pos":[0,162],"source":"The <xref:System.Reflection.Emit.MethodBuilder.DefineParameter%2A> method is used to set the name and parameter attributes of a parameter, or of the return value."},{"content":"The<ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ParameterBuilder&gt;</ph> object returned by this method represents a parameter or the return value.","pos":[163,287],"source":" The<xref:System.Reflection.Emit.ParameterBuilder> object returned by this method represents a parameter or the return value."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ParameterBuilder&gt;</ph> object can be used to set the marshaling, to set the constant value, and to apply custom attributes.","pos":[288,439],"source":" The <xref:System.Reflection.Emit.ParameterBuilder> object can be used to set the marshaling, to set the constant value, and to apply custom attributes."}]}]},{"pos":[2203,2213],"content":"Attributes","linkify":"Attributes","nodes":[{"content":"Attributes","pos":[0,10]}]},{"pos":[2217,2335],"content":"Members of the <xref:System.Reflection.MethodAttributes> enumeration define the precise character of a dynamic method:","nodes":[{"content":"Members of the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes&gt;</ph> enumeration define the precise character of a dynamic method:","pos":[0,118],"source":"Members of the <xref:System.Reflection.MethodAttributes> enumeration define the precise character of a dynamic method:"}]},{"pos":[2345,2461],"content":"Static methods are specified using the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.","nodes":[{"content":"Static methods are specified using the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph> attribute.","pos":[0,116],"source":"Static methods are specified using the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute."}]},{"pos":[2471,2622],"content":"Final methods (methods that cannot be overridden) are specified using the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.","nodes":[{"content":"Final methods (methods that cannot be overridden) are specified using the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph> attribute.","pos":[0,151],"source":"Final methods (methods that cannot be overridden) are specified using the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute."}]},{"pos":[2632,2749],"content":"Virtual methods are specified using the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.","nodes":[{"content":"Virtual methods are specified using the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph> attribute.","pos":[0,117],"source":"Virtual methods are specified using the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute."}]},{"pos":[2759,2877],"content":"Abstract methods are specified using the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.","nodes":[{"content":"Abstract methods are specified using the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph> attribute.","pos":[0,118],"source":"Abstract methods are specified using the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute."}]},{"pos":[2887,3016],"content":"Several attributes determine method visibility. See the description of the <xref:System.Reflection.MethodAttributes> enumeration.","nodes":[{"content":"Several attributes determine method visibility. See the description of the <xref:System.Reflection.MethodAttributes> enumeration.","pos":[0,129],"nodes":[{"content":"Several attributes determine method visibility.","pos":[0,47]},{"content":"See the description of the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes&gt;</ph> enumeration.","pos":[48,129],"source":" See the description of the <xref:System.Reflection.MethodAttributes> enumeration."}]}]},{"pos":[3026,3160],"content":"Methods that implement overloaded operators must set the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.","nodes":[{"content":"Methods that implement overloaded operators must set the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph> attribute.","pos":[0,134],"source":"Methods that implement overloaded operators must set the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute."}]},{"pos":[3170,3271],"content":"Finalizers must set the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.","nodes":[{"content":"Finalizers must set the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes?displayProperty=fullName&gt;</ph> attribute.","pos":[0,101],"source":"Finalizers must set the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute."}]},{"pos":[3280,3292],"content":"Known Issues","linkify":"Known Issues","nodes":[{"content":"Known Issues","pos":[0,12]}]},{"pos":[3302,4013],"content":"Although <xref:System.Reflection.Emit.MethodBuilder> is derived from <xref:System.Reflection.MethodInfo>, some of the abstract methods defined in the <xref:System.Reflection.MethodInfo> class are not fully implemented in <xref:System.Reflection.Emit.MethodBuilder>. These <xref:System.Reflection.Emit.MethodBuilder> methods throw the <xref:System.NotSupportedException>. For example the <xref:System.Reflection.Emit.MethodBuilder.Invoke%2A?displayProperty=fullName> method is not fully implemented. You can reflect on these methods by retrieving the enclosing type using the <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> methods.","nodes":[{"content":"Although <xref:System.Reflection.Emit.MethodBuilder> is derived from <xref:System.Reflection.MethodInfo>, some of the abstract methods defined in the <xref:System.Reflection.MethodInfo> class are not fully implemented in <xref:System.Reflection.Emit.MethodBuilder>. These <xref:System.Reflection.Emit.MethodBuilder> methods throw the <xref:System.NotSupportedException>. For example the <xref:System.Reflection.Emit.MethodBuilder.Invoke%2A?displayProperty=fullName> method is not fully implemented. You can reflect on these methods by retrieving the enclosing type using the <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> methods.","pos":[0,711],"nodes":[{"content":"Although <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> is derived from <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph>, some of the abstract methods defined in the <ph id=\"ph3\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> class are not fully implemented in <ph id=\"ph4\">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph>.","pos":[0,265],"source":"Although <xref:System.Reflection.Emit.MethodBuilder> is derived from <xref:System.Reflection.MethodInfo>, some of the abstract methods defined in the <xref:System.Reflection.MethodInfo> class are not fully implemented in <xref:System.Reflection.Emit.MethodBuilder>."},{"content":"These <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> methods throw the <ph id=\"ph2\">&lt;xref:System.NotSupportedException&gt;</ph>.","pos":[266,370],"source":" These <xref:System.Reflection.Emit.MethodBuilder> methods throw the <xref:System.NotSupportedException>."},{"content":"For example the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.Invoke%2A?displayProperty=fullName&gt;</ph> method is not fully implemented.","pos":[371,498],"source":" For example the <xref:System.Reflection.Emit.MethodBuilder.Invoke%2A?displayProperty=fullName> method is not fully implemented."},{"content":"You can reflect on these methods by retrieving the enclosing type using the <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> methods.","pos":[499,711],"source":" You can reflect on these methods by retrieving the enclosing type using the <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> methods."}]}]},{"pos":[4023,4143],"content":"Custom modifiers are supported starting with the .NET Framework version 2.0. They are not supported in earlier versions.","nodes":[{"content":"Custom modifiers are supported starting with the .NET Framework version 2.0. They are not supported in earlier versions.","pos":[0,120],"nodes":[{"content":"Custom modifiers are supported starting with the .NET Framework version 2.0.","pos":[0,76]},{"content":"They are not supported in earlier versions.","pos":[77,120]}]}]}],"pos":[4895,9079],"yaml":true,"extradata":"MT"},{"content":"Adds declarative security to this method.","nodes":[{"pos":[0,41],"content":"Adds declarative security to this method.","nodes":[{"content":"Adds declarative security to this method.","pos":[0,41]}]}],"pos":[19975,20017],"yaml":true},{"content":"<xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A> can be called several times, with each call specifying a security action (such as `Demand`, `Assert`, and `Deny`) and a set of permissions that the action applies to.  \n  \n> [!NOTE]\n>  In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a method by using the <xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A> method are stored in the old XML metadata format. See Emitting Declarative Security Attributes.","nodes":[{"pos":[0,236],"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A&gt;</ph> can be called several times, with each call specifying a security action (such as <ph id=\"ph2\">`Demand`</ph>, <ph id=\"ph3\">`Assert`</ph>, and <ph id=\"ph4\">`Deny`</ph>) and a set of permissions that the action applies to.","source":"<xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A> can be called several times, with each call specifying a security action (such as `Demand`, `Assert`, and `Deny`) and a set of permissions that the action applies to."},{"pos":[244,539],"content":"[!NOTE]\n In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a method by using the <xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A> method are stored in the old XML metadata format. See Emitting Declarative Security Attributes.","leadings":["","> "],"nodes":[{"content":" In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a method by using the <xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A> method are stored in the old XML metadata format. See Emitting Declarative Security Attributes.","pos":[8,293],"nodes":[{"content":"In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a method by using the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A&gt;</ph> method are stored in the old XML metadata format.","pos":[1,239],"source":" In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a method by using the <xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A> method are stored in the old XML metadata format."},{"content":"See Emitting Declarative Security Attributes.","pos":[240,285]}]}]}],"pos":[20028,20573],"yaml":true,"extradata":"MT"},{"content":"The security action to be taken (Demand, Assert, and so on).","nodes":[{"pos":[0,60],"content":"The security action to be taken (Demand, Assert, and so on).","nodes":[{"content":"The security action to be taken (Demand, Assert, and so on).","pos":[0,60]}]}],"pos":[21659,21720],"yaml":true},{"content":"The set of permissions the action applies to.","nodes":[{"pos":[0,45],"content":"The set of permissions the action applies to.","nodes":[{"content":"The set of permissions the action applies to.","pos":[0,45]}]}],"pos":[21796,21842],"yaml":true},{"content":"The <code>action</code> is invalid (`RequestMinimum`, `RequestOptional`, and `RequestRefuse` are invalid).","nodes":[{"pos":[0,106],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid (<ph id=\"ph2\">`RequestMinimum`</ph>, <ph id=\"ph3\">`RequestOptional`</ph>, and <ph id=\"ph4\">`RequestRefuse`</ph> are invalid).","source":"The <code>action</code> is invalid (`RequestMinimum`, `RequestOptional`, and `RequestRefuse` are invalid)."}],"pos":[22043,22150],"yaml":true},{"content":"The containing type has been created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n The permission set <code>pset</code> contains an action that was added earlier by <xref href=\"System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)\"></xref>.  \n  \n -or-  \n  \n For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,110],"content":"The containing type has been created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The containing type has been created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."},{"pos":[117,121],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[128,365],"content":"The permission set <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pset</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains an action that was added earlier by <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)\"&gt;&lt;/xref&gt;</ph>.","source":"The permission set <code>pset</code> contains an action that was added earlier by <xref href=\"System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)\"></xref>."},{"pos":[372,376],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[383,617],"content":"For the current method, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","source":"For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`."}],"pos":[22260,22896],"yaml":true},{"content":"<code>pset</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;pset&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>pset</code> is `null`."}],"pos":[22998,23027],"yaml":true},{"content":"Retrieves the attributes for this method.","nodes":[{"pos":[0,41],"content":"Retrieves the attributes for this method.","nodes":[{"content":"Retrieves the attributes for this method.","pos":[0,41]}]}],"pos":[24065,24107],"yaml":true},{"content":"Read-only. Retrieves the `MethodAttributes` for this method.","nodes":[{"pos":[0,60],"content":"Read-only. Retrieves the `MethodAttributes` for this method.","nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"Retrieves the <ph id=\"ph1\">`MethodAttributes`</ph> for this method.","pos":[11,60],"source":" Retrieves the `MethodAttributes` for this method."}]}],"pos":[24279,24340],"yaml":true},{"content":"Returns the calling convention of the method.","nodes":[{"pos":[0,45],"content":"Returns the calling convention of the method.","nodes":[{"content":"Returns the calling convention of the method.","pos":[0,45]}]}],"pos":[25634,25680],"yaml":true},{"content":"Read-only. The calling convention of the method.","nodes":[{"pos":[0,48],"content":"Read-only. The calling convention of the method.","nodes":[{"content":"Read-only. The calling convention of the method.","pos":[0,48],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"The calling convention of the method.","pos":[11,48]}]}]}],"pos":[25863,25912],"yaml":true},{"content":"Not supported for this type.","nodes":[{"pos":[0,28],"content":"Not supported for this type.","nodes":[{"content":"Not supported for this type.","pos":[0,28]}]}],"pos":[27221,27250],"yaml":true},{"content":"A <xref:System.Reflection.Emit.MethodBuilder> always represents a generic method definition, and thus cannot be invoked.  \n  \n For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A?displayProperty=fullName>. For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>.","nodes":[{"pos":[0,120],"content":"A <xref:System.Reflection.Emit.MethodBuilder> always represents a generic method definition, and thus cannot be invoked.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> always represents a generic method definition, and thus cannot be invoked.","pos":[0,120],"source":"A <xref:System.Reflection.Emit.MethodBuilder> always represents a generic method definition, and thus cannot be invoked."}]},{"pos":[127,427],"content":"For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A?displayProperty=fullName>. For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>.","nodes":[{"content":"For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A?displayProperty=fullName>. For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>.","pos":[0,300],"nodes":[{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A?displayProperty=fullName&gt;</ph>.","pos":[0,200],"source":"For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A?displayProperty=fullName>."},{"content":"For information on generic types, see <ph id=\"ph1\">&lt;xref:System.Type.IsGenericType%2A?displayProperty=fullName&gt;</ph>.","pos":[201,300],"source":" For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>."}]}]}],"pos":[27261,27693],"yaml":true,"extradata":"MT"},{"content":"Not supported.","nodes":[{"pos":[0,14],"content":"Not supported.","nodes":[{"content":"Not supported.","pos":[0,14]}]}],"pos":[27830,27845],"yaml":true},{"content":"The invoked method is not supported in the base class.","nodes":[{"pos":[0,54],"content":"The invoked method is not supported in the base class.","nodes":[{"content":"The invoked method is not supported in the base class.","pos":[0,54]}]}],"pos":[28037,28092],"yaml":true},{"content":"Creates the body of the method using a supplied byte array of Microsoft intermediate language (MSIL) instructions.","nodes":[{"pos":[0,114],"content":"Creates the body of the method using a supplied byte array of Microsoft intermediate language (MSIL) instructions.","nodes":[{"content":"Creates the body of the method using a supplied byte array of Microsoft intermediate language (MSIL) instructions.","pos":[0,114]}]}],"pos":[29362,29477],"yaml":true},{"content":"This method creates the method's body from `il`, an array containing MSIL instructions as opcodes. The number of bytes of valid MSIL is given by count.  \n  \n> [!NOTE]\n>  This is currently not fully supported. The user cannot supply the location of token fix ups and exception handlers.","nodes":[{"pos":[0,151],"content":"This method creates the method's body from `il`, an array containing MSIL instructions as opcodes. The number of bytes of valid MSIL is given by count.","nodes":[{"content":"This method creates the method's body from <ph id=\"ph1\">`il`</ph>, an array containing MSIL instructions as opcodes.","pos":[0,98],"source":"This method creates the method's body from `il`, an array containing MSIL instructions as opcodes."},{"content":"The number of bytes of valid MSIL is given by count.","pos":[99,151]}]},{"pos":[159,285],"content":"[!NOTE]\n This is currently not fully supported. The user cannot supply the location of token fix ups and exception handlers.","leadings":["","> "],"nodes":[{"content":" This is currently not fully supported. The user cannot supply the location of token fix ups and exception handlers.","pos":[8,124],"nodes":[{"content":"This is currently not fully supported.","pos":[1,39]},{"content":"The user cannot supply the location of token fix ups and exception handlers.","pos":[40,116]}]}]}],"pos":[29488,29779],"yaml":true,"extradata":"MT"},{"content":"An array containing valid MSIL instructions. If this parameter is `null`, the method's body is cleared.","nodes":[{"pos":[0,103],"content":"An array containing valid MSIL instructions. If this parameter is `null`, the method's body is cleared.","nodes":[{"content":"An array containing valid MSIL instructions.","pos":[0,44]},{"content":"If this parameter is <ph id=\"ph1\">`null`</ph>, the method's body is cleared.","pos":[45,103],"source":" If this parameter is `null`, the method's body is cleared."}]}],"pos":[30696,30800],"yaml":true},{"content":"The number of valid bytes in the MSIL array. This value is ignored if MSIL is `null`.","nodes":[{"pos":[0,85],"content":"The number of valid bytes in the MSIL array. This value is ignored if MSIL is `null`.","nodes":[{"content":"The number of valid bytes in the MSIL array.","pos":[0,44]},{"content":"This value is ignored if MSIL is <ph id=\"ph1\">`null`</ph>.","pos":[45,85],"source":" This value is ignored if MSIL is `null`."}]}],"pos":[30860,30946],"yaml":true},{"content":"The <code>count</code> is not within the range of indexes of the supplied MSIL instruction array and <code>il</code> is not `null`.","nodes":[{"pos":[0,131],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not within the range of indexes of the supplied MSIL instruction array and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">il</ph><ept id=\"p2\">&lt;/code&gt;</ept> is not <ph id=\"ph3\">`null`</ph>.","source":"The <code>count</code> is not within the range of indexes of the supplied MSIL instruction array and <code>il</code> is not `null`."}],"pos":[31141,31273],"yaml":true},{"content":"The containing type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n This method was called previously on this `MethodBuilder` with an <code>il</code> argument that was not `null`.  \n  \n -or-  \n  \n For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,116],"content":"The containing type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The containing type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,245],"content":"This method was called previously on this <ph id=\"ph1\">`MethodBuilder`</ph> with an <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">il</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument that was not <ph id=\"ph3\">`null`</ph>.","source":"This method was called previously on this `MethodBuilder` with an <code>il</code> argument that was not `null`."},{"pos":[252,256],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[263,497],"content":"For the current method, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","source":"For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`."}],"pos":[31383,31897],"yaml":true},{"content":"Returns the type that declares this method.","nodes":[{"pos":[0,43],"content":"Returns the type that declares this method.","nodes":[{"content":"Returns the type that declares this method.","pos":[0,43]}]}],"pos":[32953,32997],"yaml":true},{"content":"Read-only. The type that declares this method.","nodes":[{"pos":[0,46],"content":"Read-only. The type that declares this method.","nodes":[{"content":"Read-only. The type that declares this method.","pos":[0,46],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"The type that declares this method.","pos":[11,46]}]}]}],"pos":[33666,33713],"yaml":true},{"content":"Sets the number of generic type parameters for the current method, specifies their names, and returns an array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> objects that can be used to define their constraints.","nodes":[{"pos":[0,239],"content":"Sets the number of generic type parameters for the current method, specifies their names, and returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"&gt;&lt;/xref&gt;</ph> objects that can be used to define their constraints.","source":"Sets the number of generic type parameters for the current method, specifies their names, and returns an array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> objects that can be used to define their constraints."}],"pos":[35125,35365],"yaml":true},{"content":"Calling the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method makes the current method generic. There is no way to undo this change. Calling this method a second time causes an <xref:System.InvalidOperationException>.  \n  \n The type parameters of the generic method can be retrieved later by using the <xref:System.Reflection.Emit.MethodBuilder.GetGenericArguments%2A> method.  \n  \n By convention, a type parameter name is a single uppercase letter.  \n  \n For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=fullName>. For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>.","nodes":[{"pos":[0,245],"content":"Calling the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method makes the current method generic. There is no way to undo this change. Calling this method a second time causes an <xref:System.InvalidOperationException>.","nodes":[{"content":"Calling the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method makes the current method generic. There is no way to undo this change. Calling this method a second time causes an <xref:System.InvalidOperationException>.","pos":[0,245],"nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph> method makes the current method generic.","pos":[0,123],"source":"Calling the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method makes the current method generic."},{"content":"There is no way to undo this change.","pos":[124,160]},{"content":"Calling this method a second time causes an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[161,245],"source":" Calling this method a second time causes an <xref:System.InvalidOperationException>."}]}]},{"pos":[252,404],"content":"The type parameters of the generic method can be retrieved later by using the <xref:System.Reflection.Emit.MethodBuilder.GetGenericArguments%2A> method.","nodes":[{"content":"The type parameters of the generic method can be retrieved later by using the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.GetGenericArguments%2A&gt;</ph> method.","pos":[0,152],"source":"The type parameters of the generic method can be retrieved later by using the <xref:System.Reflection.Emit.MethodBuilder.GetGenericArguments%2A> method."}]},{"pos":[411,477],"content":"By convention, a type parameter name is a single uppercase letter.","nodes":[{"content":"By convention, a type parameter name is a single uppercase letter.","pos":[0,66]}]},{"pos":[484,785],"content":"For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=fullName>. For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>.","nodes":[{"content":"For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=fullName>. For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>.","pos":[0,301],"nodes":[{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=fullName&gt;</ph>.","pos":[0,201],"source":"For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=fullName>."},{"content":"For information on generic types, see <ph id=\"ph1\">&lt;xref:System.Type.IsGenericType%2A?displayProperty=fullName&gt;</ph>.","pos":[202,301],"source":" For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>."}]}]}],"pos":[35376,36170],"yaml":true,"extradata":"MT"},{"content":"An array of strings that represent the names of the generic type parameters.","nodes":[{"pos":[0,76],"content":"An array of strings that represent the names of the generic type parameters.","nodes":[{"content":"An array of strings that represent the names of the generic type parameters.","pos":[0,76]}]}],"pos":[37557,37634],"yaml":true},{"content":"An array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> objects representing the type parameters of the generic method.","nodes":[{"pos":[0,147],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"&gt;&lt;/xref&gt;</ph> objects representing the type parameters of the generic method.","source":"An array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> objects representing the type parameters of the generic method."}],"pos":[37730,37878],"yaml":true},{"content":"Generic type parameters have already been defined for this method.  \n  \n -or-  \n  \n The method has been completed already.  \n  \n -or-  \n  \n The <xref href=\"System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)\"></xref> method has been called for the current method.","nodes":[{"pos":[0,66],"content":"Generic type parameters have already been defined for this method.","nodes":[{"content":"Generic type parameters have already been defined for this method.","pos":[0,66]}]},{"pos":[73,77],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[84,122],"content":"The method has been completed already.","nodes":[{"content":"The method has been completed already.","pos":[0,38]}]},{"pos":[129,133],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[140,311],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)\"&gt;&lt;/xref&gt;</ph> method has been called for the current method.","source":"The <xref href=\"System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)\"></xref> method has been called for the current method."}],"pos":[38076,38400],"yaml":true},{"content":"<code>names</code> is `null`.  \n  \n -or-  \n  \n An element of <code>names</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;names&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>names</code> is `null`."},{"pos":[36,40],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[47,90],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">names</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"An element of <code>names</code> is `null`."}],"pos":[38502,38599],"yaml":true},{"content":"<code>names</code> is an empty array.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;names&lt;/code&gt;</ph> is an empty array.","source":"<code>names</code> is an empty array."}],"pos":[38693,38731],"yaml":true},{"content":"Sets the parameter attributes and the name of a parameter of this method, or of the return value of this method. Returns a ParameterBuilder that can be used to apply custom attributes.","nodes":[{"pos":[0,184],"content":"Sets the parameter attributes and the name of a parameter of this method, or of the return value of this method. Returns a ParameterBuilder that can be used to apply custom attributes.","nodes":[{"content":"Sets the parameter attributes and the name of a parameter of this method, or of the return value of this method. Returns a ParameterBuilder that can be used to apply custom attributes.","pos":[0,184],"nodes":[{"content":"Sets the parameter attributes and the name of a parameter of this method, or of the return value of this method.","pos":[0,112]},{"content":"Returns a ParameterBuilder that can be used to apply custom attributes.","pos":[113,184]}]}]}],"pos":[40239,40424],"yaml":true},{"content":"The <xref:System.Reflection.Emit.ParameterBuilder> object returned by this method can be used to set the default value for a parameter or to apply custom attributes.  \n  \n Parameter numbering begins with 1, so `position` is 1 for the first parameter. If `position` is zero, this method affects the return value.  \n  \n> [!NOTE]\n>  In the .NET Framework versions 1.0 and 1.1, an exception is thrown if `position` is zero, so this method cannot be used to modify attributes of the return value in those versions.","nodes":[{"pos":[0,165],"content":"The <xref:System.Reflection.Emit.ParameterBuilder> object returned by this method can be used to set the default value for a parameter or to apply custom attributes.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ParameterBuilder&gt;</ph> object returned by this method can be used to set the default value for a parameter or to apply custom attributes.","pos":[0,165],"source":"The <xref:System.Reflection.Emit.ParameterBuilder> object returned by this method can be used to set the default value for a parameter or to apply custom attributes."}]},{"pos":[172,311],"content":"Parameter numbering begins with 1, so `position` is 1 for the first parameter. If `position` is zero, this method affects the return value.","nodes":[{"content":"Parameter numbering begins with 1, so <ph id=\"ph1\">`position`</ph> is 1 for the first parameter.","pos":[0,78],"source":"Parameter numbering begins with 1, so `position` is 1 for the first parameter."},{"content":"If <ph id=\"ph1\">`position`</ph> is zero, this method affects the return value.","pos":[79,139],"source":" If `position` is zero, this method affects the return value."}]},{"pos":[319,509],"content":"[!NOTE]\n In the .NET Framework versions 1.0 and 1.1, an exception is thrown if `position` is zero, so this method cannot be used to modify attributes of the return value in those versions.","leadings":["","> "],"nodes":[{"content":"In the .NET Framework versions 1.0 and 1.1, an exception is thrown if <ph id=\"ph1\">`position`</ph> is zero, so this method cannot be used to modify attributes of the return value in those versions.","pos":[9,188],"source":" In the .NET Framework versions 1.0 and 1.1, an exception is thrown if `position` is zero, so this method cannot be used to modify attributes of the return value in those versions."}]}],"pos":[40435,40952],"yaml":true,"extradata":"MT"},{"content":"The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter; the number 0 represents the return value of the method.","nodes":[{"pos":[0,184],"content":"The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter; the number 0 represents the return value of the method.","nodes":[{"content":"The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter; the number 0 represents the return value of the method.","pos":[0,184],"nodes":[{"content":"The position of the parameter in the parameter list.","pos":[0,52]},{"content":"Parameters are indexed beginning with the number 1 for the first parameter; the number 0 represents the return value of the method.","pos":[53,184]}]}]}],"pos":[41204,41389],"yaml":true},{"content":"The parameter attributes of the parameter.","nodes":[{"pos":[0,42],"content":"The parameter attributes of the parameter.","nodes":[{"content":"The parameter attributes of the parameter.","pos":[0,42]}]}],"pos":[41479,41522],"yaml":true},{"content":"The name of the parameter. The name can be the null string.","nodes":[{"pos":[0,59],"content":"The name of the parameter. The name can be the null string.","nodes":[{"content":"The name of the parameter. The name can be the null string.","pos":[0,59],"nodes":[{"content":"The name of the parameter.","pos":[0,26]},{"content":"The name can be the null string.","pos":[27,59]}]}]}],"pos":[41590,41650],"yaml":true},{"content":"Returns a `ParameterBuilder` object that represents a parameter of this method or the return value of this method.","nodes":[{"pos":[0,114],"content":"Returns a <ph id=\"ph1\">`ParameterBuilder`</ph> object that represents a parameter of this method or the return value of this method.","source":"Returns a `ParameterBuilder` object that represents a parameter of this method or the return value of this method."}],"pos":[41733,41848],"yaml":true},{"content":"The method has no parameters.  \n  \n -or-  \n  \n <code>position</code> is less than zero.  \n  \n -or-  \n  \n <code>position</code> is greater than the number of the method's parameters.","nodes":[{"pos":[0,29],"content":"The method has no parameters.","nodes":[{"content":"The method has no parameters.","pos":[0,29]}]},{"pos":[36,40],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[47,87],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is less than zero.","source":"<code>position</code> is less than zero."},{"pos":[94,98],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[105,181],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> is greater than the number of the method's parameters.","source":"<code>position</code> is greater than the number of the method's parameters."}],"pos":[42042,42234],"yaml":true},{"content":"The containing type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,116],"content":"The containing type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The containing type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,368],"content":"For the current method, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","source":"For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`."}],"pos":[42344,42725],"yaml":true},{"content":"Determines whether the given object is equal to this instance.","nodes":[{"pos":[0,62],"content":"Determines whether the given object is equal to this instance.","nodes":[{"content":"Determines whether the given object is equal to this instance.","pos":[0,62]}]}],"pos":[43942,44005],"yaml":true},{"content":"Equality is determined by having the same name, attributes, and signature.","nodes":[{"pos":[0,74],"content":"Equality is determined by having the same name, attributes, and signature.","nodes":[{"content":"Equality is determined by having the same name, attributes, and signature.","pos":[0,74]}]}],"pos":[44016,44091],"yaml":true,"extradata":"MT"},{"content":"The object to compare with this `MethodBuilder` instance.","nodes":[{"pos":[0,57],"content":"The object to compare with this <ph id=\"ph1\">`MethodBuilder`</ph> instance.","source":"The object to compare with this `MethodBuilder` instance."}],"pos":[44231,44289],"yaml":true},{"content":"`true` if <code>obj</code> is an instance of `MethodBuilder` and is equal to this object; otherwise, `false`.","nodes":[{"pos":[0,109],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> is an instance of <ph id=\"ph3\">`MethodBuilder`</ph> and is equal to this object; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>obj</code> is an instance of `MethodBuilder` and is equal to this object; otherwise, `false`."}],"pos":[44347,44459],"yaml":true},{"content":"Return the base implementation for a method.","nodes":[{"pos":[0,44],"content":"Return the base implementation for a method.","nodes":[{"content":"Return the base implementation for a method.","pos":[0,44]}]}],"pos":[45713,45758],"yaml":true},{"content":"This always returns the current `MethodBuilder` object.","nodes":[{"pos":[0,55],"content":"This always returns the current <ph id=\"ph1\">`MethodBuilder`</ph> object.","source":"This always returns the current `MethodBuilder` object."}],"pos":[45769,45825],"yaml":true,"extradata":"MT"},{"content":"The base implementation of this method.","nodes":[{"pos":[0,39],"content":"The base implementation of this method.","nodes":[{"content":"The base implementation of this method.","pos":[0,39]}]}],"pos":[46006,46046],"yaml":true},{"content":"Returns the custom attributes identified by the given type.","nodes":[{"pos":[0,59],"content":"Returns the custom attributes identified by the given type.","nodes":[{"content":"Returns the custom attributes identified by the given type.","pos":[0,59]}]}],"pos":[47382,47442],"yaml":true},{"content":"The custom attribute type.","nodes":[{"pos":[0,26],"content":"The custom attribute type.","nodes":[{"content":"The custom attribute type.","pos":[0,26]}]}],"pos":[47629,47656],"yaml":true},{"content":"Specifies whether to search this member's inheritance chain to find the custom attributes.","nodes":[{"pos":[0,90],"content":"Specifies whether to search this member's inheritance chain to find the custom attributes.","nodes":[{"content":"Specifies whether to search this member's inheritance chain to find the custom attributes.","pos":[0,90]}]}],"pos":[47720,47811],"yaml":true},{"content":"Returns an array of objects representing the attributes of this method that are of type <code>attributeType</code>.","nodes":[{"pos":[0,115],"content":"Returns an array of objects representing the attributes of this method that are of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">attributeType</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"Returns an array of objects representing the attributes of this method that are of type <code>attributeType</code>."}],"pos":[47870,47986],"yaml":true},{"content":"This method is not currently supported. Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call <xref href=\"System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\"></xref> on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>.","nodes":[{"pos":[0,430],"content":"This method is not currently supported. Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call <xref href=\"System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\"></xref> on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>.","nodes":[{"content":"This method is not currently supported.","pos":[0,39]},{"content":"Retrieve the method using <ph id=\"ph1\">&lt;xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"&gt;&lt;/xref&gt;</ph> and call <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\"&gt;&lt;/xref&gt;</ph> on the returned <ph id=\"ph3\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph>.","pos":[40,430],"source":" Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call <xref href=\"System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\"></xref> on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>."}]}],"pos":[48172,48603],"yaml":true},{"content":"Returns all the custom attributes defined for this method.","nodes":[{"pos":[0,58],"content":"Returns all the custom attributes defined for this method.","nodes":[{"content":"Returns all the custom attributes defined for this method.","pos":[0,58]}]}],"pos":[49800,49859],"yaml":true},{"content":"Specifies whether to search this member's inheritance chain to find the custom attributes.","nodes":[{"pos":[0,90],"content":"Specifies whether to search this member's inheritance chain to find the custom attributes.","nodes":[{"content":"Specifies whether to search this member's inheritance chain to find the custom attributes.","pos":[0,90]}]}],"pos":[50023,50114],"yaml":true},{"content":"Returns an array of objects representing all the custom attributes of this method.","nodes":[{"pos":[0,82],"content":"Returns an array of objects representing all the custom attributes of this method.","nodes":[{"content":"Returns an array of objects representing all the custom attributes of this method.","pos":[0,82]}]}],"pos":[50173,50256],"yaml":true},{"content":"This method is not currently supported. Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call <xref href=\"System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\"></xref> on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>.","nodes":[{"pos":[0,430],"content":"This method is not currently supported. Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call <xref href=\"System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\"></xref> on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>.","nodes":[{"content":"This method is not currently supported.","pos":[0,39]},{"content":"Retrieve the method using <ph id=\"ph1\">&lt;xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"&gt;&lt;/xref&gt;</ph> and call <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\"&gt;&lt;/xref&gt;</ph> on the returned <ph id=\"ph3\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph>.","pos":[40,430],"source":" Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call <xref href=\"System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\"></xref> on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>."}]}],"pos":[50442,50873],"yaml":true},{"content":"Returns an array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> objects that represent the type parameters of the method, if it is generic.","nodes":[{"pos":[0,167],"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"&gt;&lt;/xref&gt;</ph> objects that represent the type parameters of the method, if it is generic.","source":"Returns an array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> objects that represent the type parameters of the method, if it is generic."}],"pos":[52001,52169],"yaml":true},{"content":"The type parameters of a generic method also are returned by the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method that is used to define them.  \n  \n For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName>. For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>.","nodes":[{"pos":[0,171],"content":"The type parameters of a generic method also are returned by the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method that is used to define them.","nodes":[{"content":"The type parameters of a generic method also are returned by the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph> method that is used to define them.","pos":[0,171],"source":"The type parameters of a generic method also are returned by the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method that is used to define them."}]},{"pos":[178,472],"content":"For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName>. For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>.","nodes":[{"content":"For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName>. For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>.","pos":[0,294],"nodes":[{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName&gt;</ph>.","pos":[0,194],"source":"For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName>."},{"content":"For information on generic types, see <ph id=\"ph1\">&lt;xref:System.Type.IsGenericType%2A?displayProperty=fullName&gt;</ph>.","pos":[195,294],"source":" For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>."}]}]}],"pos":[52180,52657],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> objects representing the type parameters, if the method is generic, or `null` if the method is not generic.","nodes":[{"pos":[0,191],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"&gt;&lt;/xref&gt;</ph> objects representing the type parameters, if the method is generic, or <ph id=\"ph2\">`null`</ph> if the method is not generic.","source":"An array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> objects representing the type parameters, if the method is generic, or `null` if the method is not generic."}],"pos":[52803,52995],"yaml":true},{"content":"Returns this method.","nodes":[{"pos":[0,20],"content":"Returns this method.","nodes":[{"content":"Returns this method.","pos":[0,20]}]}],"pos":[54316,54337],"yaml":true},{"content":"A <xref:System.Reflection.Emit.MethodBuilder> cannot be used to emit a constructed generic method directly. The emitted method is a generic method definition.  \n  \n For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=fullName>. For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>.","nodes":[{"pos":[0,158],"content":"A <xref:System.Reflection.Emit.MethodBuilder> cannot be used to emit a constructed generic method directly. The emitted method is a generic method definition.","nodes":[{"content":"A <xref:System.Reflection.Emit.MethodBuilder> cannot be used to emit a constructed generic method directly. The emitted method is a generic method definition.","pos":[0,158],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> cannot be used to emit a constructed generic method directly.","pos":[0,107],"source":"A <xref:System.Reflection.Emit.MethodBuilder> cannot be used to emit a constructed generic method directly."},{"content":"The emitted method is a generic method definition.","pos":[108,158]}]}]},{"pos":[165,466],"content":"For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=fullName>. For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>.","nodes":[{"content":"For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=fullName>. For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>.","pos":[0,301],"nodes":[{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=fullName&gt;</ph>.","pos":[0,201],"source":"For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=fullName>."},{"content":"For information on generic types, see <ph id=\"ph1\">&lt;xref:System.Type.IsGenericType%2A?displayProperty=fullName&gt;</ph>.","pos":[202,301],"source":" For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>."}]}]}],"pos":[54348,54819],"yaml":true,"extradata":"MT"},{"content":"The current instance of <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref>.","nodes":[{"pos":[0,82],"content":"The current instance of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"The current instance of <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref>."}],"pos":[55009,55092],"yaml":true},{"content":"The current method is not generic. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property returns `false`.","nodes":[{"pos":[0,147],"content":"The current method is not generic. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property returns `false`.","nodes":[{"content":"The current method is not generic.","pos":[0,34]},{"content":"That is, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"&gt;&lt;/xref&gt;</ph> property returns <ph id=\"ph2\">`false`</ph>.","pos":[35,147],"source":" That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property returns `false`."}]}],"pos":[55293,55441],"yaml":true},{"content":"Gets the hash code for this method.","nodes":[{"pos":[0,35],"content":"Gets the hash code for this method.","nodes":[{"content":"Gets the hash code for this method.","pos":[0,35]}]}],"pos":[56585,56621],"yaml":true},{"content":"The hash code for this method.","nodes":[{"pos":[0,30],"content":"The hash code for this method.","nodes":[{"content":"The hash code for this method.","pos":[0,30]}]}],"pos":[56755,56786],"yaml":true},{"content":"Returns an `ILGenerator` for this method with a default Microsoft intermediate language (MSIL) stream size of 64 bytes.","nodes":[{"pos":[0,119],"content":"Returns an <ph id=\"ph1\">`ILGenerator`</ph> for this method with a default Microsoft intermediate language (MSIL) stream size of 64 bytes.","source":"Returns an `ILGenerator` for this method with a default Microsoft intermediate language (MSIL) stream size of 64 bytes."}],"pos":[58027,58147],"yaml":true},{"content":"Returns an `ILGenerator` object for this method.","nodes":[{"pos":[0,48],"content":"Returns an <ph id=\"ph1\">`ILGenerator`</ph> object for this method.","source":"Returns an `ILGenerator` object for this method."}],"pos":[59067,59116],"yaml":true},{"content":"The method should not have a body because of its <xref href=\"System.Reflection.MethodAttributes\"></xref> or <xref href=\"System.Reflection.MethodImplAttributes\"></xref> flags, for example because it has the <xref href=\"System.Reflection.MethodAttributes.PinvokeImpl\"></xref> flag.  \n  \n -or-  \n  \n The method is a generic method, but not a generic method definition. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,279],"content":"The method should not have a body because of its <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodAttributes\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MethodImplAttributes\"&gt;&lt;/xref&gt;</ph> flags, for example because it has the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.MethodAttributes.PinvokeImpl\"&gt;&lt;/xref&gt;</ph> flag.","source":"The method should not have a body because of its <xref href=\"System.Reflection.MethodAttributes\"></xref> or <xref href=\"System.Reflection.MethodImplAttributes\"></xref> flags, for example because it has the <xref href=\"System.Reflection.MethodAttributes.PinvokeImpl\"></xref> flag."},{"pos":[286,290],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[297,585],"content":"The method is a generic method, but not a generic method definition. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.","nodes":[{"content":"The method is a generic method, but not a generic method definition.","pos":[0,68]},{"content":"That is, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","pos":[69,288],"source":" That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`."}]}],"pos":[59305,59907],"yaml":true},{"content":"Returns an `ILGenerator` for this method with the specified Microsoft intermediate language (MSIL) stream size.","nodes":[{"pos":[0,111],"content":"Returns an <ph id=\"ph1\">`ILGenerator`</ph> for this method with the specified Microsoft intermediate language (MSIL) stream size.","source":"Returns an `ILGenerator` for this method with the specified Microsoft intermediate language (MSIL) stream size."}],"pos":[61166,61278],"yaml":true},{"content":"The size of the MSIL stream, in bytes.","nodes":[{"pos":[0,38],"content":"The size of the MSIL stream, in bytes.","nodes":[{"content":"The size of the MSIL stream, in bytes.","pos":[0,38]}]}],"pos":[62184,62223],"yaml":true},{"content":"Returns an `ILGenerator` object for this method.","nodes":[{"pos":[0,48],"content":"Returns an <ph id=\"ph1\">`ILGenerator`</ph> object for this method.","source":"Returns an `ILGenerator` object for this method."}],"pos":[62301,62350],"yaml":true},{"content":"The method should not have a body because of its <xref href=\"System.Reflection.MethodAttributes\"></xref> or <xref href=\"System.Reflection.MethodImplAttributes\"></xref> flags, for example because it has the <xref href=\"System.Reflection.MethodAttributes.PinvokeImpl\"></xref> flag.  \n  \n -or-  \n  \n The method is a generic method, but not a generic method definition. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,279],"content":"The method should not have a body because of its <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodAttributes\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MethodImplAttributes\"&gt;&lt;/xref&gt;</ph> flags, for example because it has the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.MethodAttributes.PinvokeImpl\"&gt;&lt;/xref&gt;</ph> flag.","source":"The method should not have a body because of its <xref href=\"System.Reflection.MethodAttributes\"></xref> or <xref href=\"System.Reflection.MethodImplAttributes\"></xref> flags, for example because it has the <xref href=\"System.Reflection.MethodAttributes.PinvokeImpl\"></xref> flag."},{"pos":[286,290],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[297,585],"content":"The method is a generic method, but not a generic method definition. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.","nodes":[{"content":"The method is a generic method, but not a generic method definition.","pos":[0,68]},{"content":"That is, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","pos":[69,288],"source":" That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`."}]}],"pos":[62539,63141],"yaml":true},{"content":"Returns the implementation flags for the method.","nodes":[{"pos":[0,48],"content":"Returns the implementation flags for the method.","nodes":[{"content":"Returns the implementation flags for the method.","pos":[0,48]}]}],"pos":[64427,64476],"yaml":true},{"content":"Returns the implementation flags for the method.","nodes":[{"pos":[0,48],"content":"Returns the implementation flags for the method.","nodes":[{"content":"Returns the implementation flags for the method.","pos":[0,48]}]}],"pos":[64688,64737],"yaml":true},{"content":"Returns a reference to the module that contains this method.","nodes":[{"pos":[0,60],"content":"Returns a reference to the module that contains this method.","nodes":[{"content":"Returns a reference to the module that contains this method.","pos":[0,60]}]}],"pos":[65874,65935],"yaml":true},{"content":"Returns a reference to the module that contains this method.","nodes":[{"pos":[0,60],"content":"Returns a reference to the module that contains this method.","nodes":[{"content":"Returns a reference to the module that contains this method.","pos":[0,60]}]}],"pos":[66797,66858],"yaml":true},{"content":"Returns the parameters of this method.","nodes":[{"pos":[0,38],"content":"Returns the parameters of this method.","nodes":[{"content":"Returns the parameters of this method.","pos":[0,38]}]}],"pos":[67995,68034],"yaml":true},{"content":"An array of `ParameterInfo` objects that represent the parameters of the method.","nodes":[{"pos":[0,80],"content":"An array of <ph id=\"ph1\">`ParameterInfo`</ph> objects that represent the parameters of the method.","source":"An array of `ParameterInfo` objects that represent the parameters of the method."}],"pos":[69012,69093],"yaml":true},{"content":"This method is not currently supported. Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call `GetParameters` on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>.","nodes":[{"pos":[0,360],"content":"This method is not currently supported. Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call `GetParameters` on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>.","nodes":[{"content":"This method is not currently supported.","pos":[0,39]},{"content":"Retrieve the method using <ph id=\"ph1\">&lt;xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"&gt;&lt;/xref&gt;</ph> and call <ph id=\"ph2\">`GetParameters`</ph> on the returned <ph id=\"ph3\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph>.","pos":[40,360],"source":" Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call `GetParameters` on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>."}]}],"pos":[69273,69634],"yaml":true},{"content":"Returns the `MethodToken` that represents the token for this method.","nodes":[{"pos":[0,68],"content":"Returns the <ph id=\"ph1\">`MethodToken`</ph> that represents the token for this method.","source":"Returns the `MethodToken` that represents the token for this method."}],"pos":[70773,70842],"yaml":true},{"content":"Returns the `MethodToken` of this method.","nodes":[{"pos":[0,41],"content":"Returns the <ph id=\"ph1\">`MethodToken`</ph> of this method.","source":"Returns the `MethodToken` of this method."}],"pos":[71017,71059],"yaml":true},{"content":"Gets or sets a Boolean value that specifies whether the local variables in this method are zero initialized. The default value of this property is `true`.","nodes":[{"pos":[0,154],"content":"Gets or sets a Boolean value that specifies whether the local variables in this method are zero initialized. The default value of this property is `true`.","nodes":[{"content":"Gets or sets a Boolean value that specifies whether the local variables in this method are zero initialized.","pos":[0,108]},{"content":"The default value of this property is <ph id=\"ph1\">`true`</ph>.","pos":[109,154],"source":" The default value of this property is `true`."}]}],"pos":[72173,72328],"yaml":true},{"content":"If this property is set to `true`, the emitted MSIL includes initialization of local variables. If it is set to `false`, local variables are not initialized and the generated code is unverifiable.","nodes":[{"pos":[0,196],"content":"If this property is set to `true`, the emitted MSIL includes initialization of local variables. If it is set to `false`, local variables are not initialized and the generated code is unverifiable.","nodes":[{"content":"If this property is set to <ph id=\"ph1\">`true`</ph>, the emitted MSIL includes initialization of local variables.","pos":[0,95],"source":"If this property is set to `true`, the emitted MSIL includes initialization of local variables."},{"content":"If it is set to <ph id=\"ph1\">`false`</ph>, local variables are not initialized and the generated code is unverifiable.","pos":[96,196],"source":" If it is set to `false`, local variables are not initialized and the generated code is unverifiable."}]}],"pos":[72339,72536],"yaml":true,"extradata":"MT"},{"content":"`true` if the local variables in this method should be zero initialized; otherwise `false`.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">`true`</ph> if the local variables in this method should be zero initialized; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if the local variables in this method should be zero initialized; otherwise `false`."}],"pos":[72654,72748],"yaml":true},{"content":"For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`. (Get or set.)","nodes":[{"pos":[0,248],"content":"For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`. (Get or set.)","nodes":[{"content":"For the current method, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","pos":[0,234],"source":"For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`."},{"content":"(Get or set.)","pos":[235,248]}]}],"pos":[72933,73182],"yaml":true},{"content":"Dynamically invokes the method reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.","nodes":[{"pos":[0,165],"content":"Dynamically invokes the method reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.","nodes":[{"content":"Dynamically invokes the method reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.","pos":[0,165]}]}],"pos":[74849,75015],"yaml":true},{"content":"If the method is static, the `obj` parameter is ignored. For non-static methods, `obj` should be an instance of a class that inherits or declares the method and must be the same type as this class. If the method has no parameters, the value of `parameters` should be `null`. Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters for the method reflected by this instance.  \n  \n> [!NOTE]\n>  Access restrictions are ignored for fully-trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully-trusted.","nodes":[{"pos":[0,456],"content":"If the method is static, the `obj` parameter is ignored. For non-static methods, `obj` should be an instance of a class that inherits or declares the method and must be the same type as this class. If the method has no parameters, the value of `parameters` should be `null`. Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters for the method reflected by this instance.","nodes":[{"content":"If the method is static, the <ph id=\"ph1\">`obj`</ph> parameter is ignored.","pos":[0,56],"source":"If the method is static, the `obj` parameter is ignored."},{"content":"For non-static methods, <ph id=\"ph1\">`obj`</ph> should be an instance of a class that inherits or declares the method and must be the same type as this class.","pos":[57,197],"source":" For non-static methods, `obj` should be an instance of a class that inherits or declares the method and must be the same type as this class."},{"content":"If the method has no parameters, the value of <ph id=\"ph1\">`parameters`</ph> should be <ph id=\"ph2\">`null`</ph>.","pos":[198,274],"source":" If the method has no parameters, the value of `parameters` should be `null`."},{"content":"Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters for the method reflected by this instance.","pos":[275,456]}]},{"pos":[464,674],"content":"[!NOTE]\n Access restrictions are ignored for fully-trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully-trusted.","leadings":["","> "],"nodes":[{"content":" Access restrictions are ignored for fully-trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully-trusted.","pos":[8,208],"nodes":[{"content":"Access restrictions are ignored for fully-trusted code.","pos":[1,56]},{"content":"That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully-trusted.","pos":[57,200]}]}]}],"pos":[75026,75706],"yaml":true,"extradata":"MT"},{"content":"The object on which to invoke the specified method. If the method is static, this parameter is ignored.","nodes":[{"pos":[0,103],"content":"The object on which to invoke the specified method. If the method is static, this parameter is ignored.","nodes":[{"content":"The object on which to invoke the specified method. If the method is static, this parameter is ignored.","pos":[0,103],"nodes":[{"content":"The object on which to invoke the specified method.","pos":[0,51]},{"content":"If the method is static, this parameter is ignored.","pos":[52,103]}]}]}],"pos":[75987,76091],"yaml":true},{"content":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on.","nodes":[{"pos":[0,122],"content":"This must be a bit flag from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> : <ph id=\"ph2\">`InvokeMethod`</ph>, <ph id=\"ph3\">`NonPublic`</ph>, and so on.","source":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on."}],"pos":[76174,76299],"yaml":true},{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If binder is `null`, the default binder is used. For more details, see <xref href=\"System.Reflection.Binder\"></xref>.","nodes":[{"pos":[0,256],"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If binder is `null`, the default binder is used. For more details, see <xref href=\"System.Reflection.Binder\"></xref>.","nodes":[{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection.","pos":[0,138]},{"content":"If binder is <ph id=\"ph1\">`null`</ph>, the default binder is used.","pos":[139,187],"source":" If binder is `null`, the default binder is used."},{"content":"For more details, see <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Binder\"&gt;&lt;/xref&gt;</ph>.","pos":[188,256],"source":" For more details, see <xref href=\"System.Reflection.Binder\"></xref>."}]}],"pos":[76372,76629],"yaml":true},{"content":"An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this should be `null`.","nodes":[{"pos":[0,182],"content":"An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this should be `null`.","nodes":[{"content":"An argument list.","pos":[0,17]},{"content":"This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked.","pos":[18,132]},{"content":"If there are no parameters this should be <ph id=\"ph1\">`null`</ph>.","pos":[133,182],"source":" If there are no parameters this should be `null`."}]}],"pos":[76697,76880],"yaml":true},{"content":"An instance of <xref href=\"System.Globalization.CultureInfo\"></xref> used to govern the coercion of types. If this is null, the <xref href=\"System.Globalization.CultureInfo\"></xref> for the current thread is used. (Note that this is necessary to, for example, convert a <xref href=\"System.String\"></xref> that represents 1000 to a <xref href=\"System.Double\"></xref> value, since 1000 is represented differently by different cultures.)","nodes":[{"pos":[0,434],"content":"An instance of <xref href=\"System.Globalization.CultureInfo\"></xref> used to govern the coercion of types. If this is null, the <xref href=\"System.Globalization.CultureInfo\"></xref> for the current thread is used. (Note that this is necessary to, for example, convert a <xref href=\"System.String\"></xref> that represents 1000 to a <xref href=\"System.Double\"></xref> value, since 1000 is represented differently by different cultures.)","nodes":[{"content":"An instance of <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CultureInfo\"&gt;&lt;/xref&gt;</ph> used to govern the coercion of types.","pos":[0,106],"source":"An instance of <xref href=\"System.Globalization.CultureInfo\"></xref> used to govern the coercion of types."},{"content":"If this is null, the <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CultureInfo\"&gt;&lt;/xref&gt;</ph> for the current thread is used.","pos":[107,213],"source":" If this is null, the <xref href=\"System.Globalization.CultureInfo\"></xref> for the current thread is used."},{"content":"(Note that this is necessary to, for example, convert a <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that represents 1000 to a <ph id=\"ph2\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> value, since 1000 is represented differently by different cultures.)","pos":[214,434],"source":" (Note that this is necessary to, for example, convert a <xref href=\"System.String\"></xref> that represents 1000 to a <xref href=\"System.Double\"></xref> value, since 1000 is represented differently by different cultures.)"}]}],"pos":[76962,77397],"yaml":true},{"content":"Returns an object containing the return value of the invoked method.","nodes":[{"pos":[0,68],"content":"Returns an object containing the return value of the invoked method.","nodes":[{"content":"Returns an object containing the return value of the invoked method.","pos":[0,68]}]}],"pos":[77454,77523],"yaml":true},{"content":"This method is not currently supported. Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call <xref href=\"System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\"></xref> on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>.","nodes":[{"pos":[0,578],"content":"This method is not currently supported. Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call <xref href=\"System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\"></xref> on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>.","nodes":[{"content":"This method is not currently supported.","pos":[0,39]},{"content":"Retrieve the method using <ph id=\"ph1\">&lt;xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"&gt;&lt;/xref&gt;</ph> and call <ph id=\"ph2\">&lt;xref href=\"System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\"&gt;&lt;/xref&gt;</ph> on the returned <ph id=\"ph3\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph>.","pos":[40,578],"source":" Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call <xref href=\"System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\"></xref> on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>."}]}],"pos":[77696,78275],"yaml":true},{"content":"Checks if the specified custom attribute type is defined.","nodes":[{"pos":[0,57],"content":"Checks if the specified custom attribute type is defined.","nodes":[{"content":"Checks if the specified custom attribute type is defined.","pos":[0,57]}]}],"pos":[79466,79524],"yaml":true},{"content":"The custom attribute type.","nodes":[{"pos":[0,26],"content":"The custom attribute type.","nodes":[{"content":"The custom attribute type.","pos":[0,26]}]}],"pos":[79697,79724],"yaml":true},{"content":"Specifies whether to search this member's inheritance chain to find the custom attributes.","nodes":[{"pos":[0,90],"content":"Specifies whether to search this member's inheritance chain to find the custom attributes.","nodes":[{"content":"Specifies whether to search this member's inheritance chain to find the custom attributes.","pos":[0,90]}]}],"pos":[79788,79879],"yaml":true},{"content":"`true` if the specified custom attribute type is defined; otherwise, `false`.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">`true`</ph> if the specified custom attribute type is defined; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the specified custom attribute type is defined; otherwise, `false`."}],"pos":[79937,80017],"yaml":true},{"content":"This method is not currently supported. Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call <xref href=\"System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)\"></xref> on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>.","nodes":[{"pos":[0,432],"content":"This method is not currently supported. Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call <xref href=\"System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)\"></xref> on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>.","nodes":[{"content":"This method is not currently supported.","pos":[0,39]},{"content":"Retrieve the method using <ph id=\"ph1\">&lt;xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"&gt;&lt;/xref&gt;</ph> and call <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)\"&gt;&lt;/xref&gt;</ph> on the returned <ph id=\"ph3\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph>.","pos":[40,432],"source":" Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call <xref href=\"System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)\"></xref> on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>."}]}],"pos":[80193,80626],"yaml":true},{"content":"Gets a value indicating whether the method is a generic method.","nodes":[{"pos":[0,63],"content":"Gets a value indicating whether the method is a generic method.","nodes":[{"content":"Gets a value indicating whether the method is a generic method.","pos":[0,63]}]}],"pos":[81726,81790],"yaml":true},{"content":"A method is generic if it has type parameters. You can make a method generic by calling the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method to add type parameters. This change cannot be reversed.","nodes":[{"pos":[0,225],"content":"A method is generic if it has type parameters. You can make a method generic by calling the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method to add type parameters. This change cannot be reversed.","nodes":[{"content":"A method is generic if it has type parameters. You can make a method generic by calling the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method to add type parameters. This change cannot be reversed.","pos":[0,225],"nodes":[{"content":"A method is generic if it has type parameters.","pos":[0,46]},{"content":"You can make a method generic by calling the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A&gt;</ph> method to add type parameters.","pos":[47,193],"source":" You can make a method generic by calling the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method to add type parameters."},{"content":"This change cannot be reversed.","pos":[194,225]}]}]}],"pos":[81801,82027],"yaml":true,"extradata":"MT"},{"content":"`true` if the method is generic; otherwise, `false`.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">`true`</ph> if the method is generic; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the method is generic; otherwise, `false`."}],"pos":[82728,82783],"yaml":true},{"content":"Gets a value indicating whether the current <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> object represents the definition of a generic method.","nodes":[{"pos":[0,155],"content":"Gets a value indicating whether the current <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder\"&gt;&lt;/xref&gt;</ph> object represents the definition of a generic method.","source":"Gets a value indicating whether the current <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> object represents the definition of a generic method."}],"pos":[84090,84246],"yaml":true},{"content":"A <xref:System.Reflection.Emit.MethodBuilder> can only be used to create generic method definitions; it cannot be used to create a constructed generic method directly. However, a subclass of <xref:System.Reflection.Emit.MethodBuilder> might represent a constructed generic method.","nodes":[{"pos":[0,280],"content":"A <xref:System.Reflection.Emit.MethodBuilder> can only be used to create generic method definitions; it cannot be used to create a constructed generic method directly. However, a subclass of <xref:System.Reflection.Emit.MethodBuilder> might represent a constructed generic method.","nodes":[{"content":"A <xref:System.Reflection.Emit.MethodBuilder> can only be used to create generic method definitions; it cannot be used to create a constructed generic method directly. However, a subclass of <xref:System.Reflection.Emit.MethodBuilder> might represent a constructed generic method.","pos":[0,280],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> can only be used to create generic method definitions; it cannot be used to create a constructed generic method directly.","pos":[0,167],"source":"A <xref:System.Reflection.Emit.MethodBuilder> can only be used to create generic method definitions; it cannot be used to create a constructed generic method directly."},{"content":"However, a subclass of <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> might represent a constructed generic method.","pos":[168,280],"source":" However, a subclass of <xref:System.Reflection.Emit.MethodBuilder> might represent a constructed generic method."}]}]}],"pos":[84257,84538],"yaml":true,"extradata":"MT"},{"content":"`true` if the current <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> object represents the definition of a generic method; otherwise, `false`.","nodes":[{"pos":[0,153],"content":"<ph id=\"ph1\">`true`</ph> if the current <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder\"&gt;&lt;/xref&gt;</ph> object represents the definition of a generic method; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the current <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> object represents the definition of a generic method; otherwise, `false`."}],"pos":[85249,85405],"yaml":true},{"content":"Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases.","nodes":[{"pos":[0,72],"content":"Throws a <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph> in all cases.","source":"Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases."}],"pos":[86653,86726],"yaml":true},{"content":"To determine whether a method in a dynamic assembly is security-critical, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecurityCritical%2A> property on the resulting <xref:System.Reflection.MethodInfo>.","nodes":[{"pos":[0,388],"content":"To determine whether a method in a dynamic assembly is security-critical, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecurityCritical%2A> property on the resulting <xref:System.Reflection.MethodInfo>.","nodes":[{"content":"To determine whether a method in a dynamic assembly is security-critical, complete the type by calling <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName&gt;</ph>, call the <ph id=\"ph2\">&lt;xref:System.Type.GetMethod%2A&gt;</ph> method on the completed type, and get the <ph id=\"ph3\">&lt;xref:System.Reflection.MethodBase.IsSecurityCritical%2A&gt;</ph> property on the resulting <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph>.","pos":[0,388],"source":"To determine whether a method in a dynamic assembly is security-critical, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecurityCritical%2A> property on the resulting <xref:System.Reflection.MethodInfo>."}]}],"pos":[86737,87126],"yaml":true,"extradata":"MT"},{"content":"Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases.","nodes":[{"pos":[0,72],"content":"Throws a <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph> in all cases.","source":"Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases."}],"pos":[87256,87329],"yaml":true},{"content":"In all cases. This property is not supported in dynamic assemblies.","nodes":[{"pos":[0,67],"content":"In all cases. This property is not supported in dynamic assemblies.","nodes":[{"content":"In all cases. This property is not supported in dynamic assemblies.","pos":[0,67],"nodes":[{"content":"In all cases.","pos":[0,13]},{"content":"This property is not supported in dynamic assemblies.","pos":[14,67]}]}]}],"pos":[87514,87582],"yaml":true},{"content":"Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases.","nodes":[{"pos":[0,72],"content":"Throws a <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph> in all cases.","source":"Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases."}],"pos":[88581,88654],"yaml":true},{"content":"To determine whether a method in a dynamic assembly is security-safe-critical, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A> property on the resulting <xref:System.Reflection.MethodInfo>.","nodes":[{"pos":[0,397],"content":"To determine whether a method in a dynamic assembly is security-safe-critical, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A> property on the resulting <xref:System.Reflection.MethodInfo>.","nodes":[{"content":"To determine whether a method in a dynamic assembly is security-safe-critical, complete the type by calling <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName&gt;</ph>, call the <ph id=\"ph2\">&lt;xref:System.Type.GetMethod%2A&gt;</ph> method on the completed type, and get the <ph id=\"ph3\">&lt;xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A&gt;</ph> property on the resulting <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph>.","pos":[0,397],"source":"To determine whether a method in a dynamic assembly is security-safe-critical, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A> property on the resulting <xref:System.Reflection.MethodInfo>."}]}],"pos":[88665,89063],"yaml":true,"extradata":"MT"},{"content":"Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases.","nodes":[{"pos":[0,72],"content":"Throws a <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph> in all cases.","source":"Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases."}],"pos":[89197,89270],"yaml":true},{"content":"In all cases. This property is not supported in dynamic assemblies.","nodes":[{"pos":[0,67],"content":"In all cases. This property is not supported in dynamic assemblies.","nodes":[{"content":"In all cases. This property is not supported in dynamic assemblies.","pos":[0,67],"nodes":[{"content":"In all cases.","pos":[0,13]},{"content":"This property is not supported in dynamic assemblies.","pos":[14,67]}]}]}],"pos":[89459,89527],"yaml":true},{"content":"Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases.","nodes":[{"pos":[0,72],"content":"Throws a <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph> in all cases.","source":"Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases."}],"pos":[90520,90593],"yaml":true},{"content":"To determine whether a method in a dynamic assembly is security-transparent, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> property on the resulting <xref:System.Reflection.MethodInfo>.","nodes":[{"pos":[0,394],"content":"To determine whether a method in a dynamic assembly is security-transparent, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> property on the resulting <xref:System.Reflection.MethodInfo>.","nodes":[{"content":"To determine whether a method in a dynamic assembly is security-transparent, complete the type by calling <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName&gt;</ph>, call the <ph id=\"ph2\">&lt;xref:System.Type.GetMethod%2A&gt;</ph> method on the completed type, and get the <ph id=\"ph3\">&lt;xref:System.Reflection.MethodBase.IsSecurityTransparent%2A&gt;</ph> property on the resulting <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph>.","pos":[0,394],"source":"To determine whether a method in a dynamic assembly is security-transparent, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> property on the resulting <xref:System.Reflection.MethodInfo>."}]}],"pos":[90604,90999],"yaml":true,"extradata":"MT"},{"content":"Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases.","nodes":[{"pos":[0,72],"content":"Throws a <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph> in all cases.","source":"Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases."}],"pos":[91132,91205],"yaml":true},{"content":"In all cases. This property is not supported in dynamic assemblies.","nodes":[{"pos":[0,67],"content":"In all cases. This property is not supported in dynamic assemblies.","nodes":[{"content":"In all cases. This property is not supported in dynamic assemblies.","pos":[0,67],"nodes":[{"content":"In all cases.","pos":[0,13]},{"content":"This property is not supported in dynamic assemblies.","pos":[14,67]}]}]}],"pos":[91393,91461],"yaml":true},{"content":"Returns a generic method constructed from the current generic method definition using the specified generic type arguments.","nodes":[{"pos":[0,123],"content":"Returns a generic method constructed from the current generic method definition using the specified generic type arguments.","nodes":[{"content":"Returns a generic method constructed from the current generic method definition using the specified generic type arguments.","pos":[0,123]}]}],"pos":[92524,92648],"yaml":true},{"content":"When you are emitting dynamic code, you might need to emit a call to a method constructed from the generic method definition represented by a <xref:System.Reflection.Emit.MethodBuilder>, before the enclosing type has been completed. You can use the <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> method to create a <xref:System.Reflection.MethodInfo> for such a constructed method, and use the <xref:System.Reflection.MethodInfo> in the emitted call.","nodes":[{"pos":[0,468],"content":"When you are emitting dynamic code, you might need to emit a call to a method constructed from the generic method definition represented by a <xref:System.Reflection.Emit.MethodBuilder>, before the enclosing type has been completed. You can use the <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> method to create a <xref:System.Reflection.MethodInfo> for such a constructed method, and use the <xref:System.Reflection.MethodInfo> in the emitted call.","nodes":[{"content":"When you are emitting dynamic code, you might need to emit a call to a method constructed from the generic method definition represented by a <xref:System.Reflection.Emit.MethodBuilder>, before the enclosing type has been completed. You can use the <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> method to create a <xref:System.Reflection.MethodInfo> for such a constructed method, and use the <xref:System.Reflection.MethodInfo> in the emitted call.","pos":[0,468],"nodes":[{"content":"When you are emitting dynamic code, you might need to emit a call to a method constructed from the generic method definition represented by a <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph>, before the enclosing type has been completed.","pos":[0,232],"source":"When you are emitting dynamic code, you might need to emit a call to a method constructed from the generic method definition represented by a <xref:System.Reflection.Emit.MethodBuilder>, before the enclosing type has been completed."},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A&gt;</ph> method to create a <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for such a constructed method, and use the <ph id=\"ph3\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> in the emitted call.","pos":[233,468],"source":" You can use the <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> method to create a <xref:System.Reflection.MethodInfo> for such a constructed method, and use the <xref:System.Reflection.MethodInfo> in the emitted call."}]}]}],"pos":[92659,93128],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.Type\"></xref> objects that represent the type arguments for the generic method.","nodes":[{"pos":[0,110],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects that represent the type arguments for the generic method.","source":"An array of <xref href=\"System.Type\"></xref> objects that represent the type arguments for the generic method."}],"pos":[95207,95318],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> representing the generic method constructed from the current generic method definition using the specified generic type arguments.","nodes":[{"pos":[0,182],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> representing the generic method constructed from the current generic method definition using the specified generic type arguments.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> representing the generic method constructed from the current generic method definition using the specified generic type arguments."}],"pos":[95390,95573],"yaml":true},{"content":"Retrieves the internal handle for the method. Use this handle to access the underlying metadata handle.","nodes":[{"pos":[0,103],"content":"Retrieves the internal handle for the method. Use this handle to access the underlying metadata handle.","nodes":[{"content":"Retrieves the internal handle for the method. Use this handle to access the underlying metadata handle.","pos":[0,103],"nodes":[{"content":"Retrieves the internal handle for the method.","pos":[0,45]},{"content":"Use this handle to access the underlying metadata handle.","pos":[46,103]}]}]}],"pos":[96804,96908],"yaml":true},{"content":"Read-only. The internal handle for the method. Use this handle to access the underlying metadata handle.","nodes":[{"pos":[0,104],"content":"Read-only. The internal handle for the method. Use this handle to access the underlying metadata handle.","nodes":[{"content":"Read-only. The internal handle for the method. Use this handle to access the underlying metadata handle.","pos":[0,104],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"The internal handle for the method.","pos":[11,46]},{"content":"Use this handle to access the underlying metadata handle.","pos":[47,104]}]}]}],"pos":[97059,97164],"yaml":true},{"content":"This method is not currently supported. Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call <xref href=\"System.Reflection.MethodBase.MethodHandle\"></xref> on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>.","nodes":[{"pos":[0,407],"content":"This method is not currently supported. Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call <xref href=\"System.Reflection.MethodBase.MethodHandle\"></xref> on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>.","nodes":[{"content":"This method is not currently supported.","pos":[0,39]},{"content":"Retrieve the method using <ph id=\"ph1\">&lt;xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"&gt;&lt;/xref&gt;</ph> and call <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MethodBase.MethodHandle\"&gt;&lt;/xref&gt;</ph> on the returned <ph id=\"ph3\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph>.","pos":[40,407],"source":" Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call <xref href=\"System.Reflection.MethodBase.MethodHandle\"></xref> on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>."}]}],"pos":[97343,97751],"yaml":true},{"content":"Gets the module in which the current method is being defined.","nodes":[{"pos":[0,61],"content":"Gets the module in which the current method is being defined.","nodes":[{"content":"Gets the module in which the current method is being defined.","pos":[0,61]}]}],"pos":[99765,99827],"yaml":true},{"content":"This property is provided as a convenience. It is equivalent to using the <xref:System.Reflection.Emit.MethodBuilder.DeclaringType%2A> property to get the type in which the method is being declared, and then calling the <xref:System.Type.Module%2A> property of the resulting <xref:System.Type> object.  \n  \n This property is also equivalent to calling <xref:System.Reflection.Emit.MethodBuilder.GetModule%2A>.","nodes":[{"pos":[0,301],"content":"This property is provided as a convenience. It is equivalent to using the <xref:System.Reflection.Emit.MethodBuilder.DeclaringType%2A> property to get the type in which the method is being declared, and then calling the <xref:System.Type.Module%2A> property of the resulting <xref:System.Type> object.","nodes":[{"content":"This property is provided as a convenience. It is equivalent to using the <xref:System.Reflection.Emit.MethodBuilder.DeclaringType%2A> property to get the type in which the method is being declared, and then calling the <xref:System.Type.Module%2A> property of the resulting <xref:System.Type> object.","pos":[0,301],"nodes":[{"content":"This property is provided as a convenience.","pos":[0,43]},{"content":"It is equivalent to using the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.DeclaringType%2A&gt;</ph> property to get the type in which the method is being declared, and then calling the <ph id=\"ph2\">&lt;xref:System.Type.Module%2A&gt;</ph> property of the resulting <ph id=\"ph3\">&lt;xref:System.Type&gt;</ph> object.","pos":[44,301],"source":" It is equivalent to using the <xref:System.Reflection.Emit.MethodBuilder.DeclaringType%2A> property to get the type in which the method is being declared, and then calling the <xref:System.Type.Module%2A> property of the resulting <xref:System.Type> object."}]}]},{"pos":[308,409],"content":"This property is also equivalent to calling <xref:System.Reflection.Emit.MethodBuilder.GetModule%2A>.","nodes":[{"content":"This property is also equivalent to calling <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.GetModule%2A&gt;</ph>.","pos":[0,101],"source":"This property is also equivalent to calling <xref:System.Reflection.Emit.MethodBuilder.GetModule%2A>."}]}],"pos":[99838,100252],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Reflection.Module\"></xref> in which the member represented by the current <xref href=\"System.Reflection.MemberInfo\"></xref> is being defined.","nodes":[{"pos":[0,164],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Module\"&gt;&lt;/xref&gt;</ph> in which the member represented by the current <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> is being defined.","source":"The <xref href=\"System.Reflection.Module\"></xref> in which the member represented by the current <xref href=\"System.Reflection.MemberInfo\"></xref> is being defined."}],"pos":[100400,100565],"yaml":true},{"content":"Retrieves the name of this method.","nodes":[{"pos":[0,34],"content":"Retrieves the name of this method.","nodes":[{"content":"Retrieves the name of this method.","pos":[0,34]}]}],"pos":[101673,101708],"yaml":true},{"content":"Read-only. Retrieves a string containing the simple name of this method.","nodes":[{"pos":[0,72],"content":"Read-only. Retrieves a string containing the simple name of this method.","nodes":[{"content":"Read-only. Retrieves a string containing the simple name of this method.","pos":[0,72],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"Retrieves a string containing the simple name of this method.","pos":[11,72]}]}]}],"pos":[101825,101898],"yaml":true},{"content":"Retrieves the class that was used in reflection to obtain this object.","nodes":[{"pos":[0,70],"content":"Retrieves the class that was used in reflection to obtain this object.","nodes":[{"content":"Retrieves the class that was used in reflection to obtain this object.","pos":[0,70]}]}],"pos":[103162,103233],"yaml":true},{"content":"Read-only. The type used to obtain this method.","nodes":[{"pos":[0,47],"content":"Read-only. The type used to obtain this method.","nodes":[{"content":"Read-only. The type used to obtain this method.","pos":[0,47],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"The type used to obtain this method.","pos":[11,47]}]}]}],"pos":[103355,103403],"yaml":true},{"content":"Gets a <xref href=\"System.Reflection.ParameterInfo\"></xref> object that contains information about the return type of the method, such as whether the return type has custom modifiers.","nodes":[{"pos":[0,183],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ParameterInfo\"&gt;&lt;/xref&gt;</ph> object that contains information about the return type of the method, such as whether the return type has custom modifiers.","source":"Gets a <xref href=\"System.Reflection.ParameterInfo\"></xref> object that contains information about the return type of the method, such as whether the return type has custom modifiers."}],"pos":[104584,104768],"yaml":true},{"content":"Compiler designers can use the <xref:System.Reflection.ParameterInfo> object returned by this property to discover whether custom modifiers, such as <xref:Microsoft.VisualC.IsConstModifier>, have been applied to the return type.","nodes":[{"pos":[0,228],"content":"Compiler designers can use the <xref:System.Reflection.ParameterInfo> object returned by this property to discover whether custom modifiers, such as <xref:Microsoft.VisualC.IsConstModifier>, have been applied to the return type.","nodes":[{"content":"Compiler designers can use the <ph id=\"ph1\">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> object returned by this property to discover whether custom modifiers, such as <ph id=\"ph2\">&lt;xref:Microsoft.VisualC.IsConstModifier&gt;</ph>, have been applied to the return type.","pos":[0,228],"source":"Compiler designers can use the <xref:System.Reflection.ParameterInfo> object returned by this property to discover whether custom modifiers, such as <xref:Microsoft.VisualC.IsConstModifier>, have been applied to the return type."}]}],"pos":[104779,105008],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Reflection.ParameterInfo\"></xref> object that contains information about the return type.","nodes":[{"pos":[0,110],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ParameterInfo\"&gt;&lt;/xref&gt;</ph> object that contains information about the return type.","source":"A <xref href=\"System.Reflection.ParameterInfo\"></xref> object that contains information about the return type."}],"pos":[105179,105290],"yaml":true},{"content":"The declaring type has not been created.","nodes":[{"pos":[0,40],"content":"The declaring type has not been created.","nodes":[{"content":"The declaring type has not been created.","pos":[0,40]}]}],"pos":[105480,105521],"yaml":true},{"content":"Gets the return type of the method represented by this <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref>.","nodes":[{"pos":[0,113],"content":"Gets the return type of the method represented by this <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the return type of the method represented by this <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref>."}],"pos":[106655,106769],"yaml":true},{"content":"> [!NOTE]\n>  Starting with the .NET Framework 2.0 and the .NET Compact Framework 2.0, this member is inherited from the base class, <xref:System.Reflection.MethodInfo>. See <xref:System.Reflection.MethodInfo.ReturnType%2A?displayProperty=fullName>.","nodes":[{"pos":[2,248],"content":"[!NOTE]\n Starting with the .NET Framework 2.0 and the .NET Compact Framework 2.0, this member is inherited from the base class, <xref:System.Reflection.MethodInfo>. See <xref:System.Reflection.MethodInfo.ReturnType%2A?displayProperty=fullName>.","leadings":["","> "],"nodes":[{"content":" Starting with the .NET Framework 2.0 and the .NET Compact Framework 2.0, this member is inherited from the base class, <xref:System.Reflection.MethodInfo>. See <xref:System.Reflection.MethodInfo.ReturnType%2A?displayProperty=fullName>.","pos":[8,244],"nodes":[{"content":"Starting with the .NET Framework 2.0 and the .NET Compact Framework 2.0, this member is inherited from the base class, <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph>.","pos":[1,156],"source":" Starting with the .NET Framework 2.0 and the .NET Compact Framework 2.0, this member is inherited from the base class, <xref:System.Reflection.MethodInfo>."},{"content":"See <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo.ReturnType%2A?displayProperty=fullName&gt;</ph>.","pos":[157,236],"source":" See <xref:System.Reflection.MethodInfo.ReturnType%2A?displayProperty=fullName>."}]}]}],"pos":[106780,107041],"yaml":true,"extradata":"MT"},{"content":"The return type of the method.","nodes":[{"pos":[0,30],"content":"The return type of the method.","nodes":[{"content":"The return type of the method.","pos":[0,30]}]}],"pos":[107160,107191],"yaml":true},{"content":"Returns the custom attributes of the method's return type.","nodes":[{"pos":[0,58],"content":"Returns the custom attributes of the method's return type.","nodes":[{"content":"Returns the custom attributes of the method's return type.","pos":[0,58]}]}],"pos":[108499,108558],"yaml":true},{"content":"This method always returns `null`. Get the <xref:System.Reflection.MethodInfo> after the containing <xref:System.Type> has been created and invoked <xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A> on the <xref:System.Reflection.MethodInfo>.","nodes":[{"pos":[0,257],"content":"This method always returns `null`. Get the <xref:System.Reflection.MethodInfo> after the containing <xref:System.Type> has been created and invoked <xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A> on the <xref:System.Reflection.MethodInfo>.","nodes":[{"content":"This method always returns <ph id=\"ph1\">`null`</ph>.","pos":[0,34],"source":"This method always returns `null`."},{"content":"Get the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> after the containing <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> has been created and invoked <ph id=\"ph3\">&lt;xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A&gt;</ph> on the <ph id=\"ph4\">&lt;xref:System.Reflection.MethodInfo&gt;</ph>.","pos":[35,257],"source":" Get the <xref:System.Reflection.MethodInfo> after the containing <xref:System.Type> has been created and invoked <xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A> on the <xref:System.Reflection.MethodInfo>."}]}],"pos":[108569,108827],"yaml":true,"extradata":"MT"},{"content":"Read-only. The custom attributes of the method's return type.","nodes":[{"pos":[0,61],"content":"Read-only. The custom attributes of the method's return type.","nodes":[{"content":"Read-only. The custom attributes of the method's return type.","pos":[0,61],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"The custom attributes of the method's return type.","pos":[11,61]}]}]}],"pos":[109031,109093],"yaml":true},{"content":"Sets a custom attribute using a specified custom attribute blob.","nodes":[{"pos":[0,64],"content":"Sets a custom attribute using a specified custom attribute blob.","nodes":[{"content":"Sets a custom attribute using a specified custom attribute blob.","pos":[0,64]}]}],"pos":[110525,110590],"yaml":true},{"content":"For details on how to format `binaryAttribute`, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  \n  \n The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method can interact with the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method when the two methods are used in combination. See the Remarks section of the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method for details.","nodes":[{"pos":[0,466],"content":"For details on how to format `binaryAttribute`, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"content":"For details on how to format <ph id=\"ph1\">`binaryAttribute`</ph>, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[0,169],"source":"For details on how to format `binaryAttribute`, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\"."},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[170,466],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]},{"pos":[473,815],"content":"The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method can interact with the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method when the two methods are used in combination. See the Remarks section of the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method for details.","nodes":[{"content":"The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method can interact with the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method when the two methods are used in combination. See the Remarks section of the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method for details.","pos":[0,342],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A&gt;</ph> method can interact with the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph> method when the two methods are used in combination.","pos":[0,221],"source":"The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method can interact with the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method when the two methods are used in combination."},{"content":"See the Remarks section of the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph> method for details.","pos":[222,342],"source":" See the Remarks section of the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method for details."}]}]}],"pos":[110601,111423],"yaml":true,"extradata":"MT"},{"content":"The constructor for the custom attribute.","nodes":[{"pos":[0,41],"content":"The constructor for the custom attribute.","nodes":[{"content":"The constructor for the custom attribute.","pos":[0,41]}]}],"pos":[111703,111745],"yaml":true},{"content":"A byte blob representing the attributes.","nodes":[{"pos":[0,40],"content":"A byte blob representing the attributes.","nodes":[{"content":"A byte blob representing the attributes.","pos":[0,40]}]}],"pos":[111816,111857],"yaml":true},{"content":"<code>con</code> or <code>binaryAttribute</code> is `null`.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;con&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;binaryAttribute&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>con</code> or <code>binaryAttribute</code> is `null`."}],"pos":[112042,112102],"yaml":true},{"content":"For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,234],"content":"For the current method, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","source":"For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`."}],"pos":[112212,112447],"yaml":true},{"content":"Sets a custom attribute using a custom attribute builder.","nodes":[{"pos":[0,57],"content":"Sets a custom attribute using a custom attribute builder.","nodes":[{"content":"Sets a custom attribute using a custom attribute builder.","pos":[0,57]}]}],"pos":[113955,114013],"yaml":true},{"content":"The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method can interact with the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method when the two methods are used in combination. See the Remarks section of the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method for details.","nodes":[{"pos":[0,342],"content":"The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method can interact with the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method when the two methods are used in combination. See the Remarks section of the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method for details.","nodes":[{"content":"The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method can interact with the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method when the two methods are used in combination. See the Remarks section of the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method for details.","pos":[0,342],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A&gt;</ph> method can interact with the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph> method when the two methods are used in combination.","pos":[0,221],"source":"The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method can interact with the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method when the two methods are used in combination."},{"content":"See the Remarks section of the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph> method for details.","pos":[222,342],"source":" See the Remarks section of the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method for details."}]}]}],"pos":[114024,114367],"yaml":true,"extradata":"MT"},{"content":"An instance of a helper class to describe the custom attribute.","nodes":[{"pos":[0,63],"content":"An instance of a helper class to describe the custom attribute.","nodes":[{"content":"An instance of a helper class to describe the custom attribute.","pos":[0,63]}]}],"pos":[114601,114665],"yaml":true},{"content":"<code>customBuilder</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;customBuilder&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>customBuilder</code> is `null`."}],"pos":[114850,114888],"yaml":true},{"content":"For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,234],"content":"For the current method, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","source":"For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`."}],"pos":[114998,115233],"yaml":true},{"content":"Sets the implementation flags for this method.","nodes":[{"pos":[0,46],"content":"Sets the implementation flags for this method.","nodes":[{"content":"Sets the implementation flags for this method.","pos":[0,46]}]}],"pos":[116663,116710],"yaml":true},{"content":"When you use the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method in combination with the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method, be aware of potential interactions. For example, using the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method to add the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute also sets the <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> flag. If you subsequently call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method, the <xref:System.Reflection.MethodImplAttributes.PreserveSig> flag is overwritten. There are two ways to avoid this:  \n  \n-   Call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method before you call the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method. The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method always respects existing method implementation flags.  \n  \n-   When you set implementation flags, call the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A> method to retrieve the existing flags, use bitwise OR to add your flag, and then call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method.","nodes":[{"pos":[0,716],"content":"When you use the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method in combination with the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method, be aware of potential interactions. For example, using the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method to add the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute also sets the <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> flag. If you subsequently call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method, the <xref:System.Reflection.MethodImplAttributes.PreserveSig> flag is overwritten. There are two ways to avoid this:","nodes":[{"content":"When you use the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method in combination with the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method, be aware of potential interactions. For example, using the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method to add the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute also sets the <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> flag. If you subsequently call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method, the <xref:System.Reflection.MethodImplAttributes.PreserveSig> flag is overwritten. There are two ways to avoid this:","pos":[0,716],"nodes":[{"content":"When you use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph> method in combination with the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A&gt;</ph> method, be aware of potential interactions.","pos":[0,227],"source":"When you use the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method in combination with the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method, be aware of potential interactions."},{"content":"For example, using the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A&gt;</ph> method to add the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute also sets the <ph id=\"ph3\">&lt;xref:System.Reflection.MethodImplAttributes?displayProperty=fullName&gt;</ph> flag.","pos":[228,492],"source":" For example, using the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method to add the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute also sets the <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> flag."},{"content":"If you subsequently call the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph> method, the <ph id=\"ph2\">&lt;xref:System.Reflection.MethodImplAttributes.PreserveSig&gt;</ph> flag is overwritten.","pos":[493,682],"source":" If you subsequently call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method, the <xref:System.Reflection.MethodImplAttributes.PreserveSig> flag is overwritten."},{"content":"There are two ways to avoid this:","pos":[683,716]}]}]},{"pos":[726,1036],"content":"Call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method before you call the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method. The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method always respects existing method implementation flags.","nodes":[{"content":"Call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method before you call the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method. The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method always respects existing method implementation flags.","pos":[0,310],"nodes":[{"content":"Call the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph> method before you call the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A&gt;</ph> method.","pos":[0,179],"source":"Call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method before you call the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A&gt;</ph> method always respects existing method implementation flags.","pos":[180,310],"source":" The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method always respects existing method implementation flags."}]}]},{"pos":[1046,1333],"content":"When you set implementation flags, call the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A> method to retrieve the existing flags, use bitwise OR to add your flag, and then call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method.","nodes":[{"content":"When you set implementation flags, call the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A&gt;</ph> method to retrieve the existing flags, use bitwise OR to add your flag, and then call the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A&gt;</ph> method.","pos":[0,287],"source":"When you set implementation flags, call the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A> method to retrieve the existing flags, use bitwise OR to add your flag, and then call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method."}]}],"pos":[116721,118061],"yaml":true,"extradata":"MT"},{"content":"The implementation flags to set.","nodes":[{"pos":[0,32],"content":"The implementation flags to set.","nodes":[{"content":"The implementation flags to set.","pos":[0,32]}]}],"pos":[119111,119144],"yaml":true},{"content":"The containing type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,116],"content":"The containing type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The containing type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,368],"content":"For the current method, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","source":"For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`."}],"pos":[119341,119722],"yaml":true},{"content":"Sets marshaling information for the return type of this method.","nodes":[{"pos":[0,63],"content":"Sets marshaling information for the return type of this method.","nodes":[{"content":"Sets marshaling information for the return type of this method.","pos":[0,63]}]}],"pos":[121044,121108],"yaml":true},{"content":"Marshaling information for the return type of this method.","nodes":[{"pos":[0,58],"content":"Marshaling information for the return type of this method.","nodes":[{"content":"Marshaling information for the return type of this method.","pos":[0,58]}]}],"pos":[122209,122268],"yaml":true},{"content":"The containing type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,116],"content":"The containing type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The containing type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,368],"content":"For the current method, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","source":"For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`."}],"pos":[122453,122834],"yaml":true},{"content":"Creates the body of the method by using a specified byte array of Microsoft intermediate language (MSIL) instructions.","nodes":[{"pos":[0,118],"content":"Creates the body of the method by using a specified byte array of Microsoft intermediate language (MSIL) instructions.","nodes":[{"content":"Creates the body of the method by using a specified byte array of Microsoft intermediate language (MSIL) instructions.","pos":[0,118]}]}],"pos":[124657,124776],"yaml":true},{"content":"An array that contains valid MSIL instructions.","nodes":[{"pos":[0,47],"content":"An array that contains valid MSIL instructions.","nodes":[{"content":"An array that contains valid MSIL instructions.","pos":[0,47]}]}],"pos":[125105,125153],"yaml":true},{"content":"The maximum stack evaluation depth.","nodes":[{"pos":[0,35],"content":"The maximum stack evaluation depth.","nodes":[{"content":"The maximum stack evaluation depth.","pos":[0,35]}]}],"pos":[125216,125252],"yaml":true},{"content":"An array of bytes that contain the serialized local variable structure. Specify `null` if the method has no local variables.","nodes":[{"pos":[0,124],"content":"An array of bytes that contain the serialized local variable structure. Specify `null` if the method has no local variables.","nodes":[{"content":"An array of bytes that contain the serialized local variable structure.","pos":[0,71]},{"content":"Specify <ph id=\"ph1\">`null`</ph> if the method has no local variables.","pos":[72,124],"source":" Specify `null` if the method has no local variables."}]}],"pos":[125322,125447],"yaml":true},{"content":"A collection that contains the exception handlers for the method. Specify `null` if the method has no exception handlers.","nodes":[{"pos":[0,121],"content":"A collection that contains the exception handlers for the method. Specify `null` if the method has no exception handlers.","nodes":[{"content":"A collection that contains the exception handlers for the method.","pos":[0,65]},{"content":"Specify <ph id=\"ph1\">`null`</ph> if the method has no exception handlers.","pos":[66,121],"source":" Specify `null` if the method has no exception handlers."}]}],"pos":[125586,125708],"yaml":true},{"content":"A collection of values that represent offsets in <code>il</code>, each of which specifies the beginning of a token that may be modified. Specify `null` if the method has no tokens that have to be modified.","nodes":[{"pos":[0,205],"content":"A collection of values that represent offsets in <code>il</code>, each of which specifies the beginning of a token that may be modified. Specify `null` if the method has no tokens that have to be modified.","nodes":[{"content":"A collection of values that represent offsets in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">il</ph><ept id=\"p1\">&lt;/code&gt;</ept>, each of which specifies the beginning of a token that may be modified.","pos":[0,136],"source":"A collection of values that represent offsets in <code>il</code>, each of which specifies the beginning of a token that may be modified."},{"content":"Specify <ph id=\"ph1\">`null`</ph> if the method has no tokens that have to be modified.","pos":[137,205],"source":" Specify `null` if the method has no tokens that have to be modified."}]}],"pos":[125814,126020],"yaml":true},{"content":"<code>il</code> is `null`.","nodes":[{"pos":[0,26],"content":"<ph id=\"ph1\">&lt;code&gt;il&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>il</code> is `null`."}],"pos":[126200,126227],"yaml":true},{"content":"<code>maxStack</code> is negative.  \n  \n -or-  \n  \n One of <code>exceptionHandlers</code> specifies an offset outside of <code>il</code>.  \n  \n -or-  \n  \n One of <code>tokenFixups</code> specifies an offset that is outside the <code>il</code> array.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;maxStack&lt;/code&gt;</ph> is negative.","source":"<code>maxStack</code> is negative."},{"pos":[41,45],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[52,137],"content":"One of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">exceptionHandlers</ph><ept id=\"p1\">&lt;/code&gt;</ept> specifies an offset outside of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">il</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"One of <code>exceptionHandlers</code> specifies an offset outside of <code>il</code>."},{"pos":[144,148],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[155,249],"content":"One of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">tokenFixups</ph><ept id=\"p1\">&lt;/code&gt;</ept> specifies an offset that is outside the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">il</ph><ept id=\"p2\">&lt;/code&gt;</ept> array.","source":"One of <code>tokenFixups</code> specifies an offset that is outside the <code>il</code> array."}],"pos":[126341,126601],"yaml":true},{"content":"The containing type was previously created using the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> method.  \n  \n -or-  \n  \n This method was called previously on this <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> object.","nodes":[{"pos":[0,127],"content":"The containing type was previously created using the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph> method.","source":"The containing type was previously created using the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> method."},{"pos":[134,138],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[145,252],"content":"This method was called previously on this <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder\"&gt;&lt;/xref&gt;</ph> object.","source":"This method was called previously on this <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> object."}],"pos":[126711,126974],"yaml":true},{"content":"Sets the number and types of parameters for a method.","nodes":[{"pos":[0,53],"content":"Sets the number and types of parameters for a method.","nodes":[{"content":"Sets the number and types of parameters for a method.","pos":[0,53]}]}],"pos":[128097,128151],"yaml":true},{"content":"If the number and types of the parameters are known when the method is defined, they can be set using any overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method that accepts an array of parameter types. However, a generic method can have parameters whose types are specified by one or more of its own generic type parameters, which cannot be defined until after the method has been defined. Use this method to set the parameter types in that case.  \n  \n If the return type has optional or required custom modifiers, such as <xref:System.Runtime.CompilerServices.IsConst>, use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overload.  \n  \n Calling this method replaces any parameter types that were set using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,498],"content":"If the number and types of the parameters are known when the method is defined, they can be set using any overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method that accepts an array of parameter types. However, a generic method can have parameters whose types are specified by one or more of its own generic type parameters, which cannot be defined until after the method has been defined. Use this method to set the parameter types in that case.","nodes":[{"content":"If the number and types of the parameters are known when the method is defined, they can be set using any overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method that accepts an array of parameter types. However, a generic method can have parameters whose types are specified by one or more of its own generic type parameters, which cannot be defined until after the method has been defined. Use this method to set the parameter types in that case.","pos":[0,498],"nodes":[{"content":"If the number and types of the parameters are known when the method is defined, they can be set using any overload of the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName&gt;</ph> method that accepts an array of parameter types.","pos":[0,253],"source":"If the number and types of the parameters are known when the method is defined, they can be set using any overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method that accepts an array of parameter types."},{"content":"However, a generic method can have parameters whose types are specified by one or more of its own generic type parameters, which cannot be defined until after the method has been defined.","pos":[254,441]},{"content":"Use this method to set the parameter types in that case.","pos":[442,498]}]}]},{"pos":[505,833],"content":"If the return type has optional or required custom modifiers, such as <xref:System.Runtime.CompilerServices.IsConst>, use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overload.","nodes":[{"content":"If the return type has optional or required custom modifiers, such as <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.IsConst&gt;</ph>, use the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29&gt;</ph> method overload.","pos":[0,328],"source":"If the return type has optional or required custom modifiers, such as <xref:System.Runtime.CompilerServices.IsConst>, use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overload."}]},{"pos":[840,1003],"content":"Calling this method replaces any parameter types that were set using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method.","nodes":[{"content":"Calling this method replaces any parameter types that were set using the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,163],"source":"Calling this method replaces any parameter types that were set using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method."}]}],"pos":[128162,129172],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.Type\"></xref> objects representing the parameter types.","nodes":[{"pos":[0,86],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects representing the parameter types.","source":"An array of <xref href=\"System.Type\"></xref> objects representing the parameter types."}],"pos":[130692,130779],"yaml":true},{"content":"The current method is generic, but is not a generic method definition. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,290],"content":"The current method is generic, but is not a generic method definition. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.","nodes":[{"content":"The current method is generic, but is not a generic method definition.","pos":[0,70]},{"content":"That is, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","pos":[71,290],"source":" That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`."}]}],"pos":[130967,131258],"yaml":true},{"content":"Sets the return type of the method.","nodes":[{"pos":[0,35],"content":"Sets the return type of the method.","nodes":[{"content":"Sets the return type of the method.","pos":[0,35]}]}],"pos":[132505,132541],"yaml":true},{"content":"Use this method to set the return type of a generic method, when the return type is specified by one of the generic type parameters of the method. If the return type has optional or required custom modifiers, such as <xref:System.Runtime.CompilerServices.IsConst>, use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overload.  \n  \n Calling this method replaces a return type established using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,475],"content":"Use this method to set the return type of a generic method, when the return type is specified by one of the generic type parameters of the method. If the return type has optional or required custom modifiers, such as <xref:System.Runtime.CompilerServices.IsConst>, use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overload.","nodes":[{"content":"Use this method to set the return type of a generic method, when the return type is specified by one of the generic type parameters of the method. If the return type has optional or required custom modifiers, such as <xref:System.Runtime.CompilerServices.IsConst>, use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overload.","pos":[0,475],"nodes":[{"content":"Use this method to set the return type of a generic method, when the return type is specified by one of the generic type parameters of the method.","pos":[0,146]},{"content":"If the return type has optional or required custom modifiers, such as <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.IsConst&gt;</ph>, use the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29&gt;</ph> method overload.","pos":[147,475],"source":" If the return type has optional or required custom modifiers, such as <xref:System.Runtime.CompilerServices.IsConst>, use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overload."}]}]},{"pos":[482,637],"content":"Calling this method replaces a return type established using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method.","nodes":[{"content":"Calling this method replaces a return type established using the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,155],"source":"Calling this method replaces a return type established using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method."}]}],"pos":[132552,133194],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> object that represents the return type of the method.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents the return type of the method.","source":"A <xref href=\"System.Type\"></xref> object that represents the return type of the method."}],"pos":[134702,134791],"yaml":true},{"content":"The current method is generic, but is not a generic method definition. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,290],"content":"The current method is generic, but is not a generic method definition. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.","nodes":[{"content":"The current method is generic, but is not a generic method definition.","pos":[0,70]},{"content":"That is, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","pos":[71,290],"source":" That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`."}]}],"pos":[134979,135270],"yaml":true},{"content":"Sets the method signature, including the return type, the parameter types, and the required and optional custom modifiers of the return type and parameter types.","nodes":[{"pos":[0,161],"content":"Sets the method signature, including the return type, the parameter types, and the required and optional custom modifiers of the return type and parameter types.","nodes":[{"content":"Sets the method signature, including the return type, the parameter types, and the required and optional custom modifiers of the return type and parameter types.","pos":[0,161]}]}],"pos":[136865,137027],"yaml":true},{"content":"If the return type and the number and types of the parameters are known when the method is defined, they can be established using any overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method that accepts an array of parameter types. However, a generic method can have parameters whose types are specified by one or more of its own generic type parameters, which cannot be defined until after the method has been defined. Use this method to set the parameter types in that case.  \n  \n If neither the return type nor the parameter types have optional or required custom modifiers, such as <xref:Microsoft.VisualC.IsConstModifier>, you can use the <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> and <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> methods.  \n  \n Calling this method replaces the parameters and return type established using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,526],"content":"If the return type and the number and types of the parameters are known when the method is defined, they can be established using any overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method that accepts an array of parameter types. However, a generic method can have parameters whose types are specified by one or more of its own generic type parameters, which cannot be defined until after the method has been defined. Use this method to set the parameter types in that case.","nodes":[{"content":"If the return type and the number and types of the parameters are known when the method is defined, they can be established using any overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method that accepts an array of parameter types. However, a generic method can have parameters whose types are specified by one or more of its own generic type parameters, which cannot be defined until after the method has been defined. Use this method to set the parameter types in that case.","pos":[0,526],"nodes":[{"content":"If the return type and the number and types of the parameters are known when the method is defined, they can be established using any overload of the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName&gt;</ph> method that accepts an array of parameter types.","pos":[0,281],"source":"If the return type and the number and types of the parameters are known when the method is defined, they can be established using any overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method that accepts an array of parameter types."},{"content":"However, a generic method can have parameters whose types are specified by one or more of its own generic type parameters, which cannot be defined until after the method has been defined.","pos":[282,469]},{"content":"Use this method to set the parameter types in that case.","pos":[470,526]}]}]},{"pos":[533,828],"content":"If neither the return type nor the parameter types have optional or required custom modifiers, such as <xref:Microsoft.VisualC.IsConstModifier>, you can use the <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> and <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> methods.","nodes":[{"content":"If neither the return type nor the parameter types have optional or required custom modifiers, such as <ph id=\"ph1\">&lt;xref:Microsoft.VisualC.IsConstModifier&gt;</ph>, you can use the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A&gt;</ph> methods.","pos":[0,295],"source":"If neither the return type nor the parameter types have optional or required custom modifiers, such as <xref:Microsoft.VisualC.IsConstModifier>, you can use the <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> and <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> methods."}]},{"pos":[835,1007],"content":"Calling this method replaces the parameters and return type established using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method.","nodes":[{"content":"Calling this method replaces the parameters and return type established using the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,172],"source":"Calling this method replaces the parameters and return type established using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method."}]}],"pos":[137038,138052],"yaml":true,"extradata":"MT"},{"content":"The return type of the method.","nodes":[{"pos":[0,30],"content":"The return type of the method.","nodes":[{"content":"The return type of the method.","pos":[0,30]}]}],"pos":[141608,141639],"yaml":true},{"content":"An array of types representing the required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method. If the return type has no required custom modifiers, specify `null`.","nodes":[{"pos":[0,235],"content":"An array of types representing the required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method. If the return type has no required custom modifiers, specify `null`.","nodes":[{"content":"An array of types representing the required custom modifiers, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>, for the return type of the method.","pos":[0,166],"source":"An array of types representing the required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method."},{"content":"If the return type has no required custom modifiers, specify <ph id=\"ph1\">`null`</ph>.","pos":[167,235],"source":" If the return type has no required custom modifiers, specify `null`."}]}],"pos":[141728,141964],"yaml":true},{"content":"An array of types representing the optional custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method. If the return type has no optional custom modifiers, specify `null`.","nodes":[{"pos":[0,235],"content":"An array of types representing the optional custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method. If the return type has no optional custom modifiers, specify `null`.","nodes":[{"content":"An array of types representing the optional custom modifiers, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>, for the return type of the method.","pos":[0,166],"source":"An array of types representing the optional custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method."},{"content":"If the return type has no optional custom modifiers, specify <ph id=\"ph1\">`null`</ph>.","pos":[167,235],"source":" If the return type has no optional custom modifiers, specify `null`."}]}],"pos":[142053,142289],"yaml":true},{"content":"The types of the parameters of the method.","nodes":[{"pos":[0,42],"content":"The types of the parameters of the method.","nodes":[{"content":"The types of the parameters of the method.","pos":[0,42]}]}],"pos":[142359,142402],"yaml":true},{"content":"An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no required custom modifiers, specify `null` instead of an array of types. If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"pos":[0,401],"content":"An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no required custom modifiers, specify `null` instead of an array of types. If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"content":"An array of arrays of types.","pos":[0,28]},{"content":"Each array of types represents the required custom modifiers for the corresponding parameter, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>.","pos":[29,192],"source":" Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>."},{"content":"If a particular parameter has no required custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of types.","pos":[193,297],"source":" If a particular parameter has no required custom modifiers, specify `null` instead of an array of types."},{"content":"If none of the parameters have required custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of arrays.","pos":[298,401],"source":" If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays."}]}],"pos":[142496,142898],"yaml":true},{"content":"An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types. If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"pos":[0,401],"content":"An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types. If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"content":"An array of arrays of types.","pos":[0,28]},{"content":"Each array of types represents the optional custom modifiers for the corresponding parameter, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>.","pos":[29,192],"source":" Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>."},{"content":"If a particular parameter has no optional custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of types.","pos":[193,297],"source":" If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types."},{"content":"If none of the parameters have optional custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of arrays.","pos":[298,401],"source":" If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays."}]}],"pos":[142992,143394],"yaml":true},{"content":"The current method is generic, but is not a generic method definition. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,290],"content":"The current method is generic, but is not a generic method definition. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.","nodes":[{"content":"The current method is generic, but is not a generic method definition.","pos":[0,70]},{"content":"That is, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","pos":[71,290],"source":" That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`."}]}],"pos":[143581,143872],"yaml":true},{"content":"Set a symbolic custom attribute using a blob.","nodes":[{"pos":[0,45],"content":"Set a symbolic custom attribute using a blob.","nodes":[{"content":"Set a symbolic custom attribute using a blob.","pos":[0,45]}]}],"pos":[145218,145264],"yaml":true},{"content":"Unlike the metadata custom attribute, this custom attribute is associated with a symbol writer.","nodes":[{"pos":[0,95],"content":"Unlike the metadata custom attribute, this custom attribute is associated with a symbol writer.","nodes":[{"content":"Unlike the metadata custom attribute, this custom attribute is associated with a symbol writer.","pos":[0,95]}]}],"pos":[145275,145371],"yaml":true,"extradata":"MT"},{"content":"The name of the symbolic custom attribute.","nodes":[{"pos":[0,42],"content":"The name of the symbolic custom attribute.","nodes":[{"content":"The name of the symbolic custom attribute.","pos":[0,42]}]}],"pos":[146393,146436],"yaml":true},{"content":"The byte blob that represents the value of the symbolic custom attribute.","nodes":[{"pos":[0,73],"content":"The byte blob that represents the value of the symbolic custom attribute.","nodes":[{"content":"The byte blob that represents the value of the symbolic custom attribute.","pos":[0,73]}]}],"pos":[146496,146570],"yaml":true},{"content":"The containing type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n The module that contains this method is not a debug module.  \n  \n -or-  \n  \n For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,116],"content":"The containing type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The containing type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,193],"content":"The module that contains this method is not a debug module.","nodes":[{"content":"The module that contains this method is not a debug module.","pos":[0,59]}]},{"pos":[200,204],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[211,445],"content":"For the current method, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","source":"For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`."}],"pos":[146766,147228],"yaml":true},{"content":"Retrieves the signature of the method.","nodes":[{"pos":[0,38],"content":"Retrieves the signature of the method.","nodes":[{"content":"Retrieves the signature of the method.","pos":[0,38]}]}],"pos":[148233,148272],"yaml":true},{"content":"Read-only. A String containing the signature of the method reflected by this `MethodBase` instance.","nodes":[{"pos":[0,99],"content":"Read-only. A String containing the signature of the method reflected by this `MethodBase` instance.","nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"A String containing the signature of the method reflected by this <ph id=\"ph1\">`MethodBase`</ph> instance.","pos":[11,99],"source":" A String containing the signature of the method reflected by this `MethodBase` instance."}]}],"pos":[148385,148485],"yaml":true},{"content":"Returns this `MethodBuilder` instance as a string.","nodes":[{"pos":[0,50],"content":"Returns this <ph id=\"ph1\">`MethodBuilder`</ph> instance as a string.","source":"Returns this `MethodBuilder` instance as a string."}],"pos":[149592,149643],"yaml":true},{"content":"Returns a string containing the name, attributes, method signature, exceptions, and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.","nodes":[{"pos":[0,185],"content":"Returns a string containing the name, attributes, method signature, exceptions, and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.","nodes":[{"content":"Returns a string containing the name, attributes, method signature, exceptions, and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.","pos":[0,185]}]}],"pos":[149778,149964],"yaml":true},{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"pos":[0,67],"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","pos":[0,67]}]}],"pos":[151684,151752],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"pos":[0,186],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.","pos":[110,186],"source":" For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library."}]}],"pos":[151763,151950],"yaml":true,"extradata":"MT"},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[152157,152200],"yaml":true},{"content":"Passed-in array of names to be mapped.","nodes":[{"pos":[0,38],"content":"Passed-in array of names to be mapped.","nodes":[{"content":"Passed-in array of names to be mapped.","pos":[0,38]}]}],"pos":[152265,152304],"yaml":true},{"content":"Count of the names to be mapped.","nodes":[{"pos":[0,32],"content":"Count of the names to be mapped.","nodes":[{"content":"Count of the names to be mapped.","pos":[0,32]}]}],"pos":[152366,152399],"yaml":true},{"content":"The locale context in which to interpret the names.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret the names.","nodes":[{"content":"The locale context in which to interpret the names.","pos":[0,51]}]}],"pos":[152459,152511],"yaml":true},{"content":"Caller-allocated array that receives the IDs corresponding to the names.","nodes":[{"pos":[0,72],"content":"Caller-allocated array that receives the IDs corresponding to the names.","nodes":[{"content":"Caller-allocated array that receives the IDs corresponding to the names.","pos":[0,72]}]}],"pos":[152575,152648],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[152878,152961],"yaml":true},{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"pos":[0,114],"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","pos":[0,114]}]}],"pos":[154374,154489],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"pos":[0,184],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.","pos":[110,184],"source":" For more information about `IDispatch::GetTypeInfo`, see the MSDN Library."}]}],"pos":[154500,154685],"yaml":true,"extradata":"MT"},{"content":"The type information to return.","nodes":[{"pos":[0,31],"content":"The type information to return.","nodes":[{"content":"The type information to return.","pos":[0,31]}]}],"pos":[154860,154892],"yaml":true},{"content":"The locale identifier for the type information.","nodes":[{"pos":[0,47],"content":"The locale identifier for the type information.","nodes":[{"content":"The locale identifier for the type information.","pos":[0,47]}]}],"pos":[154952,155000],"yaml":true},{"content":"Receives a pointer to the requested type information object.","nodes":[{"pos":[0,60],"content":"Receives a pointer to the requested type information object.","nodes":[{"content":"Receives a pointer to the requested type information object.","pos":[0,60]}]}],"pos":[155063,155124],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[155352,155435],"yaml":true},{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"pos":[0,92],"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","pos":[0,92]}]}],"pos":[156749,156842],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"pos":[0,189],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.","pos":[110,189],"source":" For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library."}]}],"pos":[156853,157043],"yaml":true,"extradata":"MT"},{"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"pos":[0,100],"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"content":"Points to a location that receives the number of type information interfaces provided by the object.","pos":[0,100]}]}],"pos":[157202,157303],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[157536,157619],"yaml":true},{"content":"Provides access to properties and methods exposed by an object.","nodes":[{"pos":[0,63],"content":"Provides access to properties and methods exposed by an object.","nodes":[{"content":"Provides access to properties and methods exposed by an object.","pos":[0,63]}]}],"pos":[159317,159381],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"pos":[0,179],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::Invoke`</ph>, see the MSDN Library.","pos":[110,179],"source":" For more information about `IDispatch::Invoke`, see the MSDN Library."}]}],"pos":[159392,159572],"yaml":true,"extradata":"MT"},{"content":"Identifies the member.","nodes":[{"pos":[0,22],"content":"Identifies the member.","nodes":[{"content":"Identifies the member.","pos":[0,22]}]}],"pos":[159842,159865],"yaml":true},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[159923,159966],"yaml":true},{"content":"The locale context in which to interpret arguments.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret arguments.","nodes":[{"content":"The locale context in which to interpret arguments.","pos":[0,51]}]}],"pos":[160026,160078],"yaml":true},{"content":"Flags describing the context of the call.","nodes":[{"pos":[0,41],"content":"Flags describing the context of the call.","nodes":[{"content":"Flags describing the context of the call.","pos":[0,41]}]}],"pos":[160139,160181],"yaml":true},{"content":"Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"pos":[0,159],"content":"Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"content":"Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.","pos":[0,159]}]}],"pos":[160248,160408],"yaml":true},{"content":"Pointer to the location where the result is to be stored.","nodes":[{"pos":[0,57],"content":"Pointer to the location where the result is to be stored.","nodes":[{"content":"Pointer to the location where the result is to be stored.","pos":[0,57]}]}],"pos":[160474,160532],"yaml":true},{"content":"Pointer to a structure that contains exception information.","nodes":[{"pos":[0,59],"content":"Pointer to a structure that contains exception information.","nodes":[{"content":"Pointer to a structure that contains exception information.","pos":[0,59]}]}],"pos":[160598,160658],"yaml":true},{"content":"The index of the first argument that has an error.","nodes":[{"pos":[0,50],"content":"The index of the first argument that has an error.","nodes":[{"content":"The index of the first argument that has an error.","pos":[0,50]}]}],"pos":[160722,160773],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[160996,161079],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Emit.MethodBuilder\n  commentId: T:System.Reflection.Emit.MethodBuilder\n  id: MethodBuilder\n  children:\n  - System.Reflection.Emit.MethodBuilder.#ctor\n  - System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)\n  - System.Reflection.Emit.MethodBuilder.Attributes\n  - System.Reflection.Emit.MethodBuilder.CallingConvention\n  - System.Reflection.Emit.MethodBuilder.ContainsGenericParameters\n  - System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)\n  - System.Reflection.Emit.MethodBuilder.DeclaringType\n  - System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])\n  - System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)\n  - System.Reflection.Emit.MethodBuilder.Equals(System.Object)\n  - System.Reflection.Emit.MethodBuilder.GetBaseDefinition\n  - System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)\n  - System.Reflection.Emit.MethodBuilder.GetGenericArguments\n  - System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition\n  - System.Reflection.Emit.MethodBuilder.GetHashCode\n  - System.Reflection.Emit.MethodBuilder.GetILGenerator\n  - System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)\n  - System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags\n  - System.Reflection.Emit.MethodBuilder.GetModule\n  - System.Reflection.Emit.MethodBuilder.GetParameters\n  - System.Reflection.Emit.MethodBuilder.GetToken\n  - System.Reflection.Emit.MethodBuilder.InitLocals\n  - System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  - System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)\n  - System.Reflection.Emit.MethodBuilder.IsGenericMethod\n  - System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\n  - System.Reflection.Emit.MethodBuilder.IsSecurityCritical\n  - System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical\n  - System.Reflection.Emit.MethodBuilder.IsSecurityTransparent\n  - System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])\n  - System.Reflection.Emit.MethodBuilder.MethodHandle\n  - System.Reflection.Emit.MethodBuilder.MethodImplementationFlags\n  - System.Reflection.Emit.MethodBuilder.Module\n  - System.Reflection.Emit.MethodBuilder.Name\n  - System.Reflection.Emit.MethodBuilder.ReflectedType\n  - System.Reflection.Emit.MethodBuilder.ReturnParameter\n  - System.Reflection.Emit.MethodBuilder.ReturnType\n  - System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes\n  - System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  - System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  - System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)\n  - System.Reflection.Emit.MethodBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)\n  - System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])\n  - System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)\n  - System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  - System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])\n  - System.Reflection.Emit.MethodBuilder.Signature\n  - System.Reflection.Emit.MethodBuilder.ToString\n  - System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  langs:\n  - csharp\n  name: MethodBuilder\n  nameWithType: MethodBuilder\n  fullName: System.Reflection.Emit.MethodBuilder\n  type: Class\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Defines and represents a method (or constructor) on a dynamic class.\n  remarks: \"The <xref:System.Reflection.Emit.MethodBuilder> class is used to fully describe a method in Microsoft intermediate language (MSIL), including the name, attributes, signature, and method body. It is used in conjunction with the <xref:System.Reflection.Emit.TypeBuilder> class to create classes at runtime.  \\n  \\n## Global methods and methods as type members  \\n You can use reflection emit to define global methods and to define methods as type members. The APIs that define methods return <xref:System.Reflection.Emit.MethodBuilder> objects.  \\n  \\n### Global methods  \\n A global method is defined by using the <xref:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod%2A?displayProperty=fullName> method, which returns a **MethodBuilder** object.  \\n  \\n Global methods must be static. If a dynamic module contains global methods, the <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A?displayProperty=fullName> method must be called before persisting the dynamic module or the containing dynamic assembly because the common language runtime postpones fixing up the dynamic module until all global functions have been defined.  \\n  \\n A global native method is defined by using the <xref:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod%2A?displayProperty=fullName> method. Platform invoke (PInvoke) methods must not be declared abstract or virtual. The runtime sets the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute for a platform invoke method.  \\n  \\n### Methods as members of types  \\n A method is defined as a type member by using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method, which returns a <xref:System.Reflection.Emit.MethodBuilder> object.  \\n  \\n The <xref:System.Reflection.Emit.MethodBuilder.DefineParameter%2A> method is used to set the name and parameter attributes of a parameter, or of the return value. The<xref:System.Reflection.Emit.ParameterBuilder> object returned by this method represents a parameter or the return value. The <xref:System.Reflection.Emit.ParameterBuilder> object can be used to set the marshaling, to set the constant value, and to apply custom attributes.  \\n  \\n## Attributes  \\n Members of the <xref:System.Reflection.MethodAttributes> enumeration define the precise character of a dynamic method:  \\n  \\n-   Static methods are specified using the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.  \\n  \\n-   Final methods (methods that cannot be overridden) are specified using the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.  \\n  \\n-   Virtual methods are specified using the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.  \\n  \\n-   Abstract methods are specified using the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.  \\n  \\n-   Several attributes determine method visibility. See the description of the <xref:System.Reflection.MethodAttributes> enumeration.  \\n  \\n-   Methods that implement overloaded operators must set the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.  \\n  \\n-   Finalizers must set the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> attribute.  \\n  \\n## Known Issues  \\n  \\n-   Although <xref:System.Reflection.Emit.MethodBuilder> is derived from <xref:System.Reflection.MethodInfo>, some of the abstract methods defined in the <xref:System.Reflection.MethodInfo> class are not fully implemented in <xref:System.Reflection.Emit.MethodBuilder>. These <xref:System.Reflection.Emit.MethodBuilder> methods throw the <xref:System.NotSupportedException>. For example the <xref:System.Reflection.Emit.MethodBuilder.Invoke%2A?displayProperty=fullName> method is not fully implemented. You can reflect on these methods by retrieving the enclosing type using the <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> methods.  \\n  \\n-   Custom modifiers are supported starting with the .NET Framework version 2.0. They are not supported in earlier versions.\"\n  example:\n  - \"The following example uses the <xref:System.Reflection.Emit.MethodBuilder> class to create a method within a dynamic type.  \\n  \\n [!code-cpp[System.Reflection.Emit.MethodBuilder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder Example/CPP/source.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.MethodBuilder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder Example/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Emit.MethodBuilder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder Example/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class MethodBuilder : System.Reflection.MethodInfo, System.Runtime.InteropServices._MethodBuilder\n  inheritance:\n  - System.Object\n  - System.Reflection.MemberInfo\n  - System.Reflection.MethodBase\n  - System.Reflection.MethodInfo\n  implements:\n  - System.Runtime.InteropServices._MethodBuilder\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Reflection.MemberInfo.CustomAttributes\n  - System.Reflection.MemberInfo.GetCustomAttributesData\n  - System.Reflection.MemberInfo.MetadataToken\n  - System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Reflection.MethodBase.GetCurrentMethod\n  - System.Reflection.MethodBase.GetMethodBody\n  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)\n  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  - System.Reflection.MethodBase.Invoke(System.Object,System.Object[])\n  - System.Reflection.MethodBase.IsAbstract\n  - System.Reflection.MethodBase.IsAssembly\n  - System.Reflection.MethodBase.IsConstructor\n  - System.Reflection.MethodBase.IsFamily\n  - System.Reflection.MethodBase.IsFamilyAndAssembly\n  - System.Reflection.MethodBase.IsFamilyOrAssembly\n  - System.Reflection.MethodBase.IsFinal\n  - System.Reflection.MethodBase.IsHideBySig\n  - System.Reflection.MethodBase.IsPrivate\n  - System.Reflection.MethodBase.IsPublic\n  - System.Reflection.MethodBase.IsSpecialName\n  - System.Reflection.MethodBase.IsStatic\n  - System.Reflection.MethodBase.IsVirtual\n  - System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)\n  - System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic\n  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual\n  - System.Reflection.MethodInfo.CreateDelegate(System.Type)\n  - System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)\n  - System.Reflection.MethodInfo.MemberType\n  - System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  - System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType\n  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  extensionMethods:\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  - System.Reflection.MethodInfoExtensions.GetBaseDefinition(System.Reflection.MethodInfo)\n  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)\n  attributes:\n  - type: System.Runtime.InteropServices.ClassInterfaceAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.#ctor\n  commentId: M:System.Reflection.Emit.MethodBuilder.#ctor\n  id: '#ctor'\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: MethodBuilder()\n  nameWithType: MethodBuilder.MethodBuilder()\n  fullName: MethodBuilder.MethodBuilder()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected MethodBuilder ();\n    parameters: []\n  overload: System.Reflection.Emit.MethodBuilder.#ctor*\n  exceptions: []\n  version:\n  - xamarinios-10.8\n  monikers:\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)\n  commentId: M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)\n  id: AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: AddDeclarativeSecurity(SecurityAction, PermissionSet)\n  nameWithType: MethodBuilder.AddDeclarativeSecurity(SecurityAction, PermissionSet)\n  fullName: MethodBuilder.AddDeclarativeSecurity(SecurityAction, PermissionSet)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds declarative security to this method.\n  remarks: \"<xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A> can be called several times, with each call specifying a security action (such as `Demand`, `Assert`, and `Deny`) and a set of permissions that the action applies to.  \\n  \\n> [!NOTE]\\n>  In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a method by using the <xref:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity%2A> method are stored in the old XML metadata format. See Emitting Declarative Security Attributes.\"\n  example:\n  - \"The code sample below illustrates the contextual use of `AddDeclarativeSecurity` to require the caller of a method to have unrestricted permissions.  \\n  \\n [!code-cpp[System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example/CPP/source.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void AddDeclarativeSecurity (System.Security.Permissions.SecurityAction action, System.Security.PermissionSet pset);\n    parameters:\n    - id: action\n      type: System.Security.Permissions.SecurityAction\n      description: The security action to be taken (Demand, Assert, and so on).\n    - id: pset\n      type: System.Security.PermissionSet\n      description: The set of permissions the action applies to.\n  overload: System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>action</code> is invalid (`RequestMinimum`, `RequestOptional`, and `RequestRefuse` are invalid).\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The containing type has been created using <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\"></xref>.  \\n  \\n -or-  \\n  \\n The permission set <code>pset</code> contains an action that was added earlier by <xref href=\\\"System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)\\\"></xref>.  \\n  \\n -or-  \\n  \\n For the current method, the <xref href=\\\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\\\"></xref> property is `true`, but the <xref href=\\\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\\\"></xref> property is `false`.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pset</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.Attributes\n  commentId: P:System.Reflection.Emit.MethodBuilder.Attributes\n  id: Attributes\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: Attributes\n  nameWithType: MethodBuilder.Attributes\n  fullName: MethodBuilder.Attributes\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the attributes for this method.\n  syntax:\n    content: public override System.Reflection.MethodAttributes Attributes { get; }\n    return:\n      type: System.Reflection.MethodAttributes\n      description: Read-only. Retrieves the `MethodAttributes` for this method.\n  overload: System.Reflection.Emit.MethodBuilder.Attributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.CallingConvention\n  commentId: P:System.Reflection.Emit.MethodBuilder.CallingConvention\n  id: CallingConvention\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: CallingConvention\n  nameWithType: MethodBuilder.CallingConvention\n  fullName: MethodBuilder.CallingConvention\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the calling convention of the method.\n  syntax:\n    content: public override System.Reflection.CallingConventions CallingConvention { get; }\n    return:\n      type: System.Reflection.CallingConventions\n      description: Read-only. The calling convention of the method.\n  overload: System.Reflection.Emit.MethodBuilder.CallingConvention*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.ContainsGenericParameters\n  commentId: P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters\n  id: ContainsGenericParameters\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: ContainsGenericParameters\n  nameWithType: MethodBuilder.ContainsGenericParameters\n  fullName: MethodBuilder.ContainsGenericParameters\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Not supported for this type.\n  remarks: \"A <xref:System.Reflection.Emit.MethodBuilder> always represents a generic method definition, and thus cannot be invoked.  \\n  \\n For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A?displayProperty=fullName>. For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>.\"\n  syntax:\n    content: public override bool ContainsGenericParameters { get; }\n    return:\n      type: System.Boolean\n      description: Not supported.\n  overload: System.Reflection.Emit.MethodBuilder.ContainsGenericParameters*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The invoked method is not supported in the base class.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)\n  commentId: M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)\n  id: CreateMethodBody(System.Byte[],System.Int32)\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: CreateMethodBody(Byte[], Int32)\n  nameWithType: MethodBuilder.CreateMethodBody(Byte[], Int32)\n  fullName: MethodBuilder.CreateMethodBody(Byte[], Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Creates the body of the method using a supplied byte array of Microsoft intermediate language (MSIL) instructions.\n  remarks: \"This method creates the method's body from `il`, an array containing MSIL instructions as opcodes. The number of bytes of valid MSIL is given by count.  \\n  \\n> [!NOTE]\\n>  This is currently not fully supported. The user cannot supply the location of token fix ups and exception handlers.\"\n  example:\n  - \"In the example provided below, a simple method that adds two integers is generated via opcode using `CreateMethodBody`.  \\n  \\n [!code-cpp[System.Refelction.Emit.MethodBuilder.CreateMethodBody Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Refelction.Emit.MethodBuilder.CreateMethodBody Example/CPP/source.cpp#1)]\\n [!code-csharp[System.Refelction.Emit.MethodBuilder.CreateMethodBody Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Refelction.Emit.MethodBuilder.CreateMethodBody Example/CS/source.cs#1)]\\n [!code-vb[System.Refelction.Emit.MethodBuilder.CreateMethodBody Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Refelction.Emit.MethodBuilder.CreateMethodBody Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void CreateMethodBody (byte[] il, int count);\n    parameters:\n    - id: il\n      type: System.Byte[]\n      description: An array containing valid MSIL instructions. If this parameter is `null`, the method's body is cleared.\n    - id: count\n      type: System.Int32\n      description: The number of valid bytes in the MSIL array. This value is ignored if MSIL is `null`.\n  overload: System.Reflection.Emit.MethodBuilder.CreateMethodBody*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>count</code> is not within the range of indexes of the supplied MSIL instruction array and <code>il</code> is not `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The containing type was previously created using <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\"></xref>.  \\n  \\n -or-  \\n  \\n This method was called previously on this `MethodBuilder` with an <code>il</code> argument that was not `null`.  \\n  \\n -or-  \\n  \\n For the current method, the <xref href=\\\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\\\"></xref> property is `true`, but the <xref href=\\\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\\\"></xref> property is `false`.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.DeclaringType\n  commentId: P:System.Reflection.Emit.MethodBuilder.DeclaringType\n  id: DeclaringType\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: DeclaringType\n  nameWithType: MethodBuilder.DeclaringType\n  fullName: MethodBuilder.DeclaringType\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the type that declares this method.\n  remarks: ''\n  example:\n  - \"The following code illustrates the use of the `Type` property.  \\n  \\n [!code-cpp[MethodBuilderClass_TypeSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBuilderClass_TypeSample/CPP/methodbuilderclass.cpp#1)]\\n [!code-csharp[MethodBuilderClass_TypeSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBuilderClass_TypeSample/CS/methodbuilderclass.cs#1)]\\n [!code-vb[MethodBuilderClass_TypeSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBuilderClass_TypeSample/VB/methodbuilderclass.vb#1)]\"\n  syntax:\n    content: public override Type DeclaringType { get; }\n    return:\n      type: System.Type\n      description: Read-only. The type that declares this method.\n  overload: System.Reflection.Emit.MethodBuilder.DeclaringType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])\n  commentId: M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])\n  id: DefineGenericParameters(System.String[])\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: DefineGenericParameters(String[])\n  nameWithType: MethodBuilder.DefineGenericParameters(String[])\n  fullName: MethodBuilder.DefineGenericParameters(String[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the number of generic type parameters for the current method, specifies their names, and returns an array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> objects that can be used to define their constraints.\n  remarks: \"Calling the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method makes the current method generic. There is no way to undo this change. Calling this method a second time causes an <xref:System.InvalidOperationException>.  \\n  \\n The type parameters of the generic method can be retrieved later by using the <xref:System.Reflection.Emit.MethodBuilder.GetGenericArguments%2A> method.  \\n  \\n By convention, a type parameter name is a single uppercase letter.  \\n  \\n For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=fullName>. For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>.\"\n  example:\n  - \"The following code example creates a dynamic type, `DemoType`, which contains the dynamic generic method `DemoMethod`. This method has two generic type parameters, one of which is used as a parameter, and the other as the return type.  \\n  \\n When the code is executed, the dynamic assembly is saved as DemoGenericMethod1.dll, and can be examined using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).  \\n  \\n> [!NOTE]\\n>  This code example generates a simple method body that merely returns a null reference. For a code example with a more fully developed method body that creates and uses generic types, see [How to: Define a Generic Method with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-method-with-reflection-emit.md).  \\n  \\n [!code-cpp[GenericMethodBuilder#1](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#1)]\\n [!code-csharp[GenericMethodBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#1)]\\n [!code-vb[GenericMethodBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters (string[] names);\n    parameters:\n    - id: names\n      type: System.String[]\n      description: An array of strings that represent the names of the generic type parameters.\n    return:\n      type: System.Reflection.Emit.GenericTypeParameterBuilder[]\n      description: An array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> objects representing the type parameters of the generic method.\n  overload: System.Reflection.Emit.MethodBuilder.DefineGenericParameters*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"Generic type parameters have already been defined for this method.  \\n  \\n -or-  \\n  \\n The method has been completed already.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)\\\"></xref> method has been called for the current method.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>names</code> is `null`.  \\n  \\n -or-  \\n  \\n An element of <code>names</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>names</code> is an empty array.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)\n  commentId: M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)\n  id: DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: DefineParameter(Int32, ParameterAttributes, String)\n  nameWithType: MethodBuilder.DefineParameter(Int32, ParameterAttributes, String)\n  fullName: MethodBuilder.DefineParameter(Int32, ParameterAttributes, String)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the parameter attributes and the name of a parameter of this method, or of the return value of this method. Returns a ParameterBuilder that can be used to apply custom attributes.\n  remarks: \"The <xref:System.Reflection.Emit.ParameterBuilder> object returned by this method can be used to set the default value for a parameter or to apply custom attributes.  \\n  \\n Parameter numbering begins with 1, so `position` is 1 for the first parameter. If `position` is zero, this method affects the return value.  \\n  \\n> [!NOTE]\\n>  In the .NET Framework versions 1.0 and 1.1, an exception is thrown if `position` is zero, so this method cannot be used to modify attributes of the return value in those versions.\"\n  syntax:\n    content: public System.Reflection.Emit.ParameterBuilder DefineParameter (int position, System.Reflection.ParameterAttributes attributes, string strParamName);\n    parameters:\n    - id: position\n      type: System.Int32\n      description: The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter; the number 0 represents the return value of the method.\n    - id: attributes\n      type: System.Reflection.ParameterAttributes\n      description: The parameter attributes of the parameter.\n    - id: strParamName\n      type: System.String\n      description: The name of the parameter. The name can be the null string.\n    return:\n      type: System.Reflection.Emit.ParameterBuilder\n      description: Returns a `ParameterBuilder` object that represents a parameter of this method or the return value of this method.\n  overload: System.Reflection.Emit.MethodBuilder.DefineParameter*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The method has no parameters.  \\n  \\n -or-  \\n  \\n <code>position</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>position</code> is greater than the number of the method's parameters.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The containing type was previously created using <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\"></xref>.  \\n  \\n -or-  \\n  \\n For the current method, the <xref href=\\\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\\\"></xref> property is `true`, but the <xref href=\\\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\\\"></xref> property is `false`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.Equals(System.Object)\n  commentId: M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: MethodBuilder.Equals(Object)\n  fullName: MethodBuilder.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Determines whether the given object is equal to this instance.\n  remarks: Equality is determined by having the same name, attributes, and signature.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to compare with this `MethodBuilder` instance.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>obj</code> is an instance of `MethodBuilder` and is equal to this object; otherwise, `false`.'\n  overload: System.Reflection.Emit.MethodBuilder.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.GetBaseDefinition\n  commentId: M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition\n  id: GetBaseDefinition\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: GetBaseDefinition()\n  nameWithType: MethodBuilder.GetBaseDefinition()\n  fullName: MethodBuilder.GetBaseDefinition()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Return the base implementation for a method.\n  remarks: This always returns the current `MethodBuilder` object.\n  syntax:\n    content: public override System.Reflection.MethodInfo GetBaseDefinition ();\n    parameters: []\n    return:\n      type: System.Reflection.MethodInfo\n      description: The base implementation of this method.\n  overload: System.Reflection.Emit.MethodBuilder.GetBaseDefinition*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)\n  id: GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: MethodBuilder.GetCustomAttributes(Type, Boolean)\n  fullName: MethodBuilder.GetCustomAttributes(Type, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the custom attributes identified by the given type.\n  syntax:\n    content: public override object[] GetCustomAttributes (Type attributeType, bool inherit);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: The custom attribute type.\n    - id: inherit\n      type: System.Boolean\n      description: Specifies whether to search this member's inheritance chain to find the custom attributes.\n    return:\n      type: System.Object[]\n      description: Returns an array of objects representing the attributes of this method that are of type <code>attributeType</code>.\n  overload: System.Reflection.Emit.MethodBuilder.GetCustomAttributes*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported. Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call <xref href=\"System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\"></xref> on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)\n  commentId: M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)\n  id: GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: GetCustomAttributes(Boolean)\n  nameWithType: MethodBuilder.GetCustomAttributes(Boolean)\n  fullName: MethodBuilder.GetCustomAttributes(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns all the custom attributes defined for this method.\n  syntax:\n    content: public override object[] GetCustomAttributes (bool inherit);\n    parameters:\n    - id: inherit\n      type: System.Boolean\n      description: Specifies whether to search this member's inheritance chain to find the custom attributes.\n    return:\n      type: System.Object[]\n      description: Returns an array of objects representing all the custom attributes of this method.\n  overload: System.Reflection.Emit.MethodBuilder.GetCustomAttributes*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported. Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call <xref href=\"System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\"></xref> on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.GetGenericArguments\n  commentId: M:System.Reflection.Emit.MethodBuilder.GetGenericArguments\n  id: GetGenericArguments\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: GetGenericArguments()\n  nameWithType: MethodBuilder.GetGenericArguments()\n  fullName: MethodBuilder.GetGenericArguments()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns an array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> objects that represent the type parameters of the method, if it is generic.\n  remarks: \"The type parameters of a generic method also are returned by the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method that is used to define them.  \\n  \\n For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName>. For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>.\"\n  syntax:\n    content: public override Type[] GetGenericArguments ();\n    parameters: []\n    return:\n      type: System.Type[]\n      description: An array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> objects representing the type parameters, if the method is generic, or `null` if the method is not generic.\n  overload: System.Reflection.Emit.MethodBuilder.GetGenericArguments*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition\n  commentId: M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition\n  id: GetGenericMethodDefinition\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: GetGenericMethodDefinition()\n  nameWithType: MethodBuilder.GetGenericMethodDefinition()\n  fullName: MethodBuilder.GetGenericMethodDefinition()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns this method.\n  remarks: \"A <xref:System.Reflection.Emit.MethodBuilder> cannot be used to emit a constructed generic method directly. The emitted method is a generic method definition.  \\n  \\n For more information, see <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> and <xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A?displayProperty=fullName>. For information on generic types, see <xref:System.Type.IsGenericType%2A?displayProperty=fullName>.\"\n  syntax:\n    content: public override System.Reflection.MethodInfo GetGenericMethodDefinition ();\n    parameters: []\n    return:\n      type: System.Reflection.MethodInfo\n      description: The current instance of <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref>.\n  overload: System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The current method is not generic. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property returns `false`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.GetHashCode\n  commentId: M:System.Reflection.Emit.MethodBuilder.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: MethodBuilder.GetHashCode()\n  fullName: MethodBuilder.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the hash code for this method.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The hash code for this method.\n  overload: System.Reflection.Emit.MethodBuilder.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.GetILGenerator\n  commentId: M:System.Reflection.Emit.MethodBuilder.GetILGenerator\n  id: GetILGenerator\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: GetILGenerator()\n  nameWithType: MethodBuilder.GetILGenerator()\n  fullName: MethodBuilder.GetILGenerator()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns an `ILGenerator` for this method with a default Microsoft intermediate language (MSIL) stream size of 64 bytes.\n  remarks: ''\n  example:\n  - \"The code sample below demonstrates the contextual usage of the `GetILGenerator` method, creating and emitting a dynamic assembly that will calculate the dot product of two points in 3D space.  \\n  \\n [!code-cpp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CPP/source.cpp#1)]\\n [!code-csharp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Reflection.Emit.ILGenerator GetILGenerator ();\n    parameters: []\n    return:\n      type: System.Reflection.Emit.ILGenerator\n      description: Returns an `ILGenerator` object for this method.\n  overload: System.Reflection.Emit.MethodBuilder.GetILGenerator*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The method should not have a body because of its <xref href=\\\"System.Reflection.MethodAttributes\\\"></xref> or <xref href=\\\"System.Reflection.MethodImplAttributes\\\"></xref> flags, for example because it has the <xref href=\\\"System.Reflection.MethodAttributes.PinvokeImpl\\\"></xref> flag.  \\n  \\n -or-  \\n  \\n The method is a generic method, but not a generic method definition. That is, the <xref href=\\\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\\\"></xref> property is `true`, but the <xref href=\\\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\\\"></xref> property is `false`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)\n  commentId: M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)\n  id: GetILGenerator(System.Int32)\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: GetILGenerator(Int32)\n  nameWithType: MethodBuilder.GetILGenerator(Int32)\n  fullName: MethodBuilder.GetILGenerator(Int32)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns an `ILGenerator` for this method with the specified Microsoft intermediate language (MSIL) stream size.\n  remarks: ''\n  example:\n  - \"The code sample below demonstrates the contextual usage of the `GetILGenerator` method, creating and emitting a dynamic assembly that will calculate the dot product of two points in 3D space.  \\n  \\n [!code-cpp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CPP/source.cpp#1)]\\n [!code-csharp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Reflection.Emit.ILGenerator GetILGenerator (int size);\n    parameters:\n    - id: size\n      type: System.Int32\n      description: The size of the MSIL stream, in bytes.\n    return:\n      type: System.Reflection.Emit.ILGenerator\n      description: Returns an `ILGenerator` object for this method.\n  overload: System.Reflection.Emit.MethodBuilder.GetILGenerator*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The method should not have a body because of its <xref href=\\\"System.Reflection.MethodAttributes\\\"></xref> or <xref href=\\\"System.Reflection.MethodImplAttributes\\\"></xref> flags, for example because it has the <xref href=\\\"System.Reflection.MethodAttributes.PinvokeImpl\\\"></xref> flag.  \\n  \\n -or-  \\n  \\n The method is a generic method, but not a generic method definition. That is, the <xref href=\\\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\\\"></xref> property is `true`, but the <xref href=\\\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\\\"></xref> property is `false`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags\n  commentId: M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags\n  id: GetMethodImplementationFlags\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: GetMethodImplementationFlags()\n  nameWithType: MethodBuilder.GetMethodImplementationFlags()\n  fullName: MethodBuilder.GetMethodImplementationFlags()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the implementation flags for the method.\n  syntax:\n    content: public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();\n    parameters: []\n    return:\n      type: System.Reflection.MethodImplAttributes\n      description: Returns the implementation flags for the method.\n  overload: System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.GetModule\n  commentId: M:System.Reflection.Emit.MethodBuilder.GetModule\n  id: GetModule\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: GetModule()\n  nameWithType: MethodBuilder.GetModule()\n  fullName: MethodBuilder.GetModule()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a reference to the module that contains this method.\n  remarks: ''\n  example:\n  - \"The sample code below illustrates the usage of the `GetModule` method to retrieve information about a dynamically-generated module.  \\n  \\n [!code-cpp[System.Reflection.Emit.MethodBuilder.GetModule#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetModule/CPP/source3.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.MethodBuilder.GetModule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetModule/CS/source3.cs#1)]\\n [!code-vb[System.Reflection.Emit.MethodBuilder.GetModule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetModule/VB/source3.vb#1)]\"\n  syntax:\n    content: public System.Reflection.Module GetModule ();\n    parameters: []\n    return:\n      type: System.Reflection.Module\n      description: Returns a reference to the module that contains this method.\n  overload: System.Reflection.Emit.MethodBuilder.GetModule*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.GetParameters\n  commentId: M:System.Reflection.Emit.MethodBuilder.GetParameters\n  id: GetParameters\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: GetParameters()\n  nameWithType: MethodBuilder.GetParameters()\n  fullName: MethodBuilder.GetParameters()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the parameters of this method.\n  remarks: ''\n  example:\n  - \"The code sample below illustrates the use of `GetParameters` to discover information on the parameters passed to a dynamically-generated method.  \\n  \\n [!code-cpp[System.Reflection.Emit.MethodBuilder.GetParameters Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetParameters Example/CPP/source4.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.MethodBuilder.GetParameters Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetParameters Example/CS/source4.cs#1)]\\n [!code-vb[System.Reflection.Emit.MethodBuilder.GetParameters Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetParameters Example/VB/source4.vb#1)]\"\n  syntax:\n    content: public override System.Reflection.ParameterInfo[] GetParameters ();\n    parameters: []\n    return:\n      type: System.Reflection.ParameterInfo[]\n      description: An array of `ParameterInfo` objects that represent the parameters of the method.\n  overload: System.Reflection.Emit.MethodBuilder.GetParameters*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported. Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call `GetParameters` on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.GetToken\n  commentId: M:System.Reflection.Emit.MethodBuilder.GetToken\n  id: GetToken\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: GetToken()\n  nameWithType: MethodBuilder.GetToken()\n  fullName: MethodBuilder.GetToken()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the `MethodToken` that represents the token for this method.\n  syntax:\n    content: public System.Reflection.Emit.MethodToken GetToken ();\n    parameters: []\n    return:\n      type: System.Reflection.Emit.MethodToken\n      description: Returns the `MethodToken` of this method.\n  overload: System.Reflection.Emit.MethodBuilder.GetToken*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.InitLocals\n  commentId: P:System.Reflection.Emit.MethodBuilder.InitLocals\n  id: InitLocals\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: InitLocals\n  nameWithType: MethodBuilder.InitLocals\n  fullName: MethodBuilder.InitLocals\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets or sets a Boolean value that specifies whether the local variables in this method are zero initialized. The default value of this property is `true`.\n  remarks: If this property is set to `true`, the emitted MSIL includes initialization of local variables. If it is set to `false`, local variables are not initialized and the generated code is unverifiable.\n  syntax:\n    content: public bool InitLocals { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the local variables in this method should be zero initialized; otherwise `false`.'\n  overload: System.Reflection.Emit.MethodBuilder.InitLocals*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`. (Get or set.)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  commentId: M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  id: Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)\n  nameWithType: MethodBuilder.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)\n  fullName: MethodBuilder.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Dynamically invokes the method reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.\n  remarks: \"If the method is static, the `obj` parameter is ignored. For non-static methods, `obj` should be an instance of a class that inherits or declares the method and must be the same type as this class. If the method has no parameters, the value of `parameters` should be `null`. Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters for the method reflected by this instance.  \\n  \\n> [!NOTE]\\n>  Access restrictions are ignored for fully-trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully-trusted.\"\n  syntax:\n    content: public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object on which to invoke the specified method. If the method is static, this parameter is ignored.\n    - id: invokeAttr\n      type: System.Reflection.BindingFlags\n      description: 'This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on.'\n    - id: binder\n      type: System.Reflection.Binder\n      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If binder is `null`, the default binder is used. For more details, see <xref href=\"System.Reflection.Binder\"></xref>.\n    - id: parameters\n      type: System.Object[]\n      description: An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this should be `null`.\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: An instance of <xref href=\"System.Globalization.CultureInfo\"></xref> used to govern the coercion of types. If this is null, the <xref href=\"System.Globalization.CultureInfo\"></xref> for the current thread is used. (Note that this is necessary to, for example, convert a <xref href=\"System.String\"></xref> that represents 1000 to a <xref href=\"System.Double\"></xref> value, since 1000 is represented differently by different cultures.)\n    return:\n      type: System.Object\n      description: Returns an object containing the return value of the invoked method.\n  overload: System.Reflection.Emit.MethodBuilder.Invoke*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported. Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call <xref href=\"System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\"></xref> on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)\n  id: IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: IsDefined(Type, Boolean)\n  nameWithType: MethodBuilder.IsDefined(Type, Boolean)\n  fullName: MethodBuilder.IsDefined(Type, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Checks if the specified custom attribute type is defined.\n  syntax:\n    content: public override bool IsDefined (Type attributeType, bool inherit);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: The custom attribute type.\n    - id: inherit\n      type: System.Boolean\n      description: Specifies whether to search this member's inheritance chain to find the custom attributes.\n    return:\n      type: System.Boolean\n      description: '`true` if the specified custom attribute type is defined; otherwise, `false`.'\n  overload: System.Reflection.Emit.MethodBuilder.IsDefined*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported. Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call <xref href=\"System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)\"></xref> on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.IsGenericMethod\n  commentId: P:System.Reflection.Emit.MethodBuilder.IsGenericMethod\n  id: IsGenericMethod\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: IsGenericMethod\n  nameWithType: MethodBuilder.IsGenericMethod\n  fullName: MethodBuilder.IsGenericMethod\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a value indicating whether the method is a generic method.\n  remarks: A method is generic if it has type parameters. You can make a method generic by calling the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method to add type parameters. This change cannot be reversed.\n  example:\n  - \"The following code example displays the status of a method. This code is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.  \\n  \\n [!code-cpp[GenericMethodBuilder#7](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#7)]\\n [!code-csharp[GenericMethodBuilder#7](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#7)]\\n [!code-vb[GenericMethodBuilder#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#7)]\"\n  syntax:\n    content: public override bool IsGenericMethod { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the method is generic; otherwise, `false`.'\n  overload: System.Reflection.Emit.MethodBuilder.IsGenericMethod*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\n  commentId: P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\n  id: IsGenericMethodDefinition\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: IsGenericMethodDefinition\n  nameWithType: MethodBuilder.IsGenericMethodDefinition\n  fullName: MethodBuilder.IsGenericMethodDefinition\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a value indicating whether the current <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> object represents the definition of a generic method.\n  remarks: A <xref:System.Reflection.Emit.MethodBuilder> can only be used to create generic method definitions; it cannot be used to create a constructed generic method directly. However, a subclass of <xref:System.Reflection.Emit.MethodBuilder> might represent a constructed generic method.\n  example:\n  - \"The following code example displays the status of a method. This code is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.  \\n  \\n [!code-cpp[GenericMethodBuilder#7](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#7)]\\n [!code-csharp[GenericMethodBuilder#7](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#7)]\\n [!code-vb[GenericMethodBuilder#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#7)]\"\n  syntax:\n    content: public override bool IsGenericMethodDefinition { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the current <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> object represents the definition of a generic method; otherwise, `false`.'\n  overload: System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.IsSecurityCritical\n  commentId: P:System.Reflection.Emit.MethodBuilder.IsSecurityCritical\n  id: IsSecurityCritical\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: IsSecurityCritical\n  nameWithType: MethodBuilder.IsSecurityCritical\n  fullName: MethodBuilder.IsSecurityCritical\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases.\n  remarks: To determine whether a method in a dynamic assembly is security-critical, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecurityCritical%2A> property on the resulting <xref:System.Reflection.MethodInfo>.\n  syntax:\n    content: public override bool IsSecurityCritical { get; }\n    return:\n      type: System.Boolean\n      description: Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases.\n  overload: System.Reflection.Emit.MethodBuilder.IsSecurityCritical*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases. This property is not supported in dynamic assemblies.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical\n  commentId: P:System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical\n  id: IsSecuritySafeCritical\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: IsSecuritySafeCritical\n  nameWithType: MethodBuilder.IsSecuritySafeCritical\n  fullName: MethodBuilder.IsSecuritySafeCritical\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases.\n  remarks: To determine whether a method in a dynamic assembly is security-safe-critical, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A> property on the resulting <xref:System.Reflection.MethodInfo>.\n  syntax:\n    content: public override bool IsSecuritySafeCritical { get; }\n    return:\n      type: System.Boolean\n      description: Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases.\n  overload: System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases. This property is not supported in dynamic assemblies.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.IsSecurityTransparent\n  commentId: P:System.Reflection.Emit.MethodBuilder.IsSecurityTransparent\n  id: IsSecurityTransparent\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: IsSecurityTransparent\n  nameWithType: MethodBuilder.IsSecurityTransparent\n  fullName: MethodBuilder.IsSecurityTransparent\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases.\n  remarks: To determine whether a method in a dynamic assembly is security-transparent, complete the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName>, call the <xref:System.Type.GetMethod%2A> method on the completed type, and get the <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> property on the resulting <xref:System.Reflection.MethodInfo>.\n  syntax:\n    content: public override bool IsSecurityTransparent { get; }\n    return:\n      type: System.Boolean\n      description: Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases.\n  overload: System.Reflection.Emit.MethodBuilder.IsSecurityTransparent*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases. This property is not supported in dynamic assemblies.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])\n  commentId: M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])\n  id: MakeGenericMethod(System.Type[])\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: MakeGenericMethod(Type[])\n  nameWithType: MethodBuilder.MakeGenericMethod(Type[])\n  fullName: MethodBuilder.MakeGenericMethod(Type[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a generic method constructed from the current generic method definition using the specified generic type arguments.\n  remarks: When you are emitting dynamic code, you might need to emit a call to a method constructed from the generic method definition represented by a <xref:System.Reflection.Emit.MethodBuilder>, before the enclosing type has been completed. You can use the <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> method to create a <xref:System.Reflection.MethodInfo> for such a constructed method, and use the <xref:System.Reflection.MethodInfo> in the emitted call.\n  example:\n  - \"The following code example creates a constructed method from an incomplete generic method definition in an incomplete type.  \\n  \\n The example creates a transient assembly and module with a single type, adds a method `M`, and makes the method generic by adding a type parameter T using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method. The type parameter is used as the type of the method's parameter, and also as its return type. The generic method definition is not given a body, and the enclosing type is not completed. The <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> method is then used to make the constructed method `M<String>` (`M(Of String)` in Visual Basic). The example code has no output, because the subclass of <xref:System.Reflection.MethodInfo> returned by the <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> method does not allow reflection over its parameters.  \\n  \\n> [!NOTE]\\n>  For another code example that uses <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A>, see <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A>. <xref:System.Reflection.Emit.MethodBuilder.MakeGenericMethod%2A> is also used extensively when emitting code that uses generic types. See [How to: Define a Generic Method with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-method-with-reflection-emit.md).  \\n  \\n [!code-cpp[MethodBuilder.MakeGenericMethod#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBuilder.MakeGenericMethod/cpp/source.cpp#1)]\\n [!code-csharp[MethodBuilder.MakeGenericMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBuilder.MakeGenericMethod/cs/source.cs#1)]\\n [!code-vb[MethodBuilder.MakeGenericMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBuilder.MakeGenericMethod/vb/source.vb#1)]\"\n  syntax:\n    content: public override System.Reflection.MethodInfo MakeGenericMethod (Type[] typeArguments);\n    parameters:\n    - id: typeArguments\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects that represent the type arguments for the generic method.\n    return:\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> representing the generic method constructed from the current generic method definition using the specified generic type arguments.\n  overload: System.Reflection.Emit.MethodBuilder.MakeGenericMethod*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.MethodHandle\n  commentId: P:System.Reflection.Emit.MethodBuilder.MethodHandle\n  id: MethodHandle\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: MethodHandle\n  nameWithType: MethodBuilder.MethodHandle\n  fullName: MethodBuilder.MethodHandle\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Retrieves the internal handle for the method. Use this handle to access the underlying metadata handle.\n  syntax:\n    content: public override RuntimeMethodHandle MethodHandle { get; }\n    return:\n      type: System.RuntimeMethodHandle\n      description: Read-only. The internal handle for the method. Use this handle to access the underlying metadata handle.\n  overload: System.Reflection.Emit.MethodBuilder.MethodHandle*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported. Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\"></xref> and call <xref href=\"System.Reflection.MethodBase.MethodHandle\"></xref> on the returned <xref href=\"System.Reflection.MethodInfo\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.MethodImplementationFlags\n  commentId: P:System.Reflection.Emit.MethodBuilder.MethodImplementationFlags\n  id: MethodImplementationFlags\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: MethodImplementationFlags\n  nameWithType: MethodBuilder.MethodImplementationFlags\n  fullName: MethodBuilder.MethodImplementationFlags\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }\n    return:\n      type: System.Reflection.MethodImplAttributes\n      description: ''\n  overload: System.Reflection.Emit.MethodBuilder.MethodImplementationFlags*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.Module\n  commentId: P:System.Reflection.Emit.MethodBuilder.Module\n  id: Module\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: Module\n  nameWithType: MethodBuilder.Module\n  fullName: MethodBuilder.Module\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Gets the module in which the current method is being defined.\n  remarks: \"This property is provided as a convenience. It is equivalent to using the <xref:System.Reflection.Emit.MethodBuilder.DeclaringType%2A> property to get the type in which the method is being declared, and then calling the <xref:System.Type.Module%2A> property of the resulting <xref:System.Type> object.  \\n  \\n This property is also equivalent to calling <xref:System.Reflection.Emit.MethodBuilder.GetModule%2A>.\"\n  syntax:\n    content: public override System.Reflection.Module Module { get; }\n    return:\n      type: System.Reflection.Module\n      description: The <xref href=\"System.Reflection.Module\"></xref> in which the member represented by the current <xref href=\"System.Reflection.MemberInfo\"></xref> is being defined.\n  overload: System.Reflection.Emit.MethodBuilder.Module*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.Name\n  commentId: P:System.Reflection.Emit.MethodBuilder.Name\n  id: Name\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: Name\n  nameWithType: MethodBuilder.Name\n  fullName: MethodBuilder.Name\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the name of this method.\n  syntax:\n    content: public override string Name { get; }\n    return:\n      type: System.String\n      description: Read-only. Retrieves a string containing the simple name of this method.\n  overload: System.Reflection.Emit.MethodBuilder.Name*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.ReflectedType\n  commentId: P:System.Reflection.Emit.MethodBuilder.ReflectedType\n  id: ReflectedType\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: ReflectedType\n  nameWithType: MethodBuilder.ReflectedType\n  fullName: MethodBuilder.ReflectedType\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Retrieves the class that was used in reflection to obtain this object.\n  syntax:\n    content: public override Type ReflectedType { get; }\n    return:\n      type: System.Type\n      description: Read-only. The type used to obtain this method.\n  overload: System.Reflection.Emit.MethodBuilder.ReflectedType*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.ReturnParameter\n  commentId: P:System.Reflection.Emit.MethodBuilder.ReturnParameter\n  id: ReturnParameter\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: ReturnParameter\n  nameWithType: MethodBuilder.ReturnParameter\n  fullName: MethodBuilder.ReturnParameter\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a <xref href=\"System.Reflection.ParameterInfo\"></xref> object that contains information about the return type of the method, such as whether the return type has custom modifiers.\n  remarks: Compiler designers can use the <xref:System.Reflection.ParameterInfo> object returned by this property to discover whether custom modifiers, such as <xref:Microsoft.VisualC.IsConstModifier>, have been applied to the return type.\n  syntax:\n    content: public override System.Reflection.ParameterInfo ReturnParameter { get; }\n    return:\n      type: System.Reflection.ParameterInfo\n      description: A <xref href=\"System.Reflection.ParameterInfo\"></xref> object that contains information about the return type.\n  overload: System.Reflection.Emit.MethodBuilder.ReturnParameter*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The declaring type has not been created.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.ReturnType\n  commentId: P:System.Reflection.Emit.MethodBuilder.ReturnType\n  id: ReturnType\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: ReturnType\n  nameWithType: MethodBuilder.ReturnType\n  fullName: MethodBuilder.ReturnType\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the return type of the method represented by this <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref>.\n  remarks: >-\n    > [!NOTE]\n\n    >  Starting with the .NET Framework 2.0 and the .NET Compact Framework 2.0, this member is inherited from the base class, <xref:System.Reflection.MethodInfo>. See <xref:System.Reflection.MethodInfo.ReturnType%2A?displayProperty=fullName>.\n  syntax:\n    content: public override Type ReturnType { get; }\n    return:\n      type: System.Type\n      description: The return type of the method.\n  overload: System.Reflection.Emit.MethodBuilder.ReturnType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes\n  commentId: P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes\n  id: ReturnTypeCustomAttributes\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: ReturnTypeCustomAttributes\n  nameWithType: MethodBuilder.ReturnTypeCustomAttributes\n  fullName: MethodBuilder.ReturnTypeCustomAttributes\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the custom attributes of the method's return type.\n  remarks: This method always returns `null`. Get the <xref:System.Reflection.MethodInfo> after the containing <xref:System.Type> has been created and invoked <xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A> on the <xref:System.Reflection.MethodInfo>.\n  syntax:\n    content: public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }\n    return:\n      type: System.Reflection.ICustomAttributeProvider\n      description: Read-only. The custom attributes of the method's return type.\n  overload: System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  commentId: M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: SetCustomAttribute(ConstructorInfo, Byte[])\n  nameWithType: MethodBuilder.SetCustomAttribute(ConstructorInfo, Byte[])\n  fullName: MethodBuilder.SetCustomAttribute(ConstructorInfo, Byte[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets a custom attribute using a specified custom attribute blob.\n  remarks: \"For details on how to format `binaryAttribute`, see the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  \\n  \\n The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method can interact with the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method when the two methods are used in combination. See the Remarks section of the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method for details.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);\n    parameters:\n    - id: con\n      type: System.Reflection.ConstructorInfo\n      description: The constructor for the custom attribute.\n    - id: binaryAttribute\n      type: System.Byte[]\n      description: A byte blob representing the attributes.\n  overload: System.Reflection.Emit.MethodBuilder.SetCustomAttribute*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>con</code> or <code>binaryAttribute</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  commentId: M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: SetCustomAttribute(CustomAttributeBuilder)\n  nameWithType: MethodBuilder.SetCustomAttribute(CustomAttributeBuilder)\n  fullName: MethodBuilder.SetCustomAttribute(CustomAttributeBuilder)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets a custom attribute using a custom attribute builder.\n  remarks: The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method can interact with the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method when the two methods are used in combination. See the Remarks section of the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method for details.\n  syntax:\n    content: public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);\n    parameters:\n    - id: customBuilder\n      type: System.Reflection.Emit.CustomAttributeBuilder\n      description: An instance of a helper class to describe the custom attribute.\n  overload: System.Reflection.Emit.MethodBuilder.SetCustomAttribute*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>customBuilder</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)\n  commentId: M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)\n  id: SetImplementationFlags(System.Reflection.MethodImplAttributes)\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: SetImplementationFlags(MethodImplAttributes)\n  nameWithType: MethodBuilder.SetImplementationFlags(MethodImplAttributes)\n  fullName: MethodBuilder.SetImplementationFlags(MethodImplAttributes)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the implementation flags for this method.\n  remarks: \"When you use the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method in combination with the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method, be aware of potential interactions. For example, using the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method to add the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute also sets the <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> flag. If you subsequently call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method, the <xref:System.Reflection.MethodImplAttributes.PreserveSig> flag is overwritten. There are two ways to avoid this:  \\n  \\n-   Call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method before you call the <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method. The <xref:System.Reflection.Emit.MethodBuilder.SetCustomAttribute%2A> method always respects existing method implementation flags.  \\n  \\n-   When you set implementation flags, call the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A> method to retrieve the existing flags, use bitwise OR to add your flag, and then call the <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A> method.\"\n  example:\n  - \"The code sample below illustrates the contextual use of the `SetImplementationFlags` method to describe the implementation of MSIL in a method body.  \\n  \\n [!code-cpp[System.Reflection.Emit.MethodBuilder.SetImplementationFlags Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetImplementationFlags Example/CPP/source.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.MethodBuilder.SetImplementationFlags Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetImplementationFlags Example/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Emit.MethodBuilder.SetImplementationFlags Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetImplementationFlags Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void SetImplementationFlags (System.Reflection.MethodImplAttributes attributes);\n    parameters:\n    - id: attributes\n      type: System.Reflection.MethodImplAttributes\n      description: The implementation flags to set.\n  overload: System.Reflection.Emit.MethodBuilder.SetImplementationFlags*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The containing type was previously created using <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\"></xref>.  \\n  \\n -or-  \\n  \\n For the current method, the <xref href=\\\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\\\"></xref> property is `true`, but the <xref href=\\\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\\\"></xref> property is `false`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)\n  commentId: M:System.Reflection.Emit.MethodBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)\n  id: SetMarshal(System.Reflection.Emit.UnmanagedMarshal)\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: SetMarshal(UnmanagedMarshal)\n  nameWithType: MethodBuilder.SetMarshal(UnmanagedMarshal)\n  fullName: MethodBuilder.SetMarshal(UnmanagedMarshal)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets marshaling information for the return type of this method.\n  remarks: ''\n  example:\n  - \"The code sample below illustrates the contextual usage of the `SetMarshal` method to marshal the results of a method call as a different type.  \\n  \\n [!code-cpp[System.Reflection.Emit.MethodBuilder.SetMarshal Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetMarshal Example/CPP/source.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.MethodBuilder.SetMarshal Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetMarshal Example/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Emit.MethodBuilder.SetMarshal Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetMarshal Example/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"An alternate API is available: Emit the MarshalAs custom attribute instead.\")]\n\n      public void SetMarshal (System.Reflection.Emit.UnmanagedMarshal unmanagedMarshal);\n    parameters:\n    - id: unmanagedMarshal\n      type: System.Reflection.Emit.UnmanagedMarshal\n      description: Marshaling information for the return type of this method.\n  overload: System.Reflection.Emit.MethodBuilder.SetMarshal*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The containing type was previously created using <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\"></xref>.  \\n  \\n -or-  \\n  \\n For the current method, the <xref href=\\\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\\\"></xref> property is `true`, but the <xref href=\\\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\\\"></xref> property is `false`.\"\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})\n  commentId: M:System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})\n  id: SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: SetMethodBody(Byte[], Int32, Byte[], IEnumerable<ExceptionHandler>, IEnumerable<Int32>)\n  nameWithType: MethodBuilder.SetMethodBody(Byte[], Int32, Byte[], IEnumerable<ExceptionHandler>, IEnumerable<Int32>)\n  fullName: MethodBuilder.SetMethodBody(Byte[], Int32, Byte[], IEnumerable<ExceptionHandler>, IEnumerable<Int32>)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Creates the body of the method by using a specified byte array of Microsoft intermediate language (MSIL) instructions.\n  syntax:\n    content: public void SetMethodBody (byte[] il, int maxStack, byte[] localSignature, System.Collections.Generic.IEnumerable<System.Reflection.Emit.ExceptionHandler> exceptionHandlers, System.Collections.Generic.IEnumerable<int> tokenFixups);\n    parameters:\n    - id: il\n      type: System.Byte[]\n      description: An array that contains valid MSIL instructions.\n    - id: maxStack\n      type: System.Int32\n      description: The maximum stack evaluation depth.\n    - id: localSignature\n      type: System.Byte[]\n      description: An array of bytes that contain the serialized local variable structure. Specify `null` if the method has no local variables.\n    - id: exceptionHandlers\n      type: System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler}\n      description: A collection that contains the exception handlers for the method. Specify `null` if the method has no exception handlers.\n    - id: tokenFixups\n      type: System.Collections.Generic.IEnumerable{System.Int32}\n      description: A collection of values that represent offsets in <code>il</code>, each of which specifies the beginning of a token that may be modified. Specify `null` if the method has no tokens that have to be modified.\n  overload: System.Reflection.Emit.MethodBuilder.SetMethodBody*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>il</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>maxStack</code> is negative.  \\n  \\n -or-  \\n  \\n One of <code>exceptionHandlers</code> specifies an offset outside of <code>il</code>.  \\n  \\n -or-  \\n  \\n One of <code>tokenFixups</code> specifies an offset that is outside the <code>il</code> array.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The containing type was previously created using the <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\"></xref> method.  \\n  \\n -or-  \\n  \\n This method was called previously on this <xref href=\\\"System.Reflection.Emit.MethodBuilder\\\"></xref> object.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])\n  commentId: M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])\n  id: SetParameters(System.Type[])\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: SetParameters(Type[])\n  nameWithType: MethodBuilder.SetParameters(Type[])\n  fullName: MethodBuilder.SetParameters(Type[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the number and types of parameters for a method.\n  remarks: \"If the number and types of the parameters are known when the method is defined, they can be set using any overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method that accepts an array of parameter types. However, a generic method can have parameters whose types are specified by one or more of its own generic type parameters, which cannot be defined until after the method has been defined. Use this method to set the parameter types in that case.  \\n  \\n If the return type has optional or required custom modifiers, such as <xref:System.Runtime.CompilerServices.IsConst>, use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overload.  \\n  \\n Calling this method replaces any parameter types that were set using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method.\"\n  example:\n  - \"The following code example uses the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method to make a method generic. The <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> method is used to give the method one parameter, whose type will be specified by the first generic type parameter. The <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> method is used to give the method a return type, specified by the second generic type parameter.  \\n  \\n This code is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.  \\n  \\n [!code-cpp[GenericMethodBuilder#3](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#3)]\\n [!code-csharp[GenericMethodBuilder#3](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#3)]\\n [!code-vb[GenericMethodBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#3)]  \\n[!code-cpp[GenericMethodBuilder#5](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#5)]\\n[!code-csharp[GenericMethodBuilder#5](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#5)]\\n[!code-vb[GenericMethodBuilder#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#5)]\"\n  syntax:\n    content: public void SetParameters (Type[] parameterTypes);\n    parameters:\n    - id: parameterTypes\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects representing the parameter types.\n  overload: System.Reflection.Emit.MethodBuilder.SetParameters*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The current method is generic, but is not a generic method definition. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)\n  commentId: M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)\n  id: SetReturnType(System.Type)\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: SetReturnType(Type)\n  nameWithType: MethodBuilder.SetReturnType(Type)\n  fullName: MethodBuilder.SetReturnType(Type)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the return type of the method.\n  remarks: \"Use this method to set the return type of a generic method, when the return type is specified by one of the generic type parameters of the method. If the return type has optional or required custom modifiers, such as <xref:System.Runtime.CompilerServices.IsConst>, use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overload.  \\n  \\n Calling this method replaces a return type established using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method.\"\n  example:\n  - \"The following code example uses the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method to make a method generic. The <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> method is used to give the method one parameter, whose type will be specified by the first generic type parameter. The <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> method is used to give the method a return type, specified by the second generic type parameter.  \\n  \\n This code is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.  \\n  \\n [!code-cpp[GenericMethodBuilder#3](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#3)]\\n [!code-csharp[GenericMethodBuilder#3](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#3)]\\n [!code-vb[GenericMethodBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#3)]  \\n[!code-cpp[GenericMethodBuilder#5](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#5)]\\n[!code-csharp[GenericMethodBuilder#5](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#5)]\\n[!code-vb[GenericMethodBuilder#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#5)]\"\n  syntax:\n    content: public void SetReturnType (Type returnType);\n    parameters:\n    - id: returnType\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that represents the return type of the method.\n  overload: System.Reflection.Emit.MethodBuilder.SetReturnType*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The current method is generic, but is not a generic method definition. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  commentId: M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  id: SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: SetSignature(Type, Type[], Type[], Type[], Type[][], Type[][])\n  nameWithType: MethodBuilder.SetSignature(Type, Type[], Type[], Type[], Type[][], Type[][])\n  fullName: MethodBuilder.SetSignature(Type, Type[], Type[], Type[], Type[][], Type[][])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the method signature, including the return type, the parameter types, and the required and optional custom modifiers of the return type and parameter types.\n  remarks: \"If the return type and the number and types of the parameters are known when the method is defined, they can be established using any overload of the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method that accepts an array of parameter types. However, a generic method can have parameters whose types are specified by one or more of its own generic type parameters, which cannot be defined until after the method has been defined. Use this method to set the parameter types in that case.  \\n  \\n If neither the return type nor the parameter types have optional or required custom modifiers, such as <xref:Microsoft.VisualC.IsConstModifier>, you can use the <xref:System.Reflection.Emit.MethodBuilder.SetReturnType%2A> and <xref:System.Reflection.Emit.MethodBuilder.SetParameters%2A> methods.  \\n  \\n Calling this method replaces the parameters and return type established using the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A?displayProperty=fullName> method.\"\n  example:\n  - \"The following code example contains source code for a generic class named Sample that has a type parameter `T`. The class has a field named `Field`, of type `T`, and a generic method `GM` with its own type parameter, `U`. Method `GM` creates an instance of Sample, substituting its own type parameter `U` for the type parameter of Sample, and stores its input parameter in `Field`. This source code is compiled but not used; you can view it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), and compare it to the code emitted by class `Example`.  \\n  \\n The code in class `Example` demonstrates the use of the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A> method in emitting generic code. The `Main` method of class `Example` creates a dynamic assembly containing a class named `Sample`, and uses the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=fullName> method to make it generic by adding a type parameter named `T`. A default constructor and a field named `Field`, of type `T`, are added to class `Sample`. A method `GM` is added, and turned into a generic method using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method. The type parameter of `GM` is named `U`. Once the type parameter is defined, the signature of `GM` is added, using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A> method. There is no return type, and no required or custom modifiers, so all the parameters of this method are `null` except `parameterTypes`, which sets the type of the only parameter of the method; this is set to the method's type parameter, `U`. The body of the method creates an instance of the constructed type `Sample<U>` (`Sample(Of U)` in Visual Basic), assigns the method's parameter to `Field`, and then prints the value of `Field`. A dummy type is defined, to hold the entry point method `Main`. In the body of `Main`, the static `GM` method is invoked on the constructed generic type `Sample<int>` (`Sample(Of Integer)` in Visual Basic), with type <xref:System.String> substituted for `U`. The <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A?displayProperty=fullName> method is used to create a <xref:System.Reflection.MethodInfo> for the static `GM` method of the constructed generic type `Sample<U>`, and the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=fullName> method is then used to create a <xref:System.Reflection.MethodInfo> that can emitted in a method call.  \\n  \\n When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe. You can run TypeBuilderGetFieldExample.exe, and you can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to compare the emitted code with the code for the `Sample` class that is compiled into the code example itself.  \\n  \\n [!code-csharp[TypeBuilder.GetField_Generic#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.GetField_Generic/cs/source.cs#1)]\\n [!code-vb[TypeBuilder.GetField_Generic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.GetField_Generic/VB/source.vb#1)]\"\n  syntax:\n    content: public void SetSignature (Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);\n    parameters:\n    - id: returnType\n      type: System.Type\n      description: The return type of the method.\n    - id: returnTypeRequiredCustomModifiers\n      type: System.Type[]\n      description: An array of types representing the required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method. If the return type has no required custom modifiers, specify `null`.\n    - id: returnTypeOptionalCustomModifiers\n      type: System.Type[]\n      description: An array of types representing the optional custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method. If the return type has no optional custom modifiers, specify `null`.\n    - id: parameterTypes\n      type: System.Type[]\n      description: The types of the parameters of the method.\n    - id: parameterTypeRequiredCustomModifiers\n      type: System.Type[][]\n      description: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no required custom modifiers, specify `null` instead of an array of types. If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays.\n    - id: parameterTypeOptionalCustomModifiers\n      type: System.Type[][]\n      description: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types. If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays.\n  overload: System.Reflection.Emit.MethodBuilder.SetSignature*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The current method is generic, but is not a generic method definition. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\"></xref> property is `false`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])\n  commentId: M:System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])\n  id: SetSymCustomAttribute(System.String,System.Byte[])\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: SetSymCustomAttribute(String, Byte[])\n  nameWithType: MethodBuilder.SetSymCustomAttribute(String, Byte[])\n  fullName: MethodBuilder.SetSymCustomAttribute(String, Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Set a symbolic custom attribute using a blob.\n  remarks: Unlike the metadata custom attribute, this custom attribute is associated with a symbol writer.\n  example:\n  - \"The code sample below illustrates the contextual usage of the `SetSymCustomAttribute` method to set the byte values for the name and key of a custom attribute attached to a method.  \\n  \\n [!code-cpp[System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example/CPP/source2.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example/CS/source2.cs#1)]\\n [!code-vb[System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.SetSymCustomAttribute Example/VB/source2.vb#1)]\"\n  syntax:\n    content: public void SetSymCustomAttribute (string name, byte[] data);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the symbolic custom attribute.\n    - id: data\n      type: System.Byte[]\n      description: The byte blob that represents the value of the symbolic custom attribute.\n  overload: System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The containing type was previously created using <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\"></xref>.  \\n  \\n -or-  \\n  \\n The module that contains this method is not a debug module.  \\n  \\n -or-  \\n  \\n For the current method, the <xref href=\\\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\\\"></xref> property is `true`, but the <xref href=\\\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\\\"></xref> property is `false`.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.Signature\n  commentId: P:System.Reflection.Emit.MethodBuilder.Signature\n  id: Signature\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: Signature\n  nameWithType: MethodBuilder.Signature\n  fullName: MethodBuilder.Signature\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the signature of the method.\n  syntax:\n    content: public string Signature { get; }\n    return:\n      type: System.String\n      description: Read-only. A String containing the signature of the method reflected by this `MethodBase` instance.\n  overload: System.Reflection.Emit.MethodBuilder.Signature*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.ToString\n  commentId: M:System.Reflection.Emit.MethodBuilder.ToString\n  id: ToString\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: MethodBuilder.ToString()\n  fullName: MethodBuilder.ToString()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns this `MethodBuilder` instance as a string.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: Returns a string containing the name, attributes, method signature, exceptions, and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.\n  overload: System.Reflection.Emit.MethodBuilder.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: _MethodBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MethodBuilder._MethodBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MethodBuilder._MethodBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Maps a set of names to a corresponding set of dispatch identifiers.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.\n  syntax:\n    content: void _MethodBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);\n    parameters:\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: rgszNames\n      type: System.IntPtr\n      description: Passed-in array of names to be mapped.\n    - id: cNames\n      type: System.UInt32\n      description: Count of the names to be mapped.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret the names.\n    - id: rgDispId\n      type: System.IntPtr\n      description: Caller-allocated array that receives the IDs corresponding to the names.\n  overload: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: _MethodBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MethodBuilder._MethodBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MethodBuilder._MethodBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.\n  syntax:\n    content: void _MethodBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);\n    parameters:\n    - id: iTInfo\n      type: System.UInt32\n      description: The type information to return.\n    - id: lcid\n      type: System.UInt32\n      description: The locale identifier for the type information.\n    - id: ppTInfo\n      type: System.IntPtr\n      description: Receives a pointer to the requested type information object.\n  overload: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount(System.UInt32@)\n  commentId: M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount(System.UInt32@)\n  id: System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount(System.UInt32@)\n  isEii: true\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: _MethodBuilder.GetTypeInfoCount(UInt32)\n  nameWithType: MethodBuilder._MethodBuilder.GetTypeInfoCount(UInt32)\n  fullName: MethodBuilder._MethodBuilder.GetTypeInfoCount(UInt32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.\n  syntax:\n    content: void _MethodBuilder.GetTypeInfoCount (out uint pcTInfo);\n    parameters:\n    - id: pcTInfo\n      type: System.UInt32\n      description: Points to a location that receives the number of type information interfaces provided by the object.\n  overload: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  commentId: M:System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  id: System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.MethodBuilder\n  langs:\n  - csharp\n  name: _MethodBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MethodBuilder._MethodBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MethodBuilder._MethodBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Provides access to properties and methods exposed by an object.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.\n  syntax:\n    content: void _MethodBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);\n    parameters:\n    - id: dispIdMember\n      type: System.UInt32\n      description: Identifies the member.\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret arguments.\n    - id: wFlags\n      type: System.Int16\n      description: Flags describing the context of the call.\n    - id: pDispParams\n      type: System.IntPtr\n      description: Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.\n    - id: pVarResult\n      type: System.IntPtr\n      description: Pointer to the location where the result is to be stored.\n    - id: pExcepInfo\n      type: System.IntPtr\n      description: Pointer to a structure that contains exception information.\n    - id: puArgErr\n      type: System.IntPtr\n      description: The index of the first argument that has an error.\n  overload: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.NotImplementedException\n  parent: System\n  isExternal: false\n  name: NotImplementedException\n  nameWithType: NotImplementedException\n  fullName: System.NotImplementedException\n- uid: System.Reflection.Emit.MethodBuilder.#ctor\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: MethodBuilder()\n  nameWithType: MethodBuilder.MethodBuilder()\n  fullName: MethodBuilder.MethodBuilder()\n- uid: System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: AddDeclarativeSecurity(SecurityAction, PermissionSet)\n  nameWithType: MethodBuilder.AddDeclarativeSecurity(SecurityAction, PermissionSet)\n  fullName: MethodBuilder.AddDeclarativeSecurity(SecurityAction, PermissionSet)\n- uid: System.Security.Permissions.SecurityAction\n  parent: System.Security.Permissions\n  isExternal: false\n  name: SecurityAction\n  nameWithType: SecurityAction\n  fullName: System.Security.Permissions.SecurityAction\n- uid: System.Security.PermissionSet\n  parent: System.Security\n  isExternal: false\n  name: PermissionSet\n  nameWithType: PermissionSet\n  fullName: System.Security.PermissionSet\n- uid: System.Reflection.Emit.MethodBuilder.Attributes\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: Attributes\n  nameWithType: MethodBuilder.Attributes\n  fullName: MethodBuilder.Attributes\n- uid: System.Reflection.MethodAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: MethodAttributes\n  nameWithType: MethodAttributes\n  fullName: System.Reflection.MethodAttributes\n- uid: System.Reflection.Emit.MethodBuilder.CallingConvention\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: CallingConvention\n  nameWithType: MethodBuilder.CallingConvention\n  fullName: MethodBuilder.CallingConvention\n- uid: System.Reflection.CallingConventions\n  parent: System.Reflection\n  isExternal: false\n  name: CallingConventions\n  nameWithType: CallingConventions\n  fullName: System.Reflection.CallingConventions\n- uid: System.Reflection.Emit.MethodBuilder.ContainsGenericParameters\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: ContainsGenericParameters\n  nameWithType: MethodBuilder.ContainsGenericParameters\n  fullName: MethodBuilder.ContainsGenericParameters\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: CreateMethodBody(Byte[], Int32)\n  nameWithType: MethodBuilder.CreateMethodBody(Byte[], Int32)\n  fullName: MethodBuilder.CreateMethodBody(Byte[], Int32)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.MethodBuilder.DeclaringType\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: DeclaringType\n  nameWithType: MethodBuilder.DeclaringType\n  fullName: MethodBuilder.DeclaringType\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: DefineGenericParameters(String[])\n  nameWithType: MethodBuilder.DefineGenericParameters(String[])\n  fullName: MethodBuilder.DefineGenericParameters(String[])\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder\n  name: GenericTypeParameterBuilder\n  nameWithType: GenericTypeParameterBuilder\n  fullName: System.Reflection.Emit.GenericTypeParameterBuilder\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder[]\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: GenericTypeParameterBuilder[]\n  nameWithType: GenericTypeParameterBuilder[]\n  fullName: System.Reflection.Emit.GenericTypeParameterBuilder[]\n  spec.csharp:\n  - uid: System.Reflection.Emit.GenericTypeParameterBuilder\n    name: GenericTypeParameterBuilder\n    nameWithType: GenericTypeParameterBuilder\n    fullName: System.Reflection.Emit.GenericTypeParameterBuilder\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.String\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.String[]\n  parent: System\n  isExternal: false\n  name: String[]\n  nameWithType: String[]\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: DefineParameter(Int32, ParameterAttributes, String)\n  nameWithType: MethodBuilder.DefineParameter(Int32, ParameterAttributes, String)\n  fullName: MethodBuilder.DefineParameter(Int32, ParameterAttributes, String)\n- uid: System.Reflection.Emit.ParameterBuilder\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: ParameterBuilder\n  nameWithType: ParameterBuilder\n  fullName: System.Reflection.Emit.ParameterBuilder\n- uid: System.Reflection.ParameterAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: ParameterAttributes\n  nameWithType: ParameterAttributes\n  fullName: System.Reflection.ParameterAttributes\n- uid: System.Reflection.Emit.MethodBuilder.Equals(System.Object)\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: MethodBuilder.Equals(Object)\n  fullName: MethodBuilder.Equals(Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Reflection.Emit.MethodBuilder.GetBaseDefinition\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: GetBaseDefinition()\n  nameWithType: MethodBuilder.GetBaseDefinition()\n  fullName: MethodBuilder.GetBaseDefinition()\n- uid: System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: MethodBuilder.GetCustomAttributes(Type, Boolean)\n  fullName: MethodBuilder.GetCustomAttributes(Type, Boolean)\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: GetCustomAttributes(Boolean)\n  nameWithType: MethodBuilder.GetCustomAttributes(Boolean)\n  fullName: MethodBuilder.GetCustomAttributes(Boolean)\n- uid: System.Reflection.Emit.MethodBuilder.GetGenericArguments\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: GetGenericArguments()\n  nameWithType: MethodBuilder.GetGenericArguments()\n  fullName: MethodBuilder.GetGenericArguments()\n- uid: System.Type[]\n  parent: System\n  isExternal: false\n  name: Type[]\n  nameWithType: Type[]\n  fullName: System.Type[]\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: GetGenericMethodDefinition()\n  nameWithType: MethodBuilder.GetGenericMethodDefinition()\n  fullName: MethodBuilder.GetGenericMethodDefinition()\n- uid: System.Reflection.Emit.MethodBuilder.GetHashCode\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: MethodBuilder.GetHashCode()\n  fullName: MethodBuilder.GetHashCode()\n- uid: System.Reflection.Emit.MethodBuilder.GetILGenerator\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: GetILGenerator()\n  nameWithType: MethodBuilder.GetILGenerator()\n  fullName: MethodBuilder.GetILGenerator()\n- uid: System.Reflection.Emit.ILGenerator\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: ILGenerator\n  nameWithType: ILGenerator\n  fullName: System.Reflection.Emit.ILGenerator\n- uid: System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: GetILGenerator(Int32)\n  nameWithType: MethodBuilder.GetILGenerator(Int32)\n  fullName: MethodBuilder.GetILGenerator(Int32)\n- uid: System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: GetMethodImplementationFlags()\n  nameWithType: MethodBuilder.GetMethodImplementationFlags()\n  fullName: MethodBuilder.GetMethodImplementationFlags()\n- uid: System.Reflection.MethodImplAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: MethodImplAttributes\n  nameWithType: MethodImplAttributes\n  fullName: System.Reflection.MethodImplAttributes\n- uid: System.Reflection.Emit.MethodBuilder.GetModule\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: GetModule()\n  nameWithType: MethodBuilder.GetModule()\n  fullName: MethodBuilder.GetModule()\n- uid: System.Reflection.Module\n  parent: System.Reflection\n  isExternal: false\n  name: Module\n  nameWithType: Module\n  fullName: System.Reflection.Module\n- uid: System.Reflection.Emit.MethodBuilder.GetParameters\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: GetParameters()\n  nameWithType: MethodBuilder.GetParameters()\n  fullName: MethodBuilder.GetParameters()\n- uid: System.Reflection.ParameterInfo\n  name: ParameterInfo\n  nameWithType: ParameterInfo\n  fullName: System.Reflection.ParameterInfo\n- uid: System.Reflection.ParameterInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: ParameterInfo[]\n  nameWithType: ParameterInfo[]\n  fullName: System.Reflection.ParameterInfo[]\n  spec.csharp:\n  - uid: System.Reflection.ParameterInfo\n    name: ParameterInfo\n    nameWithType: ParameterInfo\n    fullName: System.Reflection.ParameterInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.MethodBuilder.GetToken\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: GetToken()\n  nameWithType: MethodBuilder.GetToken()\n  fullName: MethodBuilder.GetToken()\n- uid: System.Reflection.Emit.MethodToken\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: MethodToken\n  nameWithType: MethodToken\n  fullName: System.Reflection.Emit.MethodToken\n- uid: System.Reflection.Emit.MethodBuilder.InitLocals\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: InitLocals\n  nameWithType: MethodBuilder.InitLocals\n  fullName: MethodBuilder.InitLocals\n- uid: System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)\n  nameWithType: MethodBuilder.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)\n  fullName: MethodBuilder.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)\n- uid: System.Reflection.BindingFlags\n  parent: System.Reflection\n  isExternal: false\n  name: BindingFlags\n  nameWithType: BindingFlags\n  fullName: System.Reflection.BindingFlags\n- uid: System.Reflection.Binder\n  parent: System.Reflection\n  isExternal: false\n  name: Binder\n  nameWithType: Binder\n  fullName: System.Reflection.Binder\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: IsDefined(Type, Boolean)\n  nameWithType: MethodBuilder.IsDefined(Type, Boolean)\n  fullName: MethodBuilder.IsDefined(Type, Boolean)\n- uid: System.Reflection.Emit.MethodBuilder.IsGenericMethod\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: IsGenericMethod\n  nameWithType: MethodBuilder.IsGenericMethod\n  fullName: MethodBuilder.IsGenericMethod\n- uid: System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: IsGenericMethodDefinition\n  nameWithType: MethodBuilder.IsGenericMethodDefinition\n  fullName: MethodBuilder.IsGenericMethodDefinition\n- uid: System.Reflection.Emit.MethodBuilder.IsSecurityCritical\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: IsSecurityCritical\n  nameWithType: MethodBuilder.IsSecurityCritical\n  fullName: MethodBuilder.IsSecurityCritical\n- uid: System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: IsSecuritySafeCritical\n  nameWithType: MethodBuilder.IsSecuritySafeCritical\n  fullName: MethodBuilder.IsSecuritySafeCritical\n- uid: System.Reflection.Emit.MethodBuilder.IsSecurityTransparent\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: IsSecurityTransparent\n  nameWithType: MethodBuilder.IsSecurityTransparent\n  fullName: MethodBuilder.IsSecurityTransparent\n- uid: System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: MakeGenericMethod(Type[])\n  nameWithType: MethodBuilder.MakeGenericMethod(Type[])\n  fullName: MethodBuilder.MakeGenericMethod(Type[])\n- uid: System.Reflection.Emit.MethodBuilder.MethodHandle\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: MethodHandle\n  nameWithType: MethodBuilder.MethodHandle\n  fullName: MethodBuilder.MethodHandle\n- uid: System.RuntimeMethodHandle\n  parent: System\n  isExternal: false\n  name: RuntimeMethodHandle\n  nameWithType: RuntimeMethodHandle\n  fullName: System.RuntimeMethodHandle\n- uid: System.Reflection.Emit.MethodBuilder.MethodImplementationFlags\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: MethodImplementationFlags\n  nameWithType: MethodBuilder.MethodImplementationFlags\n  fullName: MethodBuilder.MethodImplementationFlags\n- uid: System.Reflection.Emit.MethodBuilder.Module\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: Module\n  nameWithType: MethodBuilder.Module\n  fullName: MethodBuilder.Module\n- uid: System.Reflection.Emit.MethodBuilder.Name\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: Name\n  nameWithType: MethodBuilder.Name\n  fullName: MethodBuilder.Name\n- uid: System.Reflection.Emit.MethodBuilder.ReflectedType\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: ReflectedType\n  nameWithType: MethodBuilder.ReflectedType\n  fullName: MethodBuilder.ReflectedType\n- uid: System.Reflection.Emit.MethodBuilder.ReturnParameter\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: ReturnParameter\n  nameWithType: MethodBuilder.ReturnParameter\n  fullName: MethodBuilder.ReturnParameter\n- uid: System.Reflection.Emit.MethodBuilder.ReturnType\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: ReturnType\n  nameWithType: MethodBuilder.ReturnType\n  fullName: MethodBuilder.ReturnType\n- uid: System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: ReturnTypeCustomAttributes\n  nameWithType: MethodBuilder.ReturnTypeCustomAttributes\n  fullName: MethodBuilder.ReturnTypeCustomAttributes\n- uid: System.Reflection.ICustomAttributeProvider\n  parent: System.Reflection\n  isExternal: false\n  name: ICustomAttributeProvider\n  nameWithType: ICustomAttributeProvider\n  fullName: System.Reflection.ICustomAttributeProvider\n- uid: System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: SetCustomAttribute(ConstructorInfo, Byte[])\n  nameWithType: MethodBuilder.SetCustomAttribute(ConstructorInfo, Byte[])\n  fullName: MethodBuilder.SetCustomAttribute(ConstructorInfo, Byte[])\n- uid: System.Reflection.ConstructorInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ConstructorInfo\n  nameWithType: ConstructorInfo\n  fullName: System.Reflection.ConstructorInfo\n- uid: System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: SetCustomAttribute(CustomAttributeBuilder)\n  nameWithType: MethodBuilder.SetCustomAttribute(CustomAttributeBuilder)\n  fullName: MethodBuilder.SetCustomAttribute(CustomAttributeBuilder)\n- uid: System.Reflection.Emit.CustomAttributeBuilder\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: CustomAttributeBuilder\n  nameWithType: CustomAttributeBuilder\n  fullName: System.Reflection.Emit.CustomAttributeBuilder\n- uid: System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: SetImplementationFlags(MethodImplAttributes)\n  nameWithType: MethodBuilder.SetImplementationFlags(MethodImplAttributes)\n  fullName: MethodBuilder.SetImplementationFlags(MethodImplAttributes)\n- uid: System.Reflection.Emit.MethodBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: SetMarshal(UnmanagedMarshal)\n  nameWithType: MethodBuilder.SetMarshal(UnmanagedMarshal)\n  fullName: MethodBuilder.SetMarshal(UnmanagedMarshal)\n- uid: System.Reflection.Emit.UnmanagedMarshal\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: UnmanagedMarshal\n  nameWithType: UnmanagedMarshal\n  fullName: System.Reflection.Emit.UnmanagedMarshal\n- uid: System.Reflection.Emit.MethodBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: SetMethodBody(Byte[], Int32, Byte[], IEnumerable<ExceptionHandler>, IEnumerable<Int32>)\n  nameWithType: MethodBuilder.SetMethodBody(Byte[], Int32, Byte[], IEnumerable<ExceptionHandler>, IEnumerable<Int32>)\n  fullName: MethodBuilder.SetMethodBody(Byte[], Int32, Byte[], IEnumerable<ExceptionHandler>, IEnumerable<Int32>)\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Reflection.Emit.ExceptionHandler\n  name: ExceptionHandler\n  nameWithType: ExceptionHandler\n  fullName: System.Reflection.Emit.ExceptionHandler\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<ExceptionHandler>\n  nameWithType: IEnumerable<ExceptionHandler>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.Emit.ExceptionHandler>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Reflection.Emit.ExceptionHandler\n    name: ExceptionHandler\n    nameWithType: ExceptionHandler\n    fullName: System.Reflection.Emit.ExceptionHandler\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Generic.IEnumerable{System.Int32}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Int32>\n  nameWithType: IEnumerable<Int32>\n  fullName: System.Collections.Generic.IEnumerable<System.Int32>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: SetParameters(Type[])\n  nameWithType: MethodBuilder.SetParameters(Type[])\n  fullName: MethodBuilder.SetParameters(Type[])\n- uid: System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: SetReturnType(Type)\n  nameWithType: MethodBuilder.SetReturnType(Type)\n  fullName: MethodBuilder.SetReturnType(Type)\n- uid: System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: SetSignature(Type, Type[], Type[], Type[], Type[][], Type[][])\n  nameWithType: MethodBuilder.SetSignature(Type, Type[], Type[], Type[], Type[][], Type[][])\n  fullName: MethodBuilder.SetSignature(Type, Type[], Type[], Type[], Type[][], Type[][])\n- uid: System.Type[][]\n  parent: System\n  isExternal: false\n  name: Type[][]\n  nameWithType: Type[][]\n  fullName: System.Type[][]\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: SetSymCustomAttribute(String, Byte[])\n  nameWithType: MethodBuilder.SetSymCustomAttribute(String, Byte[])\n  fullName: MethodBuilder.SetSymCustomAttribute(String, Byte[])\n- uid: System.Reflection.Emit.MethodBuilder.Signature\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: Signature\n  nameWithType: MethodBuilder.Signature\n  fullName: MethodBuilder.Signature\n- uid: System.Reflection.Emit.MethodBuilder.ToString\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: ToString()\n  nameWithType: MethodBuilder.ToString()\n  fullName: MethodBuilder.ToString()\n- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: _MethodBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MethodBuilder._MethodBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MethodBuilder._MethodBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: _MethodBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MethodBuilder._MethodBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MethodBuilder._MethodBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: _MethodBuilder.GetTypeInfoCount(UInt32)\n  nameWithType: MethodBuilder._MethodBuilder.GetTypeInfoCount(UInt32)\n  fullName: MethodBuilder._MethodBuilder.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: _MethodBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MethodBuilder._MethodBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MethodBuilder._MethodBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Reflection.Emit.MethodBuilder.#ctor*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: MethodBuilder\n  nameWithType: MethodBuilder.MethodBuilder\n  fullName: MethodBuilder.MethodBuilder\n  monikers:\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: AddDeclarativeSecurity\n  nameWithType: MethodBuilder.AddDeclarativeSecurity\n  fullName: MethodBuilder.AddDeclarativeSecurity\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.Attributes*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: Attributes\n  nameWithType: MethodBuilder.Attributes\n  fullName: MethodBuilder.Attributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.CallingConvention*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: CallingConvention\n  nameWithType: MethodBuilder.CallingConvention\n  fullName: MethodBuilder.CallingConvention\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.ContainsGenericParameters*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: ContainsGenericParameters\n  nameWithType: MethodBuilder.ContainsGenericParameters\n  fullName: MethodBuilder.ContainsGenericParameters\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.CreateMethodBody*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: CreateMethodBody\n  nameWithType: MethodBuilder.CreateMethodBody\n  fullName: MethodBuilder.CreateMethodBody\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.DeclaringType*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: DeclaringType\n  nameWithType: MethodBuilder.DeclaringType\n  fullName: MethodBuilder.DeclaringType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.DefineGenericParameters*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: DefineGenericParameters\n  nameWithType: MethodBuilder.DefineGenericParameters\n  fullName: MethodBuilder.DefineGenericParameters\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.DefineParameter*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: DefineParameter\n  nameWithType: MethodBuilder.DefineParameter\n  fullName: MethodBuilder.DefineParameter\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.Equals*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: Equals\n  nameWithType: MethodBuilder.Equals\n  fullName: MethodBuilder.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.GetBaseDefinition*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: GetBaseDefinition\n  nameWithType: MethodBuilder.GetBaseDefinition\n  fullName: MethodBuilder.GetBaseDefinition\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.GetCustomAttributes*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: GetCustomAttributes\n  nameWithType: MethodBuilder.GetCustomAttributes\n  fullName: MethodBuilder.GetCustomAttributes\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.GetGenericArguments*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: GetGenericArguments\n  nameWithType: MethodBuilder.GetGenericArguments\n  fullName: MethodBuilder.GetGenericArguments\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: GetGenericMethodDefinition\n  nameWithType: MethodBuilder.GetGenericMethodDefinition\n  fullName: MethodBuilder.GetGenericMethodDefinition\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.GetHashCode*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: GetHashCode\n  nameWithType: MethodBuilder.GetHashCode\n  fullName: MethodBuilder.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.GetILGenerator*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: GetILGenerator\n  nameWithType: MethodBuilder.GetILGenerator\n  fullName: MethodBuilder.GetILGenerator\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: GetMethodImplementationFlags\n  nameWithType: MethodBuilder.GetMethodImplementationFlags\n  fullName: MethodBuilder.GetMethodImplementationFlags\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.GetModule*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: GetModule\n  nameWithType: MethodBuilder.GetModule\n  fullName: MethodBuilder.GetModule\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.GetParameters*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: GetParameters\n  nameWithType: MethodBuilder.GetParameters\n  fullName: MethodBuilder.GetParameters\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.GetToken*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: GetToken\n  nameWithType: MethodBuilder.GetToken\n  fullName: MethodBuilder.GetToken\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.InitLocals*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: InitLocals\n  nameWithType: MethodBuilder.InitLocals\n  fullName: MethodBuilder.InitLocals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.Invoke*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: Invoke\n  nameWithType: MethodBuilder.Invoke\n  fullName: MethodBuilder.Invoke\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.IsDefined*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: IsDefined\n  nameWithType: MethodBuilder.IsDefined\n  fullName: MethodBuilder.IsDefined\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.IsGenericMethod*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: IsGenericMethod\n  nameWithType: MethodBuilder.IsGenericMethod\n  fullName: MethodBuilder.IsGenericMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: IsGenericMethodDefinition\n  nameWithType: MethodBuilder.IsGenericMethodDefinition\n  fullName: MethodBuilder.IsGenericMethodDefinition\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.IsSecurityCritical*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: IsSecurityCritical\n  nameWithType: MethodBuilder.IsSecurityCritical\n  fullName: MethodBuilder.IsSecurityCritical\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: IsSecuritySafeCritical\n  nameWithType: MethodBuilder.IsSecuritySafeCritical\n  fullName: MethodBuilder.IsSecuritySafeCritical\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.IsSecurityTransparent*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: IsSecurityTransparent\n  nameWithType: MethodBuilder.IsSecurityTransparent\n  fullName: MethodBuilder.IsSecurityTransparent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.MakeGenericMethod*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: MakeGenericMethod\n  nameWithType: MethodBuilder.MakeGenericMethod\n  fullName: MethodBuilder.MakeGenericMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.MethodHandle*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: MethodHandle\n  nameWithType: MethodBuilder.MethodHandle\n  fullName: MethodBuilder.MethodHandle\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.MethodImplementationFlags*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: MethodImplementationFlags\n  nameWithType: MethodBuilder.MethodImplementationFlags\n  fullName: MethodBuilder.MethodImplementationFlags\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.Module*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: Module\n  nameWithType: MethodBuilder.Module\n  fullName: MethodBuilder.Module\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.Name*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: Name\n  nameWithType: MethodBuilder.Name\n  fullName: MethodBuilder.Name\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.ReflectedType*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: ReflectedType\n  nameWithType: MethodBuilder.ReflectedType\n  fullName: MethodBuilder.ReflectedType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.ReturnParameter*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: ReturnParameter\n  nameWithType: MethodBuilder.ReturnParameter\n  fullName: MethodBuilder.ReturnParameter\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.ReturnType*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: ReturnType\n  nameWithType: MethodBuilder.ReturnType\n  fullName: MethodBuilder.ReturnType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: ReturnTypeCustomAttributes\n  nameWithType: MethodBuilder.ReturnTypeCustomAttributes\n  fullName: MethodBuilder.ReturnTypeCustomAttributes\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.SetCustomAttribute*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: SetCustomAttribute\n  nameWithType: MethodBuilder.SetCustomAttribute\n  fullName: MethodBuilder.SetCustomAttribute\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.SetImplementationFlags*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: SetImplementationFlags\n  nameWithType: MethodBuilder.SetImplementationFlags\n  fullName: MethodBuilder.SetImplementationFlags\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.SetMarshal*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: SetMarshal\n  nameWithType: MethodBuilder.SetMarshal\n  fullName: MethodBuilder.SetMarshal\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.SetMethodBody*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: SetMethodBody\n  nameWithType: MethodBuilder.SetMethodBody\n  fullName: MethodBuilder.SetMethodBody\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.SetParameters*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: SetParameters\n  nameWithType: MethodBuilder.SetParameters\n  fullName: MethodBuilder.SetParameters\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.SetReturnType*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: SetReturnType\n  nameWithType: MethodBuilder.SetReturnType\n  fullName: MethodBuilder.SetReturnType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.SetSignature*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: SetSignature\n  nameWithType: MethodBuilder.SetSignature\n  fullName: MethodBuilder.SetSignature\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: SetSymCustomAttribute\n  nameWithType: MethodBuilder.SetSymCustomAttribute\n  fullName: MethodBuilder.SetSymCustomAttribute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.Signature*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: Signature\n  nameWithType: MethodBuilder.Signature\n  fullName: MethodBuilder.Signature\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.ToString*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: ToString\n  nameWithType: MethodBuilder.ToString\n  fullName: MethodBuilder.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetIDsOfNames*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames\n  nameWithType: MethodBuilder.System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames\n  fullName: MethodBuilder.System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfo*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodBuilder.GetTypeInfo\n  nameWithType: MethodBuilder.System.Runtime.InteropServices._MethodBuilder.GetTypeInfo\n  fullName: MethodBuilder.System.Runtime.InteropServices._MethodBuilder.GetTypeInfo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#GetTypeInfoCount*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount\n  nameWithType: MethodBuilder.System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount\n  fullName: MethodBuilder.System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Reflection.Emit.MethodBuilder.System#Runtime#InteropServices#_MethodBuilder#Invoke*\n  parent: System.Reflection.Emit.MethodBuilder\n  isExternal: false\n  name: System.Runtime.InteropServices._MethodBuilder.Invoke\n  nameWithType: MethodBuilder.System.Runtime.InteropServices._MethodBuilder.Invoke\n  fullName: MethodBuilder.System.Runtime.InteropServices._MethodBuilder.Invoke\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/MethodBuilder.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Reflection.MemberInfo.CustomAttributes\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: CustomAttributes\n  nameWithType: MemberInfo.CustomAttributes\n  fullName: MemberInfo.CustomAttributes\n- uid: System.Reflection.MemberInfo.GetCustomAttributesData\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetCustomAttributesData()\n  nameWithType: MemberInfo.GetCustomAttributesData()\n  fullName: MemberInfo.GetCustomAttributesData()\n- uid: System.Reflection.MethodInfo.MemberType\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: MemberType\n  nameWithType: MethodInfo.MemberType\n  fullName: MethodInfo.MemberType\n- uid: System.Reflection.MemberInfo.MetadataToken\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MetadataToken\n  nameWithType: MemberInfo.MetadataToken\n  fullName: MemberInfo.MetadataToken\n- uid: System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Equality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Inequality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetType()\n  nameWithType: MemberInfo._MemberInfo.GetType()\n  fullName: MemberInfo._MemberInfo.GetType()\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfoCount(UInt32)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n  fullName: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Reflection.MethodBase.GetCurrentMethod\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetCurrentMethod()\n  nameWithType: MethodBase.GetCurrentMethod()\n  fullName: MethodBase.GetCurrentMethod()\n- uid: System.Reflection.MethodBase.GetMethodBody\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetMethodBody()\n  nameWithType: MethodBase.GetMethodBody()\n  fullName: MethodBase.GetMethodBody()\n- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetMethodFromHandle(RuntimeMethodHandle)\n  nameWithType: MethodBase.GetMethodFromHandle(RuntimeMethodHandle)\n  fullName: MethodBase.GetMethodFromHandle(RuntimeMethodHandle)\n- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)\n  nameWithType: MethodBase.GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)\n  fullName: MethodBase.GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)\n- uid: System.Reflection.MethodBase.Invoke(System.Object,System.Object[])\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: Invoke(Object, Object[])\n  nameWithType: MethodBase.Invoke(Object, Object[])\n  fullName: MethodBase.Invoke(Object, Object[])\n- uid: System.Reflection.MethodBase.IsAbstract\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsAbstract\n  nameWithType: MethodBase.IsAbstract\n  fullName: MethodBase.IsAbstract\n- uid: System.Reflection.MethodBase.IsAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsAssembly\n  nameWithType: MethodBase.IsAssembly\n  fullName: MethodBase.IsAssembly\n- uid: System.Reflection.MethodBase.IsConstructor\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsConstructor\n  nameWithType: MethodBase.IsConstructor\n  fullName: MethodBase.IsConstructor\n- uid: System.Reflection.MethodBase.IsFamily\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFamily\n  nameWithType: MethodBase.IsFamily\n  fullName: MethodBase.IsFamily\n- uid: System.Reflection.MethodBase.IsFamilyAndAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFamilyAndAssembly\n  nameWithType: MethodBase.IsFamilyAndAssembly\n  fullName: MethodBase.IsFamilyAndAssembly\n- uid: System.Reflection.MethodBase.IsFamilyOrAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFamilyOrAssembly\n  nameWithType: MethodBase.IsFamilyOrAssembly\n  fullName: MethodBase.IsFamilyOrAssembly\n- uid: System.Reflection.MethodBase.IsFinal\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFinal\n  nameWithType: MethodBase.IsFinal\n  fullName: MethodBase.IsFinal\n- uid: System.Reflection.MethodBase.IsHideBySig\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsHideBySig\n  nameWithType: MethodBase.IsHideBySig\n  fullName: MethodBase.IsHideBySig\n- uid: System.Reflection.MethodBase.IsPrivate\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsPrivate\n  nameWithType: MethodBase.IsPrivate\n  fullName: MethodBase.IsPrivate\n- uid: System.Reflection.MethodBase.IsPublic\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsPublic\n  nameWithType: MethodBase.IsPublic\n  fullName: MethodBase.IsPublic\n- uid: System.Reflection.MethodBase.IsSpecialName\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsSpecialName\n  nameWithType: MethodBase.IsSpecialName\n  fullName: MethodBase.IsSpecialName\n- uid: System.Reflection.MethodBase.IsStatic\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsStatic\n  nameWithType: MethodBase.IsStatic\n  fullName: MethodBase.IsStatic\n- uid: System.Reflection.MethodBase.IsVirtual\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsVirtual\n  nameWithType: MethodBase.IsVirtual\n  fullName: MethodBase.IsVirtual\n- uid: System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: op_Equality(MethodBase, MethodBase)\n  nameWithType: MethodBase.op_Equality(MethodBase, MethodBase)\n  fullName: MethodBase.op_Equality(MethodBase, MethodBase)\n- uid: System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: op_Inequality(MethodBase, MethodBase)\n  nameWithType: MethodBase.op_Inequality(MethodBase, MethodBase)\n  fullName: MethodBase.op_Inequality(MethodBase, MethodBase)\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MethodBase._MethodBase.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MethodBase._MethodBase.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.GetType()\n  nameWithType: MethodBase._MethodBase.GetType()\n  fullName: MethodBase._MethodBase.GetType()\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MethodBase._MethodBase.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MethodBase._MethodBase.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.GetTypeInfoCount(UInt32)\n  nameWithType: MethodBase._MethodBase.GetTypeInfoCount(UInt32)\n  fullName: MethodBase._MethodBase.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MethodBase._MethodBase.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MethodBase._MethodBase.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsAbstract\n  nameWithType: MethodBase._MethodBase.IsAbstract\n  fullName: MethodBase._MethodBase.IsAbstract\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsAssembly\n  nameWithType: MethodBase._MethodBase.IsAssembly\n  fullName: MethodBase._MethodBase.IsAssembly\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsConstructor\n  nameWithType: MethodBase._MethodBase.IsConstructor\n  fullName: MethodBase._MethodBase.IsConstructor\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsFamily\n  nameWithType: MethodBase._MethodBase.IsFamily\n  fullName: MethodBase._MethodBase.IsFamily\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsFamilyAndAssembly\n  nameWithType: MethodBase._MethodBase.IsFamilyAndAssembly\n  fullName: MethodBase._MethodBase.IsFamilyAndAssembly\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsFamilyOrAssembly\n  nameWithType: MethodBase._MethodBase.IsFamilyOrAssembly\n  fullName: MethodBase._MethodBase.IsFamilyOrAssembly\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsFinal\n  nameWithType: MethodBase._MethodBase.IsFinal\n  fullName: MethodBase._MethodBase.IsFinal\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsHideBySig\n  nameWithType: MethodBase._MethodBase.IsHideBySig\n  fullName: MethodBase._MethodBase.IsHideBySig\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsPrivate\n  nameWithType: MethodBase._MethodBase.IsPrivate\n  fullName: MethodBase._MethodBase.IsPrivate\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsPublic\n  nameWithType: MethodBase._MethodBase.IsPublic\n  fullName: MethodBase._MethodBase.IsPublic\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsSpecialName\n  nameWithType: MethodBase._MethodBase.IsSpecialName\n  fullName: MethodBase._MethodBase.IsSpecialName\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsStatic\n  nameWithType: MethodBase._MethodBase.IsStatic\n  fullName: MethodBase._MethodBase.IsStatic\n- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: _MethodBase.IsVirtual\n  nameWithType: MethodBase._MethodBase.IsVirtual\n  fullName: MethodBase._MethodBase.IsVirtual\n- uid: System.Reflection.MethodInfo.CreateDelegate(System.Type)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: CreateDelegate(Type)\n  nameWithType: MethodInfo.CreateDelegate(Type)\n  fullName: MethodInfo.CreateDelegate(Type)\n- uid: System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: CreateDelegate(Type, Object)\n  nameWithType: MethodInfo.CreateDelegate(Type, Object)\n  fullName: MethodInfo.CreateDelegate(Type, Object)\n- uid: System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: op_Equality(MethodInfo, MethodInfo)\n  nameWithType: MethodInfo.op_Equality(MethodInfo, MethodInfo)\n  fullName: MethodInfo.op_Equality(MethodInfo, MethodInfo)\n- uid: System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: op_Inequality(MethodInfo, MethodInfo)\n  nameWithType: MethodInfo.op_Inequality(MethodInfo, MethodInfo)\n  fullName: MethodInfo.op_Inequality(MethodInfo, MethodInfo)\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: _MethodInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MethodInfo._MethodInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MethodInfo._MethodInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: _MethodInfo.GetType()\n  nameWithType: MethodInfo._MethodInfo.GetType()\n  fullName: MethodInfo._MethodInfo.GetType()\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: _MethodInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MethodInfo._MethodInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MethodInfo._MethodInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: _MethodInfo.GetTypeInfoCount(UInt32)\n  nameWithType: MethodInfo._MethodInfo.GetTypeInfoCount(UInt32)\n  fullName: MethodInfo._MethodInfo.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.MethodInfo\n  isExternal: false\n  name: _MethodInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MethodInfo._MethodInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MethodInfo._MethodInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: GetMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n- uid: System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: HasMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n- uid: System.Reflection.MethodInfoExtensions.GetBaseDefinition(System.Reflection.MethodInfo)\n  parent: System.Reflection.MethodInfoExtensions\n  isExternal: false\n  name: GetBaseDefinition(MethodInfo)\n  nameWithType: MethodInfoExtensions.GetBaseDefinition(MethodInfo)\n  fullName: MethodInfoExtensions.GetBaseDefinition(MethodInfo)\n- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)\n  parent: System.Reflection.RuntimeReflectionExtensions\n  isExternal: false\n  name: GetRuntimeBaseDefinition(MethodInfo)\n  nameWithType: RuntimeReflectionExtensions.GetRuntimeBaseDefinition(MethodInfo)\n  fullName: RuntimeReflectionExtensions.GetRuntimeBaseDefinition(MethodInfo)\n- uid: System.Runtime.InteropServices._MethodBuilder\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: _MethodBuilder\n  nameWithType: _MethodBuilder\n  fullName: System.Runtime.InteropServices._MethodBuilder\n"}