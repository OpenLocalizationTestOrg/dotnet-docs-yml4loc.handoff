{"nodes":[{"content":"Encapsulates a memory slot to store local data. This class cannot be inherited.","nodes":[{"pos":[0,79],"content":"Encapsulates a memory slot to store local data. This class cannot be inherited.","nodes":[{"content":"Encapsulates a memory slot to store local data. This class cannot be inherited.","pos":[0,79],"nodes":[{"content":"Encapsulates a memory slot to store local data.","pos":[0,47]},{"content":"This class cannot be inherited.","pos":[48,79]}]}]}],"pos":[422,502],"yaml":true},{"content":"The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields, and data slots.  \n  \n-   Thread-relative static fields are `static` fields (`Shared` fields in Visual Basic) that are marked with the <xref:System.ThreadStaticAttribute> attribute. They provide better performance than data slots, and enable compile-time type checking.  \n  \n-   Data slots are slower and more awkward to use than thread-relative static fields. Also, data is stored as type <xref:System.Object>, so you must cast it to the correct type before using it. However, you can use data slots when you have insufficient information at compile time to allocate static fields.  \n  \n For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).  \n  \n Similarly, the .NET Framework provides two mechanisms for using context local storage: context-relative static fields and data slots. Context-relative static fields are static fields that are marked with the <xref:System.ContextStaticAttribute> attribute. The trade-offs between using these two mechanisms are similar to the tradeoffs between using thread-relative static fields and data slots.  \n  \n The <xref:System.LocalDataStoreSlot> structure serves as a local store memory mechanism that threads and contexts can use to store thread-specific and context-specific data, respectively. The common language runtime allocates a multi-slot data store array to each process when it is created. The thread or context calls various functions to allocate a data slot in the data store, to store and retrieve a data value in the slot, and to free a data slot for reuse after the thread or context object expires.  \n  \n The data slots are unique per thread or context; their values are not shared between the thread or context objects. Data slots can be allocated by a name or by an index number.  \n  \n For more information about storing local data, see <xref:System.Threading.Thread> or <xref:System.Runtime.Remoting.Contexts.Context>. The <xref:System.LocalDataStoreSlot> class is used with methods such as <xref:System.Threading.Thread.AllocateNamedDataSlot%2A?displayProperty=fullName>, <xref:System.Runtime.Remoting.Contexts.Context.AllocateNamedDataSlot%2A?displayProperty=fullName>, <xref:System.Threading.Thread.GetData%2A?displayProperty=fullName>, and <xref:System.Runtime.Remoting.Contexts.Context.GetData%2A?displayProperty=fullName>; it does not have any methods of its own that you need to use.","nodes":[{"pos":[0,127],"content":"The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields, and data slots.","nodes":[{"content":"The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields, and data slots.","pos":[0,127]}]},{"pos":[137,380],"content":"Thread-relative static fields are `static` fields (`Shared` fields in Visual Basic) that are marked with the <xref:System.ThreadStaticAttribute> attribute. They provide better performance than data slots, and enable compile-time type checking.","nodes":[{"content":"Thread-relative static fields are <ph id=\"ph1\">`static`</ph> fields (<ph id=\"ph2\">`Shared`</ph> fields in Visual Basic) that are marked with the <ph id=\"ph3\">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute.","pos":[0,155],"source":"Thread-relative static fields are `static` fields (`Shared` fields in Visual Basic) that are marked with the <xref:System.ThreadStaticAttribute> attribute."},{"content":"They provide better performance than data slots, and enable compile-time type checking.","pos":[156,243]}]},{"pos":[390,693],"content":"Data slots are slower and more awkward to use than thread-relative static fields. Also, data is stored as type <xref:System.Object>, so you must cast it to the correct type before using it. However, you can use data slots when you have insufficient information at compile time to allocate static fields.","nodes":[{"content":"Data slots are slower and more awkward to use than thread-relative static fields. Also, data is stored as type <xref:System.Object>, so you must cast it to the correct type before using it. However, you can use data slots when you have insufficient information at compile time to allocate static fields.","pos":[0,303],"nodes":[{"content":"Data slots are slower and more awkward to use than thread-relative static fields.","pos":[0,81]},{"content":"Also, data is stored as type <ph id=\"ph1\">&lt;xref:System.Object&gt;</ph>, so you must cast it to the correct type before using it.","pos":[82,189],"source":" Also, data is stored as type <xref:System.Object>, so you must cast it to the correct type before using it."},{"content":"However, you can use data slots when you have insufficient information at compile time to allocate static fields.","pos":[190,303]}]}]},{"pos":[700,907],"content":"For more information about using TLS, see <bpt id=\"p1\">[</bpt>Thread Local Storage: Thread-Relative Static Fields and Data Slots<ept id=\"p1\">](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)</ept>.","source":"For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md)."},{"pos":[914,1308],"content":"Similarly, the .NET Framework provides two mechanisms for using context local storage: context-relative static fields and data slots. Context-relative static fields are static fields that are marked with the <xref:System.ContextStaticAttribute> attribute. The trade-offs between using these two mechanisms are similar to the tradeoffs between using thread-relative static fields and data slots.","nodes":[{"content":"Similarly, the .NET Framework provides two mechanisms for using context local storage: context-relative static fields and data slots. Context-relative static fields are static fields that are marked with the <xref:System.ContextStaticAttribute> attribute. The trade-offs between using these two mechanisms are similar to the tradeoffs between using thread-relative static fields and data slots.","pos":[0,394],"nodes":[{"content":"Similarly, the .NET Framework provides two mechanisms for using context local storage: context-relative static fields and data slots.","pos":[0,133]},{"content":"Context-relative static fields are static fields that are marked with the <ph id=\"ph1\">&lt;xref:System.ContextStaticAttribute&gt;</ph> attribute.","pos":[134,255],"source":" Context-relative static fields are static fields that are marked with the <xref:System.ContextStaticAttribute> attribute."},{"content":"The trade-offs between using these two mechanisms are similar to the tradeoffs between using thread-relative static fields and data slots.","pos":[256,394]}]}]},{"pos":[1315,1821],"content":"The <xref:System.LocalDataStoreSlot> structure serves as a local store memory mechanism that threads and contexts can use to store thread-specific and context-specific data, respectively. The common language runtime allocates a multi-slot data store array to each process when it is created. The thread or context calls various functions to allocate a data slot in the data store, to store and retrieve a data value in the slot, and to free a data slot for reuse after the thread or context object expires.","nodes":[{"content":"The <xref:System.LocalDataStoreSlot> structure serves as a local store memory mechanism that threads and contexts can use to store thread-specific and context-specific data, respectively. The common language runtime allocates a multi-slot data store array to each process when it is created. The thread or context calls various functions to allocate a data slot in the data store, to store and retrieve a data value in the slot, and to free a data slot for reuse after the thread or context object expires.","pos":[0,506],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.LocalDataStoreSlot&gt;</ph> structure serves as a local store memory mechanism that threads and contexts can use to store thread-specific and context-specific data, respectively.","pos":[0,187],"source":"The <xref:System.LocalDataStoreSlot> structure serves as a local store memory mechanism that threads and contexts can use to store thread-specific and context-specific data, respectively."},{"content":"The common language runtime allocates a multi-slot data store array to each process when it is created.","pos":[188,291]},{"content":"The thread or context calls various functions to allocate a data slot in the data store, to store and retrieve a data value in the slot, and to free a data slot for reuse after the thread or context object expires.","pos":[292,506]}]}]},{"pos":[1828,2004],"content":"The data slots are unique per thread or context; their values are not shared between the thread or context objects. Data slots can be allocated by a name or by an index number.","nodes":[{"content":"The data slots are unique per thread or context; their values are not shared between the thread or context objects. Data slots can be allocated by a name or by an index number.","pos":[0,176],"nodes":[{"content":"The data slots are unique per thread or context; their values are not shared between the thread or context objects.","pos":[0,115]},{"content":"Data slots can be allocated by a name or by an index number.","pos":[116,176]}]}]},{"pos":[2011,2616],"content":"For more information about storing local data, see <xref:System.Threading.Thread> or <xref:System.Runtime.Remoting.Contexts.Context>. The <xref:System.LocalDataStoreSlot> class is used with methods such as <xref:System.Threading.Thread.AllocateNamedDataSlot%2A?displayProperty=fullName>, <xref:System.Runtime.Remoting.Contexts.Context.AllocateNamedDataSlot%2A?displayProperty=fullName>, <xref:System.Threading.Thread.GetData%2A?displayProperty=fullName>, and <xref:System.Runtime.Remoting.Contexts.Context.GetData%2A?displayProperty=fullName>; it does not have any methods of its own that you need to use.","nodes":[{"content":"For more information about storing local data, see <xref:System.Threading.Thread> or <xref:System.Runtime.Remoting.Contexts.Context>. The <xref:System.LocalDataStoreSlot> class is used with methods such as <xref:System.Threading.Thread.AllocateNamedDataSlot%2A?displayProperty=fullName>, <xref:System.Runtime.Remoting.Contexts.Context.AllocateNamedDataSlot%2A?displayProperty=fullName>, <xref:System.Threading.Thread.GetData%2A?displayProperty=fullName>, and <xref:System.Runtime.Remoting.Contexts.Context.GetData%2A?displayProperty=fullName>; it does not have any methods of its own that you need to use.","pos":[0,605],"nodes":[{"content":"For more information about storing local data, see <ph id=\"ph1\">&lt;xref:System.Threading.Thread&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Runtime.Remoting.Contexts.Context&gt;</ph>.","pos":[0,133],"source":"For more information about storing local data, see <xref:System.Threading.Thread> or <xref:System.Runtime.Remoting.Contexts.Context>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.LocalDataStoreSlot&gt;</ph> class is used with methods such as <ph id=\"ph2\">&lt;xref:System.Threading.Thread.AllocateNamedDataSlot%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Runtime.Remoting.Contexts.Context.AllocateNamedDataSlot%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Threading.Thread.GetData%2A?displayProperty=fullName&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Runtime.Remoting.Contexts.Context.GetData%2A?displayProperty=fullName&gt;</ph>; it does not have any methods of its own that you need to use.","pos":[134,605],"source":" The <xref:System.LocalDataStoreSlot> class is used with methods such as <xref:System.Threading.Thread.AllocateNamedDataSlot%2A?displayProperty=fullName>, <xref:System.Runtime.Remoting.Contexts.Context.AllocateNamedDataSlot%2A?displayProperty=fullName>, <xref:System.Threading.Thread.GetData%2A?displayProperty=fullName>, and <xref:System.Runtime.Remoting.Contexts.Context.GetData%2A?displayProperty=fullName>; it does not have any methods of its own that you need to use."}]}]}],"pos":[513,3146],"yaml":true,"extradata":"MT"},{"content":"Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <xref href=\"System.LocalDataStoreSlot\"></xref> object.","nodes":[{"pos":[0,170],"content":"Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <ph id=\"ph1\">&lt;xref href=\"System.LocalDataStoreSlot\"&gt;&lt;/xref&gt;</ph> object.","source":"Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <xref href=\"System.LocalDataStoreSlot\"></xref> object."}],"pos":[4786,4957],"yaml":true},{"content":"The garbage collector calls <xref:System.LocalDataStoreSlot.Finalize%2A> when the current object is ready to be finalized.","nodes":[{"pos":[0,122],"content":"The garbage collector calls <xref:System.LocalDataStoreSlot.Finalize%2A> when the current object is ready to be finalized.","nodes":[{"content":"The garbage collector calls <ph id=\"ph1\">&lt;xref:System.LocalDataStoreSlot.Finalize%2A&gt;</ph> when the current object is ready to be finalized.","pos":[0,122],"source":"The garbage collector calls <xref:System.LocalDataStoreSlot.Finalize%2A> when the current object is ready to be finalized."}]}],"pos":[4968,5091],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.LocalDataStoreSlot\n  commentId: T:System.LocalDataStoreSlot\n  id: LocalDataStoreSlot\n  children:\n  - System.LocalDataStoreSlot.Finalize\n  langs:\n  - csharp\n  name: LocalDataStoreSlot\n  nameWithType: LocalDataStoreSlot\n  fullName: System.LocalDataStoreSlot\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading.Thread\n  namespace: System\n  summary: Encapsulates a memory slot to store local data. This class cannot be inherited.\n  remarks: \"The .NET Framework provides two mechanisms for using thread local storage (TLS): thread-relative static fields, and data slots.  \\n  \\n-   Thread-relative static fields are `static` fields (`Shared` fields in Visual Basic) that are marked with the <xref:System.ThreadStaticAttribute> attribute. They provide better performance than data slots, and enable compile-time type checking.  \\n  \\n-   Data slots are slower and more awkward to use than thread-relative static fields. Also, data is stored as type <xref:System.Object>, so you must cast it to the correct type before using it. However, you can use data slots when you have insufficient information at compile time to allocate static fields.  \\n  \\n For more information about using TLS, see [Thread Local Storage: Thread-Relative Static Fields and Data Slots](~/docs/standard/threading/thread-local-storage-thread-relative-static-fields-and-data-slots.md).  \\n  \\n Similarly, the .NET Framework provides two mechanisms for using context local storage: context-relative static fields and data slots. Context-relative static fields are static fields that are marked with the <xref:System.ContextStaticAttribute> attribute. The trade-offs between using these two mechanisms are similar to the tradeoffs between using thread-relative static fields and data slots.  \\n  \\n The <xref:System.LocalDataStoreSlot> structure serves as a local store memory mechanism that threads and contexts can use to store thread-specific and context-specific data, respectively. The common language runtime allocates a multi-slot data store array to each process when it is created. The thread or context calls various functions to allocate a data slot in the data store, to store and retrieve a data value in the slot, and to free a data slot for reuse after the thread or context object expires.  \\n  \\n The data slots are unique per thread or context; their values are not shared between the thread or context objects. Data slots can be allocated by a name or by an index number.  \\n  \\n For more information about storing local data, see <xref:System.Threading.Thread> or <xref:System.Runtime.Remoting.Contexts.Context>. The <xref:System.LocalDataStoreSlot> class is used with methods such as <xref:System.Threading.Thread.AllocateNamedDataSlot%2A?displayProperty=fullName>, <xref:System.Runtime.Remoting.Contexts.Context.AllocateNamedDataSlot%2A?displayProperty=fullName>, <xref:System.Threading.Thread.GetData%2A?displayProperty=fullName>, and <xref:System.Runtime.Remoting.Contexts.Context.GetData%2A?displayProperty=fullName>; it does not have any methods of its own that you need to use.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class LocalDataStoreSlot\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/LocalDataStoreSlot.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.LocalDataStoreSlot.Finalize\n  commentId: M:System.LocalDataStoreSlot.Finalize\n  id: Finalize\n  parent: System.LocalDataStoreSlot\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: LocalDataStoreSlot.Finalize()\n  fullName: LocalDataStoreSlot.Finalize()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Threading.Thread\n  namespace: System\n  summary: Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <xref href=\"System.LocalDataStoreSlot\"></xref> object.\n  remarks: The garbage collector calls <xref:System.LocalDataStoreSlot.Finalize%2A> when the current object is ready to be finalized.\n  syntax:\n    content: ~LocalDataStoreSlot ();\n    parameters: []\n  overload: System.LocalDataStoreSlot.Finalize*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/LocalDataStoreSlot.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.LocalDataStoreSlot.Finalize\n  parent: System.LocalDataStoreSlot\n  isExternal: false\n  name: Finalize()\n  nameWithType: LocalDataStoreSlot.Finalize()\n  fullName: LocalDataStoreSlot.Finalize()\n- uid: System.LocalDataStoreSlot.Finalize*\n  parent: System.LocalDataStoreSlot\n  isExternal: false\n  name: Finalize\n  nameWithType: LocalDataStoreSlot.Finalize\n  fullName: LocalDataStoreSlot.Finalize\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/LocalDataStoreSlot.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}