{"nodes":[{"content":"Provides properties and methods to add a license to a component and to manage a <xref href=\"System.ComponentModel.LicenseProvider\"></xref>. This class cannot be inherited.","nodes":[{"pos":[0,171],"content":"Provides properties and methods to add a license to a component and to manage a <xref href=\"System.ComponentModel.LicenseProvider\"></xref>. This class cannot be inherited.","nodes":[{"content":"Provides properties and methods to add a license to a component and to manage a <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.LicenseProvider\"&gt;&lt;/xref&gt;</ph>.","pos":[0,139],"source":"Provides properties and methods to add a license to a component and to manage a <xref href=\"System.ComponentModel.LicenseProvider\"></xref>."},{"content":"This class cannot be inherited.","pos":[140,171]}]}],"pos":[1282,1454],"yaml":true},{"content":"The <xref:System.ComponentModel.LicenseManager> class provides the following `static` properties: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> and <xref:System.ComponentModel.LicenseManager.UsageMode%2A>. The class also provides the following `static` methods: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>, and <xref:System.ComponentModel.LicenseManager.Validate%2A>.  \n  \n When you create a component that you want to license, you must do the following:  \n  \n1.  Specify the <xref:System.ComponentModel.LicenseProvider> by marking the component with a <xref:System.ComponentModel.LicenseProviderAttribute>.  \n  \n2.  Call <xref:System.ComponentModel.LicenseManager.Validate%2A> or <xref:System.ComponentModel.LicenseManager.IsValid%2A> in the constructor of the component. <xref:System.ComponentModel.LicenseManager.Validate%2A> throws a <xref:System.ComponentModel.LicenseException> when it tries to create an instance without a valid license. <xref:System.ComponentModel.LicenseManager.IsValid%2A> does not throw an exception.  \n  \n3.  Call <xref:System.ComponentModel.License.Dispose%2A> on any license that is granted when the component is disposed or finalized.  \n  \n For more information on licensing, see [How to: License Components and Controls](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57).","nodes":[{"pos":[0,460],"content":"The <xref:System.ComponentModel.LicenseManager> class provides the following `static` properties: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> and <xref:System.ComponentModel.LicenseManager.UsageMode%2A>. The class also provides the following `static` methods: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>, and <xref:System.ComponentModel.LicenseManager.Validate%2A>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseManager&gt;</ph> class provides the following <ph id=\"ph2\">`static`</ph> properties: <ph id=\"ph3\">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.ComponentModel.LicenseManager.UsageMode%2A&gt;</ph>.","pos":[0,221],"source":"The <xref:System.ComponentModel.LicenseManager> class provides the following `static` properties: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> and <xref:System.ComponentModel.LicenseManager.UsageMode%2A>."},{"content":"The class also provides the following <ph id=\"ph1\">`static`</ph> methods: <ph id=\"ph2\">&lt;xref:System.ComponentModel.LicenseManager.CreateWithContext%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph>.","pos":[222,460],"source":" The class also provides the following `static` methods: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>, and <xref:System.ComponentModel.LicenseManager.Validate%2A>."}]},{"pos":[467,547],"content":"When you create a component that you want to license, you must do the following:","nodes":[{"content":"When you create a component that you want to license, you must do the following:","pos":[0,80]}]},{"pos":[557,700],"content":"Specify the <xref:System.ComponentModel.LicenseProvider> by marking the component with a <xref:System.ComponentModel.LicenseProviderAttribute>.","nodes":[{"content":"Specify the <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseProvider&gt;</ph> by marking the component with a <ph id=\"ph2\">&lt;xref:System.ComponentModel.LicenseProviderAttribute&gt;</ph>.","pos":[0,143],"source":"Specify the <xref:System.ComponentModel.LicenseProvider> by marking the component with a <xref:System.ComponentModel.LicenseProviderAttribute>."}]},{"pos":[710,1121],"content":"Call <xref:System.ComponentModel.LicenseManager.Validate%2A> or <xref:System.ComponentModel.LicenseManager.IsValid%2A> in the constructor of the component. <xref:System.ComponentModel.LicenseManager.Validate%2A> throws a <xref:System.ComponentModel.LicenseException> when it tries to create an instance without a valid license. <xref:System.ComponentModel.LicenseManager.IsValid%2A> does not throw an exception.","nodes":[{"content":"Call <xref:System.ComponentModel.LicenseManager.Validate%2A> or <xref:System.ComponentModel.LicenseManager.IsValid%2A> in the constructor of the component. <xref:System.ComponentModel.LicenseManager.Validate%2A> throws a <xref:System.ComponentModel.LicenseException> when it tries to create an instance without a valid license. <xref:System.ComponentModel.LicenseManager.IsValid%2A> does not throw an exception.","pos":[0,411],"nodes":[{"content":"Call <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> in the constructor of the component.","pos":[0,155],"source":"Call <xref:System.ComponentModel.LicenseManager.Validate%2A> or <xref:System.ComponentModel.LicenseManager.IsValid%2A> in the constructor of the component."},{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph> throws a <ph id=\"ph2\">&lt;xref:System.ComponentModel.LicenseException&gt;</ph> when it tries to create an instance without a valid license.","pos":[156,327],"source":" <xref:System.ComponentModel.LicenseManager.Validate%2A> throws a <xref:System.ComponentModel.LicenseException> when it tries to create an instance without a valid license."},{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> does not throw an exception.","pos":[328,411],"source":" <xref:System.ComponentModel.LicenseManager.IsValid%2A> does not throw an exception."}]}]},{"pos":[1131,1259],"content":"Call <xref:System.ComponentModel.License.Dispose%2A> on any license that is granted when the component is disposed or finalized.","nodes":[{"content":"Call <ph id=\"ph1\">&lt;xref:System.ComponentModel.License.Dispose%2A&gt;</ph> on any license that is granted when the component is disposed or finalized.","pos":[0,128],"source":"Call <xref:System.ComponentModel.License.Dispose%2A> on any license that is granted when the component is disposed or finalized."}]},{"pos":[1266,1419],"content":"For more information on licensing, see <bpt id=\"p1\">[</bpt>How to: License Components and Controls<ept id=\"p1\">](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57)</ept>.","source":"For more information on licensing, see [How to: License Components and Controls](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57)."}],"pos":[1465,2897],"yaml":true,"extradata":"MT"},{"content":"Creates an instance of the specified type, given a context in which you can use the licensed instance.","nodes":[{"pos":[0,102],"content":"Creates an instance of the specified type, given a context in which you can use the licensed instance.","nodes":[{"content":"Creates an instance of the specified type, given a context in which you can use the licensed instance.","pos":[0,102]}]}],"pos":[5456,5559],"yaml":true},{"content":"The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>. The <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> to behave as an atomic operation.","nodes":[{"pos":[0,552],"content":"The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>. The <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> to behave as an atomic operation.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph> you specify as the <ph id=\"ph2\">`creationContext`</ph> parameter is used as the <ph id=\"ph3\">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph> for the life of this <ph id=\"ph4\">&lt;xref:System.ComponentModel.License&gt;</ph>.","pos":[0,230],"source":"The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseManager.CreateWithContext%2A&gt;</ph> method blocks all other threads in the <ph id=\"ph2\">&lt;xref:System.AppDomain&gt;</ph> from modifying the <ph id=\"ph3\">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph>, allowing <ph id=\"ph4\">&lt;xref:System.ComponentModel.LicenseManager.CreateWithContext%2A&gt;</ph> to behave as an atomic operation.","pos":[231,552],"source":" The <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> to behave as an atomic operation."}]}],"pos":[5570,6123],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> that represents the type to create.","nodes":[{"pos":[0,70],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that represents the type to create.","source":"A <xref href=\"System.Type\"></xref> that represents the type to create."}],"pos":[6326,6397],"yaml":true},{"content":"A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies when you can use the licensed instance.","nodes":[{"pos":[0,114],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.LicenseContext\"&gt;&lt;/xref&gt;</ph> that specifies when you can use the licensed instance.","source":"A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies when you can use the licensed instance."}],"pos":[6491,6606],"yaml":true},{"content":"An instance of the specified type.","nodes":[{"pos":[0,34],"content":"An instance of the specified type.","nodes":[{"content":"An instance of the specified type.","pos":[0,34]}]}],"pos":[6663,6698],"yaml":true},{"content":"Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.","nodes":[{"pos":[0,131],"content":"Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.","nodes":[{"content":"Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.","pos":[0,131]}]}],"pos":[8294,8426],"yaml":true},{"content":"The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>. This method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> to behave as an atomic operation.","nodes":[{"pos":[0,488],"content":"The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>. This method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> to behave as an atomic operation.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph> you specify as the <ph id=\"ph2\">`creationContext`</ph> parameter is used as the <ph id=\"ph3\">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph> for the life of this <ph id=\"ph4\">&lt;xref:System.ComponentModel.License&gt;</ph>.","pos":[0,230],"source":"The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>."},{"content":"This method blocks all other threads in the <ph id=\"ph1\">&lt;xref:System.AppDomain&gt;</ph> from modifying the <ph id=\"ph2\">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph>, allowing <ph id=\"ph3\">&lt;xref:System.ComponentModel.LicenseManager.CreateWithContext%2A&gt;</ph> to behave as an atomic operation.","pos":[231,488],"source":" This method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> to behave as an atomic operation."}]}],"pos":[8437,8926],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> that represents the type to create.","nodes":[{"pos":[0,70],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that represents the type to create.","source":"A <xref href=\"System.Type\"></xref> that represents the type to create."}],"pos":[9144,9215],"yaml":true},{"content":"A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies when you can use the licensed instance.","nodes":[{"pos":[0,114],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.LicenseContext\"&gt;&lt;/xref&gt;</ph> that specifies when you can use the licensed instance.","source":"A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies when you can use the licensed instance."}],"pos":[9309,9424],"yaml":true},{"content":"An array of type <xref href=\"System.Object\"></xref> that represents the arguments for the type.","nodes":[{"pos":[0,95],"content":"An array of type <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> that represents the arguments for the type.","source":"An array of type <xref href=\"System.Object\"></xref> that represents the arguments for the type."}],"pos":[9486,9582],"yaml":true},{"content":"An instance of the specified type with the given array of arguments.","nodes":[{"pos":[0,68],"content":"An instance of the specified type with the given array of arguments.","nodes":[{"content":"An instance of the specified type with the given array of arguments.","pos":[0,68]}]}],"pos":[9639,9708],"yaml":true},{"content":"Gets or sets the current <xref href=\"System.ComponentModel.LicenseContext\"></xref>, which specifies when you can use the licensed object.","nodes":[{"pos":[0,137],"content":"Gets or sets the current <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.LicenseContext\"&gt;&lt;/xref&gt;</ph>, which specifies when you can use the licensed object.","source":"Gets or sets the current <xref href=\"System.ComponentModel.LicenseContext\"></xref>, which specifies when you can use the licensed object."}],"pos":[10994,11132],"yaml":true},{"content":"When the user requests a valid <xref:System.ComponentModel.License>, the user must give the context in which the <xref:System.ComponentModel.License> is valid to the <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName> method. The <xref:System.ComponentModel.LicenseContext> returned by this property should be passed to all <xref:System.ComponentModel.LicenseProvider> classes.","nodes":[{"pos":[0,409],"content":"When the user requests a valid <xref:System.ComponentModel.License>, the user must give the context in which the <xref:System.ComponentModel.License> is valid to the <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName> method. The <xref:System.ComponentModel.LicenseContext> returned by this property should be passed to all <xref:System.ComponentModel.LicenseProvider> classes.","nodes":[{"content":"When the user requests a valid <xref:System.ComponentModel.License>, the user must give the context in which the <xref:System.ComponentModel.License> is valid to the <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName> method. The <xref:System.ComponentModel.LicenseContext> returned by this property should be passed to all <xref:System.ComponentModel.LicenseProvider> classes.","pos":[0,409],"nodes":[{"content":"When the user requests a valid <ph id=\"ph1\">&lt;xref:System.ComponentModel.License&gt;</ph>, the user must give the context in which the <ph id=\"ph2\">&lt;xref:System.ComponentModel.License&gt;</ph> is valid to the <ph id=\"ph3\">&lt;xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,257],"source":"When the user requests a valid <xref:System.ComponentModel.License>, the user must give the context in which the <xref:System.ComponentModel.License> is valid to the <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph> returned by this property should be passed to all <ph id=\"ph2\">&lt;xref:System.ComponentModel.LicenseProvider&gt;</ph> classes.","pos":[258,409],"source":" The <xref:System.ComponentModel.LicenseContext> returned by this property should be passed to all <xref:System.ComponentModel.LicenseProvider> classes."}]}]}],"pos":[11143,11553],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies when you can use the licensed object.","nodes":[{"pos":[0,112],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.LicenseContext\"&gt;&lt;/xref&gt;</ph> that specifies when you can use the licensed object.","source":"A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies when you can use the licensed object."}],"pos":[11736,11849],"yaml":true},{"content":"The <xref href=\"System.ComponentModel.LicenseManager.CurrentContext\"></xref> property is currently locked and cannot be changed.","nodes":[{"pos":[0,128],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.LicenseManager.CurrentContext\"&gt;&lt;/xref&gt;</ph> property is currently locked and cannot be changed.","source":"The <xref href=\"System.ComponentModel.LicenseManager.CurrentContext\"></xref> property is currently locked and cannot be changed."}],"pos":[12038,12167],"yaml":true},{"content":"Returns whether the given type has a valid license.","nodes":[{"pos":[0,51],"content":"Returns whether the given type has a valid license.","nodes":[{"content":"Returns whether the given type has a valid license.","pos":[0,51]}]}],"pos":[13399,13451],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> to find a valid license for.","nodes":[{"pos":[0,65],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> to find a valid license for.","source":"The <xref href=\"System.Type\"></xref> to find a valid license for."}],"pos":[13591,13657],"yaml":true},{"content":"`true` if the given type is licensed; otherwise, `false`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">`true`</ph> if the given type is licensed; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the given type is licensed; otherwise, `false`."}],"pos":[13715,13775],"yaml":true},{"content":"Determines whether a valid license can be granted for the specified type.","nodes":[{"pos":[0,73],"content":"Determines whether a valid license can be granted for the specified type.","nodes":[{"content":"Determines whether a valid license can be granted for the specified type.","pos":[0,73]}]}],"pos":[15067,15141],"yaml":true},{"content":"The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method returns `true` when the type is either not licensed, or is licensed and the license is valid.  \n  \n This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>. The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions.","nodes":[{"pos":[0,159],"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> method returns <ph id=\"ph2\">`true`</ph> when the type is either not licensed, or is licensed and the license is valid.","source":"The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method returns `true` when the type is either not licensed, or is licensed and the license is valid."},{"pos":[166,393],"content":"This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>. The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions.","nodes":[{"content":"This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>. The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions.","pos":[0,227],"nodes":[{"content":"This method does not throw a <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseException&gt;</ph> when it cannot grant a valid <ph id=\"ph2\">&lt;xref:System.ComponentModel.License&gt;</ph>.","pos":[0,141],"source":"This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph> method throws exceptions.","pos":[142,227],"source":" The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions."}]}]}],"pos":[15152,15550],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> that represents the type of object that requests the <xref href=\"System.ComponentModel.License\"></xref>.","nodes":[{"pos":[0,139],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that represents the type of object that requests the <ph id=\"ph2\">&lt;xref href=\"System.ComponentModel.License\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Type\"></xref> that represents the type of object that requests the <xref href=\"System.ComponentModel.License\"></xref>."}],"pos":[15687,15827],"yaml":true},{"content":"`true` if a valid license can be granted; otherwise, `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph> if a valid license can be granted; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if a valid license can be granted; otherwise, `false`."}],"pos":[15885,15949],"yaml":true},{"content":"Determines whether a valid license can be granted for the specified instance of the type. This method creates a valid <xref href=\"System.ComponentModel.License\"></xref>.","nodes":[{"pos":[0,169],"content":"Determines whether a valid license can be granted for the specified instance of the type. This method creates a valid <xref href=\"System.ComponentModel.License\"></xref>.","nodes":[{"content":"Determines whether a valid license can be granted for the specified instance of the type.","pos":[0,89]},{"content":"This method creates a valid <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.License\"&gt;&lt;/xref&gt;</ph>.","pos":[90,169],"source":" This method creates a valid <xref href=\"System.ComponentModel.License\"></xref>."}]}],"pos":[17424,17594],"yaml":true},{"content":"The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method returns `true` when the `type` parameter is not licensed, or when it is licensed and the `license` parameter is valid.  \n  \n This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>. The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions.  \n  \n If the `license` parameter is not `null` after this call, the object asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized.","nodes":[{"pos":[0,184],"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> method returns <ph id=\"ph2\">`true`</ph> when the <ph id=\"ph3\">`type`</ph> parameter is not licensed, or when it is licensed and the <ph id=\"ph4\">`license`</ph> parameter is valid.","source":"The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method returns `true` when the `type` parameter is not licensed, or when it is licensed and the `license` parameter is valid."},{"pos":[191,418],"content":"This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>. The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions.","nodes":[{"content":"This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>. The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions.","pos":[0,227],"nodes":[{"content":"This method does not throw a <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseException&gt;</ph> when it cannot grant a valid <ph id=\"ph2\">&lt;xref:System.ComponentModel.License&gt;</ph>.","pos":[0,141],"source":"This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph> method throws exceptions.","pos":[142,227],"source":" The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions."}]}]},{"pos":[425,686],"content":"If the <ph id=\"ph1\">`license`</ph> parameter is not <ph id=\"ph2\">`null`</ph> after this call, the object asking for a <ph id=\"ph3\">&lt;xref:System.ComponentModel.License&gt;</ph> must dispose of the license by calling the <ph id=\"ph4\">&lt;xref:System.ComponentModel.License.Dispose%2A&gt;</ph> method when the object is disposed of or finalized.","source":"If the `license` parameter is not `null` after this call, the object asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized."}],"pos":[17605,18298],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> that represents the type of object that requests the license.","nodes":[{"pos":[0,96],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that represents the type of object that requests the license.","source":"A <xref href=\"System.Type\"></xref> that represents the type of object that requests the license."}],"pos":[18495,18592],"yaml":true},{"content":"An object of the specified type or a type derived from the specified type.","nodes":[{"pos":[0,74],"content":"An object of the specified type or a type derived from the specified type.","nodes":[{"content":"An object of the specified type or a type derived from the specified type.","pos":[0,74]}]}],"pos":[18656,18731],"yaml":true},{"content":"A <xref href=\"System.ComponentModel.License\"></xref> that is a valid license, or `null` if a valid license cannot be granted.","nodes":[{"pos":[0,125],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.License\"&gt;&lt;/xref&gt;</ph> that is a valid license, or <ph id=\"ph2\">`null`</ph> if a valid license cannot be granted.","source":"A <xref href=\"System.ComponentModel.License\"></xref> that is a valid license, or `null` if a valid license cannot be granted."}],"pos":[18810,18936],"yaml":true},{"content":"`true` if a valid <xref href=\"System.ComponentModel.License\"></xref> can be granted; otherwise, `false`.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">`true`</ph> if a valid <ph id=\"ph2\">&lt;xref href=\"System.ComponentModel.License\"&gt;&lt;/xref&gt;</ph> can be granted; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if a valid <xref href=\"System.ComponentModel.License\"></xref> can be granted; otherwise, `false`."}],"pos":[18994,19101],"yaml":true},{"content":"Prevents changes being made to the current <xref href=\"System.ComponentModel.LicenseContext\"></xref> of the given object.","nodes":[{"pos":[0,121],"content":"Prevents changes being made to the current <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.LicenseContext\"&gt;&lt;/xref&gt;</ph> of the given object.","source":"Prevents changes being made to the current <xref href=\"System.ComponentModel.LicenseContext\"></xref> of the given object."}],"pos":[20426,20548],"yaml":true},{"content":"Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object. This method locks the <xref:System.ComponentModel.LicenseContext>, preventing the <xref:System.ComponentModel.License> from being retrieved.","nodes":[{"pos":[0,254],"content":"Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object. This method locks the <xref:System.ComponentModel.LicenseContext>, preventing the <xref:System.ComponentModel.License> from being retrieved.","nodes":[{"content":"Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object. This method locks the <xref:System.ComponentModel.LicenseContext>, preventing the <xref:System.ComponentModel.License> from being retrieved.","pos":[0,254],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph> to get the <ph id=\"ph2\">&lt;xref:System.ComponentModel.License&gt;</ph> of an object.","pos":[0,113],"source":"Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object."},{"content":"This method locks the <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph>, preventing the <ph id=\"ph2\">&lt;xref:System.ComponentModel.License&gt;</ph> from being retrieved.","pos":[114,254],"source":" This method locks the <xref:System.ComponentModel.LicenseContext>, preventing the <xref:System.ComponentModel.License> from being retrieved."}]}]}],"pos":[20559,20814],"yaml":true,"extradata":"MT"},{"content":"The object whose current context you want to lock.","nodes":[{"pos":[0,50],"content":"The object whose current context you want to lock.","nodes":[{"content":"The object whose current context you want to lock.","pos":[0,50]}]}],"pos":[20973,21024],"yaml":true},{"content":"The context is already locked.","nodes":[{"pos":[0,30],"content":"The context is already locked.","nodes":[{"content":"The context is already locked.","pos":[0,30]}]}],"pos":[21210,21241],"yaml":true},{"content":"Allows changes to be made to the current <xref href=\"System.ComponentModel.LicenseContext\"></xref> of the given object.","nodes":[{"pos":[0,119],"content":"Allows changes to be made to the current <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.LicenseContext\"&gt;&lt;/xref&gt;</ph> of the given object.","source":"Allows changes to be made to the current <xref href=\"System.ComponentModel.LicenseContext\"></xref> of the given object."}],"pos":[22503,22623],"yaml":true},{"content":"Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object. This method unlocks the <xref:System.ComponentModel.LicenseContext>, allowing the <xref:System.ComponentModel.License> to be retrieved.","nodes":[{"pos":[0,249],"content":"Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object. This method unlocks the <xref:System.ComponentModel.LicenseContext>, allowing the <xref:System.ComponentModel.License> to be retrieved.","nodes":[{"content":"Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object. This method unlocks the <xref:System.ComponentModel.LicenseContext>, allowing the <xref:System.ComponentModel.License> to be retrieved.","pos":[0,249],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph> to get the <ph id=\"ph2\">&lt;xref:System.ComponentModel.License&gt;</ph> of an object.","pos":[0,113],"source":"Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object."},{"content":"This method unlocks the <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph>, allowing the <ph id=\"ph2\">&lt;xref:System.ComponentModel.License&gt;</ph> to be retrieved.","pos":[114,249],"source":" This method unlocks the <xref:System.ComponentModel.LicenseContext>, allowing the <xref:System.ComponentModel.License> to be retrieved."}]}]}],"pos":[22634,22884],"yaml":true,"extradata":"MT"},{"content":"The object whose current context you want to unlock.","nodes":[{"pos":[0,52],"content":"The object whose current context you want to unlock.","nodes":[{"content":"The object whose current context you want to unlock.","pos":[0,52]}]}],"pos":[23045,23098],"yaml":true},{"content":"<code>contextUser</code> represents a different user than the one specified in a previous call to <xref href=\"System.ComponentModel.LicenseManager.LockContext(System.Object)\"></xref>.","nodes":[{"pos":[0,183],"content":"<ph id=\"ph1\">&lt;code&gt;contextUser&lt;/code&gt;</ph> represents a different user than the one specified in a previous call to <ph id=\"ph2\">&lt;xref href=\"System.ComponentModel.LicenseManager.LockContext(System.Object)\"&gt;&lt;/xref&gt;</ph>.","source":"<code>contextUser</code> represents a different user than the one specified in a previous call to <xref href=\"System.ComponentModel.LicenseManager.LockContext(System.Object)\"></xref>."}],"pos":[23270,23454],"yaml":true},{"content":"Gets the <xref href=\"System.ComponentModel.LicenseUsageMode\"></xref> which specifies when you can use the licensed object for the <xref href=\"System.ComponentModel.LicenseManager.CurrentContext\"></xref>.","nodes":[{"pos":[0,203],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.LicenseUsageMode\"&gt;&lt;/xref&gt;</ph> which specifies when you can use the licensed object for the <ph id=\"ph2\">&lt;xref href=\"System.ComponentModel.LicenseManager.CurrentContext\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the <xref href=\"System.ComponentModel.LicenseUsageMode\"></xref> which specifies when you can use the licensed object for the <xref href=\"System.ComponentModel.LicenseManager.CurrentContext\"></xref>."}],"pos":[24625,24829],"yaml":true},{"content":"If this property cannot find a <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> value, it returns <xref:System.ComponentModel.LicenseUsageMode.Runtime>.","nodes":[{"pos":[0,165],"content":"If this property cannot find a <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> value, it returns <xref:System.ComponentModel.LicenseUsageMode.Runtime>.","nodes":[{"content":"If this property cannot find a <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph> value, it returns <ph id=\"ph2\">&lt;xref:System.ComponentModel.LicenseUsageMode.Runtime&gt;</ph>.","pos":[0,165],"source":"If this property cannot find a <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> value, it returns <xref:System.ComponentModel.LicenseUsageMode.Runtime>."}]}],"pos":[24840,25006],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.ComponentModel.LicenseUsageMode\"></xref> values, as specified in the <xref href=\"System.ComponentModel.LicenseManager.CurrentContext\"></xref> property.","nodes":[{"pos":[0,181],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.LicenseUsageMode\"&gt;&lt;/xref&gt;</ph> values, as specified in the <ph id=\"ph2\">&lt;xref href=\"System.ComponentModel.LicenseManager.CurrentContext\"&gt;&lt;/xref&gt;</ph> property.","source":"One of the <xref href=\"System.ComponentModel.LicenseUsageMode\"></xref> values, as specified in the <xref href=\"System.ComponentModel.LicenseManager.CurrentContext\"></xref> property."}],"pos":[25183,25365],"yaml":true},{"content":"Determines whether a license can be granted for the specified type.","nodes":[{"pos":[0,67],"content":"Determines whether a license can be granted for the specified type.","nodes":[{"content":"Determines whether a license can be granted for the specified type.","pos":[0,67]}]}],"pos":[26662,26730],"yaml":true},{"content":"This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted. The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.","nodes":[{"pos":[0,230],"content":"This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted. The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.","nodes":[{"content":"This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted. The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.","pos":[0,230],"nodes":[{"content":"This method throws a <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseException&gt;</ph> when a valid <ph id=\"ph2\">&lt;xref:System.ComponentModel.License&gt;</ph> cannot be granted.","pos":[0,135],"source":"This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> method does not throw an exception.","pos":[136,230],"source":" The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception."}]}]}],"pos":[26741,26972],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> that represents the type of object that requests the license.","nodes":[{"pos":[0,96],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that represents the type of object that requests the license.","source":"A <xref href=\"System.Type\"></xref> that represents the type of object that requests the license."}],"pos":[27110,27207],"yaml":true},{"content":"A <xref href=\"System.ComponentModel.License\"></xref> cannot be granted.","nodes":[{"pos":[0,71],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.License\"&gt;&lt;/xref&gt;</ph> cannot be granted.","source":"A <xref href=\"System.ComponentModel.License\"></xref> cannot be granted."}],"pos":[27402,27474],"yaml":true},{"content":"Determines whether a license can be granted for the instance of the specified type.","nodes":[{"pos":[0,83],"content":"Determines whether a license can be granted for the instance of the specified type.","nodes":[{"content":"Determines whether a license can be granted for the instance of the specified type.","pos":[0,83]}]}],"pos":[28760,28844],"yaml":true},{"content":"This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted. The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.  \n  \n All objects asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized.","nodes":[{"pos":[0,230],"content":"This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted. The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.","nodes":[{"content":"This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted. The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.","pos":[0,230],"nodes":[{"content":"This method throws a <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseException&gt;</ph> when a valid <ph id=\"ph2\">&lt;xref:System.ComponentModel.License&gt;</ph> cannot be granted.","pos":[0,135],"source":"This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> method does not throw an exception.","pos":[136,230],"source":" The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception."}]}]},{"pos":[237,441],"content":"All objects asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized.","nodes":[{"content":"All objects asking for a <ph id=\"ph1\">&lt;xref:System.ComponentModel.License&gt;</ph> must dispose of the license by calling the <ph id=\"ph2\">&lt;xref:System.ComponentModel.License.Dispose%2A&gt;</ph> method when the object is disposed of or finalized.","pos":[0,204],"source":"All objects asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized."}]}],"pos":[28855,29301],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> that represents the type of object that requests the license.","nodes":[{"pos":[0,96],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that represents the type of object that requests the license.","source":"A <xref href=\"System.Type\"></xref> that represents the type of object that requests the license."}],"pos":[29481,29578],"yaml":true},{"content":"An <xref href=\"System.Object\"></xref> of the specified type or a type derived from the specified type.","nodes":[{"pos":[0,102],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> of the specified type or a type derived from the specified type.","source":"An <xref href=\"System.Object\"></xref> of the specified type or a type derived from the specified type."}],"pos":[29642,29745],"yaml":true},{"content":"A valid <xref href=\"System.ComponentModel.License\"></xref>.","nodes":[{"pos":[0,59],"content":"A valid <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.License\"&gt;&lt;/xref&gt;</ph>.","source":"A valid <xref href=\"System.ComponentModel.License\"></xref>."}],"pos":[29818,29878],"yaml":true},{"content":"The type is licensed, but a <xref href=\"System.ComponentModel.License\"></xref> cannot be granted.","nodes":[{"pos":[0,97],"content":"The type is licensed, but a <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.License\"&gt;&lt;/xref&gt;</ph> cannot be granted.","source":"The type is licensed, but a <xref href=\"System.ComponentModel.License\"></xref> cannot be granted."}],"pos":[30073,30171],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.LicenseManager\n  commentId: T:System.ComponentModel.LicenseManager\n  id: LicenseManager\n  children:\n  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)\n  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])\n  - System.ComponentModel.LicenseManager.CurrentContext\n  - System.ComponentModel.LicenseManager.IsLicensed(System.Type)\n  - System.ComponentModel.LicenseManager.IsValid(System.Type)\n  - System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)\n  - System.ComponentModel.LicenseManager.LockContext(System.Object)\n  - System.ComponentModel.LicenseManager.UnlockContext(System.Object)\n  - System.ComponentModel.LicenseManager.UsageMode\n  - System.ComponentModel.LicenseManager.Validate(System.Type)\n  - System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)\n  langs:\n  - csharp\n  name: LicenseManager\n  nameWithType: LicenseManager\n  fullName: System.ComponentModel.LicenseManager\n  type: Class\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Provides properties and methods to add a license to a component and to manage a <xref href=\"System.ComponentModel.LicenseProvider\"></xref>. This class cannot be inherited.\n  remarks: \"The <xref:System.ComponentModel.LicenseManager> class provides the following `static` properties: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> and <xref:System.ComponentModel.LicenseManager.UsageMode%2A>. The class also provides the following `static` methods: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>, and <xref:System.ComponentModel.LicenseManager.Validate%2A>.  \\n  \\n When you create a component that you want to license, you must do the following:  \\n  \\n1.  Specify the <xref:System.ComponentModel.LicenseProvider> by marking the component with a <xref:System.ComponentModel.LicenseProviderAttribute>.  \\n  \\n2.  Call <xref:System.ComponentModel.LicenseManager.Validate%2A> or <xref:System.ComponentModel.LicenseManager.IsValid%2A> in the constructor of the component. <xref:System.ComponentModel.LicenseManager.Validate%2A> throws a <xref:System.ComponentModel.LicenseException> when it tries to create an instance without a valid license. <xref:System.ComponentModel.LicenseManager.IsValid%2A> does not throw an exception.  \\n  \\n3.  Call <xref:System.ComponentModel.License.Dispose%2A> on any license that is granted when the component is disposed or finalized.  \\n  \\n For more information on licensing, see [How to: License Components and Controls](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57).\"\n  example:\n  - \"The following code example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method. It uses a <xref:System.ComponentModel.LicenseProvider> that is implemented by the <xref:System.ComponentModel.LicFileLicenseProvider> class.  \\n  \\n [!code-cpp[Classic LicenseManager Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic LicenseManager Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic LicenseManager Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic LicenseManager Example/CS/source.cs#1)]\\n [!code-vb[Classic LicenseManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic LicenseManager Example/VB/source.vb#1)]\"\n  syntax:\n    content: public sealed class LicenseManager\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)\n  commentId: M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)\n  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext)\n  parent: System.ComponentModel.LicenseManager\n  langs:\n  - csharp\n  name: CreateWithContext(Type, LicenseContext)\n  nameWithType: LicenseManager.CreateWithContext(Type, LicenseContext)\n  fullName: LicenseManager.CreateWithContext(Type, LicenseContext)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Creates an instance of the specified type, given a context in which you can use the licensed instance.\n  remarks: The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>. The <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> to behave as an atomic operation.\n  syntax:\n    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> that represents the type to create.\n    - id: creationContext\n      type: System.ComponentModel.LicenseContext\n      description: A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies when you can use the licensed instance.\n    return:\n      type: System.Object\n      description: An instance of the specified type.\n  overload: System.ComponentModel.LicenseManager.CreateWithContext*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])\n  commentId: M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])\n  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])\n  parent: System.ComponentModel.LicenseManager\n  langs:\n  - csharp\n  name: CreateWithContext(Type, LicenseContext, Object[])\n  nameWithType: LicenseManager.CreateWithContext(Type, LicenseContext, Object[])\n  fullName: LicenseManager.CreateWithContext(Type, LicenseContext, Object[])\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.\n  remarks: The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>. This method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> to behave as an atomic operation.\n  syntax:\n    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext, object[] args);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> that represents the type to create.\n    - id: creationContext\n      type: System.ComponentModel.LicenseContext\n      description: A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies when you can use the licensed instance.\n    - id: args\n      type: System.Object[]\n      description: An array of type <xref href=\"System.Object\"></xref> that represents the arguments for the type.\n    return:\n      type: System.Object\n      description: An instance of the specified type with the given array of arguments.\n  overload: System.ComponentModel.LicenseManager.CreateWithContext*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.LicenseManager.CurrentContext\n  commentId: P:System.ComponentModel.LicenseManager.CurrentContext\n  id: CurrentContext\n  parent: System.ComponentModel.LicenseManager\n  langs:\n  - csharp\n  name: CurrentContext\n  nameWithType: LicenseManager.CurrentContext\n  fullName: LicenseManager.CurrentContext\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Gets or sets the current <xref href=\"System.ComponentModel.LicenseContext\"></xref>, which specifies when you can use the licensed object.\n  remarks: When the user requests a valid <xref:System.ComponentModel.License>, the user must give the context in which the <xref:System.ComponentModel.License> is valid to the <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName> method. The <xref:System.ComponentModel.LicenseContext> returned by this property should be passed to all <xref:System.ComponentModel.LicenseProvider> classes.\n  syntax:\n    content: public static System.ComponentModel.LicenseContext CurrentContext { get; set; }\n    return:\n      type: System.ComponentModel.LicenseContext\n      description: A <xref href=\"System.ComponentModel.LicenseContext\"></xref> that specifies when you can use the licensed object.\n  overload: System.ComponentModel.LicenseManager.CurrentContext*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.ComponentModel.LicenseManager.CurrentContext\"></xref> property is currently locked and cannot be changed.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)\n  commentId: M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)\n  id: IsLicensed(System.Type)\n  parent: System.ComponentModel.LicenseManager\n  langs:\n  - csharp\n  name: IsLicensed(Type)\n  nameWithType: LicenseManager.IsLicensed(Type)\n  fullName: LicenseManager.IsLicensed(Type)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Returns whether the given type has a valid license.\n  syntax:\n    content: public static bool IsLicensed (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> to find a valid license for.\n    return:\n      type: System.Boolean\n      description: '`true` if the given type is licensed; otherwise, `false`.'\n  overload: System.ComponentModel.LicenseManager.IsLicensed*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)\n  commentId: M:System.ComponentModel.LicenseManager.IsValid(System.Type)\n  id: IsValid(System.Type)\n  parent: System.ComponentModel.LicenseManager\n  langs:\n  - csharp\n  name: IsValid(Type)\n  nameWithType: LicenseManager.IsValid(Type)\n  fullName: LicenseManager.IsValid(Type)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Determines whether a valid license can be granted for the specified type.\n  remarks: \"The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method returns `true` when the type is either not licensed, or is licensed and the license is valid.  \\n  \\n This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>. The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions.\"\n  syntax:\n    content: public static bool IsValid (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> that represents the type of object that requests the <xref href=\"System.ComponentModel.License\"></xref>.\n    return:\n      type: System.Boolean\n      description: '`true` if a valid license can be granted; otherwise, `false`.'\n  overload: System.ComponentModel.LicenseManager.IsValid*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)\n  commentId: M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)\n  id: IsValid(System.Type,System.Object,System.ComponentModel.License@)\n  parent: System.ComponentModel.LicenseManager\n  langs:\n  - csharp\n  name: IsValid(Type, Object, License)\n  nameWithType: LicenseManager.IsValid(Type, Object, License)\n  fullName: LicenseManager.IsValid(Type, Object, License)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Determines whether a valid license can be granted for the specified instance of the type. This method creates a valid <xref href=\"System.ComponentModel.License\"></xref>.\n  remarks: \"The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method returns `true` when the `type` parameter is not licensed, or when it is licensed and the `license` parameter is valid.  \\n  \\n This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>. The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions.  \\n  \\n If the `license` parameter is not `null` after this call, the object asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized.\"\n  syntax:\n    content: public static bool IsValid (Type type, object instance, out System.ComponentModel.License license);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> that represents the type of object that requests the license.\n    - id: instance\n      type: System.Object\n      description: An object of the specified type or a type derived from the specified type.\n    - id: license\n      type: System.ComponentModel.License\n      description: A <xref href=\"System.ComponentModel.License\"></xref> that is a valid license, or `null` if a valid license cannot be granted.\n    return:\n      type: System.Boolean\n      description: '`true` if a valid <xref href=\"System.ComponentModel.License\"></xref> can be granted; otherwise, `false`.'\n  overload: System.ComponentModel.LicenseManager.IsValid*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)\n  commentId: M:System.ComponentModel.LicenseManager.LockContext(System.Object)\n  id: LockContext(System.Object)\n  parent: System.ComponentModel.LicenseManager\n  langs:\n  - csharp\n  name: LockContext(Object)\n  nameWithType: LicenseManager.LockContext(Object)\n  fullName: LicenseManager.LockContext(Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Prevents changes being made to the current <xref href=\"System.ComponentModel.LicenseContext\"></xref> of the given object.\n  remarks: Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object. This method locks the <xref:System.ComponentModel.LicenseContext>, preventing the <xref:System.ComponentModel.License> from being retrieved.\n  syntax:\n    content: public static void LockContext (object contextUser);\n    parameters:\n    - id: contextUser\n      type: System.Object\n      description: The object whose current context you want to lock.\n  overload: System.ComponentModel.LicenseManager.LockContext*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The context is already locked.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)\n  commentId: M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)\n  id: UnlockContext(System.Object)\n  parent: System.ComponentModel.LicenseManager\n  langs:\n  - csharp\n  name: UnlockContext(Object)\n  nameWithType: LicenseManager.UnlockContext(Object)\n  fullName: LicenseManager.UnlockContext(Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Allows changes to be made to the current <xref href=\"System.ComponentModel.LicenseContext\"></xref> of the given object.\n  remarks: Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object. This method unlocks the <xref:System.ComponentModel.LicenseContext>, allowing the <xref:System.ComponentModel.License> to be retrieved.\n  syntax:\n    content: public static void UnlockContext (object contextUser);\n    parameters:\n    - id: contextUser\n      type: System.Object\n      description: The object whose current context you want to unlock.\n  overload: System.ComponentModel.LicenseManager.UnlockContext*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>contextUser</code> represents a different user than the one specified in a previous call to <xref href=\"System.ComponentModel.LicenseManager.LockContext(System.Object)\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.LicenseManager.UsageMode\n  commentId: P:System.ComponentModel.LicenseManager.UsageMode\n  id: UsageMode\n  parent: System.ComponentModel.LicenseManager\n  langs:\n  - csharp\n  name: UsageMode\n  nameWithType: LicenseManager.UsageMode\n  fullName: LicenseManager.UsageMode\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Gets the <xref href=\"System.ComponentModel.LicenseUsageMode\"></xref> which specifies when you can use the licensed object for the <xref href=\"System.ComponentModel.LicenseManager.CurrentContext\"></xref>.\n  remarks: If this property cannot find a <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> value, it returns <xref:System.ComponentModel.LicenseUsageMode.Runtime>.\n  syntax:\n    content: public static System.ComponentModel.LicenseUsageMode UsageMode { get; }\n    return:\n      type: System.ComponentModel.LicenseUsageMode\n      description: One of the <xref href=\"System.ComponentModel.LicenseUsageMode\"></xref> values, as specified in the <xref href=\"System.ComponentModel.LicenseManager.CurrentContext\"></xref> property.\n  overload: System.ComponentModel.LicenseManager.UsageMode*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.LicenseManager.Validate(System.Type)\n  commentId: M:System.ComponentModel.LicenseManager.Validate(System.Type)\n  id: Validate(System.Type)\n  parent: System.ComponentModel.LicenseManager\n  langs:\n  - csharp\n  name: Validate(Type)\n  nameWithType: LicenseManager.Validate(Type)\n  fullName: LicenseManager.Validate(Type)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Determines whether a license can be granted for the specified type.\n  remarks: This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted. The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.\n  syntax:\n    content: public static void Validate (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> that represents the type of object that requests the license.\n  overload: System.ComponentModel.LicenseManager.Validate*\n  exceptions:\n  - type: System.ComponentModel.LicenseException\n    commentId: T:System.ComponentModel.LicenseException\n    description: A <xref href=\"System.ComponentModel.License\"></xref> cannot be granted.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)\n  commentId: M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)\n  id: Validate(System.Type,System.Object)\n  parent: System.ComponentModel.LicenseManager\n  langs:\n  - csharp\n  name: Validate(Type, Object)\n  nameWithType: LicenseManager.Validate(Type, Object)\n  fullName: LicenseManager.Validate(Type, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Determines whether a license can be granted for the instance of the specified type.\n  remarks: \"This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted. The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.  \\n  \\n All objects asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized.\"\n  syntax:\n    content: public static System.ComponentModel.License Validate (Type type, object instance);\n    parameters:\n    - id: type\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> that represents the type of object that requests the license.\n    - id: instance\n      type: System.Object\n      description: An <xref href=\"System.Object\"></xref> of the specified type or a type derived from the specified type.\n    return:\n      type: System.ComponentModel.License\n      description: A valid <xref href=\"System.ComponentModel.License\"></xref>.\n  overload: System.ComponentModel.LicenseManager.Validate*\n  exceptions:\n  - type: System.ComponentModel.LicenseException\n    commentId: T:System.ComponentModel.LicenseException\n    description: The type is licensed, but a <xref href=\"System.ComponentModel.License\"></xref> cannot be granted.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ComponentModel.LicenseException\n  parent: System.ComponentModel\n  isExternal: false\n  name: LicenseException\n  nameWithType: LicenseException\n  fullName: System.ComponentModel.LicenseException\n- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: CreateWithContext(Type, LicenseContext)\n  nameWithType: LicenseManager.CreateWithContext(Type, LicenseContext)\n  fullName: LicenseManager.CreateWithContext(Type, LicenseContext)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.ComponentModel.LicenseContext\n  parent: System.ComponentModel\n  isExternal: false\n  name: LicenseContext\n  nameWithType: LicenseContext\n  fullName: System.ComponentModel.LicenseContext\n- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: CreateWithContext(Type, LicenseContext, Object[])\n  nameWithType: LicenseManager.CreateWithContext(Type, LicenseContext, Object[])\n  fullName: LicenseManager.CreateWithContext(Type, LicenseContext, Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.ComponentModel.LicenseManager.CurrentContext\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: CurrentContext\n  nameWithType: LicenseManager.CurrentContext\n  fullName: LicenseManager.CurrentContext\n- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: IsLicensed(Type)\n  nameWithType: LicenseManager.IsLicensed(Type)\n  fullName: LicenseManager.IsLicensed(Type)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: IsValid(Type)\n  nameWithType: LicenseManager.IsValid(Type)\n  fullName: LicenseManager.IsValid(Type)\n- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: IsValid(Type, Object, License)\n  nameWithType: LicenseManager.IsValid(Type, Object, License)\n  fullName: LicenseManager.IsValid(Type, Object, License)\n- uid: System.ComponentModel.License\n  parent: System.ComponentModel\n  isExternal: false\n  name: License\n  nameWithType: License\n  fullName: System.ComponentModel.License\n- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: LockContext(Object)\n  nameWithType: LicenseManager.LockContext(Object)\n  fullName: LicenseManager.LockContext(Object)\n- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: UnlockContext(Object)\n  nameWithType: LicenseManager.UnlockContext(Object)\n  fullName: LicenseManager.UnlockContext(Object)\n- uid: System.ComponentModel.LicenseManager.UsageMode\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: UsageMode\n  nameWithType: LicenseManager.UsageMode\n  fullName: LicenseManager.UsageMode\n- uid: System.ComponentModel.LicenseUsageMode\n  parent: System.ComponentModel\n  isExternal: false\n  name: LicenseUsageMode\n  nameWithType: LicenseUsageMode\n  fullName: System.ComponentModel.LicenseUsageMode\n- uid: System.ComponentModel.LicenseManager.Validate(System.Type)\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: Validate(Type)\n  nameWithType: LicenseManager.Validate(Type)\n  fullName: LicenseManager.Validate(Type)\n- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: Validate(Type, Object)\n  nameWithType: LicenseManager.Validate(Type, Object)\n  fullName: LicenseManager.Validate(Type, Object)\n- uid: System.ComponentModel.LicenseManager.CreateWithContext*\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: CreateWithContext\n  nameWithType: LicenseManager.CreateWithContext\n  fullName: LicenseManager.CreateWithContext\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseManager.xml\n- uid: System.ComponentModel.LicenseManager.CurrentContext*\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: CurrentContext\n  nameWithType: LicenseManager.CurrentContext\n  fullName: LicenseManager.CurrentContext\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseManager.xml\n- uid: System.ComponentModel.LicenseManager.IsLicensed*\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: IsLicensed\n  nameWithType: LicenseManager.IsLicensed\n  fullName: LicenseManager.IsLicensed\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseManager.xml\n- uid: System.ComponentModel.LicenseManager.IsValid*\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: IsValid\n  nameWithType: LicenseManager.IsValid\n  fullName: LicenseManager.IsValid\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseManager.xml\n- uid: System.ComponentModel.LicenseManager.LockContext*\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: LockContext\n  nameWithType: LicenseManager.LockContext\n  fullName: LicenseManager.LockContext\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseManager.xml\n- uid: System.ComponentModel.LicenseManager.UnlockContext*\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: UnlockContext\n  nameWithType: LicenseManager.UnlockContext\n  fullName: LicenseManager.UnlockContext\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseManager.xml\n- uid: System.ComponentModel.LicenseManager.UsageMode*\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: UsageMode\n  nameWithType: LicenseManager.UsageMode\n  fullName: LicenseManager.UsageMode\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseManager.xml\n- uid: System.ComponentModel.LicenseManager.Validate*\n  parent: System.ComponentModel.LicenseManager\n  isExternal: false\n  name: Validate\n  nameWithType: LicenseManager.Validate\n  fullName: LicenseManager.Validate\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/LicenseManager.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}