### YamlMime:ManagedReference
items:
- uid: System.IO.UnmanagedMemoryAccessor
  commentId: T:System.IO.UnmanagedMemoryAccessor
  id: UnmanagedMemoryAccessor
  children:
  - System.IO.UnmanagedMemoryAccessor.#ctor
  - System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)
  - System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  - System.IO.UnmanagedMemoryAccessor.CanRead
  - System.IO.UnmanagedMemoryAccessor.CanWrite
  - System.IO.UnmanagedMemoryAccessor.Capacity
  - System.IO.UnmanagedMemoryAccessor.Dispose
  - System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)
  - System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  - System.IO.UnmanagedMemoryAccessor.IsOpen
  - System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)
  - System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)
  - System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)
  - System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)
  - System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)
  - System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)
  langs:
  - csharp
  name: UnmanagedMemoryAccessor
  nameWithType: UnmanagedMemoryAccessor
  fullName: System.IO.UnmanagedMemoryAccessor
  type: Class
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Provides random access to unmanaged blocks of memory from managed code.
  remarks: "The <xref:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor%2A> method of a <xref:System.IO.MemoryMappedFiles.MemoryMappedFile> object returns the unmanaged blocks of memory for working with views of memory-mapped files.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."
  syntax:
    content: 'public class UnmanagedMemoryAccessor : IDisposable'
  inheritance:
  - System.Object
  derivedClasses:
  - System.IO.MemoryMappedFiles.MemoryMappedViewAccessor
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.#ctor
  commentId: M:System.IO.UnmanagedMemoryAccessor.#ctor
  id: '#ctor'
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: UnmanagedMemoryAccessor()
  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor()
  fullName: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor()
  type: Constructor
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.UnmanagedMemoryAccessor"></xref> class.
  syntax:
    content: protected UnmanagedMemoryAccessor ();
    parameters: []
  overload: System.IO.UnmanagedMemoryAccessor.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)
  commentId: M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)
  id: '#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)'
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: UnmanagedMemoryAccessor(SafeBuffer, Int64, Int64)
  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer, Int64, Int64)
  fullName: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer, Int64, Int64)
  type: Constructor
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.UnmanagedMemoryAccessor"></xref> class with a specified buffer, offset, and capacity.
  syntax:
    content: public UnmanagedMemoryAccessor (System.Runtime.InteropServices.SafeBuffer buffer, long offset, long capacity);
    parameters:
    - id: buffer
      type: System.Runtime.InteropServices.SafeBuffer
      description: The buffer to contain the accessor.
    - id: offset
      type: System.Int64
      description: The byte at which to start the accessor.
    - id: capacity
      type: System.Int64
      description: The size, in bytes, of memory to allocate.
  overload: System.IO.UnmanagedMemoryAccessor.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>offset</code> plus <code>capacity</code> is greater than <code>buffer</code>.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>offset</code> or <code>capacity</code> is less than zero.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>offset</code> plus <code>capacity</code> would wrap around the high end of the address space.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  commentId: M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  id: '#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)'
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: UnmanagedMemoryAccessor(SafeBuffer, Int64, Int64, FileAccess)
  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer, Int64, Int64, FileAccess)
  fullName: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer, Int64, Int64, FileAccess)
  type: Constructor
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.UnmanagedMemoryAccessor"></xref> class with a specified buffer, offset, capacity, and access right.
  syntax:
    content: public UnmanagedMemoryAccessor (System.Runtime.InteropServices.SafeBuffer buffer, long offset, long capacity, System.IO.FileAccess access);
    parameters:
    - id: buffer
      type: System.Runtime.InteropServices.SafeBuffer
      description: The buffer to contain the accessor.
    - id: offset
      type: System.Int64
      description: The byte at which to start the accessor.
    - id: capacity
      type: System.Int64
      description: The size, in bytes, of memory to allocate.
    - id: access
      type: System.IO.FileAccess
      description: The type of access allowed to the memory. The default is <xref href="System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite"></xref>.
  overload: System.IO.UnmanagedMemoryAccessor.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>offset</code> plus <code>capacity</code> is greater than <code>buffer</code>.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> or <code>capacity</code> is less than zero.  \n  \n -or-  \n  \n <code>access</code> is not a valid <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\"></xref> enumeration value."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>offset</code> plus <code>capacity</code> would wrap around the high end of the address space.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.CanRead
  commentId: P:System.IO.UnmanagedMemoryAccessor.CanRead
  id: CanRead
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: CanRead
  nameWithType: UnmanagedMemoryAccessor.CanRead
  fullName: UnmanagedMemoryAccessor.CanRead
  type: Property
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Determines whether the accessor is readable.
  syntax:
    content: public bool CanRead { get; }
    return:
      type: System.Boolean
      description: '`true` if the accessor is readable; otherwise, `false`.'
  overload: System.IO.UnmanagedMemoryAccessor.CanRead*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.CanWrite
  commentId: P:System.IO.UnmanagedMemoryAccessor.CanWrite
  id: CanWrite
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: CanWrite
  nameWithType: UnmanagedMemoryAccessor.CanWrite
  fullName: UnmanagedMemoryAccessor.CanWrite
  type: Property
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Determines whether the accessory is writable.
  syntax:
    content: public bool CanWrite { get; }
    return:
      type: System.Boolean
      description: '`true` if the accessor is writable; otherwise, `false`.'
  overload: System.IO.UnmanagedMemoryAccessor.CanWrite*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.Capacity
  commentId: P:System.IO.UnmanagedMemoryAccessor.Capacity
  id: Capacity
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Capacity
  nameWithType: UnmanagedMemoryAccessor.Capacity
  fullName: UnmanagedMemoryAccessor.Capacity
  type: Property
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Gets the capacity of the accessor.
  syntax:
    content: public long Capacity { get; }
    return:
      type: System.Int64
      description: The capacity of the accessor.
  overload: System.IO.UnmanagedMemoryAccessor.Capacity*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.Dispose
  commentId: M:System.IO.UnmanagedMemoryAccessor.Dispose
  id: Dispose
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Dispose()
  nameWithType: UnmanagedMemoryAccessor.Dispose()
  fullName: UnmanagedMemoryAccessor.Dispose()
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Releases all resources used by the <xref href="System.IO.UnmanagedMemoryAccessor"></xref>.
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.IO.UnmanagedMemoryAccessor.Dispose*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)
  commentId: M:System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: UnmanagedMemoryAccessor.Dispose(Boolean)
  fullName: UnmanagedMemoryAccessor.Dispose(Boolean)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Releases the unmanaged resources used by the <xref href="System.IO.UnmanagedMemoryAccessor"></xref> and optionally releases the managed resources.
  remarks: "This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \n  \n When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.IO.UnmanagedMemoryAccessor> references. This method invokes the `Dispose()` method of each referenced object."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'
  overload: System.IO.UnmanagedMemoryAccessor.Dispose*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  commentId: M:System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  id: Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Initialize(SafeBuffer, Int64, Int64, FileAccess)
  nameWithType: UnmanagedMemoryAccessor.Initialize(SafeBuffer, Int64, Int64, FileAccess)
  fullName: UnmanagedMemoryAccessor.Initialize(SafeBuffer, Int64, Int64, FileAccess)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Sets the initial values for the accessor.
  remarks: This method is called by the constructors for this class.
  syntax:
    content: protected void Initialize (System.Runtime.InteropServices.SafeBuffer buffer, long offset, long capacity, System.IO.FileAccess access);
    parameters:
    - id: buffer
      type: System.Runtime.InteropServices.SafeBuffer
      description: The buffer to contain the accessor.
    - id: offset
      type: System.Int64
      description: The byte at which to start the accessor.
    - id: capacity
      type: System.Int64
      description: The size, in bytes, of memory to allocate.
    - id: access
      type: System.IO.FileAccess
      description: The type of access allowed to the memory. The default is <xref href="System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite"></xref>.
  overload: System.IO.UnmanagedMemoryAccessor.Initialize*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>offset</code> plus <code>capacity</code> is greater than <code>buffer</code>.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> or <code>capacity</code> is less than zero.  \n  \n -or-  \n  \n <code>access</code> is not a valid <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\"></xref> enumeration value."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>offset</code> plus <code>capacity</code> would wrap around the high end of the address space.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.IsOpen
  commentId: P:System.IO.UnmanagedMemoryAccessor.IsOpen
  id: IsOpen
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: IsOpen
  nameWithType: UnmanagedMemoryAccessor.IsOpen
  fullName: UnmanagedMemoryAccessor.IsOpen
  type: Property
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Determines whether the accessor is currently open by a process.
  syntax:
    content: protected bool IsOpen { get; }
    return:
      type: System.Boolean
      description: '`true` if the accessor is open; otherwise, `false`.'
  overload: System.IO.UnmanagedMemoryAccessor.IsOpen*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)
  commentId: M:System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)
  id: Read``1(System.Int64,``0@)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Read<T>(Int64, T)
  nameWithType: UnmanagedMemoryAccessor.Read<T>(Int64, T)
  fullName: UnmanagedMemoryAccessor.Read<T>(Int64, T)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Reads a structure of type <code>T</code> from the accessor into a provided reference.
  remarks: Use this method to read medium to large structures that are not easily accommodated by the other read methods in this class.
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public void Read<T> (long position, out T structure) where T : struct;
    parameters:
    - id: position
      type: System.Int64
      description: The position in the accessor at which to begin reading.
    - id: structure
      type: T
      description: The structure to contain the read data.
    typeParameters:
    - id: T
      description: The type of structure.
  overload: System.IO.UnmanagedMemoryAccessor.Read``1*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "There are not enough bytes after <code>position</code> to read in a structure of type <code>T</code>.  \n  \n -or-  \n  \n `T` is a value type that contains one or more reference types."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support reading.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)
  commentId: M:System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)
  id: ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadArray<T>(Int64, T[], Int32, Int32)
  nameWithType: UnmanagedMemoryAccessor.ReadArray<T>(Int64, T[], Int32, Int32)
  fullName: UnmanagedMemoryAccessor.ReadArray<T>(Int64, T[], Int32, Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Reads structures of type <code>T</code> from the accessor into an array of type <code>T</code>.
  remarks: This method is not safe.
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public int ReadArray<T> (long position, T[] array, int offset, int count) where T : struct;
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes in the accessor at which to begin reading.
    - id: array
      type: T[]
      description: The array to contain the structures read from the accessor.
    - id: offset
      type: System.Int32
      description: The index in <code>array</code> in which to place the first copied structure.
    - id: count
      type: System.Int32
      description: The number of structures of type <code>T</code> to read from the accessor.
    typeParameters:
    - id: T
      description: The type of structure.
    return:
      type: System.Int32
      description: The number of structures read into <code>array</code>. This value can be less than <code>count</code> if there are fewer structures available, or zero if the end of the accessor is reached.
  overload: System.IO.UnmanagedMemoryAccessor.ReadArray``1*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>array</code> is not large enough to contain <code>count</code> of structures (starting from <code>position</code>).
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support reading.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)
  commentId: M:System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)
  id: ReadBoolean(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadBoolean(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadBoolean(Int64)
  fullName: UnmanagedMemoryAccessor.ReadBoolean(Int64)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Reads a Boolean value from the accessor.
  syntax:
    content: public bool ReadBoolean (long position);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin reading.
    return:
      type: System.Boolean
      description: '`true` or `false`.'
  overload: System.IO.UnmanagedMemoryAccessor.ReadBoolean*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to read a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support reading.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)
  commentId: M:System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)
  id: ReadByte(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadByte(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadByte(Int64)
  fullName: UnmanagedMemoryAccessor.ReadByte(Int64)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Reads a byte value from the accessor.
  syntax:
    content: public byte ReadByte (long position);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin reading.
    return:
      type: System.Byte
      description: The value that was read.
  overload: System.IO.UnmanagedMemoryAccessor.ReadByte*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to read a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support reading.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)
  commentId: M:System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)
  id: ReadChar(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadChar(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadChar(Int64)
  fullName: UnmanagedMemoryAccessor.ReadChar(Int64)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Reads a character from the accessor.
  syntax:
    content: public char ReadChar (long position);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin reading.
    return:
      type: System.Char
      description: The value that was read.
  overload: System.IO.UnmanagedMemoryAccessor.ReadChar*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to read a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support reading.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)
  commentId: M:System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)
  id: ReadDecimal(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadDecimal(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadDecimal(Int64)
  fullName: UnmanagedMemoryAccessor.ReadDecimal(Int64)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Reads a decimal value from the accessor.
  syntax:
    content: public decimal ReadDecimal (long position);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin reading.
    return:
      type: System.Decimal
      description: The value that was read.
  overload: System.IO.UnmanagedMemoryAccessor.ReadDecimal*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "There are not enough bytes after <code>position</code> to read a value.  \n  \n -or-  \n  \n The decimal to read is invalid."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support reading.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)
  commentId: M:System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)
  id: ReadDouble(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadDouble(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadDouble(Int64)
  fullName: UnmanagedMemoryAccessor.ReadDouble(Int64)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Reads a double-precision floating-point value from the accessor.
  syntax:
    content: public double ReadDouble (long position);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin reading.
    return:
      type: System.Double
      description: The value that was read.
  overload: System.IO.UnmanagedMemoryAccessor.ReadDouble*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to read a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support reading.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)
  commentId: M:System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)
  id: ReadInt16(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadInt16(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadInt16(Int64)
  fullName: UnmanagedMemoryAccessor.ReadInt16(Int64)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Reads a 16-bit integer from the accessor.
  syntax:
    content: public short ReadInt16 (long position);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin reading.
    return:
      type: System.Int16
      description: The value that was read.
  overload: System.IO.UnmanagedMemoryAccessor.ReadInt16*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to read a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support reading.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)
  commentId: M:System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)
  id: ReadInt32(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadInt32(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadInt32(Int64)
  fullName: UnmanagedMemoryAccessor.ReadInt32(Int64)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Reads a 32-bit integer from the accessor.
  syntax:
    content: public int ReadInt32 (long position);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin reading.
    return:
      type: System.Int32
      description: The value that was read.
  overload: System.IO.UnmanagedMemoryAccessor.ReadInt32*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to read a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support reading.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)
  commentId: M:System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)
  id: ReadInt64(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadInt64(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadInt64(Int64)
  fullName: UnmanagedMemoryAccessor.ReadInt64(Int64)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Reads a 64-bit integer from the accessor.
  syntax:
    content: public long ReadInt64 (long position);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin reading.
    return:
      type: System.Int64
      description: The value that was read.
  overload: System.IO.UnmanagedMemoryAccessor.ReadInt64*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to read a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support reading.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)
  commentId: M:System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)
  id: ReadSByte(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadSByte(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadSByte(Int64)
  fullName: UnmanagedMemoryAccessor.ReadSByte(Int64)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Reads an 8-bit signed integer from the accessor.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public sbyte ReadSByte (long position);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin reading.
    return:
      type: System.SByte
      description: The value that was read.
  overload: System.IO.UnmanagedMemoryAccessor.ReadSByte*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to read a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support reading.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  altCompliant: System.Int16
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)
  commentId: M:System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)
  id: ReadSingle(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadSingle(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadSingle(Int64)
  fullName: UnmanagedMemoryAccessor.ReadSingle(Int64)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Reads a single-precision floating-point value from the accessor.
  syntax:
    content: public float ReadSingle (long position);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin reading.
    return:
      type: System.Single
      description: The value that was read.
  overload: System.IO.UnmanagedMemoryAccessor.ReadSingle*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to read a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support reading.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)
  commentId: M:System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)
  id: ReadUInt16(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadUInt16(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadUInt16(Int64)
  fullName: UnmanagedMemoryAccessor.ReadUInt16(Int64)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Reads an unsigned 16-bit integer from the accessor.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public ushort ReadUInt16 (long position);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin reading.
    return:
      type: System.UInt16
      description: The value that was read.
  overload: System.IO.UnmanagedMemoryAccessor.ReadUInt16*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to read a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support reading.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  altCompliant: System.Int32
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)
  commentId: M:System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)
  id: ReadUInt32(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadUInt32(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadUInt32(Int64)
  fullName: UnmanagedMemoryAccessor.ReadUInt32(Int64)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Reads an unsigned 32-bit integer from the accessor.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public uint ReadUInt32 (long position);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin reading.
    return:
      type: System.UInt32
      description: The value that was read.
  overload: System.IO.UnmanagedMemoryAccessor.ReadUInt32*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to read a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support reading.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  altCompliant: System.Int64
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)
  commentId: M:System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)
  id: ReadUInt64(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: ReadUInt64(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadUInt64(Int64)
  fullName: UnmanagedMemoryAccessor.ReadUInt64(Int64)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Reads an unsigned 64-bit integer from the accessor.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public ulong ReadUInt64 (long position);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin reading.
    return:
      type: System.UInt64
      description: The value that was read.
  overload: System.IO.UnmanagedMemoryAccessor.ReadUInt64*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to read a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support reading.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  altCompliant: System.Decimal
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)
  commentId: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)
  id: Write(System.Int64,System.UInt64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64, UInt64)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, UInt64)
  fullName: UnmanagedMemoryAccessor.Write(Int64, UInt64)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Writes an unsigned 64-bit integer into the accessor.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public void Write (long position, ulong value);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin writing.
    - id: value
      type: System.UInt64
      description: The value to write.
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to write a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support writing.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  altCompliant: System.Decimal
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)
  commentId: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)
  id: Write(System.Int64,System.UInt32)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64, UInt32)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, UInt32)
  fullName: UnmanagedMemoryAccessor.Write(Int64, UInt32)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Writes an unsigned 32-bit integer into the accessor.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public void Write (long position, uint value);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin writing.
    - id: value
      type: System.UInt32
      description: The value to write.
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to write a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support writing.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  altCompliant: System.Int64
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)
  commentId: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)
  id: Write(System.Int64,System.UInt16)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64, UInt16)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, UInt16)
  fullName: UnmanagedMemoryAccessor.Write(Int64, UInt16)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Writes an unsigned 16-bit integer into the accessor.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public void Write (long position, ushort value);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin writing.
    - id: value
      type: System.UInt16
      description: The value to write.
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to write a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support writing.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  altCompliant: System.Int32
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)
  commentId: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)
  id: Write(System.Int64,System.Single)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64, Single)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Single)
  fullName: UnmanagedMemoryAccessor.Write(Int64, Single)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Writes a `Single` into the accessor.
  syntax:
    content: public void Write (long position, float value);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin writing.
    - id: value
      type: System.Single
      description: The value to write.
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to write a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support writing.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)
  commentId: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)
  id: Write(System.Int64,System.SByte)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64, SByte)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, SByte)
  fullName: UnmanagedMemoryAccessor.Write(Int64, SByte)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Writes an 8-bit integer into the accessor.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public void Write (long position, sbyte value);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin writing.
    - id: value
      type: System.SByte
      description: The value to write.
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to write a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support writing.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  altCompliant: System.Int16
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)
  commentId: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)
  id: Write(System.Int64,System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64, Int64)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Int64)
  fullName: UnmanagedMemoryAccessor.Write(Int64, Int64)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Writes a 64-bit integer into the accessor.
  syntax:
    content: public void Write (long position, long value);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin writing.
    - id: value
      type: System.Int64
      description: The value to write.
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after position to write a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support writing.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)
  commentId: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)
  id: Write(System.Int64,System.Double)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64, Double)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Double)
  fullName: UnmanagedMemoryAccessor.Write(Int64, Double)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Writes a `Double` value into the accessor.
  syntax:
    content: public void Write (long position, double value);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin writing.
    - id: value
      type: System.Double
      description: The value to write.
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to write a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support writing.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)
  commentId: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)
  id: Write(System.Int64,System.Int16)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64, Int16)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Int16)
  fullName: UnmanagedMemoryAccessor.Write(Int64, Int16)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Writes a 16-bit integer into the accessor.
  syntax:
    content: public void Write (long position, short value);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin writing.
    - id: value
      type: System.Int16
      description: The value to write.
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to write a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support writing.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)
  commentId: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)
  id: Write(System.Int64,System.Decimal)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64, Decimal)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Decimal)
  fullName: UnmanagedMemoryAccessor.Write(Int64, Decimal)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Writes a decimal value into the accessor.
  syntax:
    content: public void Write (long position, decimal value);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin writing.
    - id: value
      type: System.Decimal
      description: The value to write.
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "There are not enough bytes after <code>position</code> to write a value.  \n  \n -or-  \n  \n The decimal is invalid."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support writing.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)
  commentId: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)
  id: Write(System.Int64,System.Char)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64, Char)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Char)
  fullName: UnmanagedMemoryAccessor.Write(Int64, Char)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Writes a character into the accessor.
  syntax:
    content: public void Write (long position, char value);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin writing.
    - id: value
      type: System.Char
      description: The value to write.
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to write a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support writing.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)
  commentId: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)
  id: Write(System.Int64,System.Byte)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64, Byte)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Byte)
  fullName: UnmanagedMemoryAccessor.Write(Int64, Byte)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Writes a byte value into the accessor.
  syntax:
    content: public void Write (long position, byte value);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin writing.
    - id: value
      type: System.Byte
      description: The value to write.
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to write a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support writing.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)
  commentId: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)
  id: Write(System.Int64,System.Boolean)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64, Boolean)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Boolean)
  fullName: UnmanagedMemoryAccessor.Write(Int64, Boolean)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Writes a Boolean value into the accessor.
  syntax:
    content: public void Write (long position, bool value);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin writing.
    - id: value
      type: System.Boolean
      description: The value to write.
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to write a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support writing.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)
  commentId: M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)
  id: Write(System.Int64,System.Int32)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write(Int64, Int32)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Int32)
  fullName: UnmanagedMemoryAccessor.Write(Int64, Int32)
  type: Method
  assemblies:
  - System.IO.UnmanagedMemoryStream
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Writes a 32-bit integer into the accessor.
  syntax:
    content: public void Write (long position, int value);
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin writing.
    - id: value
      type: System.Int32
      description: The value to write.
  overload: System.IO.UnmanagedMemoryAccessor.Write*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes after <code>position</code> to write a value.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support writing.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)
  commentId: M:System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)
  id: Write``1(System.Int64,``0@)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: Write<T>(Int64, T)
  nameWithType: UnmanagedMemoryAccessor.Write<T>(Int64, T)
  fullName: UnmanagedMemoryAccessor.Write<T>(Int64, T)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Writes a structure into the accessor.
  remarks: Use this method to write medium to large structures that are not easily accommodated by the other <xref:System.IO.UnmanagedMemoryAccessor.Write%2A> methods in this class.
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public void Write<T> (long position, ref T structure) where T : struct;
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin writing.
    - id: structure
      type: T
      description: The structure to write.
    typeParameters:
    - id: T
      description: The type of structure.
  overload: System.IO.UnmanagedMemoryAccessor.Write``1*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes in the accessor after <code>position</code> to write a structure of type <code>T</code>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>position</code> is less than zero or greater than the capacity of the accessor.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support writing.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)
  commentId: M:System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)
  id: WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)
  parent: System.IO.UnmanagedMemoryAccessor
  langs:
  - csharp
  name: WriteArray<T>(Int64, T[], Int32, Int32)
  nameWithType: UnmanagedMemoryAccessor.WriteArray<T>(Int64, T[], Int32, Int32)
  fullName: UnmanagedMemoryAccessor.WriteArray<T>(Int64, T[], Int32, Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime.InteropServices
  namespace: System.IO
  summary: Writes structures from an array of type <code>T</code> into the accessor.
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public void WriteArray<T> (long position, T[] array, int offset, int count) where T : struct;
    parameters:
    - id: position
      type: System.Int64
      description: The number of bytes into the accessor at which to begin writing.
    - id: array
      type: T[]
      description: The array to write into the accessor.
    - id: offset
      type: System.Int32
      description: The index in <code>array</code> to start writing from.
    - id: count
      type: System.Int32
      description: The number of structures in <code>array</code> to write.
    typeParameters:
    - id: T
      description: The type of structure.
  overload: System.IO.UnmanagedMemoryAccessor.WriteArray``1*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: There are not enough bytes in the accessor after <code>position</code> to write the number of structures specified by <code>count</code>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>position</code> is less than zero or greater than the capacity of the accessor.  \n  \n -or-  \n  \n <code>offset</code> or <code>count</code> is less than zero."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The accessor does not support writing.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The accessor has been disposed.
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ObjectDisposedException
  parent: System
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.IO.UnmanagedMemoryAccessor.#ctor
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: UnmanagedMemoryAccessor()
  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor()
  fullName: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor()
- uid: System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: UnmanagedMemoryAccessor(SafeBuffer, Int64, Int64)
  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer, Int64, Int64)
  fullName: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer, Int64, Int64)
- uid: System.Runtime.InteropServices.SafeBuffer
  parent: System.Runtime.InteropServices
  isExternal: false
  name: SafeBuffer
  nameWithType: SafeBuffer
  fullName: System.Runtime.InteropServices.SafeBuffer
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: UnmanagedMemoryAccessor(SafeBuffer, Int64, Int64, FileAccess)
  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer, Int64, Int64, FileAccess)
  fullName: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor(SafeBuffer, Int64, Int64, FileAccess)
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  nameWithType: FileAccess
  fullName: System.IO.FileAccess
- uid: System.IO.UnmanagedMemoryAccessor.CanRead
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: CanRead
  nameWithType: UnmanagedMemoryAccessor.CanRead
  fullName: UnmanagedMemoryAccessor.CanRead
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.UnmanagedMemoryAccessor.CanWrite
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: CanWrite
  nameWithType: UnmanagedMemoryAccessor.CanWrite
  fullName: UnmanagedMemoryAccessor.CanWrite
- uid: System.IO.UnmanagedMemoryAccessor.Capacity
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Capacity
  nameWithType: UnmanagedMemoryAccessor.Capacity
  fullName: UnmanagedMemoryAccessor.Capacity
- uid: System.IO.UnmanagedMemoryAccessor.Dispose
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Dispose()
  nameWithType: UnmanagedMemoryAccessor.Dispose()
  fullName: UnmanagedMemoryAccessor.Dispose()
- uid: System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: UnmanagedMemoryAccessor.Dispose(Boolean)
  fullName: UnmanagedMemoryAccessor.Dispose(Boolean)
- uid: System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Initialize(SafeBuffer, Int64, Int64, FileAccess)
  nameWithType: UnmanagedMemoryAccessor.Initialize(SafeBuffer, Int64, Int64, FileAccess)
  fullName: UnmanagedMemoryAccessor.Initialize(SafeBuffer, Int64, Int64, FileAccess)
- uid: System.IO.UnmanagedMemoryAccessor.IsOpen
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: IsOpen
  nameWithType: UnmanagedMemoryAccessor.IsOpen
  fullName: UnmanagedMemoryAccessor.IsOpen
- uid: System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Read<T>(Int64, T)
  nameWithType: UnmanagedMemoryAccessor.Read<T>(Int64, T)
  fullName: UnmanagedMemoryAccessor.Read<T>(Int64, T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadArray<T>(Int64, T[], Int32, Int32)
  nameWithType: UnmanagedMemoryAccessor.ReadArray<T>(Int64, T[], Int32, Int32)
  fullName: UnmanagedMemoryAccessor.ReadArray<T>(Int64, T[], Int32, Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadBoolean(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadBoolean(Int64)
  fullName: UnmanagedMemoryAccessor.ReadBoolean(Int64)
- uid: System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadByte(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadByte(Int64)
  fullName: UnmanagedMemoryAccessor.ReadByte(Int64)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadChar(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadChar(Int64)
  fullName: UnmanagedMemoryAccessor.ReadChar(Int64)
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadDecimal(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadDecimal(Int64)
  fullName: UnmanagedMemoryAccessor.ReadDecimal(Int64)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadDouble(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadDouble(Int64)
  fullName: UnmanagedMemoryAccessor.ReadDouble(Int64)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadInt16(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadInt16(Int64)
  fullName: UnmanagedMemoryAccessor.ReadInt16(Int64)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadInt32(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadInt32(Int64)
  fullName: UnmanagedMemoryAccessor.ReadInt32(Int64)
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadInt64(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadInt64(Int64)
  fullName: UnmanagedMemoryAccessor.ReadInt64(Int64)
- uid: System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadSByte(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadSByte(Int64)
  fullName: UnmanagedMemoryAccessor.ReadSByte(Int64)
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadSingle(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadSingle(Int64)
  fullName: UnmanagedMemoryAccessor.ReadSingle(Int64)
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadUInt16(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadUInt16(Int64)
  fullName: UnmanagedMemoryAccessor.ReadUInt16(Int64)
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadUInt32(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadUInt32(Int64)
  fullName: UnmanagedMemoryAccessor.ReadUInt32(Int64)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadUInt64(Int64)
  nameWithType: UnmanagedMemoryAccessor.ReadUInt64(Int64)
  fullName: UnmanagedMemoryAccessor.ReadUInt64(Int64)
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64, UInt64)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, UInt64)
  fullName: UnmanagedMemoryAccessor.Write(Int64, UInt64)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64, UInt32)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, UInt32)
  fullName: UnmanagedMemoryAccessor.Write(Int64, UInt32)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64, UInt16)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, UInt16)
  fullName: UnmanagedMemoryAccessor.Write(Int64, UInt16)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64, Single)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Single)
  fullName: UnmanagedMemoryAccessor.Write(Int64, Single)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64, SByte)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, SByte)
  fullName: UnmanagedMemoryAccessor.Write(Int64, SByte)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64, Int64)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Int64)
  fullName: UnmanagedMemoryAccessor.Write(Int64, Int64)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64, Double)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Double)
  fullName: UnmanagedMemoryAccessor.Write(Int64, Double)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64, Int16)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Int16)
  fullName: UnmanagedMemoryAccessor.Write(Int64, Int16)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64, Decimal)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Decimal)
  fullName: UnmanagedMemoryAccessor.Write(Int64, Decimal)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64, Char)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Char)
  fullName: UnmanagedMemoryAccessor.Write(Int64, Char)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64, Byte)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Byte)
  fullName: UnmanagedMemoryAccessor.Write(Int64, Byte)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64, Boolean)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Boolean)
  fullName: UnmanagedMemoryAccessor.Write(Int64, Boolean)
- uid: System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write(Int64, Int32)
  nameWithType: UnmanagedMemoryAccessor.Write(Int64, Int32)
  fullName: UnmanagedMemoryAccessor.Write(Int64, Int32)
- uid: System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write<T>(Int64, T)
  nameWithType: UnmanagedMemoryAccessor.Write<T>(Int64, T)
  fullName: UnmanagedMemoryAccessor.Write<T>(Int64, T)
- uid: System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: WriteArray<T>(Int64, T[], Int32, Int32)
  nameWithType: UnmanagedMemoryAccessor.WriteArray<T>(Int64, T[], Int32, Int32)
  fullName: UnmanagedMemoryAccessor.WriteArray<T>(Int64, T[], Int32, Int32)
- uid: System.IO.UnmanagedMemoryAccessor.#ctor*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: UnmanagedMemoryAccessor
  nameWithType: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor
  fullName: UnmanagedMemoryAccessor.UnmanagedMemoryAccessor
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.CanRead*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: CanRead
  nameWithType: UnmanagedMemoryAccessor.CanRead
  fullName: UnmanagedMemoryAccessor.CanRead
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.CanWrite*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: CanWrite
  nameWithType: UnmanagedMemoryAccessor.CanWrite
  fullName: UnmanagedMemoryAccessor.CanWrite
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.Capacity*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Capacity
  nameWithType: UnmanagedMemoryAccessor.Capacity
  fullName: UnmanagedMemoryAccessor.Capacity
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.Dispose*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Dispose
  nameWithType: UnmanagedMemoryAccessor.Dispose
  fullName: UnmanagedMemoryAccessor.Dispose
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.Initialize*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Initialize
  nameWithType: UnmanagedMemoryAccessor.Initialize
  fullName: UnmanagedMemoryAccessor.Initialize
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.IsOpen*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: IsOpen
  nameWithType: UnmanagedMemoryAccessor.IsOpen
  fullName: UnmanagedMemoryAccessor.IsOpen
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.Read``1*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Read<T>
  nameWithType: UnmanagedMemoryAccessor.Read<T>
  fullName: UnmanagedMemoryAccessor.Read<T>
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.ReadArray``1*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadArray<T>
  nameWithType: UnmanagedMemoryAccessor.ReadArray<T>
  fullName: UnmanagedMemoryAccessor.ReadArray<T>
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.ReadBoolean*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadBoolean
  nameWithType: UnmanagedMemoryAccessor.ReadBoolean
  fullName: UnmanagedMemoryAccessor.ReadBoolean
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.ReadByte*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadByte
  nameWithType: UnmanagedMemoryAccessor.ReadByte
  fullName: UnmanagedMemoryAccessor.ReadByte
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.ReadChar*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadChar
  nameWithType: UnmanagedMemoryAccessor.ReadChar
  fullName: UnmanagedMemoryAccessor.ReadChar
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.ReadDecimal*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadDecimal
  nameWithType: UnmanagedMemoryAccessor.ReadDecimal
  fullName: UnmanagedMemoryAccessor.ReadDecimal
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.ReadDouble*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadDouble
  nameWithType: UnmanagedMemoryAccessor.ReadDouble
  fullName: UnmanagedMemoryAccessor.ReadDouble
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt16*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadInt16
  nameWithType: UnmanagedMemoryAccessor.ReadInt16
  fullName: UnmanagedMemoryAccessor.ReadInt16
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt32*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadInt32
  nameWithType: UnmanagedMemoryAccessor.ReadInt32
  fullName: UnmanagedMemoryAccessor.ReadInt32
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.ReadInt64*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadInt64
  nameWithType: UnmanagedMemoryAccessor.ReadInt64
  fullName: UnmanagedMemoryAccessor.ReadInt64
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.ReadSByte*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadSByte
  nameWithType: UnmanagedMemoryAccessor.ReadSByte
  fullName: UnmanagedMemoryAccessor.ReadSByte
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.ReadSingle*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadSingle
  nameWithType: UnmanagedMemoryAccessor.ReadSingle
  fullName: UnmanagedMemoryAccessor.ReadSingle
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt16*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadUInt16
  nameWithType: UnmanagedMemoryAccessor.ReadUInt16
  fullName: UnmanagedMemoryAccessor.ReadUInt16
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt32*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadUInt32
  nameWithType: UnmanagedMemoryAccessor.ReadUInt32
  fullName: UnmanagedMemoryAccessor.ReadUInt32
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.ReadUInt64*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: ReadUInt64
  nameWithType: UnmanagedMemoryAccessor.ReadUInt64
  fullName: UnmanagedMemoryAccessor.ReadUInt64
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.Write*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write
  nameWithType: UnmanagedMemoryAccessor.Write
  fullName: UnmanagedMemoryAccessor.Write
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.Write``1*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: Write<T>
  nameWithType: UnmanagedMemoryAccessor.Write<T>
  fullName: UnmanagedMemoryAccessor.Write<T>
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.IO.UnmanagedMemoryAccessor.WriteArray``1*
  parent: System.IO.UnmanagedMemoryAccessor
  isExternal: false
  name: WriteArray<T>
  nameWithType: UnmanagedMemoryAccessor.WriteArray<T>
  fullName: UnmanagedMemoryAccessor.WriteArray<T>
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryAccessor.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
