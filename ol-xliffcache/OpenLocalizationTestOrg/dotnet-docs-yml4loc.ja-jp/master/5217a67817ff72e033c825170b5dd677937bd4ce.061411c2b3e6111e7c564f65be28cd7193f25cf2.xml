{"nodes":[{"content":"Provides methods for passing credentials across a stream and requesting or performing authentication for client-server applications.","nodes":[{"pos":[0,132],"content":"Provides methods for passing credentials across a stream and requesting or performing authentication for client-server applications.","nodes":[{"content":"Provides methods for passing credentials across a stream and requesting or performing authentication for client-server applications.","pos":[0,132]}]}],"pos":[997,1130],"yaml":true},{"content":"This abstract class provides methods and properties that are common to authenticated streams.  \n  \n Authenticated streams can provide authentication, data signing, and encryption services that can help maintain the integrity and confidentiality of data transmitted using the <xref:System.Net.Security.AuthenticatedStream.InnerStream%2A>.  \n  \n The security protocol implemented by a class that derives from <xref:System.Net.Security.AuthenticatedStream> together with the security protocols supported on the client and server will determine the security features that are available to an application. The <xref:System.Net.Security.NegotiateStream> and <xref:System.Net.Security.SslStream> classes inherit from <xref:System.Net.Security.AuthenticatedStream> and implement the Negotiate and Secure Sockets Layer security protocols, respectively.","nodes":[{"pos":[0,93],"content":"This abstract class provides methods and properties that are common to authenticated streams.","nodes":[{"content":"This abstract class provides methods and properties that are common to authenticated streams.","pos":[0,93]}]},{"pos":[100,337],"content":"Authenticated streams can provide authentication, data signing, and encryption services that can help maintain the integrity and confidentiality of data transmitted using the <xref:System.Net.Security.AuthenticatedStream.InnerStream%2A>.","nodes":[{"content":"Authenticated streams can provide authentication, data signing, and encryption services that can help maintain the integrity and confidentiality of data transmitted using the <ph id=\"ph1\">&lt;xref:System.Net.Security.AuthenticatedStream.InnerStream%2A&gt;</ph>.","pos":[0,237],"source":"Authenticated streams can provide authentication, data signing, and encryption services that can help maintain the integrity and confidentiality of data transmitted using the <xref:System.Net.Security.AuthenticatedStream.InnerStream%2A>."}]},{"pos":[344,843],"content":"The security protocol implemented by a class that derives from <xref:System.Net.Security.AuthenticatedStream> together with the security protocols supported on the client and server will determine the security features that are available to an application. The <xref:System.Net.Security.NegotiateStream> and <xref:System.Net.Security.SslStream> classes inherit from <xref:System.Net.Security.AuthenticatedStream> and implement the Negotiate and Secure Sockets Layer security protocols, respectively.","nodes":[{"content":"The security protocol implemented by a class that derives from <xref:System.Net.Security.AuthenticatedStream> together with the security protocols supported on the client and server will determine the security features that are available to an application. The <xref:System.Net.Security.NegotiateStream> and <xref:System.Net.Security.SslStream> classes inherit from <xref:System.Net.Security.AuthenticatedStream> and implement the Negotiate and Secure Sockets Layer security protocols, respectively.","pos":[0,499],"nodes":[{"content":"The security protocol implemented by a class that derives from <ph id=\"ph1\">&lt;xref:System.Net.Security.AuthenticatedStream&gt;</ph> together with the security protocols supported on the client and server will determine the security features that are available to an application.","pos":[0,256],"source":"The security protocol implemented by a class that derives from <xref:System.Net.Security.AuthenticatedStream> together with the security protocols supported on the client and server will determine the security features that are available to an application."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Security.NegotiateStream&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.SslStream&gt;</ph> classes inherit from <ph id=\"ph3\">&lt;xref:System.Net.Security.AuthenticatedStream&gt;</ph> and implement the Negotiate and Secure Sockets Layer security protocols, respectively.","pos":[257,499],"source":" The <xref:System.Net.Security.NegotiateStream> and <xref:System.Net.Security.SslStream> classes inherit from <xref:System.Net.Security.AuthenticatedStream> and implement the Negotiate and Secure Sockets Layer security protocols, respectively."}]}]}],"pos":[1141,1991],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Net.Security.AuthenticatedStream\"></xref> class.","nodes":[{"pos":[0,101],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.AuthenticatedStream\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Net.Security.AuthenticatedStream\"></xref> class."}],"pos":[6145,6247],"yaml":true},{"content":"When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.AuthenticatedStream> has no effect on the `innerStream` stream.  \n  \n This constructor is provided for implementers of authenticated streams, and can be called only by classes that are derived from <xref:System.Net.Security.AuthenticatedStream>.","nodes":[{"pos":[0,162],"content":"When you specify <ph id=\"ph1\">`true`</ph> for the <ph id=\"ph2\">`leaveStreamOpen`</ph> parameter, closing the <ph id=\"ph3\">&lt;xref:System.Net.Security.AuthenticatedStream&gt;</ph> has no effect on the <ph id=\"ph4\">`innerStream`</ph> stream.","source":"When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.AuthenticatedStream> has no effect on the `innerStream` stream."},{"pos":[169,344],"content":"This constructor is provided for implementers of authenticated streams, and can be called only by classes that are derived from <xref:System.Net.Security.AuthenticatedStream>.","nodes":[{"content":"This constructor is provided for implementers of authenticated streams, and can be called only by classes that are derived from <ph id=\"ph1\">&lt;xref:System.Net.Security.AuthenticatedStream&gt;</ph>.","pos":[0,175],"source":"This constructor is provided for implementers of authenticated streams, and can be called only by classes that are derived from <xref:System.Net.Security.AuthenticatedStream>."}]}],"pos":[6258,6607],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.IO.Stream\"></xref> object used by the <xref href=\"System.Net.Security.AuthenticatedStream\"></xref> for sending and receiving data.","nodes":[{"pos":[0,151],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> object used by the <ph id=\"ph2\">&lt;xref href=\"System.Net.Security.AuthenticatedStream\"&gt;&lt;/xref&gt;</ph> for sending and receiving data.","source":"A <xref href=\"System.IO.Stream\"></xref> object used by the <xref href=\"System.Net.Security.AuthenticatedStream\"></xref> for sending and receiving data."}],"pos":[6805,6957],"yaml":true},{"content":"A <xref href=\"System.Boolean\"></xref> that indicates whether closing this <xref href=\"System.Net.Security.AuthenticatedStream\"></xref> object also closes <code>innerStream</code>.","nodes":[{"pos":[0,179],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> that indicates whether closing this <ph id=\"ph2\">&lt;xref href=\"System.Net.Security.AuthenticatedStream\"&gt;&lt;/xref&gt;</ph> object also closes <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">innerStream</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.Boolean\"></xref> that indicates whether closing this <xref href=\"System.Net.Security.AuthenticatedStream\"></xref> object also closes <code>innerStream</code>."}],"pos":[7034,7214],"yaml":true},{"content":"<code>innerStream</code> is `null`.  \n  \n -or-  \n  \n <code>innerStream</code> is equal to <xref href=\"System.IO.Stream.Null\"></xref>.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>innerStream</code> is `null`."},{"pos":[42,46],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[53,133],"content":"<ph id=\"ph1\">&lt;code&gt;innerStream&lt;/code&gt;</ph> is equal to <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream.Null\"&gt;&lt;/xref&gt;</ph>.","source":"<code>innerStream</code> is equal to <xref href=\"System.IO.Stream.Null\"></xref>."}],"pos":[7389,7531],"yaml":true},{"content":"Releases the unmanaged resources used by the <xref href=\"System.Net.Security.AuthenticatedStream\"></xref> and optionally releases the managed resources.","nodes":[{"pos":[0,152],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.AuthenticatedStream\"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.Net.Security.AuthenticatedStream\"></xref> and optionally releases the managed resources."}],"pos":[8772,8925],"yaml":true},{"content":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \n  \n When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.AuthenticatedStream> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"pos":[0,293],"content":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the <ph id=\"ph2\">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.","pos":[0,103],"source":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[104,209],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with <ph id=\"ph3\">`disposing`</ph> set to <ph id=\"ph4\">`false`</ph>.","pos":[210,293],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."}]},{"pos":[300,541],"content":"When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.AuthenticatedStream> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this <ph id=\"ph2\">&lt;xref:System.Net.Security.AuthenticatedStream&gt;</ph> references.","pos":[0,171],"source":"When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.AuthenticatedStream> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[172,241],"source":" This method invokes the `Dispose()` method of each referenced object."}]}],"pos":[8936,9482],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[9637,9740],"yaml":true},{"content":"Gets the stream used by this <xref href=\"System.Net.Security.AuthenticatedStream\"></xref> for sending and receiving data.","nodes":[{"pos":[0,121],"content":"Gets the stream used by this <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.AuthenticatedStream\"&gt;&lt;/xref&gt;</ph> for sending and receiving data.","source":"Gets the stream used by this <xref href=\"System.Net.Security.AuthenticatedStream\"></xref> for sending and receiving data."}],"pos":[11010,11132],"yaml":true},{"content":"Classes that inherit from <xref:System.Net.Security.AuthenticatedStream> can use this property to access the stream passed to the <xref:System.Net.Security.AuthenticatedStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29>.","nodes":[{"pos":[0,224],"content":"Classes that inherit from <xref:System.Net.Security.AuthenticatedStream> can use this property to access the stream passed to the <xref:System.Net.Security.AuthenticatedStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29>.","nodes":[{"content":"Classes that inherit from <ph id=\"ph1\">&lt;xref:System.Net.Security.AuthenticatedStream&gt;</ph> can use this property to access the stream passed to the <ph id=\"ph2\">&lt;xref:System.Net.Security.AuthenticatedStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29&gt;</ph>.","pos":[0,224],"source":"Classes that inherit from <xref:System.Net.Security.AuthenticatedStream> can use this property to access the stream passed to the <xref:System.Net.Security.AuthenticatedStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29>."}]}],"pos":[11143,11368],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.IO.Stream\"></xref> object.","nodes":[{"pos":[0,47],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> object.","source":"A <xref href=\"System.IO.Stream\"></xref> object."}],"pos":[11499,11547],"yaml":true},{"content":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether authentication was successful.","nodes":[{"pos":[0,102],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value that indicates whether authentication was successful.","source":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether authentication was successful."}],"pos":[12845,12948],"yaml":true},{"content":"The methods called to perform authentication are defined in the classes that inherit from <xref:System.Net.Security.AuthenticatedStream>.","nodes":[{"pos":[0,137],"content":"The methods called to perform authentication are defined in the classes that inherit from <xref:System.Net.Security.AuthenticatedStream>.","nodes":[{"content":"The methods called to perform authentication are defined in the classes that inherit from <ph id=\"ph1\">&lt;xref:System.Net.Security.AuthenticatedStream&gt;</ph>.","pos":[0,137],"source":"The methods called to perform authentication are defined in the classes that inherit from <xref:System.Net.Security.AuthenticatedStream>."}]}],"pos":[12959,13097],"yaml":true,"extradata":"MT"},{"content":"`true` if successful authentication occurred; otherwise, `false`.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">`true`</ph> if successful authentication occurred; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if successful authentication occurred; otherwise, `false`."}],"pos":[13576,13644],"yaml":true},{"content":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether data sent using this <xref href=\"System.Net.Security.AuthenticatedStream\"></xref> is encrypted.","nodes":[{"pos":[0,167],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value that indicates whether data sent using this <ph id=\"ph2\">&lt;xref href=\"System.Net.Security.AuthenticatedStream\"&gt;&lt;/xref&gt;</ph> is encrypted.","source":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether data sent using this <xref href=\"System.Net.Security.AuthenticatedStream\"></xref> is encrypted."}],"pos":[14922,15090],"yaml":true},{"content":"Encryption helps to protect the privacy of the data; namely, it helps to ensure that while data is in transit, it cannot be deciphered by third parties.","nodes":[{"pos":[0,152],"content":"Encryption helps to protect the privacy of the data; namely, it helps to ensure that while data is in transit, it cannot be deciphered by third parties.","nodes":[{"content":"Encryption helps to protect the privacy of the data; namely, it helps to ensure that while data is in transit, it cannot be deciphered by third parties.","pos":[0,152]}]}],"pos":[15101,15254],"yaml":true,"extradata":"MT"},{"content":"`true` if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise, `false`.","nodes":[{"pos":[0,140],"content":"<ph id=\"ph1\">`true`</ph> if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise, `false`."}],"pos":[15729,15872],"yaml":true},{"content":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether both server and client have been authenticated.","nodes":[{"pos":[0,119],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value that indicates whether both server and client have been authenticated.","source":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether both server and client have been authenticated."}],"pos":[17218,17338],"yaml":true},{"content":"Not all security protocols support mutual authentication. To determine whether mutual authentication is supported by the security protocol implemented in a class that inherits from <xref:System.Net.Security.AuthenticatedStream>, check the class documentation.","nodes":[{"pos":[0,259],"content":"Not all security protocols support mutual authentication. To determine whether mutual authentication is supported by the security protocol implemented in a class that inherits from <xref:System.Net.Security.AuthenticatedStream>, check the class documentation.","nodes":[{"content":"Not all security protocols support mutual authentication. To determine whether mutual authentication is supported by the security protocol implemented in a class that inherits from <xref:System.Net.Security.AuthenticatedStream>, check the class documentation.","pos":[0,259],"nodes":[{"content":"Not all security protocols support mutual authentication.","pos":[0,57]},{"content":"To determine whether mutual authentication is supported by the security protocol implemented in a class that inherits from <ph id=\"ph1\">&lt;xref:System.Net.Security.AuthenticatedStream&gt;</ph>, check the class documentation.","pos":[58,259],"source":" To determine whether mutual authentication is supported by the security protocol implemented in a class that inherits from <xref:System.Net.Security.AuthenticatedStream>, check the class documentation."}]}]}],"pos":[17349,17609],"yaml":true,"extradata":"MT"},{"content":"`true` if the client and server have been authenticated; otherwise, `false`.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">`true`</ph> if the client and server have been authenticated; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the client and server have been authenticated; otherwise, `false`."}],"pos":[18096,18175],"yaml":true},{"content":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the local side of the connection was authenticated as the server.","nodes":[{"pos":[0,137],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value that indicates whether the local side of the connection was authenticated as the server.","source":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the local side of the connection was authenticated as the server."}],"pos":[19443,19581],"yaml":true},{"content":"Most security protocols used for client-server authentication define specific behavior and requirements for supplying credentials for authentication based on whether you are the client or the server.","nodes":[{"pos":[0,199],"content":"Most security protocols used for client-server authentication define specific behavior and requirements for supplying credentials for authentication based on whether you are the client or the server.","nodes":[{"content":"Most security protocols used for client-server authentication define specific behavior and requirements for supplying credentials for authentication based on whether you are the client or the server.","pos":[0,199]}]}],"pos":[19592,19792],"yaml":true,"extradata":"MT"},{"content":"`true` if the local endpoint was authenticated as the server side of a client-server authenticated connection; `false` if the local endpoint was authenticated as the client.","nodes":[{"pos":[0,173],"content":"<ph id=\"ph1\">`true`</ph> if the local endpoint was authenticated as the server side of a client-server authenticated connection; <ph id=\"ph2\">`false`</ph> if the local endpoint was authenticated as the client.","source":"`true` if the local endpoint was authenticated as the server side of a client-server authenticated connection; `false` if the local endpoint was authenticated as the client."}],"pos":[20264,20440],"yaml":true},{"content":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the data sent using this stream is signed.","nodes":[{"pos":[0,114],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value that indicates whether the data sent using this stream is signed.","source":"Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the data sent using this stream is signed."}],"pos":[21693,21808],"yaml":true},{"content":"Data signing helps to protect the integrity of the data; namely, it helps the recipient determine whether the data has been tampered with while in transit.","nodes":[{"pos":[0,155],"content":"Data signing helps to protect the integrity of the data; namely, it helps the recipient determine whether the data has been tampered with while in transit.","nodes":[{"content":"Data signing helps to protect the integrity of the data; namely, it helps the recipient determine whether the data has been tampered with while in transit.","pos":[0,155]}]}],"pos":[21819,21975],"yaml":true,"extradata":"MT"},{"content":"`true` if the data is signed before being transmitted; otherwise, `false`.","nodes":[{"pos":[0,74],"content":"<ph id=\"ph1\">`true`</ph> if the data is signed before being transmitted; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the data is signed before being transmitted; otherwise, `false`."}],"pos":[22447,22524],"yaml":true},{"content":"Gets whether the stream used by this <xref href=\"System.Net.Security.AuthenticatedStream\"></xref> for sending and receiving data has been left open.","nodes":[{"pos":[0,148],"content":"Gets whether the stream used by this <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.AuthenticatedStream\"&gt;&lt;/xref&gt;</ph> for sending and receiving data has been left open.","source":"Gets whether the stream used by this <xref href=\"System.Net.Security.AuthenticatedStream\"></xref> for sending and receiving data has been left open."}],"pos":[23849,23998],"yaml":true},{"content":"When set to `true`, the stream passed to the constructor of this class will not be closed after the instance of this class is closed. When set to `false`, closing the instance of this class will also close the underlined transport stream. The default value of this property is `false`.","nodes":[{"pos":[0,285],"content":"When set to `true`, the stream passed to the constructor of this class will not be closed after the instance of this class is closed. When set to `false`, closing the instance of this class will also close the underlined transport stream. The default value of this property is `false`.","nodes":[{"content":"When set to <ph id=\"ph1\">`true`</ph>, the stream passed to the constructor of this class will not be closed after the instance of this class is closed.","pos":[0,133],"source":"When set to `true`, the stream passed to the constructor of this class will not be closed after the instance of this class is closed."},{"content":"When set to <ph id=\"ph1\">`false`</ph>, closing the instance of this class will also close the underlined transport stream.","pos":[134,238],"source":" When set to `false`, closing the instance of this class will also close the underlined transport stream."},{"content":"The default value of this property is <ph id=\"ph1\">`false`</ph>.","pos":[239,285],"source":" The default value of this property is `false`."}]}],"pos":[24009,24295],"yaml":true,"extradata":"MT"},{"content":"`true` if the inner stream has been left open; otherwise, `false`.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">`true`</ph> if the inner stream has been left open; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the inner stream has been left open; otherwise, `false`."}],"pos":[24418,24487],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.Security.AuthenticatedStream\n  commentId: T:System.Net.Security.AuthenticatedStream\n  id: AuthenticatedStream\n  children:\n  - System.Net.Security.AuthenticatedStream.#ctor(System.IO.Stream,System.Boolean)\n  - System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)\n  - System.Net.Security.AuthenticatedStream.InnerStream\n  - System.Net.Security.AuthenticatedStream.IsAuthenticated\n  - System.Net.Security.AuthenticatedStream.IsEncrypted\n  - System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated\n  - System.Net.Security.AuthenticatedStream.IsServer\n  - System.Net.Security.AuthenticatedStream.IsSigned\n  - System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen\n  langs:\n  - csharp\n  name: AuthenticatedStream\n  nameWithType: AuthenticatedStream\n  fullName: System.Net.Security.AuthenticatedStream\n  type: Class\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Provides methods for passing credentials across a stream and requesting or performing authentication for client-server applications.\n  remarks: \"This abstract class provides methods and properties that are common to authenticated streams.  \\n  \\n Authenticated streams can provide authentication, data signing, and encryption services that can help maintain the integrity and confidentiality of data transmitted using the <xref:System.Net.Security.AuthenticatedStream.InnerStream%2A>.  \\n  \\n The security protocol implemented by a class that derives from <xref:System.Net.Security.AuthenticatedStream> together with the security protocols supported on the client and server will determine the security features that are available to an application. The <xref:System.Net.Security.NegotiateStream> and <xref:System.Net.Security.SslStream> classes inherit from <xref:System.Net.Security.AuthenticatedStream> and implement the Negotiate and Secure Sockets Layer security protocols, respectively.\"\n  example:\n  - \"The following code example demonstrates displaying the properties of an authenticated stream.  \\n  \\n [!code-cpp[NclNegoAsyncClient#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#6)]\\n [!code-csharp[NclNegoAsyncClient#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#6)]\"\n  syntax:\n    content: 'public abstract class AuthenticatedStream : System.IO.Stream'\n  inheritance:\n  - System.Object\n  - System.IO.Stream\n  derivedClasses:\n  - System.Net.Security.NegotiateStream\n  - System.Net.Security.SslStream\n  implements: []\n  inheritedMembers:\n  - System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.IO.Stream.CanRead\n  - System.IO.Stream.CanSeek\n  - System.IO.Stream.CanTimeout\n  - System.IO.Stream.CanWrite\n  - System.IO.Stream.Close\n  - System.IO.Stream.CopyTo(System.IO.Stream)\n  - System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  - System.IO.Stream.CreateWaitHandle\n  - System.IO.Stream.Dispose\n  - System.IO.Stream.EndRead(System.IAsyncResult)\n  - System.IO.Stream.EndWrite(System.IAsyncResult)\n  - System.IO.Stream.Flush\n  - System.IO.Stream.FlushAsync\n  - System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n  - System.IO.Stream.Length\n  - System.IO.Stream.Null\n  - System.IO.Stream.ObjectInvariant\n  - System.IO.Stream.Position\n  - System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  - System.IO.Stream.ReadByte\n  - System.IO.Stream.ReadTimeout\n  - System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\n  - System.IO.Stream.SetLength(System.Int64)\n  - System.IO.Stream.Synchronized(System.IO.Stream)\n  - System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  - System.IO.Stream.WriteByte(System.Byte)\n  - System.IO.Stream.WriteTimeout\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/AuthenticatedStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.AuthenticatedStream.#ctor(System.IO.Stream,System.Boolean)\n  commentId: M:System.Net.Security.AuthenticatedStream.#ctor(System.IO.Stream,System.Boolean)\n  id: '#ctor(System.IO.Stream,System.Boolean)'\n  parent: System.Net.Security.AuthenticatedStream\n  langs:\n  - csharp\n  name: AuthenticatedStream(Stream, Boolean)\n  nameWithType: AuthenticatedStream.AuthenticatedStream(Stream, Boolean)\n  fullName: AuthenticatedStream.AuthenticatedStream(Stream, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Initializes a new instance of the <xref href=\"System.Net.Security.AuthenticatedStream\"></xref> class.\n  remarks: \"When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.AuthenticatedStream> has no effect on the `innerStream` stream.  \\n  \\n This constructor is provided for implementers of authenticated streams, and can be called only by classes that are derived from <xref:System.Net.Security.AuthenticatedStream>.\"\n  syntax:\n    content: protected AuthenticatedStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);\n    parameters:\n    - id: innerStream\n      type: System.IO.Stream\n      description: A <xref href=\"System.IO.Stream\"></xref> object used by the <xref href=\"System.Net.Security.AuthenticatedStream\"></xref> for sending and receiving data.\n    - id: leaveInnerStreamOpen\n      type: System.Boolean\n      description: A <xref href=\"System.Boolean\"></xref> that indicates whether closing this <xref href=\"System.Net.Security.AuthenticatedStream\"></xref> object also closes <code>innerStream</code>.\n  overload: System.Net.Security.AuthenticatedStream.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>innerStream</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>innerStream</code> is equal to <xref href=\\\"System.IO.Stream.Null\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/AuthenticatedStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)\n  commentId: M:System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Net.Security.AuthenticatedStream\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: AuthenticatedStream.Dispose(Boolean)\n  fullName: AuthenticatedStream.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Net.Security.AuthenticatedStream\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.AuthenticatedStream> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.Net.Security.AuthenticatedStream.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/AuthenticatedStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.AuthenticatedStream.InnerStream\n  commentId: P:System.Net.Security.AuthenticatedStream.InnerStream\n  id: InnerStream\n  parent: System.Net.Security.AuthenticatedStream\n  langs:\n  - csharp\n  name: InnerStream\n  nameWithType: AuthenticatedStream.InnerStream\n  fullName: AuthenticatedStream.InnerStream\n  type: Property\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Gets the stream used by this <xref href=\"System.Net.Security.AuthenticatedStream\"></xref> for sending and receiving data.\n  remarks: Classes that inherit from <xref:System.Net.Security.AuthenticatedStream> can use this property to access the stream passed to the <xref:System.Net.Security.AuthenticatedStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29>.\n  syntax:\n    content: protected System.IO.Stream InnerStream { get; }\n    return:\n      type: System.IO.Stream\n      description: A <xref href=\"System.IO.Stream\"></xref> object.\n  overload: System.Net.Security.AuthenticatedStream.InnerStream*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/AuthenticatedStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.AuthenticatedStream.IsAuthenticated\n  commentId: P:System.Net.Security.AuthenticatedStream.IsAuthenticated\n  id: IsAuthenticated\n  parent: System.Net.Security.AuthenticatedStream\n  langs:\n  - csharp\n  name: IsAuthenticated\n  nameWithType: AuthenticatedStream.IsAuthenticated\n  fullName: AuthenticatedStream.IsAuthenticated\n  type: Property\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether authentication was successful.\n  remarks: The methods called to perform authentication are defined in the classes that inherit from <xref:System.Net.Security.AuthenticatedStream>.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclNegoAsyncClient#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#6)]\\n [!code-csharp[NclNegoAsyncClient#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#6)]\"\n  syntax:\n    content: public abstract bool IsAuthenticated { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if successful authentication occurred; otherwise, `false`.'\n  overload: System.Net.Security.AuthenticatedStream.IsAuthenticated*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/AuthenticatedStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.AuthenticatedStream.IsEncrypted\n  commentId: P:System.Net.Security.AuthenticatedStream.IsEncrypted\n  id: IsEncrypted\n  parent: System.Net.Security.AuthenticatedStream\n  langs:\n  - csharp\n  name: IsEncrypted\n  nameWithType: AuthenticatedStream.IsEncrypted\n  fullName: AuthenticatedStream.IsEncrypted\n  type: Property\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether data sent using this <xref href=\"System.Net.Security.AuthenticatedStream\"></xref> is encrypted.\n  remarks: Encryption helps to protect the privacy of the data; namely, it helps to ensure that while data is in transit, it cannot be deciphered by third parties.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclNegoAsyncClient#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#6)]\\n [!code-csharp[NclNegoAsyncClient#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#6)]\"\n  syntax:\n    content: public abstract bool IsEncrypted { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise, `false`.'\n  overload: System.Net.Security.AuthenticatedStream.IsEncrypted*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/AuthenticatedStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated\n  commentId: P:System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated\n  id: IsMutuallyAuthenticated\n  parent: System.Net.Security.AuthenticatedStream\n  langs:\n  - csharp\n  name: IsMutuallyAuthenticated\n  nameWithType: AuthenticatedStream.IsMutuallyAuthenticated\n  fullName: AuthenticatedStream.IsMutuallyAuthenticated\n  type: Property\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether both server and client have been authenticated.\n  remarks: Not all security protocols support mutual authentication. To determine whether mutual authentication is supported by the security protocol implemented in a class that inherits from <xref:System.Net.Security.AuthenticatedStream>, check the class documentation.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclNegoAsyncClient#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#6)]\\n [!code-csharp[NclNegoAsyncClient#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#6)]\"\n  syntax:\n    content: public abstract bool IsMutuallyAuthenticated { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the client and server have been authenticated; otherwise, `false`.'\n  overload: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/AuthenticatedStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.AuthenticatedStream.IsServer\n  commentId: P:System.Net.Security.AuthenticatedStream.IsServer\n  id: IsServer\n  parent: System.Net.Security.AuthenticatedStream\n  langs:\n  - csharp\n  name: IsServer\n  nameWithType: AuthenticatedStream.IsServer\n  fullName: AuthenticatedStream.IsServer\n  type: Property\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the local side of the connection was authenticated as the server.\n  remarks: Most security protocols used for client-server authentication define specific behavior and requirements for supplying credentials for authentication based on whether you are the client or the server.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclNegoAsyncClient#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#6)]\\n [!code-csharp[NclNegoAsyncClient#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#6)]\"\n  syntax:\n    content: public abstract bool IsServer { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the local endpoint was authenticated as the server side of a client-server authenticated connection; `false` if the local endpoint was authenticated as the client.'\n  overload: System.Net.Security.AuthenticatedStream.IsServer*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/AuthenticatedStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.AuthenticatedStream.IsSigned\n  commentId: P:System.Net.Security.AuthenticatedStream.IsSigned\n  id: IsSigned\n  parent: System.Net.Security.AuthenticatedStream\n  langs:\n  - csharp\n  name: IsSigned\n  nameWithType: AuthenticatedStream.IsSigned\n  fullName: AuthenticatedStream.IsSigned\n  type: Property\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Gets a <xref href=\"System.Boolean\"></xref> value that indicates whether the data sent using this stream is signed.\n  remarks: Data signing helps to protect the integrity of the data; namely, it helps the recipient determine whether the data has been tampered with while in transit.\n  example:\n  - \"The following code example demonstrates displaying the value of this property.  \\n  \\n [!code-cpp[NclNegoAsyncClient#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#6)]\\n [!code-csharp[NclNegoAsyncClient#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#6)]\"\n  syntax:\n    content: public abstract bool IsSigned { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the data is signed before being transmitted; otherwise, `false`.'\n  overload: System.Net.Security.AuthenticatedStream.IsSigned*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/AuthenticatedStream.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen\n  commentId: P:System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen\n  id: LeaveInnerStreamOpen\n  parent: System.Net.Security.AuthenticatedStream\n  langs:\n  - csharp\n  name: LeaveInnerStreamOpen\n  nameWithType: AuthenticatedStream.LeaveInnerStreamOpen\n  fullName: AuthenticatedStream.LeaveInnerStreamOpen\n  type: Property\n  assemblies:\n  - System.Net.Security\n  - System\n  - netstandard\n  namespace: System.Net.Security\n  summary: Gets whether the stream used by this <xref href=\"System.Net.Security.AuthenticatedStream\"></xref> for sending and receiving data has been left open.\n  remarks: When set to `true`, the stream passed to the constructor of this class will not be closed after the instance of this class is closed. When set to `false`, closing the instance of this class will also close the underlined transport stream. The default value of this property is `false`.\n  syntax:\n    content: public bool LeaveInnerStreamOpen { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the inner stream has been left open; otherwise, `false`.'\n  overload: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/AuthenticatedStream.xml\n  ms.author: bobdel\n  manager: markl\nreferences:\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Net.Security.AuthenticatedStream.#ctor(System.IO.Stream,System.Boolean)\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: AuthenticatedStream(Stream, Boolean)\n  nameWithType: AuthenticatedStream.AuthenticatedStream(Stream, Boolean)\n  fullName: AuthenticatedStream.AuthenticatedStream(Stream, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: AuthenticatedStream.Dispose(Boolean)\n  fullName: AuthenticatedStream.Dispose(Boolean)\n- uid: System.Net.Security.AuthenticatedStream.InnerStream\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: InnerStream\n  nameWithType: AuthenticatedStream.InnerStream\n  fullName: AuthenticatedStream.InnerStream\n- uid: System.Net.Security.AuthenticatedStream.IsAuthenticated\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: IsAuthenticated\n  nameWithType: AuthenticatedStream.IsAuthenticated\n  fullName: AuthenticatedStream.IsAuthenticated\n- uid: System.Net.Security.AuthenticatedStream.IsEncrypted\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: IsEncrypted\n  nameWithType: AuthenticatedStream.IsEncrypted\n  fullName: AuthenticatedStream.IsEncrypted\n- uid: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: IsMutuallyAuthenticated\n  nameWithType: AuthenticatedStream.IsMutuallyAuthenticated\n  fullName: AuthenticatedStream.IsMutuallyAuthenticated\n- uid: System.Net.Security.AuthenticatedStream.IsServer\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: IsServer\n  nameWithType: AuthenticatedStream.IsServer\n  fullName: AuthenticatedStream.IsServer\n- uid: System.Net.Security.AuthenticatedStream.IsSigned\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: IsSigned\n  nameWithType: AuthenticatedStream.IsSigned\n  fullName: AuthenticatedStream.IsSigned\n- uid: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: LeaveInnerStreamOpen\n  nameWithType: AuthenticatedStream.LeaveInnerStreamOpen\n  fullName: AuthenticatedStream.LeaveInnerStreamOpen\n- uid: System.Net.Security.AuthenticatedStream.#ctor*\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: AuthenticatedStream\n  nameWithType: AuthenticatedStream.AuthenticatedStream\n  fullName: AuthenticatedStream.AuthenticatedStream\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/AuthenticatedStream.xml\n- uid: System.Net.Security.AuthenticatedStream.Dispose*\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: Dispose\n  nameWithType: AuthenticatedStream.Dispose\n  fullName: AuthenticatedStream.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/AuthenticatedStream.xml\n- uid: System.Net.Security.AuthenticatedStream.InnerStream*\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: InnerStream\n  nameWithType: AuthenticatedStream.InnerStream\n  fullName: AuthenticatedStream.InnerStream\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/AuthenticatedStream.xml\n- uid: System.Net.Security.AuthenticatedStream.IsAuthenticated*\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: IsAuthenticated\n  nameWithType: AuthenticatedStream.IsAuthenticated\n  fullName: AuthenticatedStream.IsAuthenticated\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/AuthenticatedStream.xml\n- uid: System.Net.Security.AuthenticatedStream.IsEncrypted*\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: IsEncrypted\n  nameWithType: AuthenticatedStream.IsEncrypted\n  fullName: AuthenticatedStream.IsEncrypted\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/AuthenticatedStream.xml\n- uid: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated*\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: IsMutuallyAuthenticated\n  nameWithType: AuthenticatedStream.IsMutuallyAuthenticated\n  fullName: AuthenticatedStream.IsMutuallyAuthenticated\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/AuthenticatedStream.xml\n- uid: System.Net.Security.AuthenticatedStream.IsServer*\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: IsServer\n  nameWithType: AuthenticatedStream.IsServer\n  fullName: AuthenticatedStream.IsServer\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/AuthenticatedStream.xml\n- uid: System.Net.Security.AuthenticatedStream.IsSigned*\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: IsSigned\n  nameWithType: AuthenticatedStream.IsSigned\n  fullName: AuthenticatedStream.IsSigned\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/AuthenticatedStream.xml\n- uid: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen*\n  parent: System.Net.Security.AuthenticatedStream\n  isExternal: false\n  name: LeaveInnerStreamOpen\n  nameWithType: AuthenticatedStream.LeaveInnerStreamOpen\n  fullName: AuthenticatedStream.LeaveInnerStreamOpen\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/AuthenticatedStream.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.IO.Stream\n  isExternal: false\n  name: BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: Stream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: Stream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n- uid: System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.IO.Stream\n  isExternal: false\n  name: BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: Stream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: Stream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n- uid: System.IO.Stream.CanRead\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanRead\n  nameWithType: Stream.CanRead\n  fullName: Stream.CanRead\n- uid: System.IO.Stream.CanSeek\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanSeek\n  nameWithType: Stream.CanSeek\n  fullName: Stream.CanSeek\n- uid: System.IO.Stream.CanTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanTimeout\n  nameWithType: Stream.CanTimeout\n  fullName: Stream.CanTimeout\n- uid: System.IO.Stream.CanWrite\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanWrite\n  nameWithType: Stream.CanWrite\n  fullName: Stream.CanWrite\n- uid: System.IO.Stream.Close\n  parent: System.IO.Stream\n  isExternal: false\n  name: Close()\n  nameWithType: Stream.Close()\n  fullName: Stream.Close()\n- uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyTo(Stream, Int32)\n  nameWithType: Stream.CopyTo(Stream, Int32)\n  fullName: Stream.CopyTo(Stream, Int32)\n- uid: System.IO.Stream.CopyTo(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyTo(Stream)\n  nameWithType: Stream.CopyTo(Stream)\n  fullName: Stream.CopyTo(Stream)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream)\n  nameWithType: Stream.CopyToAsync(Stream)\n  fullName: Stream.CopyToAsync(Stream)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream, Int32)\n  nameWithType: Stream.CopyToAsync(Stream, Int32)\n  fullName: Stream.CopyToAsync(Stream, Int32)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream, Int32, CancellationToken)\n  nameWithType: Stream.CopyToAsync(Stream, Int32, CancellationToken)\n  fullName: Stream.CopyToAsync(Stream, Int32, CancellationToken)\n- uid: System.IO.Stream.CreateWaitHandle\n  parent: System.IO.Stream\n  isExternal: false\n  name: CreateWaitHandle()\n  nameWithType: Stream.CreateWaitHandle()\n  fullName: Stream.CreateWaitHandle()\n- uid: System.IO.Stream.Dispose\n  parent: System.IO.Stream\n  isExternal: false\n  name: Dispose()\n  nameWithType: Stream.Dispose()\n  fullName: Stream.Dispose()\n- uid: System.IO.Stream.EndRead(System.IAsyncResult)\n  parent: System.IO.Stream\n  isExternal: false\n  name: EndRead(IAsyncResult)\n  nameWithType: Stream.EndRead(IAsyncResult)\n  fullName: Stream.EndRead(IAsyncResult)\n- uid: System.IO.Stream.EndWrite(System.IAsyncResult)\n  parent: System.IO.Stream\n  isExternal: false\n  name: EndWrite(IAsyncResult)\n  nameWithType: Stream.EndWrite(IAsyncResult)\n  fullName: Stream.EndWrite(IAsyncResult)\n- uid: System.IO.Stream.Flush\n  parent: System.IO.Stream\n  isExternal: false\n  name: Flush()\n  nameWithType: Stream.Flush()\n  fullName: Stream.Flush()\n- uid: System.IO.Stream.FlushAsync\n  parent: System.IO.Stream\n  isExternal: false\n  name: FlushAsync()\n  nameWithType: Stream.FlushAsync()\n  fullName: Stream.FlushAsync()\n- uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: false\n  name: FlushAsync(CancellationToken)\n  nameWithType: Stream.FlushAsync(CancellationToken)\n  fullName: Stream.FlushAsync(CancellationToken)\n- uid: System.IO.Stream.Length\n  parent: System.IO.Stream\n  isExternal: false\n  name: Length\n  nameWithType: Stream.Length\n  fullName: Stream.Length\n- uid: System.IO.Stream.Null\n  parent: System.IO.Stream\n  isExternal: false\n  name: \"Null\"\n  nameWithType: Stream.Null\n  fullName: Stream.Null\n- uid: System.IO.Stream.ObjectInvariant\n  parent: System.IO.Stream\n  isExternal: false\n  name: ObjectInvariant()\n  nameWithType: Stream.ObjectInvariant()\n  fullName: Stream.ObjectInvariant()\n- uid: System.IO.Stream.Position\n  parent: System.IO.Stream\n  isExternal: false\n  name: Position\n  nameWithType: Stream.Position\n  fullName: Stream.Position\n- uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: Read(Byte[], Int32, Int32)\n  nameWithType: Stream.Read(Byte[], Int32, Int32)\n  fullName: Stream.Read(Byte[], Int32, Int32)\n- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadAsync(Byte[], Int32, Int32)\n  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32)\n  fullName: Stream.ReadAsync(Byte[], Int32, Int32)\n- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: Stream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n- uid: System.IO.Stream.ReadByte\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadByte()\n  nameWithType: Stream.ReadByte()\n  fullName: Stream.ReadByte()\n- uid: System.IO.Stream.ReadTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadTimeout\n  nameWithType: Stream.ReadTimeout\n  fullName: Stream.ReadTimeout\n- uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.IO.Stream\n  isExternal: false\n  name: Seek(Int64, SeekOrigin)\n  nameWithType: Stream.Seek(Int64, SeekOrigin)\n  fullName: Stream.Seek(Int64, SeekOrigin)\n- uid: System.IO.Stream.SetLength(System.Int64)\n  parent: System.IO.Stream\n  isExternal: false\n  name: SetLength(Int64)\n  nameWithType: Stream.SetLength(Int64)\n  fullName: Stream.SetLength(Int64)\n- uid: System.IO.Stream.Synchronized(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: Synchronized(Stream)\n  nameWithType: Stream.Synchronized(Stream)\n  fullName: Stream.Synchronized(Stream)\n- uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: Write(Byte[], Int32, Int32)\n  nameWithType: Stream.Write(Byte[], Int32, Int32)\n  fullName: Stream.Write(Byte[], Int32, Int32)\n- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteAsync(Byte[], Int32, Int32)\n  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32)\n  fullName: Stream.WriteAsync(Byte[], Int32, Int32)\n- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: Stream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n- uid: System.IO.Stream.WriteByte(System.Byte)\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteByte(Byte)\n  nameWithType: Stream.WriteByte(Byte)\n  fullName: Stream.WriteByte(Byte)\n- uid: System.IO.Stream.WriteTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteTimeout\n  nameWithType: Stream.WriteTimeout\n  fullName: Stream.WriteTimeout\n"}