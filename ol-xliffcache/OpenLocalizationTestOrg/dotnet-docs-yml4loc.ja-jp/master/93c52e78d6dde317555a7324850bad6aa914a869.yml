### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  id: List`1
  children:
  - System.Collections.Generic.List`1.#ctor
  - System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.List`1.#ctor(System.Int32)
  - System.Collections.Generic.List`1.Add(`0)
  - System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.List`1.AsReadOnly
  - System.Collections.Generic.List`1.BinarySearch(`0)
  - System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.List`1.Capacity
  - System.Collections.Generic.List`1.Clear
  - System.Collections.Generic.List`1.Contains(`0)
  - System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  - System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  - System.Collections.Generic.List`1.CopyTo(`0[])
  - System.Collections.Generic.List`1.Count
  - System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  - System.Collections.Generic.List`1.Find(System.Predicate{`0})
  - System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  - System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  - System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  - System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  - System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  - System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  - System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  - System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  - System.Collections.Generic.List`1.ForEach(System.Action{`0})
  - System.Collections.Generic.List`1.GetEnumerator
  - System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  - System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  - System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  - System.Collections.Generic.List`1.IndexOf(`0)
  - System.Collections.Generic.List`1.Insert(System.Int32,`0)
  - System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.List`1.Item(System.Int32)
  - System.Collections.Generic.List`1.LastIndexOf(`0)
  - System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  - System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Remove(`0)
  - System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  - System.Collections.Generic.List`1.RemoveAt(System.Int32)
  - System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Reverse
  - System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  - System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.List`1.Sort
  - System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.List`1.ToArray
  - System.Collections.Generic.List`1.TrimExcess
  - System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  - System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  - System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  - System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  - System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  - System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  - System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  langs:
  - csharp
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  type: Class
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs#cf7f4095e4de7646). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n The <xref:System.Collections.Generic.List%601> class is the generic equivalent of the <xref:System.Collections.ArrayList> class. It implements the <xref:System.Collections.Generic.IList%601> generic interface by using an array whose size is dynamically increased as required.  \n  \n You can add items to a <xref:System.Collections.Generic.List%601> by using the <xref:System.Collections.Generic.List%601.Add%2A> or <xref:System.Collections.Generic.List%601.AddRange%2A> methods.  \n  \n The <xref:System.Collections.Generic.List%601> class uses both an equality comparer and an ordering comparer.  \n  \n-   Methods such as <xref:System.Collections.Generic.List%601.Contains%2A>, <xref:System.Collections.Generic.List%601.IndexOf%2A>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A>, and <xref:System.Collections.Generic.Dictionary%602.Remove%2A> use an equality comparer for the list elements. The default equality comparer for type `T` is determined as follows. If type `T` implements the <xref:System.IEquatable%601> generic interface, then the equality comparer is the <xref:System.IEquatable%601.Equals%28%600%29> method of that interface; otherwise, the default equality comparer is <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName>.  \n  \n-   Methods such as <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> use an ordering comparer for the list elements. The default comparer for type `T` is determined as follows.  If type `T` implements the <xref:System.IComparable%601> generic interface, then the default comparer is the <xref:System.IComparable%601.CompareTo%28%600%29> method of that interface; otherwise, if type `T` implements the nongeneric <xref:System.IComparable> interface, then the default comparer is the <xref:System.IComparable.CompareTo%28System.Object%29> method of that interface. If type `T` implements neither interface, then there is no default comparer, and a comparer or comparison delegate must be provided explicitly.  \n  \n The <xref:System.Collections.Generic.List%601> is not guaranteed to be sorted.  You must sort the <xref:System.Collections.Generic.List%601> before performing operations (such as <xref:System.Collections.Generic.List%601.BinarySearch%2A>) that require the <xref:System.Collections.Generic.List%601> to be sorted.  \n  \n Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.  \n  \n For very large <xref:System.Collections.Generic.List%601> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.  \n  \n <xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.  \n  \n For an immutable version of the <xref:System.Collections.Generic.List%601> class, see <xref:System.Collections.Immutable.ImmutableList%601>.  \n  \n## Performance Considerations  \n In deciding whether to use the <xref:System.Collections.Generic.List%601> or <xref:System.Collections.ArrayList> class, both of which have similar functionality, remember that the <xref:System.Collections.Generic.List%601> class performs better in most cases and is type safe. If a reference type is used for type `T` of the <xref:System.Collections.Generic.List%601> class, the behavior of the two classes is identical. However, if a value type is used for type `T`, you need to consider implementation and boxing issues.  \n  \n If a value type is used for type `T`, the compiler generates an implementation of the <xref:System.Collections.Generic.List%601> class specifically for that value type. That means a list element of a <xref:System.Collections.Generic.List%601> object does not have to be boxed before the element can be used, and after about 500 list elements are created the memory saved not boxing list elements is greater than the memory used to generate the class implementation.  \n  \n Make certain the value type used for type `T` implements the <xref:System.IEquatable%601> generic interface. If not, methods such as <xref:System.Collections.Generic.List%601.Contains%2A> must call the <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName> method, which boxes the affected list element. If the value type implements the <xref:System.IComparable> interface and you own the source code, also implement the <xref:System.IComparable%601> generic interface to prevent the <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> methods from boxing list elements. If you do not own the source code, pass an <xref:System.Collections.Generic.IComparer%601> object to the <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> methods  \n  \n It is to your advantage to use the type-specific implementation of the <xref:System.Collections.Generic.List%601> class instead of using the <xref:System.Collections.ArrayList> class or writing a strongly typed wrapper collection yourself. The reason is your implementation must do what the .NET Framework does for you already, and the common language runtime can share Microsoft intermediate language code and metadata, which your implementation cannot.  \n  \n## F# Considerations  \n The <xref:System.Collections.Generic.List%601> class is used infrequently in F# code.  Instead, [Lists](http://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d), which are immutable, singly-linked lists, are typically preferred. An F# List provides an ordered, immutable series of values, and is supported for use in functional-style development. When used from F#, the<xref:System.Collections.Generic.List%601> class is typically referred to by the  [ResizeArray\\<'T>](https://msdn.microsoft.com/library/ee353447.aspx) type abbreviation to avoid naming conflicts with F# Lists"
  example:
  - "The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.  \n  \n [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]\n [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]\n [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  \n  \n The following example demonstrates several properties and methods of the <xref:System.Collections.Generic.List%601> generic class of type string. (For an example of a <xref:System.Collections.Generic.List%601> of complex types, see the <xref:System.Collections.Generic.List%601.Contains%2A> method.)  \n  \n The default constructor is used to create a list of strings with the default capacity. The <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed and then the <xref:System.Collections.Generic.List%601.Add%2A> method is used to add several items. The items are listed, and the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again, along with the <xref:System.Collections.Generic.List%601.Count%2A> property, to show that the capacity has been increased as needed.  \n  \n The <xref:System.Collections.Generic.List%601.Contains%2A> method is used to test for the presence of an item in the list, the <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert a new item in the middle of the list, and the contents of the list are displayed again.  \n  \n The default <xref:System.Collections.Generic.List%601.Item%2A> property (the indexer in C#) is used to retrieve an item, the <xref:System.Collections.Generic.List%601.Remove%2A> method is used to remove the first instance of the duplicate item added earlier, and the contents are displayed again. The <xref:System.Collections.Generic.List%601.Remove%2A> method always removes the first instance it encounters.  \n  \n The <xref:System.Collections.Generic.List%601.TrimExcess%2A> method is used to reduce the capacity to match the count, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed. If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized.  \n  \n Finally, the <xref:System.Collections.Generic.List%601.Clear%2A> method is used to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed.  \n  \n [!code-cpp[List\\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]\n [!code-fsharp[List\\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]\n [!code-vb[List\\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]"
  syntax:
    content: 'public class List<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IReadOnlyList<T>, System.Collections.IList'
    typeParameters:
    - id: T
      description: The type of elements in the list.
  inheritance:
  - System.Object
  derivedClasses:
  - System.Data.Services.ExpandSegmentCollection
  - System.Workflow.Activities.OperationParameterInfoCollection
  - System.Workflow.Activities.WorkflowRoleCollection
  - System.Workflow.ComponentModel.ActivityCollection
  - System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection
  - System.Workflow.Runtime.Tracking.ActivityTrackingLocationCollection
  - System.Workflow.Runtime.Tracking.ActivityTrackPointCollection
  - System.Workflow.Runtime.Tracking.ExtractCollection
  - System.Workflow.Runtime.Tracking.TrackingAnnotationCollection
  - System.Workflow.Runtime.Tracking.TrackingConditionCollection
  - System.Workflow.Runtime.Tracking.UserTrackingLocationCollection
  - System.Workflow.Runtime.Tracking.UserTrackPointCollection
  - System.Workflow.Runtime.Tracking.WorkflowTrackPointCollection
  implements:
  - System.Collections.Generic.ICollection{T}
  - System.Collections.Generic.IEnumerable{T}
  - System.Collections.Generic.IList{T}
  - System.Collections.Generic.IReadOnlyCollection{T}
  - System.Collections.Generic.IReadOnlyList{T}
  - System.Collections.IList
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})
  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})
  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})
  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})
  - System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})
  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})
  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})
  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})
  - System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})
  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})
  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)
  - System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  - System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
  - System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
  - System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  - System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  - System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  - System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  - System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  - System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  - System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  - System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  - System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})
  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})
  - System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})
  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})
  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})
  - System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
  - System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})
  - System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.#ctor
  commentId: M:System.Collections.Generic.List`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: List<T>()
  nameWithType: List<T>.List<T>()
  fullName: List<T>.List<T>()
  type: Constructor
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="System.Collections.Generic.List`1"></xref> class that is empty and has the default initial capacity.
  remarks: "The capacity of a <xref:System.Collections.Generic.List%601> is the number of elements that the <xref:System.Collections.Generic.List%601> can hold. As elements are added to a <xref:System.Collections.Generic.List%601>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, using the <xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> constructor and specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.List%601>.  \n  \n The capacity can be decreased by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.  \n  \n This constructor is an O(1) operation."
  example:
  - "The following example demonstrates the default constructor of the <xref:System.Collections.Generic.List%601> generic class. The default constructor creates a list with the default capacity, as demonstrated by displaying the <xref:System.Collections.Generic.List%601.Capacity%2A> property.  \n  \n The example adds, inserts, and removes items, showing how the capacity changes as these methods are used.  \n  \n [!code-cpp[List\\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]\n [!code-fsharp[List\\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]\n [!code-vb[List\\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]"
  syntax:
    content: public List ();
    parameters: []
  overload: System.Collections.Generic.List`1.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: List<T>(IEnumerable<T>)
  nameWithType: List<T>.List<T>(IEnumerable<T>)
  fullName: List<T>.List<T>(IEnumerable<T>)
  type: Constructor
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="System.Collections.Generic.List`1"></xref> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.
  remarks: "The elements are copied onto the <xref:System.Collections.Generic.List%601> in the same order they are read by the enumerator of the collection.  \n  \n This constructor is an O(*n*) operation, where *n* is the number of elements in `collection`."
  example:
  - "The following example demonstrates the <xref:System.Collections.Generic.List%601.%23ctor%2A> constructor and various methods of the <xref:System.Collections.Generic.List%601> class that act on ranges. An array of strings is created and passed to the constructor, populating the list with the elements of the array. The <xref:System.Collections.Generic.List%601.Capacity%2A> property is then displayed, to show that the initial capacity is exactly what is required to hold the input elements.  \n  \n [!code-cpp[List\\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]\n [!code-vb[List\\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]"
  syntax:
    content: public List (System.Collections.Generic.IEnumerable<T> collection);
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable`1
      description: The collection whose elements are copied to the new list.
  overload: System.Collections.Generic.List`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>collection</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.#ctor(System.Int32)
  commentId: M:System.Collections.Generic.List`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: List<T>(Int32)
  nameWithType: List<T>.List<T>(Int32)
  fullName: List<T>.List<T>(Int32)
  type: Constructor
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="System.Collections.Generic.List`1"></xref> class that is empty and has the specified initial capacity.
  remarks: "The capacity of a <xref:System.Collections.Generic.List%601> is the number of elements that the <xref:System.Collections.Generic.List%601> can hold. As elements are added to a <xref:System.Collections.Generic.List%601>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.List%601>.  \n  \n The capacity can be decreased by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.  \n  \n This constructor is an O(*n*) operation, where *n* is `capacity`."
  example:
  - "The following example demonstrates the <xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> constructor. A <xref:System.Collections.Generic.List%601> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4. The list is populated with four strings, and a read-only copy is created by using the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method.  \n  \n [!code-cpp[List\\`1_AsReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_AsReadOnly/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_AsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_AsReadOnly/cs/source.cs#1)]\n [!code-vb[List\\`1_AsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_AsReadOnly/vb/source.vb#1)]"
  syntax:
    content: public List (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: The number of elements that the new list can initially store.
  overload: System.Collections.Generic.List`1.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>capacity</code> is less than 0.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.Add(`0)
  commentId: M:System.Collections.Generic.List`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Add(T)
  nameWithType: List<T>.Add(T)
  fullName: List<T>.Add(T)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Adds an object to the end of the <xref href="System.Collections.Generic.List`1"></xref>.
  remarks: "<xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.  \n  \n If <xref:System.Collections.Generic.List%601.Count%2A> already equals <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  \n  \n If <xref:System.Collections.Generic.List%601.Count%2A> is less than <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.  \n  \n [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]\n [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]\n [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  \n  \n The following example demonstrates several properties and methods of the <xref:System.Collections.Generic.List%601> generic class, including the <xref:System.Collections.Generic.List%601.Add%2A> method. The default constructor is used to create a list of strings with a capacity of 0. The <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed, and then the <xref:System.Collections.Generic.List%601.Add%2A> method is used to add several items. The items are listed, and the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again, along with the <xref:System.Collections.Generic.List%601.Count%2A> property, to show that the capacity has been increased as needed.  \n  \n Other properties and methods are used to search for, insert, and remove elements from the list, and finally to clear the list.  \n  \n [!code-cpp[List\\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]\n [!code-fsharp[List\\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]\n [!code-vb[List\\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]"
  syntax:
    content: public void Add (T item);
    parameters:
    - id: item
      type: T
      description: The object to be added to the end of the <xref href="System.Collections.Generic.List`1"></xref>. The value can be `null` for reference types.
  overload: System.Collections.Generic.List`1.Add*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  id: AddRange(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: AddRange(IEnumerable<T>)
  nameWithType: List<T>.AddRange(IEnumerable<T>)
  fullName: List<T>.AddRange(IEnumerable<T>)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Adds the elements of the specified collection to the end of the <xref href="System.Collections.Generic.List`1"></xref>.
  remarks: "The order of the elements in the collection is preserved in the <xref:System.Collections.Generic.List%601>.  \n  \n If the new <xref:System.Collections.Generic.List%601.Count%2A> (the current <xref:System.Collections.Generic.List%601.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.  \n  \n If the <xref:System.Collections.Generic.List%601> can accommodate the new elements without increasing the <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(*n*) operation, where *n* is the number of elements to be added. If the capacity needs to be increased to accommodate the new elements, this method becomes an O(*n* + *m*) operation, where *n* is the number of elements to be added and *m* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example demonstrates the <xref:System.Collections.Generic.List%601.AddRange%2A> method and various other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges. An array of strings is created and passed to the constructor, populating the list with the elements of the array. The <xref:System.Collections.Generic.List%601.AddRange%2A> method is called, with the list as its argument. The result is that the current elements of the list are added to the end of the list, duplicating all the elements.  \n  \n [!code-cpp[List\\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]\n [!code-vb[List\\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]"
  syntax:
    content: public void AddRange (System.Collections.Generic.IEnumerable<T> collection);
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable`1
      description: The collection whose elements should be added to the end of the <xref href="System.Collections.Generic.List`1"></xref>. The collection itself cannot be `null`, but it can contain elements that are `null`, if type <code>T</code> is a reference type.
  overload: System.Collections.Generic.List`1.AddRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>collection</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.AsReadOnly
  commentId: M:System.Collections.Generic.List`1.AsReadOnly
  id: AsReadOnly
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: AsReadOnly()
  nameWithType: List<T>.AsReadOnly()
  fullName: List<T>.AsReadOnly()
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Returns a read-only <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1"></xref> wrapper for the current collection.
  remarks: "To prevent any modifications to the <xref:System.Collections.Generic.List%601> object, expose it only through this wrapper. A  <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> object does not expose methods that modify the collection. However, if changes are made to the underlying <xref:System.Collections.Generic.List%601> object, the read-only collection reflects those changes.  \n  \n This method is an O(1) operation."
  example:
  - "The following example demonstrates the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method. A <xref:System.Collections.Generic.List%601> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4. The list is populated with four strings, and the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method is used to get a read-only <xref:System.Collections.Generic.IList%601> generic interface implementation that wraps the original list.  \n  \n An element of the original list is set to \"Coelophysis\" using the <xref:System.Collections.Generic.List%601.Item%2A> property (the indexer in C#), and the contents of the read-only list are displayed again to demonstrate that it is just a wrapper for the original list.  \n  \n [!code-cpp[List\\`1_AsReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_AsReadOnly/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_AsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_AsReadOnly/cs/source.cs#1)]\n [!code-vb[List\\`1_AsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_AsReadOnly/vb/source.vb#1)]"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<T> AsReadOnly ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection`1
      description: An object that acts as a read-only wrapper around the current <xref href="System.Collections.Generic.List`1"></xref>.
  overload: System.Collections.Generic.List`1.AsReadOnly*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.BinarySearch(`0)
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0)
  id: BinarySearch(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: BinarySearch(T)
  nameWithType: List<T>.BinarySearch(T)
  fullName: List<T>.BinarySearch(T)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Searches the entire sorted <xref href="System.Collections.Generic.List`1"></xref> for an element using the default comparer and returns the zero-based index of the element.
  remarks: "This method uses the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> for type `T` to determine the order of list elements. The <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> property checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws an <xref:System.InvalidOperationException>.  \n  \n The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.  \n  \n Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface. When sorting, `null` is considered to be less than any other object.  \n  \n If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  \n  \n If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.  \n  \n This method is an O(log *n*) operation, where *n* is the number of elements in the range."
  example:
  - "The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload. A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order. The list is displayed, sorted, and displayed again.  \n  \n The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload is then used to search for two strings that are not in the list, and the <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert them. The return value of the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method is negative in each case, because the strings are not in the list. Taking the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order. The second search string is larger than any element in the list, so the insertion position is at the end of the list.  \n  \n [!code-cpp[List\\`1_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearch/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearch/cs/source.cs#1)]\n [!code-vb[List\\`1_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearch/vb/source.vb#1)]"
  syntax:
    content: public int BinarySearch (T item);
    parameters:
    - id: item
      type: T
      description: The object to locate. The value can be `null` for reference types.
    return:
      type: System.Int32
      description: The zero-based index of <code>item</code> in the sorted <xref href="System.Collections.Generic.List`1"></xref>, if <code>item</code> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code>item</code> or, if there is no larger element, the bitwise complement of <xref href="System.Collections.Generic.List`1.Count"></xref>.
  overload: System.Collections.Generic.List`1.BinarySearch*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The default comparer <xref href="System.Collections.Generic.Comparer`1.Default"></xref> cannot find an implementation of the <xref href="System.IComparable`1"></xref> generic interface or the <xref href="System.IComparable"></xref> interface for type <code>T</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  id: BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: BinarySearch(T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(T, IComparer<T>)
  fullName: List<T>.BinarySearch(T, IComparer<T>)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Searches the entire sorted <xref href="System.Collections.Generic.List`1"></xref> for an element using the specified comparer and returns the zero-based index of the element.
  remarks: "The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.  \n  \n If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> implementation.  \n  \n If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws <xref:System.InvalidOperationException>.  \n  \n The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.  \n  \n Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface. When sorting, `null` is considered to be less than any other object.  \n  \n If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  \n  \n If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.  \n  \n This method is an O(log *n*) operation, where *n* is the number of elements in the range."
  example:
  - "The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.  \n  \n The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface. The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.  \n  \n A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order. The list is displayed, sorted using the alternate comparer, and displayed again.  \n  \n The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search for several strings that are not in the list, employing the alternate comparer. The <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert the strings. These two methods are located in the function named `SearchAndInsert`, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> and use it as an index for inserting the new string.  \n  \n [!code-cpp[List\\`1_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparer/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparer/cs/source.cs#1)]\n [!code-vb[List\\`1_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparer/vb/source.vb#1)]"
  syntax:
    content: public int BinarySearch (T item, System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: item
      type: T
      description: The object to locate. The value can be `null` for reference types.
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: "The <xref href=\"System.Collections.Generic.IComparer`1\"></xref> implementation to use when comparing elements.  \n  \n -or-  \n  \n `null` to use the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\"></xref>."
    return:
      type: System.Int32
      description: The zero-based index of <code>item</code> in the sorted <xref href="System.Collections.Generic.List`1"></xref>, if <code>item</code> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code>item</code> or, if there is no larger element, the bitwise complement of <xref href="System.Collections.Generic.List`1.Count"></xref>.
  overload: System.Collections.Generic.List`1.BinarySearch*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>comparer</code> is `null`, and the default comparer <xref href="System.Collections.Generic.Comparer`1.Default"></xref> cannot find an implementation of the <xref href="System.IComparable`1"></xref> generic interface or the <xref href="System.IComparable"></xref> interface for type <code>T</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  id: BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: BinarySearch(Int32, Int32, T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(Int32, Int32, T, IComparer<T>)
  fullName: List<T>.BinarySearch(Int32, Int32, T, IComparer<T>)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Searches a range of elements in the sorted <xref href="System.Collections.Generic.List`1"></xref> for an element using the specified comparer and returns the zero-based index of the element.
  remarks: "The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.  \n  \n If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> implementation.  \n  \n If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws <xref:System.InvalidOperationException>.  \n  \n The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.  \n  \n Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface. When sorting, `null` is considered to be less than any other object.  \n  \n If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.  \n  \n If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.  \n  \n This method is an O(log *n*) operation, where *n* is the number of elements in the range."
  example:
  - "The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.  \n  \n The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface. The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.  \n  \n A <xref:System.Collections.Generic.List%601> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs. Within each of the two groups, the names are not in any particular sort order. The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.  \n  \n The <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search only the range of herbivores for \"Brachiosaurus\". The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method is used as an index for inserting the new string.  \n  \n [!code-cpp[List\\`1_SortSearchComparerRange#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_SortSearchComparerRange#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cs/source.cs#1)]\n [!code-vb[List\\`1_SortSearchComparerRange#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparerRange/vb/source.vb#1)]"
  syntax:
    content: public int BinarySearch (int index, int count, T item, System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based starting index of the range to search.
    - id: count
      type: System.Int32
      description: The length of the range to search.
    - id: item
      type: T
      description: The object to locate. The value can be `null` for reference types.
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: The <xref href="System.Collections.Generic.IComparer`1"></xref> implementation to use when comparing elements, or `null` to use the default comparer <xref href="System.Collections.Generic.Comparer`1.Default"></xref>.
    return:
      type: System.Int32
      description: The zero-based index of <code>item</code> in the sorted <xref href="System.Collections.Generic.List`1"></xref>, if <code>item</code> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code>item</code> or, if there is no larger element, the bitwise complement of <xref href="System.Collections.Generic.List`1.Count"></xref>.
  overload: System.Collections.Generic.List`1.BinarySearch*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than 0.  \n  \n -or-  \n  \n <code>count</code> is less than 0."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>index</code> and <code>count</code> do not denote a valid range in the <xref href="System.Collections.Generic.List`1"></xref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>comparer</code> is `null`, and the default comparer <xref href="System.Collections.Generic.Comparer`1.Default"></xref> cannot find an implementation of the <xref href="System.IComparable`1"></xref> generic interface or the <xref href="System.IComparable"></xref> interface for type <code>T</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.Capacity
  commentId: P:System.Collections.Generic.List`1.Capacity
  id: Capacity
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Capacity
  nameWithType: List<T>.Capacity
  fullName: List<T>.Capacity
  type: Property
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Gets or sets the total number of elements the internal data structure can hold without resizing.
  remarks: "<xref:System.Collections.Generic.List%601.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.List%601> can store before resizing is required, whereas <xref:System.Collections.Generic.List%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.List%601>.  \n  \n <xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>. If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.  \n  \n If the capacity is significantly larger than the count and you want to reduce the memory used by the <xref:System.Collections.Generic.List%601>,  you can  decrease capacity by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly to a lower value. When the value of <xref:System.Collections.Generic.List%601.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity, and all the elements are copied.  \n  \n Retrieving the value of this property is an O(1) operation; setting the property is an O(*n*) operation, where *n* is the new capacity."
  example:
  - "The following example demonstrates how to check the capacity and count of a <xref:System.Collections.Generic.List%601> that contains a simple business object, and illustrates using the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method to remove extra capacity.  \n  \n [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]\n [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  \n  \n The following example shows the <xref:System.Collections.Generic.List%601.Capacity%2A> property at several points in the life of a list. The default constructor is used to create a list of strings with a capacity of 0, and the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed to demonstrate this. After the <xref:System.Collections.Generic.List%601.Add%2A> method has been used to add several items, the items are listed, and then the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again, along with the <xref:System.Collections.Generic.List%601.Count%2A> property, to show that the capacity has been increased as needed.  \n  \n The <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again after the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method is used to reduce the capacity to match the count. Finally, the <xref:System.Collections.Generic.List%601.Clear%2A> method is used to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed again.  \n  \n [!code-cpp[List\\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]\n [!code-fsharp[List\\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]\n [!code-vb[List\\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]"
  syntax:
    content: public int Capacity { get; set; }
    return:
      type: System.Int32
      description: The number of elements that the <xref href="System.Collections.Generic.List`1"></xref> can contain before resizing is required.
  overload: System.Collections.Generic.List`1.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <xref href="System.Collections.Generic.List`1.Capacity"></xref> is set to a value that is less than <xref href="System.Collections.Generic.List`1.Count"></xref>.
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is not enough memory available on the system.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.Clear
  commentId: M:System.Collections.Generic.List`1.Clear
  id: Clear
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Clear()
  nameWithType: List<T>.Clear()
  fullName: List<T>.Clear()
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Removes all elements from the <xref href="System.Collections.Generic.List`1"></xref>.
  remarks: "<xref:System.Collections.Generic.List%601.Count%2A> is set to 0, and references to other objects from elements of the collection are also released.  \n  \n <xref:System.Collections.Generic.List%601.Capacity%2A> remains unchanged. To reset the capacity of the <xref:System.Collections.Generic.List%601>, call the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or set the <xref:System.Collections.Generic.List%601.Capacity%2A> property directly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>. Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example demonstrates the <xref:System.Collections.Generic.List%601.Clear%2A> method and various other properties and methods of the <xref:System.Collections.Generic.List%601> generic class. The <xref:System.Collections.Generic.List%601.Clear%2A> method is used at the end of the program, to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are then displayed.  \n  \n [!code-cpp[List\\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]\n [!code-fsharp[List\\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]\n [!code-vb[List\\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.Generic.List`1.Clear*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.Contains(`0)
  commentId: M:System.Collections.Generic.List`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Contains(T)
  nameWithType: List<T>.Contains(T)
  fullName: List<T>.Contains(T)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Determines whether an element is in the <xref href="System.Collections.Generic.List`1"></xref>.
  remarks: "This method determines equality by using the default equality comparer, as defined by the object's implementation of the <xref:System.IEquatable%601.Equals%2A?displayProperty=fullName> method for `T` (the type of values in the list).  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example demonstrates the <xref:System.Collections.Generic.List%601.Contains%2A> and <xref:System.Collections.Generic.List%601.Exists%2A> methods on a <xref:System.Collections.Generic.List%601> that contains a simple business object that implements <xref:System.IEquatable%601.Equals%2A>.  \n  \n [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]\n [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  \n  \n The following example contains a list of complex objects of type `Cube`. The `Cube` class implements the <xref:System.IEquatable%601.Equals%2A?displayProperty=fullName> method so that two cubes are considered equal if their dimensions are the same. In this example, the <xref:System.Collections.Generic.List%601.Contains%2A> method returns `true`, because a cube that has the specified dimensions is already in the collection.  \n  \n [!code-csharp[System.Collections.Generic.List.Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.contains/cs/program.cs#1)]\n [!code-vb[System.Collections.Generic.List.Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.contains/vb/program.vb#1)]"
  syntax:
    content: public bool Contains (T item);
    parameters:
    - id: item
      type: T
      description: The object to locate in the <xref href="System.Collections.Generic.List`1"></xref>. The value can be `null` for reference types.
    return:
      type: System.Boolean
      description: '`true` if <code>item</code> is found in the <xref href="System.Collections.Generic.List`1"></xref>; otherwise, `false`.'
  overload: System.Collections.Generic.List`1.Contains*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  commentId: M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  id: ConvertAll``1(System.Converter{`0,``0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: ConvertAll<TOutput>(Converter<T,TOutput>)
  nameWithType: List<T>.ConvertAll<TOutput>(Converter<T,TOutput>)
  fullName: List<T>.ConvertAll<TOutput>(Converter<T,TOutput>)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Collections
  namespace: System.Collections.Generic
  summary: Converts the elements in the current <xref href="System.Collections.Generic.List`1"></xref> to another type, and returns a list containing the converted elements.
  remarks: "The <xref:System.Converter%602> is a delegate to a method that converts an object to the target type.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Converter%602> delegate, and the converted elements are saved in the new <xref:System.Collections.Generic.List%601>.  \n  \n The current <xref:System.Collections.Generic.List%601> remains unchanged.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example defines a method named `PointFToPoint` that converts a <xref:System.Drawing.PointF> structure to a <xref:System.Drawing.Point> structure. The example then creates a <xref:System.Collections.Generic.List%601> of <xref:System.Drawing.PointF> structures, creates a `Converter\\<PointF, Point>` delegate (`Converter(Of PointF, Point)` in Visual Basic) to represent the `PointFToPoint` method, and passes the delegate to the <xref:System.Collections.Generic.List%601.ConvertAll%2A> method. The <xref:System.Collections.Generic.List%601.ConvertAll%2A> method passes each element of the input list to the `PointFToPoint` method and puts the converted elements into a new list of <xref:System.Drawing.Point> structures. Both lists are displayed.  \n  \n [!code-cpp[List\\`1_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_ConvertAll/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_ConvertAll/cs/source.cs#1)]\n [!code-vb[List\\`1_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_ConvertAll/vb/source.vb#1)]"
  syntax:
    content: public System.Collections.Generic.List<TOutput> ConvertAll<TOutput> (Converter<T,TOutput> converter);
    parameters:
    - id: converter
      type: System.Converter{T,TOutput}
      description: A <xref href="System.Converter`2"></xref> delegate that converts each element from one type to another type.
    typeParameters:
    - id: TOutput
      description: The type of the elements of the target array.
    return:
      type: System.Collections.Generic.List{TOutput}
      description: A <xref href="System.Collections.Generic.List`1"></xref> of the target type containing the converted elements from the current <xref href="System.Collections.Generic.List`1"></xref>.
  overload: System.Collections.Generic.List`1.ConvertAll``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>converter</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: CopyTo(T[], Int32)
  nameWithType: List<T>.CopyTo(T[], Int32)
  fullName: List<T>.CopyTo(T[], Int32)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Copies the entire <xref href="System.Collections.Generic.List`1"></xref> to a compatible one-dimensional array, starting at the specified index of the target array.
  remarks: "This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \n  \n The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.CopyTo%2A> method. A <xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings. An empty string array of 15 elements is created, and the <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array. The <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty). Finally, the <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty). The contents of the array are then displayed.  \n  \n [!code-cpp[List\\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]\n [!code-vb[List\\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]"
  syntax:
    content: public void CopyTo (T[] array, int arrayIndex);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional <xref href="System.Array"></xref> that is the destination of the elements copied from <xref href="System.Collections.Generic.List`1"></xref>. The <xref href="System.Array"></xref> must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.Generic.List`1.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>arrayIndex</code> is less than 0.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of elements in the source <xref href="System.Collections.Generic.List`1"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  id: CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: CopyTo(Int32, T[], Int32, Int32)
  nameWithType: List<T>.CopyTo(Int32, T[], Int32, Int32)
  fullName: List<T>.CopyTo(Int32, T[], Int32, Int32)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Copies a range of elements from the <xref href="System.Collections.Generic.List`1"></xref> to a compatible one-dimensional array, starting at the specified index of the target array.
  remarks: "This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \n  \n The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.  \n  \n This method is an O(*n*) operation, where *n* is `count`."
  example:
  - "The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.CopyTo%2A> method. A <xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings. An empty string array of 15 elements is created, and the <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array. The <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty). Finally, the <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty). The contents of the array are then displayed.  \n  \n [!code-cpp[List\\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]\n [!code-vb[List\\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]"
  syntax:
    content: public void CopyTo (int index, T[] array, int arrayIndex, int count);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index in the source <xref href="System.Collections.Generic.List`1"></xref> at which copying begins.
    - id: array
      type: T[]
      description: The one-dimensional <xref href="System.Array"></xref> that is the destination of the elements copied from <xref href="System.Collections.Generic.List`1"></xref>. The <xref href="System.Array"></xref> must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
    - id: count
      type: System.Int32
      description: The number of elements to copy.
  overload: System.Collections.Generic.List`1.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than 0.  \n  \n -or-  \n  \n <code>arrayIndex</code> is less than 0.  \n  \n -or-  \n  \n <code>count</code> is less than 0."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code> is equal to or greater than the <xref href=\"System.Collections.Generic.List`1.Count\"></xref> of the source <xref href=\"System.Collections.Generic.List`1\"></xref>.  \n  \n -or-  \n  \n The number of elements from <code>index</code> to the end of the source <xref href=\"System.Collections.Generic.List`1\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.CopyTo(`0[])
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[])
  id: CopyTo(`0[])
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: CopyTo(T[])
  nameWithType: List<T>.CopyTo(T[])
  fullName: List<T>.CopyTo(T[])
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Copies the entire <xref href="System.Collections.Generic.List`1"></xref> to a compatible one-dimensional array, starting at the beginning of the target array.
  remarks: "This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \n  \n The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.CopyTo%2A> method. A <xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings. An empty string array of 15 elements is created, and the <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array. The <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty). Finally, the <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty). The contents of the array are then displayed.  \n  \n [!code-cpp[List\\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]\n [!code-vb[List\\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]"
  syntax:
    content: public void CopyTo (T[] array);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional <xref href="System.Array"></xref> that is the destination of the elements copied from <xref href="System.Collections.Generic.List`1"></xref>. The <xref href="System.Array"></xref> must have zero-based indexing.
  overload: System.Collections.Generic.List`1.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of elements in the source <xref href="System.Collections.Generic.List`1"></xref> is greater than the number of elements that the destination <code>array</code> can contain.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.Count
  commentId: P:System.Collections.Generic.List`1.Count
  id: Count
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Count
  nameWithType: List<T>.Count
  fullName: List<T>.Count
  type: Property
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Gets the number of elements contained in the <xref href="System.Collections.Generic.List`1"></xref>.
  remarks: "<xref:System.Collections.Generic.List%601.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.List%601> can store before resizing is required. <xref:System.Collections.Generic.List%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.List%601>.  \n  \n <xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>. If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.  \n  \n Retrieving the value of this property is an O(1) operation."
  example:
  - "The following example demonstrates how to check the capacity and count of a  <xref:System.Collections.Generic.List%601> that contains a simple business object, and illustrates using the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method to remove extra capacity.  \n  \n [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]\n [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  \n  \n The following example shows the value of the <xref:System.Collections.Generic.List%601.Count%2A> property at various points in the life of a list. After the list has been created and populated and its elements displayed, the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed. These properties are displayed again after the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method has been called, and again after the contents of the list are cleared.  \n  \n [!code-cpp[List\\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]\n [!code-fsharp[List\\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]\n [!code-vb[List\\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: The number of elements contained in the <xref href="System.Collections.Generic.List`1"></xref>.
  overload: System.Collections.Generic.List`1.Count*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  id: Exists(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Exists(Predicate<T>)
  nameWithType: List<T>.Exists(Predicate<T>)
  fullName: List<T>.Exists(Predicate<T>)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Determines whether the <xref href="System.Collections.Generic.List`1"></xref> contains elements that match the conditions defined by the specified predicate.
  remarks: "The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and processing is stopped when a match is found.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example demonstrates the <xref:System.Collections.Generic.List%601.Contains%2A> and <xref:System.Collections.Generic.List%601.Exists%2A>methods on a <xref:System.Collections.Generic.List%601> that contains a simple business object that implements <xref:System.IEquatable%601.Equals%2A>.  \n  \n [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]\n [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  \n  \n The following example demonstrates the <xref:System.Collections.Generic.List%601.Exists%2A> method and several other methods that use the <xref:System.Predicate%601> generic delegate.  \n  \n A <xref:System.Collections.Generic.List%601> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with \"saurus\". The example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in \"saurus\".  \n  \n The <xref:System.Collections.Generic.List%601.Find%2A>, <xref:System.Collections.Generic.List%601.FindLast%2A>, and <xref:System.Collections.Generic.List%601.FindAll%2A> methods are used to search the list with the search predicate method, and then the <xref:System.Collections.Generic.List%601.RemoveAll%2A> method is used to remove all entries ending with \"saurus\".  \n  \n Finally, the <xref:System.Collections.Generic.List%601.Exists%2A> method is called. It traverses the list from the beginning, passing each element in turn to the `EndsWithSaurus` method. The search stops and the method returns `true` if the `EndsWithSaurus` method returns `true` for any element. The <xref:System.Collections.Generic.List%601.Exists%2A> method returns `false` because all such elements have been removed.  \n  \n> [!NOTE]\n>  In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.  \n  \n [!code-cpp[List\\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]\n [!code-vb[List\\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]"
  syntax:
    content: public bool Exists (Predicate<T> match);
    parameters:
    - id: match
      type: System.Predicate`1
      description: The <xref href="System.Predicate`1"></xref> delegate that defines the conditions of the elements to search for.
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Collections.Generic.List`1"></xref> contains one or more elements that match the conditions defined by the specified predicate; otherwise, `false`.'
  overload: System.Collections.Generic.List`1.Exists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>match</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  id: Find(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Find(Predicate<T>)
  nameWithType: List<T>.Find(Predicate<T>)
  fullName: List<T>.Find(Predicate<T>)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <xref href="System.Collections.Generic.List`1"></xref>.
  remarks: "The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, moving forward in the <xref:System.Collections.Generic.List%601>, starting with the first element and ending with the last element.  Processing is stopped when a match is found.  \n  \n> [!IMPORTANT]\n>  When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate. Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type. If the default value satisfies the search predicate, use the <xref:System.Collections.Generic.List%601.FindIndex%2A> method instead.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example demonstrates the <xref:System.Collections.Generic.List%601.Find%2A> method on a <xref:System.Collections.Generic.List%601> that contains a simple complex object.  \n  \n [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]\n [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  \n  \n The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class. The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f). The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.  \n  \n The following table describes the examples provided for the find methods.  \n  \n|Method|Example|  \n|------------|-------------|  \n|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|Finds a book by an ID using the `IDToFind` predicate delegate.<br /><br /> C# example uses an anonymous delegate.|  \n|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|Find all books that whose `Genre` property is \"Computer\" using the `FindComputer` predicate delegate.|  \n|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.<br /><br /> C# example uses an anonymous delegate.|  \n|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|Finds the index of first computer book using the `FindComputer` predicate delegate.|  \n|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|Finds the index of the last computer book using the `FindComputer` predicate delegate.|  \n|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.|  \n|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.|  \n  \n [!code-csharp[List\\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]\n [!code-vb[List\\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]"
  syntax:
    content: public T Find (Predicate<T> match);
    parameters:
    - id: match
      type: System.Predicate`1
      description: The <xref href="System.Predicate`1"></xref> delegate that defines the conditions of the element to search for.
    return:
      type: T
      description: The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <code>T</code>.
  overload: System.Collections.Generic.List`1.Find*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>match</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  id: FindAll(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: FindAll(Predicate<T>)
  nameWithType: List<T>.FindAll(Predicate<T>)
  fullName: List<T>.FindAll(Predicate<T>)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Retrieves all the elements that match the conditions defined by the specified predicate.
  remarks: "The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and the elements that match the conditions are saved in the returned <xref:System.Collections.Generic.List%601>.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class. The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f). The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.  \n  \n The following table describes the examples provided for the find methods.  \n  \n|Method|Example|  \n|------------|-------------|  \n|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|Finds a book by an ID using the `IDToFind` predicate delegate.<br /><br /> C# example uses an anonymous delegate.|  \n|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|Find all books that whose `Genre` property is \"Computer\" using the `FindComputer` predicate delegate.|  \n|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.<br /><br /> C# example uses an anonymous delegate.|  \n|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|Finds the index of first computer book using the `FindComputer` predicate delegate.|  \n|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|Finds the index of the last computer book using the `FindComputer` predicate delegate.|  \n|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.|  \n|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.|  \n  \n [!code-csharp[List\\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]\n [!code-vb[List\\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]"
  syntax:
    content: public System.Collections.Generic.List<T> FindAll (Predicate<T> match);
    parameters:
    - id: match
      type: System.Predicate`1
      description: The <xref href="System.Predicate`1"></xref> delegate that defines the conditions of the elements to search for.
    return:
      type: System.Collections.Generic.List`1
      description: A <xref href="System.Collections.Generic.List`1"></xref> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <xref href="System.Collections.Generic.List`1"></xref>.
  overload: System.Collections.Generic.List`1.FindAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>match</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  id: FindIndex(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: FindIndex(Predicate<T>)
  nameWithType: List<T>.FindIndex(Predicate<T>)
  fullName: List<T>.FindIndex(Predicate<T>)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <xref href="System.Collections.Generic.List`1"></xref>.
  remarks: "The <xref:System.Collections.Generic.List%601> is searched forward starting at the first element and ending at the last element.  \n  \n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate. The delegate has the signature:  \n  \n```csharp  \npublic bool methodName(T obj)  \n```  \n  \n```vb  \nPublic Function methodName(obj As T) As Boolean  \n```  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example defines an `Employee` class with two fields, `Name` and `Id`. It also defines an `EmployeeSearch` class with a single method, `StartsWith`, that indicates whether the `Employee.Name` field starts with a specified substring that is supplied to the `EmployeeSearch` class constructor. Note  the signature of this method  \n  \n```csharp  \npublic bool StartsWith(Employee e)  \n```  \n  \n```vb  \nPublic Function StartsWith(e As Employee) As Boolean  \n```  \n  \n corresponds to the signature of the delegate that can be passed to the <xref:System.Collections.Generic.List%601.FindIndex%2A> method. The example instantiates a `List<Employee>` object, adds a number of `Employee` objets to it, and then calls the <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> method twice  to search the entire collection , the first time for the first `Employee` object whose `Name` field begins with \"J\", and the second time for the first `Employee` object whose `Name` field begins with \"Ju\".  \n  \n [!code-csharp[System.Collections.Generic.List.FindIndex#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex2.cs#2)]\n [!code-vb[System.Collections.Generic.List.FindIndex#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex2.vb#2)]"
  syntax:
    content: public int FindIndex (Predicate<T> match);
    parameters:
    - id: match
      type: System.Predicate`1
      description: The <xref href="System.Predicate`1"></xref> delegate that defines the conditions of the element to search for.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1.
  overload: System.Collections.Generic.List`1.FindIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>match</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  id: FindIndex(System.Int32,System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: FindIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Predicate<T>)
  fullName: List<T>.FindIndex(Int32, Predicate<T>)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <xref href="System.Collections.Generic.List`1"></xref> that extends from the specified index to the last element.
  remarks: "The <xref:System.Collections.Generic.List%601> is searched forward starting at `startIndex` and ending at the last element.  \n  \n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate. The delegate has the signature:  \n  \n```csharp  \npublic bool methodName(T obj)  \n```  \n  \n```vb  \nPublic Function methodName(obj As T) As Boolean  \n```  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from `startIndex` to the end of the <xref:System.Collections.Generic.List%601>."
  example:
  - "The following example defines an `Employee` class with two fields, `Name` and `Id`. It also defines an `EmployeeSearch` class with a single method, `StartsWith`, that indicates whether the `Employee.Name` field starts with a specified substring that is supplied to the `EmployeeSearch` class constructor. Note  the signature of this method  \n  \n```csharp  \npublic bool StartsWith(Employee e)  \n```  \n  \n```vb  \nPublic Function StartsWith(e As Employee) As Boolean  \n```  \n  \n corresponds to the signature of the delegate that can be passed to the <xref:System.Collections.Generic.List%601.FindIndex%2A> method. The example instantiates a `List<Employee>` object, adds a number of `Employee` objets to it, and then calls the <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> method twice  to search the collection starting with its fifth member (that is, the member at index 4). The first time, it searches for the first `Employee` object whose `Name` field begins with \"J\"; the second time, it searches for the first `Employee` object whose `Name` field begins with \"Ju\".  \n  \n [!code-csharp[System.Collections.Generic.List.FindIndex#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex3.cs#3)]\n [!code-vb[System.Collections.Generic.List.FindIndex#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex3.vb#3)]"
  syntax:
    content: public int FindIndex (int startIndex, Predicate<T> match);
    parameters:
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the search.
    - id: match
      type: System.Predicate`1
      description: The <xref href="System.Predicate`1"></xref> delegate that defines the conditions of the element to search for.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1.
  overload: System.Collections.Generic.List`1.FindIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>match</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>startIndex</code> is outside the range of valid indexes for the <xref href="System.Collections.Generic.List`1"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  id: FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: FindIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Int32, Predicate<T>)
  fullName: List<T>.FindIndex(Int32, Int32, Predicate<T>)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <xref href="System.Collections.Generic.List`1"></xref> that starts at the specified index and contains the specified number of elements.
  remarks: "The <xref:System.Collections.Generic.List%601> is searched forward starting at `startIndex` and ending at `startIndex` plus `count` minus 1, if `count` is greater than 0.  \n  \n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate. The delegate has the signature:  \n  \n```csharp  \npublic bool methodName(T obj)  \n```  \n  \n```vb  \nPublic Function methodName(obj As T) As Boolean  \n```  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`."
  example:
  - "The following example defines an `Employee` class with two fields, `Name` and `Id`. It also defines an `EmployeeSearch` class with a single method, `StartsWith`, that indicates whether the `Employee.Name` field starts with a specified substring that is supplied to the `EmployeeSearch` class constructor. Note  the signature of this method  \n  \n```csharp  \npublic bool StartsWith(Employee e)  \n```  \n  \n```vb  \nPublic Function StartsWith(e As Employee) As Boolean  \n```  \n  \n corresponds to the signature of the delegate that can be passed to the <xref:System.Collections.Generic.List%601.FindIndex%2A> method. The example instantiates a `List<Employee>` object, adds a number of `Employee` objets to it, and then calls the <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> method twice  to search the entire collection (that is, the members from index 0 to index <xref:System.Collections.Generic.List%601.Count%2A> - 1). The first time, it searches for the first `Employee` object whose `Name` field begins with \"J\"; the second time, it searches for the first `Employee` object whose `Name` field begins with \"Ju\".  \n  \n [!code-csharp[System.Collections.Generic.List.FindIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex1.cs#1)]\n [!code-vb[System.Collections.Generic.List.FindIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex1.vb#1)]"
  syntax:
    content: public int FindIndex (int startIndex, int count, Predicate<T> match);
    parameters:
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    - id: match
      type: System.Predicate`1
      description: The <xref href="System.Predicate`1"></xref> delegate that defines the conditions of the element to search for.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1.
  overload: System.Collections.Generic.List`1.FindIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>match</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>.  \n  \n -or-  \n  \n <code>count</code> is less than 0.  \n  \n -or-  \n  \n <code>startIndex</code> and <code>count</code> do not specify a valid section in the <xref href=\"System.Collections.Generic.List`1\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  id: FindLast(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: FindLast(Predicate<T>)
  nameWithType: List<T>.FindLast(Predicate<T>)
  fullName: List<T>.FindLast(Predicate<T>)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <xref href="System.Collections.Generic.List`1"></xref>.
  remarks: "The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, moving backward in the <xref:System.Collections.Generic.List%601>, starting with the last element and ending with the first element.  Processing is stopped when a match is found.  \n  \n> [!IMPORTANT]\n>  When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate. Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type. If the default value satisfies the search predicate, use the <xref:System.Collections.Generic.List%601.FindLastIndex%2A> method instead.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class. The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f). The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.  \n  \n The following table describes the examples provided for the find methods.  \n  \n|Method|Example|  \n|------------|-------------|  \n|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|Finds a book by an ID using the `IDToFind` predicate delegate.<br /><br /> C# example uses an anonymous delegate.|  \n|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|Find all books that whose `Genre` property is \"Computer\" using the `FindComputer` predicate delegate.|  \n|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.<br /><br /> C# example uses an anonymous delegate.|  \n|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|Finds the index of first computer book using the `FindComputer` predicate delegate.|  \n|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|Finds the index of the last computer book using the `FindComputer` predicate delegate.|  \n|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.|  \n|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.|  \n  \n [!code-csharp[List\\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]\n [!code-vb[List\\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]"
  syntax:
    content: public T FindLast (Predicate<T> match);
    parameters:
    - id: match
      type: System.Predicate`1
      description: The <xref href="System.Predicate`1"></xref> delegate that defines the conditions of the element to search for.
    return:
      type: T
      description: The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <code>T</code>.
  overload: System.Collections.Generic.List`1.FindLast*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>match</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  id: FindLastIndex(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: FindLastIndex(Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Predicate<T>)
  fullName: List<T>.FindLastIndex(Predicate<T>)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <xref href="System.Collections.Generic.List`1"></xref>.
  remarks: "The <xref:System.Collections.Generic.List%601> is searched backward starting at the last element and ending at the first element.  \n  \n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class. The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f). The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.  \n  \n The following table describes the examples provided for the find methods.  \n  \n|Method|Example|  \n|------------|-------------|  \n|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|Finds a book by an ID using the `IDToFind` predicate delegate.<br /><br /> C# example uses an anonymous delegate.|  \n|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|Find all books that whose `Genre` property is \"Computer\" using the `FindComputer` predicate delegate.|  \n|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.<br /><br /> C# example uses an anonymous delegate.|  \n|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|Finds the index of first computer book using the `FindComputer` predicate delegate.|  \n|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|Finds the index of the last computer book using the `FindComputer` predicate delegate.|  \n|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.|  \n|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.|  \n  \n [!code-csharp[List\\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]\n [!code-vb[List\\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]"
  syntax:
    content: public int FindLastIndex (Predicate<T> match);
    parameters:
    - id: match
      type: System.Predicate`1
      description: The <xref href="System.Predicate`1"></xref> delegate that defines the conditions of the element to search for.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1.
  overload: System.Collections.Generic.List`1.FindLastIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>match</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  id: FindLastIndex(System.Int32,System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: FindLastIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Predicate<T>)
  fullName: List<T>.FindLastIndex(Int32, Predicate<T>)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <xref href="System.Collections.Generic.List`1"></xref> that extends from the first element to the specified index.
  remarks: "The <xref:System.Collections.Generic.List%601> is searched backward starting at `startIndex` and ending at the first element.  \n  \n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from the beginning of the <xref:System.Collections.Generic.List%601> to `startIndex`."
  syntax:
    content: public int FindLastIndex (int startIndex, Predicate<T> match);
    parameters:
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    - id: match
      type: System.Predicate`1
      description: The <xref href="System.Predicate`1"></xref> delegate that defines the conditions of the element to search for.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1.
  overload: System.Collections.Generic.List`1.FindLastIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>match</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>startIndex</code> is outside the range of valid indexes for the <xref href="System.Collections.Generic.List`1"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  id: FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: FindLastIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Int32, Predicate<T>)
  fullName: List<T>.FindLastIndex(Int32, Int32, Predicate<T>)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <xref href="System.Collections.Generic.List`1"></xref> that contains the specified number of elements and ends at the specified index.
  remarks: "The <xref:System.Collections.Generic.List%601> is searched backward starting at `startIndex` and ending at `startIndex` minus `count` plus 1, if `count` is greater than 0.  \n  \n The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`."
  example:
  - "The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class. The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f). The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.  \n  \n The following table describes the examples provided for the find methods.  \n  \n|Method|Example|  \n|------------|-------------|  \n|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|Finds a book by an ID using the `IDToFind` predicate delegate.<br /><br /> C# example uses an anonymous delegate.|  \n|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|Find all books that whose `Genre` property is \"Computer\" using the `FindComputer` predicate delegate.|  \n|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.<br /><br /> C# example uses an anonymous delegate.|  \n|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|Finds the index of first computer book using the `FindComputer` predicate delegate.|  \n|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|Finds the index of the last computer book using the `FindComputer` predicate delegate.|  \n|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.|  \n|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.|  \n  \n [!code-csharp[List\\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]\n [!code-vb[List\\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]"
  syntax:
    content: public int FindLastIndex (int startIndex, int count, Predicate<T> match);
    parameters:
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    - id: match
      type: System.Predicate`1
      description: The <xref href="System.Predicate`1"></xref> delegate that defines the conditions of the element to search for.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of an element that matches the conditions defined by <code>match</code>, if found; otherwise, –1.
  overload: System.Collections.Generic.List`1.FindLastIndex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>match</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>.  \n  \n -or-  \n  \n <code>count</code> is less than 0.  \n  \n -or-  \n  \n <code>startIndex</code> and <code>count</code> do not specify a valid section in the <xref href=\"System.Collections.Generic.List`1\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  commentId: M:System.Collections.Generic.List`1.ForEach(System.Action{`0})
  id: ForEach(System.Action{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: ForEach(Action<T>)
  nameWithType: List<T>.ForEach(Action<T>)
  fullName: List<T>.ForEach(Action<T>)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Performs the specified action on each element of the <xref href="System.Collections.Generic.List`1"></xref>.
  remarks: "The <xref:System.Action%601> is a delegate to a method that performs an action on the object passed to it.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Action%601> delegate.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.  \n  \n Modifying the underlying collection in the body of the <xref:System.Action%601> delegate is not supported and causes undefined behavior."
  example:
  - "The following example demonstrates the use of the <xref:System.Action%601> delegate to print the contents of a <xref:System.Collections.Generic.List%601> object. In this example the `Print` method is used to display the contents of the list to the console.  \n  \n> [!NOTE]\n>  In addition to displaying the contents using the `Print` method, the C# example demonstrates the use of  to display the results to the console.  \n  \n [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]\n [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]"
  syntax:
    content: public void ForEach (Action<T> action);
    parameters:
    - id: action
      type: System.Action`1
      description: The <xref href="System.Action`1"></xref> delegate to perform on each element of the <xref href="System.Collections.Generic.List`1"></xref>.
  overload: System.Collections.Generic.List`1.ForEach*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>action</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: An element in the collection has been modified.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.GetEnumerator
  commentId: M:System.Collections.Generic.List`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: List<T>.GetEnumerator()
  fullName: List<T>.GetEnumerator()
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through the <xref href="System.Collections.Generic.List`1"></xref>.
  remarks: "The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. At this position, the <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.List%601.Enumerator.Current%2A>.  \n  \n The <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> property returns the same object until <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> is called. <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \n  \n This method is an O(1) operation."
  syntax:
    content: public System.Collections.Generic.List<T>.Enumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.List{T}
      description: A <xref href="System.Collections.Generic.List`1.Enumerator"></xref> for the <xref href="System.Collections.Generic.List`1"></xref>.
  overload: System.Collections.Generic.List`1.GetEnumerator*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  id: GetRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: GetRange(Int32, Int32)
  nameWithType: List<T>.GetRange(Int32, Int32)
  fullName: List<T>.GetRange(Int32, Int32)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Creates a shallow copy of a range of elements in the source <xref href="System.Collections.Generic.List`1"></xref>.
  remarks: "A shallow copy of a collection of reference types, or a subset of that collection, contains only the references to the elements of the collection. The objects themselves are not copied. The references in the new list point to the same objects as the references in the original list.  \n  \n A shallow copy of a collection of value types, or a subset of that collection, contains the elements of the collection. However, if the elements of the collection contain references to other objects, those objects are not copied. The references in the elements of the new collection point to the same objects as the references in the elements of the original collection.  \n  \n In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  \n  \n This method is an O(*n*) operation, where *n* is `count`."
  example:
  - "The following example demonstrates the <xref:System.Collections.Generic.List%601.GetRange%2A> method and other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges. At the end of the example, the <xref:System.Collections.Generic.List%601.GetRange%2A> method is used to get three items from the list, beginning with index location 2. The <xref:System.Collections.Generic.List%601.ToArray%2A> method is called on the resulting <xref:System.Collections.Generic.List%601>, creating an array of three elements. The elements of the array are displayed.  \n  \n [!code-cpp[List\\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]\n [!code-vb[List\\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]"
  syntax:
    content: public System.Collections.Generic.List<T> GetRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based <xref href="System.Collections.Generic.List`1"></xref> index at which the range starts.
    - id: count
      type: System.Int32
      description: The number of elements in the range.
    return:
      type: System.Collections.Generic.List`1
      description: A shallow copy of a range of elements in the source <xref href="System.Collections.Generic.List`1"></xref>.
  overload: System.Collections.Generic.List`1.GetRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than 0.  \n  \n -or-  \n  \n <code>count</code> is less than 0."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>index</code> and <code>count</code> do not denote a valid range of elements in the <xref href="System.Collections.Generic.List`1"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  id: IndexOf(`0,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: IndexOf(T, Int32)
  nameWithType: List<T>.IndexOf(T, Int32)
  fullName: List<T>.IndexOf(T, Int32)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <xref href="System.Collections.Generic.List`1"></xref> that extends from the specified index to the last element.
  remarks: "The <xref:System.Collections.Generic.List%601> is searched forward starting at `index` and ending at the last element.  \n  \n This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from `index` to the end of the <xref:System.Collections.Generic.List%601>."
  example:
  - "The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.IndexOf%2A> method. A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref:System.Collections.Generic.List%601.IndexOf%28%600%29> method overload searches the list from the beginning, and finds the first occurrence of the string. The <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string. Finally, the <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.  \n  \n [!code-cpp[List\\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]\n [!code-vb[List\\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]"
  syntax:
    content: public int IndexOf (T item, int index);
    parameters:
    - id: item
      type: T
      description: The object to locate in the <xref href="System.Collections.Generic.List`1"></xref>. The value can be `null` for reference types.
    - id: index
      type: System.Int32
      description: The zero-based starting index of the search. 0 (zero) is valid in an empty list.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of <code>item</code> within the range of elements in the <xref href="System.Collections.Generic.List`1"></xref> that extends from <code>index</code> to the last element, if found; otherwise, –1.
  overload: System.Collections.Generic.List`1.IndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is outside the range of valid indexes for the <xref href="System.Collections.Generic.List`1"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  id: IndexOf(`0,System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: IndexOf(T, Int32, Int32)
  nameWithType: List<T>.IndexOf(T, Int32, Int32)
  fullName: List<T>.IndexOf(T, Int32, Int32)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <xref href="System.Collections.Generic.List`1"></xref> that starts at the specified index and contains the specified number of elements.
  remarks: "The <xref:System.Collections.Generic.List%601> is searched forward starting at `index` and ending at `index` plus `count` minus 1, if `count` is greater than 0.  \n  \n This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`."
  example:
  - "The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.IndexOf%2A> method. A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref:System.Collections.Generic.List%601.IndexOf%28%600%29> method overload searches the list from the beginning, and finds the first occurrence of the string. The <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string. Finally, the <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.  \n  \n [!code-cpp[List\\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]\n [!code-vb[List\\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]"
  syntax:
    content: public int IndexOf (T item, int index, int count);
    parameters:
    - id: item
      type: T
      description: The object to locate in the <xref href="System.Collections.Generic.List`1"></xref>. The value can be `null` for reference types.
    - id: index
      type: System.Int32
      description: The zero-based starting index of the search. 0 (zero) is valid in an empty list.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of <code>item</code> within the range of elements in the <xref href="System.Collections.Generic.List`1"></xref> that starts at <code>index</code> and contains <code>count</code> number of elements, if found; otherwise, –1.
  overload: System.Collections.Generic.List`1.IndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>.  \n  \n -or-  \n  \n <code>count</code> is less than 0.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not specify a valid section in the <xref href=\"System.Collections.Generic.List`1\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: IndexOf(T)
  nameWithType: List<T>.IndexOf(T)
  fullName: List<T>.IndexOf(T)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Searches for the specified object and returns the zero-based index of the first occurrence within the entire <xref href="System.Collections.Generic.List`1"></xref>.
  remarks: "The <xref:System.Collections.Generic.List%601> is searched forward starting at the first element and ending at the last element.  \n  \n This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.IndexOf%2A> method. A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref:System.Collections.Generic.List%601.IndexOf%28%600%29> method overload searches the list from the beginning, and finds the first occurrence of the string. The <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string. Finally, the <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.  \n  \n [!code-cpp[List\\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]\n [!code-vb[List\\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]"
  syntax:
    content: public int IndexOf (T item);
    parameters:
    - id: item
      type: T
      description: The object to locate in the <xref href="System.Collections.Generic.List`1"></xref>. The value can be `null` for reference types.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of <code>item</code> within the entire <xref href="System.Collections.Generic.List`1"></xref>, if found; otherwise, –1.
  overload: System.Collections.Generic.List`1.IndexOf*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.List`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Insert(Int32, T)
  nameWithType: List<T>.Insert(Int32, T)
  fullName: List<T>.Insert(Int32, T)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Inserts an element into the <xref href="System.Collections.Generic.List`1"></xref> at the specified index.
  remarks: "<xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.  \n  \n If <xref:System.Collections.Generic.List%601.Count%2A> already equals <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  \n  \n If `index` is equal to <xref:System.Collections.Generic.List%601.Count%2A>, `item` is added to the end of <xref:System.Collections.Generic.List%601>.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.  \n  \n [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]\n [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]\n [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  \n  \n The following example demonstrates the <xref:System.Collections.Generic.List%601.Insert%2A> method, along with various other properties and methods of the <xref:System.Collections.Generic.List%601> generic class. After the list is created, elements are added. The <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert an item into the middle of the list. The item inserted is a duplicate, which is later removed using the <xref:System.Collections.Generic.List%601.Remove%2A> method.  \n  \n [!code-cpp[List\\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]\n [!code-fsharp[List\\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]\n [!code-vb[List\\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]"
  syntax:
    content: public void Insert (int index, T item);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which <code>item</code> should be inserted.
    - id: item
      type: T
      description: The object to insert. The value can be `null` for reference types.
  overload: System.Collections.Generic.List`1.Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than 0.  \n  \n -or-  \n  \n <code>index</code> is greater than <xref href=\"System.Collections.Generic.List`1.Count\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  id: InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: InsertRange(Int32, IEnumerable<T>)
  nameWithType: List<T>.InsertRange(Int32, IEnumerable<T>)
  fullName: List<T>.InsertRange(Int32, IEnumerable<T>)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Inserts the elements of a collection into the <xref href="System.Collections.Generic.List`1"></xref> at the specified index.
  remarks: "<xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.  \n  \n If the new <xref:System.Collections.Generic.List%601.Count%2A> (the current <xref:System.Collections.Generic.List%601.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.  \n  \n If `index` is equal to <xref:System.Collections.Generic.List%601.Count%2A>, the elements are added to the end of <xref:System.Collections.Generic.List%601>.  \n  \n The order of the elements in the collection is preserved in the <xref:System.Collections.Generic.List%601>.  \n  \n This method is an O(*n* + *m*) operation, where *n* is the number of elements to be added and *m* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example demonstrates <xref:System.Collections.Generic.List%601.InsertRange%2A> method and various other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges. After the list has been created and populated with the names of several peaceful plant-eating dinosaurs, the <xref:System.Collections.Generic.List%601.InsertRange%2A> method is used to insert an array of three ferocious meat-eating dinosaurs into the list, beginning at index location 3.  \n  \n [!code-cpp[List\\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]\n [!code-vb[List\\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]"
  syntax:
    content: public void InsertRange (int index, System.Collections.Generic.IEnumerable<T> collection);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which the new elements should be inserted.
    - id: collection
      type: System.Collections.Generic.IEnumerable`1
      description: The collection whose elements should be inserted into the <xref href="System.Collections.Generic.List`1"></xref>. The collection itself cannot be `null`, but it can contain elements that are `null`, if type <code>T</code> is a reference type.
  overload: System.Collections.Generic.List`1.InsertRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>collection</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than 0.  \n  \n -or-  \n  \n <code>index</code> is greater than <xref href=\"System.Collections.Generic.List`1.Count\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.List`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: List<T>.Item(Int32)
  fullName: List<T>.Item(Int32)
  type: Property
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Gets or sets the element at the specified index.
  remarks: "<xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.  \n  \n This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.  \n  \n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation."
  example:
  - "The example in this section demonstrates the <xref:System.Collections.Generic.List%601.Item%2A> property (the indexer in C#) and various other properties and methods of the <xref:System.Collections.Generic.List%601> generic class. After the list has been created and populated using the <xref:System.Collections.Generic.List%601.Add%2A> method, an element is retrieved and displayed using the <xref:System.Collections.Generic.List%601.Item%2A> property. (For an example that uses the <xref:System.Collections.Generic.List%601.Item%2A> property to set the value of a list element, see <xref:System.Collections.Generic.List%601.AsReadOnly%2A>.)  \n  \n> [!NOTE]\n>  Visual Basic, C#, and C++ all have syntax for accessing the <xref:System.Collections.Generic.List%601.Item%2A> property without using its name. Instead, the variable containing the <xref:System.Collections.Generic.List%601> is used as if it were an array.  \n  \n The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.List%601.Item%2A> property. Visual Basic implements <xref:System.Collections.Generic.List%601.Item%2A> as a default property, which provides the same indexing functionality.  \n  \n [!code-csharp[List`1_Class#2](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#2)]\n [!code-vb[List`1_Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#2)]  \n[!code-csharp[List`1_Class#3](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#3)]\n[!code-vb[List`1_Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#3)]"
  syntax:
    content: public T this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to get or set.
    return:
      type: T
      description: The element at the specified index.
  overload: System.Collections.Generic.List`1.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than 0.  \n  \n -or-  \n  \n <code>index</code> is equal to or greater than <xref href=\"System.Collections.Generic.List`1.Count\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.LastIndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0)
  id: LastIndexOf(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: LastIndexOf(T)
  nameWithType: List<T>.LastIndexOf(T)
  fullName: List<T>.LastIndexOf(T)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Searches for the specified object and returns the zero-based index of the last occurrence within the entire <xref href="System.Collections.Generic.List`1"></xref>.
  remarks: "The <xref:System.Collections.Generic.List%601> is searched backward starting at the last element and ending at the first element.  \n  \n This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.LastIndexOf%2A> method. A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> method overload searches the entire list from the end, and finds the second occurrence of the string. The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list. Finally, the <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.  \n  \n [!code-cpp[List\\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]\n [!code-vb[List\\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]"
  syntax:
    content: public int LastIndexOf (T item);
    parameters:
    - id: item
      type: T
      description: The object to locate in the <xref href="System.Collections.Generic.List`1"></xref>. The value can be `null` for reference types.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of <code>item</code> within the entire the <xref href="System.Collections.Generic.List`1"></xref>, if found; otherwise, –1.
  overload: System.Collections.Generic.List`1.LastIndexOf*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  id: LastIndexOf(`0,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: LastIndexOf(T, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32)
  fullName: List<T>.LastIndexOf(T, Int32)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <xref href="System.Collections.Generic.List`1"></xref> that extends from the first element to the specified index.
  remarks: "The <xref:System.Collections.Generic.List%601> is searched backward starting at `index` and ending at the first element.  \n  \n This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from the beginning of the <xref:System.Collections.Generic.List%601> to `index`."
  example:
  - "The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.LastIndexOf%2A> method. A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> method overload searches the entire list from the end, and finds the second occurrence of the string. The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list. Finally, the <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.  \n  \n [!code-cpp[List\\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]\n [!code-vb[List\\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]"
  syntax:
    content: public int LastIndexOf (T item, int index);
    parameters:
    - id: item
      type: T
      description: The object to locate in the <xref href="System.Collections.Generic.List`1"></xref>. The value can be `null` for reference types.
    - id: index
      type: System.Int32
      description: The zero-based starting index of the backward search.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of <code>item</code> within the range of elements in the <xref href="System.Collections.Generic.List`1"></xref> that extends from the first element to <code>index</code>, if found; otherwise, –1.
  overload: System.Collections.Generic.List`1.LastIndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is outside the range of valid indexes for the <xref href="System.Collections.Generic.List`1"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  id: LastIndexOf(`0,System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: LastIndexOf(T, Int32, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32, Int32)
  fullName: List<T>.LastIndexOf(T, Int32, Int32)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <xref href="System.Collections.Generic.List`1"></xref> that contains the specified number of elements and ends at the specified index.
  remarks: "The <xref:System.Collections.Generic.List%601> is searched backward starting at `index` and ending at `index` minus `count` plus 1, if `count` is greater than 0.  \n  \n This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`."
  example:
  - "The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.LastIndexOf%2A> method. A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5. The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> method overload searches the entire list from the end, and finds the second occurrence of the string. The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list. Finally, the <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of 4 entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.  \n  \n [!code-cpp[List\\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]\n [!code-vb[List\\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]"
  syntax:
    content: public int LastIndexOf (T item, int index, int count);
    parameters:
    - id: item
      type: T
      description: The object to locate in the <xref href="System.Collections.Generic.List`1"></xref>. The value can be `null` for reference types.
    - id: index
      type: System.Int32
      description: The zero-based starting index of the backward search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of <code>item</code> within the range of elements in the <xref href="System.Collections.Generic.List`1"></xref> that contains <code>count</code> number of elements and ends at <code>index</code>, if found; otherwise, –1.
  overload: System.Collections.Generic.List`1.LastIndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\"></xref>.  \n  \n -or-  \n  \n <code>count</code> is less than 0.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not specify a valid section in the <xref href=\"System.Collections.Generic.List`1\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.Remove(`0)
  commentId: M:System.Collections.Generic.List`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Remove(T)
  nameWithType: List<T>.Remove(T)
  fullName: List<T>.Remove(T)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Removes the first occurrence of a specific object from the <xref href="System.Collections.Generic.List`1"></xref>.
  remarks: "If type `T` implements the <xref:System.IEquatable%601> generic interface, the equality comparer is the <xref:System.IEquatable%601.Equals%2A> method of that interface; otherwise, the default equality comparer is <xref:System.Object.Equals%2A?displayProperty=fullName>.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.  \n  \n [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]\n [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]\n [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  \n  \n The following example demonstrates <xref:System.Collections.Generic.List%601.Remove%2A> method. Several properties and methods of the <xref:System.Collections.Generic.List%601> generic class are used to add, insert, and search the list. After these operations, the list contains a duplicate. The <xref:System.Collections.Generic.List%601.Remove%2A> method is used to remove the first instance of the duplicate item, and the contents are displayed. The <xref:System.Collections.Generic.List%601.Remove%2A> method always removes the first instance it encounters.  \n  \n [!code-cpp[List\\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]\n [!code-fsharp[List\\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]\n [!code-vb[List\\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]"
  syntax:
    content: public bool Remove (T item);
    parameters:
    - id: item
      type: T
      description: The object to remove from the <xref href="System.Collections.Generic.List`1"></xref>. The value can be `null` for reference types.
    return:
      type: System.Boolean
      description: '`true` if <code>item</code> is successfully removed; otherwise, `false`.  This method also returns `false` if <code>item</code> was not found in the <xref href="System.Collections.Generic.List`1"></xref>.'
  overload: System.Collections.Generic.List`1.Remove*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  id: RemoveAll(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: RemoveAll(Predicate<T>)
  nameWithType: List<T>.RemoveAll(Predicate<T>)
  fullName: List<T>.RemoveAll(Predicate<T>)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Removes all the elements that match the conditions defined by the specified predicate.
  remarks: "The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and the elements that match the conditions are removed from the <xref:System.Collections.Generic.List%601>.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example demonstrates the <xref:System.Collections.Generic.List%601.RemoveAll%2A> method and several other methods that use the <xref:System.Predicate%601> generic delegate.  \n  \n A <xref:System.Collections.Generic.List%601> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with \"saurus\". The example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in \"saurus\".  \n  \n The <xref:System.Collections.Generic.List%601.Find%2A>, <xref:System.Collections.Generic.List%601.FindLast%2A>, and <xref:System.Collections.Generic.List%601.FindAll%2A> methods are used to search the list with the search predicate method.  \n  \n The <xref:System.Collections.Generic.List%601.RemoveAll%2A> method is used to remove all entries ending with \"saurus\". It traverses the list from the beginning, passing each element in turn to the `EndsWithSaurus` method. The element is removed if the `EndsWithSaurus` method returns `true`.  \n  \n> [!NOTE]\n>  In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly. These languages infer the correct delegate from context, and create it automatically.  \n  \n Finally, the <xref:System.Collections.Generic.List%601.Exists%2A> method verifies that there are no strings in the list that end with \"saurus\".  \n  \n [!code-cpp[List\\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]\n [!code-vb[List\\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]"
  syntax:
    content: public int RemoveAll (Predicate<T> match);
    parameters:
    - id: match
      type: System.Predicate`1
      description: The <xref href="System.Predicate`1"></xref> delegate that defines the conditions of the elements to remove.
    return:
      type: System.Int32
      description: The number of elements removed from the <xref href="System.Collections.Generic.List`1"></xref> .
  overload: System.Collections.Generic.List`1.RemoveAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>match</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: List<T>.RemoveAt(Int32)
  fullName: List<T>.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Removes the element at the specified index of the <xref href="System.Collections.Generic.List`1"></xref>.
  remarks: "When you call <xref:System.Collections.Generic.List%601.RemoveAt%2A> to remove an item, the remaining items in the list are renumbered to replace the removed item. For example, if you remove the item at index 3, the item at index 4 is moved to the 3 position. In addition, the number of items in the list (as represented by the <xref:System.Collections.Generic.List%601.Count%2A> property) is reduced by 1.  \n  \n This method is an O(*n*) operation, where *n* is (<xref:System.Collections.Generic.List%601.Count%2A> - `index`)."
  example:
  - "The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.  \n  \n [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]\n [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]\n [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to remove.
  overload: System.Collections.Generic.List`1.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than 0.  \n  \n -or-  \n  \n <code>index</code> is equal to or greater than <xref href=\"System.Collections.Generic.List`1.Count\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  id: RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: RemoveRange(Int32, Int32)
  nameWithType: List<T>.RemoveRange(Int32, Int32)
  fullName: List<T>.RemoveRange(Int32, Int32)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Removes a range of elements from the <xref href="System.Collections.Generic.List`1"></xref>.
  remarks: "The items are removed and all the elements following them in the <xref:System.Collections.Generic.List%601> have their indexes reduced by `count`.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example demonstrates the <xref:System.Collections.Generic.List%601.RemoveRange%2A> method and various other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges. After the list has been created and modified, the <xref:System.Collections.Generic.List%601.RemoveRange%2A> method is used to remove two elements from the list, beginning at index location 2.  \n  \n [!code-cpp[List\\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]\n [!code-vb[List\\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]"
  syntax:
    content: public void RemoveRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based starting index of the range of elements to remove.
    - id: count
      type: System.Int32
      description: The number of elements to remove.
  overload: System.Collections.Generic.List`1.RemoveRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than 0.  \n  \n -or-  \n  \n <code>count</code> is less than 0."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>index</code> and <code>count</code> do not denote a valid range of elements in the <xref href="System.Collections.Generic.List`1"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.Reverse
  commentId: M:System.Collections.Generic.List`1.Reverse
  id: Reverse
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Reverse()
  nameWithType: List<T>.Reverse()
  fullName: List<T>.Reverse()
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Reverses the order of the elements in the entire <xref href="System.Collections.Generic.List`1"></xref>.
  remarks: "This method uses <xref:System.Array.Reverse%2A?displayProperty=fullName> to reverse the order of the elements.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example demonstrates both overloads of the <xref:System.Collections.Generic.List%601.Reverse%2A> method. The example creates a <xref:System.Collections.Generic.List%601> of strings and adds six strings. The <xref:System.Collections.Generic.List%601.Reverse> method overload is used to reverse the list, and then the <xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.  \n  \n [!code-cpp[List\\`1_Reverse#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Reverse/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_Reverse#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Reverse/cs/source.cs#1)]\n [!code-vb[List\\`1_Reverse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Reverse/vb/source.vb#1)]"
  syntax:
    content: public void Reverse ();
    parameters: []
  overload: System.Collections.Generic.List`1.Reverse*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  id: Reverse(System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Reverse(Int32, Int32)
  nameWithType: List<T>.Reverse(Int32, Int32)
  fullName: List<T>.Reverse(Int32, Int32)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Reverses the order of the elements in the specified range.
  remarks: "This method uses <xref:System.Array.Reverse%2A?displayProperty=fullName> to reverse the order of the elements.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example demonstrates both overloads of the <xref:System.Collections.Generic.List%601.Reverse%2A> method. The example creates a <xref:System.Collections.Generic.List%601> of strings and adds six strings. The <xref:System.Collections.Generic.List%601.Reverse> method overload is used to reverse the list, and then the <xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.  \n  \n [!code-cpp[List\\`1_Reverse#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Reverse/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_Reverse#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Reverse/cs/source.cs#1)]\n [!code-vb[List\\`1_Reverse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Reverse/vb/source.vb#1)]"
  syntax:
    content: public void Reverse (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based starting index of the range to reverse.
    - id: count
      type: System.Int32
      description: The number of elements in the range to reverse.
  overload: System.Collections.Generic.List`1.Reverse*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than 0.  \n  \n -or-  \n  \n <code>count</code> is less than 0."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>index</code> and <code>count</code> do not denote a valid range of elements in the <xref href="System.Collections.Generic.List`1"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  id: Sort(System.Comparison{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Sort(Comparison<T>)
  nameWithType: List<T>.Sort(Comparison<T>)
  fullName: List<T>.Sort(Comparison<T>)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Sorts the elements in the entire <xref href="System.Collections.Generic.List`1"></xref> using the specified <xref href="System.Comparison`1"></xref>.
  remarks: "If `comparison` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the method represented by the delegate.  \n  \n If `comparison` is `null`, an <xref:System.ArgumentNullException> is thrown.  \n  \n This method uses <xref:System.Array.Sort%2A?displayProperty=fullName>, which applies the introspective sort as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an insertion sort algorithm  \n  \n-   If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a Quicksort algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation."
  example:
  - "The following code demonstrates the <xref:System.Collections.Generic.List%601.Sort%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> method overloads on a simple business object. Calling the <xref:System.Collections.Generic.List%601.Sort%2A> method results in the use of the default comparer for the Part type, and the <xref:System.Collections.Generic.List%601.Sort%2A> method is implemented using an anonymous method.  \n  \n [!code-csharp[System.Collections.Generic.List.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/program.cs#1)]\n [!code-vb[System.Collections.Generic.List.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/module1.vb#1)]  \n  \n The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method overload.  \n  \n The example defines an alternative comparison method for strings, named `CompareDinosByLength`. This method works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.  \n  \n A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order. The list also includes an empty string and a null reference. The list is displayed, sorted using a <xref:System.Comparison%601> generic delegate representing the `CompareDinosByLength` method, and displayed again.  \n  \n [!code-cpp[List\\`1_SortComparison#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortComparison/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_SortComparison#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortComparison/cs/source.cs#1)]\n [!code-vb[List\\`1_SortComparison#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortComparison/vb/source.vb#1)]"
  syntax:
    content: public void Sort (Comparison<T> comparison);
    parameters:
    - id: comparison
      type: System.Comparison`1
      description: The <xref href="System.Comparison`1"></xref> to use when comparing elements.
  overload: System.Collections.Generic.List`1.Sort*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>comparison</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The implementation of <code>comparison</code> caused an error during the sort. For example, <code>comparison</code> might not return 0 when comparing an item with itself.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  id: Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Sort(Int32, Int32, IComparer<T>)
  nameWithType: List<T>.Sort(Int32, Int32, IComparer<T>)
  fullName: List<T>.Sort(Int32, Int32, IComparer<T>)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Sorts the elements in a range of elements in <xref href="System.Collections.Generic.List`1"></xref> using the specified comparer.
  remarks: "If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the specified <xref:System.Collections.Generic.IComparer%601> implementation.  \n  \n If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws an <xref:System.InvalidOperationException>.  \n  \n This method uses <xref:System.Array.Sort%2A?displayProperty=fullName>, which applies the introspective sort as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an insertion sort algorithm  \n  \n-   If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a Quicksort algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation."
  example:
  - "The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.  \n  \n The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface. The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.  \n  \n A <xref:System.Collections.Generic.List%601> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs. Within each of the two groups, the names are not in any particular sort order. The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.  \n  \n The <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search only the range of herbivores for \"Brachiosaurus\". The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method is used as an index for inserting the new string.  \n  \n [!code-cpp[List\\`1_SortSearchComparerRange#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_SortSearchComparerRange#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cs/source.cs#1)]\n [!code-vb[List\\`1_SortSearchComparerRange#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparerRange/vb/source.vb#1)]"
  syntax:
    content: public void Sort (int index, int count, System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based starting index of the range to sort.
    - id: count
      type: System.Int32
      description: The length of the range to sort.
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: The <xref href="System.Collections.Generic.IComparer`1"></xref> implementation to use when comparing elements, or `null` to use the default comparer <xref href="System.Collections.Generic.Comparer`1.Default"></xref>.
  overload: System.Collections.Generic.List`1.Sort*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than 0.  \n  \n -or-  \n  \n <code>count</code> is less than 0."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code> and <code>count</code> do not specify a valid range in the <xref href=\"System.Collections.Generic.List`1\"></xref>.  \n  \n -or-  \n  \n The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>comparer</code> is `null`, and the default comparer <xref href="System.Collections.Generic.Comparer`1.Default"></xref> cannot find implementation of the <xref href="System.IComparable`1"></xref> generic interface or the <xref href="System.IComparable"></xref> interface for type <code>T</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.Sort
  commentId: M:System.Collections.Generic.List`1.Sort
  id: Sort
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Sort()
  nameWithType: List<T>.Sort()
  fullName: List<T>.Sort()
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Sorts the elements in the entire <xref href="System.Collections.Generic.List`1"></xref> using the default comparer.
  remarks: "This method uses the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> for type `T` to determine the order of list elements. The <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> property checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws an <xref:System.InvalidOperationException>.  \n  \n This method uses the <xref:System.Array.Sort%2A?displayProperty=fullName> method, which applies the introspective sort as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.  \n  \n-   If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a Heapsort algorithm.  \n  \n-   Otherwise, it uses a Quicksort algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation."
  example:
  - "The following example adds some names to a `List<String>` object, displays the list in unsorted order, calls the <xref:System.Collections.Generic.List%601.Sort%2A> method, and then displays the sorted list.  \n  \n [!code-csharp[System.Collections.Generic.List.Sort#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/Sort1.cs#2)]\n [!code-vb[System.Collections.Generic.List.Sort#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/Sort1.vb#2)]  \n  \n The following code demonstrates the <xref:System.Collections.Generic.List%601.Sort> and <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method overloads on a simple business object. Calling the <xref:System.Collections.Generic.List%601.Sort> method results in the use of the default comparer for the Part type, and the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method is implemented by using an anonymous method.  \n  \n [!code-csharp[System.Collections.Generic.List.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/program.cs#1)]\n [!code-vb[System.Collections.Generic.List.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/module1.vb#1)]  \n  \n The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload. A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order. The list is displayed, sorted, and displayed again.  \n  \n The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload is then used to search for two strings that are not in the list, and the <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert them. The return value of the <xref:System.Collections.Generic.List%601.BinarySearch%2A> method is negative in each case, because the strings are not in the list. Taking the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order. The second search string is larger than any element in the list, so the insertion position is at the end of the list.  \n  \n [!code-cpp[List\\`1_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearch/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearch/cs/source.cs#1)]\n [!code-vb[List\\`1_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearch/vb/source.vb#1)]"
  syntax:
    content: public void Sort ();
    parameters: []
  overload: System.Collections.Generic.List`1.Sort*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The default comparer <xref href="System.Collections.Generic.Comparer`1.Default"></xref> cannot find an implementation of the <xref href="System.IComparable`1"></xref> generic interface or the <xref href="System.IComparable"></xref> interface for type <code>T</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  id: Sort(System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Sort(IComparer<T>)
  nameWithType: List<T>.Sort(IComparer<T>)
  fullName: List<T>.Sort(IComparer<T>)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Sorts the elements in the entire <xref href="System.Collections.Generic.List`1"></xref> using the specified comparer.
  remarks: "If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the specified <xref:System.Collections.Generic.IComparer%601> implementation.  \n  \n If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements the <xref:System.IComparable> interface.  If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> throws an <xref:System.InvalidOperationException>.  \n  \n This method uses the <xref:System.Array.Sort%2A?displayProperty=fullName> method, which applies the introspective sort as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.  \n  \n-   If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a Heapsort algorithm.  \n  \n-   Otherwise, it uses a Quicksort algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation."
  example:
  - "The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.  \n  \n The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface. The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null. Second, the string lengths are compared, and the longer string is deemed to be greater. Third, if the lengths are equal, ordinary string comparison is used.  \n  \n A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order. The list is displayed, sorted using the alternate comparer, and displayed again.  \n  \n The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search for several strings that are not in the list, employing the alternate comparer. The <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert the strings. These two methods are located in the function named `SearchAndInsert`, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> and use it as an index for inserting the new string.  \n  \n [!code-cpp[List\\`1_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparer/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparer/cs/source.cs#1)]\n [!code-vb[List\\`1_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparer/vb/source.vb#1)]"
  syntax:
    content: public void Sort (System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: The <xref href="System.Collections.Generic.IComparer`1"></xref> implementation to use when comparing elements, or `null` to use the default comparer <xref href="System.Collections.Generic.Comparer`1.Default"></xref>.
  overload: System.Collections.Generic.List`1.Sort*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>comparer</code> is `null`, and the default comparer <xref href="System.Collections.Generic.Comparer`1.Default"></xref> cannot find implementation of the <xref href="System.IComparable`1"></xref> generic interface or the <xref href="System.IComparable"></xref> interface for type <code>T</code>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The implementation of <code>comparer</code> caused an error during the sort. For example, <code>comparer</code> might not return 0 when comparing an item with itself.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.ToArray
  commentId: M:System.Collections.Generic.List`1.ToArray
  id: ToArray
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: ToArray()
  nameWithType: List<T>.ToArray()
  fullName: List<T>.ToArray()
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Copies the elements of the <xref href="System.Collections.Generic.List`1"></xref> to a new array.
  remarks: "The elements are copied using <xref:System.Array.Copy%2A?displayProperty=fullName>, which is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example demonstrates the <xref:System.Collections.Generic.List%601.ToArray%2A> method and other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges. At the end of the example, the <xref:System.Collections.Generic.List%601.GetRange%2A> method is used to get three items from the list, beginning with index location 2. The <xref:System.Collections.Generic.List%601.ToArray%2A> method is called on the resulting <xref:System.Collections.Generic.List%601>, creating an array of three elements. The elements of the array are displayed.  \n  \n [!code-cpp[List\\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]\n [!code-vb[List\\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]"
  syntax:
    content: public T[] ToArray ();
    parameters: []
    return:
      type: T[]
      description: An array containing copies of the elements of the <xref href="System.Collections.Generic.List`1"></xref>.
  overload: System.Collections.Generic.List`1.ToArray*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.TrimExcess
  commentId: M:System.Collections.Generic.List`1.TrimExcess
  id: TrimExcess
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: TrimExcess()
  nameWithType: List<T>.TrimExcess()
  fullName: List<T>.TrimExcess()
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Sets the capacity to the actual number of elements in the <xref href="System.Collections.Generic.List`1"></xref>, if that number is less than a threshold value.
  remarks: "This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection. The cost of reallocating and copying a large <xref:System.Collections.Generic.List%601> can be considerable, however, so the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity. This avoids incurring a large reallocation cost for a relatively small gain.  \n  \n> [!NOTE]\n>  The current threshold of 90 percent might change in future releases.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.  \n  \n To reset a <xref:System.Collections.Generic.List%601> to its initial state, call the <xref:System.Collections.Generic.List%601.Clear%2A> method before calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method. Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity.  \n  \n The capacity can also be set using the <xref:System.Collections.Generic.List%601.Capacity%2A> property."
  example:
  - "The following example demonstrates how to check the capacity and count of a  <xref:System.Collections.Generic.List%601> that contains a simple business object, and illustrates using the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method to remove extra capacity.  \n  \n [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]\n [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  \n  \n The following example demonstrates the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method. Several properties and methods of the <xref:System.Collections.Generic.List%601> class are used to add, insert, and remove items from a list of strings. Then the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method is used to reduce the capacity to match the count, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed. If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized. Finally, the contents of the list are cleared.  \n  \n [!code-cpp[List\\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]\n [!code-fsharp[List\\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]\n [!code-vb[List\\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]"
  syntax:
    content: public void TrimExcess ();
    parameters: []
  overload: System.Collections.Generic.List`1.TrimExcess*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  id: TrueForAll(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: TrueForAll(Predicate<T>)
  nameWithType: List<T>.TrueForAll(Predicate<T>)
  fullName: List<T>.TrueForAll(Predicate<T>)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Determines whether every element in the <xref href="System.Collections.Generic.List`1"></xref> matches the conditions defined by the specified predicate.
  remarks: "The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and processing is stopped when the delegate returns `false` for any element. The elements are processed in order, and all calls are made on a single thread.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  example:
  - "The following example demonstrates the <xref:System.Collections.Generic.List%601.TrueForAll%2A> method and several other methods that use <xref:System.Predicate%601> generic delegate.  \n  \n A <xref:System.Collections.Generic.List%601> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with \"saurus\". The example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in \"saurus\".  \n  \n The <xref:System.Collections.Generic.List%601.TrueForAll%2A> method traverses the list from the beginning, passing each element in turn to the `EndsWithSaurus` method. The search stops when the `EndsWithSaurus` method returns `false`.  \n  \n> [!NOTE]\n>  In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly. These languages infer the correct delegate from context and create it automatically.  \n  \n [!code-cpp[List\\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]\n [!code-csharp[List\\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]\n [!code-vb[List\\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]"
  syntax:
    content: public bool TrueForAll (Predicate<T> match);
    parameters:
    - id: match
      type: System.Predicate`1
      description: The <xref href="System.Predicate`1"></xref> delegate that defines the conditions to check against the elements.
    return:
      type: System.Boolean
      description: '`true` if every element in the <xref href="System.Collections.Generic.List`1"></xref> matches the conditions defined by the specified predicate; otherwise, `false`. If the list has no elements, the return value is `true`.'
  overload: System.Collections.Generic.List`1.TrueForAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>match</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection<T>#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: ICollection<T>.IsReadOnly
  nameWithType: List<T>.ICollection<T>.IsReadOnly
  fullName: List<T>.ICollection<T>.IsReadOnly
  type: Property
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Gets a value indicating whether the <xref href="System.Collections.Generic.ICollection`1"></xref> is read-only.
  remarks: "A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \n  \n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Collections.Generic.ICollection`1"></xref> is read-only; otherwise, `false`.  In the default implementation of <xref href="System.Collections.Generic.List`1"></xref>, this property always returns `false`.'
  overload: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: List<T>.IEnumerable<T>.GetEnumerator()
  fullName: List<T>.IEnumerable<T>.GetEnumerator()
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through a collection.
  remarks: "The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. At this position, the <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.  \n  \n The <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \n  \n This method is an O(1) operation."
  syntax:
    content: System.Collections.Generic.IEnumerator<T> IEnumerable<T>.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator`1
      description: An <xref href="System.Collections.Generic.IEnumerator`1"></xref> that can be used to iterate through the collection.
  overload: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: List<T>.ICollection.CopyTo(Array, Int32)
  fullName: List<T>.ICollection.CopyTo(Array, Int32)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Copies the elements of the <xref href="System.Collections.ICollection"></xref> to an <xref href="System.Array"></xref>, starting at a particular <xref href="System.Array"></xref> index.
  remarks: "> [!NOTE]\n>  If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the nongeneric implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=fullName> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  syntax:
    content: void ICollection.CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array"></xref> that is the destination of the elements copied from <xref href="System.Collections.ICollection"></xref>. The <xref href="System.Array"></xref> must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>arrayIndex</code> is less than 0.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code> is multidimensional.  \n  \n -or-  \n  \n <code>array</code> does not have zero-based indexing.  \n  \n -or-  \n  \n The number of elements in the source <xref href=\"System.Collections.ICollection\"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.  \n  \n -or-  \n  \n The type of the source <xref href=\"System.Collections.ICollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: ICollection.IsSynchronized
  nameWithType: List<T>.ICollection.IsSynchronized
  fullName: List<T>.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Gets a value indicating whether access to the <xref href="System.Collections.ICollection"></xref> is synchronized (thread safe).
  remarks: "Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure.  In the rare case where enumeration contends with write accesses, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n <xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection.  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: '`true` if access to the <xref href="System.Collections.ICollection"></xref> is synchronized (thread safe); otherwise, `false`.  In the default implementation of <xref href="System.Collections.Generic.List`1"></xref>, this property always returns `false`.'
  overload: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: ICollection.SyncRoot
  nameWithType: List<T>.ICollection.SyncRoot
  fullName: List<T>.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Gets an object that can be used to synchronize access to the <xref href="System.Collections.ICollection"></xref>.
  remarks: "Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n <xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection. The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.  \n  \n```csharp  \nICollection ic = ...;  \nlock (ic.SyncRoot)   \n{  \n    // Access the collection.  \n}  \n```  \n  \n```vb  \nDim ic As ICollection = ...  \nSyncLock ic.SyncRoot  \n    ' Access the collection.  \nEnd SyncLock  \n```  \n  \n```cpp#  \nICollection^ ic = ...;  \ntry   \n{  \n    Monitor::Enter(ic->SyncRoot);  \n    // Access the collection.  \n}  \nfinally   \n{  \n    Monitor::Exit(ic->SyncRoot);  \n}  \n```  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: An object that can be used to synchronize access to the <xref href="System.Collections.ICollection"></xref>.  In the default implementation of <xref href="System.Collections.Generic.List`1"></xref>, this property always returns the current instance.
  overload: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: IEnumerable.GetEnumerator()
  nameWithType: List<T>.IEnumerable.GetEnumerator()
  fullName: List<T>.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through a collection.
  remarks: "The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n The <xref:System.Collections.IEnumerator.Current%2A> property returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \n  \n This method is an O(1) operation."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An <xref href="System.Collections.IEnumerator"></xref> that can be used to iterate through the collection.
  overload: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: IList.Add(Object)
  nameWithType: List<T>.IList.Add(Object)
  fullName: List<T>.IList.Add(Object)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Adds an item to the <xref href="System.Collections.IList"></xref>.
  remarks: If <xref:System.Collections.Generic.List%601.Count%2A> is less than <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.
  syntax:
    content: int IList.Add (object item);
    parameters:
    - id: item
      type: System.Object
      description: The <xref href="System.Object"></xref> to add to the <xref href="System.Collections.IList"></xref>.
    return:
      type: System.Int32
      description: The position into which the new element was inserted.
  overload: System.Collections.Generic.List`1.System#Collections#IList#Add*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>item</code> is of a type that is not assignable to the <xref href="System.Collections.IList"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: IList.Contains(Object)
  nameWithType: List<T>.IList.Contains(Object)
  fullName: List<T>.IList.Contains(Object)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Determines whether the <xref href="System.Collections.IList"></xref> contains a specific value.
  remarks: "This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  syntax:
    content: bool IList.Contains (object item);
    parameters:
    - id: item
      type: System.Object
      description: The <xref href="System.Object"></xref> to locate in the <xref href="System.Collections.IList"></xref>.
    return:
      type: System.Boolean
      description: '`true` if <code>item</code> is found in the <xref href="System.Collections.IList"></xref>; otherwise, `false`.'
  overload: System.Collections.Generic.List`1.System#Collections#IList#Contains*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: IList.IndexOf(Object)
  nameWithType: List<T>.IList.IndexOf(Object)
  fullName: List<T>.IList.IndexOf(Object)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Determines the index of a specific item in the <xref href="System.Collections.IList"></xref>.
  remarks: "This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  syntax:
    content: int IList.IndexOf (object item);
    parameters:
    - id: item
      type: System.Object
      description: The object to locate in the <xref href="System.Collections.IList"></xref>.
    return:
      type: System.Int32
      description: The index of <code>item</code> if found in the list; otherwise, –1.
  overload: System.Collections.Generic.List`1.System#Collections#IList#IndexOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>item</code> is of a type that is not assignable to the <xref href="System.Collections.IList"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: IList.Insert(Int32, Object)
  nameWithType: List<T>.IList.Insert(Int32, Object)
  fullName: List<T>.IList.Insert(Int32, Object)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Inserts an item to the <xref href="System.Collections.IList"></xref> at the specified index.
  remarks: "If `index` equals the number of items in the <xref:System.Collections.IList>, then `item` is appended to the end.  \n  \n This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  syntax:
    content: void IList.Insert (int index, object item);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which <code>item</code> should be inserted.
    - id: item
      type: System.Object
      description: The object to insert into the <xref href="System.Collections.IList"></xref>.
  overload: System.Collections.Generic.List`1.System#Collections#IList#Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is not a valid index in the <xref href="System.Collections.IList"></xref>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>item</code> is of a type that is not assignable to the <xref href="System.Collections.IList"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: IList.IsFixedSize
  nameWithType: List<T>.IList.IsFixedSize
  fullName: List<T>.IList.IsFixedSize
  type: Property
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Gets a value indicating whether the <xref href="System.Collections.IList"></xref> has a fixed size.
  remarks: "A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  \n  \n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Collections.IList"></xref> has a fixed size; otherwise, `false`.  In the default implementation of <xref href="System.Collections.Generic.List`1"></xref>, this property always returns `false`.'
  overload: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: IList.IsReadOnly
  nameWithType: List<T>.IList.IsReadOnly
  fullName: List<T>.IList.IsReadOnly
  type: Property
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Gets a value indicating whether the <xref href="System.Collections.IList"></xref> is read-only.
  remarks: "A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \n  \n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.IList.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Collections.IList"></xref> is read-only; otherwise, `false`.  In the default implementation of <xref href="System.Collections.Generic.List`1"></xref>, this property always returns `false`.'
  overload: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: IList.Item(Int32)
  nameWithType: List<T>.IList.Item(Int32)
  fullName: List<T>.IList.Item(Int32)
  type: Property
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Gets or sets the element at the specified index.
  remarks: "The C# language uses the [this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> property. Visual Basic implements <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> as a default property, which provides the same indexing functionality.  \n  \n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation."
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to get or set.
    return:
      type: System.Object
      description: The element at the specified index.
  overload: System.Collections.Generic.List`1.System#Collections#IList#Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is not a valid index in the <xref href="System.Collections.IList"></xref>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The property is set and <code>value</code> is of a type that is not assignable to the <xref href="System.Collections.IList"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: IList.Remove(Object)
  nameWithType: List<T>.IList.Remove(Object)
  fullName: List<T>.IList.Remove(Object)
  type: Method
  assemblies:
  - System.Collections
  - mscorlib
  - netstandard
  namespace: System.Collections.Generic
  summary: Removes the first occurrence of a specific object from the <xref href="System.Collections.IList"></xref>.
  remarks: "This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \n  \n This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>."
  syntax:
    content: void IList.Remove (object item);
    parameters:
    - id: item
      type: System.Object
      description: The object to remove from the <xref href="System.Collections.IList"></xref>.
  overload: System.Collections.Generic.List`1.System#Collections#IList#Remove*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>item</code> is of a type that is not assignable to the <xref href="System.Collections.IList"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.OutOfMemoryException
  parent: System
  isExternal: false
  name: OutOfMemoryException
  nameWithType: OutOfMemoryException
  fullName: System.OutOfMemoryException
- uid: System.Collections.Generic.List`1.#ctor
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: List<T>()
  nameWithType: List<T>.List<T>()
  fullName: List<T>.List<T>()
- uid: System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: List<T>(IEnumerable<T>)
  nameWithType: List<T>.List<T>(IEnumerable<T>)
  fullName: List<T>.List<T>(IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.List`1.#ctor(System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: List<T>(Int32)
  nameWithType: List<T>.List<T>(Int32)
  fullName: List<T>.List<T>(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.List`1.Add(`0)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Add(T)
  nameWithType: List<T>.Add(T)
  fullName: List<T>.Add(T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: AddRange(IEnumerable<T>)
  nameWithType: List<T>.AddRange(IEnumerable<T>)
  fullName: List<T>.AddRange(IEnumerable<T>)
- uid: System.Collections.Generic.List`1.AsReadOnly
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: AsReadOnly()
  nameWithType: List<T>.AsReadOnly()
  fullName: List<T>.AsReadOnly()
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  parent: System.Collections.ObjectModel
  isExternal: false
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
- uid: System.Collections.Generic.List`1.BinarySearch(`0)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: BinarySearch(T)
  nameWithType: List<T>.BinarySearch(T)
  fullName: List<T>.BinarySearch(T)
- uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: BinarySearch(T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(T, IComparer<T>)
  fullName: List<T>.BinarySearch(T, IComparer<T>)
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
- uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: BinarySearch(Int32, Int32, T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(Int32, Int32, T, IComparer<T>)
  fullName: List<T>.BinarySearch(Int32, Int32, T, IComparer<T>)
- uid: System.Collections.Generic.List`1.Capacity
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Capacity
  nameWithType: List<T>.Capacity
  fullName: List<T>.Capacity
- uid: System.Collections.Generic.List`1.Clear
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Clear()
  nameWithType: List<T>.Clear()
  fullName: List<T>.Clear()
- uid: System.Collections.Generic.List`1.Contains(`0)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Contains(T)
  nameWithType: List<T>.Contains(T)
  fullName: List<T>.Contains(T)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: ConvertAll<TOutput>(Converter<T,TOutput>)
  nameWithType: List<T>.ConvertAll<TOutput>(Converter<T,TOutput>)
  fullName: List<T>.ConvertAll<TOutput>(Converter<T,TOutput>)
- uid: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
- uid: TOutput
  name: TOutput
  nameWithType: TOutput
  fullName: TOutput
- uid: System.Collections.Generic.List{TOutput}
  parent: System.Collections.Generic
  isExternal: false
  name: List<TOutput>
  nameWithType: List<TOutput>
  fullName: System.Collections.Generic.List<TOutput>
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
  - name: <
    nameWithType: <
    fullName: <
  - uid: TOutput
    name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Converter`2
  name: Converter<TInput,TOutput>
  nameWithType: Converter<TInput,TOutput>
  fullName: System.Converter<TInput,TOutput>
- uid: System.Converter{T,TOutput}
  parent: System
  isExternal: false
  name: Converter<T,TOutput>
  nameWithType: Converter<T,TOutput>
  fullName: System.Converter<T,TOutput>
  spec.csharp:
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TOutput
    name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: CopyTo(T[], Int32)
  nameWithType: List<T>.CopyTo(T[], Int32)
  fullName: List<T>.CopyTo(T[], Int32)
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: CopyTo(Int32, T[], Int32, Int32)
  nameWithType: List<T>.CopyTo(Int32, T[], Int32, Int32)
  fullName: List<T>.CopyTo(Int32, T[], Int32, Int32)
- uid: System.Collections.Generic.List`1.CopyTo(`0[])
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: CopyTo(T[])
  nameWithType: List<T>.CopyTo(T[])
  fullName: List<T>.CopyTo(T[])
- uid: System.Collections.Generic.List`1.Count
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Count
  nameWithType: List<T>.Count
  fullName: List<T>.Count
- uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Exists(Predicate<T>)
  nameWithType: List<T>.Exists(Predicate<T>)
  fullName: List<T>.Exists(Predicate<T>)
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
- uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Find(Predicate<T>)
  nameWithType: List<T>.Find(Predicate<T>)
  fullName: List<T>.Find(Predicate<T>)
- uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindAll(Predicate<T>)
  nameWithType: List<T>.FindAll(Predicate<T>)
  fullName: List<T>.FindAll(Predicate<T>)
- uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindIndex(Predicate<T>)
  nameWithType: List<T>.FindIndex(Predicate<T>)
  fullName: List<T>.FindIndex(Predicate<T>)
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Predicate<T>)
  fullName: List<T>.FindIndex(Int32, Predicate<T>)
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Int32, Predicate<T>)
  fullName: List<T>.FindIndex(Int32, Int32, Predicate<T>)
- uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindLast(Predicate<T>)
  nameWithType: List<T>.FindLast(Predicate<T>)
  fullName: List<T>.FindLast(Predicate<T>)
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindLastIndex(Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Predicate<T>)
  fullName: List<T>.FindLastIndex(Predicate<T>)
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindLastIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Predicate<T>)
  fullName: List<T>.FindLastIndex(Int32, Predicate<T>)
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindLastIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Int32, Predicate<T>)
  fullName: List<T>.FindLastIndex(Int32, Int32, Predicate<T>)
- uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: ForEach(Action<T>)
  nameWithType: List<T>.ForEach(Action<T>)
  fullName: List<T>.ForEach(Action<T>)
- uid: System.Action`1
  parent: System
  isExternal: false
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
- uid: System.Collections.Generic.List`1.GetEnumerator
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: GetEnumerator()
  nameWithType: List<T>.GetEnumerator()
  fullName: List<T>.GetEnumerator()
- uid: System.Collections.Generic.List{T}
  parent: System.Collections.Generic
  isExternal: false
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>+Enumerator
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: GetRange(Int32, Int32)
  nameWithType: List<T>.GetRange(Int32, Int32)
  fullName: List<T>.GetRange(Int32, Int32)
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: IndexOf(T, Int32)
  nameWithType: List<T>.IndexOf(T, Int32)
  fullName: List<T>.IndexOf(T, Int32)
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: IndexOf(T, Int32, Int32)
  nameWithType: List<T>.IndexOf(T, Int32, Int32)
  fullName: List<T>.IndexOf(T, Int32, Int32)
- uid: System.Collections.Generic.List`1.IndexOf(`0)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: IndexOf(T)
  nameWithType: List<T>.IndexOf(T)
  fullName: List<T>.IndexOf(T)
- uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Insert(Int32, T)
  nameWithType: List<T>.Insert(Int32, T)
  fullName: List<T>.Insert(Int32, T)
- uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: InsertRange(Int32, IEnumerable<T>)
  nameWithType: List<T>.InsertRange(Int32, IEnumerable<T>)
  fullName: List<T>.InsertRange(Int32, IEnumerable<T>)
- uid: System.Collections.Generic.List`1.Item(System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Item(Int32)
  nameWithType: List<T>.Item(Int32)
  fullName: List<T>.Item(Int32)
- uid: System.Collections.Generic.List`1.LastIndexOf(`0)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: LastIndexOf(T)
  nameWithType: List<T>.LastIndexOf(T)
  fullName: List<T>.LastIndexOf(T)
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: LastIndexOf(T, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32)
  fullName: List<T>.LastIndexOf(T, Int32)
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: LastIndexOf(T, Int32, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32, Int32)
  fullName: List<T>.LastIndexOf(T, Int32, Int32)
- uid: System.Collections.Generic.List`1.Remove(`0)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Remove(T)
  nameWithType: List<T>.Remove(T)
  fullName: List<T>.Remove(T)
- uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: RemoveAll(Predicate<T>)
  nameWithType: List<T>.RemoveAll(Predicate<T>)
  fullName: List<T>.RemoveAll(Predicate<T>)
- uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: List<T>.RemoveAt(Int32)
  fullName: List<T>.RemoveAt(Int32)
- uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: RemoveRange(Int32, Int32)
  nameWithType: List<T>.RemoveRange(Int32, Int32)
  fullName: List<T>.RemoveRange(Int32, Int32)
- uid: System.Collections.Generic.List`1.Reverse
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Reverse()
  nameWithType: List<T>.Reverse()
  fullName: List<T>.Reverse()
- uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Reverse(Int32, Int32)
  nameWithType: List<T>.Reverse(Int32, Int32)
  fullName: List<T>.Reverse(Int32, Int32)
- uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Sort(Comparison<T>)
  nameWithType: List<T>.Sort(Comparison<T>)
  fullName: List<T>.Sort(Comparison<T>)
- uid: System.Comparison`1
  parent: System
  isExternal: false
  name: Comparison<T>
  nameWithType: Comparison<T>
  fullName: System.Comparison<T>
- uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Sort(Int32, Int32, IComparer<T>)
  nameWithType: List<T>.Sort(Int32, Int32, IComparer<T>)
  fullName: List<T>.Sort(Int32, Int32, IComparer<T>)
- uid: System.Collections.Generic.List`1.Sort
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Sort()
  nameWithType: List<T>.Sort()
  fullName: List<T>.Sort()
- uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Sort(IComparer<T>)
  nameWithType: List<T>.Sort(IComparer<T>)
  fullName: List<T>.Sort(IComparer<T>)
- uid: System.Collections.Generic.List`1.ToArray
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: ToArray()
  nameWithType: List<T>.ToArray()
  fullName: List<T>.ToArray()
- uid: System.Collections.Generic.List`1.TrimExcess
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: TrimExcess()
  nameWithType: List<T>.TrimExcess()
  fullName: List<T>.TrimExcess()
- uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: TrueForAll(Predicate<T>)
  nameWithType: List<T>.TrueForAll(Predicate<T>)
  fullName: List<T>.TrueForAll(Predicate<T>)
- uid: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: ICollection<T>.IsReadOnly
  nameWithType: List<T>.ICollection<T>.IsReadOnly
  fullName: List<T>.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: List<T>.IEnumerable<T>.GetEnumerator()
  fullName: List<T>.IEnumerable<T>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: List<T>.ICollection.CopyTo(Array, Int32)
  fullName: List<T>.ICollection.CopyTo(Array, Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: ICollection.IsSynchronized
  nameWithType: List<T>.ICollection.IsSynchronized
  fullName: List<T>.ICollection.IsSynchronized
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: ICollection.SyncRoot
  nameWithType: List<T>.ICollection.SyncRoot
  fullName: List<T>.ICollection.SyncRoot
- uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: List<T>.IEnumerable.GetEnumerator()
  fullName: List<T>.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: IList.Add(Object)
  nameWithType: List<T>.IList.Add(Object)
  fullName: List<T>.IList.Add(Object)
- uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: IList.Contains(Object)
  nameWithType: List<T>.IList.Contains(Object)
  fullName: List<T>.IList.Contains(Object)
- uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: IList.IndexOf(Object)
  nameWithType: List<T>.IList.IndexOf(Object)
  fullName: List<T>.IList.IndexOf(Object)
- uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: IList.Insert(Int32, Object)
  nameWithType: List<T>.IList.Insert(Int32, Object)
  fullName: List<T>.IList.Insert(Int32, Object)
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: IList.IsFixedSize
  nameWithType: List<T>.IList.IsFixedSize
  fullName: List<T>.IList.IsFixedSize
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: IList.IsReadOnly
  nameWithType: List<T>.IList.IsReadOnly
  fullName: List<T>.IList.IsReadOnly
- uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: IList.Item(Int32)
  nameWithType: List<T>.IList.Item(Int32)
  fullName: List<T>.IList.Item(Int32)
- uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: IList.Remove(Object)
  nameWithType: List<T>.IList.Remove(Object)
  fullName: List<T>.IList.Remove(Object)
- uid: System.Collections.Generic.List`1.Sort*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Sort
  nameWithType: List<T>.Sort
  fullName: List<T>.Sort
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.#ctor*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: List<T>
  nameWithType: List<T>.List<T>
  fullName: List<T>.List<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.Add*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Add
  nameWithType: List<T>.Add
  fullName: List<T>.Add
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.AddRange*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: AddRange
  nameWithType: List<T>.AddRange
  fullName: List<T>.AddRange
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.AsReadOnly*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: AsReadOnly
  nameWithType: List<T>.AsReadOnly
  fullName: List<T>.AsReadOnly
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.BinarySearch*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: BinarySearch
  nameWithType: List<T>.BinarySearch
  fullName: List<T>.BinarySearch
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.Capacity*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Capacity
  nameWithType: List<T>.Capacity
  fullName: List<T>.Capacity
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.Clear*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Clear
  nameWithType: List<T>.Clear
  fullName: List<T>.Clear
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.Contains*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Contains
  nameWithType: List<T>.Contains
  fullName: List<T>.Contains
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.ConvertAll``1*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: ConvertAll<TOutput>
  nameWithType: List<T>.ConvertAll<TOutput>
  fullName: List<T>.ConvertAll<TOutput>
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.CopyTo*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: CopyTo
  nameWithType: List<T>.CopyTo
  fullName: List<T>.CopyTo
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.Count*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Count
  nameWithType: List<T>.Count
  fullName: List<T>.Count
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.Exists*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Exists
  nameWithType: List<T>.Exists
  fullName: List<T>.Exists
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.Find*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Find
  nameWithType: List<T>.Find
  fullName: List<T>.Find
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.FindAll*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindAll
  nameWithType: List<T>.FindAll
  fullName: List<T>.FindAll
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.FindIndex*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindIndex
  nameWithType: List<T>.FindIndex
  fullName: List<T>.FindIndex
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.FindLast*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindLast
  nameWithType: List<T>.FindLast
  fullName: List<T>.FindLast
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.FindLastIndex*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindLastIndex
  nameWithType: List<T>.FindLastIndex
  fullName: List<T>.FindLastIndex
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.ForEach*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: ForEach
  nameWithType: List<T>.ForEach
  fullName: List<T>.ForEach
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.GetEnumerator*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: GetEnumerator
  nameWithType: List<T>.GetEnumerator
  fullName: List<T>.GetEnumerator
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.GetRange*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: GetRange
  nameWithType: List<T>.GetRange
  fullName: List<T>.GetRange
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.IndexOf*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: IndexOf
  nameWithType: List<T>.IndexOf
  fullName: List<T>.IndexOf
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.Insert*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Insert
  nameWithType: List<T>.Insert
  fullName: List<T>.Insert
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.InsertRange*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: InsertRange
  nameWithType: List<T>.InsertRange
  fullName: List<T>.InsertRange
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.Item*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Item
  nameWithType: List<T>.Item
  fullName: List<T>.Item
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.LastIndexOf*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: LastIndexOf
  nameWithType: List<T>.LastIndexOf
  fullName: List<T>.LastIndexOf
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.Remove*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Remove
  nameWithType: List<T>.Remove
  fullName: List<T>.Remove
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.RemoveAll*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: RemoveAll
  nameWithType: List<T>.RemoveAll
  fullName: List<T>.RemoveAll
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.RemoveAt*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: RemoveAt
  nameWithType: List<T>.RemoveAt
  fullName: List<T>.RemoveAt
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.RemoveRange*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: RemoveRange
  nameWithType: List<T>.RemoveRange
  fullName: List<T>.RemoveRange
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.Reverse*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Reverse
  nameWithType: List<T>.Reverse
  fullName: List<T>.Reverse
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.ToArray*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: ToArray
  nameWithType: List<T>.ToArray
  fullName: List<T>.ToArray
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.TrimExcess*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: TrimExcess
  nameWithType: List<T>.TrimExcess
  fullName: List<T>.TrimExcess
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.TrueForAll*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: TrueForAll
  nameWithType: List<T>.TrueForAll
  fullName: List<T>.TrueForAll
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType: List<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName: List<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  nameWithType: List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
  fullName: List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: List<T>.System.Collections.ICollection.CopyTo
  fullName: List<T>.System.Collections.ICollection.CopyTo
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: List<T>.System.Collections.ICollection.IsSynchronized
  fullName: List<T>.System.Collections.ICollection.IsSynchronized
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: List<T>.System.Collections.ICollection.SyncRoot
  fullName: List<T>.System.Collections.ICollection.SyncRoot
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: List<T>.System.Collections.IEnumerable.GetEnumerator
  fullName: List<T>.System.Collections.IEnumerable.GetEnumerator
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.System#Collections#IList#Add*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: List<T>.System.Collections.IList.Add
  fullName: List<T>.System.Collections.IList.Add
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.System#Collections#IList#Contains*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: List<T>.System.Collections.IList.Contains
  fullName: List<T>.System.Collections.IList.Contains
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: List<T>.System.Collections.IList.IndexOf
  fullName: List<T>.System.Collections.IList.IndexOf
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.System#Collections#IList#Insert*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: List<T>.System.Collections.IList.Insert
  fullName: List<T>.System.Collections.IList.Insert
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: List<T>.System.Collections.IList.IsFixedSize
  fullName: List<T>.System.Collections.IList.IsFixedSize
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: List<T>.System.Collections.IList.IsReadOnly
  fullName: List<T>.System.Collections.IList.IsReadOnly
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.System#Collections#IList#Item*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.Item
  nameWithType: List<T>.System.Collections.IList.Item
  fullName: List<T>.System.Collections.IList.Item
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Collections.Generic.List`1.System#Collections#IList#Remove*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: List<T>.System.Collections.IList.Remove
  fullName: List<T>.System.Collections.IList.Remove
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/List`1.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: ToImmutableArray<TSource>(IEnumerable<TSource>)
  nameWithType: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)
  fullName: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)
- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: System.Collections.Immutable.ImmutableDictionary
  isExternal: false
  name: ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Collections.Immutable.ImmutableDictionary
  isExternal: false
  name: ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})
  parent: System.Collections.Immutable.ImmutableDictionary
  isExternal: false
  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)
  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)
  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)
- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Collections.Immutable.ImmutableDictionary
  isExternal: false
  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)
  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)
  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>)
- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Collections.Immutable.ImmutableDictionary
  isExternal: false
  name: ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)
  nameWithType: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)
  fullName: ImmutableDictionary.ToImmutableDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)
- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  parent: System.Collections.Immutable.ImmutableDictionary
  isExternal: false
  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)
  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)
  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)
- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Collections.Immutable.ImmutableDictionary
  isExternal: false
  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)
  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)
  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>)
- uid: System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})
  parent: System.Collections.Immutable.ImmutableDictionary
  isExternal: false
  name: ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)
  nameWithType: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)
  fullName: ImmutableDictionary.ToImmutableDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IEqualityComparer<TKey>, IEqualityComparer<TValue>)
- uid: System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableHashSet
  isExternal: false
  name: ToImmutableHashSet<TSource>(IEnumerable<TSource>)
  nameWithType: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>)
  fullName: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>)
- uid: System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Collections.Immutable.ImmutableHashSet
  isExternal: false
  name: ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: ImmutableHashSet.ToImmutableHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)
- uid: System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: ToImmutableList<TSource>(IEnumerable<TSource>)
  nameWithType: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)
  fullName: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)
- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})
  parent: System.Collections.Immutable.ImmutableSortedDictionary
  isExternal: false
  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)
  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)
  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)
- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})
  parent: System.Collections.Immutable.ImmutableSortedDictionary
  isExternal: false
  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)
  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)
  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>)
- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Collections.Immutable.ImmutableSortedDictionary
  isExternal: false
  name: ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)
  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)
  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>, IComparer<TKey>, IEqualityComparer<TValue>)
- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  parent: System.Collections.Immutable.ImmutableSortedDictionary
  isExternal: false
  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)
  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)
  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>)
- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})
  parent: System.Collections.Immutable.ImmutableSortedDictionary
  isExternal: false
  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)
  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)
  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>)
- uid: System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})
  parent: System.Collections.Immutable.ImmutableSortedDictionary
  isExternal: false
  name: ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)
  nameWithType: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)
  fullName: ImmutableSortedDictionary.ToImmutableSortedDictionary<TSource,TKey,TValue>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TValue>, IComparer<TKey>, IEqualityComparer<TValue>)
- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableSortedSet
  isExternal: false
  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>)
  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)
  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)
- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
  parent: System.Collections.Immutable.ImmutableSortedSet
  isExternal: false
  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)
  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)
  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)
- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Data.DataTableExtensions
  isExternal: false
  name: CopyToDataTable<T>(IEnumerable<T>)
  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)
  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>)
- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)
  parent: System.Data.DataTableExtensions
  isExternal: false
  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)
  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)
  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption)
- uid: System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)
  parent: System.Data.DataTableExtensions
  isExternal: false
  name: CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)
  nameWithType: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)
  fullName: DataTableExtensions.CopyToDataTable<T>(IEnumerable<T>, DataTable, LoadOption, FillErrorEventHandler)
- uid: System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)
  nameWithType: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)
  fullName: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource,TSource,TSource>)
- uid: System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)
  nameWithType: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)
  fullName: Enumerable.Aggregate<TSource,TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>)
- uid: System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)
  nameWithType: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)
  fullName: Enumerable.Aggregate<TSource,TAccumulate,TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate,TSource,TAccumulate>, Func<TAccumulate,TResult>)
- uid: System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Any<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  parent: System.Linq.Enumerable
  isExternal: false
  name: Append<TSource>(IEnumerable<TSource>, TSource)
  nameWithType: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)
  fullName: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)
- uid: System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: AsEnumerable<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average(IEnumerable<Decimal>)
  nameWithType: Enumerable.Average(IEnumerable<Decimal>)
  fullName: Enumerable.Average(IEnumerable<Decimal>)
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average(IEnumerable<Double>)
  nameWithType: Enumerable.Average(IEnumerable<Double>)
  fullName: Enumerable.Average(IEnumerable<Double>)
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average(IEnumerable<Int32>)
  nameWithType: Enumerable.Average(IEnumerable<Int32>)
  fullName: Enumerable.Average(IEnumerable<Int32>)
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average(IEnumerable<Int64>)
  nameWithType: Enumerable.Average(IEnumerable<Int64>)
  fullName: Enumerable.Average(IEnumerable<Int64>)
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average(IEnumerable<Nullable<Decimal>>)
  nameWithType: Enumerable.Average(IEnumerable<Nullable<Decimal>>)
  fullName: Enumerable.Average(IEnumerable<Nullable<Decimal>>)
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average(IEnumerable<Nullable<Double>>)
  nameWithType: Enumerable.Average(IEnumerable<Nullable<Double>>)
  fullName: Enumerable.Average(IEnumerable<Nullable<Double>>)
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average(IEnumerable<Nullable<Int32>>)
  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int32>>)
  fullName: Enumerable.Average(IEnumerable<Nullable<Int32>>)
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average(IEnumerable<Nullable<Int64>>)
  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int64>>)
  fullName: Enumerable.Average(IEnumerable<Nullable<Int64>>)
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average(IEnumerable<Nullable<Single>>)
  nameWithType: Enumerable.Average(IEnumerable<Nullable<Single>>)
  fullName: Enumerable.Average(IEnumerable<Nullable<Single>>)
- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average(IEnumerable<Single>)
  nameWithType: Enumerable.Average(IEnumerable<Single>)
  fullName: Enumerable.Average(IEnumerable<Single>)
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
  fullName: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  isExternal: false
  name: Cast<TResult>(IEnumerable)
  nameWithType: Enumerable.Cast<TResult>(IEnumerable)
  fullName: Enumerable.Cast<TResult>(IEnumerable)
- uid: System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
  parent: System.Linq.Enumerable
  isExternal: false
  name: Contains<TSource>(IEnumerable<TSource>, TSource)
  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)
  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)
- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
  fullName: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Count<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
  parent: System.Linq.Enumerable
  isExternal: false
  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)
  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)
  fullName: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)
- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Distinct<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)
- uid: System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: System.Linq.Enumerable
  isExternal: false
  name: ElementAt<TSource>(IEnumerable<TSource>, Int32)
  nameWithType: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)
  fullName: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)
- uid: System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: System.Linq.Enumerable
  isExternal: false
  name: ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)
  nameWithType: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)
  fullName: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)
- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: First<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.First<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: FirstOrDefault<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
  nameWithType: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
  fullName: Enumerable.GroupBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  parent: System.Linq.Enumerable
  isExternal: false
  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)
  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)
  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)
  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)
  fullName: Enumerable.GroupBy<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  parent: System.Linq.Enumerable
  isExternal: false
  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)
  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)
  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>)
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)
  nameWithType: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)
  fullName: Enumerable.GroupBy<TSource,TKey,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TKey,IEnumerable<TSource>,TResult>, IEqualityComparer<TKey>)
- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  parent: System.Linq.Enumerable
  isExternal: false
  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)
  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)
  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>)
- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)
  nameWithType: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)
  fullName: Enumerable.GroupBy<TSource,TKey,TElement,TResult>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, Func<TKey,IEnumerable<TElement>,TResult>, IEqualityComparer<TKey>)
- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  parent: System.Linq.Enumerable
  isExternal: false
  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)
  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)
  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>)
- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  parent: System.Linq.Enumerable
  isExternal: false
  name: GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)
  nameWithType: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)
  fullName: Enumerable.GroupJoin<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,IEnumerable<TInner>,TResult>, IEqualityComparer<TKey>)
- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)
  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)
  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>)
- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)
  nameWithType: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)
  fullName: Enumerable.Join<TOuter,TInner,TKey,TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter,TKey>, Func<TInner,TKey>, Func<TOuter,TInner,TResult>, IEqualityComparer<TKey>)
- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Last<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: LastOrDefault<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: LongCount<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max(IEnumerable<Decimal>)
  nameWithType: Enumerable.Max(IEnumerable<Decimal>)
  fullName: Enumerable.Max(IEnumerable<Decimal>)
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max(IEnumerable<Double>)
  nameWithType: Enumerable.Max(IEnumerable<Double>)
  fullName: Enumerable.Max(IEnumerable<Double>)
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max(IEnumerable<Int32>)
  nameWithType: Enumerable.Max(IEnumerable<Int32>)
  fullName: Enumerable.Max(IEnumerable<Int32>)
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max(IEnumerable<Int64>)
  nameWithType: Enumerable.Max(IEnumerable<Int64>)
  fullName: Enumerable.Max(IEnumerable<Int64>)
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max(IEnumerable<Nullable<Decimal>>)
  nameWithType: Enumerable.Max(IEnumerable<Nullable<Decimal>>)
  fullName: Enumerable.Max(IEnumerable<Nullable<Decimal>>)
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max(IEnumerable<Nullable<Double>>)
  nameWithType: Enumerable.Max(IEnumerable<Nullable<Double>>)
  fullName: Enumerable.Max(IEnumerable<Nullable<Double>>)
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max(IEnumerable<Nullable<Int32>>)
  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int32>>)
  fullName: Enumerable.Max(IEnumerable<Nullable<Int32>>)
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max(IEnumerable<Nullable<Int64>>)
  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int64>>)
  fullName: Enumerable.Max(IEnumerable<Nullable<Int64>>)
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max(IEnumerable<Nullable<Single>>)
  nameWithType: Enumerable.Max(IEnumerable<Nullable<Single>>)
  fullName: Enumerable.Max(IEnumerable<Nullable<Single>>)
- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max(IEnumerable<Single>)
  nameWithType: Enumerable.Max(IEnumerable<Single>)
  fullName: Enumerable.Max(IEnumerable<Single>)
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
  fullName: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
- uid: System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)
  nameWithType: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)
  fullName: Enumerable.Max<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min(IEnumerable<Decimal>)
  nameWithType: Enumerable.Min(IEnumerable<Decimal>)
  fullName: Enumerable.Min(IEnumerable<Decimal>)
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min(IEnumerable<Double>)
  nameWithType: Enumerable.Min(IEnumerable<Double>)
  fullName: Enumerable.Min(IEnumerable<Double>)
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min(IEnumerable<Int32>)
  nameWithType: Enumerable.Min(IEnumerable<Int32>)
  fullName: Enumerable.Min(IEnumerable<Int32>)
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min(IEnumerable<Int64>)
  nameWithType: Enumerable.Min(IEnumerable<Int64>)
  fullName: Enumerable.Min(IEnumerable<Int64>)
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min(IEnumerable<Nullable<Decimal>>)
  nameWithType: Enumerable.Min(IEnumerable<Nullable<Decimal>>)
  fullName: Enumerable.Min(IEnumerable<Nullable<Decimal>>)
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min(IEnumerable<Nullable<Double>>)
  nameWithType: Enumerable.Min(IEnumerable<Nullable<Double>>)
  fullName: Enumerable.Min(IEnumerable<Nullable<Double>>)
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min(IEnumerable<Nullable<Int32>>)
  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int32>>)
  fullName: Enumerable.Min(IEnumerable<Nullable<Int32>>)
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min(IEnumerable<Nullable<Int64>>)
  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int64>>)
  fullName: Enumerable.Min(IEnumerable<Nullable<Int64>>)
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min(IEnumerable<Nullable<Single>>)
  nameWithType: Enumerable.Min(IEnumerable<Nullable<Single>>)
  fullName: Enumerable.Min(IEnumerable<Nullable<Single>>)
- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min(IEnumerable<Single>)
  nameWithType: Enumerable.Min(IEnumerable<Single>)
  fullName: Enumerable.Min(IEnumerable<Single>)
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
  fullName: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
- uid: System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)
  nameWithType: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)
  fullName: Enumerable.Min<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  isExternal: false
  name: OfType<TResult>(IEnumerable)
  nameWithType: Enumerable.OfType<TResult>(IEnumerable)
  fullName: Enumerable.OfType<TResult>(IEnumerable)
- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)
  nameWithType: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)
  fullName: Enumerable.OrderBy<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)
- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)
  nameWithType: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)
  fullName: Enumerable.OrderByDescending<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IComparer<TKey>)
- uid: System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  parent: System.Linq.Enumerable
  isExternal: false
  name: Prepend<TSource>(IEnumerable<TSource>, TSource)
  nameWithType: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)
  fullName: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)
- uid: System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Reverse<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.Reverse<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.Reverse<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)
  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)
  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,TResult>)
- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)
  nameWithType: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)
  fullName: Enumerable.Select<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,TResult>)
- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)
  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)
  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TResult>>)
- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)
  nameWithType: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)
  fullName: Enumerable.SelectMany<TSource,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TResult>>)
- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  parent: System.Linq.Enumerable
  isExternal: false
  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)
  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)
  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)
- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  parent: System.Linq.Enumerable
  isExternal: false
  name: SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)
  nameWithType: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)
  fullName: Enumerable.SelectMany<TSource,TCollection,TResult>(IEnumerable<TSource>, Func<TSource,Int32,IEnumerable<TCollection>>, Func<TSource,TCollection,TResult>)
- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Single<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: SingleOrDefault<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: System.Linq.Enumerable
  isExternal: false
  name: Skip<TSource>(IEnumerable<TSource>, Int32)
  nameWithType: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)
  fullName: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)
- uid: System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: System.Linq.Enumerable
  isExternal: false
  name: SkipLast<TSource>(IEnumerable<TSource>, Int32)
  nameWithType: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)
  fullName: Enumerable.SkipLast<TSource>(IEnumerable<TSource>, Int32)
- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)
  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)
  fullName: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum(IEnumerable<Decimal>)
  nameWithType: Enumerable.Sum(IEnumerable<Decimal>)
  fullName: Enumerable.Sum(IEnumerable<Decimal>)
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum(IEnumerable<Double>)
  nameWithType: Enumerable.Sum(IEnumerable<Double>)
  fullName: Enumerable.Sum(IEnumerable<Double>)
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum(IEnumerable<Int32>)
  nameWithType: Enumerable.Sum(IEnumerable<Int32>)
  fullName: Enumerable.Sum(IEnumerable<Int32>)
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum(IEnumerable<Int64>)
  nameWithType: Enumerable.Sum(IEnumerable<Int64>)
  fullName: Enumerable.Sum(IEnumerable<Int64>)
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum(IEnumerable<Nullable<Decimal>>)
  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)
  fullName: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum(IEnumerable<Nullable<Double>>)
  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Double>>)
  fullName: Enumerable.Sum(IEnumerable<Nullable<Double>>)
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum(IEnumerable<Nullable<Int32>>)
  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int32>>)
  fullName: Enumerable.Sum(IEnumerable<Nullable<Int32>>)
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum(IEnumerable<Nullable<Int64>>)
  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int64>>)
  fullName: Enumerable.Sum(IEnumerable<Nullable<Int64>>)
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum(IEnumerable<Nullable<Single>>)
  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Single>>)
  fullName: Enumerable.Sum(IEnumerable<Nullable<Single>>)
- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum(IEnumerable<Single>)
  nameWithType: Enumerable.Sum(IEnumerable<Single>)
  fullName: Enumerable.Sum(IEnumerable<Single>)
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Decimal>)
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Double>)
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int32>)
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Int64>)
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Decimal>>)
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Double>>)
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int32>>)
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Int64>>)
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Nullable<Single>>)
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
  fullName: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource,Single>)
- uid: System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: System.Linq.Enumerable
  isExternal: false
  name: Take<TSource>(IEnumerable<TSource>, Int32)
  nameWithType: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)
  fullName: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)
- uid: System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: System.Linq.Enumerable
  isExternal: false
  name: TakeLast<TSource>(IEnumerable<TSource>, Int32)
  nameWithType: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)
  fullName: Enumerable.TakeLast<TSource>(IEnumerable<TSource>, Int32)
- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)
  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)
  fullName: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)
- uid: System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToArray<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.ToArray<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.ToArray<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
  nameWithType: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
  fullName: Enumerable.ToDictionary<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)
  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)
  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)
- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)
  nameWithType: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)
  fullName: Enumerable.ToDictionary<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)
- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToHashSet<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: Enumerable.ToHashSet<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)
- uid: System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToList<TSource>(IEnumerable<TSource>)
  nameWithType: Enumerable.ToList<TSource>(IEnumerable<TSource>)
  fullName: Enumerable.ToList<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>)
- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
  nameWithType: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
  fullName: Enumerable.ToLookup<TSource,TKey>(IEnumerable<TSource>, Func<TSource,TKey>, IEqualityComparer<TKey>)
- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)
  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)
  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>)
- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Enumerable
  isExternal: false
  name: ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)
  nameWithType: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)
  fullName: Enumerable.ToLookup<TSource,TKey,TElement>(IEnumerable<TSource>, Func<TSource,TKey>, Func<TSource,TElement>, IEqualityComparer<TKey>)
- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>)
- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)
  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)
  fullName: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource,Int32,Boolean>)
- uid: System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  parent: System.Linq.Enumerable
  isExternal: false
  name: Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)
  nameWithType: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)
  fullName: Enumerable.Zip<TFirst,TSecond,TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst,TSecond,TResult>)
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  parent: System.Linq.ParallelEnumerable
  isExternal: false
  name: AsParallel(IEnumerable)
  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)
  fullName: ParallelEnumerable.AsParallel(IEnumerable)
- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.ParallelEnumerable
  isExternal: false
  name: AsParallel<TSource>(IEnumerable<TSource>)
  nameWithType: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)
  fullName: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  parent: System.Linq.Queryable
  isExternal: false
  name: AsQueryable(IEnumerable)
  nameWithType: Queryable.AsQueryable(IEnumerable)
  fullName: Queryable.AsQueryable(IEnumerable)
- uid: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: AsQueryable<TElement>(IEnumerable<TElement>)
  nameWithType: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)
  fullName: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)
- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: Ancestors<T>(IEnumerable<T>)
  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>)
  fullName: Extensions.Ancestors<T>(IEnumerable<T>)
- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: Ancestors<T>(IEnumerable<T>, XName)
  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>, XName)
  fullName: Extensions.Ancestors<T>(IEnumerable<T>, XName)
- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: AncestorsAndSelf(IEnumerable<XElement>)
  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>)
  fullName: Extensions.AncestorsAndSelf(IEnumerable<XElement>)
- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: AncestorsAndSelf(IEnumerable<XElement>, XName)
  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>, XName)
  fullName: Extensions.AncestorsAndSelf(IEnumerable<XElement>, XName)
- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: Attributes(IEnumerable<XElement>)
  nameWithType: Extensions.Attributes(IEnumerable<XElement>)
  fullName: Extensions.Attributes(IEnumerable<XElement>)
- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: Attributes(IEnumerable<XElement>, XName)
  nameWithType: Extensions.Attributes(IEnumerable<XElement>, XName)
  fullName: Extensions.Attributes(IEnumerable<XElement>, XName)
- uid: System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: DescendantNodes<T>(IEnumerable<T>)
  nameWithType: Extensions.DescendantNodes<T>(IEnumerable<T>)
  fullName: Extensions.DescendantNodes<T>(IEnumerable<T>)
- uid: System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: DescendantNodesAndSelf(IEnumerable<XElement>)
  nameWithType: Extensions.DescendantNodesAndSelf(IEnumerable<XElement>)
  fullName: Extensions.DescendantNodesAndSelf(IEnumerable<XElement>)
- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: Descendants<T>(IEnumerable<T>)
  nameWithType: Extensions.Descendants<T>(IEnumerable<T>)
  fullName: Extensions.Descendants<T>(IEnumerable<T>)
- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: Descendants<T>(IEnumerable<T>, XName)
  nameWithType: Extensions.Descendants<T>(IEnumerable<T>, XName)
  fullName: Extensions.Descendants<T>(IEnumerable<T>, XName)
- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: DescendantsAndSelf(IEnumerable<XElement>)
  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>)
  fullName: Extensions.DescendantsAndSelf(IEnumerable<XElement>)
- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: DescendantsAndSelf(IEnumerable<XElement>, XName)
  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>, XName)
  fullName: Extensions.DescendantsAndSelf(IEnumerable<XElement>, XName)
- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: Elements<T>(IEnumerable<T>)
  nameWithType: Extensions.Elements<T>(IEnumerable<T>)
  fullName: Extensions.Elements<T>(IEnumerable<T>)
- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: Elements<T>(IEnumerable<T>, XName)
  nameWithType: Extensions.Elements<T>(IEnumerable<T>, XName)
  fullName: Extensions.Elements<T>(IEnumerable<T>, XName)
- uid: System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: InDocumentOrder<T>(IEnumerable<T>)
  nameWithType: Extensions.InDocumentOrder<T>(IEnumerable<T>)
  fullName: Extensions.InDocumentOrder<T>(IEnumerable<T>)
- uid: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: Nodes<T>(IEnumerable<T>)
  nameWithType: Extensions.Nodes<T>(IEnumerable<T>)
  fullName: Extensions.Nodes<T>(IEnumerable<T>)
- uid: System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: Remove(IEnumerable<XAttribute>)
  nameWithType: Extensions.Remove(IEnumerable<XAttribute>)
  fullName: Extensions.Remove(IEnumerable<XAttribute>)
- uid: System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Xml.Linq.Extensions
  isExternal: false
  name: Remove<T>(IEnumerable<T>)
  nameWithType: Extensions.Remove<T>(IEnumerable<T>)
  fullName: Extensions.Remove<T>(IEnumerable<T>)
- uid: System.Collections.Generic.ICollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: false
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
- uid: System.Collections.Generic.IReadOnlyList`1
  parent: System.Collections.Generic
  isExternal: false
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
