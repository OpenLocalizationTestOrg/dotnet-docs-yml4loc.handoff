{"nodes":[{"content":"Represents the method that executes on a <xref href=\"System.Threading.Thread\"></xref>.","nodes":[{"pos":[0,86],"content":"Represents the method that executes on a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Thread\"&gt;&lt;/xref&gt;</ph>.","source":"Represents the method that executes on a <xref href=\"System.Threading.Thread\"></xref>."}],"pos":[450,537],"yaml":true},{"content":"When a managed thread is created, the method that executes on the thread is represented by:  \n  \n-   A <xref:System.Threading.ThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName> constructor.  Any method that has no parameters and that returns `void` in C# or is a `Sub` procedure in Visual Basic can represent the delegate.  \n  \n-   A <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName> constructor. Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.  \n  \n The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method is called. The <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate. In the case of the <xref:System.Threading.ParameterizedThreadStart> delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate.  \n  \n> [!NOTE]\n>  Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread. In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`. In C#, simply specify the name of the thread procedure. The compiler selects the correct delegate constructor.  \n  \n> [!NOTE]\n>  When you create a <xref:System.Threading.ParameterizedThreadStart> delegate for an instance method in C++, the first parameter of the constructor is the instance variable. For a static method, the first parameter of the constructor is zero. For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.  \n  \n The <xref:System.Threading.ParameterizedThreadStart> delegate and the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>. A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object. For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).  \n  \n The <xref:System.Threading.ParameterizedThreadStart> delegate supports only a single parameter. You can pass multiple data items to the <xref:System.Threading.ParameterizedThreadStart> by making that parameter one of the following:  \n  \n-   An array.  \n  \n-   A collection type, if all of the data items are of the same type.  \n  \n-   A tuple type, such as <xref:System.Tuple%602> or <xref:System.Tuple%604>.","nodes":[{"pos":[0,91],"content":"When a managed thread is created, the method that executes on the thread is represented by:","nodes":[{"content":"When a managed thread is created, the method that executes on the thread is represented by:","pos":[0,91]}]},{"pos":[101,413],"content":"A <xref:System.Threading.ThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName> constructor.  Any method that has no parameters and that returns `void` in C# or is a `Sub` procedure in Visual Basic can represent the delegate.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Threading.ThreadStart&gt;</ph> delegate that is passed to the <ph id=\"ph2\">&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName&gt;</ph> constructor.","pos":[0,179],"source":"A <xref:System.Threading.ThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName> constructor."},{"content":"Any method that has no parameters and that returns <ph id=\"ph1\">`void`</ph> in C# or is a <ph id=\"ph2\">`Sub`</ph> procedure in Visual Basic can represent the delegate.","pos":[181,312],"source":"  Any method that has no parameters and that returns `void` in C# or is a `Sub` procedure in Visual Basic can represent the delegate."}]},{"pos":[423,805],"content":"A <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName> constructor. Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.","nodes":[{"content":"A <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName> constructor. Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.","pos":[0,382],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate that is passed to the <ph id=\"ph2\">&lt;xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName&gt;</ph> constructor.","pos":[0,220],"source":"A <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName> constructor."},{"content":"Any method that has a single parameter of type <ph id=\"ph1\">&lt;xref:System.Object&gt;</ph> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.","pos":[221,382],"source":" Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate."}]}]},{"pos":[812,1350],"content":"The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method is called. The <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate. In the case of the <xref:System.Threading.ParameterizedThreadStart> delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate.","nodes":[{"content":"The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method is called. The <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate. In the case of the <xref:System.Threading.ParameterizedThreadStart> delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate.","pos":[0,538],"nodes":[{"content":"The thread does not begin executing until the <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt;</ph> method is called.","pos":[0,128],"source":"The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method is called."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.ThreadStart&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate.","pos":[129,337],"source":" The <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate."},{"content":"In the case of the <ph id=\"ph1\">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate, the object that is passed to the <ph id=\"ph2\">&lt;xref:System.Threading.Thread.Start%28System.Object%29&gt;</ph> method is passed to the delegate.","pos":[338,538],"source":" In the case of the <xref:System.Threading.ParameterizedThreadStart> delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate."}]}]},{"pos":[1358,1842],"content":"[!NOTE]\n Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread. In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`. In C#, simply specify the name of the thread procedure. The compiler selects the correct delegate constructor.","leadings":["","> "],"nodes":[{"content":" Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread. In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`. In C#, simply specify the name of the thread procedure. The compiler selects the correct delegate constructor.","pos":[8,482],"nodes":[{"content":"Visual Basic and C# users can omit the <ph id=\"ph1\">&lt;xref:System.Threading.ThreadStart&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate constructor when creating a thread.","pos":[1,172],"source":" Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread."},{"content":"In Visual Basic, use the <ph id=\"ph1\">`AddressOf`</ph> operator when passing your method to the <ph id=\"ph2\">&lt;xref:System.Threading.Thread.%23ctor%2A&gt;</ph> constructor; for example, <ph id=\"ph3\">`Dim t As New Thread(AddressOf ThreadProc)`</ph>.","pos":[173,363],"source":" In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`."},{"content":"In C#, simply specify the name of the thread procedure.","pos":[364,419]},{"content":"The compiler selects the correct delegate constructor.","pos":[420,474]}]}]},{"pos":[1850,2241],"content":"[!NOTE]\n When you create a <xref:System.Threading.ParameterizedThreadStart> delegate for an instance method in C++, the first parameter of the constructor is the instance variable. For a static method, the first parameter of the constructor is zero. For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.","leadings":["","> "],"nodes":[{"content":" When you create a <xref:System.Threading.ParameterizedThreadStart> delegate for an instance method in C++, the first parameter of the constructor is the instance variable. For a static method, the first parameter of the constructor is zero. For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.","pos":[8,389],"nodes":[{"content":"When you create a <ph id=\"ph1\">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate for an instance method in C++, the first parameter of the constructor is the instance variable.","pos":[1,172],"source":" When you create a <xref:System.Threading.ParameterizedThreadStart> delegate for an instance method in C++, the first parameter of the constructor is the instance variable."},{"content":"For a static method, the first parameter of the constructor is zero.","pos":[173,241]},{"content":"For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.","pos":[242,381]}]}]},{"pos":[2248,2903],"content":"The <xref:System.Threading.ParameterizedThreadStart> delegate and the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>. A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object. For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate and the <ph id=\"ph2\">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName&gt;</ph> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <ph id=\"ph3\">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName&gt;</ph>.","pos":[0,369],"source":"The <xref:System.Threading.ParameterizedThreadStart> delegate and the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>."},{"content":"A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.","pos":[370,500]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Creating Threads and Passing Data at Start Time<ept id=\"p1\">](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md)</ept>.","pos":[501,655],"source":" For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md)."}]},{"pos":[2910,3141],"content":"The <xref:System.Threading.ParameterizedThreadStart> delegate supports only a single parameter. You can pass multiple data items to the <xref:System.Threading.ParameterizedThreadStart> by making that parameter one of the following:","nodes":[{"content":"The <xref:System.Threading.ParameterizedThreadStart> delegate supports only a single parameter. You can pass multiple data items to the <xref:System.Threading.ParameterizedThreadStart> by making that parameter one of the following:","pos":[0,231],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> delegate supports only a single parameter.","pos":[0,95],"source":"The <xref:System.Threading.ParameterizedThreadStart> delegate supports only a single parameter."},{"content":"You can pass multiple data items to the <ph id=\"ph1\">&lt;xref:System.Threading.ParameterizedThreadStart&gt;</ph> by making that parameter one of the following:","pos":[96,231],"source":" You can pass multiple data items to the <xref:System.Threading.ParameterizedThreadStart> by making that parameter one of the following:"}]}]},{"pos":[3151,3160],"content":"An array.","nodes":[{"content":"An array.","pos":[0,9]}]},{"pos":[3170,3235],"content":"A collection type, if all of the data items are of the same type.","nodes":[{"content":"A collection type, if all of the data items are of the same type.","pos":[0,65]}]},{"pos":[3245,3318],"content":"A tuple type, such as <xref:System.Tuple%602> or <xref:System.Tuple%604>.","nodes":[{"content":"A tuple type, such as <ph id=\"ph1\">&lt;xref:System.Tuple%602&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Tuple%604&gt;</ph>.","pos":[0,73],"source":"A tuple type, such as <xref:System.Tuple%602> or <xref:System.Tuple%604>."}]}],"pos":[548,3891],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.ParameterizedThreadStart\n  commentId: T:System.Threading.ParameterizedThreadStart\n  id: ParameterizedThreadStart\n  langs:\n  - csharp\n  name: ParameterizedThreadStart\n  nameWithType: ParameterizedThreadStart\n  fullName: System.Threading.ParameterizedThreadStart\n  type: Delegate\n  assemblies:\n  - System.Threading.Thread\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Represents the method that executes on a <xref href=\"System.Threading.Thread\"></xref>.\n  remarks: \"When a managed thread is created, the method that executes on the thread is represented by:  \\n  \\n-   A <xref:System.Threading.ThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName> constructor.  Any method that has no parameters and that returns `void` in C# or is a `Sub` procedure in Visual Basic can represent the delegate.  \\n  \\n-   A <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName> constructor. Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.  \\n  \\n The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method is called. The <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate. In the case of the <xref:System.Threading.ParameterizedThreadStart> delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate.  \\n  \\n> [!NOTE]\\n>  Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread. In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`. In C#, simply specify the name of the thread procedure. The compiler selects the correct delegate constructor.  \\n  \\n> [!NOTE]\\n>  When you create a <xref:System.Threading.ParameterizedThreadStart> delegate for an instance method in C++, the first parameter of the constructor is the instance variable. For a static method, the first parameter of the constructor is zero. For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.  \\n  \\n The <xref:System.Threading.ParameterizedThreadStart> delegate and the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>. A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object. For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).  \\n  \\n The <xref:System.Threading.ParameterizedThreadStart> delegate supports only a single parameter. You can pass multiple data items to the <xref:System.Threading.ParameterizedThreadStart> by making that parameter one of the following:  \\n  \\n-   An array.  \\n  \\n-   A collection type, if all of the data items are of the same type.  \\n  \\n-   A tuple type, such as <xref:System.Tuple%602> or <xref:System.Tuple%604>.\"\n  example:\n  - \"The following code example uses a <xref:System.Threading.ParameterizedThreadStart> delegate with to execute a static method and an instance method. The first <xref:System.Threading.ParameterizedThreadStart> delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method. Both methods match the <xref:System.Threading.ParameterizedThreadStart> delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.  \\n  \\n> [!NOTE]\\n>  The Visual Basic and C# compilers infer the <xref:System.Threading.ParameterizedThreadStart> delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor. Thus, there is no explicit constructor call in the code.  \\n  \\n [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]\\n [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]\\n [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public delegate void ParameterizedThreadStart(object obj);\n  inheritance:\n  - System.Object\n  - System.Delegate\n  extensionMethods:\n  - System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ParameterizedThreadStart.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  parent: System.Reflection.RuntimeReflectionExtensions\n  isExternal: false\n  name: GetMethodInfo(Delegate)\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n  fullName: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n"}