{"nodes":[{"content":"Provides a mechanism for executing a method on a thread pool thread at specified intervals. This class cannot be inherited.","nodes":[{"pos":[0,123],"content":"Provides a mechanism for executing a method on a thread pool thread at specified intervals. This class cannot be inherited.","nodes":[{"content":"Provides a mechanism for executing a method on a thread pool thread at specified intervals. This class cannot be inherited.","pos":[0,123],"nodes":[{"content":"Provides a mechanism for executing a method on a thread pool thread at specified intervals.","pos":[0,91]},{"content":"This class cannot be inherited.","pos":[92,123]}]}]}],"pos":[1188,1312],"yaml":true},{"content":"> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/threading/timer.cs#051a39d380760b26). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n Use a <xref:System.Threading.TimerCallback> delegate to specify the method you want the <xref:System.Threading.Timer> to execute. The signature of the <xref:System.Threading.TimerCallback> delegate is:  \n  \n```csharp  \nvoid TimerCallback(Object state)  \n```  \n  \n```cpp  \nvoid TimerCallback(Object state)  \n```  \n  \n```vb  \nSub TimerCallback(state As Object)  \n```  \n  \n The timer delegate is specified when the timer is constructed, and cannot be changed. The method does not execute on the thread that created the timer; it executes on a <xref:System.Threading.ThreadPool> thread supplied by the system.  \n  \n> [!TIP]\n>  The .NET Framework Class Library includes four classes named `Timer`, each of which offers different functionality:  \n>   \n>  -   <xref:System.Timers.Timer?displayProperty=fullName>, which fires an event and executes the code in one or more event sinks at regular intervals. The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.  \n> -   <xref:System.Threading.Timer?displayProperty=fullName>, which executes a single callback method on a thread pool thread at regular intervals. The callback method is defined when the timer is instantiated and cannot be changed. Like the <xref:System.Timers.Timer?displayProperty=fullName> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.  \n> -   <xref:System.Windows.Forms.Timer?displayProperty=fullName>, a Windows Forms component that fires an event and executes the code in one or more event sinks at regular intervals. The component has no user interface and is designed for use in a single-threaded environment; it executes on the UI thread.  \n> -   <xref:System.Web.UI.Timer?displayProperty=fullName>, an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.  \n  \n When you create a timer, you can specify an amount of time to wait before the first execution of the method (due time), and an amount of time to wait between subsequent executions (period). The <xref:System.Threading.Timer> class has the same resolution as the system clock. This means that if the period is less than the resolution of the system clock, the <xref:System.Threading.TimerCallback> delegate will execute at intervals defined by the resolution of the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems. You can change the due time and period, or disable the timer, by using the <xref:System.Threading.Timer.Change%2A> method.  \n  \n> [!NOTE]\n>  As long as you are using a <xref:System.Threading.Timer>, you must keep a reference to it. As with any managed object, a <xref:System.Threading.Timer> is subject to garbage collection when there are no references to it. The fact that a <xref:System.Threading.Timer> is still active does not prevent it from being collected.  \n  \n When a timer is no longer needed, use the <xref:System.Threading.Timer.Dispose%2A> method to free the resources held by the timer. Note that callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads. You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.  \n  \n The callback method executed by the timer should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads. The callback can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the callback, or if all thread pool threads are in use and the callback is queued multiple times.  \n  \n> [!NOTE]\n>  <xref:System.Threading.Timer?displayProperty=fullName> is a simple, lightweight timer that uses callback methods and is served by thread pool threads. It is not recommended for use with Windows Forms, because its callbacks do not occur on the user interface thread. <xref:System.Windows.Forms.Timer?displayProperty=fullName> is a better choice for use with Windows Forms. For server-based timer functionality, you might consider using <xref:System.Timers.Timer?displayProperty=fullName>, which raises events and has additional features.","nodes":[{"pos":[2,414],"content":"[!NOTE]\n To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/threading/timer.cs#051a39d380760b26). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","leadings":["","> "],"nodes":[{"content":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/threading/timer.cs#051a39d380760b26). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","pos":[8,410],"nodes":[{"content":"To view the .NET Framework source code for this type, see the <bpt id=\"p1\">[</bpt>Reference Source<ept id=\"p1\">](http://referencesource.microsoft.com/#mscorlib/system/threading/timer.cs#051a39d380760b26)</ept>.","pos":[1,173],"source":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/threading/timer.cs#051a39d380760b26)."},{"content":"You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id=\"p1\">[</bpt>instructions<ept id=\"p1\">](http://referencesource.microsoft.com/)</ept>.","pos":[174,402],"source":" You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/)."}]}]},{"pos":[421,622],"content":"Use a <xref:System.Threading.TimerCallback> delegate to specify the method you want the <xref:System.Threading.Timer> to execute. The signature of the <xref:System.Threading.TimerCallback> delegate is:","nodes":[{"content":"Use a <xref:System.Threading.TimerCallback> delegate to specify the method you want the <xref:System.Threading.Timer> to execute. The signature of the <xref:System.Threading.TimerCallback> delegate is:","pos":[0,201],"nodes":[{"content":"Use a <ph id=\"ph1\">&lt;xref:System.Threading.TimerCallback&gt;</ph> delegate to specify the method you want the <ph id=\"ph2\">&lt;xref:System.Threading.Timer&gt;</ph> to execute.","pos":[0,129],"source":"Use a <xref:System.Threading.TimerCallback> delegate to specify the method you want the <xref:System.Threading.Timer> to execute."},{"content":"The signature of the <ph id=\"ph1\">&lt;xref:System.Threading.TimerCallback&gt;</ph> delegate is:","pos":[130,201],"source":" The signature of the <xref:System.Threading.TimerCallback> delegate is:"}]}]},{"pos":[792,1026],"content":"The timer delegate is specified when the timer is constructed, and cannot be changed. The method does not execute on the thread that created the timer; it executes on a <xref:System.Threading.ThreadPool> thread supplied by the system.","nodes":[{"content":"The timer delegate is specified when the timer is constructed, and cannot be changed. The method does not execute on the thread that created the timer; it executes on a <xref:System.Threading.ThreadPool> thread supplied by the system.","pos":[0,234],"nodes":[{"content":"The timer delegate is specified when the timer is constructed, and cannot be changed.","pos":[0,85]},{"content":"The method does not execute on the thread that created the timer; it executes on a <ph id=\"ph1\">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread supplied by the system.","pos":[86,234],"source":" The method does not execute on the thread that created the timer; it executes on a <xref:System.Threading.ThreadPool> thread supplied by the system."}]}]},{"pos":[1034,1159],"content":"[!TIP]\n The .NET Framework Class Library includes four classes named `Timer`, each of which offers different functionality:","leadings":["","> "],"nodes":[{"content":"The .NET Framework Class Library includes four classes named <ph id=\"ph1\">`Timer`</ph>, each of which offers different functionality:","pos":[8,123],"source":" The .NET Framework Class Library includes four classes named `Timer`, each of which offers different functionality:"}]},{"pos":[1174,1475],"content":"<xref:System.Timers.Timer?displayProperty=fullName>, which fires an event and executes the code in one or more event sinks at regular intervals. The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.","nodes":[{"content":"<xref:System.Timers.Timer?displayProperty=fullName>, which fires an event and executes the code in one or more event sinks at regular intervals. The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.","pos":[0,301],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Timers.Timer?displayProperty=fullName&gt;</ph>, which fires an event and executes the code in one or more event sinks at regular intervals.","pos":[0,144],"source":"<xref:System.Timers.Timer?displayProperty=fullName>, which fires an event and executes the code in one or more event sinks at regular intervals."},{"content":"The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.","pos":[145,301]}]}]},{"pos":[1484,1936],"content":"<xref:System.Threading.Timer?displayProperty=fullName>, which executes a single callback method on a thread pool thread at regular intervals. The callback method is defined when the timer is instantiated and cannot be changed. Like the <xref:System.Timers.Timer?displayProperty=fullName> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.","nodes":[{"content":"<xref:System.Threading.Timer?displayProperty=fullName>, which executes a single callback method on a thread pool thread at regular intervals. The callback method is defined when the timer is instantiated and cannot be changed. Like the <xref:System.Timers.Timer?displayProperty=fullName> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.","pos":[0,452],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Timer?displayProperty=fullName&gt;</ph>, which executes a single callback method on a thread pool thread at regular intervals.","pos":[0,141],"source":"<xref:System.Threading.Timer?displayProperty=fullName>, which executes a single callback method on a thread pool thread at regular intervals."},{"content":"The callback method is defined when the timer is instantiated and cannot be changed.","pos":[142,226]},{"content":"Like the <ph id=\"ph1\">&lt;xref:System.Timers.Timer?displayProperty=fullName&gt;</ph> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.","pos":[227,452],"source":" Like the <xref:System.Timers.Timer?displayProperty=fullName> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime."}]}]},{"pos":[1945,2245],"content":"<xref:System.Windows.Forms.Timer?displayProperty=fullName>, a Windows Forms component that fires an event and executes the code in one or more event sinks at regular intervals. The component has no user interface and is designed for use in a single-threaded environment; it executes on the UI thread.","nodes":[{"content":"<xref:System.Windows.Forms.Timer?displayProperty=fullName>, a Windows Forms component that fires an event and executes the code in one or more event sinks at regular intervals. The component has no user interface and is designed for use in a single-threaded environment; it executes on the UI thread.","pos":[0,300],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer?displayProperty=fullName&gt;</ph>, a Windows Forms component that fires an event and executes the code in one or more event sinks at regular intervals.","pos":[0,176],"source":"<xref:System.Windows.Forms.Timer?displayProperty=fullName>, a Windows Forms component that fires an event and executes the code in one or more event sinks at regular intervals."},{"content":"The component has no user interface and is designed for use in a single-threaded environment; it executes on the UI thread.","pos":[177,300]}]}]},{"pos":[2254,2411],"content":"<xref:System.Web.UI.Timer?displayProperty=fullName>, an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Web.UI.Timer?displayProperty=fullName&gt;</ph>, an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.","pos":[0,157],"source":"<xref:System.Web.UI.Timer?displayProperty=fullName>, an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval."}]},{"pos":[2418,3093],"content":"When you create a timer, you can specify an amount of time to wait before the first execution of the method (due time), and an amount of time to wait between subsequent executions (period). The <xref:System.Threading.Timer> class has the same resolution as the system clock. This means that if the period is less than the resolution of the system clock, the <xref:System.Threading.TimerCallback> delegate will execute at intervals defined by the resolution of the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems. You can change the due time and period, or disable the timer, by using the <xref:System.Threading.Timer.Change%2A> method.","nodes":[{"content":"When you create a timer, you can specify an amount of time to wait before the first execution of the method (due time), and an amount of time to wait between subsequent executions (period). The <xref:System.Threading.Timer> class has the same resolution as the system clock. This means that if the period is less than the resolution of the system clock, the <xref:System.Threading.TimerCallback> delegate will execute at intervals defined by the resolution of the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems. You can change the due time and period, or disable the timer, by using the <xref:System.Threading.Timer.Change%2A> method.","pos":[0,675],"nodes":[{"content":"When you create a timer, you can specify an amount of time to wait before the first execution of the method (due time), and an amount of time to wait between subsequent executions (period).","pos":[0,189]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Timer&gt;</ph> class has the same resolution as the system clock.","pos":[190,274],"source":" The <xref:System.Threading.Timer> class has the same resolution as the system clock."},{"content":"This means that if the period is less than the resolution of the system clock, the <ph id=\"ph1\">&lt;xref:System.Threading.TimerCallback&gt;</ph> delegate will execute at intervals defined by the resolution of the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems.","pos":[275,552],"source":" This means that if the period is less than the resolution of the system clock, the <xref:System.Threading.TimerCallback> delegate will execute at intervals defined by the resolution of the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems."},{"content":"You can change the due time and period, or disable the timer, by using the <ph id=\"ph1\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method.","pos":[553,675],"source":" You can change the due time and period, or disable the timer, by using the <xref:System.Threading.Timer.Change%2A> method."}]}]},{"pos":[3101,3435],"content":"[!NOTE]\n As long as you are using a <xref:System.Threading.Timer>, you must keep a reference to it. As with any managed object, a <xref:System.Threading.Timer> is subject to garbage collection when there are no references to it. The fact that a <xref:System.Threading.Timer> is still active does not prevent it from being collected.","leadings":["","> "],"nodes":[{"content":" As long as you are using a <xref:System.Threading.Timer>, you must keep a reference to it. As with any managed object, a <xref:System.Threading.Timer> is subject to garbage collection when there are no references to it. The fact that a <xref:System.Threading.Timer> is still active does not prevent it from being collected.","pos":[8,332],"nodes":[{"content":"As long as you are using a <ph id=\"ph1\">&lt;xref:System.Threading.Timer&gt;</ph>, you must keep a reference to it.","pos":[1,91],"source":" As long as you are using a <xref:System.Threading.Timer>, you must keep a reference to it."},{"content":"As with any managed object, a <ph id=\"ph1\">&lt;xref:System.Threading.Timer&gt;</ph> is subject to garbage collection when there are no references to it.","pos":[92,220],"source":" As with any managed object, a <xref:System.Threading.Timer> is subject to garbage collection when there are no references to it."},{"content":"The fact that a <ph id=\"ph1\">&lt;xref:System.Threading.Timer&gt;</ph> is still active does not prevent it from being collected.","pos":[221,324],"source":" The fact that a <xref:System.Threading.Timer> is still active does not prevent it from being collected."}]}]},{"pos":[3442,3903],"content":"When a timer is no longer needed, use the <xref:System.Threading.Timer.Dispose%2A> method to free the resources held by the timer. Note that callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads. You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.","nodes":[{"content":"When a timer is no longer needed, use the <xref:System.Threading.Timer.Dispose%2A> method to free the resources held by the timer. Note that callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads. You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.","pos":[0,461],"nodes":[{"content":"When a timer is no longer needed, use the <ph id=\"ph1\">&lt;xref:System.Threading.Timer.Dispose%2A&gt;</ph> method to free the resources held by the timer.","pos":[0,130],"source":"When a timer is no longer needed, use the <xref:System.Threading.Timer.Dispose%2A> method to free the resources held by the timer."},{"content":"Note that callbacks can occur after the <ph id=\"ph1\">&lt;xref:System.Threading.Timer.Dispose&gt;</ph> method overload has been called, because the timer queues callbacks for execution by thread pool threads.","pos":[131,314],"source":" Note that callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads."},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29&gt;</ph> method overload to wait until all callbacks have completed.","pos":[315,461],"source":" You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed."}]}]},{"pos":[3910,4273],"content":"The callback method executed by the timer should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads. The callback can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the callback, or if all thread pool threads are in use and the callback is queued multiple times.","nodes":[{"content":"The callback method executed by the timer should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads. The callback can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the callback, or if all thread pool threads are in use and the callback is queued multiple times.","pos":[0,363],"nodes":[{"content":"The callback method executed by the timer should be reentrant, because it is called on <ph id=\"ph1\">&lt;xref:System.Threading.ThreadPool&gt;</ph> threads.","pos":[0,130],"source":"The callback method executed by the timer should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads."},{"content":"The callback can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the callback, or if all thread pool threads are in use and the callback is queued multiple times.","pos":[131,363]}]}]},{"pos":[4281,4828],"content":"[!NOTE]\n <xref:System.Threading.Timer?displayProperty=fullName> is a simple, lightweight timer that uses callback methods and is served by thread pool threads. It is not recommended for use with Windows Forms, because its callbacks do not occur on the user interface thread. <xref:System.Windows.Forms.Timer?displayProperty=fullName> is a better choice for use with Windows Forms. For server-based timer functionality, you might consider using <xref:System.Timers.Timer?displayProperty=fullName>, which raises events and has additional features.","leadings":["","> "],"nodes":[{"content":" <xref:System.Threading.Timer?displayProperty=fullName> is a simple, lightweight timer that uses callback methods and is served by thread pool threads. It is not recommended for use with Windows Forms, because its callbacks do not occur on the user interface thread. <xref:System.Windows.Forms.Timer?displayProperty=fullName> is a better choice for use with Windows Forms. For server-based timer functionality, you might consider using <xref:System.Timers.Timer?displayProperty=fullName>, which raises events and has additional features.","pos":[8,545],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Timer?displayProperty=fullName&gt;</ph> is a simple, lightweight timer that uses callback methods and is served by thread pool threads.","pos":[1,151],"source":" <xref:System.Threading.Timer?displayProperty=fullName> is a simple, lightweight timer that uses callback methods and is served by thread pool threads."},{"content":"It is not recommended for use with Windows Forms, because its callbacks do not occur on the user interface thread.","pos":[152,266]},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Forms.Timer?displayProperty=fullName&gt;</ph> is a better choice for use with Windows Forms.","pos":[267,372],"source":" <xref:System.Windows.Forms.Timer?displayProperty=fullName> is a better choice for use with Windows Forms."},{"content":"For server-based timer functionality, you might consider using <ph id=\"ph1\">&lt;xref:System.Timers.Timer?displayProperty=fullName&gt;</ph>, which raises events and has additional features.","pos":[373,537],"source":" For server-based timer functionality, you might consider using <xref:System.Timers.Timer?displayProperty=fullName>, which raises events and has additional features."}]}]}],"pos":[1323,6191],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Threading.Timer\"></xref> class with an infinite period and an infinite due time, using the newly created <xref href=\"System.Threading.Timer\"></xref> object as the state object.","nodes":[{"pos":[0,229],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timer\"&gt;&lt;/xref&gt;</ph> class with an infinite period and an infinite due time, using the newly created <ph id=\"ph2\">&lt;xref href=\"System.Threading.Timer\"&gt;&lt;/xref&gt;</ph> object as the state object.","source":"Initializes a new instance of the <xref href=\"System.Threading.Timer\"></xref> class with an infinite period and an infinite due time, using the newly created <xref href=\"System.Threading.Timer\"></xref> object as the state object."}],"pos":[10139,10369],"yaml":true},{"content":"Call this constructor when you want to use the <xref:System.Threading.Timer> object itself as the state object. After creating the timer, use the <xref:System.Threading.Timer.Change%2A> method to set the interval and due time.  \n  \n This constructor specifies an infinite due time before the first callback and an infinite interval between callbacks, in order to prevent the first callback from occurring before the <xref:System.Threading.Timer> object is assigned to the state object.  \n  \n The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads. The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.","nodes":[{"pos":[0,226],"content":"Call this constructor when you want to use the <xref:System.Threading.Timer> object itself as the state object. After creating the timer, use the <xref:System.Threading.Timer.Change%2A> method to set the interval and due time.","nodes":[{"content":"Call this constructor when you want to use the <xref:System.Threading.Timer> object itself as the state object. After creating the timer, use the <xref:System.Threading.Timer.Change%2A> method to set the interval and due time.","pos":[0,226],"nodes":[{"content":"Call this constructor when you want to use the <ph id=\"ph1\">&lt;xref:System.Threading.Timer&gt;</ph> object itself as the state object.","pos":[0,111],"source":"Call this constructor when you want to use the <xref:System.Threading.Timer> object itself as the state object."},{"content":"After creating the timer, use the <ph id=\"ph1\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method to set the interval and due time.","pos":[112,226],"source":" After creating the timer, use the <xref:System.Threading.Timer.Change%2A> method to set the interval and due time."}]}]},{"pos":[233,485],"content":"This constructor specifies an infinite due time before the first callback and an infinite interval between callbacks, in order to prevent the first callback from occurring before the <xref:System.Threading.Timer> object is assigned to the state object.","nodes":[{"content":"This constructor specifies an infinite due time before the first callback and an infinite interval between callbacks, in order to prevent the first callback from occurring before the <ph id=\"ph1\">&lt;xref:System.Threading.Timer&gt;</ph> object is assigned to the state object.","pos":[0,252],"source":"This constructor specifies an infinite due time before the first callback and an infinite interval between callbacks, in order to prevent the first callback from occurring before the <xref:System.Threading.Timer> object is assigned to the state object."}]},{"pos":[492,843],"content":"The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads. The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.","nodes":[{"content":"The method specified for <ph id=\"ph1\">`callback`</ph> should be reentrant, because it is called on <ph id=\"ph2\">&lt;xref:System.Threading.ThreadPool&gt;</ph> threads.","pos":[0,124],"source":"The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads."},{"content":"The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.","pos":[125,351]}]}],"pos":[10380,11230],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Threading.TimerCallback\"></xref> delegate representing a method to be executed.","nodes":[{"pos":[0,100],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.TimerCallback\"&gt;&lt;/xref&gt;</ph> delegate representing a method to be executed.","source":"A <xref href=\"System.Threading.TimerCallback\"></xref> delegate representing a method to be executed."}],"pos":[11895,11996],"yaml":true},{"content":"Initializes a new instance of the `Timer` class, using a 32-bit signed integer to specify the time interval.","nodes":[{"pos":[0,108],"content":"Initializes a new instance of the <ph id=\"ph1\">`Timer`</ph> class, using a 32-bit signed integer to specify the time interval.","source":"Initializes a new instance of the `Timer` class, using a 32-bit signed integer to specify the time interval."}],"pos":[13445,13554],"yaml":true},{"content":"The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.  \n  \n If `dueTime` is zero (0), `callback` is invoked immediately. If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.  \n  \n Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock. If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.  \n  \n The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads. The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.","nodes":[{"pos":[0,152],"content":"The delegate specified by the <ph id=\"ph1\">`callback`</ph> parameter is invoked once after <ph id=\"ph2\">`dueTime`</ph> elapses, and thereafter each time the <ph id=\"ph3\">`period`</ph> time interval elapses.","source":"The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses."},{"pos":[159,437],"content":"If `dueTime` is zero (0), `callback` is invoked immediately. If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.","nodes":[{"content":"If <ph id=\"ph1\">`dueTime`</ph> is zero (0), <ph id=\"ph2\">`callback`</ph> is invoked immediately.","pos":[0,60],"source":"If `dueTime` is zero (0), `callback` is invoked immediately."},{"content":"If <ph id=\"ph1\">`dueTime`</ph> is <ph id=\"ph2\">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;</ph>, <ph id=\"ph3\">`callback`</ph> is not invoked; the timer is disabled, but can be re-enabled by calling the <ph id=\"ph4\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method.","pos":[61,278],"source":" If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method."}]},{"pos":[444,1101],"content":"Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock. If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.","nodes":[{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Threading.Timer&gt;</ph> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the <ph id=\"ph2\">`callback`</ph> delegate executes at intervals defined by the resolution of the system clock if <ph id=\"ph3\">`period`</ph> is less than the resolution of the system clock.","pos":[0,320],"source":"Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock."},{"content":"If <ph id=\"ph1\">`period`</ph> is zero (0) or <ph id=\"ph2\">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">`dueTime`</ph> is not <ph id=\"ph4\">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;</ph>, <ph id=\"ph5\">`callback`</ph> is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <ph id=\"ph6\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method.","pos":[321,657],"source":" If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method."}]},{"pos":[1108,1459],"content":"The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads. The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.","nodes":[{"content":"The method specified for <ph id=\"ph1\">`callback`</ph> should be reentrant, because it is called on <ph id=\"ph2\">&lt;xref:System.Threading.ThreadPool&gt;</ph> threads.","pos":[0,124],"source":"The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads."},{"content":"The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.","pos":[125,351]}]}],"pos":[13565,15033],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Threading.TimerCallback\"></xref> delegate representing a method to be executed.","nodes":[{"pos":[0,100],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.TimerCallback\"&gt;&lt;/xref&gt;</ph> delegate representing a method to be executed.","source":"A <xref href=\"System.Threading.TimerCallback\"></xref> delegate representing a method to be executed."}],"pos":[15787,15888],"yaml":true},{"content":"An object containing information to be used by the callback method, or `null`.","nodes":[{"pos":[0,78],"content":"An object containing information to be used by the callback method, or <ph id=\"ph1\">`null`</ph>.","source":"An object containing information to be used by the callback method, or `null`."}],"pos":[15949,16028],"yaml":true},{"content":"The amount of time to delay before <code>callback</code> is invoked, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from starting. Specify zero (0) to start the timer immediately.","nodes":[{"pos":[0,233],"content":"The amount of time to delay before <code>callback</code> is invoked, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from starting. Specify zero (0) to start the timer immediately.","nodes":[{"content":"The amount of time to delay before <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">callback</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invoked, in milliseconds.","pos":[0,85],"source":"The amount of time to delay before <code>callback</code> is invoked, in milliseconds."},{"content":"Specify <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> to prevent the timer from starting.","pos":[86,184],"source":" Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from starting."},{"content":"Specify zero (0) to start the timer immediately.","pos":[185,233]}]}],"pos":[16090,16324],"yaml":true},{"content":"The time interval between invocations of <code>callback</code>, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling.","nodes":[{"pos":[0,174],"content":"The time interval between invocations of <code>callback</code>, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling.","nodes":[{"content":"The time interval between invocations of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">callback</ph><ept id=\"p1\">&lt;/code&gt;</ept>, in milliseconds.","pos":[0,80],"source":"The time interval between invocations of <code>callback</code>, in milliseconds."},{"content":"Specify <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> to disable periodic signaling.","pos":[81,174],"source":" Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling."}]}],"pos":[16385,16560],"yaml":true},{"content":"The <code>dueTime</code> or <code>period</code> parameter is negative and is not equal to <xref href=\"System.Threading.Timeout.Infinite\"></xref>.","nodes":[{"pos":[0,145],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dueTime</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">period</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is negative and is not equal to <ph id=\"ph3\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>dueTime</code> or <code>period</code> parameter is negative and is not equal to <xref href=\"System.Threading.Timeout.Infinite\"></xref>."}],"pos":[16730,16876],"yaml":true},{"content":"The <code>callback</code> parameter is `null`.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">callback</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>callback</code> parameter is `null`."}],"pos":[16978,17025],"yaml":true},{"content":"Initializes a new instance of the `Timer` class, using 64-bit signed integers to measure time intervals.","nodes":[{"pos":[0,104],"content":"Initializes a new instance of the <ph id=\"ph1\">`Timer`</ph> class, using 64-bit signed integers to measure time intervals.","source":"Initializes a new instance of the `Timer` class, using 64-bit signed integers to measure time intervals."}],"pos":[18639,18744],"yaml":true},{"content":"The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.  \n  \n If `dueTime` is zero (0), `callback` is invoked immediately. If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.  \n  \n Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock. If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.  \n  \n The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads. The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.","nodes":[{"pos":[0,152],"content":"The delegate specified by the <ph id=\"ph1\">`callback`</ph> parameter is invoked once after <ph id=\"ph2\">`dueTime`</ph> elapses, and thereafter each time the <ph id=\"ph3\">`period`</ph> time interval elapses.","source":"The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses."},{"pos":[159,437],"content":"If `dueTime` is zero (0), `callback` is invoked immediately. If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.","nodes":[{"content":"If <ph id=\"ph1\">`dueTime`</ph> is zero (0), <ph id=\"ph2\">`callback`</ph> is invoked immediately.","pos":[0,60],"source":"If `dueTime` is zero (0), `callback` is invoked immediately."},{"content":"If <ph id=\"ph1\">`dueTime`</ph> is <ph id=\"ph2\">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;</ph>, <ph id=\"ph3\">`callback`</ph> is not invoked; the timer is disabled, but can be re-enabled by calling the <ph id=\"ph4\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method.","pos":[61,278],"source":" If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method."}]},{"pos":[444,1101],"content":"Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock. If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.","nodes":[{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Threading.Timer&gt;</ph> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the <ph id=\"ph2\">`callback`</ph> delegate executes at intervals defined by the resolution of the system clock if <ph id=\"ph3\">`period`</ph> is less than the resolution of the system clock.","pos":[0,320],"source":"Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock."},{"content":"If <ph id=\"ph1\">`period`</ph> is zero (0) or <ph id=\"ph2\">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">`dueTime`</ph> is not <ph id=\"ph4\">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;</ph>, <ph id=\"ph5\">`callback`</ph> is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <ph id=\"ph6\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method.","pos":[321,657],"source":" If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method."}]},{"pos":[1108,1459],"content":"The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads. The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.","nodes":[{"content":"The method specified for <ph id=\"ph1\">`callback`</ph> should be reentrant, because it is called on <ph id=\"ph2\">&lt;xref:System.Threading.ThreadPool&gt;</ph> threads.","pos":[0,124],"source":"The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads."},{"content":"The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.","pos":[125,351]}]}],"pos":[18755,20223],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Threading.TimerCallback\"></xref> delegate representing a method to be executed.","nodes":[{"pos":[0,100],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.TimerCallback\"&gt;&lt;/xref&gt;</ph> delegate representing a method to be executed.","source":"A <xref href=\"System.Threading.TimerCallback\"></xref> delegate representing a method to be executed."}],"pos":[20440,20541],"yaml":true},{"content":"An object containing information to be used by the callback method, or `null`.","nodes":[{"pos":[0,78],"content":"An object containing information to be used by the callback method, or <ph id=\"ph1\">`null`</ph>.","source":"An object containing information to be used by the callback method, or `null`."}],"pos":[20602,20681],"yaml":true},{"content":"The amount of time to delay before <code>callback</code> is invoked, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from starting. Specify zero (0) to start the timer immediately.","nodes":[{"pos":[0,233],"content":"The amount of time to delay before <code>callback</code> is invoked, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from starting. Specify zero (0) to start the timer immediately.","nodes":[{"content":"The amount of time to delay before <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">callback</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invoked, in milliseconds.","pos":[0,85],"source":"The amount of time to delay before <code>callback</code> is invoked, in milliseconds."},{"content":"Specify <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> to prevent the timer from starting.","pos":[86,184],"source":" Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from starting."},{"content":"Specify zero (0) to start the timer immediately.","pos":[185,233]}]}],"pos":[20743,20977],"yaml":true},{"content":"The time interval between invocations of <code>callback</code>, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling.","nodes":[{"pos":[0,174],"content":"The time interval between invocations of <code>callback</code>, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling.","nodes":[{"content":"The time interval between invocations of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">callback</ph><ept id=\"p1\">&lt;/code&gt;</ept>, in milliseconds.","pos":[0,80],"source":"The time interval between invocations of <code>callback</code>, in milliseconds."},{"content":"Specify <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> to disable periodic signaling.","pos":[81,174],"source":" Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling."}]}],"pos":[21038,21213],"yaml":true},{"content":"The <code>dueTime</code> or <code>period</code> parameter is negative and is not equal to <xref href=\"System.Threading.Timeout.Infinite\"></xref>.","nodes":[{"pos":[0,145],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dueTime</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">period</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is negative and is not equal to <ph id=\"ph3\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>dueTime</code> or <code>period</code> parameter is negative and is not equal to <xref href=\"System.Threading.Timeout.Infinite\"></xref>."}],"pos":[21383,21529],"yaml":true},{"content":"The <code>dueTime</code> or <code>period</code> parameter is greater than 4294967294.","nodes":[{"pos":[0,85],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dueTime</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">period</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is greater than 4294967294.","source":"The <code>dueTime</code> or <code>period</code> parameter is greater than 4294967294."}],"pos":[21631,21717],"yaml":true},{"content":"Initializes a new instance of the `Timer` class, using <xref href=\"System.TimeSpan\"></xref> values to measure time intervals.","nodes":[{"pos":[0,125],"content":"Initializes a new instance of the <ph id=\"ph1\">`Timer`</ph> class, using <ph id=\"ph2\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> values to measure time intervals.","source":"Initializes a new instance of the `Timer` class, using <xref href=\"System.TimeSpan\"></xref> values to measure time intervals."}],"pos":[23143,23269],"yaml":true},{"content":"The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.  \n  \n If `dueTime` is zero (0), `callback` is invoked immediately. If `dueTime` is negative one (-1) milliseconds, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.  \n  \n Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock. If `period` is zero (0) or negative one (-1) milliseconds and `dueTime` is positive, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.  \n  \n The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads. The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.","nodes":[{"pos":[0,152],"content":"The delegate specified by the <ph id=\"ph1\">`callback`</ph> parameter is invoked once after <ph id=\"ph2\">`dueTime`</ph> elapses, and thereafter each time the <ph id=\"ph3\">`period`</ph> time interval elapses.","source":"The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses."},{"pos":[159,402],"content":"If `dueTime` is zero (0), `callback` is invoked immediately. If `dueTime` is negative one (-1) milliseconds, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.","nodes":[{"content":"If <ph id=\"ph1\">`dueTime`</ph> is zero (0), <ph id=\"ph2\">`callback`</ph> is invoked immediately.","pos":[0,60],"source":"If `dueTime` is zero (0), `callback` is invoked immediately."},{"content":"If <ph id=\"ph1\">`dueTime`</ph> is negative one (-1) milliseconds, <ph id=\"ph2\">`callback`</ph> is not invoked; the timer is disabled, but can be re-enabled by calling the <ph id=\"ph3\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method.","pos":[61,243],"source":" If `dueTime` is negative one (-1) milliseconds, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method."}]},{"pos":[409,970],"content":"Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock. If `period` is zero (0) or negative one (-1) milliseconds and `dueTime` is positive, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.","nodes":[{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Threading.Timer&gt;</ph> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the <ph id=\"ph2\">`callback`</ph> delegate executes at intervals defined by the resolution of the system clock if <ph id=\"ph3\">`period`</ph> is less than the resolution of the system clock.","pos":[0,320],"source":"Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock."},{"content":"If <ph id=\"ph1\">`period`</ph> is zero (0) or negative one (-1) milliseconds and <ph id=\"ph2\">`dueTime`</ph> is positive, <ph id=\"ph3\">`callback`</ph> is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <ph id=\"ph4\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method.","pos":[321,561],"source":" If `period` is zero (0) or negative one (-1) milliseconds and `dueTime` is positive, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method."}]},{"pos":[977,1328],"content":"The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads. The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.","nodes":[{"content":"The method specified for <ph id=\"ph1\">`callback`</ph> should be reentrant, because it is called on <ph id=\"ph2\">&lt;xref:System.Threading.ThreadPool&gt;</ph> threads.","pos":[0,124],"source":"The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads."},{"content":"The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.","pos":[125,351]}]}],"pos":[23280,24617],"yaml":true,"extradata":"MT"},{"content":"A delegate representing a method to be executed.","nodes":[{"pos":[0,48],"content":"A delegate representing a method to be executed.","nodes":[{"content":"A delegate representing a method to be executed.","pos":[0,48]}]}],"pos":[25390,25439],"yaml":true},{"content":"An object containing information to be used by the callback method, or `null`.","nodes":[{"pos":[0,78],"content":"An object containing information to be used by the callback method, or <ph id=\"ph1\">`null`</ph>.","source":"An object containing information to be used by the callback method, or `null`."}],"pos":[25500,25579],"yaml":true},{"content":"The amount of time to delay before the <code>callback</code> parameter invokes its methods. Specify negative one (-1) milliseconds to prevent the timer from starting. Specify zero (0) to start the timer immediately.","nodes":[{"pos":[0,215],"content":"The amount of time to delay before the <code>callback</code> parameter invokes its methods. Specify negative one (-1) milliseconds to prevent the timer from starting. Specify zero (0) to start the timer immediately.","nodes":[{"content":"The amount of time to delay before the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">callback</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter invokes its methods.","pos":[0,91],"source":"The amount of time to delay before the <code>callback</code> parameter invokes its methods."},{"content":"Specify negative one (-1) milliseconds to prevent the timer from starting.","pos":[92,166]},{"content":"Specify zero (0) to start the timer immediately.","pos":[167,215]}]}],"pos":[25644,25860],"yaml":true},{"content":"The time interval between invocations of the methods referenced by <code>callback</code>. Specify negative one (-1) milliseconds to disable periodic signaling.","nodes":[{"pos":[0,159],"content":"The time interval between invocations of the methods referenced by <code>callback</code>. Specify negative one (-1) milliseconds to disable periodic signaling.","nodes":[{"content":"The time interval between invocations of the methods referenced by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">callback</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,89],"source":"The time interval between invocations of the methods referenced by <code>callback</code>."},{"content":"Specify negative one (-1) milliseconds to disable periodic signaling.","pos":[90,159]}]}],"pos":[25924,26084],"yaml":true},{"content":"The number of milliseconds in the value of <code>dueTime</code> or <code>period</code> is negative and not equal to <xref href=\"System.Threading.Timeout.Infinite\"></xref>, or is greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,234],"content":"The number of milliseconds in the value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dueTime</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">period</ph><ept id=\"p2\">&lt;/code&gt;</ept> is negative and not equal to <ph id=\"ph3\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph>, or is greater than <ph id=\"ph4\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The number of milliseconds in the value of <code>dueTime</code> or <code>period</code> is negative and not equal to <xref href=\"System.Threading.Timeout.Infinite\"></xref>, or is greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[26254,26489],"yaml":true},{"content":"The <code>callback</code> parameter is `null`.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">callback</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>callback</code> parameter is `null`."}],"pos":[26591,26638],"yaml":true},{"content":"Initializes a new instance of the `Timer` class, using 32-bit unsigned integers to measure time intervals.","nodes":[{"pos":[0,106],"content":"Initializes a new instance of the <ph id=\"ph1\">`Timer`</ph> class, using 32-bit unsigned integers to measure time intervals.","source":"Initializes a new instance of the `Timer` class, using 32-bit unsigned integers to measure time intervals."}],"pos":[28264,28371],"yaml":true},{"content":"The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.  \n  \n If `dueTime` is zero (0), `callback` is invoked immediately. If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.  \n  \n Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock. If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.  \n  \n The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads. The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.","nodes":[{"pos":[0,152],"content":"The delegate specified by the <ph id=\"ph1\">`callback`</ph> parameter is invoked once after <ph id=\"ph2\">`dueTime`</ph> elapses, and thereafter each time the <ph id=\"ph3\">`period`</ph> time interval elapses.","source":"The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses."},{"pos":[159,437],"content":"If `dueTime` is zero (0), `callback` is invoked immediately. If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.","nodes":[{"content":"If <ph id=\"ph1\">`dueTime`</ph> is zero (0), <ph id=\"ph2\">`callback`</ph> is invoked immediately.","pos":[0,60],"source":"If `dueTime` is zero (0), `callback` is invoked immediately."},{"content":"If <ph id=\"ph1\">`dueTime`</ph> is <ph id=\"ph2\">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;</ph>, <ph id=\"ph3\">`callback`</ph> is not invoked; the timer is disabled, but can be re-enabled by calling the <ph id=\"ph4\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method.","pos":[61,278],"source":" If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method."}]},{"pos":[444,1101],"content":"Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock. If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.","nodes":[{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Threading.Timer&gt;</ph> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the <ph id=\"ph2\">`callback`</ph> delegate executes at intervals defined by the resolution of the system clock if <ph id=\"ph3\">`period`</ph> is less than the resolution of the system clock.","pos":[0,320],"source":"Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock."},{"content":"If <ph id=\"ph1\">`period`</ph> is zero (0) or <ph id=\"ph2\">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">`dueTime`</ph> is not <ph id=\"ph4\">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;</ph>, <ph id=\"ph5\">`callback`</ph> is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <ph id=\"ph6\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method.","pos":[321,657],"source":" If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method."}]},{"pos":[1108,1459],"content":"The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads. The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.","nodes":[{"content":"The method specified for <ph id=\"ph1\">`callback`</ph> should be reentrant, because it is called on <ph id=\"ph2\">&lt;xref:System.Threading.ThreadPool&gt;</ph> threads.","pos":[0,124],"source":"The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads."},{"content":"The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.","pos":[125,351]}]}],"pos":[28382,29850],"yaml":true,"extradata":"MT"},{"content":"A delegate representing a method to be executed.","nodes":[{"pos":[0,48],"content":"A delegate representing a method to be executed.","nodes":[{"content":"A delegate representing a method to be executed.","pos":[0,48]}]}],"pos":[30112,30161],"yaml":true},{"content":"An object containing information to be used by the callback method, or `null`.","nodes":[{"pos":[0,78],"content":"An object containing information to be used by the callback method, or <ph id=\"ph1\">`null`</ph>.","source":"An object containing information to be used by the callback method, or `null`."}],"pos":[30222,30301],"yaml":true},{"content":"The amount of time to delay before <code>callback</code> is invoked, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from starting. Specify zero (0) to start the timer immediately.","nodes":[{"pos":[0,233],"content":"The amount of time to delay before <code>callback</code> is invoked, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from starting. Specify zero (0) to start the timer immediately.","nodes":[{"content":"The amount of time to delay before <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">callback</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invoked, in milliseconds.","pos":[0,85],"source":"The amount of time to delay before <code>callback</code> is invoked, in milliseconds."},{"content":"Specify <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> to prevent the timer from starting.","pos":[86,184],"source":" Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from starting."},{"content":"Specify zero (0) to start the timer immediately.","pos":[185,233]}]}],"pos":[30364,30598],"yaml":true},{"content":"The time interval between invocations of <code>callback</code>, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling.","nodes":[{"pos":[0,174],"content":"The time interval between invocations of <code>callback</code>, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling.","nodes":[{"content":"The time interval between invocations of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">callback</ph><ept id=\"p1\">&lt;/code&gt;</ept>, in milliseconds.","pos":[0,80],"source":"The time interval between invocations of <code>callback</code>, in milliseconds."},{"content":"Specify <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> to disable periodic signaling.","pos":[81,174],"source":" Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling."}]}],"pos":[30660,30835],"yaml":true},{"content":"The <code>dueTime</code> or <code>period</code> parameter is negative and is not equal to <xref href=\"System.Threading.Timeout.Infinite\"></xref>.","nodes":[{"pos":[0,145],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dueTime</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">period</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is negative and is not equal to <ph id=\"ph3\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>dueTime</code> or <code>period</code> parameter is negative and is not equal to <xref href=\"System.Threading.Timeout.Infinite\"></xref>."}],"pos":[31005,31151],"yaml":true},{"content":"The <code>callback</code> parameter is `null`.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">callback</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>callback</code> parameter is `null`."}],"pos":[31253,31300],"yaml":true},{"content":"Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.","nodes":[{"pos":[0,135],"content":"Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.","nodes":[{"content":"Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.","pos":[0,135]}]}],"pos":[32538,32674],"yaml":true},{"content":"The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.  \n  \n If `dueTime` is zero (0), the callback method is invoked immediately. If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.  \n  \n If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.  \n  \n The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.","nodes":[{"pos":[0,134],"content":"The callback method is invoked once after <ph id=\"ph1\">`dueTime`</ph> elapses, and thereafter each time the time interval specified by <ph id=\"ph2\">`period`</ph> elapses.","source":"The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses."},{"pos":[141,474],"content":"If `dueTime` is zero (0), the callback method is invoked immediately. If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.","nodes":[{"content":"If <ph id=\"ph1\">`dueTime`</ph> is zero (0), the callback method is invoked immediately.","pos":[0,69],"source":"If `dueTime` is zero (0), the callback method is invoked immediately."},{"content":"If <ph id=\"ph1\">`dueTime`</ph> is <ph id=\"ph2\">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;</ph>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <ph id=\"ph3\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> and specifying a positive value for <ph id=\"ph4\">`dueTime`</ph>.","pos":[70,333],"source":" If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`."}]},{"pos":[481,866],"content":"If <ph id=\"ph1\">`period`</ph> is zero (0) or <ph id=\"ph2\">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;</ph>, and <ph id=\"ph3\">`dueTime`</ph> is not <ph id=\"ph4\">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;</ph>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <ph id=\"ph5\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> and specifying a positive value for <ph id=\"ph6\">`period`</ph>.","source":"If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`."},{"pos":[873,994],"content":"The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method can be called from the <ph id=\"ph2\">&lt;xref:System.Threading.TimerCallback&gt;</ph> delegate.","pos":[0,121],"source":"The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate."}]}],"pos":[32685,33688],"yaml":true,"extradata":"MT"},{"content":"The amount of time to delay before the invoking the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.","nodes":[{"pos":[0,316],"content":"The amount of time to delay before the invoking the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.","nodes":[{"content":"The amount of time to delay before the invoking the callback method specified when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timer\"&gt;&lt;/xref&gt;</ph> was constructed, in milliseconds.","pos":[0,164],"source":"The amount of time to delay before the invoking the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds."},{"content":"Specify <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> to prevent the timer from restarting.","pos":[165,265],"source":" Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from restarting."},{"content":"Specify zero (0) to restart the timer immediately.","pos":[266,316]}]}],"pos":[34370,34687],"yaml":true},{"content":"The time interval between invocations of the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling.","nodes":[{"pos":[0,251],"content":"The time interval between invocations of the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling.","nodes":[{"content":"The time interval between invocations of the callback method specified when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timer\"&gt;&lt;/xref&gt;</ph> was constructed, in milliseconds.","pos":[0,157],"source":"The time interval between invocations of the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds."},{"content":"Specify <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> to disable periodic signaling.","pos":[158,251],"source":" Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling."}]}],"pos":[34748,35000],"yaml":true},{"content":"`true` if the timer was successfully updated; otherwise, `false`.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">`true`</ph> if the timer was successfully updated; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the timer was successfully updated; otherwise, `false`."}],"pos":[35058,35126],"yaml":true},{"content":"The <xref href=\"System.Threading.Timer\"></xref> has already been disposed.","nodes":[{"pos":[0,74],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timer\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The <xref href=\"System.Threading.Timer\"></xref> has already been disposed."}],"pos":[35289,35364],"yaml":true},{"content":"The <code>dueTime</code> or <code>period</code> parameter is negative and is not equal to <xref href=\"System.Threading.Timeout.Infinite\"></xref>.","nodes":[{"pos":[0,145],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dueTime</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">period</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is negative and is not equal to <ph id=\"ph3\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>dueTime</code> or <code>period</code> parameter is negative and is not equal to <xref href=\"System.Threading.Timeout.Infinite\"></xref>."}],"pos":[35478,35624],"yaml":true},{"content":"Changes the start time and the interval between method invocations for a timer, using 64-bit signed integers to measure time intervals.","nodes":[{"pos":[0,135],"content":"Changes the start time and the interval between method invocations for a timer, using 64-bit signed integers to measure time intervals.","nodes":[{"content":"Changes the start time and the interval between method invocations for a timer, using 64-bit signed integers to measure time intervals.","pos":[0,135]}]}],"pos":[37033,37169],"yaml":true},{"content":"The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.  \n  \n If `dueTime` is zero (0), the callback method is invoked immediately. If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.  \n  \n If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.  \n  \n The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.","nodes":[{"pos":[0,134],"content":"The callback method is invoked once after <ph id=\"ph1\">`dueTime`</ph> elapses, and thereafter each time the time interval specified by <ph id=\"ph2\">`period`</ph> elapses.","source":"The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses."},{"pos":[141,474],"content":"If `dueTime` is zero (0), the callback method is invoked immediately. If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.","nodes":[{"content":"If <ph id=\"ph1\">`dueTime`</ph> is zero (0), the callback method is invoked immediately.","pos":[0,69],"source":"If `dueTime` is zero (0), the callback method is invoked immediately."},{"content":"If <ph id=\"ph1\">`dueTime`</ph> is <ph id=\"ph2\">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;</ph>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <ph id=\"ph3\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> and specifying a positive value for <ph id=\"ph4\">`dueTime`</ph>.","pos":[70,333],"source":" If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`."}]},{"pos":[481,866],"content":"If <ph id=\"ph1\">`period`</ph> is zero (0) or <ph id=\"ph2\">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;</ph>, and <ph id=\"ph3\">`dueTime`</ph> is not <ph id=\"ph4\">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;</ph>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <ph id=\"ph5\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> and specifying a positive value for <ph id=\"ph6\">`period`</ph>.","source":"If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`."},{"pos":[873,994],"content":"The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method can be called from the <ph id=\"ph2\">&lt;xref:System.Threading.TimerCallback&gt;</ph> delegate.","pos":[0,121],"source":"The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate."}]}],"pos":[37180,38183],"yaml":true,"extradata":"MT"},{"content":"The amount of time to delay before the invoking the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.","nodes":[{"pos":[0,316],"content":"The amount of time to delay before the invoking the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.","nodes":[{"content":"The amount of time to delay before the invoking the callback method specified when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timer\"&gt;&lt;/xref&gt;</ph> was constructed, in milliseconds.","pos":[0,164],"source":"The amount of time to delay before the invoking the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds."},{"content":"Specify <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> to prevent the timer from restarting.","pos":[165,265],"source":" Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from restarting."},{"content":"Specify zero (0) to restart the timer immediately.","pos":[266,316]}]}],"pos":[38332,38649],"yaml":true},{"content":"The time interval between invocations of the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling.","nodes":[{"pos":[0,251],"content":"The time interval between invocations of the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling.","nodes":[{"content":"The time interval between invocations of the callback method specified when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timer\"&gt;&lt;/xref&gt;</ph> was constructed, in milliseconds.","pos":[0,157],"source":"The time interval between invocations of the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds."},{"content":"Specify <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> to disable periodic signaling.","pos":[158,251],"source":" Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling."}]}],"pos":[38710,38962],"yaml":true},{"content":"`true` if the timer was successfully updated; otherwise, `false`.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">`true`</ph> if the timer was successfully updated; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the timer was successfully updated; otherwise, `false`."}],"pos":[39020,39088],"yaml":true},{"content":"The <xref href=\"System.Threading.Timer\"></xref> has already been disposed.","nodes":[{"pos":[0,74],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timer\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The <xref href=\"System.Threading.Timer\"></xref> has already been disposed."}],"pos":[39251,39326],"yaml":true},{"content":"The <code>dueTime</code> or <code>period</code> parameter is less than -1.","nodes":[{"pos":[0,74],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dueTime</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">period</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is less than -1.","source":"The <code>dueTime</code> or <code>period</code> parameter is less than -1."}],"pos":[39440,39515],"yaml":true},{"content":"The <code>dueTime</code> or <code>period</code> parameter is greater than 4294967294.","nodes":[{"pos":[0,85],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dueTime</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">period</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is greater than 4294967294.","source":"The <code>dueTime</code> or <code>period</code> parameter is greater than 4294967294."}],"pos":[39617,39703],"yaml":true},{"content":"Changes the start time and the interval between method invocations for a timer, using <xref href=\"System.TimeSpan\"></xref> values to measure time intervals.","nodes":[{"pos":[0,156],"content":"Changes the start time and the interval between method invocations for a timer, using <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> values to measure time intervals.","source":"Changes the start time and the interval between method invocations for a timer, using <xref href=\"System.TimeSpan\"></xref> values to measure time intervals."}],"pos":[40924,41081],"yaml":true},{"content":"The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.  \n  \n If `dueTime` is zero (0), the callback method is invoked immediately. If `dueTime` is negative one (-1) milliseconds, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.  \n  \n If `period` is zero (0) or negative one (-1) milliseconds, and `dueTime` is positive, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a value greater than zero for `period`.  \n  \n The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.","nodes":[{"pos":[0,134],"content":"The callback method is invoked once after <ph id=\"ph1\">`dueTime`</ph> elapses, and thereafter each time the time interval specified by <ph id=\"ph2\">`period`</ph> elapses.","source":"The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses."},{"pos":[141,439],"content":"If `dueTime` is zero (0), the callback method is invoked immediately. If `dueTime` is negative one (-1) milliseconds, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.","nodes":[{"content":"If <ph id=\"ph1\">`dueTime`</ph> is zero (0), the callback method is invoked immediately.","pos":[0,69],"source":"If `dueTime` is zero (0), the callback method is invoked immediately."},{"content":"If <ph id=\"ph1\">`dueTime`</ph> is negative one (-1) milliseconds, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <ph id=\"ph2\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> and specifying a positive value for <ph id=\"ph3\">`dueTime`</ph>.","pos":[70,298],"source":" If `dueTime` is negative one (-1) milliseconds, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`."}]},{"pos":[446,744],"content":"If <ph id=\"ph1\">`period`</ph> is zero (0) or negative one (-1) milliseconds, and <ph id=\"ph2\">`dueTime`</ph> is positive, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <ph id=\"ph3\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> and specifying a value greater than zero for <ph id=\"ph4\">`period`</ph>.","source":"If `period` is zero (0) or negative one (-1) milliseconds, and `dueTime` is positive, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a value greater than zero for `period`."},{"pos":[751,872],"content":"The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method can be called from the <ph id=\"ph2\">&lt;xref:System.Threading.TimerCallback&gt;</ph> delegate.","pos":[0,121],"source":"The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate."}]}],"pos":[41092,41973],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.TimeSpan\"></xref> representing the amount of time to delay before invoking the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed. Specify negative one (-1) milliseconds to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.","nodes":[{"pos":[0,323],"content":"A <xref href=\"System.TimeSpan\"></xref> representing the amount of time to delay before invoking the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed. Specify negative one (-1) milliseconds to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> representing the amount of time to delay before invoking the callback method specified when the <ph id=\"ph2\">&lt;xref href=\"System.Threading.Timer\"&gt;&lt;/xref&gt;</ph> was constructed.","pos":[0,195],"source":"A <xref href=\"System.TimeSpan\"></xref> representing the amount of time to delay before invoking the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed."},{"content":"Specify negative one (-1) milliseconds to prevent the timer from restarting.","pos":[196,272]},{"content":"Specify zero (0) to restart the timer immediately.","pos":[273,323]}]}],"pos":[42677,43001],"yaml":true},{"content":"The time interval between invocations of the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed. Specify negative one (-1) milliseconds to disable periodic signaling.","nodes":[{"pos":[0,210],"content":"The time interval between invocations of the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed. Specify negative one (-1) milliseconds to disable periodic signaling.","nodes":[{"content":"The time interval between invocations of the callback method specified when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timer\"&gt;&lt;/xref&gt;</ph> was constructed.","pos":[0,140],"source":"The time interval between invocations of the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed."},{"content":"Specify negative one (-1) milliseconds to disable periodic signaling.","pos":[141,210]}]}],"pos":[43065,43276],"yaml":true},{"content":"`true` if the timer was successfully updated; otherwise, `false`.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">`true`</ph> if the timer was successfully updated; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the timer was successfully updated; otherwise, `false`."}],"pos":[43334,43402],"yaml":true},{"content":"The <xref href=\"System.Threading.Timer\"></xref> has already been disposed.","nodes":[{"pos":[0,74],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timer\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The <xref href=\"System.Threading.Timer\"></xref> has already been disposed."}],"pos":[43565,43640],"yaml":true},{"content":"The <code>dueTime</code> or <code>period</code> parameter, in milliseconds, is less than -1.","nodes":[{"pos":[0,92],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dueTime</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">period</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter, in milliseconds, is less than -1.","source":"The <code>dueTime</code> or <code>period</code> parameter, in milliseconds, is less than -1."}],"pos":[43754,43847],"yaml":true},{"content":"The <code>dueTime</code> or <code>period</code> parameter, in milliseconds, is greater than 4294967294.","nodes":[{"pos":[0,103],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dueTime</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">period</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter, in milliseconds, is greater than 4294967294.","source":"The <code>dueTime</code> or <code>period</code> parameter, in milliseconds, is greater than 4294967294."}],"pos":[43949,44053],"yaml":true},{"content":"Changes the start time and the interval between method invocations for a timer, using 32-bit unsigned integers to measure time intervals.","nodes":[{"pos":[0,137],"content":"Changes the start time and the interval between method invocations for a timer, using 32-bit unsigned integers to measure time intervals.","nodes":[{"content":"Changes the start time and the interval between method invocations for a timer, using 32-bit unsigned integers to measure time intervals.","pos":[0,137]}]}],"pos":[45474,45612],"yaml":true},{"content":"The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.  \n  \n If `dueTime` is zero (0), the callback method is invoked immediately. If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.  \n  \n If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.  \n  \n The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.","nodes":[{"pos":[0,134],"content":"The callback method is invoked once after <ph id=\"ph1\">`dueTime`</ph> elapses, and thereafter each time the time interval specified by <ph id=\"ph2\">`period`</ph> elapses.","source":"The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses."},{"pos":[141,474],"content":"If `dueTime` is zero (0), the callback method is invoked immediately. If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.","nodes":[{"content":"If <ph id=\"ph1\">`dueTime`</ph> is zero (0), the callback method is invoked immediately.","pos":[0,69],"source":"If `dueTime` is zero (0), the callback method is invoked immediately."},{"content":"If <ph id=\"ph1\">`dueTime`</ph> is <ph id=\"ph2\">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;</ph>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <ph id=\"ph3\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> and specifying a positive value for <ph id=\"ph4\">`dueTime`</ph>.","pos":[70,333],"source":" If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`."}]},{"pos":[481,866],"content":"If <ph id=\"ph1\">`period`</ph> is zero (0) or <ph id=\"ph2\">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;</ph>, and <ph id=\"ph3\">`dueTime`</ph> is not <ph id=\"ph4\">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;</ph>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <ph id=\"ph5\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> and specifying a positive value for <ph id=\"ph6\">`period`</ph>.","source":"If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`."},{"pos":[873,994],"content":"The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method can be called from the <ph id=\"ph2\">&lt;xref:System.Threading.TimerCallback&gt;</ph> delegate.","pos":[0,121],"source":"The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate."}]}],"pos":[45623,46626],"yaml":true,"extradata":"MT"},{"content":"The amount of time to delay before the invoking the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.","nodes":[{"pos":[0,316],"content":"The amount of time to delay before the invoking the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.","nodes":[{"content":"The amount of time to delay before the invoking the callback method specified when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timer\"&gt;&lt;/xref&gt;</ph> was constructed, in milliseconds.","pos":[0,164],"source":"The amount of time to delay before the invoking the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds."},{"content":"Specify <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> to prevent the timer from restarting.","pos":[165,265],"source":" Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from restarting."},{"content":"Specify zero (0) to restart the timer immediately.","pos":[266,316]}]}],"pos":[46821,47138],"yaml":true},{"content":"The time interval between invocations of the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling.","nodes":[{"pos":[0,251],"content":"The time interval between invocations of the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling.","nodes":[{"content":"The time interval between invocations of the callback method specified when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timer\"&gt;&lt;/xref&gt;</ph> was constructed, in milliseconds.","pos":[0,157],"source":"The time interval between invocations of the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds."},{"content":"Specify <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> to disable periodic signaling.","pos":[158,251],"source":" Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling."}]}],"pos":[47200,47452],"yaml":true},{"content":"`true` if the timer was successfully updated; otherwise, `false`.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">`true`</ph> if the timer was successfully updated; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the timer was successfully updated; otherwise, `false`."}],"pos":[47510,47578],"yaml":true},{"content":"The <xref href=\"System.Threading.Timer\"></xref> has already been disposed.","nodes":[{"pos":[0,74],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timer\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The <xref href=\"System.Threading.Timer\"></xref> has already been disposed."}],"pos":[47741,47816],"yaml":true},{"content":"Releases all resources used by the current instance of <xref href=\"System.Threading.Timer\"></xref>.","nodes":[{"pos":[0,99],"content":"Releases all resources used by the current instance of <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timer\"&gt;&lt;/xref&gt;</ph>.","source":"Releases all resources used by the current instance of <xref href=\"System.Threading.Timer\"></xref>."}],"pos":[48943,49043],"yaml":true},{"content":"Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).  \n  \n> [!NOTE]\n>  Callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads. You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.","nodes":[{"pos":[0,244],"content":"Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).","nodes":[{"content":"Calling <ph id=\"ph1\">`Dispose`</ph> allows the resources used by the <ph id=\"ph2\">&lt;xref:System.Threading.Timer&gt;</ph> to be reallocated for other purposes.","pos":[0,118],"source":"Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes."},{"content":"For more information about <ph id=\"ph1\">`Dispose`</ph>, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.","pos":[119,244],"source":" For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md)."}]},{"pos":[252,583],"content":"[!NOTE]\n Callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads. You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.","leadings":["","> "],"nodes":[{"content":" Callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads. You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.","pos":[8,329],"nodes":[{"content":"Callbacks can occur after the <ph id=\"ph1\">&lt;xref:System.Threading.Timer.Dispose&gt;</ph> method overload has been called, because the timer queues callbacks for execution by thread pool threads.","pos":[1,174],"source":" Callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads."},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29&gt;</ph> method overload to wait until all callbacks have completed.","pos":[175,321],"source":" You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed."}]}]}],"pos":[49054,49643],"yaml":true,"extradata":"MT"},{"content":"Releases all resources used by the current instance of <xref href=\"System.Threading.Timer\"></xref> and signals when the timer has been disposed of.","nodes":[{"pos":[0,147],"content":"Releases all resources used by the current instance of <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timer\"&gt;&lt;/xref&gt;</ph> and signals when the timer has been disposed of.","source":"Releases all resources used by the current instance of <xref href=\"System.Threading.Timer\"></xref> and signals when the timer has been disposed of."}],"pos":[51676,51824],"yaml":true},{"content":"Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).  \n  \n When this method completes, it signals the <xref:System.Threading.WaitHandle> specified by the `notifyObject` parameter.Use this overload of the <xref:System.Threading.Timer.Dispose%2A> method if you want to be able to block until you are certain that the timer has been disposed. The timer is not disposed until all currently queued callbacks have completed.  \n  \n> [!NOTE]\n>  If the callback uses the <xref:System.Threading.Timer.Change%2A> method to set the `dueTime` parameter to zero, a race condition can occur when the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload is called: If the timer queues a new callback before the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload detects that there are no callbacks queued, <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> continues to block; otherwise, the timer is disposed while the new callback is being queued, and an <xref:System.ObjectDisposedException> is thrown when the new callback calls the <xref:System.Threading.Timer.Change%2A> method.","nodes":[{"pos":[0,244],"content":"Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).","nodes":[{"content":"Calling <ph id=\"ph1\">`Dispose`</ph> allows the resources used by the <ph id=\"ph2\">&lt;xref:System.Threading.Timer&gt;</ph> to be reallocated for other purposes.","pos":[0,118],"source":"Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes."},{"content":"For more information about <ph id=\"ph1\">`Dispose`</ph>, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.","pos":[119,244],"source":" For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md)."}]},{"pos":[251,610],"content":"When this method completes, it signals the <xref:System.Threading.WaitHandle> specified by the `notifyObject` parameter.Use this overload of the <xref:System.Threading.Timer.Dispose%2A> method if you want to be able to block until you are certain that the timer has been disposed. The timer is not disposed until all currently queued callbacks have completed.","nodes":[{"content":"When this method completes, it signals the <ph id=\"ph1\">&lt;xref:System.Threading.WaitHandle&gt;</ph> specified by the <ph id=\"ph2\">`notifyObject`</ph> parameter.Use this overload of the <ph id=\"ph3\">&lt;xref:System.Threading.Timer.Dispose%2A&gt;</ph> method if you want to be able to block until you are certain that the timer has been disposed.","pos":[0,280],"source":"When this method completes, it signals the <xref:System.Threading.WaitHandle> specified by the `notifyObject` parameter.Use this overload of the <xref:System.Threading.Timer.Dispose%2A> method if you want to be able to block until you are certain that the timer has been disposed."},{"content":"The timer is not disposed until all currently queued callbacks have completed.","pos":[281,359]}]},{"pos":[618,1350],"content":"[!NOTE]\n If the callback uses the <xref:System.Threading.Timer.Change%2A> method to set the `dueTime` parameter to zero, a race condition can occur when the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload is called: If the timer queues a new callback before the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload detects that there are no callbacks queued, <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> continues to block; otherwise, the timer is disposed while the new callback is being queued, and an <xref:System.ObjectDisposedException> is thrown when the new callback calls the <xref:System.Threading.Timer.Change%2A> method.","leadings":["","> "],"nodes":[{"content":"If the callback uses the <ph id=\"ph1\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method to set the <ph id=\"ph2\">`dueTime`</ph> parameter to zero, a race condition can occur when the <ph id=\"ph3\">&lt;xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29&gt;</ph> method overload is called: If the timer queues a new callback before the <ph id=\"ph4\">&lt;xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29&gt;</ph> method overload detects that there are no callbacks queued, <ph id=\"ph5\">&lt;xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29&gt;</ph> continues to block; otherwise, the timer is disposed while the new callback is being queued, and an <ph id=\"ph6\">&lt;xref:System.ObjectDisposedException&gt;</ph> is thrown when the new callback calls the <ph id=\"ph7\">&lt;xref:System.Threading.Timer.Change%2A&gt;</ph> method.","pos":[9,730],"source":" If the callback uses the <xref:System.Threading.Timer.Change%2A> method to set the `dueTime` parameter to zero, a race condition can occur when the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload is called: If the timer queues a new callback before the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload detects that there are no callbacks queued, <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> continues to block; otherwise, the timer is disposed while the new callback is being queued, and an <xref:System.ObjectDisposedException> is thrown when the new callback calls the <xref:System.Threading.Timer.Change%2A> method."}]}],"pos":[51835,53193],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Threading.WaitHandle\"></xref> to be signaled when the `Timer` has been disposed of.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitHandle\"&gt;&lt;/xref&gt;</ph> to be signaled when the <ph id=\"ph2\">`Timer`</ph> has been disposed of.","source":"The <xref href=\"System.Threading.WaitHandle\"></xref> to be signaled when the `Timer` has been disposed of."}],"pos":[53378,53485],"yaml":true},{"content":"`true` if the function succeeds; otherwise, `false`.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">`true`</ph> if the function succeeds; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the function succeeds; otherwise, `false`."}],"pos":[53543,53598],"yaml":true},{"content":"The <code>notifyObject</code> parameter is `null`.","nodes":[{"pos":[0,50],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">notifyObject</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>notifyObject</code> parameter is `null`."}],"pos":[53758,53809],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.Timer\n  commentId: T:System.Threading.Timer\n  id: Timer\n  children:\n  - System.Threading.Timer.#ctor(System.Threading.TimerCallback)\n  - System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)\n  - System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)\n  - System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)\n  - System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)\n  - System.Threading.Timer.Change(System.Int32,System.Int32)\n  - System.Threading.Timer.Change(System.Int64,System.Int64)\n  - System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)\n  - System.Threading.Timer.Change(System.UInt32,System.UInt32)\n  - System.Threading.Timer.Dispose\n  - System.Threading.Timer.Dispose(System.Threading.WaitHandle)\n  langs:\n  - csharp\n  name: Timer\n  nameWithType: Timer\n  fullName: System.Threading.Timer\n  type: Class\n  assemblies:\n  - System.Threading.Timer\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Provides a mechanism for executing a method on a thread pool thread at specified intervals. This class cannot be inherited.\n  remarks: \"> [!NOTE]\\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/threading/timer.cs#051a39d380760b26). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \\n  \\n Use a <xref:System.Threading.TimerCallback> delegate to specify the method you want the <xref:System.Threading.Timer> to execute. The signature of the <xref:System.Threading.TimerCallback> delegate is:  \\n  \\n```csharp  \\nvoid TimerCallback(Object state)  \\n```  \\n  \\n```cpp  \\nvoid TimerCallback(Object state)  \\n```  \\n  \\n```vb  \\nSub TimerCallback(state As Object)  \\n```  \\n  \\n The timer delegate is specified when the timer is constructed, and cannot be changed. The method does not execute on the thread that created the timer; it executes on a <xref:System.Threading.ThreadPool> thread supplied by the system.  \\n  \\n> [!TIP]\\n>  The .NET Framework Class Library includes four classes named `Timer`, each of which offers different functionality:  \\n>   \\n>  -   <xref:System.Timers.Timer?displayProperty=fullName>, which fires an event and executes the code in one or more event sinks at regular intervals. The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.  \\n> -   <xref:System.Threading.Timer?displayProperty=fullName>, which executes a single callback method on a thread pool thread at regular intervals. The callback method is defined when the timer is instantiated and cannot be changed. Like the <xref:System.Timers.Timer?displayProperty=fullName> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.  \\n> -   <xref:System.Windows.Forms.Timer?displayProperty=fullName>, a Windows Forms component that fires an event and executes the code in one or more event sinks at regular intervals. The component has no user interface and is designed for use in a single-threaded environment; it executes on the UI thread.  \\n> -   <xref:System.Web.UI.Timer?displayProperty=fullName>, an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.  \\n  \\n When you create a timer, you can specify an amount of time to wait before the first execution of the method (due time), and an amount of time to wait between subsequent executions (period). The <xref:System.Threading.Timer> class has the same resolution as the system clock. This means that if the period is less than the resolution of the system clock, the <xref:System.Threading.TimerCallback> delegate will execute at intervals defined by the resolution of the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems. You can change the due time and period, or disable the timer, by using the <xref:System.Threading.Timer.Change%2A> method.  \\n  \\n> [!NOTE]\\n>  As long as you are using a <xref:System.Threading.Timer>, you must keep a reference to it. As with any managed object, a <xref:System.Threading.Timer> is subject to garbage collection when there are no references to it. The fact that a <xref:System.Threading.Timer> is still active does not prevent it from being collected.  \\n  \\n When a timer is no longer needed, use the <xref:System.Threading.Timer.Dispose%2A> method to free the resources held by the timer. Note that callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads. You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.  \\n  \\n The callback method executed by the timer should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads. The callback can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the callback, or if all thread pool threads are in use and the callback is queued multiple times.  \\n  \\n> [!NOTE]\\n>  <xref:System.Threading.Timer?displayProperty=fullName> is a simple, lightweight timer that uses callback methods and is served by thread pool threads. It is not recommended for use with Windows Forms, because its callbacks do not occur on the user interface thread. <xref:System.Windows.Forms.Timer?displayProperty=fullName> is a better choice for use with Windows Forms. For server-based timer functionality, you might consider using <xref:System.Timers.Timer?displayProperty=fullName>, which raises events and has additional features.\"\n  example:\n  - \"The following example defines a `StatusChecker` class  that includes a `CheckStatus` method whose signature is the same as the <xref:System.Threading.TimerCallback> delegate. The  `state` argument of the `CheckStatus` method is an <xref:System.Threading.AutoResetEvent> object that is used to synchronize the application thread and the thread pool thread that executes the callback delegate. The `StatusChecker` class also includes two state variables:  \\n  \\n `invokeCount`  \\n Indicates the number of times the callback method has been invoked.  \\n  \\n `maxCount`  \\n Determines the maximum number of times the callback method should be invoked.  \\n  \\n The application thread creates the timer, which waits one second and then executes  the `CheckStatus` callback method every 250 milliseconds. The application thread then blocks until the <xref:System.Threading.AutoResetEvent> object is signaled. When the `CheckStatus` callback method executes `maxCount` times, it calls the `AutoResetEvent.Set` method to set the state of the <xref:System.Threading.AutoResetEvent> object to signaled. The first time this happens, the application thread calls the <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> method so that the callback method now executes every half second. It once again blocks until the <xref:System.Threading.AutoResetEvent> object is signaled. When this happens, the timer is destroyed by calling its <xref:System.Threading.Timer.Dispose%2A> method, and the application terminates.  \\n  \\n [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]\\n [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]\\n [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class Timer : MarshalByRefObject, IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Timer.#ctor(System.Threading.TimerCallback)\n  commentId: M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)\n  id: '#ctor(System.Threading.TimerCallback)'\n  parent: System.Threading.Timer\n  langs:\n  - csharp\n  name: Timer(TimerCallback)\n  nameWithType: Timer.Timer(TimerCallback)\n  fullName: Timer.Timer(TimerCallback)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading.Timer\n  namespace: System.Threading\n  summary: Initializes a new instance of the <xref href=\"System.Threading.Timer\"></xref> class with an infinite period and an infinite due time, using the newly created <xref href=\"System.Threading.Timer\"></xref> object as the state object.\n  remarks: \"Call this constructor when you want to use the <xref:System.Threading.Timer> object itself as the state object. After creating the timer, use the <xref:System.Threading.Timer.Change%2A> method to set the interval and due time.  \\n  \\n This constructor specifies an infinite due time before the first callback and an infinite interval between callbacks, in order to prevent the first callback from occurring before the <xref:System.Threading.Timer> object is assigned to the state object.  \\n  \\n The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads. The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.\"\n  example:\n  - \"The following code example creates a new timer, using the timer itself as the state object. The <xref:System.Threading.Timer.Change%2A> method is used to start the timer. When the timer callback occurs, the state object is used to turn the timer off.  \\n  \\n [!code-csharp[TimerSelfCtor#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]\\n [!code-vb[TimerSelfCtor#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]\"\n  syntax:\n    content: public Timer (System.Threading.TimerCallback callback);\n    parameters:\n    - id: callback\n      type: System.Threading.TimerCallback\n      description: A <xref href=\"System.Threading.TimerCallback\"></xref> delegate representing a method to be executed.\n  overload: System.Threading.Timer.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)\n  commentId: M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)\n  id: '#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)'\n  parent: System.Threading.Timer\n  langs:\n  - csharp\n  name: Timer(TimerCallback, Object, Int32, Int32)\n  nameWithType: Timer.Timer(TimerCallback, Object, Int32, Int32)\n  fullName: Timer.Timer(TimerCallback, Object, Int32, Int32)\n  type: Constructor\n  assemblies:\n  - System.Threading.Timer\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Initializes a new instance of the `Timer` class, using a 32-bit signed integer to specify the time interval.\n  remarks: \"The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.  \\n  \\n If `dueTime` is zero (0), `callback` is invoked immediately. If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.  \\n  \\n Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock. If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.  \\n  \\n The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads. The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.\"\n  example:\n  - \"The following code example shows how to create a `TimerCallback` delegate and initialize a new instance of the `Timer` class.  \\n  \\n [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]\\n [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]\\n [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]\"\n  syntax:\n    content: public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);\n    parameters:\n    - id: callback\n      type: System.Threading.TimerCallback\n      description: A <xref href=\"System.Threading.TimerCallback\"></xref> delegate representing a method to be executed.\n    - id: state\n      type: System.Object\n      description: An object containing information to be used by the callback method, or `null`.\n    - id: dueTime\n      type: System.Int32\n      description: The amount of time to delay before <code>callback</code> is invoked, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from starting. Specify zero (0) to start the timer immediately.\n    - id: period\n      type: System.Int32\n      description: The time interval between invocations of <code>callback</code>, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling.\n  overload: System.Threading.Timer.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>dueTime</code> or <code>period</code> parameter is negative and is not equal to <xref href=\"System.Threading.Timeout.Infinite\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>callback</code> parameter is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)\n  commentId: M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)\n  id: '#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)'\n  parent: System.Threading.Timer\n  langs:\n  - csharp\n  name: Timer(TimerCallback, Object, Int64, Int64)\n  nameWithType: Timer.Timer(TimerCallback, Object, Int64, Int64)\n  fullName: Timer.Timer(TimerCallback, Object, Int64, Int64)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading.Timer\n  namespace: System.Threading\n  summary: Initializes a new instance of the `Timer` class, using 64-bit signed integers to measure time intervals.\n  remarks: \"The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.  \\n  \\n If `dueTime` is zero (0), `callback` is invoked immediately. If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.  \\n  \\n Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock. If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.  \\n  \\n The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads. The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.\"\n  syntax:\n    content: public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);\n    parameters:\n    - id: callback\n      type: System.Threading.TimerCallback\n      description: A <xref href=\"System.Threading.TimerCallback\"></xref> delegate representing a method to be executed.\n    - id: state\n      type: System.Object\n      description: An object containing information to be used by the callback method, or `null`.\n    - id: dueTime\n      type: System.Int64\n      description: The amount of time to delay before <code>callback</code> is invoked, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from starting. Specify zero (0) to start the timer immediately.\n    - id: period\n      type: System.Int64\n      description: The time interval between invocations of <code>callback</code>, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling.\n  overload: System.Threading.Timer.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>dueTime</code> or <code>period</code> parameter is negative and is not equal to <xref href=\"System.Threading.Timeout.Infinite\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The <code>dueTime</code> or <code>period</code> parameter is greater than 4294967294.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)\n  commentId: M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)\n  id: '#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)'\n  parent: System.Threading.Timer\n  langs:\n  - csharp\n  name: Timer(TimerCallback, Object, TimeSpan, TimeSpan)\n  nameWithType: Timer.Timer(TimerCallback, Object, TimeSpan, TimeSpan)\n  fullName: Timer.Timer(TimerCallback, Object, TimeSpan, TimeSpan)\n  type: Constructor\n  assemblies:\n  - System.Threading.Timer\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Initializes a new instance of the `Timer` class, using <xref href=\"System.TimeSpan\"></xref> values to measure time intervals.\n  remarks: \"The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.  \\n  \\n If `dueTime` is zero (0), `callback` is invoked immediately. If `dueTime` is negative one (-1) milliseconds, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.  \\n  \\n Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock. If `period` is zero (0) or negative one (-1) milliseconds and `dueTime` is positive, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.  \\n  \\n The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads. The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.\"\n  example:\n  - \"The following code example shows how to create a `TimerCallback` delegate and initialize a new instance of the `Timer` class.  \\n  \\n [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]\\n [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]\\n [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]\"\n  syntax:\n    content: public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);\n    parameters:\n    - id: callback\n      type: System.Threading.TimerCallback\n      description: A delegate representing a method to be executed.\n    - id: state\n      type: System.Object\n      description: An object containing information to be used by the callback method, or `null`.\n    - id: dueTime\n      type: System.TimeSpan\n      description: The amount of time to delay before the <code>callback</code> parameter invokes its methods. Specify negative one (-1) milliseconds to prevent the timer from starting. Specify zero (0) to start the timer immediately.\n    - id: period\n      type: System.TimeSpan\n      description: The time interval between invocations of the methods referenced by <code>callback</code>. Specify negative one (-1) milliseconds to disable periodic signaling.\n  overload: System.Threading.Timer.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The number of milliseconds in the value of <code>dueTime</code> or <code>period</code> is negative and not equal to <xref href=\"System.Threading.Timeout.Infinite\"></xref>, or is greater than <xref href=\"System.Int32.MaxValue\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>callback</code> parameter is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)\n  commentId: M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)\n  id: '#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)'\n  parent: System.Threading.Timer\n  langs:\n  - csharp\n  name: Timer(TimerCallback, Object, UInt32, UInt32)\n  nameWithType: Timer.Timer(TimerCallback, Object, UInt32, UInt32)\n  fullName: Timer.Timer(TimerCallback, Object, UInt32, UInt32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading.Timer\n  namespace: System.Threading\n  summary: Initializes a new instance of the `Timer` class, using 32-bit unsigned integers to measure time intervals.\n  remarks: \"The delegate specified by the `callback` parameter is invoked once after `dueTime` elapses, and thereafter each time the `period` time interval elapses.  \\n  \\n If `dueTime` is zero (0), `callback` is invoked immediately. If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is not invoked; the timer is disabled, but can be re-enabled by calling the <xref:System.Threading.Timer.Change%2A> method.  \\n  \\n Because the <xref:System.Threading.Timer> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the `callback` delegate executes at intervals defined by the resolution of the system clock if `period` is less than the resolution of the system clock. If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, `callback` is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref:System.Threading.Timer.Change%2A> method.  \\n  \\n The method specified for `callback` should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads. The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);\n    parameters:\n    - id: callback\n      type: System.Threading.TimerCallback\n      description: A delegate representing a method to be executed.\n    - id: state\n      type: System.Object\n      description: An object containing information to be used by the callback method, or `null`.\n    - id: dueTime\n      type: System.UInt32\n      description: The amount of time to delay before <code>callback</code> is invoked, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from starting. Specify zero (0) to start the timer immediately.\n    - id: period\n      type: System.UInt32\n      description: The time interval between invocations of <code>callback</code>, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling.\n  overload: System.Threading.Timer.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>dueTime</code> or <code>period</code> parameter is negative and is not equal to <xref href=\"System.Threading.Timeout.Infinite\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>callback</code> parameter is `null`.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Timer.Change(System.Int32,System.Int32)\n  commentId: M:System.Threading.Timer.Change(System.Int32,System.Int32)\n  id: Change(System.Int32,System.Int32)\n  parent: System.Threading.Timer\n  langs:\n  - csharp\n  name: Change(Int32, Int32)\n  nameWithType: Timer.Change(Int32, Int32)\n  fullName: Timer.Change(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Threading.Timer\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.\n  remarks: \"The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.  \\n  \\n If `dueTime` is zero (0), the callback method is invoked immediately. If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.  \\n  \\n If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.  \\n  \\n The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.\"\n  example:\n  - \"The following code example demonstrates how to start a `Timer` and, after a set number of invocations, change its period.  \\n  \\n [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]\\n [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]\\n [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]\"\n  syntax:\n    content: public bool Change (int dueTime, int period);\n    parameters:\n    - id: dueTime\n      type: System.Int32\n      description: The amount of time to delay before the invoking the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.\n    - id: period\n      type: System.Int32\n      description: The time interval between invocations of the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling.\n    return:\n      type: System.Boolean\n      description: '`true` if the timer was successfully updated; otherwise, `false`.'\n  overload: System.Threading.Timer.Change*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Timer\"></xref> has already been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>dueTime</code> or <code>period</code> parameter is negative and is not equal to <xref href=\"System.Threading.Timeout.Infinite\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Timer.Change(System.Int64,System.Int64)\n  commentId: M:System.Threading.Timer.Change(System.Int64,System.Int64)\n  id: Change(System.Int64,System.Int64)\n  parent: System.Threading.Timer\n  langs:\n  - csharp\n  name: Change(Int64, Int64)\n  nameWithType: Timer.Change(Int64, Int64)\n  fullName: Timer.Change(Int64, Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading.Timer\n  namespace: System.Threading\n  summary: Changes the start time and the interval between method invocations for a timer, using 64-bit signed integers to measure time intervals.\n  remarks: \"The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.  \\n  \\n If `dueTime` is zero (0), the callback method is invoked immediately. If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.  \\n  \\n If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.  \\n  \\n The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.\"\n  syntax:\n    content: public bool Change (long dueTime, long period);\n    parameters:\n    - id: dueTime\n      type: System.Int64\n      description: The amount of time to delay before the invoking the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.\n    - id: period\n      type: System.Int64\n      description: The time interval between invocations of the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling.\n    return:\n      type: System.Boolean\n      description: '`true` if the timer was successfully updated; otherwise, `false`.'\n  overload: System.Threading.Timer.Change*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Timer\"></xref> has already been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>dueTime</code> or <code>period</code> parameter is less than -1.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The <code>dueTime</code> or <code>period</code> parameter is greater than 4294967294.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)\n  commentId: M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)\n  id: Change(System.TimeSpan,System.TimeSpan)\n  parent: System.Threading.Timer\n  langs:\n  - csharp\n  name: Change(TimeSpan, TimeSpan)\n  nameWithType: Timer.Change(TimeSpan, TimeSpan)\n  fullName: Timer.Change(TimeSpan, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Threading.Timer\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Changes the start time and the interval between method invocations for a timer, using <xref href=\"System.TimeSpan\"></xref> values to measure time intervals.\n  remarks: \"The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.  \\n  \\n If `dueTime` is zero (0), the callback method is invoked immediately. If `dueTime` is negative one (-1) milliseconds, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.  \\n  \\n If `period` is zero (0) or negative one (-1) milliseconds, and `dueTime` is positive, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a value greater than zero for `period`.  \\n  \\n The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.\"\n  example:\n  - \"The following code example demonstrates how to start a `Timer` and, after a set number of invocations, change its period.  \\n  \\n [!code-cpp[System.Threading.Timer2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]\\n [!code-csharp[System.Threading.Timer2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]\\n [!code-vb[System.Threading.Timer2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]\"\n  syntax:\n    content: public bool Change (TimeSpan dueTime, TimeSpan period);\n    parameters:\n    - id: dueTime\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> representing the amount of time to delay before invoking the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed. Specify negative one (-1) milliseconds to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.\n    - id: period\n      type: System.TimeSpan\n      description: The time interval between invocations of the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed. Specify negative one (-1) milliseconds to disable periodic signaling.\n    return:\n      type: System.Boolean\n      description: '`true` if the timer was successfully updated; otherwise, `false`.'\n  overload: System.Threading.Timer.Change*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Timer\"></xref> has already been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>dueTime</code> or <code>period</code> parameter, in milliseconds, is less than -1.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The <code>dueTime</code> or <code>period</code> parameter, in milliseconds, is greater than 4294967294.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Timer.Change(System.UInt32,System.UInt32)\n  commentId: M:System.Threading.Timer.Change(System.UInt32,System.UInt32)\n  id: Change(System.UInt32,System.UInt32)\n  parent: System.Threading.Timer\n  langs:\n  - csharp\n  name: Change(UInt32, UInt32)\n  nameWithType: Timer.Change(UInt32, UInt32)\n  fullName: Timer.Change(UInt32, UInt32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading.Timer\n  namespace: System.Threading\n  summary: Changes the start time and the interval between method invocations for a timer, using 32-bit unsigned integers to measure time intervals.\n  remarks: \"The callback method is invoked once after `dueTime` elapses, and thereafter each time the time interval specified by `period` elapses.  \\n  \\n If `dueTime` is zero (0), the callback method is invoked immediately. If `dueTime` is <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `dueTime`.  \\n  \\n If `period` is zero (0) or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, and `dueTime` is not <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref:System.Threading.Timer.Change%2A> and specifying a positive value for `period`.  \\n  \\n The <xref:System.Threading.Timer.Change%2A> method can be called from the <xref:System.Threading.TimerCallback> delegate.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public bool Change (uint dueTime, uint period);\n    parameters:\n    - id: dueTime\n      type: System.UInt32\n      description: The amount of time to delay before the invoking the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.\n    - id: period\n      type: System.UInt32\n      description: The time interval between invocations of the callback method specified when the <xref href=\"System.Threading.Timer\"></xref> was constructed, in milliseconds. Specify <xref href=\"System.Threading.Timeout.Infinite\"></xref> to disable periodic signaling.\n    return:\n      type: System.Boolean\n      description: '`true` if the timer was successfully updated; otherwise, `false`.'\n  overload: System.Threading.Timer.Change*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Timer\"></xref> has already been disposed.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Timer.Dispose\n  commentId: M:System.Threading.Timer.Dispose\n  id: Dispose\n  parent: System.Threading.Timer\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: Timer.Dispose()\n  fullName: Timer.Dispose()\n  type: Method\n  assemblies:\n  - System.Threading.Timer\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Releases all resources used by the current instance of <xref href=\"System.Threading.Timer\"></xref>.\n  remarks: \"Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).  \\n  \\n> [!NOTE]\\n>  Callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads. You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.\"\n  example:\n  - \"The following code example shows how to free the resources held by a `Timer`.  \\n  \\n [!code-cpp[System.Threading.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]\\n [!code-csharp[System.Threading.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]\\n [!code-vb[System.Threading.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Threading.Timer.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Timer.Dispose(System.Threading.WaitHandle)\n  commentId: M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)\n  id: Dispose(System.Threading.WaitHandle)\n  parent: System.Threading.Timer\n  langs:\n  - csharp\n  name: Dispose(WaitHandle)\n  nameWithType: Timer.Dispose(WaitHandle)\n  fullName: Timer.Dispose(WaitHandle)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Threading.Timer\n  namespace: System.Threading\n  summary: Releases all resources used by the current instance of <xref href=\"System.Threading.Timer\"></xref> and signals when the timer has been disposed of.\n  remarks: \"Calling `Dispose` allows the resources used by the <xref:System.Threading.Timer> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).  \\n  \\n When this method completes, it signals the <xref:System.Threading.WaitHandle> specified by the `notifyObject` parameter.Use this overload of the <xref:System.Threading.Timer.Dispose%2A> method if you want to be able to block until you are certain that the timer has been disposed. The timer is not disposed until all currently queued callbacks have completed.  \\n  \\n> [!NOTE]\\n>  If the callback uses the <xref:System.Threading.Timer.Change%2A> method to set the `dueTime` parameter to zero, a race condition can occur when the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload is called: If the timer queues a new callback before the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload detects that there are no callbacks queued, <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> continues to block; otherwise, the timer is disposed while the new callback is being queued, and an <xref:System.ObjectDisposedException> is thrown when the new callback calls the <xref:System.Threading.Timer.Change%2A> method.\"\n  syntax:\n    content: public bool Dispose (System.Threading.WaitHandle notifyObject);\n    parameters:\n    - id: notifyObject\n      type: System.Threading.WaitHandle\n      description: The <xref href=\"System.Threading.WaitHandle\"></xref> to be signaled when the `Timer` has been disposed of.\n    return:\n      type: System.Boolean\n      description: '`true` if the function succeeds; otherwise, `false`.'\n  overload: System.Threading.Timer.Dispose*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>notifyObject</code> parameter is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Timer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.Threading.Timer.#ctor(System.Threading.TimerCallback)\n  parent: System.Threading.Timer\n  isExternal: false\n  name: Timer(TimerCallback)\n  nameWithType: Timer.Timer(TimerCallback)\n  fullName: Timer.Timer(TimerCallback)\n- uid: System.Threading.TimerCallback\n  parent: System.Threading\n  isExternal: false\n  name: TimerCallback\n  nameWithType: TimerCallback\n  fullName: System.Threading.TimerCallback\n- uid: System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)\n  parent: System.Threading.Timer\n  isExternal: false\n  name: Timer(TimerCallback, Object, Int32, Int32)\n  nameWithType: Timer.Timer(TimerCallback, Object, Int32, Int32)\n  fullName: Timer.Timer(TimerCallback, Object, Int32, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)\n  parent: System.Threading.Timer\n  isExternal: false\n  name: Timer(TimerCallback, Object, Int64, Int64)\n  nameWithType: Timer.Timer(TimerCallback, Object, Int64, Int64)\n  fullName: Timer.Timer(TimerCallback, Object, Int64, Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)\n  parent: System.Threading.Timer\n  isExternal: false\n  name: Timer(TimerCallback, Object, TimeSpan, TimeSpan)\n  nameWithType: Timer.Timer(TimerCallback, Object, TimeSpan, TimeSpan)\n  fullName: Timer.Timer(TimerCallback, Object, TimeSpan, TimeSpan)\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)\n  parent: System.Threading.Timer\n  isExternal: false\n  name: Timer(TimerCallback, Object, UInt32, UInt32)\n  nameWithType: Timer.Timer(TimerCallback, Object, UInt32, UInt32)\n  fullName: Timer.Timer(TimerCallback, Object, UInt32, UInt32)\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Threading.Timer.Change(System.Int32,System.Int32)\n  parent: System.Threading.Timer\n  isExternal: false\n  name: Change(Int32, Int32)\n  nameWithType: Timer.Change(Int32, Int32)\n  fullName: Timer.Change(Int32, Int32)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.Timer.Change(System.Int64,System.Int64)\n  parent: System.Threading.Timer\n  isExternal: false\n  name: Change(Int64, Int64)\n  nameWithType: Timer.Change(Int64, Int64)\n  fullName: Timer.Change(Int64, Int64)\n- uid: System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)\n  parent: System.Threading.Timer\n  isExternal: false\n  name: Change(TimeSpan, TimeSpan)\n  nameWithType: Timer.Change(TimeSpan, TimeSpan)\n  fullName: Timer.Change(TimeSpan, TimeSpan)\n- uid: System.Threading.Timer.Change(System.UInt32,System.UInt32)\n  parent: System.Threading.Timer\n  isExternal: false\n  name: Change(UInt32, UInt32)\n  nameWithType: Timer.Change(UInt32, UInt32)\n  fullName: Timer.Change(UInt32, UInt32)\n- uid: System.Threading.Timer.Dispose\n  parent: System.Threading.Timer\n  isExternal: false\n  name: Dispose()\n  nameWithType: Timer.Dispose()\n  fullName: Timer.Dispose()\n- uid: System.Threading.Timer.Dispose(System.Threading.WaitHandle)\n  parent: System.Threading.Timer\n  isExternal: false\n  name: Dispose(WaitHandle)\n  nameWithType: Timer.Dispose(WaitHandle)\n  fullName: Timer.Dispose(WaitHandle)\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandle\n  nameWithType: WaitHandle\n  fullName: System.Threading.WaitHandle\n- uid: System.Threading.Timer.#ctor*\n  parent: System.Threading.Timer\n  isExternal: false\n  name: Timer\n  nameWithType: Timer.Timer\n  fullName: Timer.Timer\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Timer.xml\n- uid: System.Threading.Timer.Change*\n  parent: System.Threading.Timer\n  isExternal: false\n  name: Change\n  nameWithType: Timer.Change\n  fullName: Timer.Change\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Timer.xml\n- uid: System.Threading.Timer.Dispose*\n  parent: System.Threading.Timer\n  isExternal: false\n  name: Dispose\n  nameWithType: Timer.Dispose\n  fullName: Timer.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Timer.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}