{"nodes":[{"content":"Discovers the attributes of an event and provides access to event metadata.","nodes":[{"pos":[0,75],"content":"Discovers the attributes of an event and provides access to event metadata.","nodes":[{"content":"Discovers the attributes of an event and provides access to event metadata.","pos":[0,75]}]}],"pos":[2351,2427],"yaml":true},{"content":"Use the <xref:System.Reflection.EventInfo> class to inspect events and to hook up event handlers, as shown in the example code for the <xref:System.Reflection.EventInfo.AddEventHandler%2A> method.  \n  \n> [!NOTE]\n>  <xref:System.Reflection.EventInfo> is not intended to be used to raise events. An object raises events as dictated by its internal state.  \n  \n Events are used with delegates. An event listener instantiates an event-handler delegate that is invoked whenever the event is raised by an event source. In order to connect to the event source, the event listener adds this delegate to the invocation list on the source. When the event is raised, the invoke method of the event-handler delegate is called. Both multicast and single-cast event notifications are supported. The `Add` and `Remove` methods, as well as the event-handler delegate class associated with an event, must be marked in the metadata.  \n  \n Delegates are object-oriented function pointers. In C or C++, a function pointer is a reference to a method. In contrast to the C or C++ function pointer, a delegate contains two references: a reference to a method and a reference to an object that supports the method. Delegates can invoke a method without knowing the class type that declares or inherits the method. Delegates need only know the return type and parameter list of the method.  \n  \n The event model works equally well for single-cast and multicast delegates. When the delegate's invoke method is called, only a single object will have a method called on it. A multicast modifier can be applied to a delegate declaration, which allows multiple methods to be called when the invoke method of the delegate is called.  \n  \n Calling <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=fullName> on `EventInfo` when the `inherit` parameter of `GetCustomAttributes` is `true` does not walk the type hierarchy. Use <xref:System.Attribute?displayProperty=fullName> to inherit custom attributes.","nodes":[{"pos":[0,196],"content":"Use the <xref:System.Reflection.EventInfo> class to inspect events and to hook up event handlers, as shown in the example code for the <xref:System.Reflection.EventInfo.AddEventHandler%2A> method.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.EventInfo&gt;</ph> class to inspect events and to hook up event handlers, as shown in the example code for the <ph id=\"ph2\">&lt;xref:System.Reflection.EventInfo.AddEventHandler%2A&gt;</ph> method.","pos":[0,196],"source":"Use the <xref:System.Reflection.EventInfo> class to inspect events and to hook up event handlers, as shown in the example code for the <xref:System.Reflection.EventInfo.AddEventHandler%2A> method."}]},{"pos":[204,352],"content":"[!NOTE]\n <xref:System.Reflection.EventInfo> is not intended to be used to raise events. An object raises events as dictated by its internal state.","leadings":["","> "],"nodes":[{"content":" <xref:System.Reflection.EventInfo> is not intended to be used to raise events. An object raises events as dictated by its internal state.","pos":[8,146],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.EventInfo&gt;</ph> is not intended to be used to raise events.","pos":[1,79],"source":" <xref:System.Reflection.EventInfo> is not intended to be used to raise events."},{"content":"An object raises events as dictated by its internal state.","pos":[80,138]}]}]},{"pos":[359,914],"content":"Events are used with delegates. An event listener instantiates an event-handler delegate that is invoked whenever the event is raised by an event source. In order to connect to the event source, the event listener adds this delegate to the invocation list on the source. When the event is raised, the invoke method of the event-handler delegate is called. Both multicast and single-cast event notifications are supported. The `Add` and `Remove` methods, as well as the event-handler delegate class associated with an event, must be marked in the metadata.","nodes":[{"content":"Events are used with delegates.","pos":[0,31]},{"content":"An event listener instantiates an event-handler delegate that is invoked whenever the event is raised by an event source.","pos":[32,153]},{"content":"In order to connect to the event source, the event listener adds this delegate to the invocation list on the source.","pos":[154,270]},{"content":"When the event is raised, the invoke method of the event-handler delegate is called.","pos":[271,355]},{"content":"Both multicast and single-cast event notifications are supported.","pos":[356,421]},{"content":"The <ph id=\"ph1\">`Add`</ph> and <ph id=\"ph2\">`Remove`</ph> methods, as well as the event-handler delegate class associated with an event, must be marked in the metadata.","pos":[422,555],"source":" The `Add` and `Remove` methods, as well as the event-handler delegate class associated with an event, must be marked in the metadata."}]},{"pos":[921,1364],"content":"Delegates are object-oriented function pointers. In C or C++, a function pointer is a reference to a method. In contrast to the C or C++ function pointer, a delegate contains two references: a reference to a method and a reference to an object that supports the method. Delegates can invoke a method without knowing the class type that declares or inherits the method. Delegates need only know the return type and parameter list of the method.","nodes":[{"content":"Delegates are object-oriented function pointers. In C or C++, a function pointer is a reference to a method. In contrast to the C or C++ function pointer, a delegate contains two references: a reference to a method and a reference to an object that supports the method. Delegates can invoke a method without knowing the class type that declares or inherits the method. Delegates need only know the return type and parameter list of the method.","pos":[0,443],"nodes":[{"content":"Delegates are object-oriented function pointers.","pos":[0,48]},{"content":"In C or C++, a function pointer is a reference to a method.","pos":[49,108]},{"content":"In contrast to the C or C++ function pointer, a delegate contains two references: a reference to a method and a reference to an object that supports the method.","pos":[109,269]},{"content":"Delegates can invoke a method without knowing the class type that declares or inherits the method.","pos":[270,368]},{"content":"Delegates need only know the return type and parameter list of the method.","pos":[369,443]}]}]},{"pos":[1371,1701],"content":"The event model works equally well for single-cast and multicast delegates. When the delegate's invoke method is called, only a single object will have a method called on it. A multicast modifier can be applied to a delegate declaration, which allows multiple methods to be called when the invoke method of the delegate is called.","nodes":[{"content":"The event model works equally well for single-cast and multicast delegates. When the delegate's invoke method is called, only a single object will have a method called on it. A multicast modifier can be applied to a delegate declaration, which allows multiple methods to be called when the invoke method of the delegate is called.","pos":[0,330],"nodes":[{"content":"The event model works equally well for single-cast and multicast delegates.","pos":[0,75]},{"content":"When the delegate's invoke method is called, only a single object will have a method called on it.","pos":[76,174]},{"content":"A multicast modifier can be applied to a delegate declaration, which allows multiple methods to be called when the invoke method of the delegate is called.","pos":[175,330]}]}]},{"pos":[1708,2009],"content":"Calling <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=fullName> on `EventInfo` when the `inherit` parameter of `GetCustomAttributes` is `true` does not walk the type hierarchy. Use <xref:System.Attribute?displayProperty=fullName> to inherit custom attributes.","nodes":[{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=fullName&gt;</ph> on <ph id=\"ph2\">`EventInfo`</ph> when the <ph id=\"ph3\">`inherit`</ph> parameter of <ph id=\"ph4\">`GetCustomAttributes`</ph> is <ph id=\"ph5\">`true`</ph> does not walk the type hierarchy.","pos":[0,218],"source":"Calling <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=fullName> on `EventInfo` when the `inherit` parameter of `GetCustomAttributes` is `true` does not walk the type hierarchy."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Attribute?displayProperty=fullName&gt;</ph> to inherit custom attributes.","pos":[219,301],"source":" Use <xref:System.Attribute?displayProperty=fullName> to inherit custom attributes."}]}],"pos":[2438,4461],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the `EventInfo` class.","nodes":[{"pos":[0,52],"content":"Initializes a new instance of the <ph id=\"ph1\">`EventInfo`</ph> class.","source":"Initializes a new instance of the `EventInfo` class."}],"pos":[11186,11239],"yaml":true},{"content":"Adds an event handler to an event source.","nodes":[{"pos":[0,41],"content":"Adds an event handler to an event source.","nodes":[{"content":"Adds an event handler to an event source.","pos":[0,41]}]}],"pos":[12675,12717],"yaml":true},{"content":"This method attempts to add a delegate to synchronize the event on the target object.  \n  \n Each time the event is raised by the target parameter, the method or methods encapsulated by the handler will be invoked.","nodes":[{"pos":[0,85],"content":"This method attempts to add a delegate to synchronize the event on the target object.","nodes":[{"content":"This method attempts to add a delegate to synchronize the event on the target object.","pos":[0,85]}]},{"pos":[92,213],"content":"Each time the event is raised by the target parameter, the method or methods encapsulated by the handler will be invoked.","nodes":[{"content":"Each time the event is raised by the target parameter, the method or methods encapsulated by the handler will be invoked.","pos":[0,121]}]}],"pos":[12728,12946],"yaml":true,"extradata":"MT"},{"content":"The event source.","nodes":[{"pos":[0,17],"content":"The event source.","nodes":[{"content":"The event source.","pos":[0,17]}]}],"pos":[14873,14891],"yaml":true},{"content":"Encapsulates a method or methods to be invoked when the event is raised by the target.","nodes":[{"pos":[0,86],"content":"Encapsulates a method or methods to be invoked when the event is raised by the target.","nodes":[{"content":"Encapsulates a method or methods to be invoked when the event is raised by the target.","pos":[0,86]}]}],"pos":[14956,15043],"yaml":true},{"content":"The event does not have a public `add` accessor.","nodes":[{"pos":[0,48],"content":"The event does not have a public <ph id=\"ph1\">`add`</ph> accessor.","source":"The event does not have a public `add` accessor."}],"pos":[15224,15273],"yaml":true},{"content":"The handler that was passed in cannot be used.","nodes":[{"pos":[0,46],"content":"The handler that was passed in cannot be used.","nodes":[{"content":"The handler that was passed in cannot be used.","pos":[0,46]}]}],"pos":[15367,15414],"yaml":true},{"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n The caller does not have access permission to the member.","nodes":[{"pos":[0,349],"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead.","nodes":[{"content":"In the <bpt id=\"p1\">[</bpt>.NET for Windows Store apps<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id=\"p2\">[</bpt>Portable Class Library<ept id=\"p2\">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id=\"ph1\">&lt;xref href=\"System.MemberAccessException\"&gt;&lt;/xref&gt;</ph>, instead.","pos":[47,349],"source":" In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead."}]},{"pos":[355,372],"content":"</p>\n    </block>","nodes":[]},{"pos":[379,436],"content":"The caller does not have access permission to the member.","nodes":[{"content":"The caller does not have access permission to the member.","pos":[0,57]}]}],"pos":[15516,15968],"yaml":true},{"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\"System.Exception\"></xref> instead.  \n  \n</p>\n    </block>  \n  \n The <code>target</code> parameter is `null` and the event is not static.  \n  \n -or-  \n  \n The <xref href=\"System.Reflection.EventInfo\"></xref> is not declared on the target.","nodes":[{"pos":[0,310],"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\"System.Exception\"></xref> instead.","nodes":[{"content":"In the <bpt id=\"p1\">[</bpt>.NET for Windows Store apps<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id=\"p2\">[</bpt>Portable Class Library<ept id=\"p2\">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> instead.","pos":[47,310],"source":" In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\"System.Exception\"></xref> instead."}]},{"pos":[316,333],"content":"</p>\n    </block>","nodes":[]},{"pos":[340,412],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph> and the event is not static.","source":"The <code>target</code> parameter is `null` and the event is not static."},{"pos":[419,423],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[430,513],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.EventInfo\"&gt;&lt;/xref&gt;</ph> is not declared on the target.","source":"The <xref href=\"System.Reflection.EventInfo\"></xref> is not declared on the target."}],"pos":[16080,16615],"yaml":true},{"content":"Gets the <xref href=\"System.Reflection.MethodInfo\"></xref> object for the <xref href=\"System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\"></xref> method of the event, including non-public methods.","nodes":[{"pos":[0,220],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> object for the <ph id=\"ph2\">&lt;xref href=\"System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\"&gt;&lt;/xref&gt;</ph> method of the event, including non-public methods.","source":"Gets the <xref href=\"System.Reflection.MethodInfo\"></xref> object for the <xref href=\"System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\"></xref> method of the event, including non-public methods."}],"pos":[18101,18322],"yaml":true},{"content":"This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetAddMethod%2A> with a value of `true`.","nodes":[{"pos":[0,121],"content":"This property is the equivalent of calling the <ph id=\"ph1\">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> with a value of <ph id=\"ph2\">`true`</ph>.","source":"This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetAddMethod%2A> with a value of `true`."}],"pos":[18333,18455],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Reflection.MethodInfo\"></xref> object for the <xref href=\"System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\"></xref> method.","nodes":[{"pos":[0,172],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> object for the <ph id=\"ph2\">&lt;xref href=\"System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\"&gt;&lt;/xref&gt;</ph> method.","source":"The <xref href=\"System.Reflection.MethodInfo\"></xref> object for the <xref href=\"System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\"></xref> method."}],"pos":[18613,18786],"yaml":true},{"content":"Gets the attributes for this event.","nodes":[{"pos":[0,35],"content":"Gets the attributes for this event.","nodes":[{"content":"Gets the attributes for this event.","pos":[0,35]}]}],"pos":[20329,20365],"yaml":true},{"content":"The attributes are returned in a 4-byte integer representing a bitmap of the attributes set for the event reflected by this instance.","nodes":[{"pos":[0,133],"content":"The attributes are returned in a 4-byte integer representing a bitmap of the attributes set for the event reflected by this instance.","nodes":[{"content":"The attributes are returned in a 4-byte integer representing a bitmap of the attributes set for the event reflected by this instance.","pos":[0,133]}]}],"pos":[20376,20510],"yaml":true,"extradata":"MT"},{"content":"The read-only attributes for this event.","nodes":[{"pos":[0,40],"content":"The read-only attributes for this event.","nodes":[{"content":"The read-only attributes for this event.","pos":[0,40]}]}],"pos":[20680,20721],"yaml":true},{"content":"Returns a value that indicates whether this instance is equal to a specified object.","nodes":[{"pos":[0,84],"content":"Returns a value that indicates whether this instance is equal to a specified object.","nodes":[{"content":"Returns a value that indicates whether this instance is equal to a specified object.","pos":[0,84]}]}],"pos":[22308,22393],"yaml":true},{"content":"An object to compare with this instance, or `null`.","nodes":[{"pos":[0,51],"content":"An object to compare with this instance, or <ph id=\"ph1\">`null`</ph>.","source":"An object to compare with this instance, or `null`."}],"pos":[22533,22585],"yaml":true},{"content":"`true` if <code>obj</code> equals the type and value of this instance; otherwise, `false`.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> equals the type and value of this instance; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>obj</code> equals the type and value of this instance; otherwise, `false`."}],"pos":[22643,22736],"yaml":true},{"content":"Gets the `Type` object of the underlying event-handler delegate associated with this event.","nodes":[{"pos":[0,91],"content":"Gets the <ph id=\"ph1\">`Type`</ph> object of the underlying event-handler delegate associated with this event.","source":"Gets the `Type` object of the underlying event-handler delegate associated with this event."}],"pos":[24312,24404],"yaml":true},{"content":"A read-only `Type` object representing the delegate event handler.","nodes":[{"pos":[0,66],"content":"A read-only <ph id=\"ph1\">`Type`</ph> object representing the delegate event handler.","source":"A read-only `Type` object representing the delegate event handler."}],"pos":[25337,25404],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[25588,25638],"yaml":true},{"content":"Returns the method used to add an event handler delegate to the event source.","nodes":[{"pos":[0,77],"content":"Returns the method used to add an event handler delegate to the event source.","nodes":[{"content":"Returns the method used to add an event handler delegate to the event source.","pos":[0,77]}]}],"pos":[27129,27207],"yaml":true},{"content":"`GetAddMethod` initializes and adds the event subscribe method. The `AddEventHandler` method is used to add an event-handler delegate to the invocation list of an event source.","nodes":[{"pos":[0,176],"content":"`GetAddMethod` initializes and adds the event subscribe method. The `AddEventHandler` method is used to add an event-handler delegate to the invocation list of an event source.","nodes":[{"content":"<ph id=\"ph1\">`GetAddMethod`</ph> initializes and adds the event subscribe method.","pos":[0,63],"source":"`GetAddMethod` initializes and adds the event subscribe method."},{"content":"The <ph id=\"ph1\">`AddEventHandler`</ph> method is used to add an event-handler delegate to the invocation list of an event source.","pos":[64,176],"source":" The `AddEventHandler` method is used to add an event-handler delegate to the invocation list of an event source."}]}],"pos":[27218,27397],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> object representing the method used to add an event handler delegate to the event source.","nodes":[{"pos":[0,141],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> object representing the method used to add an event handler delegate to the event source.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> object representing the method used to add an event handler delegate to the event source."}],"pos":[27697,27839],"yaml":true},{"content":"When overridden in a derived class, retrieves the `MethodInfo` object for the <xref href=\"System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\"></xref> method of the event, specifying whether to return non-public methods.","nodes":[{"pos":[0,243],"content":"When overridden in a derived class, retrieves the <ph id=\"ph1\">`MethodInfo`</ph> object for the <ph id=\"ph2\">&lt;xref href=\"System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\"&gt;&lt;/xref&gt;</ph> method of the event, specifying whether to return non-public methods.","source":"When overridden in a derived class, retrieves the `MethodInfo` object for the <xref href=\"System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\"></xref> method of the event, specifying whether to return non-public methods."}],"pos":[29270,29514],"yaml":true},{"content":"The `GetAddMethod` initializes and adds the event subscribe method as a Boolean value. The `AddEventHandler` method is used to add an event-handler delegate to the invocation list of an event source.","nodes":[{"pos":[0,199],"content":"The `GetAddMethod` initializes and adds the event subscribe method as a Boolean value. The `AddEventHandler` method is used to add an event-handler delegate to the invocation list of an event source.","nodes":[{"content":"The <ph id=\"ph1\">`GetAddMethod`</ph> initializes and adds the event subscribe method as a Boolean value.","pos":[0,86],"source":"The `GetAddMethod` initializes and adds the event subscribe method as a Boolean value."},{"content":"The <ph id=\"ph1\">`AddEventHandler`</ph> method is used to add an event-handler delegate to the invocation list of an event source.","pos":[87,199],"source":" The `AddEventHandler` method is used to add an event-handler delegate to the invocation list of an event source."}]}],"pos":[29525,29725],"yaml":true,"extradata":"MT"},{"content":"`true` if non-public methods can be returned; otherwise, `false`.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">`true`</ph> if non-public methods can be returned; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if non-public methods can be returned; otherwise, `false`."}],"pos":[30039,30107],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> object representing the method used to add an event handler delegate to the event source.","nodes":[{"pos":[0,141],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> object representing the method used to add an event handler delegate to the event source.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> object representing the method used to add an event handler delegate to the event source."}],"pos":[30179,30321],"yaml":true},{"content":"<code>nonPublic</code> is `true`, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.","nodes":[{"pos":[0,171],"content":"<ph id=\"ph1\">&lt;code&gt;nonPublic&lt;/code&gt;</ph> is <ph id=\"ph2\">`true`</ph>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.","source":"<code>nonPublic</code> is `true`, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods."}],"pos":[30491,30663],"yaml":true},{"content":"Returns the hash code for this instance.","nodes":[{"pos":[0,40],"content":"Returns the hash code for this instance.","nodes":[{"content":"Returns the hash code for this instance.","pos":[0,40]}]}],"pos":[31948,31989],"yaml":true},{"content":"A 32-bit signed integer hash code.","nodes":[{"pos":[0,34],"content":"A 32-bit signed integer hash code.","nodes":[{"content":"A 32-bit signed integer hash code.","pos":[0,34]}]}],"pos":[32123,32158],"yaml":true},{"content":"Returns the public methods that have been associated with an event in metadata using the `.other` directive.","nodes":[{"pos":[0,108],"content":"Returns the public methods that have been associated with an event in metadata using the <ph id=\"ph1\">`.other`</ph> directive.","source":"Returns the public methods that have been associated with an event in metadata using the `.other` directive."}],"pos":[33715,33824],"yaml":true},{"content":"The metadata for an event can associate four kinds of methods with the event:  \n  \n-   The `.addon` directive specifies the method used to add event handlers. Use the <xref:System.Reflection.EventInfo.GetAddMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.  \n  \n-   The `.removeon` directive specifies the method used to detach event handlers. Use the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.  \n  \n-   The `.fire` directive specifies the method used to raise the event. Use the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.  \n  \n-   The `.other` directive specifies any other methods associated with the event. Use the <xref:System.Reflection.EventInfo.GetOtherMethods%2A> method to retrieve an array of <xref:System.Reflection.EventInfo> objects for those methods.  \n  \n The methods associated with an event using the `.other` directive have no special significance to the runtime. The C# and Visual Basic compilers do not use the `.other` directive.","nodes":[{"pos":[0,77],"content":"The metadata for an event can associate four kinds of methods with the event:","nodes":[{"content":"The metadata for an event can associate four kinds of methods with the event:","pos":[0,77]}]},{"pos":[87,291],"content":"The `.addon` directive specifies the method used to add event handlers. Use the <xref:System.Reflection.EventInfo.GetAddMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.","nodes":[{"content":"The <ph id=\"ph1\">`.addon`</ph> directive specifies the method used to add event handlers.","pos":[0,71],"source":"The `.addon` directive specifies the method used to add event handlers."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> method to retrieve an <ph id=\"ph2\">&lt;xref:System.Reflection.EventInfo&gt;</ph> for that method.","pos":[72,204],"source":" Use the <xref:System.Reflection.EventInfo.GetAddMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method."}]},{"pos":[301,514],"content":"The `.removeon` directive specifies the method used to detach event handlers. Use the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.","nodes":[{"content":"The <ph id=\"ph1\">`.removeon`</ph> directive specifies the method used to detach event handlers.","pos":[0,77],"source":"The `.removeon` directive specifies the method used to detach event handlers."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> method to retrieve an <ph id=\"ph2\">&lt;xref:System.Reflection.EventInfo&gt;</ph> for that method.","pos":[78,213],"source":" Use the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method."}]},{"pos":[524,726],"content":"The `.fire` directive specifies the method used to raise the event. Use the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.","nodes":[{"content":"The <ph id=\"ph1\">`.fire`</ph> directive specifies the method used to raise the event.","pos":[0,67],"source":"The `.fire` directive specifies the method used to raise the event."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> method to retrieve an <ph id=\"ph2\">&lt;xref:System.Reflection.EventInfo&gt;</ph> for that method.","pos":[68,202],"source":" Use the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method."}]},{"pos":[736,968],"content":"The `.other` directive specifies any other methods associated with the event. Use the <xref:System.Reflection.EventInfo.GetOtherMethods%2A> method to retrieve an array of <xref:System.Reflection.EventInfo> objects for those methods.","nodes":[{"content":"The <ph id=\"ph1\">`.other`</ph> directive specifies any other methods associated with the event.","pos":[0,77],"source":"The `.other` directive specifies any other methods associated with the event."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.EventInfo.GetOtherMethods%2A&gt;</ph> method to retrieve an array of <ph id=\"ph2\">&lt;xref:System.Reflection.EventInfo&gt;</ph> objects for those methods.","pos":[78,232],"source":" Use the <xref:System.Reflection.EventInfo.GetOtherMethods%2A> method to retrieve an array of <xref:System.Reflection.EventInfo> objects for those methods."}]},{"pos":[975,1154],"content":"The methods associated with an event using the `.other` directive have no special significance to the runtime. The C# and Visual Basic compilers do not use the `.other` directive.","nodes":[{"content":"The methods associated with an event using the <ph id=\"ph1\">`.other`</ph> directive have no special significance to the runtime.","pos":[0,110],"source":"The methods associated with an event using the `.other` directive have no special significance to the runtime."},{"content":"The C# and Visual Basic compilers do not use the <ph id=\"ph1\">`.other`</ph> directive.","pos":[111,179],"source":" The C# and Visual Basic compilers do not use the `.other` directive."}]}],"pos":[33835,35002],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing the public methods that have been associated with the event in metadata by using the `.other` directive. If there are no such public methods, an empty array is returned.","nodes":[{"pos":[0,251],"content":"An array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing the public methods that have been associated with the event in metadata by using the `.other` directive. If there are no such public methods, an empty array is returned.","nodes":[{"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.EventInfo\"&gt;&lt;/xref&gt;</ph> objects representing the public methods that have been associated with the event in metadata by using the <ph id=\"ph2\">`.other`</ph> directive.","pos":[0,186],"source":"An array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing the public methods that have been associated with the event in metadata by using the `.other` directive."},{"content":"If there are no such public methods, an empty array is returned.","pos":[187,251]}]}],"pos":[35176,35428],"yaml":true},{"content":"Returns the methods that have been associated with the event in metadata using the `.other` directive, specifying whether to include non-public methods.","nodes":[{"pos":[0,152],"content":"Returns the methods that have been associated with the event in metadata using the <ph id=\"ph1\">`.other`</ph> directive, specifying whether to include non-public methods.","source":"Returns the methods that have been associated with the event in metadata using the `.other` directive, specifying whether to include non-public methods."}],"pos":[36714,36867],"yaml":true},{"content":"The metadata for an event can associate four kinds of methods with the event:  \n  \n-   The `.addon` directive specifies the method used to add event handlers. Use the <xref:System.Reflection.EventInfo.GetAddMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.  \n  \n-   The `.removeon` directive specifies the method used to detach event handlers. Use the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for this method.  \n  \n-   The `.fire` directive specifies the method used to raise the event. Use the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for this method.  \n  \n-   The `.other` directive specifies any other methods associated with the event. Use the <xref:System.Reflection.EventInfo.GetOtherMethods%2A> method to retrieve an array of <xref:System.Reflection.EventInfo> objects for those methods.  \n  \n The methods associated with an event using the `.other` directive have no special significance to the runtime. The C# and Visual Basic compilers do not use the `.other` directive.","nodes":[{"pos":[0,77],"content":"The metadata for an event can associate four kinds of methods with the event:","nodes":[{"content":"The metadata for an event can associate four kinds of methods with the event:","pos":[0,77]}]},{"pos":[87,291],"content":"The `.addon` directive specifies the method used to add event handlers. Use the <xref:System.Reflection.EventInfo.GetAddMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.","nodes":[{"content":"The <ph id=\"ph1\">`.addon`</ph> directive specifies the method used to add event handlers.","pos":[0,71],"source":"The `.addon` directive specifies the method used to add event handlers."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> method to retrieve an <ph id=\"ph2\">&lt;xref:System.Reflection.EventInfo&gt;</ph> for that method.","pos":[72,204],"source":" Use the <xref:System.Reflection.EventInfo.GetAddMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method."}]},{"pos":[301,514],"content":"The `.removeon` directive specifies the method used to detach event handlers. Use the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for this method.","nodes":[{"content":"The <ph id=\"ph1\">`.removeon`</ph> directive specifies the method used to detach event handlers.","pos":[0,77],"source":"The `.removeon` directive specifies the method used to detach event handlers."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> method to retrieve an <ph id=\"ph2\">&lt;xref:System.Reflection.EventInfo&gt;</ph> for this method.","pos":[78,213],"source":" Use the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for this method."}]},{"pos":[524,726],"content":"The `.fire` directive specifies the method used to raise the event. Use the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for this method.","nodes":[{"content":"The <ph id=\"ph1\">`.fire`</ph> directive specifies the method used to raise the event.","pos":[0,67],"source":"The `.fire` directive specifies the method used to raise the event."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> method to retrieve an <ph id=\"ph2\">&lt;xref:System.Reflection.EventInfo&gt;</ph> for this method.","pos":[68,202],"source":" Use the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for this method."}]},{"pos":[736,968],"content":"The `.other` directive specifies any other methods associated with the event. Use the <xref:System.Reflection.EventInfo.GetOtherMethods%2A> method to retrieve an array of <xref:System.Reflection.EventInfo> objects for those methods.","nodes":[{"content":"The <ph id=\"ph1\">`.other`</ph> directive specifies any other methods associated with the event.","pos":[0,77],"source":"The `.other` directive specifies any other methods associated with the event."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.EventInfo.GetOtherMethods%2A&gt;</ph> method to retrieve an array of <ph id=\"ph2\">&lt;xref:System.Reflection.EventInfo&gt;</ph> objects for those methods.","pos":[78,232],"source":" Use the <xref:System.Reflection.EventInfo.GetOtherMethods%2A> method to retrieve an array of <xref:System.Reflection.EventInfo> objects for those methods."}]},{"pos":[975,1154],"content":"The methods associated with an event using the `.other` directive have no special significance to the runtime. The C# and Visual Basic compilers do not use the `.other` directive.","nodes":[{"content":"The methods associated with an event using the <ph id=\"ph1\">`.other`</ph> directive have no special significance to the runtime.","pos":[0,110],"source":"The methods associated with an event using the `.other` directive have no special significance to the runtime."},{"content":"The C# and Visual Basic compilers do not use the <ph id=\"ph1\">`.other`</ph> directive.","pos":[111,179],"source":" The C# and Visual Basic compilers do not use the `.other` directive."}]}],"pos":[36878,38045],"yaml":true,"extradata":"MT"},{"content":"`true` to include non-public methods; otherwise, `false`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">`true`</ph> to include non-public methods; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to include non-public methods; otherwise, `false`."}],"pos":[38230,38290],"yaml":true},{"content":"An array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing methods that have been associated with an event in metadata by using the `.other` directive. If there are no methods matching the specification, an empty array is returned.","nodes":[{"pos":[0,254],"content":"An array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing methods that have been associated with an event in metadata by using the `.other` directive. If there are no methods matching the specification, an empty array is returned.","nodes":[{"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.EventInfo\"&gt;&lt;/xref&gt;</ph> objects representing methods that have been associated with an event in metadata by using the <ph id=\"ph2\">`.other`</ph> directive.","pos":[0,174],"source":"An array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing methods that have been associated with an event in metadata by using the `.other` directive."},{"content":"If there are no methods matching the specification, an empty array is returned.","pos":[175,254]}]}],"pos":[38364,38619],"yaml":true},{"content":"This method is not implemented.","nodes":[{"pos":[0,31],"content":"This method is not implemented.","nodes":[{"content":"This method is not implemented.","pos":[0,31]}]}],"pos":[38796,38828],"yaml":true},{"content":"Returns the method that is called when the event is raised.","nodes":[{"pos":[0,59],"content":"Returns the method that is called when the event is raised.","nodes":[{"content":"Returns the method that is called when the event is raised.","pos":[0,59]}]}],"pos":[39987,40047],"yaml":true},{"content":"This method usually returns `null` for events declared with the C# `event` keyword or the Visual Basic `Event` keyword. This is because the C# and Visual Basic compilers do not generate such a method by default.","nodes":[{"pos":[0,211],"content":"This method usually returns `null` for events declared with the C# `event` keyword or the Visual Basic `Event` keyword. This is because the C# and Visual Basic compilers do not generate such a method by default.","nodes":[{"content":"This method usually returns <ph id=\"ph1\">`null`</ph> for events declared with the C# <ph id=\"ph2\">`event`</ph> keyword or the Visual Basic <ph id=\"ph3\">`Event`</ph> keyword.","pos":[0,119],"source":"This method usually returns `null` for events declared with the C# `event` keyword or the Visual Basic `Event` keyword."},{"content":"This is because the C# and Visual Basic compilers do not generate such a method by default.","pos":[120,211]}]}],"pos":[40058,40270],"yaml":true,"extradata":"MT"},{"content":"The method that is called when the event is raised.","nodes":[{"pos":[0,51],"content":"The method that is called when the event is raised.","nodes":[{"content":"The method that is called when the event is raised.","pos":[0,51]}]}],"pos":[40439,40491],"yaml":true},{"content":"When overridden in a derived class, returns the method that is called when the event is raised, specifying whether to return non-public methods.","nodes":[{"pos":[0,144],"content":"When overridden in a derived class, returns the method that is called when the event is raised, specifying whether to return non-public methods.","nodes":[{"content":"When overridden in a derived class, returns the method that is called when the event is raised, specifying whether to return non-public methods.","pos":[0,144]}]}],"pos":[41936,42081],"yaml":true},{"content":"This method usually returns `null` for events declared with the C# `event` keyword or the Visual Basic `Event` keyword. This is because the C# and Visual Basic compilers do not generate such a method by default.","nodes":[{"pos":[0,211],"content":"This method usually returns `null` for events declared with the C# `event` keyword or the Visual Basic `Event` keyword. This is because the C# and Visual Basic compilers do not generate such a method by default.","nodes":[{"content":"This method usually returns <ph id=\"ph1\">`null`</ph> for events declared with the C# <ph id=\"ph2\">`event`</ph> keyword or the Visual Basic <ph id=\"ph3\">`Event`</ph> keyword.","pos":[0,119],"source":"This method usually returns `null` for events declared with the C# `event` keyword or the Visual Basic `Event` keyword."},{"content":"This is because the C# and Visual Basic compilers do not generate such a method by default.","pos":[120,211]}]}],"pos":[42092,42304],"yaml":true,"extradata":"MT"},{"content":"`true` if non-public methods can be returned; otherwise, `false`.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">`true`</ph> if non-public methods can be returned; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if non-public methods can be returned; otherwise, `false`."}],"pos":[42487,42555],"yaml":true},{"content":"A `MethodInfo` object that was called when the event was raised.","nodes":[{"pos":[0,64],"content":"A <ph id=\"ph1\">`MethodInfo`</ph> object that was called when the event was raised.","source":"A `MethodInfo` object that was called when the event was raised."}],"pos":[42627,42692],"yaml":true},{"content":"<code>nonPublic</code> is `true`, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.","nodes":[{"pos":[0,171],"content":"<ph id=\"ph1\">&lt;code&gt;nonPublic&lt;/code&gt;</ph> is <ph id=\"ph2\">`true`</ph>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.","source":"<code>nonPublic</code> is `true`, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods."}],"pos":[42864,43036],"yaml":true},{"content":"When overridden in a derived class, retrieves the `MethodInfo` object for removing a method of the event, specifying whether to return non-public methods.","nodes":[{"pos":[0,154],"content":"When overridden in a derived class, retrieves the <ph id=\"ph1\">`MethodInfo`</ph> object for removing a method of the event, specifying whether to return non-public methods.","source":"When overridden in a derived class, retrieves the `MethodInfo` object for removing a method of the event, specifying whether to return non-public methods."}],"pos":[44414,44569],"yaml":true},{"content":"`true` if non-public methods can be returned; otherwise, `false`.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">`true`</ph> if non-public methods can be returned; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if non-public methods can be returned; otherwise, `false`."}],"pos":[44903,44971],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> object representing the method used to remove an event handler delegate from the event source.","nodes":[{"pos":[0,146],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> object representing the method used to remove an event handler delegate from the event source.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> object representing the method used to remove an event handler delegate from the event source."}],"pos":[45043,45190],"yaml":true},{"content":"<code>nonPublic</code> is `true`, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.","nodes":[{"pos":[0,171],"content":"<ph id=\"ph1\">&lt;code&gt;nonPublic&lt;/code&gt;</ph> is <ph id=\"ph2\">`true`</ph>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.","source":"<code>nonPublic</code> is `true`, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods."}],"pos":[45363,45535],"yaml":true},{"content":"Returns the method used to remove an event handler delegate from the event source.","nodes":[{"pos":[0,82],"content":"Returns the method used to remove an event handler delegate from the event source.","nodes":[{"content":"Returns the method used to remove an event handler delegate from the event source.","pos":[0,82]}]}],"pos":[46844,46927],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> object representing the method used to remove an event handler delegate from the event source.","nodes":[{"pos":[0,146],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> object representing the method used to remove an event handler delegate from the event source.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> object representing the method used to remove an event handler delegate from the event source."}],"pos":[47247,47394],"yaml":true},{"content":"Gets a value indicating whether the event is multicast.","nodes":[{"pos":[0,55],"content":"Gets a value indicating whether the event is multicast.","nodes":[{"content":"Gets a value indicating whether the event is multicast.","pos":[0,55]}]}],"pos":[48749,48805],"yaml":true},{"content":"`true` if the delegate is an instance of a multicast delegate; otherwise, `false`.","nodes":[{"pos":[0,82],"content":"<ph id=\"ph1\">`true`</ph> if the delegate is an instance of a multicast delegate; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the delegate is an instance of a multicast delegate; otherwise, `false`."}],"pos":[48927,49012],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[49191,49241],"yaml":true},{"content":"Gets a value indicating whether the `EventInfo` has a name with a special meaning.","nodes":[{"pos":[0,82],"content":"Gets a value indicating whether the <ph id=\"ph1\">`EventInfo`</ph> has a name with a special meaning.","source":"Gets a value indicating whether the `EventInfo` has a name with a special meaning."}],"pos":[50534,50617],"yaml":true},{"content":"This property determines whether the event's name has a special meaning. Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.","nodes":[{"pos":[0,265],"content":"This property determines whether the event's name has a special meaning. Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.","nodes":[{"content":"This property determines whether the event's name has a special meaning. Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.","pos":[0,265],"nodes":[{"content":"This property determines whether the event's name has a special meaning.","pos":[0,72]},{"content":"Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.","pos":[73,265]}]}]}],"pos":[50628,50894],"yaml":true,"extradata":"MT"},{"content":"`true` if this event has a special name; otherwise, `false`.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">`true`</ph> if this event has a special name; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this event has a special name; otherwise, `false`."}],"pos":[51010,51073],"yaml":true},{"content":"Gets a <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is an event.","nodes":[{"pos":[0,104],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberTypes\"&gt;&lt;/xref&gt;</ph> value indicating that this member is an event.","source":"Gets a <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is an event."}],"pos":[52620,52725],"yaml":true},{"content":"This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>. Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes?displayProperty=fullName> only when a given member is an event.","nodes":[{"pos":[0,398],"content":"This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>. Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes?displayProperty=fullName> only when a given member is an event.","nodes":[{"content":"This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>. Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes?displayProperty=fullName> only when a given member is an event.","pos":[0,398],"nodes":[{"content":"This property overrides <ph id=\"ph1\">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.","pos":[0,74],"source":"This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>."},{"content":"Therefore, when you examine a set of <ph id=\"ph1\">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects — for example, the array returned by <ph id=\"ph2\">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — the <ph id=\"ph3\">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property returns <ph id=\"ph4\">&lt;xref:System.Reflection.MemberTypes?displayProperty=fullName&gt;</ph> only when a given member is an event.","pos":[75,398],"source":" Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes?displayProperty=fullName> only when a given member is an event."}]}]}],"pos":[52736,53135],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is an event.","nodes":[{"pos":[0,99],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberTypes\"&gt;&lt;/xref&gt;</ph> value indicating that this member is an event.","source":"A <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is an event."}],"pos":[53297,53397],"yaml":true},{"content":"Indicates whether two <xref href=\"System.Reflection.EventInfo\"></xref> objects are equal.","nodes":[{"pos":[0,89],"content":"Indicates whether two <ph id=\"ph1\">&lt;xref href=\"System.Reflection.EventInfo\"&gt;&lt;/xref&gt;</ph> objects are equal.","source":"Indicates whether two <xref href=\"System.Reflection.EventInfo\"></xref> objects are equal."}],"pos":[54962,55052],"yaml":true},{"content":"The first object to compare.","nodes":[{"pos":[0,28],"content":"The first object to compare.","nodes":[{"content":"The first object to compare.","pos":[0,28]}]}],"pos":[55267,55296],"yaml":true},{"content":"The second object to compare.","nodes":[{"pos":[0,29],"content":"The second object to compare.","nodes":[{"content":"The second object to compare.","pos":[0,29]}]}],"pos":[55371,55401],"yaml":true},{"content":"`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,79],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`."}],"pos":[55459,55541],"yaml":true},{"content":"Indicates whether two <xref href=\"System.Reflection.EventInfo\"></xref> objects are not equal.","nodes":[{"pos":[0,93],"content":"Indicates whether two <ph id=\"ph1\">&lt;xref href=\"System.Reflection.EventInfo\"&gt;&lt;/xref&gt;</ph> objects are not equal.","source":"Indicates whether two <xref href=\"System.Reflection.EventInfo\"></xref> objects are not equal."}],"pos":[56975,57069],"yaml":true},{"content":"The first object to compare.","nodes":[{"pos":[0,28],"content":"The first object to compare.","nodes":[{"content":"The first object to compare.","pos":[0,28]}]}],"pos":[57286,57315],"yaml":true},{"content":"The second object to compare.","nodes":[{"pos":[0,29],"content":"The second object to compare.","nodes":[{"content":"The second object to compare.","pos":[0,29]}]}],"pos":[57390,57420],"yaml":true},{"content":"`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`."}],"pos":[57478,57564],"yaml":true},{"content":"Gets the method that is called when the event is raised, including non-public methods.","nodes":[{"pos":[0,86],"content":"Gets the method that is called when the event is raised, including non-public methods.","nodes":[{"content":"Gets the method that is called when the event is raised, including non-public methods.","pos":[0,86]}]}],"pos":[58773,58860],"yaml":true},{"content":"This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> with a value of `true`.","nodes":[{"pos":[0,123],"content":"This property is the equivalent of calling the <ph id=\"ph1\">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> with a value of <ph id=\"ph2\">`true`</ph>.","source":"This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> with a value of `true`."}],"pos":[58871,58995],"yaml":true,"extradata":"MT"},{"content":"The method that is called when the event is raised.","nodes":[{"pos":[0,51],"content":"The method that is called when the event is raised.","nodes":[{"content":"The method that is called when the event is raised.","pos":[0,51]}]}],"pos":[59155,59207],"yaml":true},{"content":"Removes an event handler from an event source.","nodes":[{"pos":[0,46],"content":"Removes an event handler from an event source.","nodes":[{"content":"Removes an event handler from an event source.","pos":[0,46]}]}],"pos":[60945,60992],"yaml":true},{"content":"This method attempts to remove the delegate that may synchronize this event on the target object.  \n  \n When an event is raised by target, the method or methods encapsulated by `handler` will no longer be invoked.","nodes":[{"pos":[0,97],"content":"This method attempts to remove the delegate that may synchronize this event on the target object.","nodes":[{"content":"This method attempts to remove the delegate that may synchronize this event on the target object.","pos":[0,97]}]},{"pos":[104,213],"content":"When an event is raised by target, the method or methods encapsulated by <ph id=\"ph1\">`handler`</ph> will no longer be invoked.","source":"When an event is raised by target, the method or methods encapsulated by `handler` will no longer be invoked."}],"pos":[61003,61221],"yaml":true,"extradata":"MT"},{"content":"The event source.","nodes":[{"pos":[0,17],"content":"The event source.","nodes":[{"content":"The event source.","pos":[0,17]}]}],"pos":[61396,61414],"yaml":true},{"content":"The delegate to be disassociated from the events raised by target.","nodes":[{"pos":[0,66],"content":"The delegate to be disassociated from the events raised by target.","nodes":[{"content":"The delegate to be disassociated from the events raised by target.","pos":[0,66]}]}],"pos":[61479,61546],"yaml":true},{"content":"The event does not have a public `remove` accessor.","nodes":[{"pos":[0,51],"content":"The event does not have a public <ph id=\"ph1\">`remove`</ph> accessor.","source":"The event does not have a public `remove` accessor."}],"pos":[61730,61782],"yaml":true},{"content":"The handler that was passed in cannot be used.","nodes":[{"pos":[0,46],"content":"The handler that was passed in cannot be used.","nodes":[{"content":"The handler that was passed in cannot be used.","pos":[0,46]}]}],"pos":[61876,61923],"yaml":true},{"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\"System.Exception\"></xref> instead.  \n  \n</p>\n    </block>  \n  \n The <code>target</code> parameter is `null` and the event is not static.  \n  \n -or-  \n  \n The <xref href=\"System.Reflection.EventInfo\"></xref> is not declared on the target.","nodes":[{"pos":[0,310],"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\"System.Exception\"></xref> instead.","nodes":[{"content":"In the <bpt id=\"p1\">[</bpt>.NET for Windows Store apps<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id=\"p2\">[</bpt>Portable Class Library<ept id=\"p2\">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> instead.","pos":[47,310],"source":" In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\"System.Exception\"></xref> instead."}]},{"pos":[316,333],"content":"</p>\n    </block>","nodes":[]},{"pos":[340,412],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph> and the event is not static.","source":"The <code>target</code> parameter is `null` and the event is not static."},{"pos":[419,423],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[430,513],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.EventInfo\"&gt;&lt;/xref&gt;</ph> is not declared on the target.","source":"The <xref href=\"System.Reflection.EventInfo\"></xref> is not declared on the target."}],"pos":[62035,62570],"yaml":true},{"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n The caller does not have access permission to the member.","nodes":[{"pos":[0,349],"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead.","nodes":[{"content":"In the <bpt id=\"p1\">[</bpt>.NET for Windows Store apps<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id=\"p2\">[</bpt>Portable Class Library<ept id=\"p2\">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id=\"ph1\">&lt;xref href=\"System.MemberAccessException\"&gt;&lt;/xref&gt;</ph>, instead.","pos":[47,349],"source":" In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead."}]},{"pos":[355,372],"content":"</p>\n    </block>","nodes":[]},{"pos":[379,436],"content":"The caller does not have access permission to the member.","nodes":[{"content":"The caller does not have access permission to the member.","pos":[0,57]}]}],"pos":[62672,63124],"yaml":true},{"content":"Gets the `MethodInfo` object for removing a method of the event, including non-public methods.","nodes":[{"pos":[0,94],"content":"Gets the <ph id=\"ph1\">`MethodInfo`</ph> object for removing a method of the event, including non-public methods.","source":"Gets the `MethodInfo` object for removing a method of the event, including non-public methods."}],"pos":[64628,64723],"yaml":true},{"content":"This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> with a value of `true`.","nodes":[{"pos":[0,124],"content":"This property is the equivalent of calling the <ph id=\"ph1\">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> with a value of <ph id=\"ph2\">`true`</ph>.","source":"This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> with a value of `true`."}],"pos":[64734,64859],"yaml":true,"extradata":"MT"},{"content":"The `MethodInfo` object for removing a method of the event.","nodes":[{"pos":[0,59],"content":"The <ph id=\"ph1\">`MethodInfo`</ph> object for removing a method of the event.","source":"The `MethodInfo` object for removing a method of the event."}],"pos":[65020,65080],"yaml":true},{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"pos":[0,67],"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","pos":[0,67]}]}],"pos":[67082,67150],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"pos":[0,186],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.","pos":[110,186],"source":" For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library."}]}],"pos":[67161,67348],"yaml":true,"extradata":"MT"},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[67551,67594],"yaml":true},{"content":"Passed-in array of names to be mapped.","nodes":[{"pos":[0,38],"content":"Passed-in array of names to be mapped.","nodes":[{"content":"Passed-in array of names to be mapped.","pos":[0,38]}]}],"pos":[67659,67698],"yaml":true},{"content":"Count of the names to be mapped.","nodes":[{"pos":[0,32],"content":"Count of the names to be mapped.","nodes":[{"content":"Count of the names to be mapped.","pos":[0,32]}]}],"pos":[67760,67793],"yaml":true},{"content":"The locale context in which to interpret the names.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret the names.","nodes":[{"content":"The locale context in which to interpret the names.","pos":[0,51]}]}],"pos":[67853,67905],"yaml":true},{"content":"Caller-allocated array which receives the IDs corresponding to the names.","nodes":[{"pos":[0,73],"content":"Caller-allocated array which receives the IDs corresponding to the names.","nodes":[{"content":"Caller-allocated array which receives the IDs corresponding to the names.","pos":[0,73]}]}],"pos":[67969,68043],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[68260,68343],"yaml":true},{"content":"Returns a <code>T:System.Type</code> object representing the <xref href=\"System.Reflection.EventInfo\"></xref> type.","nodes":[{"pos":[0,115],"content":"Returns a <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T:System.Type</ph><ept id=\"p1\">&lt;/code&gt;</ept> object representing the <ph id=\"ph2\">&lt;xref href=\"System.Reflection.EventInfo\"&gt;&lt;/xref&gt;</ph> type.","source":"Returns a <code>T:System.Type</code> object representing the <xref href=\"System.Reflection.EventInfo\"></xref> type."}],"pos":[69418,69534],"yaml":true},{"content":"A <code>T:System.Type</code> object representing the <xref href=\"System.Reflection.EventInfo\"></xref> type.","nodes":[{"pos":[0,107],"content":"A <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T:System.Type</ph><ept id=\"p1\">&lt;/code&gt;</ept> object representing the <ph id=\"ph2\">&lt;xref href=\"System.Reflection.EventInfo\"&gt;&lt;/xref&gt;</ph> type.","source":"A <code>T:System.Type</code> object representing the <xref href=\"System.Reflection.EventInfo\"></xref> type."}],"pos":[69659,69767],"yaml":true},{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"pos":[0,114],"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","pos":[0,114]}]}],"pos":[71169,71284],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"pos":[0,184],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.","pos":[110,184],"source":" For more information about `IDispatch::GetTypeInfo`, see the MSDN Library."}]}],"pos":[71295,71480],"yaml":true,"extradata":"MT"},{"content":"The type information to return.","nodes":[{"pos":[0,31],"content":"The type information to return.","nodes":[{"content":"The type information to return.","pos":[0,31]}]}],"pos":[71651,71683],"yaml":true},{"content":"The locale identifier for the type information.","nodes":[{"pos":[0,47],"content":"The locale identifier for the type information.","nodes":[{"content":"The locale identifier for the type information.","pos":[0,47]}]}],"pos":[71743,71791],"yaml":true},{"content":"Receives a pointer to the requested type information object.","nodes":[{"pos":[0,60],"content":"Receives a pointer to the requested type information object.","nodes":[{"content":"Receives a pointer to the requested type information object.","pos":[0,60]}]}],"pos":[71854,71915],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[72130,72213],"yaml":true},{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"pos":[0,92],"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","pos":[0,92]}]}],"pos":[73408,73501],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"pos":[0,189],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.","pos":[110,189],"source":" For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library."}]}],"pos":[73512,73702],"yaml":true,"extradata":"MT"},{"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"pos":[0,100],"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"content":"Points to a location that receives the number of type information interfaces provided by the object.","pos":[0,100]}]}],"pos":[73857,73958],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[74178,74261],"yaml":true},{"content":"Provides access to properties and methods exposed by an object.","nodes":[{"pos":[0,63],"content":"Provides access to properties and methods exposed by an object.","nodes":[{"content":"Provides access to properties and methods exposed by an object.","pos":[0,63]}]}],"pos":[75840,75904],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"pos":[0,179],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::Invoke`</ph>, see the MSDN Library.","pos":[110,179],"source":" For more information about `IDispatch::Invoke`, see the MSDN Library."}]}],"pos":[75915,76095],"yaml":true,"extradata":"MT"},{"content":"Identifies the member.","nodes":[{"pos":[0,22],"content":"Identifies the member.","nodes":[{"content":"Identifies the member.","pos":[0,22]}]}],"pos":[76361,76384],"yaml":true},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[76442,76485],"yaml":true},{"content":"The locale context in which to interpret arguments.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret arguments.","nodes":[{"content":"The locale context in which to interpret arguments.","pos":[0,51]}]}],"pos":[76545,76597],"yaml":true},{"content":"Flags describing the context of the call.","nodes":[{"pos":[0,41],"content":"Flags describing the context of the call.","nodes":[{"content":"Flags describing the context of the call.","pos":[0,41]}]}],"pos":[76658,76700],"yaml":true},{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"pos":[0,159],"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","pos":[0,159]}]}],"pos":[76767,76927],"yaml":true},{"content":"Pointer to the location where the result is to be stored.","nodes":[{"pos":[0,57],"content":"Pointer to the location where the result is to be stored.","nodes":[{"content":"Pointer to the location where the result is to be stored.","pos":[0,57]}]}],"pos":[76993,77051],"yaml":true},{"content":"Pointer to a structure that contains exception information.","nodes":[{"pos":[0,59],"content":"Pointer to a structure that contains exception information.","nodes":[{"content":"Pointer to a structure that contains exception information.","pos":[0,59]}]}],"pos":[77117,77177],"yaml":true},{"content":"The index of the first argument that has an error.","nodes":[{"pos":[0,50],"content":"The index of the first argument that has an error.","nodes":[{"content":"The index of the first argument that has an error.","pos":[0,50]}]}],"pos":[77241,77292],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[77502,77585],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.EventInfo\n  commentId: T:System.Reflection.EventInfo\n  id: EventInfo\n  children:\n  - System.Reflection.EventInfo.#ctor\n  - System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\n  - System.Reflection.EventInfo.AddMethod\n  - System.Reflection.EventInfo.Attributes\n  - System.Reflection.EventInfo.Equals(System.Object)\n  - System.Reflection.EventInfo.EventHandlerType\n  - System.Reflection.EventInfo.GetAddMethod\n  - System.Reflection.EventInfo.GetAddMethod(System.Boolean)\n  - System.Reflection.EventInfo.GetHashCode\n  - System.Reflection.EventInfo.GetOtherMethods\n  - System.Reflection.EventInfo.GetOtherMethods(System.Boolean)\n  - System.Reflection.EventInfo.GetRaiseMethod\n  - System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)\n  - System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)\n  - System.Reflection.EventInfo.GetRemoveMethod\n  - System.Reflection.EventInfo.IsMulticast\n  - System.Reflection.EventInfo.IsSpecialName\n  - System.Reflection.EventInfo.MemberType\n  - System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)\n  - System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)\n  - System.Reflection.EventInfo.RaiseMethod\n  - System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)\n  - System.Reflection.EventInfo.RemoveMethod\n  - System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType\n  - System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  langs:\n  - csharp\n  name: EventInfo\n  nameWithType: EventInfo\n  fullName: System.Reflection.EventInfo\n  type: Class\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Discovers the attributes of an event and provides access to event metadata.\n  remarks: \"Use the <xref:System.Reflection.EventInfo> class to inspect events and to hook up event handlers, as shown in the example code for the <xref:System.Reflection.EventInfo.AddEventHandler%2A> method.  \\n  \\n> [!NOTE]\\n>  <xref:System.Reflection.EventInfo> is not intended to be used to raise events. An object raises events as dictated by its internal state.  \\n  \\n Events are used with delegates. An event listener instantiates an event-handler delegate that is invoked whenever the event is raised by an event source. In order to connect to the event source, the event listener adds this delegate to the invocation list on the source. When the event is raised, the invoke method of the event-handler delegate is called. Both multicast and single-cast event notifications are supported. The `Add` and `Remove` methods, as well as the event-handler delegate class associated with an event, must be marked in the metadata.  \\n  \\n Delegates are object-oriented function pointers. In C or C++, a function pointer is a reference to a method. In contrast to the C or C++ function pointer, a delegate contains two references: a reference to a method and a reference to an object that supports the method. Delegates can invoke a method without knowing the class type that declares or inherits the method. Delegates need only know the return type and parameter list of the method.  \\n  \\n The event model works equally well for single-cast and multicast delegates. When the delegate's invoke method is called, only a single object will have a method called on it. A multicast modifier can be applied to a delegate declaration, which allows multiple methods to be called when the invoke method of the delegate is called.  \\n  \\n Calling <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=fullName> on `EventInfo` when the `inherit` parameter of `GetCustomAttributes` is `true` does not walk the type hierarchy. Use <xref:System.Attribute?displayProperty=fullName> to inherit custom attributes.\"\n  example:\n  - \"The following code gets an <xref:System.Reflection.EventInfo> object for the <xref:System.Windows.Forms.Control.Click> event of the <xref:System.Windows.Forms.Button> class.  \\n  \\n [!code-cpp[type_getevent1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevent1/CPP/type_getevent1.cpp#1)]\\n [!code-csharp[type_getevent1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevent1/CS/type_getevent1.cs#1)]\\n [!code-vb[type_getevent1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevent1/VB/type_getevent1.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class EventInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._EventInfo\n  inheritance:\n  - System.Object\n  - System.Reflection.MemberInfo\n  derivedClasses:\n  - System.Runtime.InteropServices.ComAwareEventInfo\n  implements:\n  - System.Runtime.InteropServices._EventInfo\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Reflection.MemberInfo.CustomAttributes\n  - System.Reflection.MemberInfo.DeclaringType\n  - System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.GetCustomAttributesData\n  - System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.MetadataToken\n  - System.Reflection.MemberInfo.Module\n  - System.Reflection.MemberInfo.Name\n  - System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.ReflectedType\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  extensionMethods:\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo)\n  - System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo,System.Boolean)\n  - System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo)\n  - System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo,System.Boolean)\n  - System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo)\n  - System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo,System.Boolean)\n  - System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  attributes:\n  - type: System.Runtime.InteropServices.ClassInterfaceAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.#ctor\n  commentId: M:System.Reflection.EventInfo.#ctor\n  id: '#ctor'\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: EventInfo()\n  nameWithType: EventInfo.EventInfo()\n  fullName: EventInfo.EventInfo()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Initializes a new instance of the `EventInfo` class.\n  syntax:\n    content: protected EventInfo ();\n    parameters: []\n  overload: System.Reflection.EventInfo.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\n  commentId: M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\n  id: AddEventHandler(System.Object,System.Delegate)\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: AddEventHandler(Object, Delegate)\n  nameWithType: EventInfo.AddEventHandler(Object, Delegate)\n  fullName: EventInfo.AddEventHandler(Object, Delegate)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Adds an event handler to an event source.\n  remarks: \"This method attempts to add a delegate to synchronize the event on the target object.  \\n  \\n Each time the event is raised by the target parameter, the method or methods encapsulated by the handler will be invoked.\"\n  example:\n  - \"The following code example shows how to load an assembly, create an instance of a type from the assembly, create an event handler using a dynamic assembly, and hook up the dynamic event handler. All actions are performed using late binding.  \\n  \\n The code example loads System.dll and creates an instance of the <xref:System.Timers.Timer?displayProperty=fullName> class. The example uses the <xref:System.Type.GetEvent%2A?displayProperty=fullName> method to get the <xref:System.Timers.Timer.Elapsed> event, and the <xref:System.Reflection.EventInfo.EventHandlerType%2A> property to get the delegate type for the event.  \\n  \\n The code example gets a <xref:System.Reflection.MethodInfo> for the `Invoke` method of the delegate type, and from the <xref:System.Reflection.MethodInfo> obtains the signature of the delegate. The code example then creates a dynamic assembly with one module containing a single type named `Handler`, and gives the type a `static` method (`Shared` method in Visual Basic) named `DynamicHandler` that will be used to handle the event.  \\n  \\n After the dynamic type is created, the code example gets a <xref:System.Reflection.MethodInfo> for the finished method and uses it to create a delegate instance. This instance is passed to the <xref:System.Reflection.EventInfo.AddEventHandler%2A> method to hook up the event. The program then pauses to allow the event to be raised.  \\n  \\n [!code-cpp[AddEventHandler#1](~/samples/snippets/cpp/VS_Snippets_CLR/AddEventHandler/cpp/source.cpp#1)]\\n [!code-csharp[AddEventHandler#1](~/samples/snippets/csharp/VS_Snippets_CLR/AddEventHandler/cs/source.cs#1)]\\n [!code-vb[AddEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddEventHandler/vb/source.vb#1)]\"\n  syntax:\n    content: public virtual void AddEventHandler (object target, Delegate handler);\n    parameters:\n    - id: target\n      type: System.Object\n      description: The event source.\n    - id: handler\n      type: System.Delegate\n      description: Encapsulates a method or methods to be invoked when the event is raised by the target.\n  overload: System.Reflection.EventInfo.AddEventHandler*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The event does not have a public `add` accessor.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The handler that was passed in cannot be used.\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: \"<block subset=\\\"none\\\" type=\\\"note\\\">\\n      <p>  \\n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\\\"System.MemberAccessException\\\"></xref>, instead.  \\n  \\n</p>\\n    </block>  \\n  \\n The caller does not have access permission to the member.\"\n  - type: System.Reflection.TargetException\n    commentId: T:System.Reflection.TargetException\n    description: \"<block subset=\\\"none\\\" type=\\\"note\\\">\\n      <p>  \\n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\\\"System.Exception\\\"></xref> instead.  \\n  \\n</p>\\n    </block>  \\n  \\n The <code>target</code> parameter is `null` and the event is not static.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Reflection.EventInfo\\\"></xref> is not declared on the target.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.AddMethod\n  commentId: P:System.Reflection.EventInfo.AddMethod\n  id: AddMethod\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: AddMethod\n  nameWithType: EventInfo.AddMethod\n  fullName: EventInfo.AddMethod\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the <xref href=\"System.Reflection.MethodInfo\"></xref> object for the <xref href=\"System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\"></xref> method of the event, including non-public methods.\n  remarks: This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetAddMethod%2A> with a value of `true`.\n  syntax:\n    content: public virtual System.Reflection.MethodInfo AddMethod { get; }\n    return:\n      type: System.Reflection.MethodInfo\n      description: The <xref href=\"System.Reflection.MethodInfo\"></xref> object for the <xref href=\"System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\"></xref> method.\n  overload: System.Reflection.EventInfo.AddMethod*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.Attributes\n  commentId: P:System.Reflection.EventInfo.Attributes\n  id: Attributes\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: Attributes\n  nameWithType: EventInfo.Attributes\n  fullName: EventInfo.Attributes\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the attributes for this event.\n  remarks: The attributes are returned in a 4-byte integer representing a bitmap of the attributes set for the event reflected by this instance.\n  syntax:\n    content: public abstract System.Reflection.EventAttributes Attributes { get; }\n    return:\n      type: System.Reflection.EventAttributes\n      description: The read-only attributes for this event.\n  overload: System.Reflection.EventInfo.Attributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.Equals(System.Object)\n  commentId: M:System.Reflection.EventInfo.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: EventInfo.Equals(Object)\n  fullName: EventInfo.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a value that indicates whether this instance is equal to a specified object.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: An object to compare with this instance, or `null`.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>obj</code> equals the type and value of this instance; otherwise, `false`.'\n  overload: System.Reflection.EventInfo.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.EventHandlerType\n  commentId: P:System.Reflection.EventInfo.EventHandlerType\n  id: EventHandlerType\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: EventHandlerType\n  nameWithType: EventInfo.EventHandlerType\n  fullName: EventInfo.EventHandlerType\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the `Type` object of the underlying event-handler delegate associated with this event.\n  remarks: ''\n  example:\n  - \"The following example uses the <xref:System.Reflection.EventInfo.EventHandlerType%2A> property to discover the delegate type of an event and to display its parameter types.  \\n  \\n The example defines a delegate named `MyDelegate` and an event named `ev` of type `MyDelegate`. The code in the `Main` method discovers the event signature by getting the delegate type of the event, getting the `Invoke` method of the delegate type, and then retrieving and displaying the parameters.  \\n  \\n [!code-cpp[eventarg#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventArg/CPP/eventarg.cpp#1)]\\n [!code-csharp[eventarg#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventArg/CS/eventarg.cs#1)]\\n [!code-vb[eventarg#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventArg/VB/eventarg.vb#1)]\"\n  syntax:\n    content: public virtual Type EventHandlerType { get; }\n    return:\n      type: System.Type\n      description: A read-only `Type` object representing the delegate event handler.\n  overload: System.Reflection.EventInfo.EventHandlerType*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.GetAddMethod\n  commentId: M:System.Reflection.EventInfo.GetAddMethod\n  id: GetAddMethod\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: GetAddMethod()\n  nameWithType: EventInfo.GetAddMethod()\n  fullName: EventInfo.GetAddMethod()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the method used to add an event handler delegate to the event source.\n  remarks: '`GetAddMethod` initializes and adds the event subscribe method. The `AddEventHandler` method is used to add an event-handler delegate to the invocation list of an event source.'\n  example:\n  - \"Typically, the method has the following signature:  \\n  \\n```  \\nadd_<EventName>(<EventHandlerType> handler)  \\n```\"\n  syntax:\n    content: public System.Reflection.MethodInfo GetAddMethod ();\n    parameters: []\n    return:\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> object representing the method used to add an event handler delegate to the event source.\n  overload: System.Reflection.EventInfo.GetAddMethod*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.GetAddMethod(System.Boolean)\n  commentId: M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)\n  id: GetAddMethod(System.Boolean)\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: GetAddMethod(Boolean)\n  nameWithType: EventInfo.GetAddMethod(Boolean)\n  fullName: EventInfo.GetAddMethod(Boolean)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: When overridden in a derived class, retrieves the `MethodInfo` object for the <xref href=\"System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\"></xref> method of the event, specifying whether to return non-public methods.\n  remarks: The `GetAddMethod` initializes and adds the event subscribe method as a Boolean value. The `AddEventHandler` method is used to add an event-handler delegate to the invocation list of an event source.\n  example:\n  - \"Typically, the method has the following signature:  \\n  \\n```  \\nadd_<EventName>(<EventHandlerType> handler)  \\n```\"\n  syntax:\n    content: public abstract System.Reflection.MethodInfo GetAddMethod (bool nonPublic);\n    parameters:\n    - id: nonPublic\n      type: System.Boolean\n      description: '`true` if non-public methods can be returned; otherwise, `false`.'\n    return:\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> object representing the method used to add an event handler delegate to the event source.\n  overload: System.Reflection.EventInfo.GetAddMethod*\n  exceptions:\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: <code>nonPublic</code> is `true`, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.GetHashCode\n  commentId: M:System.Reflection.EventInfo.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: EventInfo.GetHashCode()\n  fullName: EventInfo.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the hash code for this instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer hash code.\n  overload: System.Reflection.EventInfo.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.GetOtherMethods\n  commentId: M:System.Reflection.EventInfo.GetOtherMethods\n  id: GetOtherMethods\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: GetOtherMethods()\n  nameWithType: EventInfo.GetOtherMethods()\n  fullName: EventInfo.GetOtherMethods()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the public methods that have been associated with an event in metadata using the `.other` directive.\n  remarks: \"The metadata for an event can associate four kinds of methods with the event:  \\n  \\n-   The `.addon` directive specifies the method used to add event handlers. Use the <xref:System.Reflection.EventInfo.GetAddMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.  \\n  \\n-   The `.removeon` directive specifies the method used to detach event handlers. Use the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.  \\n  \\n-   The `.fire` directive specifies the method used to raise the event. Use the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.  \\n  \\n-   The `.other` directive specifies any other methods associated with the event. Use the <xref:System.Reflection.EventInfo.GetOtherMethods%2A> method to retrieve an array of <xref:System.Reflection.EventInfo> objects for those methods.  \\n  \\n The methods associated with an event using the `.other` directive have no special significance to the runtime. The C# and Visual Basic compilers do not use the `.other` directive.\"\n  syntax:\n    content: public System.Reflection.MethodInfo[] GetOtherMethods ();\n    parameters: []\n    return:\n      type: System.Reflection.MethodInfo[]\n      description: An array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing the public methods that have been associated with the event in metadata by using the `.other` directive. If there are no such public methods, an empty array is returned.\n  overload: System.Reflection.EventInfo.GetOtherMethods*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.GetOtherMethods(System.Boolean)\n  commentId: M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)\n  id: GetOtherMethods(System.Boolean)\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: GetOtherMethods(Boolean)\n  nameWithType: EventInfo.GetOtherMethods(Boolean)\n  fullName: EventInfo.GetOtherMethods(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the methods that have been associated with the event in metadata using the `.other` directive, specifying whether to include non-public methods.\n  remarks: \"The metadata for an event can associate four kinds of methods with the event:  \\n  \\n-   The `.addon` directive specifies the method used to add event handlers. Use the <xref:System.Reflection.EventInfo.GetAddMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.  \\n  \\n-   The `.removeon` directive specifies the method used to detach event handlers. Use the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for this method.  \\n  \\n-   The `.fire` directive specifies the method used to raise the event. Use the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for this method.  \\n  \\n-   The `.other` directive specifies any other methods associated with the event. Use the <xref:System.Reflection.EventInfo.GetOtherMethods%2A> method to retrieve an array of <xref:System.Reflection.EventInfo> objects for those methods.  \\n  \\n The methods associated with an event using the `.other` directive have no special significance to the runtime. The C# and Visual Basic compilers do not use the `.other` directive.\"\n  syntax:\n    content: public virtual System.Reflection.MethodInfo[] GetOtherMethods (bool nonPublic);\n    parameters:\n    - id: nonPublic\n      type: System.Boolean\n      description: '`true` to include non-public methods; otherwise, `false`.'\n    return:\n      type: System.Reflection.MethodInfo[]\n      description: An array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing methods that have been associated with an event in metadata by using the `.other` directive. If there are no methods matching the specification, an empty array is returned.\n  overload: System.Reflection.EventInfo.GetOtherMethods*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: This method is not implemented.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.GetRaiseMethod\n  commentId: M:System.Reflection.EventInfo.GetRaiseMethod\n  id: GetRaiseMethod\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: GetRaiseMethod()\n  nameWithType: EventInfo.GetRaiseMethod()\n  fullName: EventInfo.GetRaiseMethod()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the method that is called when the event is raised.\n  remarks: This method usually returns `null` for events declared with the C# `event` keyword or the Visual Basic `Event` keyword. This is because the C# and Visual Basic compilers do not generate such a method by default.\n  syntax:\n    content: public System.Reflection.MethodInfo GetRaiseMethod ();\n    parameters: []\n    return:\n      type: System.Reflection.MethodInfo\n      description: The method that is called when the event is raised.\n  overload: System.Reflection.EventInfo.GetRaiseMethod*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)\n  commentId: M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)\n  id: GetRaiseMethod(System.Boolean)\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: GetRaiseMethod(Boolean)\n  nameWithType: EventInfo.GetRaiseMethod(Boolean)\n  fullName: EventInfo.GetRaiseMethod(Boolean)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: When overridden in a derived class, returns the method that is called when the event is raised, specifying whether to return non-public methods.\n  remarks: This method usually returns `null` for events declared with the C# `event` keyword or the Visual Basic `Event` keyword. This is because the C# and Visual Basic compilers do not generate such a method by default.\n  syntax:\n    content: public abstract System.Reflection.MethodInfo GetRaiseMethod (bool nonPublic);\n    parameters:\n    - id: nonPublic\n      type: System.Boolean\n      description: '`true` if non-public methods can be returned; otherwise, `false`.'\n    return:\n      type: System.Reflection.MethodInfo\n      description: A `MethodInfo` object that was called when the event was raised.\n  overload: System.Reflection.EventInfo.GetRaiseMethod*\n  exceptions:\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: <code>nonPublic</code> is `true`, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)\n  commentId: M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)\n  id: GetRemoveMethod(System.Boolean)\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: GetRemoveMethod(Boolean)\n  nameWithType: EventInfo.GetRemoveMethod(Boolean)\n  fullName: EventInfo.GetRemoveMethod(Boolean)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: When overridden in a derived class, retrieves the `MethodInfo` object for removing a method of the event, specifying whether to return non-public methods.\n  remarks: ''\n  example:\n  - \"Typically, the method has the following signature:  \\n  \\n```  \\nremove_<EventName>(<EventHandlerType> handler)  \\n```\"\n  syntax:\n    content: public abstract System.Reflection.MethodInfo GetRemoveMethod (bool nonPublic);\n    parameters:\n    - id: nonPublic\n      type: System.Boolean\n      description: '`true` if non-public methods can be returned; otherwise, `false`.'\n    return:\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> object representing the method used to remove an event handler delegate from the event source.\n  overload: System.Reflection.EventInfo.GetRemoveMethod*\n  exceptions:\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: <code>nonPublic</code> is `true`, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.GetRemoveMethod\n  commentId: M:System.Reflection.EventInfo.GetRemoveMethod\n  id: GetRemoveMethod\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: GetRemoveMethod()\n  nameWithType: EventInfo.GetRemoveMethod()\n  fullName: EventInfo.GetRemoveMethod()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the method used to remove an event handler delegate from the event source.\n  remarks: ''\n  example:\n  - \"Typically, the method has the following signature:  \\n  \\n```  \\nremove_<EventName>(<EventHandlerType> handler)  \\n```\"\n  syntax:\n    content: public System.Reflection.MethodInfo GetRemoveMethod ();\n    parameters: []\n    return:\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> object representing the method used to remove an event handler delegate from the event source.\n  overload: System.Reflection.EventInfo.GetRemoveMethod*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.IsMulticast\n  commentId: P:System.Reflection.EventInfo.IsMulticast\n  id: IsMulticast\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: IsMulticast\n  nameWithType: EventInfo.IsMulticast\n  fullName: EventInfo.IsMulticast\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the event is multicast.\n  syntax:\n    content: public virtual bool IsMulticast { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the delegate is an instance of a multicast delegate; otherwise, `false`.'\n  overload: System.Reflection.EventInfo.IsMulticast*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.IsSpecialName\n  commentId: P:System.Reflection.EventInfo.IsSpecialName\n  id: IsSpecialName\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: IsSpecialName\n  nameWithType: EventInfo.IsSpecialName\n  fullName: EventInfo.IsSpecialName\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the `EventInfo` has a name with a special meaning.\n  remarks: This property determines whether the event's name has a special meaning. Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.\n  syntax:\n    content: public bool IsSpecialName { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this event has a special name; otherwise, `false`.'\n  overload: System.Reflection.EventInfo.IsSpecialName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.MemberType\n  commentId: P:System.Reflection.EventInfo.MemberType\n  id: MemberType\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: MemberType\n  nameWithType: EventInfo.MemberType\n  fullName: EventInfo.MemberType\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is an event.\n  remarks: This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>. Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes?displayProperty=fullName> only when a given member is an event.\n  syntax:\n    content: public override System.Reflection.MemberTypes MemberType { get; }\n    return:\n      type: System.Reflection.MemberTypes\n      description: A <xref href=\"System.Reflection.MemberTypes\"></xref> value indicating that this member is an event.\n  overload: System.Reflection.EventInfo.MemberType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)\n  commentId: M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)\n  id: op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: op_Equality(EventInfo, EventInfo)\n  nameWithType: EventInfo.op_Equality(EventInfo, EventInfo)\n  fullName: EventInfo.op_Equality(EventInfo, EventInfo)\n  type: Operator\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Indicates whether two <xref href=\"System.Reflection.EventInfo\"></xref> objects are equal.\n  syntax:\n    content: public static bool op_Equality (System.Reflection.EventInfo left, System.Reflection.EventInfo right);\n    parameters:\n    - id: left\n      type: System.Reflection.EventInfo\n      description: The first object to compare.\n    - id: right\n      type: System.Reflection.EventInfo\n      description: The second object to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`.'\n  overload: System.Reflection.EventInfo.op_Equality*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)\n  commentId: M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)\n  id: op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: op_Inequality(EventInfo, EventInfo)\n  nameWithType: EventInfo.op_Inequality(EventInfo, EventInfo)\n  fullName: EventInfo.op_Inequality(EventInfo, EventInfo)\n  type: Operator\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Indicates whether two <xref href=\"System.Reflection.EventInfo\"></xref> objects are not equal.\n  syntax:\n    content: public static bool op_Inequality (System.Reflection.EventInfo left, System.Reflection.EventInfo right);\n    parameters:\n    - id: left\n      type: System.Reflection.EventInfo\n      description: The first object to compare.\n    - id: right\n      type: System.Reflection.EventInfo\n      description: The second object to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`.'\n  overload: System.Reflection.EventInfo.op_Inequality*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.RaiseMethod\n  commentId: P:System.Reflection.EventInfo.RaiseMethod\n  id: RaiseMethod\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: RaiseMethod\n  nameWithType: EventInfo.RaiseMethod\n  fullName: EventInfo.RaiseMethod\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the method that is called when the event is raised, including non-public methods.\n  remarks: This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> with a value of `true`.\n  syntax:\n    content: public virtual System.Reflection.MethodInfo RaiseMethod { get; }\n    return:\n      type: System.Reflection.MethodInfo\n      description: The method that is called when the event is raised.\n  overload: System.Reflection.EventInfo.RaiseMethod*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)\n  commentId: M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)\n  id: RemoveEventHandler(System.Object,System.Delegate)\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: RemoveEventHandler(Object, Delegate)\n  nameWithType: EventInfo.RemoveEventHandler(Object, Delegate)\n  fullName: EventInfo.RemoveEventHandler(Object, Delegate)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Removes an event handler from an event source.\n  remarks: \"This method attempts to remove the delegate that may synchronize this event on the target object.  \\n  \\n When an event is raised by target, the method or methods encapsulated by `handler` will no longer be invoked.\"\n  syntax:\n    content: public virtual void RemoveEventHandler (object target, Delegate handler);\n    parameters:\n    - id: target\n      type: System.Object\n      description: The event source.\n    - id: handler\n      type: System.Delegate\n      description: The delegate to be disassociated from the events raised by target.\n  overload: System.Reflection.EventInfo.RemoveEventHandler*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The event does not have a public `remove` accessor.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The handler that was passed in cannot be used.\n  - type: System.Reflection.TargetException\n    commentId: T:System.Reflection.TargetException\n    description: \"<block subset=\\\"none\\\" type=\\\"note\\\">\\n      <p>  \\n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\\\"System.Exception\\\"></xref> instead.  \\n  \\n</p>\\n    </block>  \\n  \\n The <code>target</code> parameter is `null` and the event is not static.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Reflection.EventInfo\\\"></xref> is not declared on the target.\"\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: \"<block subset=\\\"none\\\" type=\\\"note\\\">\\n      <p>  \\n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\\\"System.MemberAccessException\\\"></xref>, instead.  \\n  \\n</p>\\n    </block>  \\n  \\n The caller does not have access permission to the member.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.RemoveMethod\n  commentId: P:System.Reflection.EventInfo.RemoveMethod\n  id: RemoveMethod\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: RemoveMethod\n  nameWithType: EventInfo.RemoveMethod\n  fullName: EventInfo.RemoveMethod\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the `MethodInfo` object for removing a method of the event, including non-public methods.\n  remarks: This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> with a value of `true`.\n  syntax:\n    content: public virtual System.Reflection.MethodInfo RemoveMethod { get; }\n    return:\n      type: System.Reflection.MethodInfo\n      description: The `MethodInfo` object for removing a method of the event.\n  overload: System.Reflection.EventInfo.RemoveMethod*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: _EventInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: EventInfo._EventInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: EventInfo._EventInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Maps a set of names to a corresponding set of dispatch identifiers.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.\n  syntax:\n    content: void _EventInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);\n    parameters:\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: rgszNames\n      type: System.IntPtr\n      description: Passed-in array of names to be mapped.\n    - id: cNames\n      type: System.UInt32\n      description: Count of the names to be mapped.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret the names.\n    - id: rgDispId\n      type: System.IntPtr\n      description: Caller-allocated array which receives the IDs corresponding to the names.\n  overload: System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType\n  commentId: M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType\n  id: System#Runtime#InteropServices#_EventInfo#GetType\n  isEii: true\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: _EventInfo.GetType()\n  nameWithType: EventInfo._EventInfo.GetType()\n  fullName: EventInfo._EventInfo.GetType()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Returns a <code>T:System.Type</code> object representing the <xref href=\"System.Reflection.EventInfo\"></xref> type.\n  syntax:\n    content: Type _EventInfo.GetType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: A <code>T:System.Type</code> object representing the <xref href=\"System.Reflection.EventInfo\"></xref> type.\n  overload: System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: _EventInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: EventInfo._EventInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: EventInfo._EventInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.\n  syntax:\n    content: void _EventInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);\n    parameters:\n    - id: iTInfo\n      type: System.UInt32\n      description: The type information to return.\n    - id: lcid\n      type: System.UInt32\n      description: The locale identifier for the type information.\n    - id: ppTInfo\n      type: System.IntPtr\n      description: Receives a pointer to the requested type information object.\n  overload: System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)\n  commentId: M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)\n  id: System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)\n  isEii: true\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: _EventInfo.GetTypeInfoCount(UInt32)\n  nameWithType: EventInfo._EventInfo.GetTypeInfoCount(UInt32)\n  fullName: EventInfo._EventInfo.GetTypeInfoCount(UInt32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.\n  syntax:\n    content: void _EventInfo.GetTypeInfoCount (out uint pcTInfo);\n    parameters:\n    - id: pcTInfo\n      type: System.UInt32\n      description: Points to a location that receives the number of type information interfaces provided by the object.\n  overload: System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  commentId: M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  id: System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.EventInfo\n  langs:\n  - csharp\n  name: _EventInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: EventInfo._EventInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: EventInfo._EventInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Provides access to properties and methods exposed by an object.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.\n  syntax:\n    content: void _EventInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);\n    parameters:\n    - id: dispIdMember\n      type: System.UInt32\n      description: Identifies the member.\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret arguments.\n    - id: wFlags\n      type: System.Int16\n      description: Flags describing the context of the call.\n    - id: pDispParams\n      type: System.IntPtr\n      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.\n    - id: pVarResult\n      type: System.IntPtr\n      description: Pointer to the location where the result is to be stored.\n    - id: pExcepInfo\n      type: System.IntPtr\n      description: Pointer to a structure that contains exception information.\n    - id: puArgErr\n      type: System.IntPtr\n      description: The index of the first argument that has an error.\n  overload: System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.MethodAccessException\n  parent: System\n  isExternal: false\n  name: MethodAccessException\n  nameWithType: MethodAccessException\n  fullName: System.MethodAccessException\n- uid: System.Reflection.TargetException\n  parent: System.Reflection\n  isExternal: false\n  name: TargetException\n  nameWithType: TargetException\n  fullName: System.Reflection.TargetException\n- uid: System.Security.SecurityException\n  parent: System.Security\n  isExternal: false\n  name: SecurityException\n  nameWithType: SecurityException\n  fullName: System.Security.SecurityException\n- uid: System.NotImplementedException\n  parent: System\n  isExternal: false\n  name: NotImplementedException\n  nameWithType: NotImplementedException\n  fullName: System.NotImplementedException\n- uid: System.Reflection.EventInfo.#ctor\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: EventInfo()\n  nameWithType: EventInfo.EventInfo()\n  fullName: EventInfo.EventInfo()\n- uid: System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: AddEventHandler(Object, Delegate)\n  nameWithType: EventInfo.AddEventHandler(Object, Delegate)\n  fullName: EventInfo.AddEventHandler(Object, Delegate)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Reflection.EventInfo.AddMethod\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: AddMethod\n  nameWithType: EventInfo.AddMethod\n  fullName: EventInfo.AddMethod\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Reflection.EventInfo.Attributes\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: Attributes\n  nameWithType: EventInfo.Attributes\n  fullName: EventInfo.Attributes\n- uid: System.Reflection.EventAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: EventAttributes\n  nameWithType: EventAttributes\n  fullName: System.Reflection.EventAttributes\n- uid: System.Reflection.EventInfo.Equals(System.Object)\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: EventInfo.Equals(Object)\n  fullName: EventInfo.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.EventInfo.EventHandlerType\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: EventHandlerType\n  nameWithType: EventInfo.EventHandlerType\n  fullName: EventInfo.EventHandlerType\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Reflection.EventInfo.GetAddMethod\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: GetAddMethod()\n  nameWithType: EventInfo.GetAddMethod()\n  fullName: EventInfo.GetAddMethod()\n- uid: System.Reflection.EventInfo.GetAddMethod(System.Boolean)\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: GetAddMethod(Boolean)\n  nameWithType: EventInfo.GetAddMethod(Boolean)\n  fullName: EventInfo.GetAddMethod(Boolean)\n- uid: System.Reflection.EventInfo.GetHashCode\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: EventInfo.GetHashCode()\n  fullName: EventInfo.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.EventInfo.GetOtherMethods\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: GetOtherMethods()\n  nameWithType: EventInfo.GetOtherMethods()\n  fullName: EventInfo.GetOtherMethods()\n- uid: System.Reflection.MethodInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo[]\n  nameWithType: MethodInfo[]\n  fullName: System.Reflection.MethodInfo[]\n  spec.csharp:\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    nameWithType: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.EventInfo.GetOtherMethods(System.Boolean)\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: GetOtherMethods(Boolean)\n  nameWithType: EventInfo.GetOtherMethods(Boolean)\n  fullName: EventInfo.GetOtherMethods(Boolean)\n- uid: System.Reflection.EventInfo.GetRaiseMethod\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: GetRaiseMethod()\n  nameWithType: EventInfo.GetRaiseMethod()\n  fullName: EventInfo.GetRaiseMethod()\n- uid: System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: GetRaiseMethod(Boolean)\n  nameWithType: EventInfo.GetRaiseMethod(Boolean)\n  fullName: EventInfo.GetRaiseMethod(Boolean)\n- uid: System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: GetRemoveMethod(Boolean)\n  nameWithType: EventInfo.GetRemoveMethod(Boolean)\n  fullName: EventInfo.GetRemoveMethod(Boolean)\n- uid: System.Reflection.EventInfo.GetRemoveMethod\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: GetRemoveMethod()\n  nameWithType: EventInfo.GetRemoveMethod()\n  fullName: EventInfo.GetRemoveMethod()\n- uid: System.Reflection.EventInfo.IsMulticast\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: IsMulticast\n  nameWithType: EventInfo.IsMulticast\n  fullName: EventInfo.IsMulticast\n- uid: System.Reflection.EventInfo.IsSpecialName\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: IsSpecialName\n  nameWithType: EventInfo.IsSpecialName\n  fullName: EventInfo.IsSpecialName\n- uid: System.Reflection.EventInfo.MemberType\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: MemberType\n  nameWithType: EventInfo.MemberType\n  fullName: EventInfo.MemberType\n- uid: System.Reflection.MemberTypes\n  parent: System.Reflection\n  isExternal: false\n  name: MemberTypes\n  nameWithType: MemberTypes\n  fullName: System.Reflection.MemberTypes\n- uid: System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: op_Equality(EventInfo, EventInfo)\n  nameWithType: EventInfo.op_Equality(EventInfo, EventInfo)\n  fullName: EventInfo.op_Equality(EventInfo, EventInfo)\n- uid: System.Reflection.EventInfo\n  parent: System.Reflection\n  isExternal: false\n  name: EventInfo\n  nameWithType: EventInfo\n  fullName: System.Reflection.EventInfo\n- uid: System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: op_Inequality(EventInfo, EventInfo)\n  nameWithType: EventInfo.op_Inequality(EventInfo, EventInfo)\n  fullName: EventInfo.op_Inequality(EventInfo, EventInfo)\n- uid: System.Reflection.EventInfo.RaiseMethod\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: RaiseMethod\n  nameWithType: EventInfo.RaiseMethod\n  fullName: EventInfo.RaiseMethod\n- uid: System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: RemoveEventHandler(Object, Delegate)\n  nameWithType: EventInfo.RemoveEventHandler(Object, Delegate)\n  fullName: EventInfo.RemoveEventHandler(Object, Delegate)\n- uid: System.Reflection.EventInfo.RemoveMethod\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: RemoveMethod\n  nameWithType: EventInfo.RemoveMethod\n  fullName: EventInfo.RemoveMethod\n- uid: System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: _EventInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: EventInfo._EventInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: EventInfo._EventInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: _EventInfo.GetType()\n  nameWithType: EventInfo._EventInfo.GetType()\n  fullName: EventInfo._EventInfo.GetType()\n- uid: System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: _EventInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: EventInfo._EventInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: EventInfo._EventInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: _EventInfo.GetTypeInfoCount(UInt32)\n  nameWithType: EventInfo._EventInfo.GetTypeInfoCount(UInt32)\n  fullName: EventInfo._EventInfo.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: _EventInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: EventInfo._EventInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: EventInfo._EventInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Reflection.EventInfo.#ctor*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: EventInfo\n  nameWithType: EventInfo.EventInfo\n  fullName: EventInfo.EventInfo\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.AddEventHandler*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: AddEventHandler\n  nameWithType: EventInfo.AddEventHandler\n  fullName: EventInfo.AddEventHandler\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.AddMethod*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: AddMethod\n  nameWithType: EventInfo.AddMethod\n  fullName: EventInfo.AddMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.Attributes*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: Attributes\n  nameWithType: EventInfo.Attributes\n  fullName: EventInfo.Attributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.Equals*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: Equals\n  nameWithType: EventInfo.Equals\n  fullName: EventInfo.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.EventHandlerType*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: EventHandlerType\n  nameWithType: EventInfo.EventHandlerType\n  fullName: EventInfo.EventHandlerType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.GetAddMethod*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: GetAddMethod\n  nameWithType: EventInfo.GetAddMethod\n  fullName: EventInfo.GetAddMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.GetHashCode*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: GetHashCode\n  nameWithType: EventInfo.GetHashCode\n  fullName: EventInfo.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.GetOtherMethods*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: GetOtherMethods\n  nameWithType: EventInfo.GetOtherMethods\n  fullName: EventInfo.GetOtherMethods\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.GetRaiseMethod*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: GetRaiseMethod\n  nameWithType: EventInfo.GetRaiseMethod\n  fullName: EventInfo.GetRaiseMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.GetRemoveMethod*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: GetRemoveMethod\n  nameWithType: EventInfo.GetRemoveMethod\n  fullName: EventInfo.GetRemoveMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.IsMulticast*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: IsMulticast\n  nameWithType: EventInfo.IsMulticast\n  fullName: EventInfo.IsMulticast\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.IsSpecialName*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: IsSpecialName\n  nameWithType: EventInfo.IsSpecialName\n  fullName: EventInfo.IsSpecialName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.MemberType*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: MemberType\n  nameWithType: EventInfo.MemberType\n  fullName: EventInfo.MemberType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.op_Equality*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: op_Equality\n  nameWithType: EventInfo.op_Equality\n  fullName: EventInfo.op_Equality\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.op_Inequality*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: op_Inequality\n  nameWithType: EventInfo.op_Inequality\n  fullName: EventInfo.op_Inequality\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.RaiseMethod*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: RaiseMethod\n  nameWithType: EventInfo.RaiseMethod\n  fullName: EventInfo.RaiseMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.RemoveEventHandler*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: RemoveEventHandler\n  nameWithType: EventInfo.RemoveEventHandler\n  fullName: EventInfo.RemoveEventHandler\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.RemoveMethod*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: RemoveMethod\n  nameWithType: EventInfo.RemoveMethod\n  fullName: EventInfo.RemoveMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: System.Runtime.InteropServices._EventInfo.GetIDsOfNames\n  nameWithType: EventInfo.System.Runtime.InteropServices._EventInfo.GetIDsOfNames\n  fullName: EventInfo.System.Runtime.InteropServices._EventInfo.GetIDsOfNames\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: System.Runtime.InteropServices._EventInfo.GetType\n  nameWithType: EventInfo.System.Runtime.InteropServices._EventInfo.GetType\n  fullName: EventInfo.System.Runtime.InteropServices._EventInfo.GetType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: System.Runtime.InteropServices._EventInfo.GetTypeInfo\n  nameWithType: EventInfo.System.Runtime.InteropServices._EventInfo.GetTypeInfo\n  fullName: EventInfo.System.Runtime.InteropServices._EventInfo.GetTypeInfo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: System.Runtime.InteropServices._EventInfo.GetTypeInfoCount\n  nameWithType: EventInfo.System.Runtime.InteropServices._EventInfo.GetTypeInfoCount\n  fullName: EventInfo.System.Runtime.InteropServices._EventInfo.GetTypeInfoCount\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke*\n  parent: System.Reflection.EventInfo\n  isExternal: false\n  name: System.Runtime.InteropServices._EventInfo.Invoke\n  nameWithType: EventInfo.System.Runtime.InteropServices._EventInfo.Invoke\n  fullName: EventInfo.System.Runtime.InteropServices._EventInfo.Invoke\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventInfo.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Reflection.MemberInfo.CustomAttributes\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: CustomAttributes\n  nameWithType: MemberInfo.CustomAttributes\n  fullName: MemberInfo.CustomAttributes\n- uid: System.Reflection.MemberInfo.DeclaringType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: DeclaringType\n  nameWithType: MemberInfo.DeclaringType\n  fullName: MemberInfo.DeclaringType\n- uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetCustomAttributes(Boolean)\n  nameWithType: MemberInfo.GetCustomAttributes(Boolean)\n  fullName: MemberInfo.GetCustomAttributes(Boolean)\n- uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: MemberInfo.GetCustomAttributes(Type, Boolean)\n  fullName: MemberInfo.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.MemberInfo.GetCustomAttributesData\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetCustomAttributesData()\n  nameWithType: MemberInfo.GetCustomAttributesData()\n  fullName: MemberInfo.GetCustomAttributesData()\n- uid: System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: IsDefined(Type, Boolean)\n  nameWithType: MemberInfo.IsDefined(Type, Boolean)\n  fullName: MemberInfo.IsDefined(Type, Boolean)\n- uid: System.Reflection.MemberInfo.MetadataToken\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MetadataToken\n  nameWithType: MemberInfo.MetadataToken\n  fullName: MemberInfo.MetadataToken\n- uid: System.Reflection.MemberInfo.Module\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Module\n  nameWithType: MemberInfo.Module\n  fullName: MemberInfo.Module\n- uid: System.Reflection.MemberInfo.Name\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Name\n  nameWithType: MemberInfo.Name\n  fullName: MemberInfo.Name\n- uid: System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Equality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Inequality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.ReflectedType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ReflectedType\n  nameWithType: MemberInfo.ReflectedType\n  fullName: MemberInfo.ReflectedType\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetType()\n  nameWithType: MemberInfo._MemberInfo.GetType()\n  fullName: MemberInfo._MemberInfo.GetType()\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfoCount(UInt32)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n  fullName: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo)\n  parent: System.Reflection.EventInfoExtensions\n  isExternal: false\n  name: GetAddMethod(EventInfo)\n  nameWithType: EventInfoExtensions.GetAddMethod(EventInfo)\n  fullName: EventInfoExtensions.GetAddMethod(EventInfo)\n- uid: System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo,System.Boolean)\n  parent: System.Reflection.EventInfoExtensions\n  isExternal: false\n  name: GetAddMethod(EventInfo, Boolean)\n  nameWithType: EventInfoExtensions.GetAddMethod(EventInfo, Boolean)\n  fullName: EventInfoExtensions.GetAddMethod(EventInfo, Boolean)\n- uid: System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo)\n  parent: System.Reflection.EventInfoExtensions\n  isExternal: false\n  name: GetRaiseMethod(EventInfo)\n  nameWithType: EventInfoExtensions.GetRaiseMethod(EventInfo)\n  fullName: EventInfoExtensions.GetRaiseMethod(EventInfo)\n- uid: System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo,System.Boolean)\n  parent: System.Reflection.EventInfoExtensions\n  isExternal: false\n  name: GetRaiseMethod(EventInfo, Boolean)\n  nameWithType: EventInfoExtensions.GetRaiseMethod(EventInfo, Boolean)\n  fullName: EventInfoExtensions.GetRaiseMethod(EventInfo, Boolean)\n- uid: System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo)\n  parent: System.Reflection.EventInfoExtensions\n  isExternal: false\n  name: GetRemoveMethod(EventInfo)\n  nameWithType: EventInfoExtensions.GetRemoveMethod(EventInfo)\n  fullName: EventInfoExtensions.GetRemoveMethod(EventInfo)\n- uid: System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo,System.Boolean)\n  parent: System.Reflection.EventInfoExtensions\n  isExternal: false\n  name: GetRemoveMethod(EventInfo, Boolean)\n  nameWithType: EventInfoExtensions.GetRemoveMethod(EventInfo, Boolean)\n  fullName: EventInfoExtensions.GetRemoveMethod(EventInfo, Boolean)\n- uid: System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: GetMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n- uid: System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: HasMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n- uid: System.Runtime.InteropServices._EventInfo\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: _EventInfo\n  nameWithType: _EventInfo\n  fullName: System.Runtime.InteropServices._EventInfo\n"}