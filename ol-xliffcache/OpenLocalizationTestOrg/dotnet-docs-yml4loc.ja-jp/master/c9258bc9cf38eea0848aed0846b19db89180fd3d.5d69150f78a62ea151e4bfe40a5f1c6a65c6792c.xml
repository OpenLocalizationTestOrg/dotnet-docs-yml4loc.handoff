{"nodes":[{"content":"Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <xref href=\"System.Security.Cryptography.DSA\"></xref> algorithm. This class cannot be inherited.","nodes":[{"pos":[0,194],"content":"Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <xref href=\"System.Security.Cryptography.DSA\"></xref> algorithm. This class cannot be inherited.","nodes":[{"content":"Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;&lt;/xref&gt;</ph> algorithm.","pos":[0,162],"source":"Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <xref href=\"System.Security.Cryptography.DSA\"></xref> algorithm."},{"content":"This class cannot be inherited.","pos":[163,194]}]}],"pos":[3073,3268],"yaml":true},{"content":"You can use the <xref:System.Security.Cryptography.DSACryptoServiceProvider> class to create digital signatures and protect the integrity of your data.  \n  \n To use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest. The sender then encrypts the message digest with the sender's private key to create the sender's personal signature. Upon receiving the message and signature, the receiver decrypts the signature using the sender's public key to recover the message digest and hashes the message using the same hash algorithm that the sender used. If the message digest that the receiver computes exactly matches the message digest received from the sender, the receiver can be sure that the message was not altered while in transit. Note that a signature can be verified by anyone, because the sender's public key is common knowledge.  \n  \n> [!NOTE]\n>  Newer asymmetric algorithms are available. Consider using the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class instead of the <xref:System.Security.Cryptography.DSACryptoServiceProvider> class. Use <xref:System.Security.Cryptography.DSACryptoServiceProvider> only for compatibility with legacy applications and data.  \n  \n This algorithm supports key lengths from 512 bits to 1024 bits in increments of 64 bits.","nodes":[{"pos":[0,151],"content":"You can use the <xref:System.Security.Cryptography.DSACryptoServiceProvider> class to create digital signatures and protect the integrity of your data.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider&gt;</ph> class to create digital signatures and protect the integrity of your data.","pos":[0,151],"source":"You can use the <xref:System.Security.Cryptography.DSACryptoServiceProvider> class to create digital signatures and protect the integrity of your data."}]},{"pos":[158,915],"content":"To use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest. The sender then encrypts the message digest with the sender's private key to create the sender's personal signature. Upon receiving the message and signature, the receiver decrypts the signature using the sender's public key to recover the message digest and hashes the message using the same hash algorithm that the sender used. If the message digest that the receiver computes exactly matches the message digest received from the sender, the receiver can be sure that the message was not altered while in transit. Note that a signature can be verified by anyone, because the sender's public key is common knowledge.","nodes":[{"content":"To use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest. The sender then encrypts the message digest with the sender's private key to create the sender's personal signature. Upon receiving the message and signature, the receiver decrypts the signature using the sender's public key to recover the message digest and hashes the message using the same hash algorithm that the sender used. If the message digest that the receiver computes exactly matches the message digest received from the sender, the receiver can be sure that the message was not altered while in transit. Note that a signature can be verified by anyone, because the sender's public key is common knowledge.","pos":[0,757],"nodes":[{"content":"To use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest.","pos":[0,139]},{"content":"The sender then encrypts the message digest with the sender's private key to create the sender's personal signature.","pos":[140,256]},{"content":"Upon receiving the message and signature, the receiver decrypts the signature using the sender's public key to recover the message digest and hashes the message using the same hash algorithm that the sender used.","pos":[257,469]},{"content":"If the message digest that the receiver computes exactly matches the message digest received from the sender, the receiver can be sure that the message was not altered while in transit.","pos":[470,655]},{"content":"Note that a signature can be verified by anyone, because the sender's public key is common knowledge.","pos":[656,757]}]}]},{"pos":[923,1268],"content":"[!NOTE]\n Newer asymmetric algorithms are available. Consider using the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class instead of the <xref:System.Security.Cryptography.DSACryptoServiceProvider> class. Use <xref:System.Security.Cryptography.DSACryptoServiceProvider> only for compatibility with legacy applications and data.","leadings":["","> "],"nodes":[{"content":" Newer asymmetric algorithms are available. Consider using the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class instead of the <xref:System.Security.Cryptography.DSACryptoServiceProvider> class. Use <xref:System.Security.Cryptography.DSACryptoServiceProvider> only for compatibility with legacy applications and data.","pos":[8,343],"nodes":[{"content":"Newer asymmetric algorithms are available.","pos":[1,43]},{"content":"Consider using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class instead of the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider&gt;</ph> class.","pos":[44,212],"source":" Consider using the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class instead of the <xref:System.Security.Cryptography.DSACryptoServiceProvider> class."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider&gt;</ph> only for compatibility with legacy applications and data.","pos":[213,335],"source":" Use <xref:System.Security.Cryptography.DSACryptoServiceProvider> only for compatibility with legacy applications and data."}]}]},{"pos":[1275,1363],"content":"This algorithm supports key lengths from 512 bits to 1024 bits in increments of 64 bits.","nodes":[{"content":"This algorithm supports key lengths from 512 bits to 1024 bits in increments of 64 bits.","pos":[0,88]}]}],"pos":[3279,4652],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> class.","nodes":[{"pos":[0,115],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> class."}],"pos":[8137,8253],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> class with the specified key size.","nodes":[{"pos":[0,143],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"&gt;&lt;/xref&gt;</ph> class with the specified key size.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> class with the specified key size."}],"pos":[9785,9929],"yaml":true},{"content":"The size of the key for the asymmetric algorithm in bits.","nodes":[{"pos":[0,57],"content":"The size of the key for the asymmetric algorithm in bits.","nodes":[{"content":"The size of the key for the asymmetric algorithm in bits.","pos":[0,57]}]}],"pos":[10081,10139],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> class with the specified parameters for the cryptographic service provider (CSP).","nodes":[{"pos":[0,190],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"&gt;&lt;/xref&gt;</ph> class with the specified parameters for the cryptographic service provider (CSP).","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> class with the specified parameters for the cryptographic service provider (CSP)."}],"pos":[11707,11898],"yaml":true},{"content":"The parameters for the CSP.","nodes":[{"pos":[0,27],"content":"The parameters for the CSP.","nodes":[{"content":"The parameters for the CSP.","pos":[0,27]}]}],"pos":[12121,12149],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> class with the specified key size and parameters for the cryptographic service provider (CSP).","nodes":[{"pos":[0,203],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"&gt;&lt;/xref&gt;</ph> class with the specified key size and parameters for the cryptographic service provider (CSP).","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> class with the specified key size and parameters for the cryptographic service provider (CSP)."}],"pos":[13777,13981],"yaml":true},{"content":"The size of the key for the cryptographic algorithm in bits.","nodes":[{"pos":[0,60],"content":"The size of the key for the cryptographic algorithm in bits.","nodes":[{"content":"The size of the key for the cryptographic algorithm in bits.","pos":[0,60]}]}],"pos":[14188,14249],"yaml":true},{"content":"The parameters for the CSP.","nodes":[{"pos":[0,27],"content":"The parameters for the CSP.","nodes":[{"content":"The parameters for the CSP.","pos":[0,27]}]}],"pos":[14344,14372],"yaml":true},{"content":"The CSP cannot be acquired.  \n  \n -or-  \n  \n The key cannot be created.","nodes":[{"pos":[0,27],"content":"The CSP cannot be acquired.","nodes":[{"content":"The CSP cannot be acquired.","pos":[0,27]}]},{"pos":[34,38],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[45,71],"content":"The key cannot be created.","nodes":[{"content":"The key cannot be created.","pos":[0,26]}]}],"pos":[14607,14685],"yaml":true},{"content":"<code>dwKeySize</code> is out of range.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">&lt;code&gt;dwKeySize&lt;/code&gt;</ph> is out of range.","source":"<code>dwKeySize</code> is out of range."}],"pos":[14799,14839],"yaml":true},{"content":"Creates the <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data.","nodes":[{"pos":[0,99],"content":"Creates the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;&lt;/xref&gt;</ph> signature for the specified data.","source":"Creates the <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data."}],"pos":[16205,16305],"yaml":true},{"content":"The data to be signed.","nodes":[{"pos":[0,22],"content":"The data to be signed.","nodes":[{"content":"The data to be signed.","pos":[0,22]}]}],"pos":[16464,16487],"yaml":true},{"content":"The digital signature for the specified data.","nodes":[{"pos":[0,45],"content":"The digital signature for the specified data.","nodes":[{"content":"The digital signature for the specified data.","pos":[0,45]}]}],"pos":[16544,16590],"yaml":true},{"content":"Gets a <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\"></xref> object that describes additional information about a cryptographic key pair.","nodes":[{"pos":[0,153],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.CspKeyContainerInfo\"&gt;&lt;/xref&gt;</ph> object that describes additional information about a cryptographic key pair.","source":"Gets a <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\"></xref> object that describes additional information about a cryptographic key pair."}],"pos":[18013,18167],"yaml":true},{"content":"Use the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property to retrieve additional information about a cryptographic key pair.  The returned <xref:System.Security.Cryptography.CspKeyContainerInfo> object describes whether the key is exportable, and specifies the key container name, information about the provider, and other information.  \n  \n In cases where a random key is generated, a key container will not be created until you call a method that uses the key.  Some properties of the <xref:System.Security.Cryptography.CspKeyContainerInfo> object returned by the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property will throw a <xref:System.Security.Cryptography.CryptographicException> if a key container has not been created.  To make sure that a key container has been created, call a method such as <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A>, and so on, before you call the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property.","nodes":[{"pos":[0,378],"content":"Use the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property to retrieve additional information about a cryptographic key pair.  The returned <xref:System.Security.Cryptography.CspKeyContainerInfo> object describes whether the key is exportable, and specifies the key container name, information about the provider, and other information.","nodes":[{"content":"Use the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property to retrieve additional information about a cryptographic key pair.  The returned <xref:System.Security.Cryptography.CspKeyContainerInfo> object describes whether the key is exportable, and specifies the key container name, information about the provider, and other information.","pos":[0,378],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A&gt;</ph> property to retrieve additional information about a cryptographic key pair.","pos":[0,167],"source":"Use the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property to retrieve additional information about a cryptographic key pair."},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CspKeyContainerInfo&gt;</ph> object describes whether the key is exportable, and specifies the key container name, information about the provider, and other information.","pos":[169,378],"source":"  The returned <xref:System.Security.Cryptography.CspKeyContainerInfo> object describes whether the key is exportable, and specifies the key container name, information about the provider, and other information."}]}]},{"pos":[385,1314],"content":"In cases where a random key is generated, a key container will not be created until you call a method that uses the key.  Some properties of the <xref:System.Security.Cryptography.CspKeyContainerInfo> object returned by the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property will throw a <xref:System.Security.Cryptography.CryptographicException> if a key container has not been created.  To make sure that a key container has been created, call a method such as <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A>, and so on, before you call the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property.","nodes":[{"content":"In cases where a random key is generated, a key container will not be created until you call a method that uses the key.  Some properties of the <xref:System.Security.Cryptography.CspKeyContainerInfo> object returned by the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property will throw a <xref:System.Security.Cryptography.CryptographicException> if a key container has not been created.  To make sure that a key container has been created, call a method such as <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A>, and so on, before you call the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property.","pos":[0,929],"nodes":[{"content":"In cases where a random key is generated, a key container will not be created until you call a method that uses the key.","pos":[0,120]},{"content":"Some properties of the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CspKeyContainerInfo&gt;</ph> object returned by the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A&gt;</ph> property will throw a <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.CryptographicException&gt;</ph> if a key container has not been created.","pos":[122,429],"source":"  Some properties of the <xref:System.Security.Cryptography.CspKeyContainerInfo> object returned by the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property will throw a <xref:System.Security.Cryptography.CryptographicException> if a key container has not been created."},{"content":"To make sure that a key container has been created, call a method such as <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A&gt;</ph>, and so on, before you call the <ph id=\"ph5\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A&gt;</ph> property.","pos":[431,929],"source":"  To make sure that a key container has been created, call a method such as <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A>, and so on, before you call the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property."}]}]}],"pos":[18178,19497],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\"></xref> object that describes additional information about a cryptographic key pair.","nodes":[{"pos":[0,148],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.CspKeyContainerInfo\"&gt;&lt;/xref&gt;</ph> object that describes additional information about a cryptographic key pair.","source":"A <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\"></xref> object that describes additional information about a cryptographic key pair."}],"pos":[19764,19913],"yaml":true},{"content":"Exports a blob containing the key information associated with a <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> object.","nodes":[{"pos":[0,146],"content":"Exports a blob containing the key information associated with a <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"&gt;&lt;/xref&gt;</ph> object.","source":"Exports a blob containing the key information associated with a <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> object."}],"pos":[22921,23068],"yaml":true},{"content":"The <xref:System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob%2A> method returns a blob containing key information that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).","nodes":[{"pos":[0,204],"content":"The <xref:System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob%2A> method returns a blob containing key information that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob%2A&gt;</ph> method returns a blob containing key information that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).","pos":[0,204],"source":"The <xref:System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob%2A> method returns a blob containing key information that is compatible with the unmanaged Microsoft Cryptographic API (CAPI)."}]}],"pos":[23079,23284],"yaml":true,"extradata":"MT"},{"content":"`true` to include the private key; otherwise, `false`.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">`true`</ph> to include the private key; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to include the private key; otherwise, `false`."}],"pos":[23532,23589],"yaml":true},{"content":"A byte array containing the key information associated with a <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> object.","nodes":[{"pos":[0,144],"content":"A byte array containing the key information associated with a <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"&gt;&lt;/xref&gt;</ph> object.","source":"A byte array containing the key information associated with a <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> object."}],"pos":[23646,23791],"yaml":true},{"content":"Exports the <xref href=\"System.Security.Cryptography.DSAParameters\"></xref>.","nodes":[{"pos":[0,76],"content":"Exports the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSAParameters\"&gt;&lt;/xref&gt;</ph>.","source":"Exports the <xref href=\"System.Security.Cryptography.DSAParameters\"></xref>."}],"pos":[25342,25419],"yaml":true},{"content":"`true` to include private parameters; otherwise, `false`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">`true`</ph> to include private parameters; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to include private parameters; otherwise, `false`."}],"pos":[25648,25708],"yaml":true},{"content":"The parameters for <xref href=\"System.Security.Cryptography.DSA\"></xref>.","nodes":[{"pos":[0,73],"content":"The parameters for <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;&lt;/xref&gt;</ph>.","source":"The parameters for <xref href=\"System.Security.Cryptography.DSA\"></xref>."}],"pos":[25794,25868],"yaml":true},{"content":"The key cannot be exported.","nodes":[{"pos":[0,27],"content":"The key cannot be exported.","nodes":[{"content":"The key cannot be exported.","pos":[0,27]}]}],"pos":[26114,26142],"yaml":true},{"content":"Imports a blob that represents DSA key information.","nodes":[{"pos":[0,51],"content":"Imports a blob that represents DSA key information.","nodes":[{"content":"Imports a blob that represents DSA key information.","pos":[0,51]}]}],"pos":[31648,31700],"yaml":true},{"content":"The <xref:System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob%2A> method initializes the key data of a <xref:System.Security.Cryptography.DSACryptoServiceProvider> object using a blob that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).","nodes":[{"pos":[0,273],"content":"The <xref:System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob%2A> method initializes the key data of a <xref:System.Security.Cryptography.DSACryptoServiceProvider> object using a blob that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob%2A&gt;</ph> method initializes the key data of a <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider&gt;</ph> object using a blob that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).","pos":[0,273],"source":"The <xref:System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob%2A> method initializes the key data of a <xref:System.Security.Cryptography.DSACryptoServiceProvider> object using a blob that is compatible with the unmanaged Microsoft Cryptographic API (CAPI)."}]}],"pos":[31711,31985],"yaml":true,"extradata":"MT"},{"content":"A byte array that represents a DSA key blob.","nodes":[{"pos":[0,44],"content":"A byte array that represents a DSA key blob.","nodes":[{"content":"A byte array that represents a DSA key blob.","pos":[0,44]}]}],"pos":[32198,32243],"yaml":true},{"content":"Imports the specified <xref href=\"System.Security.Cryptography.DSAParameters\"></xref>.","nodes":[{"pos":[0,86],"content":"Imports the specified <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSAParameters\"&gt;&lt;/xref&gt;</ph>.","source":"Imports the specified <xref href=\"System.Security.Cryptography.DSAParameters\"></xref>."}],"pos":[33896,33983],"yaml":true},{"content":"The parameters for <xref href=\"System.Security.Cryptography.DSA\"></xref>.","nodes":[{"pos":[0,73],"content":"The parameters for <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;&lt;/xref&gt;</ph>.","source":"The parameters for <xref href=\"System.Security.Cryptography.DSA\"></xref>."}],"pos":[34212,34286],"yaml":true},{"content":"The cryptographic service provider (CSP) cannot be acquired.  \n  \n -or-  \n  \n The <code>parameters</code> parameter has missing fields.","nodes":[{"pos":[0,60],"content":"The cryptographic service provider (CSP) cannot be acquired.","nodes":[{"content":"The cryptographic service provider (CSP) cannot be acquired.","pos":[0,60]}]},{"pos":[67,71],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[78,135],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameters</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter has missing fields.","source":"The <code>parameters</code> parameter has missing fields."}],"pos":[34532,34674],"yaml":true},{"content":"Gets the name of the key exchange algorithm.","nodes":[{"pos":[0,44],"content":"Gets the name of the key exchange algorithm.","nodes":[{"content":"Gets the name of the key exchange algorithm.","pos":[0,44]}]}],"pos":[36003,36048],"yaml":true},{"content":"The name of the key exchange algorithm.","nodes":[{"pos":[0,39],"content":"The name of the key exchange algorithm.","nodes":[{"content":"The name of the key exchange algorithm.","pos":[0,39]}]}],"pos":[36181,36221],"yaml":true},{"content":"Gets the size of the key used by the asymmetric algorithm in bits.","nodes":[{"pos":[0,66],"content":"Gets the size of the key used by the asymmetric algorithm in bits.","nodes":[{"content":"Gets the size of the key used by the asymmetric algorithm in bits.","pos":[0,66]}]}],"pos":[37577,37644],"yaml":true},{"content":"This algorithm supports key lengths from 512 bits to 1024 bits in increments of 64 bits.  \n  \n The <xref:System.Security.Cryptography.DSACryptoServiceProvider> class does not allow you to change key sizes using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.KeySize%2A> property.  Any value written to this property will fail to update the property without error.  To change the key size, use one of the constructor overloads.","nodes":[{"pos":[0,88],"content":"This algorithm supports key lengths from 512 bits to 1024 bits in increments of 64 bits.","nodes":[{"content":"This algorithm supports key lengths from 512 bits to 1024 bits in increments of 64 bits.","pos":[0,88]}]},{"pos":[95,443],"content":"The <xref:System.Security.Cryptography.DSACryptoServiceProvider> class does not allow you to change key sizes using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.KeySize%2A> property.  Any value written to this property will fail to update the property without error.  To change the key size, use one of the constructor overloads.","nodes":[{"content":"The <xref:System.Security.Cryptography.DSACryptoServiceProvider> class does not allow you to change key sizes using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.KeySize%2A> property.  Any value written to this property will fail to update the property without error.  To change the key size, use one of the constructor overloads.","pos":[0,348],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider&gt;</ph> class does not allow you to change key sizes using the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.KeySize%2A&gt;</ph> property.","pos":[0,201],"source":"The <xref:System.Security.Cryptography.DSACryptoServiceProvider> class does not allow you to change key sizes using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.KeySize%2A> property."},{"content":"Any value written to this property will fail to update the property without error.","pos":[203,285]},{"content":"To change the key size, use one of the constructor overloads.","pos":[287,348]}]}]}],"pos":[37655,38103],"yaml":true,"extradata":"MT"},{"content":"The size of the key used by the asymmetric algorithm.","nodes":[{"pos":[0,53],"content":"The size of the key used by the asymmetric algorithm.","nodes":[{"content":"The size of the key used by the asymmetric algorithm.","pos":[0,53]}]}],"pos":[38219,38273],"yaml":true},{"content":"Gets or sets a value indicating whether the key should be persisted in the cryptographic service provider (CSP).","nodes":[{"pos":[0,112],"content":"Gets or sets a value indicating whether the key should be persisted in the cryptographic service provider (CSP).","nodes":[{"content":"Gets or sets a value indicating whether the key should be persisted in the cryptographic service provider (CSP).","pos":[0,112]}]}],"pos":[40629,40742],"yaml":true},{"content":"Use this property when you want to persist a key in a key container.","nodes":[{"pos":[0,68],"content":"Use this property when you want to persist a key in a key container.","nodes":[{"content":"Use this property when you want to persist a key in a key container.","pos":[0,68]}]}],"pos":[40753,40822],"yaml":true,"extradata":"MT"},{"content":"`true` if the key should be persisted in the CSP; otherwise, `false`.","nodes":[{"pos":[0,69],"content":"<ph id=\"ph1\">`true`</ph> if the key should be persisted in the CSP; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the key should be persisted in the CSP; otherwise, `false`."}],"pos":[40945,41017],"yaml":true},{"content":"Gets a value that indicates whether the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> object contains only a public key.","nodes":[{"pos":[0,149],"content":"Gets a value that indicates whether the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"&gt;&lt;/xref&gt;</ph> object contains only a public key.","source":"Gets a value that indicates whether the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> object contains only a public key."}],"pos":[42386,42536],"yaml":true},{"content":"The <xref:System.Security.Cryptography.DSACryptoServiceProvider> class can be initialized either with a public key only or with both a public and private key.  Use the <xref:System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly%2A> property to determine whether the current instance contains only a public key or both a public and private key.","nodes":[{"pos":[0,354],"content":"The <xref:System.Security.Cryptography.DSACryptoServiceProvider> class can be initialized either with a public key only or with both a public and private key.  Use the <xref:System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly%2A> property to determine whether the current instance contains only a public key or both a public and private key.","nodes":[{"content":"The <xref:System.Security.Cryptography.DSACryptoServiceProvider> class can be initialized either with a public key only or with both a public and private key.  Use the <xref:System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly%2A> property to determine whether the current instance contains only a public key or both a public and private key.","pos":[0,354],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider&gt;</ph> class can be initialized either with a public key only or with both a public and private key.","pos":[0,158],"source":"The <xref:System.Security.Cryptography.DSACryptoServiceProvider> class can be initialized either with a public key only or with both a public and private key."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly%2A&gt;</ph> property to determine whether the current instance contains only a public key or both a public and private key.","pos":[160,354],"source":"  Use the <xref:System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly%2A> property to determine whether the current instance contains only a public key or both a public and private key."}]}]}],"pos":[42547,42902],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> object contains only a public key; otherwise, `false`.","nodes":[{"pos":[0,143],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"&gt;&lt;/xref&gt;</ph> object contains only a public key; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> object contains only a public key; otherwise, `false`."}],"pos":[43082,43228],"yaml":true},{"content":"Gets the name of the signature algorithm.","nodes":[{"pos":[0,41],"content":"Gets the name of the signature algorithm.","nodes":[{"content":"Gets the name of the signature algorithm.","pos":[0,41]}]}],"pos":[44715,44757],"yaml":true},{"content":"The name of the signature algorithm.","nodes":[{"pos":[0,36],"content":"The name of the signature algorithm.","nodes":[{"content":"The name of the signature algorithm.","pos":[0,36]}]}],"pos":[44888,44925],"yaml":true},{"content":"Computes the hash value of the specified byte array and signs the resulting hash value.","nodes":[{"pos":[0,87],"content":"Computes the hash value of the specified byte array and signs the resulting hash value.","nodes":[{"content":"Computes the hash value of the specified byte array and signs the resulting hash value.","pos":[0,87]}]}],"pos":[46352,46440],"yaml":true},{"content":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A> method.  \n  \n <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.","nodes":[{"pos":[0,149],"content":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A> method.","nodes":[{"content":"This method creates a digital signature that is verified using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A&gt;</ph> method.","pos":[0,149],"source":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A> method."}]},{"pos":[156,261],"content":"<xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSA&gt;</ph> uses the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.SHA1&gt;</ph> hash algorithm.","pos":[0,105],"source":"<xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm."}]}],"pos":[46451,46717],"yaml":true,"extradata":"MT"},{"content":"The input data for which to compute the hash.","nodes":[{"pos":[0,45],"content":"The input data for which to compute the hash.","nodes":[{"content":"The input data for which to compute the hash.","pos":[0,45]}]}],"pos":[46858,46904],"yaml":true},{"content":"The <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;&lt;/xref&gt;</ph> signature for the specified data.","source":"The <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data."}],"pos":[46961,47053],"yaml":true},{"content":"Computes the hash value of the specified input stream and signs the resulting hash value.","nodes":[{"pos":[0,89],"content":"Computes the hash value of the specified input stream and signs the resulting hash value.","nodes":[{"content":"Computes the hash value of the specified input stream and signs the resulting hash value.","pos":[0,89]}]}],"pos":[48479,48569],"yaml":true},{"content":"<xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.","nodes":[{"pos":[0,105],"content":"<xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSA&gt;</ph> uses the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.SHA1&gt;</ph> hash algorithm.","pos":[0,105],"source":"<xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm."}]}],"pos":[48580,48686],"yaml":true,"extradata":"MT"},{"content":"The input data for which to compute the hash.","nodes":[{"pos":[0,45],"content":"The input data for which to compute the hash.","nodes":[{"content":"The input data for which to compute the hash.","pos":[0,45]}]}],"pos":[48850,48896],"yaml":true},{"content":"The <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;&lt;/xref&gt;</ph> signature for the specified data.","source":"The <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data."}],"pos":[48953,49045],"yaml":true},{"content":"Signs a byte array from the specified start point to the specified end point.","nodes":[{"pos":[0,77],"content":"Signs a byte array from the specified start point to the specified end point.","nodes":[{"content":"Signs a byte array from the specified start point to the specified end point.","pos":[0,77]}]}],"pos":[50582,50660],"yaml":true},{"content":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A> method.  \n  \n <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.","nodes":[{"pos":[0,149],"content":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A> method.","nodes":[{"content":"This method creates a digital signature that is verified using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A&gt;</ph> method.","pos":[0,149],"source":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A> method."}]},{"pos":[156,261],"content":"<xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSA&gt;</ph> uses the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.SHA1&gt;</ph> hash algorithm.","pos":[0,105],"source":"<xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm."}]}],"pos":[50671,50937],"yaml":true,"extradata":"MT"},{"content":"The input data to sign.","nodes":[{"pos":[0,23],"content":"The input data to sign.","nodes":[{"content":"The input data to sign.","pos":[0,23]}]}],"pos":[51101,51125],"yaml":true},{"content":"The offset into the array from which to begin using data.","nodes":[{"pos":[0,57],"content":"The offset into the array from which to begin using data.","nodes":[{"content":"The offset into the array from which to begin using data.","pos":[0,57]}]}],"pos":[51186,51244],"yaml":true},{"content":"The number of bytes in the array to use as data.","nodes":[{"pos":[0,48],"content":"The number of bytes in the array to use as data.","nodes":[{"content":"The number of bytes in the array to use as data.","pos":[0,48]}]}],"pos":[51304,51353],"yaml":true},{"content":"The <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;&lt;/xref&gt;</ph> signature for the specified data.","source":"The <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data."}],"pos":[51410,51502],"yaml":true},{"content":"Computes the signature for the specified hash value by encrypting it with the private key.","nodes":[{"pos":[0,90],"content":"Computes the signature for the specified hash value by encrypting it with the private key.","nodes":[{"content":"Computes the signature for the specified hash value by encrypting it with the private key.","pos":[0,90]}]}],"pos":[52985,53076],"yaml":true},{"content":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A> method.  \n  \n <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.","nodes":[{"pos":[0,149],"content":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A> method.","nodes":[{"content":"This method creates a digital signature that is verified using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A&gt;</ph> method.","pos":[0,149],"source":"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A> method."}]},{"pos":[156,261],"content":"<xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSA&gt;</ph> uses the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.SHA1&gt;</ph> hash algorithm.","pos":[0,105],"source":"<xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm."}]}],"pos":[53087,53353],"yaml":true,"extradata":"MT"},{"content":"The hash value of the data to be signed.","nodes":[{"pos":[0,40],"content":"The hash value of the data to be signed.","nodes":[{"content":"The hash value of the data to be signed.","pos":[0,40]}]}],"pos":[53508,53549],"yaml":true},{"content":"The name of the hash algorithm used to create the hash value of the data.","nodes":[{"pos":[0,73],"content":"The name of the hash algorithm used to create the hash value of the data.","nodes":[{"content":"The name of the hash algorithm used to create the hash value of the data.","pos":[0,73]}]}],"pos":[53608,53682],"yaml":true},{"content":"The <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified hash value.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;&lt;/xref&gt;</ph> signature for the specified hash value.","source":"The <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified hash value."}],"pos":[53739,53837],"yaml":true},{"content":"The <code>rgbHash</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbHash</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>rgbHash</code> parameter is `null`."}],"pos":[54029,54075],"yaml":true},{"content":"The cryptographic service provider (CSP) cannot be acquired.  \n  \n -or-  \n  \n There is no private key.","nodes":[{"pos":[0,60],"content":"The cryptographic service provider (CSP) cannot be acquired.","nodes":[{"content":"The cryptographic service provider (CSP) cannot be acquired.","pos":[0,60]}]},{"pos":[67,71],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[78,102],"content":"There is no private key.","nodes":[{"content":"There is no private key.","pos":[0,24]}]}],"pos":[54223,54332],"yaml":true},{"content":"Gets or sets a value indicating whether the key should be persisted in the computer's key store instead of the user profile store.","nodes":[{"pos":[0,130],"content":"Gets or sets a value indicating whether the key should be persisted in the computer's key store instead of the user profile store.","nodes":[{"content":"Gets or sets a value indicating whether the key should be persisted in the computer's key store instead of the user profile store.","pos":[0,130]}]}],"pos":[55649,55780],"yaml":true},{"content":"Setting this property to true is equivalent to passing the <xref:System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore%2A> flag to a <xref:System.Security.Cryptography.CspParameters> object. The <xref:System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore%2A> property applies to all code in the current application domain, while the <xref:System.Security.Cryptography.CspParameters> object applies only to classes that explicitly reference it. These settings are useful when impersonating or running under an account whose user profile is not loaded.","nodes":[{"pos":[0,588],"content":"Setting this property to true is equivalent to passing the <xref:System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore%2A> flag to a <xref:System.Security.Cryptography.CspParameters> object. The <xref:System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore%2A> property applies to all code in the current application domain, while the <xref:System.Security.Cryptography.CspParameters> object applies only to classes that explicitly reference it. These settings are useful when impersonating or running under an account whose user profile is not loaded.","nodes":[{"content":"Setting this property to true is equivalent to passing the <xref:System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore%2A> flag to a <xref:System.Security.Cryptography.CspParameters> object. The <xref:System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore%2A> property applies to all code in the current application domain, while the <xref:System.Security.Cryptography.CspParameters> object applies only to classes that explicitly reference it. These settings are useful when impersonating or running under an account whose user profile is not loaded.","pos":[0,588],"nodes":[{"content":"Setting this property to true is equivalent to passing the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore%2A&gt;</ph> flag to a <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.CspParameters&gt;</ph> object.","pos":[0,209],"source":"Setting this property to true is equivalent to passing the <xref:System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore%2A> flag to a <xref:System.Security.Cryptography.CspParameters> object."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore%2A&gt;</ph> property applies to all code in the current application domain, while the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.CspParameters&gt;</ph> object applies only to classes that explicitly reference it.","pos":[210,481],"source":" The <xref:System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore%2A> property applies to all code in the current application domain, while the <xref:System.Security.Cryptography.CspParameters> object applies only to classes that explicitly reference it."},{"content":"These settings are useful when impersonating or running under an account whose user profile is not loaded.","pos":[482,588]}]}]}],"pos":[55791,56380],"yaml":true,"extradata":"MT"},{"content":"`true` if the key should be persisted in the computer key store; otherwise, `false`.","nodes":[{"pos":[0,84],"content":"<ph id=\"ph1\">`true`</ph> if the key should be persisted in the computer key store; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the key should be persisted in the computer key store; otherwise, `false`."}],"pos":[56513,56600],"yaml":true},{"content":"Verifies the specified signature data by comparing it to the signature computed for the specified data.","nodes":[{"pos":[0,103],"content":"Verifies the specified signature data by comparing it to the signature computed for the specified data.","nodes":[{"content":"Verifies the specified signature data by comparing it to the signature computed for the specified data.","pos":[0,103]}]}],"pos":[58105,58209],"yaml":true},{"content":"This method verifies the <xref:System.Security.Cryptography.DSA> digital signature produced by <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>.  \n  \n <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.","nodes":[{"pos":[0,168],"content":"This method verifies the <xref:System.Security.Cryptography.DSA> digital signature produced by <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>.","nodes":[{"content":"This method verifies the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSA&gt;</ph> digital signature produced by <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A&gt;</ph>.","pos":[0,168],"source":"This method verifies the <xref:System.Security.Cryptography.DSA> digital signature produced by <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>."}]},{"pos":[175,280],"content":"<xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSA&gt;</ph> uses the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.SHA1&gt;</ph> hash algorithm.","pos":[0,105],"source":"<xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm."}]}],"pos":[58220,58505],"yaml":true,"extradata":"MT"},{"content":"The data that was signed.","nodes":[{"pos":[0,25],"content":"The data that was signed.","nodes":[{"content":"The data that was signed.","pos":[0,25]}]}],"pos":[58669,58695],"yaml":true},{"content":"The signature data to be verified.","nodes":[{"pos":[0,34],"content":"The signature data to be verified.","nodes":[{"content":"The signature data to be verified.","pos":[0,34]}]}],"pos":[58763,58798],"yaml":true},{"content":"`true` if the signature verifies as valid; otherwise, `false`.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">`true`</ph> if the signature verifies as valid; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the signature verifies as valid; otherwise, `false`."}],"pos":[58856,58921],"yaml":true},{"content":"Verifies the specified signature data by comparing it to the signature computed for the specified hash value.","nodes":[{"pos":[0,109],"content":"Verifies the specified signature data by comparing it to the signature computed for the specified hash value.","nodes":[{"content":"Verifies the specified signature data by comparing it to the signature computed for the specified hash value.","pos":[0,109]}]}],"pos":[60484,60594],"yaml":true},{"content":"This method verifies the <xref:System.Security.Cryptography.DSA> digital signature produced by <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>.  \n  \n If the `str` parameter is `null`, the default hash algorithm (SHA1) is used. The valid hash algorithms is <xref:System.Security.Cryptography.SHA1>.","nodes":[{"pos":[0,168],"content":"This method verifies the <xref:System.Security.Cryptography.DSA> digital signature produced by <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>.","nodes":[{"content":"This method verifies the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.DSA&gt;</ph> digital signature produced by <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A&gt;</ph>.","pos":[0,168],"source":"This method verifies the <xref:System.Security.Cryptography.DSA> digital signature produced by <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>."}]},{"pos":[175,322],"content":"If the `str` parameter is `null`, the default hash algorithm (SHA1) is used. The valid hash algorithms is <xref:System.Security.Cryptography.SHA1>.","nodes":[{"content":"If the <ph id=\"ph1\">`str`</ph> parameter is <ph id=\"ph2\">`null`</ph>, the default hash algorithm (SHA1) is used.","pos":[0,76],"source":"If the `str` parameter is `null`, the default hash algorithm (SHA1) is used."},{"content":"The valid hash algorithms is <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.SHA1&gt;</ph>.","pos":[77,147],"source":" The valid hash algorithms is <xref:System.Security.Cryptography.SHA1>."}]}],"pos":[60605,60932],"yaml":true,"extradata":"MT"},{"content":"The hash value of the data to be signed.","nodes":[{"pos":[0,40],"content":"The hash value of the data to be signed.","nodes":[{"content":"The hash value of the data to be signed.","pos":[0,40]}]}],"pos":[61108,61149],"yaml":true},{"content":"The name of the hash algorithm used to create the hash value of the data.","nodes":[{"pos":[0,73],"content":"The name of the hash algorithm used to create the hash value of the data.","nodes":[{"content":"The name of the hash algorithm used to create the hash value of the data.","pos":[0,73]}]}],"pos":[61208,61282],"yaml":true},{"content":"The signature data to be verified.","nodes":[{"pos":[0,34],"content":"The signature data to be verified.","nodes":[{"content":"The signature data to be verified.","pos":[0,34]}]}],"pos":[61350,61385],"yaml":true},{"content":"`true` if the signature verifies as valid; otherwise, `false`.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">`true`</ph> if the signature verifies as valid; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the signature verifies as valid; otherwise, `false`."}],"pos":[61443,61508],"yaml":true},{"content":"The <code>rgbHash</code> parameter is `null`.  \n  \n -or-  \n  \n The <code>rgbSignature</code> parameter is `null`.","nodes":[{"pos":[0,45],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbHash</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>rgbHash</code> parameter is `null`."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,113],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbSignature</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>rgbSignature</code> parameter is `null`."}],"pos":[61702,61822],"yaml":true},{"content":"The cryptographic service provider (CSP) cannot be acquired.  \n  \n -or-  \n  \n The signature cannot be verified.","nodes":[{"pos":[0,60],"content":"The cryptographic service provider (CSP) cannot be acquired.","nodes":[{"content":"The cryptographic service provider (CSP) cannot be acquired.","pos":[0,60]}]},{"pos":[67,71],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[78,111],"content":"The signature cannot be verified.","nodes":[{"content":"The signature cannot be verified.","pos":[0,33]}]}],"pos":[61970,62088],"yaml":true},{"content":"Verifies the <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data.","nodes":[{"pos":[0,100],"content":"Verifies the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.DSA\"&gt;&lt;/xref&gt;</ph> signature for the specified data.","source":"Verifies the <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data."}],"pos":[63520,63621],"yaml":true},{"content":"The data signed with <code>rgbSignature</code>.","nodes":[{"pos":[0,47],"content":"The data signed with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbSignature</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The data signed with <code>rgbSignature</code>."}],"pos":[63799,63847],"yaml":true},{"content":"The signature to be verified for <code>rgbData</code>.","nodes":[{"pos":[0,54],"content":"The signature to be verified for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rgbData</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The signature to be verified for <code>rgbData</code>."}],"pos":[63915,63970],"yaml":true},{"content":"`true` if <code>rgbSignature</code> matches the signature computed using the specified hash algorithm and key on <code>rgbHash</code>; otherwise, `false`.","nodes":[{"pos":[0,154],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">rgbSignature</ph><ept id=\"p1\">&lt;/code&gt;</ept> matches the signature computed using the specified hash algorithm and key on <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">rgbHash</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>rgbSignature</code> matches the signature computed using the specified hash algorithm and key on <code>rgbHash</code>; otherwise, `false`."}],"pos":[64028,64185],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.DSACryptoServiceProvider\n  commentId: T:System.Security.Cryptography.DSACryptoServiceProvider\n  id: DSACryptoServiceProvider\n  children:\n  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor\n  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)\n  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  - System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)\n  - System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])\n  - System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo\n  - System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)\n  - System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)\n  - System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)\n  - System.Security.Cryptography.DSACryptoServiceProvider.Finalize\n  - System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])\n  - System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)\n  - System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm\n  - System.Security.Cryptography.DSACryptoServiceProvider.KeySize\n  - System.Security.Cryptography.DSACryptoServiceProvider.LegalKeySizes\n  - System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp\n  - System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly\n  - System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm\n  - System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])\n  - System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)\n  - System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)\n  - System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore\n  - System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])\n  - System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])\n  langs:\n  - csharp\n  name: DSACryptoServiceProvider\n  nameWithType: DSACryptoServiceProvider\n  fullName: System.Security.Cryptography.DSACryptoServiceProvider\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <xref href=\"System.Security.Cryptography.DSA\"></xref> algorithm. This class cannot be inherited.\n  remarks: \"You can use the <xref:System.Security.Cryptography.DSACryptoServiceProvider> class to create digital signatures and protect the integrity of your data.  \\n  \\n To use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest. The sender then encrypts the message digest with the sender's private key to create the sender's personal signature. Upon receiving the message and signature, the receiver decrypts the signature using the sender's public key to recover the message digest and hashes the message using the same hash algorithm that the sender used. If the message digest that the receiver computes exactly matches the message digest received from the sender, the receiver can be sure that the message was not altered while in transit. Note that a signature can be verified by anyone, because the sender's public key is common knowledge.  \\n  \\n> [!NOTE]\\n>  Newer asymmetric algorithms are available. Consider using the <xref:System.Security.Cryptography.RSACryptoServiceProvider> class instead of the <xref:System.Security.Cryptography.DSACryptoServiceProvider> class. Use <xref:System.Security.Cryptography.DSACryptoServiceProvider> only for compatibility with legacy applications and data.  \\n  \\n This algorithm supports key lengths from 512 bits to 1024 bits in increments of 64 bits.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class DSACryptoServiceProvider : System.Security.Cryptography.DSA, System.Security.Cryptography.ICspAsymmetricAlgorithm\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricAlgorithm\n  - System.Security.Cryptography.DSA\n  implements:\n  - System.Security.Cryptography.ICspAsymmetricAlgorithm\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.DSA.Create\n  - System.Security.Cryptography.DSA.Create(System.Int32)\n  - System.Security.Cryptography.DSA.Create(System.Security.Cryptography.DSAParameters)\n  - System.Security.Cryptography.DSA.Create(System.String)\n  - System.Security.Cryptography.DSA.FromXmlString(System.String)\n  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.ToXmlString(System.Boolean)\n  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor\n  commentId: M:System.Security.Cryptography.DSACryptoServiceProvider.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: DSACryptoServiceProvider()\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider()\n  fullName: DSACryptoServiceProvider.DSACryptoServiceProvider()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> class.\n  syntax:\n    content: public DSACryptoServiceProvider ();\n    parameters: []\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)\n  commentId: M:System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: DSACryptoServiceProvider(Int32)\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)\n  fullName: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> class with the specified key size.\n  syntax:\n    content: public DSACryptoServiceProvider (int dwKeySize);\n    parameters:\n    - id: dwKeySize\n      type: System.Int32\n      description: The size of the key for the asymmetric algorithm in bits.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  commentId: M:System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  id: '#ctor(System.Security.Cryptography.CspParameters)'\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: DSACryptoServiceProvider(CspParameters)\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)\n  fullName: DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> class with the specified parameters for the cryptographic service provider (CSP).\n  syntax:\n    content: public DSACryptoServiceProvider (System.Security.Cryptography.CspParameters parameters);\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.CspParameters\n      description: The parameters for the CSP.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)\n  commentId: M:System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)\n  id: '#ctor(System.Int32,System.Security.Cryptography.CspParameters)'\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: DSACryptoServiceProvider(Int32, CspParameters)\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32, CspParameters)\n  fullName: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32, CspParameters)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> class with the specified key size and parameters for the cryptographic service provider (CSP).\n  syntax:\n    content: public DSACryptoServiceProvider (int dwKeySize, System.Security.Cryptography.CspParameters parameters);\n    parameters:\n    - id: dwKeySize\n      type: System.Int32\n      description: The size of the key for the cryptographic algorithm in bits.\n    - id: parameters\n      type: System.Security.Cryptography.CspParameters\n      description: The parameters for the CSP.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"The CSP cannot be acquired.  \\n  \\n -or-  \\n  \\n The key cannot be created.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>dwKeySize</code> is out of range.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])\n  commentId: M:System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])\n  id: CreateSignature(System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: CreateSignature(Byte[])\n  nameWithType: DSACryptoServiceProvider.CreateSignature(Byte[])\n  fullName: DSACryptoServiceProvider.CreateSignature(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Creates the <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data.\n  syntax:\n    content: public override byte[] CreateSignature (byte[] rgbHash);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: The data to be signed.\n    return:\n      type: System.Byte[]\n      description: The digital signature for the specified data.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo\n  commentId: P:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo\n  id: CspKeyContainerInfo\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: CspKeyContainerInfo\n  nameWithType: DSACryptoServiceProvider.CspKeyContainerInfo\n  fullName: DSACryptoServiceProvider.CspKeyContainerInfo\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Gets a <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\"></xref> object that describes additional information about a cryptographic key pair.\n  remarks: \"Use the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property to retrieve additional information about a cryptographic key pair.  The returned <xref:System.Security.Cryptography.CspKeyContainerInfo> object describes whether the key is exportable, and specifies the key container name, information about the provider, and other information.  \\n  \\n In cases where a random key is generated, a key container will not be created until you call a method that uses the key.  Some properties of the <xref:System.Security.Cryptography.CspKeyContainerInfo> object returned by the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property will throw a <xref:System.Security.Cryptography.CryptographicException> if a key container has not been created.  To make sure that a key container has been created, call a method such as <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A>, <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A>, and so on, before you call the <xref:System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo%2A> property.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Security.Cryptography.CspKeyContainerInfo CspKeyContainerInfo { get; }\n    return:\n      type: System.Security.Cryptography.CspKeyContainerInfo\n      description: A <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\"></xref> object that describes additional information about a cryptographic key pair.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: DSACryptoServiceProvider.Dispose(Boolean)\n  fullName: DSACryptoServiceProvider.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: ''\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.Dispose*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)\n  commentId: M:System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)\n  id: ExportCspBlob(System.Boolean)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: ExportCspBlob(Boolean)\n  nameWithType: DSACryptoServiceProvider.ExportCspBlob(Boolean)\n  fullName: DSACryptoServiceProvider.ExportCspBlob(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Exports a blob containing the key information associated with a <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> object.\n  remarks: The <xref:System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob%2A> method returns a blob containing key information that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public byte[] ExportCspBlob (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: '`true` to include the private key; otherwise, `false`.'\n    return:\n      type: System.Byte[]\n      description: A byte array containing the key information associated with a <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> object.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)\n  commentId: M:System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)\n  id: ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: ExportParameters(Boolean)\n  nameWithType: DSACryptoServiceProvider.ExportParameters(Boolean)\n  fullName: DSACryptoServiceProvider.ExportParameters(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Exports the <xref href=\"System.Security.Cryptography.DSAParameters\"></xref>.\n  syntax:\n    content: public override System.Security.Cryptography.DSAParameters ExportParameters (bool includePrivateParameters);\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: '`true` to include private parameters; otherwise, `false`.'\n    return:\n      type: System.Security.Cryptography.DSAParameters\n      description: The parameters for <xref href=\"System.Security.Cryptography.DSA\"></xref>.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The key cannot be exported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.Finalize\n  commentId: M:System.Security.Cryptography.DSACryptoServiceProvider.Finalize\n  id: Finalize\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: DSACryptoServiceProvider.Finalize()\n  fullName: DSACryptoServiceProvider.Finalize()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: ~DSACryptoServiceProvider ();\n    parameters: []\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.Finalize*\n  exceptions: []\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: HashData(Stream, HashAlgorithmName)\n  nameWithType: DSACryptoServiceProvider.HashData(Stream, HashAlgorithmName)\n  fullName: DSACryptoServiceProvider.HashData(Stream, HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: ''\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: ''\n    return:\n      type: System.Byte[]\n      description: ''\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.HashData*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType: DSACryptoServiceProvider.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: DSACryptoServiceProvider.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: ''\n    - id: offset\n      type: System.Int32\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: ''\n    return:\n      type: System.Byte[]\n      description: ''\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.HashData*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])\n  commentId: M:System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])\n  id: ImportCspBlob(System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: ImportCspBlob(Byte[])\n  nameWithType: DSACryptoServiceProvider.ImportCspBlob(Byte[])\n  fullName: DSACryptoServiceProvider.ImportCspBlob(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Imports a blob that represents DSA key information.\n  remarks: The <xref:System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob%2A> method initializes the key data of a <xref:System.Security.Cryptography.DSACryptoServiceProvider> object using a blob that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public void ImportCspBlob (byte[] keyBlob);\n    parameters:\n    - id: keyBlob\n      type: System.Byte[]\n      description: A byte array that represents a DSA key blob.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)\n  commentId: M:System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)\n  id: ImportParameters(System.Security.Cryptography.DSAParameters)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: ImportParameters(DSAParameters)\n  nameWithType: DSACryptoServiceProvider.ImportParameters(DSAParameters)\n  fullName: DSACryptoServiceProvider.ImportParameters(DSAParameters)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Imports the specified <xref href=\"System.Security.Cryptography.DSAParameters\"></xref>.\n  syntax:\n    content: public override void ImportParameters (System.Security.Cryptography.DSAParameters parameters);\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.DSAParameters\n      description: The parameters for <xref href=\"System.Security.Cryptography.DSA\"></xref>.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"The cryptographic service provider (CSP) cannot be acquired.  \\n  \\n -or-  \\n  \\n The <code>parameters</code> parameter has missing fields.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm\n  commentId: P:System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm\n  id: KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: KeyExchangeAlgorithm\n  nameWithType: DSACryptoServiceProvider.KeyExchangeAlgorithm\n  fullName: DSACryptoServiceProvider.KeyExchangeAlgorithm\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Gets the name of the key exchange algorithm.\n  syntax:\n    content: public override string KeyExchangeAlgorithm { get; }\n    return:\n      type: System.String\n      description: The name of the key exchange algorithm.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeySize\n  commentId: P:System.Security.Cryptography.DSACryptoServiceProvider.KeySize\n  id: KeySize\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: KeySize\n  nameWithType: DSACryptoServiceProvider.KeySize\n  fullName: DSACryptoServiceProvider.KeySize\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Gets the size of the key used by the asymmetric algorithm in bits.\n  remarks: \"This algorithm supports key lengths from 512 bits to 1024 bits in increments of 64 bits.  \\n  \\n The <xref:System.Security.Cryptography.DSACryptoServiceProvider> class does not allow you to change key sizes using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.KeySize%2A> property.  Any value written to this property will fail to update the property without error.  To change the key size, use one of the constructor overloads.\"\n  syntax:\n    content: public override int KeySize { get; }\n    return:\n      type: System.Int32\n      description: The size of the key used by the asymmetric algorithm.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.KeySize*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.LegalKeySizes\n  commentId: P:System.Security.Cryptography.DSACryptoServiceProvider.LegalKeySizes\n  id: LegalKeySizes\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: LegalKeySizes\n  nameWithType: DSACryptoServiceProvider.LegalKeySizes\n  fullName: DSACryptoServiceProvider.LegalKeySizes\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n      description: ''\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.LegalKeySizes*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp\n  commentId: P:System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp\n  id: PersistKeyInCsp\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: PersistKeyInCsp\n  nameWithType: DSACryptoServiceProvider.PersistKeyInCsp\n  fullName: DSACryptoServiceProvider.PersistKeyInCsp\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Gets or sets a value indicating whether the key should be persisted in the cryptographic service provider (CSP).\n  remarks: Use this property when you want to persist a key in a key container.\n  syntax:\n    content: public bool PersistKeyInCsp { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the key should be persisted in the CSP; otherwise, `false`.'\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly\n  commentId: P:System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly\n  id: PublicOnly\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: PublicOnly\n  nameWithType: DSACryptoServiceProvider.PublicOnly\n  fullName: DSACryptoServiceProvider.PublicOnly\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Gets a value that indicates whether the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> object contains only a public key.\n  remarks: The <xref:System.Security.Cryptography.DSACryptoServiceProvider> class can be initialized either with a public key only or with both a public and private key.  Use the <xref:System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly%2A> property to determine whether the current instance contains only a public key or both a public and private key.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public bool PublicOnly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Security.Cryptography.DSACryptoServiceProvider\"></xref> object contains only a public key; otherwise, `false`.'\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm\n  commentId: P:System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm\n  id: SignatureAlgorithm\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: SignatureAlgorithm\n  nameWithType: DSACryptoServiceProvider.SignatureAlgorithm\n  fullName: DSACryptoServiceProvider.SignatureAlgorithm\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Gets the name of the signature algorithm.\n  syntax:\n    content: public override string SignatureAlgorithm { get; }\n    return:\n      type: System.String\n      description: The name of the signature algorithm.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])\n  commentId: M:System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])\n  id: SignData(System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: SignData(Byte[])\n  nameWithType: DSACryptoServiceProvider.SignData(Byte[])\n  fullName: DSACryptoServiceProvider.SignData(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value of the specified byte array and signs the resulting hash value.\n  remarks: \"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A> method.  \\n  \\n <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.\"\n  syntax:\n    content: public byte[] SignData (byte[] buffer);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The input data for which to compute the hash.\n    return:\n      type: System.Byte[]\n      description: The <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignData*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)\n  commentId: M:System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)\n  id: SignData(System.IO.Stream)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: SignData(Stream)\n  nameWithType: DSACryptoServiceProvider.SignData(Stream)\n  fullName: DSACryptoServiceProvider.SignData(Stream)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Computes the hash value of the specified input stream and signs the resulting hash value.\n  remarks: <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.\n  syntax:\n    content: public byte[] SignData (System.IO.Stream inputStream);\n    parameters:\n    - id: inputStream\n      type: System.IO.Stream\n      description: The input data for which to compute the hash.\n    return:\n      type: System.Byte[]\n      description: The <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignData*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)\n  id: SignData(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: SignData(Byte[], Int32, Int32)\n  nameWithType: DSACryptoServiceProvider.SignData(Byte[], Int32, Int32)\n  fullName: DSACryptoServiceProvider.SignData(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Signs a byte array from the specified start point to the specified end point.\n  remarks: \"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData%2A> method.  \\n  \\n <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.\"\n  syntax:\n    content: public byte[] SignData (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The input data to sign.\n    - id: offset\n      type: System.Int32\n      description: The offset into the array from which to begin using data.\n    - id: count\n      type: System.Int32\n      description: The number of bytes in the array to use as data.\n    return:\n      type: System.Byte[]\n      description: The <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignData*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)\n  commentId: M:System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)\n  id: SignHash(System.Byte[],System.String)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: SignHash(Byte[], String)\n  nameWithType: DSACryptoServiceProvider.SignHash(Byte[], String)\n  fullName: DSACryptoServiceProvider.SignHash(Byte[], String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Computes the signature for the specified hash value by encrypting it with the private key.\n  remarks: \"This method creates a digital signature that is verified using the <xref:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash%2A> method.  \\n  \\n <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.\"\n  syntax:\n    content: public byte[] SignHash (byte[] rgbHash, string str);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: The hash value of the data to be signed.\n    - id: str\n      type: System.String\n      description: The name of the hash algorithm used to create the hash value of the data.\n    return:\n      type: System.Byte[]\n      description: The <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified hash value.\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.SignHash*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>rgbHash</code> parameter is `null`.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"The cryptographic service provider (CSP) cannot be acquired.  \\n  \\n -or-  \\n  \\n There is no private key.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore\n  commentId: P:System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore\n  id: UseMachineKeyStore\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: UseMachineKeyStore\n  nameWithType: DSACryptoServiceProvider.UseMachineKeyStore\n  fullName: DSACryptoServiceProvider.UseMachineKeyStore\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Gets or sets a value indicating whether the key should be persisted in the computer's key store instead of the user profile store.\n  remarks: Setting this property to true is equivalent to passing the <xref:System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore%2A> flag to a <xref:System.Security.Cryptography.CspParameters> object. The <xref:System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore%2A> property applies to all code in the current application domain, while the <xref:System.Security.Cryptography.CspParameters> object applies only to classes that explicitly reference it. These settings are useful when impersonating or running under an account whose user profile is not loaded.\n  syntax:\n    content: public static bool UseMachineKeyStore { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the key should be persisted in the computer key store; otherwise, `false`.'\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])\n  commentId: M:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])\n  id: VerifyData(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: VerifyData(Byte[], Byte[])\n  nameWithType: DSACryptoServiceProvider.VerifyData(Byte[], Byte[])\n  fullName: DSACryptoServiceProvider.VerifyData(Byte[], Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Verifies the specified signature data by comparing it to the signature computed for the specified data.\n  remarks: \"This method verifies the <xref:System.Security.Cryptography.DSA> digital signature produced by <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignData%2A>.  \\n  \\n <xref:System.Security.Cryptography.DSA> uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.\"\n  syntax:\n    content: public bool VerifyData (byte[] rgbData, byte[] rgbSignature);\n    parameters:\n    - id: rgbData\n      type: System.Byte[]\n      description: The data that was signed.\n    - id: rgbSignature\n      type: System.Byte[]\n      description: The signature data to be verified.\n    return:\n      type: System.Boolean\n      description: '`true` if the signature verifies as valid; otherwise, `false`.'\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])\n  commentId: M:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])\n  id: VerifyHash(System.Byte[],System.String,System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: VerifyHash(Byte[], String, Byte[])\n  nameWithType: DSACryptoServiceProvider.VerifyHash(Byte[], String, Byte[])\n  fullName: DSACryptoServiceProvider.VerifyHash(Byte[], String, Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Verifies the specified signature data by comparing it to the signature computed for the specified hash value.\n  remarks: \"This method verifies the <xref:System.Security.Cryptography.DSA> digital signature produced by <xref:System.Security.Cryptography.DSACryptoServiceProvider.SignHash%2A>.  \\n  \\n If the `str` parameter is `null`, the default hash algorithm (SHA1) is used. The valid hash algorithms is <xref:System.Security.Cryptography.SHA1>.\"\n  syntax:\n    content: public bool VerifyHash (byte[] rgbHash, string str, byte[] rgbSignature);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: The hash value of the data to be signed.\n    - id: str\n      type: System.String\n      description: The name of the hash algorithm used to create the hash value of the data.\n    - id: rgbSignature\n      type: System.Byte[]\n      description: The signature data to be verified.\n    return:\n      type: System.Boolean\n      description: '`true` if the signature verifies as valid; otherwise, `false`.'\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>rgbHash</code> parameter is `null`.  \\n  \\n -or-  \\n  \\n The <code>rgbSignature</code> parameter is `null`.\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"The cryptographic service provider (CSP) cannot be acquired.  \\n  \\n -or-  \\n  \\n The signature cannot be verified.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])\n  commentId: M:System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])\n  id: VerifySignature(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  langs:\n  - csharp\n  name: VerifySignature(Byte[], Byte[])\n  nameWithType: DSACryptoServiceProvider.VerifySignature(Byte[], Byte[])\n  fullName: DSACryptoServiceProvider.VerifySignature(Byte[], Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Verifies the <xref href=\"System.Security.Cryptography.DSA\"></xref> signature for the specified data.\n  syntax:\n    content: public override bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: The data signed with <code>rgbSignature</code>.\n    - id: rgbSignature\n      type: System.Byte[]\n      description: The signature to be verified for <code>rgbData</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>rgbSignature</code> matches the signature computed using the specified hash algorithm and key on <code>rgbHash</code>; otherwise, `false`.'\n  overload: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.Cryptography.DSA\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: DSA\n  nameWithType: DSA\n  fullName: System.Security.Cryptography.DSA\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: DSACryptoServiceProvider()\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider()\n  fullName: DSACryptoServiceProvider.DSACryptoServiceProvider()\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: DSACryptoServiceProvider(Int32)\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)\n  fullName: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: DSACryptoServiceProvider(CspParameters)\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)\n  fullName: DSACryptoServiceProvider.DSACryptoServiceProvider(CspParameters)\n- uid: System.Security.Cryptography.CspParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CspParameters\n  nameWithType: CspParameters\n  fullName: System.Security.Cryptography.CspParameters\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: DSACryptoServiceProvider(Int32, CspParameters)\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32, CspParameters)\n  fullName: DSACryptoServiceProvider.DSACryptoServiceProvider(Int32, CspParameters)\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: CreateSignature(Byte[])\n  nameWithType: DSACryptoServiceProvider.CreateSignature(Byte[])\n  fullName: DSACryptoServiceProvider.CreateSignature(Byte[])\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: CspKeyContainerInfo\n  nameWithType: DSACryptoServiceProvider.CspKeyContainerInfo\n  fullName: DSACryptoServiceProvider.CspKeyContainerInfo\n- uid: System.Security.Cryptography.CspKeyContainerInfo\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CspKeyContainerInfo\n  nameWithType: CspKeyContainerInfo\n  fullName: System.Security.Cryptography.CspKeyContainerInfo\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: DSACryptoServiceProvider.Dispose(Boolean)\n  fullName: DSACryptoServiceProvider.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob(System.Boolean)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: ExportCspBlob(Boolean)\n  nameWithType: DSACryptoServiceProvider.ExportCspBlob(Boolean)\n  fullName: DSACryptoServiceProvider.ExportCspBlob(Boolean)\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: ExportParameters(Boolean)\n  nameWithType: DSACryptoServiceProvider.ExportParameters(Boolean)\n  fullName: DSACryptoServiceProvider.ExportParameters(Boolean)\n- uid: System.Security.Cryptography.DSAParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: DSAParameters\n  nameWithType: DSAParameters\n  fullName: System.Security.Cryptography.DSAParameters\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.Finalize\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: Finalize()\n  nameWithType: DSACryptoServiceProvider.Finalize()\n  fullName: DSACryptoServiceProvider.Finalize()\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: HashData(Stream, HashAlgorithmName)\n  nameWithType: DSACryptoServiceProvider.HashData(Stream, HashAlgorithmName)\n  fullName: DSACryptoServiceProvider.HashData(Stream, HashAlgorithmName)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType: DSACryptoServiceProvider.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: DSACryptoServiceProvider.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob(System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: ImportCspBlob(Byte[])\n  nameWithType: DSACryptoServiceProvider.ImportCspBlob(Byte[])\n  fullName: DSACryptoServiceProvider.ImportCspBlob(Byte[])\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: ImportParameters(DSAParameters)\n  nameWithType: DSACryptoServiceProvider.ImportParameters(DSAParameters)\n  fullName: DSACryptoServiceProvider.ImportParameters(DSAParameters)\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: DSACryptoServiceProvider.KeyExchangeAlgorithm\n  fullName: DSACryptoServiceProvider.KeyExchangeAlgorithm\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeySize\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: KeySize\n  nameWithType: DSACryptoServiceProvider.KeySize\n  fullName: DSACryptoServiceProvider.KeySize\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.LegalKeySizes\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: LegalKeySizes\n  nameWithType: DSACryptoServiceProvider.LegalKeySizes\n  fullName: DSACryptoServiceProvider.LegalKeySizes\n- uid: System.Security.Cryptography.KeySizes\n  name: KeySizes\n  nameWithType: KeySizes\n  fullName: System.Security.Cryptography.KeySizes\n- uid: System.Security.Cryptography.KeySizes[]\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: KeySizes[]\n  nameWithType: KeySizes[]\n  fullName: System.Security.Cryptography.KeySizes[]\n  spec.csharp:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    nameWithType: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: PersistKeyInCsp\n  nameWithType: DSACryptoServiceProvider.PersistKeyInCsp\n  fullName: DSACryptoServiceProvider.PersistKeyInCsp\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: PublicOnly\n  nameWithType: DSACryptoServiceProvider.PublicOnly\n  fullName: DSACryptoServiceProvider.PublicOnly\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: DSACryptoServiceProvider.SignatureAlgorithm\n  fullName: DSACryptoServiceProvider.SignatureAlgorithm\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: SignData(Byte[])\n  nameWithType: DSACryptoServiceProvider.SignData(Byte[])\n  fullName: DSACryptoServiceProvider.SignData(Byte[])\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: SignData(Stream)\n  nameWithType: DSACryptoServiceProvider.SignData(Stream)\n  fullName: DSACryptoServiceProvider.SignData(Stream)\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: SignData(Byte[], Int32, Int32)\n  nameWithType: DSACryptoServiceProvider.SignData(Byte[], Int32, Int32)\n  fullName: DSACryptoServiceProvider.SignData(Byte[], Int32, Int32)\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: SignHash(Byte[], String)\n  nameWithType: DSACryptoServiceProvider.SignHash(Byte[], String)\n  fullName: DSACryptoServiceProvider.SignHash(Byte[], String)\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: UseMachineKeyStore\n  nameWithType: DSACryptoServiceProvider.UseMachineKeyStore\n  fullName: DSACryptoServiceProvider.UseMachineKeyStore\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: VerifyData(Byte[], Byte[])\n  nameWithType: DSACryptoServiceProvider.VerifyData(Byte[], Byte[])\n  fullName: DSACryptoServiceProvider.VerifyData(Byte[], Byte[])\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: VerifyHash(Byte[], String, Byte[])\n  nameWithType: DSACryptoServiceProvider.VerifyHash(Byte[], String, Byte[])\n  fullName: DSACryptoServiceProvider.VerifyHash(Byte[], String, Byte[])\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: VerifySignature(Byte[], Byte[])\n  nameWithType: DSACryptoServiceProvider.VerifySignature(Byte[], Byte[])\n  fullName: DSACryptoServiceProvider.VerifySignature(Byte[], Byte[])\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.#ctor*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: DSACryptoServiceProvider\n  nameWithType: DSACryptoServiceProvider.DSACryptoServiceProvider\n  fullName: DSACryptoServiceProvider.DSACryptoServiceProvider\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: CreateSignature\n  nameWithType: DSACryptoServiceProvider.CreateSignature\n  fullName: DSACryptoServiceProvider.CreateSignature\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.CspKeyContainerInfo*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: CspKeyContainerInfo\n  nameWithType: DSACryptoServiceProvider.CspKeyContainerInfo\n  fullName: DSACryptoServiceProvider.CspKeyContainerInfo\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.Dispose*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: Dispose\n  nameWithType: DSACryptoServiceProvider.Dispose\n  fullName: DSACryptoServiceProvider.Dispose\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportCspBlob*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: ExportCspBlob\n  nameWithType: DSACryptoServiceProvider.ExportCspBlob\n  fullName: DSACryptoServiceProvider.ExportCspBlob\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: ExportParameters\n  nameWithType: DSACryptoServiceProvider.ExportParameters\n  fullName: DSACryptoServiceProvider.ExportParameters\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.Finalize*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: Finalize\n  nameWithType: DSACryptoServiceProvider.Finalize\n  fullName: DSACryptoServiceProvider.Finalize\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.HashData*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: HashData\n  nameWithType: DSACryptoServiceProvider.HashData\n  fullName: DSACryptoServiceProvider.HashData\n  monikers:\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportCspBlob*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: ImportCspBlob\n  nameWithType: DSACryptoServiceProvider.ImportCspBlob\n  fullName: DSACryptoServiceProvider.ImportCspBlob\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: ImportParameters\n  nameWithType: DSACryptoServiceProvider.ImportParameters\n  fullName: DSACryptoServiceProvider.ImportParameters\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: KeyExchangeAlgorithm\n  nameWithType: DSACryptoServiceProvider.KeyExchangeAlgorithm\n  fullName: DSACryptoServiceProvider.KeyExchangeAlgorithm\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.KeySize*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: KeySize\n  nameWithType: DSACryptoServiceProvider.KeySize\n  fullName: DSACryptoServiceProvider.KeySize\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.LegalKeySizes*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: LegalKeySizes\n  nameWithType: DSACryptoServiceProvider.LegalKeySizes\n  fullName: DSACryptoServiceProvider.LegalKeySizes\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: PersistKeyInCsp\n  nameWithType: DSACryptoServiceProvider.PersistKeyInCsp\n  fullName: DSACryptoServiceProvider.PersistKeyInCsp\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.PublicOnly*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: PublicOnly\n  nameWithType: DSACryptoServiceProvider.PublicOnly\n  fullName: DSACryptoServiceProvider.PublicOnly\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: DSACryptoServiceProvider.SignatureAlgorithm\n  fullName: DSACryptoServiceProvider.SignatureAlgorithm\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignData*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: SignData\n  nameWithType: DSACryptoServiceProvider.SignData\n  fullName: DSACryptoServiceProvider.SignData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.SignHash*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: SignHash\n  nameWithType: DSACryptoServiceProvider.SignHash\n  fullName: DSACryptoServiceProvider.SignHash\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.UseMachineKeyStore*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: UseMachineKeyStore\n  nameWithType: DSACryptoServiceProvider.UseMachineKeyStore\n  fullName: DSACryptoServiceProvider.UseMachineKeyStore\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyData*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: VerifyData\n  nameWithType: DSACryptoServiceProvider.VerifyData\n  fullName: DSACryptoServiceProvider.VerifyData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: VerifyHash\n  nameWithType: DSACryptoServiceProvider.VerifyHash\n  fullName: DSACryptoServiceProvider.VerifyHash\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature*\n  parent: System.Security.Cryptography.DSACryptoServiceProvider\n  isExternal: false\n  name: VerifySignature\n  nameWithType: DSACryptoServiceProvider.VerifySignature\n  fullName: DSACryptoServiceProvider.VerifySignature\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DSACryptoServiceProvider.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Clear()\n  nameWithType: AsymmetricAlgorithm.Clear()\n  fullName: AsymmetricAlgorithm.Clear()\n- uid: System.Security.Cryptography.DSA.Create\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: Create()\n  nameWithType: DSA.Create()\n  fullName: DSA.Create()\n- uid: System.Security.Cryptography.DSA.Create(System.String)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: Create(String)\n  nameWithType: DSA.Create(String)\n  fullName: DSA.Create(String)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: Dispose()\n  nameWithType: AsymmetricAlgorithm.Dispose()\n  fullName: AsymmetricAlgorithm.Dispose()\n- uid: System.Security.Cryptography.DSA.FromXmlString(System.String)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: FromXmlString(String)\n  nameWithType: DSA.FromXmlString(String)\n  fullName: DSA.FromXmlString(String)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: KeySizeValue\n  nameWithType: AsymmetricAlgorithm.KeySizeValue\n  fullName: AsymmetricAlgorithm.KeySizeValue\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizesValue\n  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue\n  fullName: AsymmetricAlgorithm.LegalKeySizesValue\n- uid: System.Security.Cryptography.DSA.ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: ToXmlString(Boolean)\n  nameWithType: DSA.ToXmlString(Boolean)\n  fullName: DSA.ToXmlString(Boolean)\n- uid: System.Security.Cryptography.DSA.Create(System.Int32)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: Create(Int32)\n  nameWithType: DSA.Create(Int32)\n  fullName: DSA.Create(Int32)\n- uid: System.Security.Cryptography.DSA.Create(System.Security.Cryptography.DSAParameters)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: Create(DSAParameters)\n  nameWithType: DSA.Create(DSAParameters)\n  fullName: DSA.Create(DSAParameters)\n- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: SignData(Byte[], HashAlgorithmName)\n  nameWithType: DSA.SignData(Byte[], HashAlgorithmName)\n  fullName: DSA.SignData(Byte[], HashAlgorithmName)\n- uid: System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: SignData(Stream, HashAlgorithmName)\n  nameWithType: DSA.SignData(Stream, HashAlgorithmName)\n  fullName: DSA.SignData(Stream, HashAlgorithmName)\n- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: SignData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType: DSA.SignData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: DSA.SignData(Byte[], Int32, Int32, HashAlgorithmName)\n- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n  nameWithType: DSA.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n  fullName: DSA.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: VerifyData(Byte[], Byte[], HashAlgorithmName)\n  nameWithType: DSA.VerifyData(Byte[], Byte[], HashAlgorithmName)\n  fullName: DSA.VerifyData(Byte[], Byte[], HashAlgorithmName)\n- uid: System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.DSA\n  isExternal: false\n  name: VerifyData(Stream, Byte[], HashAlgorithmName)\n  nameWithType: DSA.VerifyData(Stream, Byte[], HashAlgorithmName)\n  fullName: DSA.VerifyData(Stream, Byte[], HashAlgorithmName)\n- uid: System.Security.Cryptography.ICspAsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ICspAsymmetricAlgorithm\n  nameWithType: ICspAsymmetricAlgorithm\n  fullName: System.Security.Cryptography.ICspAsymmetricAlgorithm\n"}