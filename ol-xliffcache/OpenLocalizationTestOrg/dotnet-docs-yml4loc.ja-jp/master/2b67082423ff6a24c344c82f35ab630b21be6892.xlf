<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b67082423ff6a24c344c82f35ab630b21be6892</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.UIntPtr.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">799b8ee4211c89856cf5793ecca68483eb6adf3b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b071bfc1a20d777c4fa3a7e0e98232af911c99a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>A platform-specific type that is used to represent a pointer or a handle.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.UIntPtr&gt;</ph> type is designed to be an integer whose size is platform-specific.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>That is, an instance of this type is expected to be 32-bits on 32-bit hardware and operating systems, and 64-bits on 64-bit hardware and operating systems.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> type is CLS-compliant, while the <ph id="ph2">&lt;xref:System.UIntPtr&gt;</ph> type is not.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> type is used in the common language runtime.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.UIntPtr&gt;</ph> type is provided mostly to maintain architectural symmetry with the <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.UIntPtr&gt;</ph> type can be used by languages that support pointers, and as a common means of referring to data between languages that do and do not support pointers.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.UIntPtr&gt;</ph> objects can also be used to hold handles.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>This type implements the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.UIntPtr"&gt;&lt;/xref&gt;</ph> structure using the specified 32-bit pointer or handle.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A pointer or handle contained in a 32-bit unsigned integer.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of <ph id="ph1">&lt;xref href="System.UIntPtr"&gt;&lt;/xref&gt;</ph> using the specified 64-bit pointer or handle.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception is only thrown if the value of <ph id="ph1">`value`</ph> requires more bits than the current platform supports.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A pointer or handle contained in a 64-bit unsigned integer.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>On a 32-bit platform, <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">value</ph><ept id="p1">&lt;/code&gt;</ept> is too large to represent as an <ph id="ph2">&lt;xref href="System.UIntPtr"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of <ph id="ph1">&lt;xref href="System.UIntPtr"&gt;&lt;/xref&gt;</ph> using the specified pointer to an unspecified type.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A pointer to an unspecified type.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Adds an offset to the value of an unsigned pointer.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IntPtr.Add%2A&gt;</ph> method does not throw an exception if the result is too large to represent as a pointer on the specified platform.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the addition operation is performed in an unchecked context.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Languages that do not support operator overloading or custom operators can use this method to add an offset to the value of an unsigned pointer.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The unsigned pointer to add the offset to.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The offset to add.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A new unsigned pointer that reflects the addition of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">offset</ph><ept id="p1">&lt;/code&gt;</ept> to <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">pointer</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Returns a value indicating whether this instance is equal to a specified object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An object to compare with this instance or <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">obj</ph><ept id="p1">&lt;/code&gt;</ept> is an instance of <ph id="ph3">&lt;xref href="System.UIntPtr"&gt;&lt;/xref&gt;</ph> and equals the value of this instance; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Returns the hash code for this instance.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A 32-bit signed integer hash code.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Adds an offset to the value of an unsigned pointer.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.UIntPtr.op_Addition%2A&gt;</ph> method defines the addition operation for <ph id="ph2">&lt;xref:System.UIntPtr&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>It enables code such as the following.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.UIntPtr.op_Addition#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uintptr.op_addition/cs/op_addition1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.UIntPtr.op_Addition#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uintptr.op_addition/vb/op_addition1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Languages that do not support custom operators can call the <ph id="ph1">&lt;xref:System.UIntPtr.Add%2A&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The addition operation does not throw an exception if the result is too large to represent as a pointer on the specified platform.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, it is performed in an unchecked context.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.%2A&gt;</ph> U IntPtr.Add(System.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>U IntPtr,System.Int32)?qualifyHint=True&amp;autoUpgrade=False</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The unsigned pointer to add the offset to.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The offset to add.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A new unsigned pointer that reflects the addition of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">offset</ph><ept id="p1">&lt;/code&gt;</ept> to <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">pointer</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Determines whether two specified instances of <ph id="ph1">&lt;xref href="System.UIntPtr"&gt;&lt;/xref&gt;</ph> are equal.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.UIntPtr.Equals%28System.Object%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The first pointer or handle to compare.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The second pointer or handle to compare.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">value1</ph><ept id="p1">&lt;/code&gt;</ept> equals <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">value2</ph><ept id="p2">&lt;/code&gt;</ept>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Determines whether two specified instances of <ph id="ph1">&lt;xref href="System.UIntPtr"&gt;&lt;/xref&gt;</ph> are not equal.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.UIntPtr.Equals%28System.Object%29?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The first pointer or handle to compare.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The second pointer or handle to compare.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">value1</ph><ept id="p1">&lt;/code&gt;</ept> does not equal <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">value2</ph><ept id="p2">&lt;/code&gt;</ept>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Subtracts an offset from the value of an unsigned pointer.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.UIntPtr.op_Subtraction%2A&gt;</ph> method defines the subtraction operation for <ph id="ph2">&lt;xref:System.UIntPtr&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>It enables code such as the following.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.UIntPtr.op_Addition#2<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.uintptr.op_addition/cs/op_subtraction1.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.UIntPtr.op_Addition#2<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.uintptr.op_addition/vb/op_subtraction1.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Languages that do not support custom operators can call the <ph id="ph1">&lt;xref:System.UIntPtr.Subtract%2A&gt;</ph> method instead.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>The subtraction operation does not throw an exception if the result is too small to represent as a pointer on the specified platform.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, it is performed in an unchecked context.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The unsigned pointer to subtract the offset from.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The offset to subtract.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A new unsigned pointer that reflects the subtraction of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">offset</ph><ept id="p1">&lt;/code&gt;</ept> from <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">pointer</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Gets the size of this instance.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The size of a pointer or handle on this platform, measured in bytes.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The value of this property is 4 on a 32-bit platform, and 8 on a 64-bit platform.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Subtracts an offset from the value of an unsigned pointer.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IntPtr.Subtract%2A&gt;</ph> method does not throw an exception if the result is too small to represent as a pointer on the specified platform.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the subtraction operation is performed in an unchecked context.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>Languages that do not support operator overloading or custom operators can use this method to subtract an offset from the value of an unsigned pointer.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The unsigned pointer to subtract the offset from.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The offset to subtract.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A new unsigned pointer that reflects the subtraction of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">offset</ph><ept id="p1">&lt;/code&gt;</ept> from <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">pointer</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Converts the value of this instance to a pointer to an unspecified type.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A pointer to <ph id="ph1">&lt;xref href="System.Void"&gt;&lt;/xref&gt;</ph>; that is, a pointer to memory containing data of an unspecified type.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Converts the numeric value of this instance to its equivalent string representation.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the <ph id="ph1">&lt;xref:System.IntPtr.Size%2A&gt;</ph> property for this instance is 4, then this method is equivalent to <ph id="ph2">&lt;xref:System.UInt32.ToString%2A&gt;</ph>; otherwise, this method is equivalent to <ph id="ph3">&lt;xref:System.UInt64.ToString%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The string representation of the value of this instance.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Converts the value of this instance to a 32-bit unsigned integer.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>An exception is only thrown if the value of <ph id="ph1">`value`</ph> requires more bits than the current platform supports.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A 32-bit unsigned integer equal to the value of this instance.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>On a 64-bit platform, the value of this instance is too large to represent as a 32-bit unsigned integer.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Converts the value of this instance to a 64-bit unsigned integer.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A 64-bit unsigned integer equal to the value of this instance.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>A read-only field that represents a pointer or handle that has been initialized to zero.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of this field is not equivalent to <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this field to efficiently determine whether an instance of <ph id="ph1">&lt;xref:System.UIntPtr&gt;</ph> has been set to a value other than zero.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, assume the variable, uip, is an instance of <ph id="ph1">&lt;xref:System.UIntPtr&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can determine if it has been set by comparing it to the value returned by a constructor, for example: " <ph id="ph1">`if uip != new UIntPtr(0)...`</ph> ".</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, invoking a constructor to get an unintialized pointer is inefficient.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is better to code either " <ph id="ph1">`if uip != UIntPtr.Zero...`</ph> ", or " <ph id="ph2">`if !UIntPtr.Zero.Equals(uip)...`</ph> ".</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Populates a <ph id="ph1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;&lt;/xref&gt;</ph> object with the data needed to serialize the current <ph id="ph2">&lt;xref href="System.UIntPtr"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method populates the <ph id="ph1">`info`</ph> parameter with the value of the current <ph id="ph2">&lt;xref:System.UIntPtr&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;&lt;/xref&gt;</ph> object to populate with data.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The destination for this serialization.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>(This parameter is not used; specify <ph id="ph1">`null`</ph>.)</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;info&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>