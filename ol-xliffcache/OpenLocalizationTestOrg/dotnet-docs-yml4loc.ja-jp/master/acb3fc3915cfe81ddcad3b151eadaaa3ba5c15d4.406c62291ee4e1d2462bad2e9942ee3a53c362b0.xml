{"nodes":[{"content":"Provides <xref href=\"Microsoft.Win32.RegistryKey\"></xref> objects that represent the root keys in the Windows registry, and `static` methods to access key/value pairs.","nodes":[{"pos":[0,167],"content":"Provides <ph id=\"ph1\">&lt;xref href=\"Microsoft.Win32.RegistryKey\"&gt;&lt;/xref&gt;</ph> objects that represent the root keys in the Windows registry, and <ph id=\"ph2\">`static`</ph> methods to access key/value pairs.","source":"Provides <xref href=\"Microsoft.Win32.RegistryKey\"></xref> objects that represent the root keys in the Windows registry, and `static` methods to access key/value pairs."}],"pos":[905,1073],"yaml":true},{"content":"This class provides the set of standard root keys found in the registry on machines running Windows. The registry is a storage facility for information about applications, users, and default system settings. For example, applications can use the registry for storing information that needs to be preserved after the application is closed, and access that same information when the application is reloaded. For instance, you can store color preferences, screen locations, or the size of the window. You can control this data for each user by storing the information in a different location in the registry.  \n  \n The base, or root <xref:Microsoft.Win32.RegistryKey> instances that are exposed by the `Registry` class delineate the basic storage mechanism for subkeys and values in the registry. All keys are read-only because the registry depends on their existence. The keys exposed by `Registry` are:  \n  \n <xref:Microsoft.Win32.Registry.CurrentUser>  \n Stores information about user preferences.  \n  \n <xref:Microsoft.Win32.Registry.LocalMachine>  \n Stores configuration information for the local machine.  \n  \n <xref:Microsoft.Win32.Registry.ClassesRoot>  \n Stores information about types (and classes) and their properties.  \n  \n <xref:Microsoft.Win32.Registry.Users>  \n Stores information about the default user configuration.  \n  \n <xref:Microsoft.Win32.Registry.PerformanceData>  \n Stores performance information for software components.  \n  \n <xref:Microsoft.Win32.Registry.CurrentConfig>  \n Stores non-user-specific hardware information.  \n  \n <xref:Microsoft.Win32.Registry.DynData>  \n Stores dynamic data.  \n  \n Once you have identified the root key under which you want to store/retrieve information from the registry, you can use the <xref:Microsoft.Win32.RegistryKey> class to add or remove subkeys, and manipulate the values for a given key.  \n  \n Hardware devices can place information in the registry automatically using the Plug and Play interface. Software for installing device drivers can place information in the registry by writing to standard APIs.  \n  \n## Static Methods for Getting and Setting Values  \n In the .NET Framework version 2.0, the <xref:Microsoft.Win32.Registry> class also contains `static`<xref:Microsoft.Win32.Registry.GetValue%2A> and <xref:Microsoft.Win32.Registry.SetValue%2A> methods for setting and retrieving values from registry keys. These methods open and close registry keys each time they are used, so they do not perform as well as analogous methods in the <xref:Microsoft.Win32.RegistryKey> class, when you access a large number of values.  \n  \n The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to set Windows access control security for registry keys, to test the data type of a value before retrieving it, and to delete keys.","nodes":[{"pos":[0,605],"content":"This class provides the set of standard root keys found in the registry on machines running Windows. The registry is a storage facility for information about applications, users, and default system settings. For example, applications can use the registry for storing information that needs to be preserved after the application is closed, and access that same information when the application is reloaded. For instance, you can store color preferences, screen locations, or the size of the window. You can control this data for each user by storing the information in a different location in the registry.","nodes":[{"content":"This class provides the set of standard root keys found in the registry on machines running Windows. The registry is a storage facility for information about applications, users, and default system settings. For example, applications can use the registry for storing information that needs to be preserved after the application is closed, and access that same information when the application is reloaded. For instance, you can store color preferences, screen locations, or the size of the window. You can control this data for each user by storing the information in a different location in the registry.","pos":[0,605],"nodes":[{"content":"This class provides the set of standard root keys found in the registry on machines running Windows.","pos":[0,100]},{"content":"The registry is a storage facility for information about applications, users, and default system settings.","pos":[101,207]},{"content":"For example, applications can use the registry for storing information that needs to be preserved after the application is closed, and access that same information when the application is reloaded.","pos":[208,405]},{"content":"For instance, you can store color preferences, screen locations, or the size of the window.","pos":[406,497]},{"content":"You can control this data for each user by storing the information in a different location in the registry.","pos":[498,605]}]}]},{"pos":[612,901],"content":"The base, or root <xref:Microsoft.Win32.RegistryKey> instances that are exposed by the `Registry` class delineate the basic storage mechanism for subkeys and values in the registry. All keys are read-only because the registry depends on their existence. The keys exposed by `Registry` are:","nodes":[{"content":"The base, or root <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> instances that are exposed by the <ph id=\"ph2\">`Registry`</ph> class delineate the basic storage mechanism for subkeys and values in the registry.","pos":[0,181],"source":"The base, or root <xref:Microsoft.Win32.RegistryKey> instances that are exposed by the `Registry` class delineate the basic storage mechanism for subkeys and values in the registry."},{"content":"All keys are read-only because the registry depends on their existence.","pos":[182,253]},{"content":"The keys exposed by <ph id=\"ph1\">`Registry`</ph> are:","pos":[254,289],"source":" The keys exposed by `Registry` are:"}]},{"pos":[908,997],"content":"<xref:Microsoft.Win32.Registry.CurrentUser>  \n Stores information about user preferences.","nodes":[{"content":"Stores information about user preferences.","pos":[47,89]}]},{"pos":[1004,1107],"content":"<xref:Microsoft.Win32.Registry.LocalMachine>  \n Stores configuration information for the local machine.","nodes":[{"content":"Stores configuration information for the local machine.","pos":[48,103]}]},{"pos":[1114,1227],"content":"<xref:Microsoft.Win32.Registry.ClassesRoot>  \n Stores information about types (and classes) and their properties.","nodes":[{"content":"Stores information about types (and classes) and their properties.","pos":[47,113]}]},{"pos":[1234,1331],"content":"<xref:Microsoft.Win32.Registry.Users>  \n Stores information about the default user configuration.","nodes":[{"content":"Stores information about the default user configuration.","pos":[41,97]}]},{"pos":[1338,1444],"content":"<xref:Microsoft.Win32.Registry.PerformanceData>  \n Stores performance information for software components.","nodes":[{"content":"Stores performance information for software components.","pos":[51,106]}]},{"pos":[1451,1546],"content":"<xref:Microsoft.Win32.Registry.CurrentConfig>  \n Stores non-user-specific hardware information.","nodes":[{"content":"Stores non-user-specific hardware information.","pos":[49,95]}]},{"pos":[1553,1616],"content":"<xref:Microsoft.Win32.Registry.DynData>  \n Stores dynamic data.","nodes":[{"content":"Stores dynamic data.","pos":[43,63]}]},{"pos":[1623,1856],"content":"Once you have identified the root key under which you want to store/retrieve information from the registry, you can use the <xref:Microsoft.Win32.RegistryKey> class to add or remove subkeys, and manipulate the values for a given key.","nodes":[{"content":"Once you have identified the root key under which you want to store/retrieve information from the registry, you can use the <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> class to add or remove subkeys, and manipulate the values for a given key.","pos":[0,233],"source":"Once you have identified the root key under which you want to store/retrieve information from the registry, you can use the <xref:Microsoft.Win32.RegistryKey> class to add or remove subkeys, and manipulate the values for a given key."}]},{"pos":[1863,2072],"content":"Hardware devices can place information in the registry automatically using the Plug and Play interface. Software for installing device drivers can place information in the registry by writing to standard APIs.","nodes":[{"content":"Hardware devices can place information in the registry automatically using the Plug and Play interface. Software for installing device drivers can place information in the registry by writing to standard APIs.","pos":[0,209],"nodes":[{"content":"Hardware devices can place information in the registry automatically using the Plug and Play interface.","pos":[0,103]},{"content":"Software for installing device drivers can place information in the registry by writing to standard APIs.","pos":[104,209]}]}]},{"pos":[2081,2126],"content":"Static Methods for Getting and Setting Values","linkify":"Static Methods for Getting and Setting Values","nodes":[{"content":"Static Methods for Getting and Setting Values","pos":[0,45]}]},{"pos":[2130,2593],"content":"In the .NET Framework version 2.0, the <xref:Microsoft.Win32.Registry> class also contains `static`<xref:Microsoft.Win32.Registry.GetValue%2A> and <xref:Microsoft.Win32.Registry.SetValue%2A> methods for setting and retrieving values from registry keys. These methods open and close registry keys each time they are used, so they do not perform as well as analogous methods in the <xref:Microsoft.Win32.RegistryKey> class, when you access a large number of values.","nodes":[{"content":"In the .NET Framework version 2.0, the <ph id=\"ph1\">&lt;xref:Microsoft.Win32.Registry&gt;</ph> class also contains <ph id=\"ph2\">`static`</ph><ph id=\"ph3\">&lt;xref:Microsoft.Win32.Registry.GetValue%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:Microsoft.Win32.Registry.SetValue%2A&gt;</ph> methods for setting and retrieving values from registry keys.","pos":[0,252],"source":"In the .NET Framework version 2.0, the <xref:Microsoft.Win32.Registry> class also contains `static`<xref:Microsoft.Win32.Registry.GetValue%2A> and <xref:Microsoft.Win32.Registry.SetValue%2A> methods for setting and retrieving values from registry keys."},{"content":"These methods open and close registry keys each time they are used, so they do not perform as well as analogous methods in the <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> class, when you access a large number of values.","pos":[253,463],"source":" These methods open and close registry keys each time they are used, so they do not perform as well as analogous methods in the <xref:Microsoft.Win32.RegistryKey> class, when you access a large number of values."}]},{"pos":[2600,2814],"content":"The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to set Windows access control security for registry keys, to test the data type of a value before retrieving it, and to delete keys.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> class also provides methods that allow you to set Windows access control security for registry keys, to test the data type of a value before retrieving it, and to delete keys.","pos":[0,214],"source":"The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to set Windows access control security for registry keys, to test the data type of a value before retrieving it, and to delete keys."}]}],"pos":[1084,3933],"yaml":true,"extradata":"MT"},{"content":"Defines the types (or classes) of documents and the properties associated with those types. This field reads the Windows registry base key HKEY_CLASSES_ROOT.","nodes":[{"pos":[0,157],"content":"Defines the types (or classes) of documents and the properties associated with those types. This field reads the Windows registry base key HKEY_CLASSES_ROOT.","nodes":[{"content":"Defines the types (or classes) of documents and the properties associated with those types. This field reads the Windows registry base key HKEY_CLASSES_ROOT.","pos":[0,157],"nodes":[{"content":"Defines the types (or classes) of documents and the properties associated with those types.","pos":[0,91]},{"content":"This field reads the Windows registry base key HKEY_CLASSES_ROOT.","pos":[92,157]}]}]}],"pos":[7400,7558],"yaml":true},{"content":"Both conventional applications and OLE applications use data that is stored under this key. This key also provides backward compatibility with the Windows 3.1 registration database by storing information for DDE and OLE support. File viewers and user interface extensions store their OLE class identifiers in this key, and processing servers are registered in this key.","nodes":[{"pos":[0,369],"content":"Both conventional applications and OLE applications use data that is stored under this key. This key also provides backward compatibility with the Windows 3.1 registration database by storing information for DDE and OLE support. File viewers and user interface extensions store their OLE class identifiers in this key, and processing servers are registered in this key.","nodes":[{"content":"Both conventional applications and OLE applications use data that is stored under this key. This key also provides backward compatibility with the Windows 3.1 registration database by storing information for DDE and OLE support. File viewers and user interface extensions store their OLE class identifiers in this key, and processing servers are registered in this key.","pos":[0,369],"nodes":[{"content":"Both conventional applications and OLE applications use data that is stored under this key.","pos":[0,91]},{"content":"This key also provides backward compatibility with the Windows 3.1 registration database by storing information for DDE and OLE support.","pos":[92,228]},{"content":"File viewers and user interface extensions store their OLE class identifiers in this key, and processing servers are registered in this key.","pos":[229,369]}]}]}],"pos":[7569,7939],"yaml":true,"extradata":"MT"},{"content":"Contains configuration information pertaining to the hardware that is not specific to the user. This field reads the Windows registry base key HKEY_CURRENT_CONFIG.","nodes":[{"pos":[0,163],"content":"Contains configuration information pertaining to the hardware that is not specific to the user. This field reads the Windows registry base key HKEY_CURRENT_CONFIG.","nodes":[{"content":"Contains configuration information pertaining to the hardware that is not specific to the user. This field reads the Windows registry base key HKEY_CURRENT_CONFIG.","pos":[0,163],"nodes":[{"content":"Contains configuration information pertaining to the hardware that is not specific to the user.","pos":[0,95]},{"content":"This field reads the Windows registry base key HKEY_CURRENT_CONFIG.","pos":[96,163]}]}]}],"pos":[10074,10238],"yaml":true},{"content":"This member is mapped to a subkey within <xref:Microsoft.Win32.Registry.LocalMachine>.  \n  \n An example of using this member is an application that stores a different server name for its data depending on whether the system is attached to a network.","nodes":[{"pos":[0,86],"content":"This member is mapped to a subkey within <xref:Microsoft.Win32.Registry.LocalMachine>.","nodes":[{"content":"This member is mapped to a subkey within <ph id=\"ph1\">&lt;xref:Microsoft.Win32.Registry.LocalMachine&gt;</ph>.","pos":[0,86],"source":"This member is mapped to a subkey within <xref:Microsoft.Win32.Registry.LocalMachine>."}]},{"pos":[93,249],"content":"An example of using this member is an application that stores a different server name for its data depending on whether the system is attached to a network.","nodes":[{"content":"An example of using this member is an application that stores a different server name for its data depending on whether the system is attached to a network.","pos":[0,156]}]}],"pos":[10249,10503],"yaml":true,"extradata":"MT"},{"content":"Contains information about the current user preferences. This field reads the Windows registry base key HKEY_CURRENT_USER","nodes":[{"pos":[0,121],"content":"Contains information about the current user preferences. This field reads the Windows registry base key HKEY_CURRENT_USER","nodes":[{"content":"Contains information about the current user preferences. This field reads the Windows registry base key HKEY_CURRENT_USER","pos":[0,121],"nodes":[{"content":"Contains information about the current user preferences.","pos":[0,56]},{"content":"This field reads the Windows registry base key HKEY_CURRENT_USER","pos":[57,121]}]}]}],"pos":[12640,12762],"yaml":true},{"content":"Information stored in this key includes the settings of environment variables and data about program groups, colors, printers, network connections, and application preferences. This key makes it easier to establish the current user's settings. In this key, software vendors store the current user-specific preferences to be used within their applications. Microsoft, for example, creates the HKEY_CURRENT_USER\\Software\\Microsoft key for its applications to use, with each application creating its own subkey under the Microsoft key.","nodes":[{"pos":[0,532],"content":"Information stored in this key includes the settings of environment variables and data about program groups, colors, printers, network connections, and application preferences. This key makes it easier to establish the current user's settings. In this key, software vendors store the current user-specific preferences to be used within their applications. Microsoft, for example, creates the HKEY_CURRENT_USER\\Software\\Microsoft key for its applications to use, with each application creating its own subkey under the Microsoft key.","nodes":[{"content":"Information stored in this key includes the settings of environment variables and data about program groups, colors, printers, network connections, and application preferences. This key makes it easier to establish the current user's settings. In this key, software vendors store the current user-specific preferences to be used within their applications. Microsoft, for example, creates the HKEY_CURRENT_USER\\Software\\Microsoft key for its applications to use, with each application creating its own subkey under the Microsoft key.","pos":[0,532],"nodes":[{"content":"Information stored in this key includes the settings of environment variables and data about program groups, colors, printers, network connections, and application preferences.","pos":[0,176]},{"content":"This key makes it easier to establish the current user's settings.","pos":[177,243]},{"content":"In this key, software vendors store the current user-specific preferences to be used within their applications.","pos":[244,355]},{"content":"Microsoft, for example, creates the HKEY_CURRENT_USER\\Software\\Microsoft key for its applications to use, with each application creating its own subkey under the Microsoft key.","pos":[356,532]}]}]}],"pos":[12773,13306],"yaml":true,"extradata":"MT"},{"content":"Contains dynamic registry data. This field reads the Windows registry base key HKEY_DYN_DATA.","nodes":[{"pos":[0,93],"content":"Contains dynamic registry data. This field reads the Windows registry base key HKEY_DYN_DATA.","nodes":[{"content":"Contains dynamic registry data. This field reads the Windows registry base key HKEY_DYN_DATA.","pos":[0,93],"nodes":[{"content":"Contains dynamic registry data.","pos":[0,31]},{"content":"This field reads the Windows registry base key HKEY_DYN_DATA.","pos":[32,93]}]}]}],"pos":[15376,15470],"yaml":true},{"content":"The Windows 98/Windows Me registry supports both static data (which is stored on disk in the registry) and dynamic data (which changes frequently, such as performance statistics). This dynamic data area is the mechanism that allows Virtual Device Drivers (VxDs) to provide real-time data to Win32 applications that can run remotely as well as locally. It also allows the system monitor to provide performance statistics on remote Windows 98/Windows Me systems.  \n  \n VxDs are not limited to performance data. They can provide any data they want to pass from Ring 0 to Ring 3 efficiently without monopolizing the CPU. The registry supports dynamic data by storing a pointer to a function that returns a value (or many values). When a Registry call queries values associated with a dynamic key, that function is called to return the desired value or values.  \n  \n> [!NOTE]\n>  Dynamic keys were introduced in Microsoft Windows 95 to handle dynamic Registry data. They are supported only in Windows 98/Windows Me.","nodes":[{"pos":[0,460],"content":"The Windows 98/Windows Me registry supports both static data (which is stored on disk in the registry) and dynamic data (which changes frequently, such as performance statistics). This dynamic data area is the mechanism that allows Virtual Device Drivers (VxDs) to provide real-time data to Win32 applications that can run remotely as well as locally. It also allows the system monitor to provide performance statistics on remote Windows 98/Windows Me systems.","nodes":[{"content":"The Windows 98/Windows Me registry supports both static data (which is stored on disk in the registry) and dynamic data (which changes frequently, such as performance statistics). This dynamic data area is the mechanism that allows Virtual Device Drivers (VxDs) to provide real-time data to Win32 applications that can run remotely as well as locally. It also allows the system monitor to provide performance statistics on remote Windows 98/Windows Me systems.","pos":[0,460],"nodes":[{"content":"The Windows 98/Windows Me registry supports both static data (which is stored on disk in the registry) and dynamic data (which changes frequently, such as performance statistics).","pos":[0,179]},{"content":"This dynamic data area is the mechanism that allows Virtual Device Drivers (VxDs) to provide real-time data to Win32 applications that can run remotely as well as locally.","pos":[180,351]},{"content":"It also allows the system monitor to provide performance statistics on remote Windows 98/Windows Me systems.","pos":[352,460]}]}]},{"pos":[467,855],"content":"VxDs are not limited to performance data. They can provide any data they want to pass from Ring 0 to Ring 3 efficiently without monopolizing the CPU. The registry supports dynamic data by storing a pointer to a function that returns a value (or many values). When a Registry call queries values associated with a dynamic key, that function is called to return the desired value or values.","nodes":[{"content":"VxDs are not limited to performance data. They can provide any data they want to pass from Ring 0 to Ring 3 efficiently without monopolizing the CPU. The registry supports dynamic data by storing a pointer to a function that returns a value (or many values). When a Registry call queries values associated with a dynamic key, that function is called to return the desired value or values.","pos":[0,388],"nodes":[{"content":"VxDs are not limited to performance data.","pos":[0,41]},{"content":"They can provide any data they want to pass from Ring 0 to Ring 3 efficiently without monopolizing the CPU.","pos":[42,149]},{"content":"The registry supports dynamic data by storing a pointer to a function that returns a value (or many values).","pos":[150,258]},{"content":"When a Registry call queries values associated with a dynamic key, that function is called to return the desired value or values.","pos":[259,388]}]}]},{"pos":[863,1009],"content":"[!NOTE]\n Dynamic keys were introduced in Microsoft Windows 95 to handle dynamic Registry data. They are supported only in Windows 98/Windows Me.","leadings":["","> "],"nodes":[{"content":" Dynamic keys were introduced in Microsoft Windows 95 to handle dynamic Registry data. They are supported only in Windows 98/Windows Me.","pos":[8,144],"nodes":[{"content":"Dynamic keys were introduced in Microsoft Windows 95 to handle dynamic Registry data.","pos":[1,86]},{"content":"They are supported only in Windows 98/Windows Me.","pos":[87,136]}]}]}],"pos":[15481,16498],"yaml":true,"extradata":"MT"},{"content":"The operating system does not support dynamic data; that is, it is not Windows 98, Windows 98 Second Edition, or Windows Millennium Edition (Windows Me).","nodes":[{"pos":[0,153],"content":"The operating system does not support dynamic data; that is, it is not Windows 98, Windows 98 Second Edition, or Windows Millennium Edition (Windows Me).","nodes":[{"content":"The operating system does not support dynamic data; that is, it is not Windows 98, Windows 98 Second Edition, or Windows Millennium Edition (Windows Me).","pos":[0,153]}]}],"pos":[17840,17994],"yaml":true},{"content":"Retrieves the value associated with the specified name, in the specified registry key. If the name is not found in the specified key, returns a default value that you provide, or `null` if the specified key does not exist.","nodes":[{"pos":[0,222],"content":"Retrieves the value associated with the specified name, in the specified registry key. If the name is not found in the specified key, returns a default value that you provide, or `null` if the specified key does not exist.","nodes":[{"content":"Retrieves the value associated with the specified name, in the specified registry key.","pos":[0,86]},{"content":"If the name is not found in the specified key, returns a default value that you provide, or <ph id=\"ph1\">`null`</ph> if the specified key does not exist.","pos":[87,222],"source":" If the name is not found in the specified key, returns a default value that you provide, or `null` if the specified key does not exist."}]}],"pos":[19242,19465],"yaml":true},{"content":"The string `valueName` is not case-sensitive.  \n  \n> [!NOTE]\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To retrieve this unnamed value, specify either `null` or the empty string (\"\") for `valuName`.  \n  \n Valid root names are HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" accesses key/value pairs for the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root.  \n  \n When the <xref:Microsoft.Win32.RegistryKey.GetValue%2A> method retrieves expandable string values (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), it expands environment strings using data from the local environment. If a value containing expandable references to environment variables has been stored as a string (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), rather than as an expandable string (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), <xref:Microsoft.Win32.RegistryKey.GetValue%2A> does not expand it. You can expand such a string after it has been retrieved by calling the <xref:System.Environment.ExpandEnvironmentVariables%2A?displayProperty=fullName> method.  \n  \n> [!NOTE]\n>  The recommended way to retrieve data from HKEY_PERFORMANCE_DATA is to use the <xref:System.Diagnostics.PerformanceCounter> class rather than the <xref:Microsoft.Win32.RegistryKey.GetValue%2A?displayProperty=fullName> method.  \n  \n The <xref:Microsoft.Win32.Registry.GetValue%2A> and <xref:Microsoft.Win32.Registry.SetValue%2A> methods open and close registry keys each time they are used, so they do not perform as well as the methods of the <xref:Microsoft.Win32.RegistryKey> class if you access a large number of values.  \n  \n <xref:Microsoft.Win32.RegistryKey> also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.","nodes":[{"pos":[0,45],"content":"The string <ph id=\"ph1\">`valueName`</ph> is not case-sensitive.","source":"The string `valueName` is not case-sensitive."},{"pos":[53,344],"content":"[!NOTE]\n A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To retrieve this unnamed value, specify either `null` or the empty string (\"\") for `valuName`.","leadings":["","> "],"nodes":[{"content":" A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To retrieve this unnamed value, specify either `null` or the empty string (\"\") for `valuName`.","pos":[8,289],"nodes":[{"content":"A registry key can contain one value that is not associated with any name.","pos":[1,75]},{"content":"When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name.","pos":[76,186]},{"content":"To retrieve this unnamed value, specify either <ph id=\"ph1\">`null`</ph> or the empty string (\"\") for <ph id=\"ph2\">`valuName`</ph>.","pos":[187,281],"source":" To retrieve this unnamed value, specify either `null` or the empty string (\"\") for `valuName`."}]}]},{"pos":[351,657],"content":"Valid root names are HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" accesses key/value pairs for the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root.","nodes":[{"content":"Valid root names are HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" accesses key/value pairs for the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root.","pos":[0,306],"nodes":[{"content":"Valid root names are HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.","pos":[0,153]},{"content":"For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" accesses key/value pairs for the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root.","pos":[154,306]}]}]},{"pos":[664,1399],"content":"When the <xref:Microsoft.Win32.RegistryKey.GetValue%2A> method retrieves expandable string values (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), it expands environment strings using data from the local environment. If a value containing expandable references to environment variables has been stored as a string (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), rather than as an expandable string (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), <xref:Microsoft.Win32.RegistryKey.GetValue%2A> does not expand it. You can expand such a string after it has been retrieved by calling the <xref:System.Environment.ExpandEnvironmentVariables%2A?displayProperty=fullName> method.","nodes":[{"content":"When the <xref:Microsoft.Win32.RegistryKey.GetValue%2A> method retrieves expandable string values (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), it expands environment strings using data from the local environment. If a value containing expandable references to environment variables has been stored as a string (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), rather than as an expandable string (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), <xref:Microsoft.Win32.RegistryKey.GetValue%2A> does not expand it. You can expand such a string after it has been retrieved by calling the <xref:System.Environment.ExpandEnvironmentVariables%2A?displayProperty=fullName> method.","pos":[0,735],"nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryKey.GetValue%2A&gt;</ph> method retrieves expandable string values (<ph id=\"ph2\">&lt;xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName&gt;</ph>), it expands environment strings using data from the local environment.","pos":[0,236],"source":"When the <xref:Microsoft.Win32.RegistryKey.GetValue%2A> method retrieves expandable string values (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), it expands environment strings using data from the local environment."},{"content":"If a value containing expandable references to environment variables has been stored as a string (<ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName&gt;</ph>), rather than as an expandable string (<ph id=\"ph2\">&lt;xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName&gt;</ph>), <ph id=\"ph3\">&lt;xref:Microsoft.Win32.RegistryKey.GetValue%2A&gt;</ph> does not expand it.","pos":[237,574],"source":" If a value containing expandable references to environment variables has been stored as a string (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), rather than as an expandable string (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), <xref:Microsoft.Win32.RegistryKey.GetValue%2A> does not expand it."},{"content":"You can expand such a string after it has been retrieved by calling the <ph id=\"ph1\">&lt;xref:System.Environment.ExpandEnvironmentVariables%2A?displayProperty=fullName&gt;</ph> method.","pos":[575,735],"source":" You can expand such a string after it has been retrieved by calling the <xref:System.Environment.ExpandEnvironmentVariables%2A?displayProperty=fullName> method."}]}]},{"pos":[1407,1642],"content":"[!NOTE]\n The recommended way to retrieve data from HKEY_PERFORMANCE_DATA is to use the <xref:System.Diagnostics.PerformanceCounter> class rather than the <xref:Microsoft.Win32.RegistryKey.GetValue%2A?displayProperty=fullName> method.","leadings":["","> "],"nodes":[{"content":"The recommended way to retrieve data from HKEY_PERFORMANCE_DATA is to use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.PerformanceCounter&gt;</ph> class rather than the <ph id=\"ph2\">&lt;xref:Microsoft.Win32.RegistryKey.GetValue%2A?displayProperty=fullName&gt;</ph> method.","pos":[9,233],"source":" The recommended way to retrieve data from HKEY_PERFORMANCE_DATA is to use the <xref:System.Diagnostics.PerformanceCounter> class rather than the <xref:Microsoft.Win32.RegistryKey.GetValue%2A?displayProperty=fullName> method."}]},{"pos":[1649,1940],"content":"The <xref:Microsoft.Win32.Registry.GetValue%2A> and <xref:Microsoft.Win32.Registry.SetValue%2A> methods open and close registry keys each time they are used, so they do not perform as well as the methods of the <xref:Microsoft.Win32.RegistryKey> class if you access a large number of values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.Win32.Registry.GetValue%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:Microsoft.Win32.Registry.SetValue%2A&gt;</ph> methods open and close registry keys each time they are used, so they do not perform as well as the methods of the <ph id=\"ph3\">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> class if you access a large number of values.","pos":[0,291],"source":"The <xref:Microsoft.Win32.Registry.GetValue%2A> and <xref:Microsoft.Win32.Registry.SetValue%2A> methods open and close registry keys each time they are used, so they do not perform as well as the methods of the <xref:Microsoft.Win32.RegistryKey> class if you access a large number of values."}]},{"pos":[1947,2148],"content":"<xref:Microsoft.Win32.RegistryKey> also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.","pos":[0,201],"source":"<xref:Microsoft.Win32.RegistryKey> also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys."}]}],"pos":[19476,21650],"yaml":true,"extradata":"MT"},{"content":"The full registry path of the key, beginning with a valid registry root, such as \"HKEY_CURRENT_USER\".","nodes":[{"pos":[0,101],"content":"The full registry path of the key, beginning with a valid registry root, such as \"HKEY_CURRENT_USER\".","nodes":[{"content":"The full registry path of the key, beginning with a valid registry root, such as \"HKEY_CURRENT_USER\".","pos":[0,101]}]}],"pos":[22600,22702],"yaml":true},{"content":"The name of the name/value pair.","nodes":[{"pos":[0,32],"content":"The name of the name/value pair.","nodes":[{"content":"The name of the name/value pair.","pos":[0,32]}]}],"pos":[22767,22800],"yaml":true},{"content":"The value to return if <code>valueName</code> does not exist.","nodes":[{"pos":[0,61],"content":"The value to return if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">valueName</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not exist.","source":"The value to return if <code>valueName</code> does not exist."}],"pos":[22868,22930],"yaml":true},{"content":"`null` if the subkey specified by <code>keyName</code> does not exist; otherwise, the value associated with <code>valueName</code>, or <code>defaultValue</code> if <code>valueName</code> is not found.","nodes":[{"pos":[0,200],"content":"<ph id=\"ph1\">`null`</ph> if the subkey specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">keyName</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not exist; otherwise, the value associated with <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">valueName</ph><ept id=\"p2\">&lt;/code&gt;</ept>, or <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">defaultValue</ph><ept id=\"p3\">&lt;/code&gt;</ept> if <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">valueName</ph><ept id=\"p4\">&lt;/code&gt;</ept> is not found.","source":"`null` if the subkey specified by <code>keyName</code> does not exist; otherwise, the value associated with <code>valueName</code>, or <code>defaultValue</code> if <code>valueName</code> is not found."}],"pos":[22987,23190],"yaml":true},{"content":"The user does not have the permissions required to read from the registry key.","nodes":[{"pos":[0,78],"content":"The user does not have the permissions required to read from the registry key.","nodes":[{"content":"The user does not have the permissions required to read from the registry key.","pos":[0,78]}]}],"pos":[23363,23442],"yaml":true},{"content":"The <xref href=\"Microsoft.Win32.RegistryKey\"></xref> that contains the specified value has been marked for deletion.","nodes":[{"pos":[0,116],"content":"The <ph id=\"ph1\">&lt;xref href=\"Microsoft.Win32.RegistryKey\"&gt;&lt;/xref&gt;</ph> that contains the specified value has been marked for deletion.","source":"The <xref href=\"Microsoft.Win32.RegistryKey\"></xref> that contains the specified value has been marked for deletion."}],"pos":[23530,23647],"yaml":true},{"content":"<code>keyName</code> does not begin with a valid registry root.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;keyName&lt;/code&gt;</ph> does not begin with a valid registry root.","source":"<code>keyName</code> does not begin with a valid registry root."}],"pos":[23741,23805],"yaml":true},{"content":"Contains the configuration data for the local machine. This field reads the Windows registry base key HKEY_LOCAL_MACHINE.","nodes":[{"pos":[0,121],"content":"Contains the configuration data for the local machine. This field reads the Windows registry base key HKEY_LOCAL_MACHINE.","nodes":[{"content":"Contains the configuration data for the local machine. This field reads the Windows registry base key HKEY_LOCAL_MACHINE.","pos":[0,121],"nodes":[{"content":"Contains the configuration data for the local machine.","pos":[0,54]},{"content":"This field reads the Windows registry base key HKEY_LOCAL_MACHINE.","pos":[55,121]}]}]}],"pos":[24922,25044],"yaml":true},{"content":"`LocalMachine` contains five keys:  \n  \n Hardware  \n Describes the physical hardware in the computer, the way device drivers use that hardware, and mappings and related data that link kernel-mode drivers with user-mode code. All data in this key is recreated each time the system is started. The Description subkey describes the actual computer hardware. The DeviceMap subkey contains miscellaneous data in formats specific to particular classes of drivers. The ResourceMap subkey describes which device drivers claim which hardware resources. The Windows NT Diagnostics program (Winmsdp.exe) can report on its contents in an easy-to-read form.  \n  \n SAM  \n The directory services database of security information for user and group accounts, and for the domains in Windows 2000 Server (SAM is the Security Account Manager, known as the directory services database).  \n  \n Security  \n Contains the local security policy, such as specific user rights. This key is used only by the Windows 2000 security subsystem.  \n  \n Software  \n The per-computer software database. This key contains data about software installed on the local computer, along with various items of miscellaneous configuration data.  \n  \n System  \n Controls system startup, device driver loading, Windows 2000 services, and operating system behavior.  \n  \n By convention, if similar data exists under <xref:Microsoft.Win32.Registry.CurrentUser> and under <xref:Microsoft.Win32.Registry.LocalMachine>, the data in <xref:Microsoft.Win32.Registry.CurrentUser> takes precedence. However, values in this key can also extend (rather than replace) data in Registry.LocalMachine. Also, some items (such as device driver loading entries) are meaningless if they occur outside of Registry.LocalMachine.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">`LocalMachine`</ph> contains five keys:","source":"`LocalMachine` contains five keys:"},{"pos":[41,644],"content":"Hardware  \n Describes the physical hardware in the computer, the way device drivers use that hardware, and mappings and related data that link kernel-mode drivers with user-mode code. All data in this key is recreated each time the system is started. The Description subkey describes the actual computer hardware. The DeviceMap subkey contains miscellaneous data in formats specific to particular classes of drivers. The ResourceMap subkey describes which device drivers claim which hardware resources. The Windows NT Diagnostics program (Winmsdp.exe) can report on its contents in an easy-to-read form.","nodes":[{"content":"Hardware","pos":[0,8]},{"content":"Describes the physical hardware in the computer, the way device drivers use that hardware, and mappings and related data that link kernel-mode drivers with user-mode code. All data in this key is recreated each time the system is started. The Description subkey describes the actual computer hardware. The DeviceMap subkey contains miscellaneous data in formats specific to particular classes of drivers. The ResourceMap subkey describes which device drivers claim which hardware resources. The Windows NT Diagnostics program (Winmsdp.exe) can report on its contents in an easy-to-read form.","pos":[12,603],"nodes":[{"content":"Describes the physical hardware in the computer, the way device drivers use that hardware, and mappings and related data that link kernel-mode drivers with user-mode code.","pos":[0,171]},{"content":"All data in this key is recreated each time the system is started.","pos":[172,238]},{"content":"The Description subkey describes the actual computer hardware.","pos":[239,301]},{"content":"The DeviceMap subkey contains miscellaneous data in formats specific to particular classes of drivers.","pos":[302,404]},{"content":"The ResourceMap subkey describes which device drivers claim which hardware resources.","pos":[405,490]},{"content":"The Windows NT Diagnostics program (Winmsdp.exe) can report on its contents in an easy-to-read form.","pos":[491,591]}]}]},{"pos":[651,866],"content":"SAM  \n The directory services database of security information for user and group accounts, and for the domains in Windows 2000 Server (SAM is the Security Account Manager, known as the directory services database).","nodes":[{"content":"SAM","pos":[0,3]},{"content":"The directory services database of security information for user and group accounts, and for the domains in Windows 2000 Server (SAM is the Security Account Manager, known as the directory services database).","pos":[7,215]}]},{"pos":[873,1012],"content":"Security  \n Contains the local security policy, such as specific user rights. This key is used only by the Windows 2000 security subsystem.","nodes":[{"content":"Security","pos":[0,8]},{"content":"Contains the local security policy, such as specific user rights. This key is used only by the Windows 2000 security subsystem.","pos":[12,139],"nodes":[{"content":"Contains the local security policy, such as specific user rights.","pos":[0,65]},{"content":"This key is used only by the Windows 2000 security subsystem.","pos":[66,127]}]}]},{"pos":[1019,1199],"content":"Software  \n The per-computer software database. This key contains data about software installed on the local computer, along with various items of miscellaneous configuration data.","nodes":[{"content":"Software","pos":[0,8]},{"content":"The per-computer software database. This key contains data about software installed on the local computer, along with various items of miscellaneous configuration data.","pos":[12,180],"nodes":[{"content":"The per-computer software database.","pos":[0,35]},{"content":"This key contains data about software installed on the local computer, along with various items of miscellaneous configuration data.","pos":[36,168]}]}]},{"pos":[1206,1317],"content":"System  \n Controls system startup, device driver loading, Windows 2000 services, and operating system behavior.","nodes":[{"content":"System","pos":[0,6]},{"content":"Controls system startup, device driver loading, Windows 2000 services, and operating system behavior.","pos":[10,111]}]},{"pos":[1324,1759],"content":"By convention, if similar data exists under <xref:Microsoft.Win32.Registry.CurrentUser> and under <xref:Microsoft.Win32.Registry.LocalMachine>, the data in <xref:Microsoft.Win32.Registry.CurrentUser> takes precedence. However, values in this key can also extend (rather than replace) data in Registry.LocalMachine. Also, some items (such as device driver loading entries) are meaningless if they occur outside of Registry.LocalMachine.","nodes":[{"content":"By convention, if similar data exists under <xref:Microsoft.Win32.Registry.CurrentUser> and under <xref:Microsoft.Win32.Registry.LocalMachine>, the data in <xref:Microsoft.Win32.Registry.CurrentUser> takes precedence. However, values in this key can also extend (rather than replace) data in Registry.LocalMachine. Also, some items (such as device driver loading entries) are meaningless if they occur outside of Registry.LocalMachine.","pos":[0,435],"nodes":[{"content":"By convention, if similar data exists under <ph id=\"ph1\">&lt;xref:Microsoft.Win32.Registry.CurrentUser&gt;</ph> and under <ph id=\"ph2\">&lt;xref:Microsoft.Win32.Registry.LocalMachine&gt;</ph>, the data in <ph id=\"ph3\">&lt;xref:Microsoft.Win32.Registry.CurrentUser&gt;</ph> takes precedence.","pos":[0,217],"source":"By convention, if similar data exists under <xref:Microsoft.Win32.Registry.CurrentUser> and under <xref:Microsoft.Win32.Registry.LocalMachine>, the data in <xref:Microsoft.Win32.Registry.CurrentUser> takes precedence."},{"content":"However, values in this key can also extend (rather than replace) data in Registry.LocalMachine.","pos":[218,314]},{"content":"Also, some items (such as device driver loading entries) are meaningless if they occur outside of Registry.LocalMachine.","pos":[315,435]}]}]}],"pos":[25055,26834],"yaml":true,"extradata":"MT"},{"content":"Contains performance information for software components. This field reads the Windows registry base key HKEY_PERFORMANCE_DATA.","nodes":[{"pos":[0,127],"content":"Contains performance information for software components. This field reads the Windows registry base key HKEY_PERFORMANCE_DATA.","nodes":[{"content":"Contains performance information for software components. This field reads the Windows registry base key HKEY_PERFORMANCE_DATA.","pos":[0,127],"nodes":[{"content":"Contains performance information for software components.","pos":[0,57]},{"content":"This field reads the Windows registry base key HKEY_PERFORMANCE_DATA.","pos":[58,127]}]}]}],"pos":[28988,29116],"yaml":true},{"content":"Each software component creates keys for its objects, counters when it is installed, and writes counter data while it is executing. You can access this data as you would access any other registry data, using the <xref:Microsoft.Win32.RegistryKey> functions.  \n  \n Although you use the registry to collect performance data, the data is not stored in the registry database. Instead, accessing the registry with this key causes the system to collect the data from the appropriate system object managers.  \n  \n To obtain performance data from the local system, use the <xref:Microsoft.Win32.RegistryKey.GetValue%2A> method, with the Registry.PerformanceData key. The first call opens the key (you do not need to explicitly open the key first). However, be sure to use the <xref:Microsoft.Win32.RegistryKey.Close%2A> method to close the handle to the key when you are finished obtaining performance data. The user cannot install or remove a software component while its performance data is in use.  \n  \n To obtain performance data from a remote system, you must use the <xref:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey%2A> method, with the computer name of the remote system and the Registry.PerformanceData key. This call retrieves a key representing the performance data for the remote system. To retrieve the data, call <xref:Microsoft.Win32.RegistryKey.GetValue%2A> using this key, rather than the Registry.PerformanceData key.  \n  \n> [!NOTE]\n>  On Windows Server 2003, a user must at least belong to the Performance Monitor Users group in order to access subkeys of this base key.","nodes":[{"pos":[0,257],"content":"Each software component creates keys for its objects, counters when it is installed, and writes counter data while it is executing. You can access this data as you would access any other registry data, using the <xref:Microsoft.Win32.RegistryKey> functions.","nodes":[{"content":"Each software component creates keys for its objects, counters when it is installed, and writes counter data while it is executing. You can access this data as you would access any other registry data, using the <xref:Microsoft.Win32.RegistryKey> functions.","pos":[0,257],"nodes":[{"content":"Each software component creates keys for its objects, counters when it is installed, and writes counter data while it is executing.","pos":[0,131]},{"content":"You can access this data as you would access any other registry data, using the <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> functions.","pos":[132,257],"source":" You can access this data as you would access any other registry data, using the <xref:Microsoft.Win32.RegistryKey> functions."}]}]},{"pos":[264,500],"content":"Although you use the registry to collect performance data, the data is not stored in the registry database. Instead, accessing the registry with this key causes the system to collect the data from the appropriate system object managers.","nodes":[{"content":"Although you use the registry to collect performance data, the data is not stored in the registry database. Instead, accessing the registry with this key causes the system to collect the data from the appropriate system object managers.","pos":[0,236],"nodes":[{"content":"Although you use the registry to collect performance data, the data is not stored in the registry database.","pos":[0,107]},{"content":"Instead, accessing the registry with this key causes the system to collect the data from the appropriate system object managers.","pos":[108,236]}]}]},{"pos":[507,992],"content":"To obtain performance data from the local system, use the <xref:Microsoft.Win32.RegistryKey.GetValue%2A> method, with the Registry.PerformanceData key. The first call opens the key (you do not need to explicitly open the key first). However, be sure to use the <xref:Microsoft.Win32.RegistryKey.Close%2A> method to close the handle to the key when you are finished obtaining performance data. The user cannot install or remove a software component while its performance data is in use.","nodes":[{"content":"To obtain performance data from the local system, use the <xref:Microsoft.Win32.RegistryKey.GetValue%2A> method, with the Registry.PerformanceData key. The first call opens the key (you do not need to explicitly open the key first). However, be sure to use the <xref:Microsoft.Win32.RegistryKey.Close%2A> method to close the handle to the key when you are finished obtaining performance data. The user cannot install or remove a software component while its performance data is in use.","pos":[0,485],"nodes":[{"content":"To obtain performance data from the local system, use the <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryKey.GetValue%2A&gt;</ph> method, with the Registry.PerformanceData key.","pos":[0,151],"source":"To obtain performance data from the local system, use the <xref:Microsoft.Win32.RegistryKey.GetValue%2A> method, with the Registry.PerformanceData key."},{"content":"The first call opens the key (you do not need to explicitly open the key first).","pos":[152,232]},{"content":"However, be sure to use the <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryKey.Close%2A&gt;</ph> method to close the handle to the key when you are finished obtaining performance data.","pos":[233,392],"source":" However, be sure to use the <xref:Microsoft.Win32.RegistryKey.Close%2A> method to close the handle to the key when you are finished obtaining performance data."},{"content":"The user cannot install or remove a software component while its performance data is in use.","pos":[393,485]}]}]},{"pos":[999,1429],"content":"To obtain performance data from a remote system, you must use the <xref:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey%2A> method, with the computer name of the remote system and the Registry.PerformanceData key. This call retrieves a key representing the performance data for the remote system. To retrieve the data, call <xref:Microsoft.Win32.RegistryKey.GetValue%2A> using this key, rather than the Registry.PerformanceData key.","nodes":[{"content":"To obtain performance data from a remote system, you must use the <xref:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey%2A> method, with the computer name of the remote system and the Registry.PerformanceData key. This call retrieves a key representing the performance data for the remote system. To retrieve the data, call <xref:Microsoft.Win32.RegistryKey.GetValue%2A> using this key, rather than the Registry.PerformanceData key.","pos":[0,430],"nodes":[{"content":"To obtain performance data from a remote system, you must use the <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey%2A&gt;</ph> method, with the computer name of the remote system and the Registry.PerformanceData key.","pos":[0,211],"source":"To obtain performance data from a remote system, you must use the <xref:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey%2A> method, with the computer name of the remote system and the Registry.PerformanceData key."},{"content":"This call retrieves a key representing the performance data for the remote system.","pos":[212,294]},{"content":"To retrieve the data, call <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryKey.GetValue%2A&gt;</ph> using this key, rather than the Registry.PerformanceData key.","pos":[295,430],"source":" To retrieve the data, call <xref:Microsoft.Win32.RegistryKey.GetValue%2A> using this key, rather than the Registry.PerformanceData key."}]}]},{"pos":[1437,1583],"content":"[!NOTE]\n On Windows Server 2003, a user must at least belong to the Performance Monitor Users group in order to access subkeys of this base key.","leadings":["","> "],"nodes":[{"content":"On Windows Server 2003, a user must at least belong to the Performance Monitor Users group in order to access subkeys of this base key.","pos":[9,144]}]}],"pos":[29127,30722],"yaml":true,"extradata":"MT"},{"content":"Sets the specified name/value pair on the specified registry key. If the specified key does not exist, it is created.","nodes":[{"pos":[0,117],"content":"Sets the specified name/value pair on the specified registry key. If the specified key does not exist, it is created.","nodes":[{"content":"Sets the specified name/value pair on the specified registry key. If the specified key does not exist, it is created.","pos":[0,117],"nodes":[{"content":"Sets the specified name/value pair on the specified registry key.","pos":[0,65]},{"content":"If the specified key does not exist, it is created.","pos":[66,117]}]}]}],"pos":[33151,33269],"yaml":true},{"content":"Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the `valueName` parameter is no longer restricted to a maximum of 255 characters; however, the `keyName` parameter continues to have the 255-character restriction.  \n  \n Because many values can be stored in each key in the registry, you must use the `valueName` parameter to specify the particular value you want to set.  \n  \n> [!NOTE]\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To set this unnamed value, specify either `null` or the empty string (\"\") for `valueName`.  \n  \n If `valueName` does not exist in the key, it is created and the associated value is set to `value`.  \n  \n If `keyName` specifies a subkey that does not exist, the subkey is created in the specified root. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" creates the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root. The string \"HKEY_CURRENT_USER\\MyTestKey\\Key2\\Key3\" creates the nested subkeys \"MyTestKey\", \"MyTestKey\\Key2\", and \"MyTestKey\\Key2\\Key3\".  \n  \n Valid root names include HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.  \n  \n> [!NOTE]\n>  The <xref:Microsoft.Win32.Registry.SetValue%2A> method opens a registry key, sets the value, and closes the key each time it is called. If you need to modify a large number of values, the <xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName> method might provide better performance. The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.  \n  \n This overload of <xref:Microsoft.Win32.Registry.SetValue%2A> stores 64-bit integers as strings (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>). To store 64-bit numbers as <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> values, use the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload.  \n  \n This overload of <xref:Microsoft.Win32.Registry.SetValue%2A> stores all string values as <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> objects, even if they contain expandable references to environment variables. To save string values as expandable strings (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), use the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload.  \n  \n This overload is equivalent to calling the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload with <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown.","nodes":[{"pos":[0,238],"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id=\"ph2\">`valueName`</ph> parameter is no longer restricted to a maximum of 255 characters; however, the <ph id=\"ph3\">`keyName`</ph> parameter continues to have the 255-character restriction.","source":"Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the `valueName` parameter is no longer restricted to a maximum of 255 characters; however, the `keyName` parameter continues to have the 255-character restriction."},{"pos":[245,395],"content":"Because many values can be stored in each key in the registry, you must use the <ph id=\"ph1\">`valueName`</ph> parameter to specify the particular value you want to set.","source":"Because many values can be stored in each key in the registry, you must use the `valueName` parameter to specify the particular value you want to set."},{"pos":[403,690],"content":"[!NOTE]\n A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To set this unnamed value, specify either `null` or the empty string (\"\") for `valueName`.","leadings":["","> "],"nodes":[{"content":" A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To set this unnamed value, specify either `null` or the empty string (\"\") for `valueName`.","pos":[8,285],"nodes":[{"content":"A registry key can contain one value that is not associated with any name.","pos":[1,75]},{"content":"When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name.","pos":[76,186]},{"content":"To set this unnamed value, specify either <ph id=\"ph1\">`null`</ph> or the empty string (\"\") for <ph id=\"ph2\">`valueName`</ph>.","pos":[187,277],"source":" To set this unnamed value, specify either `null` or the empty string (\"\") for `valueName`."}]}]},{"pos":[697,796],"content":"If <ph id=\"ph1\">`valueName`</ph> does not exist in the key, it is created and the associated value is set to <ph id=\"ph2\">`value`</ph>.","source":"If `valueName` does not exist in the key, it is created and the associated value is set to `value`."},{"pos":[803,1168],"content":"If `keyName` specifies a subkey that does not exist, the subkey is created in the specified root. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" creates the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root. The string \"HKEY_CURRENT_USER\\MyTestKey\\Key2\\Key3\" creates the nested subkeys \"MyTestKey\", \"MyTestKey\\Key2\", and \"MyTestKey\\Key2\\Key3\".","nodes":[{"content":"If <ph id=\"ph1\">`keyName`</ph> specifies a subkey that does not exist, the subkey is created in the specified root.","pos":[0,97],"source":"If `keyName` specifies a subkey that does not exist, the subkey is created in the specified root."},{"content":"For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" creates the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root.","pos":[98,229]},{"content":"The string \"HKEY_CURRENT_USER\\MyTestKey\\Key2\\Key3\" creates the nested subkeys \"MyTestKey\", \"MyTestKey\\Key2\", and \"MyTestKey\\Key2\\Key3\".","pos":[230,365]}]},{"pos":[1175,1332],"content":"Valid root names include HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.","nodes":[{"content":"Valid root names include HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.","pos":[0,157]}]},{"pos":[1340,1863],"content":"[!NOTE]\n The <xref:Microsoft.Win32.Registry.SetValue%2A> method opens a registry key, sets the value, and closes the key each time it is called. If you need to modify a large number of values, the <xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName> method might provide better performance. The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.","leadings":["","> "],"nodes":[{"content":" The <xref:Microsoft.Win32.Registry.SetValue%2A> method opens a registry key, sets the value, and closes the key each time it is called. If you need to modify a large number of values, the <xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName> method might provide better performance. The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.","pos":[8,521],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.Win32.Registry.SetValue%2A&gt;</ph> method opens a registry key, sets the value, and closes the key each time it is called.","pos":[1,136],"source":" The <xref:Microsoft.Win32.Registry.SetValue%2A> method opens a registry key, sets the value, and closes the key each time it is called."},{"content":"If you need to modify a large number of values, the <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName&gt;</ph> method might provide better performance.","pos":[137,301],"source":" If you need to modify a large number of values, the <xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName> method might provide better performance."},{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.","pos":[302,513],"source":" The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys."}]}]},{"pos":[1870,2287],"content":"This overload of <xref:Microsoft.Win32.Registry.SetValue%2A> stores 64-bit integers as strings (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>). To store 64-bit numbers as <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> values, use the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload.","nodes":[{"content":"This overload of <xref:Microsoft.Win32.Registry.SetValue%2A> stores 64-bit integers as strings (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>). To store 64-bit numbers as <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> values, use the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload.","pos":[0,417],"nodes":[{"content":"This overload of <ph id=\"ph1\">&lt;xref:Microsoft.Win32.Registry.SetValue%2A&gt;</ph> stores 64-bit integers as strings (<ph id=\"ph2\">&lt;xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName&gt;</ph>).","pos":[0,163],"source":"This overload of <xref:Microsoft.Win32.Registry.SetValue%2A> stores 64-bit integers as strings (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>)."},{"content":"To store 64-bit numbers as <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName&gt;</ph> values, use the <ph id=\"ph2\">&lt;xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29&gt;</ph> method overload.","pos":[164,417],"source":" To store 64-bit numbers as <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> values, use the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload."}]}]},{"pos":[2294,2792],"content":"This overload of <xref:Microsoft.Win32.Registry.SetValue%2A> stores all string values as <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> objects, even if they contain expandable references to environment variables. To save string values as expandable strings (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), use the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload.","nodes":[{"content":"This overload of <xref:Microsoft.Win32.Registry.SetValue%2A> stores all string values as <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> objects, even if they contain expandable references to environment variables. To save string values as expandable strings (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), use the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload.","pos":[0,498],"nodes":[{"content":"This overload of <ph id=\"ph1\">&lt;xref:Microsoft.Win32.Registry.SetValue%2A&gt;</ph> stores all string values as <ph id=\"ph2\">&lt;xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName&gt;</ph> objects, even if they contain expandable references to environment variables.","pos":[0,232],"source":"This overload of <xref:Microsoft.Win32.Registry.SetValue%2A> stores all string values as <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> objects, even if they contain expandable references to environment variables."},{"content":"To save string values as expandable strings (<ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName&gt;</ph>), use the <ph id=\"ph2\">&lt;xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29&gt;</ph> method overload.","pos":[233,498],"source":" To save string values as expandable strings (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), use the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload."}]}]},{"pos":[2799,3057],"content":"This overload is equivalent to calling the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload with <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>.","nodes":[{"content":"This overload is equivalent to calling the <ph id=\"ph1\">&lt;xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29&gt;</ph> method overload with <ph id=\"ph2\">&lt;xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName&gt;</ph>.","pos":[0,258],"source":"This overload is equivalent to calling the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload with <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>."}]},{"pos":[3065,3351],"content":"[!NOTE]\n On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown.","leadings":["","> "],"nodes":[{"content":" On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown.","pos":[8,284],"nodes":[{"content":"On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages.","pos":[1,149]},{"content":"A Unicode character that is invalid for the current code page is replaced by the best available match.","pos":[150,252]},{"content":"No exception is thrown.","pos":[253,276]}]}]}],"pos":[33280,36680],"yaml":true,"extradata":"MT"},{"content":"The full registry path of the key, beginning with a valid registry root, such as \"HKEY_CURRENT_USER\".","nodes":[{"pos":[0,101],"content":"The full registry path of the key, beginning with a valid registry root, such as \"HKEY_CURRENT_USER\".","nodes":[{"content":"The full registry path of the key, beginning with a valid registry root, such as \"HKEY_CURRENT_USER\".","pos":[0,101]}]}],"pos":[37621,37723],"yaml":true},{"content":"The name of the name/value pair.","nodes":[{"pos":[0,32],"content":"The name of the name/value pair.","nodes":[{"content":"The name of the name/value pair.","pos":[0,32]}]}],"pos":[37788,37821],"yaml":true},{"content":"The value to be stored.","nodes":[{"pos":[0,23],"content":"The value to be stored.","nodes":[{"content":"The value to be stored.","pos":[0,23]}]}],"pos":[37882,37906],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[38069,38099],"yaml":true},{"content":"<code>keyName</code> does not begin with a valid registry root.  \n  \n -or-  \n  \n <code>keyName</code> is longer than the maximum length allowed (255 characters).","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;keyName&lt;/code&gt;</ph> does not begin with a valid registry root.","source":"<code>keyName</code> does not begin with a valid registry root."},{"pos":[70,74],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[81,161],"content":"<ph id=\"ph1\">&lt;code&gt;keyName&lt;/code&gt;</ph> is longer than the maximum length allowed (255 characters).","source":"<code>keyName</code> is longer than the maximum length allowed (255 characters)."}],"pos":[38193,38361],"yaml":true},{"content":"The <xref href=\"Microsoft.Win32.RegistryKey\"></xref> is read-only, and thus cannot be written to; for example, it is a root-level node.","nodes":[{"pos":[0,135],"content":"The <ph id=\"ph1\">&lt;xref href=\"Microsoft.Win32.RegistryKey\"&gt;&lt;/xref&gt;</ph> is read-only, and thus cannot be written to; for example, it is a root-level node.","source":"The <xref href=\"Microsoft.Win32.RegistryKey\"></xref> is read-only, and thus cannot be written to; for example, it is a root-level node."}],"pos":[38475,38611],"yaml":true},{"content":"The user does not have the permissions required to create or modify registry keys.","nodes":[{"pos":[0,82],"content":"The user does not have the permissions required to create or modify registry keys.","nodes":[{"content":"The user does not have the permissions required to create or modify registry keys.","pos":[0,82]}]}],"pos":[38723,38806],"yaml":true},{"content":"Sets the name/value pair on the specified registry key, using the specified registry data type. If the specified key does not exist, it is created.","nodes":[{"pos":[0,147],"content":"Sets the name/value pair on the specified registry key, using the specified registry data type. If the specified key does not exist, it is created.","nodes":[{"content":"Sets the name/value pair on the specified registry key, using the specified registry data type. If the specified key does not exist, it is created.","pos":[0,147],"nodes":[{"content":"Sets the name/value pair on the specified registry key, using the specified registry data type.","pos":[0,95]},{"content":"If the specified key does not exist, it is created.","pos":[96,147]}]}]}],"pos":[40260,40408],"yaml":true},{"content":"Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the `valueName` parameter is no longer restricted to a maximum of 255 characters; however, the `keyName` parameter continues have the 255-character restriction.  \n  \n Because many values can be stored in each key in the registry, you must use the `valueName` parameter to specify the particular value you want to set.  \n  \n> [!NOTE]\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To set this unnamed value, specify either `null` or the empty string (\"\") for `valueName`.  \n  \n If `valueName` does not exist in the key, it is created and the associated value is set to `value`.  \n  \n If `keyName` specifies a subkey that does not exist, the subkey is created in the specified root. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" creates the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root. The string \"HKEY_CURRENT_USER\\MyTestKey\\Key2\\Key3\" creates the nested subkeys \"MyTestKey\", \"MyTestKey\\Key2\", and \"MyTestKey\\Key2\\Key3\".  \n  \n Valid root names include HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.  \n  \n> [!NOTE]\n>  The <xref:Microsoft.Win32.Registry.SetValue%2A> method opens a registry key, sets the value, and closes the key each time it is called. If you need to modify a large number of values, the <xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName> method might provide better performance. The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.  \n  \n If the type of the specified `value` does not match the specified `valueKind`, and the data cannot be converted, <xref:System.ArgumentException> is thrown. For example, you can store a <xref:System.Int64?displayProperty=fullName> as a <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>, but only if its value is less than the maximum value of a <xref:System.Int32?displayProperty=fullName>. You cannot store a single string value as a <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  If boxed values are passed for <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> or <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>, the conversion is done using the invariant culture.  \n  \n> [!NOTE]\n>  On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown.","nodes":[{"pos":[0,235],"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id=\"ph2\">`valueName`</ph> parameter is no longer restricted to a maximum of 255 characters; however, the <ph id=\"ph3\">`keyName`</ph> parameter continues have the 255-character restriction.","source":"Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the `valueName` parameter is no longer restricted to a maximum of 255 characters; however, the `keyName` parameter continues have the 255-character restriction."},{"pos":[242,392],"content":"Because many values can be stored in each key in the registry, you must use the <ph id=\"ph1\">`valueName`</ph> parameter to specify the particular value you want to set.","source":"Because many values can be stored in each key in the registry, you must use the `valueName` parameter to specify the particular value you want to set."},{"pos":[400,687],"content":"[!NOTE]\n A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To set this unnamed value, specify either `null` or the empty string (\"\") for `valueName`.","leadings":["","> "],"nodes":[{"content":" A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To set this unnamed value, specify either `null` or the empty string (\"\") for `valueName`.","pos":[8,285],"nodes":[{"content":"A registry key can contain one value that is not associated with any name.","pos":[1,75]},{"content":"When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name.","pos":[76,186]},{"content":"To set this unnamed value, specify either <ph id=\"ph1\">`null`</ph> or the empty string (\"\") for <ph id=\"ph2\">`valueName`</ph>.","pos":[187,277],"source":" To set this unnamed value, specify either `null` or the empty string (\"\") for `valueName`."}]}]},{"pos":[694,793],"content":"If <ph id=\"ph1\">`valueName`</ph> does not exist in the key, it is created and the associated value is set to <ph id=\"ph2\">`value`</ph>.","source":"If `valueName` does not exist in the key, it is created and the associated value is set to `value`."},{"pos":[800,1165],"content":"If `keyName` specifies a subkey that does not exist, the subkey is created in the specified root. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" creates the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root. The string \"HKEY_CURRENT_USER\\MyTestKey\\Key2\\Key3\" creates the nested subkeys \"MyTestKey\", \"MyTestKey\\Key2\", and \"MyTestKey\\Key2\\Key3\".","nodes":[{"content":"If <ph id=\"ph1\">`keyName`</ph> specifies a subkey that does not exist, the subkey is created in the specified root.","pos":[0,97],"source":"If `keyName` specifies a subkey that does not exist, the subkey is created in the specified root."},{"content":"For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" creates the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root.","pos":[98,229]},{"content":"The string \"HKEY_CURRENT_USER\\MyTestKey\\Key2\\Key3\" creates the nested subkeys \"MyTestKey\", \"MyTestKey\\Key2\", and \"MyTestKey\\Key2\\Key3\".","pos":[230,365]}]},{"pos":[1172,1329],"content":"Valid root names include HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.","nodes":[{"content":"Valid root names include HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.","pos":[0,157]}]},{"pos":[1337,1860],"content":"[!NOTE]\n The <xref:Microsoft.Win32.Registry.SetValue%2A> method opens a registry key, sets the value, and closes the key each time it is called. If you need to modify a large number of values, the <xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName> method might provide better performance. The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.","leadings":["","> "],"nodes":[{"content":" The <xref:Microsoft.Win32.Registry.SetValue%2A> method opens a registry key, sets the value, and closes the key each time it is called. If you need to modify a large number of values, the <xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName> method might provide better performance. The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.","pos":[8,521],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.Win32.Registry.SetValue%2A&gt;</ph> method opens a registry key, sets the value, and closes the key each time it is called.","pos":[1,136],"source":" The <xref:Microsoft.Win32.Registry.SetValue%2A> method opens a registry key, sets the value, and closes the key each time it is called."},{"content":"If you need to modify a large number of values, the <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName&gt;</ph> method might provide better performance.","pos":[137,301],"source":" If you need to modify a large number of values, the <xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName> method might provide better performance."},{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryKey&gt;</ph> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.","pos":[302,513],"source":" The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys."}]}]},{"pos":[1867,2383],"content":"If the type of the specified `value` does not match the specified `valueKind`, and the data cannot be converted, <xref:System.ArgumentException> is thrown. For example, you can store a <xref:System.Int64?displayProperty=fullName> as a <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>, but only if its value is less than the maximum value of a <xref:System.Int32?displayProperty=fullName>. You cannot store a single string value as a <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>.","nodes":[{"content":"If the type of the specified <ph id=\"ph1\">`value`</ph> does not match the specified <ph id=\"ph2\">`valueKind`</ph>, and the data cannot be converted, <ph id=\"ph3\">&lt;xref:System.ArgumentException&gt;</ph> is thrown.","pos":[0,155],"source":"If the type of the specified `value` does not match the specified `valueKind`, and the data cannot be converted, <xref:System.ArgumentException> is thrown."},{"content":"For example, you can store a <ph id=\"ph1\">&lt;xref:System.Int64?displayProperty=fullName&gt;</ph> as a <ph id=\"ph2\">&lt;xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName&gt;</ph>, but only if its value is less than the maximum value of a <ph id=\"ph3\">&lt;xref:System.Int32?displayProperty=fullName&gt;</ph>.","pos":[156,405],"source":" For example, you can store a <xref:System.Int64?displayProperty=fullName> as a <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>, but only if its value is less than the maximum value of a <xref:System.Int32?displayProperty=fullName>."},{"content":"You cannot store a single string value as a <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName&gt;</ph>.","pos":[406,516],"source":" You cannot store a single string value as a <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>."}]},{"pos":[2391,2620],"content":"[!NOTE]\n If boxed values are passed for <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> or <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>, the conversion is done using the invariant culture.","leadings":["","> "],"nodes":[{"content":"If boxed values are passed for <ph id=\"ph1\">&lt;xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName&gt;</ph>, the conversion is done using the invariant culture.","pos":[9,227],"source":" If boxed values are passed for <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> or <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>, the conversion is done using the invariant culture."}]},{"pos":[2628,2914],"content":"[!NOTE]\n On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown.","leadings":["","> "],"nodes":[{"content":" On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown.","pos":[8,284],"nodes":[{"content":"On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages.","pos":[1,149]},{"content":"A Unicode character that is invalid for the current code page is replaced by the best available match.","pos":[150,252]},{"content":"No exception is thrown.","pos":[253,276]}]}]}],"pos":[40419,43381],"yaml":true,"extradata":"MT"},{"content":"The full registry path of the key, beginning with a valid registry root, such as \"HKEY_CURRENT_USER\".","nodes":[{"pos":[0,101],"content":"The full registry path of the key, beginning with a valid registry root, such as \"HKEY_CURRENT_USER\".","nodes":[{"content":"The full registry path of the key, beginning with a valid registry root, such as \"HKEY_CURRENT_USER\".","pos":[0,101]}]}],"pos":[44367,44469],"yaml":true},{"content":"The name of the name/value pair.","nodes":[{"pos":[0,32],"content":"The name of the name/value pair.","nodes":[{"content":"The name of the name/value pair.","pos":[0,32]}]}],"pos":[44534,44567],"yaml":true},{"content":"The value to be stored.","nodes":[{"pos":[0,23],"content":"The value to be stored.","nodes":[{"content":"The value to be stored.","pos":[0,23]}]}],"pos":[44628,44652],"yaml":true},{"content":"The registry data type to use when storing the data.","nodes":[{"pos":[0,52],"content":"The registry data type to use when storing the data.","nodes":[{"content":"The registry data type to use when storing the data.","pos":[0,52]}]}],"pos":[44737,44790],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[44953,44983],"yaml":true},{"content":"<code>keyName</code> does not begin with a valid registry root.  \n  \n -or-  \n  \n <code>keyName</code> is longer than the maximum length allowed (255 characters).  \n  \n -or-  \n  \n The type of <code>value</code> did not match the registry data type specified by <code>valueKind</code>, therefore the data could not be converted properly.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;keyName&lt;/code&gt;</ph> does not begin with a valid registry root.","source":"<code>keyName</code> does not begin with a valid registry root."},{"pos":[70,74],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[81,161],"content":"<ph id=\"ph1\">&lt;code&gt;keyName&lt;/code&gt;</ph> is longer than the maximum length allowed (255 characters).","source":"<code>keyName</code> is longer than the maximum length allowed (255 characters)."},{"pos":[168,172],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[179,335],"content":"The type of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> did not match the registry data type specified by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">valueKind</ph><ept id=\"p2\">&lt;/code&gt;</ept>, therefore the data could not be converted properly.","source":"The type of <code>value</code> did not match the registry data type specified by <code>valueKind</code>, therefore the data could not be converted properly."}],"pos":[45077,45423],"yaml":true},{"content":"The <xref href=\"Microsoft.Win32.RegistryKey\"></xref> is read-only, and thus cannot be written to; for example, it is a root-level node, or the key has not been opened with write access.","nodes":[{"pos":[0,185],"content":"The <ph id=\"ph1\">&lt;xref href=\"Microsoft.Win32.RegistryKey\"&gt;&lt;/xref&gt;</ph> is read-only, and thus cannot be written to; for example, it is a root-level node, or the key has not been opened with write access.","source":"The <xref href=\"Microsoft.Win32.RegistryKey\"></xref> is read-only, and thus cannot be written to; for example, it is a root-level node, or the key has not been opened with write access."}],"pos":[45537,45723],"yaml":true},{"content":"The user does not have the permissions required to create or modify registry keys.","nodes":[{"pos":[0,82],"content":"The user does not have the permissions required to create or modify registry keys.","nodes":[{"content":"The user does not have the permissions required to create or modify registry keys.","pos":[0,82]}]}],"pos":[45835,45918],"yaml":true},{"content":"Contains information about the default user configuration. This field reads the Windows registry base key HKEY_USERS.","nodes":[{"pos":[0,117],"content":"Contains information about the default user configuration. This field reads the Windows registry base key HKEY_USERS.","nodes":[{"content":"Contains information about the default user configuration. This field reads the Windows registry base key HKEY_USERS.","pos":[0,117],"nodes":[{"content":"Contains information about the default user configuration.","pos":[0,58]},{"content":"This field reads the Windows registry base key HKEY_USERS.","pos":[59,117]}]}]}],"pos":[46993,47111],"yaml":true},{"content":"This key contains a branch for each user of the computer. The default configuration is supplied for new users on the local computer and for the default current user if the user has not changed preferences. Because Windows 98/ME also supports Registry.Users, applications can access the user-specific information the same way they do under Windows 2000. Each user's information is stored in a separate file, which can be stored locally or on a network server. Windows 98/ME can copy this file to the user's current system so that settings can move from one computer to another with the user.","nodes":[{"pos":[0,590],"content":"This key contains a branch for each user of the computer. The default configuration is supplied for new users on the local computer and for the default current user if the user has not changed preferences. Because Windows 98/ME also supports Registry.Users, applications can access the user-specific information the same way they do under Windows 2000. Each user's information is stored in a separate file, which can be stored locally or on a network server. Windows 98/ME can copy this file to the user's current system so that settings can move from one computer to another with the user.","nodes":[{"content":"This key contains a branch for each user of the computer. The default configuration is supplied for new users on the local computer and for the default current user if the user has not changed preferences. Because Windows 98/ME also supports Registry.Users, applications can access the user-specific information the same way they do under Windows 2000. Each user's information is stored in a separate file, which can be stored locally or on a network server. Windows 98/ME can copy this file to the user's current system so that settings can move from one computer to another with the user.","pos":[0,590],"nodes":[{"content":"This key contains a branch for each user of the computer.","pos":[0,57]},{"content":"The default configuration is supplied for new users on the local computer and for the default current user if the user has not changed preferences.","pos":[58,205]},{"content":"Because Windows 98/ME also supports Registry.Users, applications can access the user-specific information the same way they do under Windows 2000.","pos":[206,352]},{"content":"Each user's information is stored in a separate file, which can be stored locally or on a network server.","pos":[353,458]},{"content":"Windows 98/ME can copy this file to the user's current system so that settings can move from one computer to another with the user.","pos":[459,590]}]}]}],"pos":[47122,47713],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Win32.Registry\n  commentId: T:Microsoft.Win32.Registry\n  id: Registry\n  children:\n  - Microsoft.Win32.Registry.ClassesRoot\n  - Microsoft.Win32.Registry.CurrentConfig\n  - Microsoft.Win32.Registry.CurrentUser\n  - Microsoft.Win32.Registry.DynData\n  - Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)\n  - Microsoft.Win32.Registry.LocalMachine\n  - Microsoft.Win32.Registry.PerformanceData\n  - Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)\n  - Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)\n  - Microsoft.Win32.Registry.Users\n  langs:\n  - csharp\n  name: Registry\n  nameWithType: Registry\n  fullName: Microsoft.Win32.Registry\n  type: Class\n  assemblies:\n  - Microsoft.Win32.Registry\n  - mscorlib\n  namespace: Microsoft.Win32\n  summary: Provides <xref href=\"Microsoft.Win32.RegistryKey\"></xref> objects that represent the root keys in the Windows registry, and `static` methods to access key/value pairs.\n  remarks: \"This class provides the set of standard root keys found in the registry on machines running Windows. The registry is a storage facility for information about applications, users, and default system settings. For example, applications can use the registry for storing information that needs to be preserved after the application is closed, and access that same information when the application is reloaded. For instance, you can store color preferences, screen locations, or the size of the window. You can control this data for each user by storing the information in a different location in the registry.  \\n  \\n The base, or root <xref:Microsoft.Win32.RegistryKey> instances that are exposed by the `Registry` class delineate the basic storage mechanism for subkeys and values in the registry. All keys are read-only because the registry depends on their existence. The keys exposed by `Registry` are:  \\n  \\n <xref:Microsoft.Win32.Registry.CurrentUser>  \\n Stores information about user preferences.  \\n  \\n <xref:Microsoft.Win32.Registry.LocalMachine>  \\n Stores configuration information for the local machine.  \\n  \\n <xref:Microsoft.Win32.Registry.ClassesRoot>  \\n Stores information about types (and classes) and their properties.  \\n  \\n <xref:Microsoft.Win32.Registry.Users>  \\n Stores information about the default user configuration.  \\n  \\n <xref:Microsoft.Win32.Registry.PerformanceData>  \\n Stores performance information for software components.  \\n  \\n <xref:Microsoft.Win32.Registry.CurrentConfig>  \\n Stores non-user-specific hardware information.  \\n  \\n <xref:Microsoft.Win32.Registry.DynData>  \\n Stores dynamic data.  \\n  \\n Once you have identified the root key under which you want to store/retrieve information from the registry, you can use the <xref:Microsoft.Win32.RegistryKey> class to add or remove subkeys, and manipulate the values for a given key.  \\n  \\n Hardware devices can place information in the registry automatically using the Plug and Play interface. Software for installing device drivers can place information in the registry by writing to standard APIs.  \\n  \\n## Static Methods for Getting and Setting Values  \\n In the .NET Framework version 2.0, the <xref:Microsoft.Win32.Registry> class also contains `static`<xref:Microsoft.Win32.Registry.GetValue%2A> and <xref:Microsoft.Win32.Registry.SetValue%2A> methods for setting and retrieving values from registry keys. These methods open and close registry keys each time they are used, so they do not perform as well as analogous methods in the <xref:Microsoft.Win32.RegistryKey> class, when you access a large number of values.  \\n  \\n The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to set Windows access control security for registry keys, to test the data type of a value before retrieving it, and to delete keys.\"\n  example:\n  - \"This section contains two code examples. The first example demonstrates root keys, and the second example demonstrates the `static`<xref:Microsoft.Win32.Registry.GetValue%2A> and <xref:Microsoft.Win32.Registry.SetValue%2A> methods.  \\n  \\n Example 1  \\n  \\n The following code example demonstrates how to retrieve the subkeys of the HKEY_USERS key, and print their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in `RegistryKey` to manipulate that key.  \\n  \\n [!code-cpp[Classic Registry.Users Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.Users Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Registry.Users Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.Users Example/CS/source.cs#1)]\\n [!code-vb[Classic Registry.Users Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.Users Example/VB/source.vb#1)]  \\n  \\n Example 2  \\n  \\n The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \\n  \\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/cpp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CPP/source.cpp#1)]\\n [!code-csharp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/csharp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CS/source.cs#1)]\\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public static class Registry\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.Registry.ClassesRoot\n  commentId: F:Microsoft.Win32.Registry.ClassesRoot\n  id: ClassesRoot\n  parent: Microsoft.Win32.Registry\n  langs:\n  - csharp\n  name: ClassesRoot\n  nameWithType: Registry.ClassesRoot\n  fullName: Registry.ClassesRoot\n  type: Field\n  assemblies:\n  - Microsoft.Win32.Registry\n  - mscorlib\n  namespace: Microsoft.Win32\n  summary: Defines the types (or classes) of documents and the properties associated with those types. This field reads the Windows registry base key HKEY_CLASSES_ROOT.\n  remarks: Both conventional applications and OLE applications use data that is stored under this key. This key also provides backward compatibility with the Windows 3.1 registration database by storing information for DDE and OLE support. File viewers and user interface extensions store their OLE class identifiers in this key, and processing servers are registered in this key.\n  example:\n  - \"The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \\n  \\n [!code-cpp[Classic Registry.ClassesRoot Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.ClassesRoot Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Registry.ClassesRoot Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.ClassesRoot Example/CS/source.cs#1)]\\n [!code-vb[Classic Registry.ClassesRoot Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.ClassesRoot Example/VB/source.vb#1)]\"\n  syntax:\n    content: public static readonly Microsoft.Win32.RegistryKey ClassesRoot;\n    return:\n      type: Microsoft.Win32.RegistryKey\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.Registry.CurrentConfig\n  commentId: F:Microsoft.Win32.Registry.CurrentConfig\n  id: CurrentConfig\n  parent: Microsoft.Win32.Registry\n  langs:\n  - csharp\n  name: CurrentConfig\n  nameWithType: Registry.CurrentConfig\n  fullName: Registry.CurrentConfig\n  type: Field\n  assemblies:\n  - Microsoft.Win32.Registry\n  - mscorlib\n  namespace: Microsoft.Win32\n  summary: Contains configuration information pertaining to the hardware that is not specific to the user. This field reads the Windows registry base key HKEY_CURRENT_CONFIG.\n  remarks: \"This member is mapped to a subkey within <xref:Microsoft.Win32.Registry.LocalMachine>.  \\n  \\n An example of using this member is an application that stores a different server name for its data depending on whether the system is attached to a network.\"\n  example:\n  - \"The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \\n  \\n [!code-cpp[Classic Registry.CurrentConfig Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.CurrentConfig Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Registry.CurrentConfig Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.CurrentConfig Example/CS/source.cs#1)]\\n [!code-vb[Classic Registry.CurrentConfig Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.CurrentConfig Example/VB/source.vb#1)]\"\n  syntax:\n    content: public static readonly Microsoft.Win32.RegistryKey CurrentConfig;\n    return:\n      type: Microsoft.Win32.RegistryKey\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.Registry.CurrentUser\n  commentId: F:Microsoft.Win32.Registry.CurrentUser\n  id: CurrentUser\n  parent: Microsoft.Win32.Registry\n  langs:\n  - csharp\n  name: CurrentUser\n  nameWithType: Registry.CurrentUser\n  fullName: Registry.CurrentUser\n  type: Field\n  assemblies:\n  - Microsoft.Win32.Registry\n  - mscorlib\n  namespace: Microsoft.Win32\n  summary: Contains information about the current user preferences. This field reads the Windows registry base key HKEY_CURRENT_USER\n  remarks: Information stored in this key includes the settings of environment variables and data about program groups, colors, printers, network connections, and application preferences. This key makes it easier to establish the current user's settings. In this key, software vendors store the current user-specific preferences to be used within their applications. Microsoft, for example, creates the HKEY_CURRENT_USER\\Software\\Microsoft key for its applications to use, with each application creating its own subkey under the Microsoft key.\n  example:\n  - \"The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \\n  \\n [!code-cpp[Classic Registry.CurrentUser Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.CurrentUser Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Registry.CurrentUser Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.CurrentUser Example/CS/source.cs#1)]\\n [!code-vb[Classic Registry.CurrentUser Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.CurrentUser Example/VB/source.vb#1)]\"\n  syntax:\n    content: public static readonly Microsoft.Win32.RegistryKey CurrentUser;\n    return:\n      type: Microsoft.Win32.RegistryKey\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.Registry.DynData\n  commentId: F:Microsoft.Win32.Registry.DynData\n  id: DynData\n  parent: Microsoft.Win32.Registry\n  langs:\n  - csharp\n  name: DynData\n  nameWithType: Registry.DynData\n  fullName: Registry.DynData\n  type: Field\n  assemblies:\n  - mscorlib\n  namespace: Microsoft.Win32\n  summary: Contains dynamic registry data. This field reads the Windows registry base key HKEY_DYN_DATA.\n  remarks: \"The Windows 98/Windows Me registry supports both static data (which is stored on disk in the registry) and dynamic data (which changes frequently, such as performance statistics). This dynamic data area is the mechanism that allows Virtual Device Drivers (VxDs) to provide real-time data to Win32 applications that can run remotely as well as locally. It also allows the system monitor to provide performance statistics on remote Windows 98/Windows Me systems.  \\n  \\n VxDs are not limited to performance data. They can provide any data they want to pass from Ring 0 to Ring 3 efficiently without monopolizing the CPU. The registry supports dynamic data by storing a pointer to a function that returns a value (or many values). When a Registry call queries values associated with a dynamic key, that function is called to return the desired value or values.  \\n  \\n> [!NOTE]\\n>  Dynamic keys were introduced in Microsoft Windows 95 to handle dynamic Registry data. They are supported only in Windows 98/Windows Me.\"\n  example:\n  - \"The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key. Note that this example can return no results, since there might not be dynamic data available, or you might not be running Windows 98/ME. Using this key may cause an error on other systems.  \\n  \\n [!code-cpp[Classic Registry.DynData Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.DynData Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Registry.DynData Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.DynData Example/CS/source.cs#1)]\\n [!code-vb[Classic Registry.DynData Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.DynData Example/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"Use PerformanceData instead\")]\n\n      public static readonly Microsoft.Win32.RegistryKey DynData;\n    return:\n      type: Microsoft.Win32.RegistryKey\n      description: ''\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The operating system does not support dynamic data; that is, it is not Windows 98, Windows 98 Second Edition, or Windows Millennium Edition (Windows Me).\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)\n  commentId: M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)\n  id: GetValue(System.String,System.String,System.Object)\n  parent: Microsoft.Win32.Registry\n  langs:\n  - csharp\n  name: GetValue(String, String, Object)\n  nameWithType: Registry.GetValue(String, String, Object)\n  fullName: Registry.GetValue(String, String, Object)\n  type: Method\n  assemblies:\n  - Microsoft.Win32.Registry\n  - mscorlib\n  namespace: Microsoft.Win32\n  summary: Retrieves the value associated with the specified name, in the specified registry key. If the name is not found in the specified key, returns a default value that you provide, or `null` if the specified key does not exist.\n  remarks: \"The string `valueName` is not case-sensitive.  \\n  \\n> [!NOTE]\\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \\\"(Default)\\\" appears instead of a name. To retrieve this unnamed value, specify either `null` or the empty string (\\\"\\\") for `valuName`.  \\n  \\n Valid root names are HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA. For example, in Visual Basic the string \\\"HKEY_CURRENT_USER\\\\MyTestKey\\\" accesses key/value pairs for the subkey \\\"MyTestKey\\\" in the HKEY_CURRENT_USER root.  \\n  \\n When the <xref:Microsoft.Win32.RegistryKey.GetValue%2A> method retrieves expandable string values (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), it expands environment strings using data from the local environment. If a value containing expandable references to environment variables has been stored as a string (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), rather than as an expandable string (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), <xref:Microsoft.Win32.RegistryKey.GetValue%2A> does not expand it. You can expand such a string after it has been retrieved by calling the <xref:System.Environment.ExpandEnvironmentVariables%2A?displayProperty=fullName> method.  \\n  \\n> [!NOTE]\\n>  The recommended way to retrieve data from HKEY_PERFORMANCE_DATA is to use the <xref:System.Diagnostics.PerformanceCounter> class rather than the <xref:Microsoft.Win32.RegistryKey.GetValue%2A?displayProperty=fullName> method.  \\n  \\n The <xref:Microsoft.Win32.Registry.GetValue%2A> and <xref:Microsoft.Win32.Registry.SetValue%2A> methods open and close registry keys each time they are used, so they do not perform as well as the methods of the <xref:Microsoft.Win32.RegistryKey> class if you access a large number of values.  \\n  \\n <xref:Microsoft.Win32.RegistryKey> also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.\"\n  example:\n  - \"The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \\n  \\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/cpp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CPP/source.cpp#1)]\\n [!code-csharp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/csharp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CS/source.cs#1)]\\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/VB/source.vb#1)]\"\n  syntax:\n    content: public static object GetValue (string keyName, string valueName, object defaultValue);\n    parameters:\n    - id: keyName\n      type: System.String\n      description: The full registry path of the key, beginning with a valid registry root, such as \"HKEY_CURRENT_USER\".\n    - id: valueName\n      type: System.String\n      description: The name of the name/value pair.\n    - id: defaultValue\n      type: System.Object\n      description: The value to return if <code>valueName</code> does not exist.\n    return:\n      type: System.Object\n      description: '`null` if the subkey specified by <code>keyName</code> does not exist; otherwise, the value associated with <code>valueName</code>, or <code>defaultValue</code> if <code>valueName</code> is not found.'\n  overload: Microsoft.Win32.Registry.GetValue*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The user does not have the permissions required to read from the registry key.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The <xref href=\"Microsoft.Win32.RegistryKey\"></xref> that contains the specified value has been marked for deletion.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>keyName</code> does not begin with a valid registry root.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.Registry.LocalMachine\n  commentId: F:Microsoft.Win32.Registry.LocalMachine\n  id: LocalMachine\n  parent: Microsoft.Win32.Registry\n  langs:\n  - csharp\n  name: LocalMachine\n  nameWithType: Registry.LocalMachine\n  fullName: Registry.LocalMachine\n  type: Field\n  assemblies:\n  - Microsoft.Win32.Registry\n  - mscorlib\n  namespace: Microsoft.Win32\n  summary: Contains the configuration data for the local machine. This field reads the Windows registry base key HKEY_LOCAL_MACHINE.\n  remarks: \"`LocalMachine` contains five keys:  \\n  \\n Hardware  \\n Describes the physical hardware in the computer, the way device drivers use that hardware, and mappings and related data that link kernel-mode drivers with user-mode code. All data in this key is recreated each time the system is started. The Description subkey describes the actual computer hardware. The DeviceMap subkey contains miscellaneous data in formats specific to particular classes of drivers. The ResourceMap subkey describes which device drivers claim which hardware resources. The Windows NT Diagnostics program (Winmsdp.exe) can report on its contents in an easy-to-read form.  \\n  \\n SAM  \\n The directory services database of security information for user and group accounts, and for the domains in Windows 2000 Server (SAM is the Security Account Manager, known as the directory services database).  \\n  \\n Security  \\n Contains the local security policy, such as specific user rights. This key is used only by the Windows 2000 security subsystem.  \\n  \\n Software  \\n The per-computer software database. This key contains data about software installed on the local computer, along with various items of miscellaneous configuration data.  \\n  \\n System  \\n Controls system startup, device driver loading, Windows 2000 services, and operating system behavior.  \\n  \\n By convention, if similar data exists under <xref:Microsoft.Win32.Registry.CurrentUser> and under <xref:Microsoft.Win32.Registry.LocalMachine>, the data in <xref:Microsoft.Win32.Registry.CurrentUser> takes precedence. However, values in this key can also extend (rather than replace) data in Registry.LocalMachine. Also, some items (such as device driver loading entries) are meaningless if they occur outside of Registry.LocalMachine.\"\n  example:\n  - \"The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \\n  \\n [!code-cpp[Classic Registry.LocalMachine Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.LocalMachine Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Registry.LocalMachine Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.LocalMachine Example/CS/source.cs#1)]\\n [!code-vb[Classic Registry.LocalMachine Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.LocalMachine Example/VB/source.vb#1)]\"\n  syntax:\n    content: public static readonly Microsoft.Win32.RegistryKey LocalMachine;\n    return:\n      type: Microsoft.Win32.RegistryKey\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.Registry.PerformanceData\n  commentId: F:Microsoft.Win32.Registry.PerformanceData\n  id: PerformanceData\n  parent: Microsoft.Win32.Registry\n  langs:\n  - csharp\n  name: PerformanceData\n  nameWithType: Registry.PerformanceData\n  fullName: Registry.PerformanceData\n  type: Field\n  assemblies:\n  - Microsoft.Win32.Registry\n  - mscorlib\n  namespace: Microsoft.Win32\n  summary: Contains performance information for software components. This field reads the Windows registry base key HKEY_PERFORMANCE_DATA.\n  remarks: \"Each software component creates keys for its objects, counters when it is installed, and writes counter data while it is executing. You can access this data as you would access any other registry data, using the <xref:Microsoft.Win32.RegistryKey> functions.  \\n  \\n Although you use the registry to collect performance data, the data is not stored in the registry database. Instead, accessing the registry with this key causes the system to collect the data from the appropriate system object managers.  \\n  \\n To obtain performance data from the local system, use the <xref:Microsoft.Win32.RegistryKey.GetValue%2A> method, with the Registry.PerformanceData key. The first call opens the key (you do not need to explicitly open the key first). However, be sure to use the <xref:Microsoft.Win32.RegistryKey.Close%2A> method to close the handle to the key when you are finished obtaining performance data. The user cannot install or remove a software component while its performance data is in use.  \\n  \\n To obtain performance data from a remote system, you must use the <xref:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey%2A> method, with the computer name of the remote system and the Registry.PerformanceData key. This call retrieves a key representing the performance data for the remote system. To retrieve the data, call <xref:Microsoft.Win32.RegistryKey.GetValue%2A> using this key, rather than the Registry.PerformanceData key.  \\n  \\n> [!NOTE]\\n>  On Windows Server 2003, a user must at least belong to the Performance Monitor Users group in order to access subkeys of this base key.\"\n  example:\n  - \"The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key. Note that this example can often return no results, since there might be no performance data.  \\n  \\n [!code-cpp[Classic Registry.PerformanceData Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.PerformanceData Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Registry.PerformanceData Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.PerformanceData Example/CS/source.cs#1)]\\n [!code-vb[Classic Registry.PerformanceData Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.PerformanceData Example/VB/source.vb#1)]\"\n  syntax:\n    content: public static readonly Microsoft.Win32.RegistryKey PerformanceData;\n    return:\n      type: Microsoft.Win32.RegistryKey\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)\n  commentId: M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)\n  id: SetValue(System.String,System.String,System.Object)\n  parent: Microsoft.Win32.Registry\n  langs:\n  - csharp\n  name: SetValue(String, String, Object)\n  nameWithType: Registry.SetValue(String, String, Object)\n  fullName: Registry.SetValue(String, String, Object)\n  type: Method\n  assemblies:\n  - Microsoft.Win32.Registry\n  - mscorlib\n  namespace: Microsoft.Win32\n  summary: Sets the specified name/value pair on the specified registry key. If the specified key does not exist, it is created.\n  remarks: \"Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the `valueName` parameter is no longer restricted to a maximum of 255 characters; however, the `keyName` parameter continues to have the 255-character restriction.  \\n  \\n Because many values can be stored in each key in the registry, you must use the `valueName` parameter to specify the particular value you want to set.  \\n  \\n> [!NOTE]\\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \\\"(Default)\\\" appears instead of a name. To set this unnamed value, specify either `null` or the empty string (\\\"\\\") for `valueName`.  \\n  \\n If `valueName` does not exist in the key, it is created and the associated value is set to `value`.  \\n  \\n If `keyName` specifies a subkey that does not exist, the subkey is created in the specified root. For example, in Visual Basic the string \\\"HKEY_CURRENT_USER\\\\MyTestKey\\\" creates the subkey \\\"MyTestKey\\\" in the HKEY_CURRENT_USER root. The string \\\"HKEY_CURRENT_USER\\\\MyTestKey\\\\Key2\\\\Key3\\\" creates the nested subkeys \\\"MyTestKey\\\", \\\"MyTestKey\\\\Key2\\\", and \\\"MyTestKey\\\\Key2\\\\Key3\\\".  \\n  \\n Valid root names include HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.  \\n  \\n> [!NOTE]\\n>  The <xref:Microsoft.Win32.Registry.SetValue%2A> method opens a registry key, sets the value, and closes the key each time it is called. If you need to modify a large number of values, the <xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName> method might provide better performance. The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.  \\n  \\n This overload of <xref:Microsoft.Win32.Registry.SetValue%2A> stores 64-bit integers as strings (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>). To store 64-bit numbers as <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> values, use the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload.  \\n  \\n This overload of <xref:Microsoft.Win32.Registry.SetValue%2A> stores all string values as <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> objects, even if they contain expandable references to environment variables. To save string values as expandable strings (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), use the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload.  \\n  \\n This overload is equivalent to calling the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload with <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>.  \\n  \\n> [!NOTE]\\n>  On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown.\"\n  example:\n  - \"The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \\n  \\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/cpp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CPP/source.cpp#1)]\\n [!code-csharp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/csharp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CS/source.cs#1)]\\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/VB/source.vb#1)]\"\n  syntax:\n    content: public static void SetValue (string keyName, string valueName, object value);\n    parameters:\n    - id: keyName\n      type: System.String\n      description: The full registry path of the key, beginning with a valid registry root, such as \"HKEY_CURRENT_USER\".\n    - id: valueName\n      type: System.String\n      description: The name of the name/value pair.\n    - id: value\n      type: System.Object\n      description: The value to be stored.\n  overload: Microsoft.Win32.Registry.SetValue*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>keyName</code> does not begin with a valid registry root.  \\n  \\n -or-  \\n  \\n <code>keyName</code> is longer than the maximum length allowed (255 characters).\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The <xref href=\"Microsoft.Win32.RegistryKey\"></xref> is read-only, and thus cannot be written to; for example, it is a root-level node.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The user does not have the permissions required to create or modify registry keys.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)\n  commentId: M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)\n  id: SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)\n  parent: Microsoft.Win32.Registry\n  langs:\n  - csharp\n  name: SetValue(String, String, Object, RegistryValueKind)\n  nameWithType: Registry.SetValue(String, String, Object, RegistryValueKind)\n  fullName: Registry.SetValue(String, String, Object, RegistryValueKind)\n  type: Method\n  assemblies:\n  - Microsoft.Win32.Registry\n  - mscorlib\n  namespace: Microsoft.Win32\n  summary: Sets the name/value pair on the specified registry key, using the specified registry data type. If the specified key does not exist, it is created.\n  remarks: \"Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the `valueName` parameter is no longer restricted to a maximum of 255 characters; however, the `keyName` parameter continues have the 255-character restriction.  \\n  \\n Because many values can be stored in each key in the registry, you must use the `valueName` parameter to specify the particular value you want to set.  \\n  \\n> [!NOTE]\\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \\\"(Default)\\\" appears instead of a name. To set this unnamed value, specify either `null` or the empty string (\\\"\\\") for `valueName`.  \\n  \\n If `valueName` does not exist in the key, it is created and the associated value is set to `value`.  \\n  \\n If `keyName` specifies a subkey that does not exist, the subkey is created in the specified root. For example, in Visual Basic the string \\\"HKEY_CURRENT_USER\\\\MyTestKey\\\" creates the subkey \\\"MyTestKey\\\" in the HKEY_CURRENT_USER root. The string \\\"HKEY_CURRENT_USER\\\\MyTestKey\\\\Key2\\\\Key3\\\" creates the nested subkeys \\\"MyTestKey\\\", \\\"MyTestKey\\\\Key2\\\", and \\\"MyTestKey\\\\Key2\\\\Key3\\\".  \\n  \\n Valid root names include HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.  \\n  \\n> [!NOTE]\\n>  The <xref:Microsoft.Win32.Registry.SetValue%2A> method opens a registry key, sets the value, and closes the key each time it is called. If you need to modify a large number of values, the <xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName> method might provide better performance. The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.  \\n  \\n If the type of the specified `value` does not match the specified `valueKind`, and the data cannot be converted, <xref:System.ArgumentException> is thrown. For example, you can store a <xref:System.Int64?displayProperty=fullName> as a <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>, but only if its value is less than the maximum value of a <xref:System.Int32?displayProperty=fullName>. You cannot store a single string value as a <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>.  \\n  \\n> [!NOTE]\\n>  If boxed values are passed for <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> or <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>, the conversion is done using the invariant culture.  \\n  \\n> [!NOTE]\\n>  On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown.\"\n  example:\n  - \"The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \\n  \\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/cpp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CPP/source.cpp#1)]\\n [!code-csharp[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/csharp/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/CS/source.cs#1)]\\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Microsoft.Win32.Registry.GetSet/VB/source.vb#1)]\"\n  syntax:\n    content: public static void SetValue (string keyName, string valueName, object value, Microsoft.Win32.RegistryValueKind valueKind);\n    parameters:\n    - id: keyName\n      type: System.String\n      description: The full registry path of the key, beginning with a valid registry root, such as \"HKEY_CURRENT_USER\".\n    - id: valueName\n      type: System.String\n      description: The name of the name/value pair.\n    - id: value\n      type: System.Object\n      description: The value to be stored.\n    - id: valueKind\n      type: Microsoft.Win32.RegistryValueKind\n      description: The registry data type to use when storing the data.\n  overload: Microsoft.Win32.Registry.SetValue*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>keyName</code> does not begin with a valid registry root.  \\n  \\n -or-  \\n  \\n <code>keyName</code> is longer than the maximum length allowed (255 characters).  \\n  \\n -or-  \\n  \\n The type of <code>value</code> did not match the registry data type specified by <code>valueKind</code>, therefore the data could not be converted properly.\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The <xref href=\"Microsoft.Win32.RegistryKey\"></xref> is read-only, and thus cannot be written to; for example, it is a root-level node, or the key has not been opened with write access.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The user does not have the permissions required to create or modify registry keys.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.Registry.Users\n  commentId: F:Microsoft.Win32.Registry.Users\n  id: Users\n  parent: Microsoft.Win32.Registry\n  langs:\n  - csharp\n  name: Users\n  nameWithType: Registry.Users\n  fullName: Registry.Users\n  type: Field\n  assemblies:\n  - Microsoft.Win32.Registry\n  - mscorlib\n  namespace: Microsoft.Win32\n  summary: Contains information about the default user configuration. This field reads the Windows registry base key HKEY_USERS.\n  remarks: This key contains a branch for each user of the computer. The default configuration is supplied for new users on the local computer and for the default current user if the user has not changed preferences. Because Windows 98/ME also supports Registry.Users, applications can access the user-specific information the same way they do under Windows 2000. Each user's information is stored in a separate file, which can be stored locally or on a network server. Windows 98/ME can copy this file to the user's current system so that settings can move from one computer to another with the user.\n  example:\n  - \"The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \\n  \\n [!code-cpp[Classic Registry.Users Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Registry.Users Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Registry.Users Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Registry.Users Example/CS/source.cs#1)]\\n [!code-vb[Classic Registry.Users Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Registry.Users Example/VB/source.vb#1)]\"\n  syntax:\n    content: public static readonly Microsoft.Win32.RegistryKey Users;\n    return:\n      type: Microsoft.Win32.RegistryKey\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.Security.SecurityException\n  parent: System.Security\n  isExternal: false\n  name: SecurityException\n  nameWithType: SecurityException\n  fullName: System.Security.SecurityException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  nameWithType: IOException\n  fullName: System.IO.IOException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.UnauthorizedAccessException\n  parent: System\n  isExternal: false\n  name: UnauthorizedAccessException\n  nameWithType: UnauthorizedAccessException\n  fullName: System.UnauthorizedAccessException\n- uid: Microsoft.Win32.Registry.ClassesRoot\n  parent: Microsoft.Win32.Registry\n  isExternal: false\n  name: ClassesRoot\n  nameWithType: Registry.ClassesRoot\n  fullName: Registry.ClassesRoot\n- uid: Microsoft.Win32.RegistryKey\n  parent: Microsoft.Win32\n  isExternal: false\n  name: RegistryKey\n  nameWithType: RegistryKey\n  fullName: Microsoft.Win32.RegistryKey\n- uid: Microsoft.Win32.Registry.CurrentConfig\n  parent: Microsoft.Win32.Registry\n  isExternal: false\n  name: CurrentConfig\n  nameWithType: Registry.CurrentConfig\n  fullName: Registry.CurrentConfig\n- uid: Microsoft.Win32.Registry.CurrentUser\n  parent: Microsoft.Win32.Registry\n  isExternal: false\n  name: CurrentUser\n  nameWithType: Registry.CurrentUser\n  fullName: Registry.CurrentUser\n- uid: Microsoft.Win32.Registry.DynData\n  parent: Microsoft.Win32.Registry\n  isExternal: false\n  name: DynData\n  nameWithType: Registry.DynData\n  fullName: Registry.DynData\n- uid: Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)\n  parent: Microsoft.Win32.Registry\n  isExternal: false\n  name: GetValue(String, String, Object)\n  nameWithType: Registry.GetValue(String, String, Object)\n  fullName: Registry.GetValue(String, String, Object)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: Microsoft.Win32.Registry.LocalMachine\n  parent: Microsoft.Win32.Registry\n  isExternal: false\n  name: LocalMachine\n  nameWithType: Registry.LocalMachine\n  fullName: Registry.LocalMachine\n- uid: Microsoft.Win32.Registry.PerformanceData\n  parent: Microsoft.Win32.Registry\n  isExternal: false\n  name: PerformanceData\n  nameWithType: Registry.PerformanceData\n  fullName: Registry.PerformanceData\n- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)\n  parent: Microsoft.Win32.Registry\n  isExternal: false\n  name: SetValue(String, String, Object)\n  nameWithType: Registry.SetValue(String, String, Object)\n  fullName: Registry.SetValue(String, String, Object)\n- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)\n  parent: Microsoft.Win32.Registry\n  isExternal: false\n  name: SetValue(String, String, Object, RegistryValueKind)\n  nameWithType: Registry.SetValue(String, String, Object, RegistryValueKind)\n  fullName: Registry.SetValue(String, String, Object, RegistryValueKind)\n- uid: Microsoft.Win32.RegistryValueKind\n  parent: Microsoft.Win32\n  isExternal: false\n  name: RegistryValueKind\n  nameWithType: RegistryValueKind\n  fullName: Microsoft.Win32.RegistryValueKind\n- uid: Microsoft.Win32.Registry.Users\n  parent: Microsoft.Win32.Registry\n  isExternal: false\n  name: Users\n  nameWithType: Registry.Users\n  fullName: Registry.Users\n- uid: Microsoft.Win32.Registry.SetValue*\n  parent: Microsoft.Win32.Registry\n  isExternal: false\n  name: SetValue\n  nameWithType: Registry.SetValue\n  fullName: Registry.SetValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml\n- uid: Microsoft.Win32.Registry.GetValue*\n  parent: Microsoft.Win32.Registry\n  isExternal: false\n  name: GetValue\n  nameWithType: Registry.GetValue\n  fullName: Registry.GetValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/Registry.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}