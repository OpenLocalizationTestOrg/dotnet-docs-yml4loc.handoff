{"nodes":[{"content":"Provides access to the metadata and MSIL for the body of a method.","nodes":[{"pos":[0,66],"content":"Provides access to the metadata and MSIL for the body of a method.","nodes":[{"content":"Provides access to the metadata and MSIL for the body of a method.","pos":[0,66]}]}],"pos":[716,783],"yaml":true},{"content":"The <xref:System.Reflection.MethodBody> class provides access to information about the local variables and exception-handling clauses in a method body, and to the Microsoft intermediate language (MSIL) that makes up the method body.  \n  \n You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveType%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.  \n  \n> [!NOTE]\n>  Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  \n  \n To obtain a <xref:System.Reflection.MethodBody> object for a given method, first obtain a <xref:System.Reflection.MethodInfo> object for the method, then call the <xref:System.Reflection.MethodInfo> object's <xref:System.Reflection.MethodBase.GetMethodBody%2A> method.","nodes":[{"pos":[0,232],"content":"The <xref:System.Reflection.MethodBody> class provides access to information about the local variables and exception-handling clauses in a method body, and to the Microsoft intermediate language (MSIL) that makes up the method body.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBody&gt;</ph> class provides access to information about the local variables and exception-handling clauses in a method body, and to the Microsoft intermediate language (MSIL) that makes up the method body.","pos":[0,232],"source":"The <xref:System.Reflection.MethodBody> class provides access to information about the local variables and exception-handling clauses in a method body, and to the Microsoft intermediate language (MSIL) that makes up the method body."}]},{"pos":[239,734],"content":"You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveType%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.","nodes":[{"content":"You can use the token-resolution methods of the module class, such as <ph id=\"ph1\">&lt;xref:System.Reflection.Module.ResolveType%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.Module.ResolveMethod%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Reflection.Module.ResolveType%2A&gt;</ph>, to resolve the tokens in the method body to <ph id=\"ph4\">&lt;xref:System.Type&gt;</ph> objects, <ph id=\"ph5\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> objects, and <ph id=\"ph6\">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.","pos":[0,495],"source":"You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveType%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body."}]},{"pos":[742,1334],"content":"[!NOTE]\n Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":" Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","pos":[8,590],"nodes":[{"content":"Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats.","pos":[1,98]},{"content":"Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[99,285]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[286,582],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}]},{"pos":[1341,1609],"content":"To obtain a <xref:System.Reflection.MethodBody> object for a given method, first obtain a <xref:System.Reflection.MethodInfo> object for the method, then call the <xref:System.Reflection.MethodInfo> object's <xref:System.Reflection.MethodBase.GetMethodBody%2A> method.","nodes":[{"content":"To obtain a <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBody&gt;</ph> object for a given method, first obtain a <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object for the method, then call the <ph id=\"ph3\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object's <ph id=\"ph4\">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A&gt;</ph> method.","pos":[0,268],"source":"To obtain a <xref:System.Reflection.MethodBody> object for a given method, first obtain a <xref:System.Reflection.MethodInfo> object for the method, then call the <xref:System.Reflection.MethodInfo> object's <xref:System.Reflection.MethodBase.GetMethodBody%2A> method."}]}],"pos":[794,2417],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Reflection.MethodBody\"></xref> class.","nodes":[{"pos":[0,90],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodBody\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Reflection.MethodBody\"></xref> class."}],"pos":[5342,5433],"yaml":true},{"content":"This constructor is invoked by derived classes during the construction of <xref:System.Reflection.MethodBody> objects.","nodes":[{"pos":[0,118],"content":"This constructor is invoked by derived classes during the construction of <xref:System.Reflection.MethodBody> objects.","nodes":[{"content":"This constructor is invoked by derived classes during the construction of <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBody&gt;</ph> objects.","pos":[0,118],"source":"This constructor is invoked by derived classes during the construction of <xref:System.Reflection.MethodBody> objects."}]}],"pos":[5444,5563],"yaml":true,"extradata":"MT"},{"content":"Gets a list that includes all the exception-handling clauses in the method body.","nodes":[{"pos":[0,80],"content":"Gets a list that includes all the exception-handling clauses in the method body.","nodes":[{"content":"Gets a list that includes all the exception-handling clauses in the method body.","pos":[0,80]}]}],"pos":[6894,6975],"yaml":true},{"content":"The list includes all clauses from all try blocks in the method body. Each <xref:System.Reflection.ExceptionHandlingClause> object contains information that identifies the try block with which it is associated.  \n  \n> [!NOTE]\n>  Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,210],"content":"The list includes all clauses from all try blocks in the method body. Each <xref:System.Reflection.ExceptionHandlingClause> object contains information that identifies the try block with which it is associated.","nodes":[{"content":"The list includes all clauses from all try blocks in the method body. Each <xref:System.Reflection.ExceptionHandlingClause> object contains information that identifies the try block with which it is associated.","pos":[0,210],"nodes":[{"content":"The list includes all clauses from all try blocks in the method body.","pos":[0,69]},{"content":"Each <ph id=\"ph1\">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph> object contains information that identifies the try block with which it is associated.","pos":[70,210],"source":" Each <xref:System.Reflection.ExceptionHandlingClause> object contains information that identifies the try block with which it is associated."}]}]},{"pos":[218,828],"content":"[!NOTE]\n Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":" Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","pos":[8,608],"nodes":[{"content":"Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats.","pos":[1,116]},{"content":"Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[117,303]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[304,600],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}]}],"pos":[6986,7824],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IList`1\"></xref> of <xref href=\"System.Reflection.ExceptionHandlingClause\"></xref> objects representing the exception-handling clauses in the body of the method.","nodes":[{"pos":[0,203],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IList`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Reflection.ExceptionHandlingClause\"&gt;&lt;/xref&gt;</ph> objects representing the exception-handling clauses in the body of the method.","source":"An <xref href=\"System.Collections.Generic.IList`1\"></xref> of <xref href=\"System.Reflection.ExceptionHandlingClause\"></xref> objects representing the exception-handling clauses in the body of the method."}],"pos":[10182,10386],"yaml":true},{"content":"Returns the MSIL for the method body, as an array of bytes.","nodes":[{"pos":[0,59],"content":"Returns the MSIL for the method body, as an array of bytes.","nodes":[{"content":"Returns the MSIL for the method body, as an array of bytes.","pos":[0,59]}]}],"pos":[11625,11685],"yaml":true},{"content":"You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveMember%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.  \n  \n> [!NOTE]\n>  Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,497],"content":"You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveMember%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.","nodes":[{"content":"You can use the token-resolution methods of the module class, such as <ph id=\"ph1\">&lt;xref:System.Reflection.Module.ResolveType%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.Module.ResolveMethod%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Reflection.Module.ResolveMember%2A&gt;</ph>, to resolve the tokens in the method body to <ph id=\"ph4\">&lt;xref:System.Type&gt;</ph> objects, <ph id=\"ph5\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> objects, and <ph id=\"ph6\">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.","pos":[0,497],"source":"You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveMember%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body."}]},{"pos":[505,1097],"content":"[!NOTE]\n Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":" Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","pos":[8,590],"nodes":[{"content":"Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats.","pos":[1,98]},{"content":"Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[99,285]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[286,582],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}]}],"pos":[11696,12803],"yaml":true,"extradata":"MT"},{"content":"An array of type <xref href=\"System.Byte\"></xref> that contains the MSIL for the method body.","nodes":[{"pos":[0,93],"content":"An array of type <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the MSIL for the method body.","source":"An array of type <xref href=\"System.Byte\"></xref> that contains the MSIL for the method body."}],"pos":[12945,13039],"yaml":true},{"content":"Gets a value indicating whether local variables in the method body are initialized to the default values for their types.","nodes":[{"pos":[0,121],"content":"Gets a value indicating whether local variables in the method body are initialized to the default values for their types.","nodes":[{"content":"Gets a value indicating whether local variables in the method body are initialized to the default values for their types.","pos":[0,121]}]}],"pos":[14230,14352],"yaml":true},{"content":"The <xref:System.Reflection.MethodBody.InitLocals%2A> property refers to variables that are not explicitly initialized; that is, variables that are declared with syntax such as `int x;` in C# or `Dim x As Integer` in Visual Basic.  \n  \n Reference variables are initialized to `null` by default. Numeric variables are initialized to zero.","nodes":[{"pos":[0,230],"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBody.InitLocals%2A&gt;</ph> property refers to variables that are not explicitly initialized; that is, variables that are declared with syntax such as <ph id=\"ph2\">`int x;`</ph> in C# or <ph id=\"ph3\">`Dim x As Integer`</ph> in Visual Basic.","source":"The <xref:System.Reflection.MethodBody.InitLocals%2A> property refers to variables that are not explicitly initialized; that is, variables that are declared with syntax such as `int x;` in C# or `Dim x As Integer` in Visual Basic."},{"pos":[237,337],"content":"Reference variables are initialized to `null` by default. Numeric variables are initialized to zero.","nodes":[{"content":"Reference variables are initialized to <ph id=\"ph1\">`null`</ph> by default.","pos":[0,57],"source":"Reference variables are initialized to `null` by default."},{"content":"Numeric variables are initialized to zero.","pos":[58,100]}]}],"pos":[14363,14705],"yaml":true,"extradata":"MT"},{"content":"`true` if the method body contains code to initialize local variables to `null` for reference types, or to the zero-initialized value for value types; otherwise, `false`.","nodes":[{"pos":[0,170],"content":"<ph id=\"ph1\">`true`</ph> if the method body contains code to initialize local variables to <ph id=\"ph2\">`null`</ph> for reference types, or to the zero-initialized value for value types; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the method body contains code to initialize local variables to `null` for reference types, or to the zero-initialized value for value types; otherwise, `false`."}],"pos":[16016,16189],"yaml":true},{"content":"Gets a metadata token for the signature that describes the local variables for the method in metadata.","nodes":[{"pos":[0,102],"content":"Gets a metadata token for the signature that describes the local variables for the method in metadata.","nodes":[{"content":"Gets a metadata token for the signature that describes the local variables for the method in metadata.","pos":[0,102]}]}],"pos":[17476,17579],"yaml":true},{"content":"Use the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain information about the method's local variables.  \n  \n> [!NOTE]\n>  Information about local variable signatures can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,128],"content":"Use the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain information about the method's local variables.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBody.LocalVariables%2A&gt;</ph> property to obtain information about the method's local variables.","pos":[0,128],"source":"Use the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain information about the method's local variables."}]},{"pos":[136,621],"content":"[!NOTE]\n Information about local variable signatures can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":" Information about local variable signatures can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","pos":[8,483],"nodes":[{"content":"Information about local variable signatures can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[1,178]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[179,475],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}]}],"pos":[17590,18219],"yaml":true,"extradata":"MT"},{"content":"An integer that represents the metadata token.","nodes":[{"pos":[0,46],"content":"An integer that represents the metadata token.","nodes":[{"content":"An integer that represents the metadata token.","pos":[0,46]}]}],"pos":[18354,18401],"yaml":true},{"content":"Gets the list of local variables declared in the method body.","nodes":[{"pos":[0,61],"content":"Gets the list of local variables declared in the method body.","nodes":[{"content":"Gets the list of local variables declared in the method body.","pos":[0,61]}]}],"pos":[19627,19689],"yaml":true},{"content":"You do not need the metadata token for the local variable signature provided by the <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A> property.","nodes":[{"pos":[0,160],"content":"You do not need the metadata token for the local variable signature provided by the <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A> property.","nodes":[{"content":"You do not need the metadata token for the local variable signature provided by the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A&gt;</ph> property.","pos":[0,160],"source":"You do not need the metadata token for the local variable signature provided by the <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A> property."}]}],"pos":[19700,19861],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Collections.Generic.IList`1\"></xref> of <xref href=\"System.Reflection.LocalVariableInfo\"></xref> objects that describe the local variables declared in the method body.","nodes":[{"pos":[0,189],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IList`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Reflection.LocalVariableInfo\"&gt;&lt;/xref&gt;</ph> objects that describe the local variables declared in the method body.","source":"An <xref href=\"System.Collections.Generic.IList`1\"></xref> of <xref href=\"System.Reflection.LocalVariableInfo\"></xref> objects that describe the local variables declared in the method body."}],"pos":[21868,22058],"yaml":true},{"content":"Gets the maximum number of items on the operand stack when the method is executing.","nodes":[{"pos":[0,83],"content":"Gets the maximum number of items on the operand stack when the method is executing.","nodes":[{"content":"Gets the maximum number of items on the operand stack when the method is executing.","pos":[0,83]}]}],"pos":[23259,23343],"yaml":true},{"content":"For more information, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,481],"content":"For more information, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"content":"For more information, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[0,184]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[185,481],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}],"pos":[23354,23838],"yaml":true,"extradata":"MT"},{"content":"The maximum number of items on the operand stack when the method is executing.","nodes":[{"pos":[0,78],"content":"The maximum number of items on the operand stack when the method is executing.","nodes":[{"content":"The maximum number of items on the operand stack when the method is executing.","pos":[0,78]}]}],"pos":[25148,25227],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.MethodBody\n  commentId: T:System.Reflection.MethodBody\n  id: MethodBody\n  children:\n  - System.Reflection.MethodBody.#ctor\n  - System.Reflection.MethodBody.ExceptionHandlingClauses\n  - System.Reflection.MethodBody.GetILAsByteArray\n  - System.Reflection.MethodBody.InitLocals\n  - System.Reflection.MethodBody.LocalSignatureMetadataToken\n  - System.Reflection.MethodBody.LocalVariables\n  - System.Reflection.MethodBody.MaxStackSize\n  langs:\n  - csharp\n  name: MethodBody\n  nameWithType: MethodBody\n  fullName: System.Reflection.MethodBody\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Provides access to the metadata and MSIL for the body of a method.\n  remarks: \"The <xref:System.Reflection.MethodBody> class provides access to information about the local variables and exception-handling clauses in a method body, and to the Microsoft intermediate language (MSIL) that makes up the method body.  \\n  \\n You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveType%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.  \\n  \\n> [!NOTE]\\n>  Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\" and \\\"Partition III: CIL Instruction Set\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  \\n  \\n To obtain a <xref:System.Reflection.MethodBody> object for a given method, first obtain a <xref:System.Reflection.MethodInfo> object for the method, then call the <xref:System.Reflection.MethodInfo> object's <xref:System.Reflection.MethodBase.GetMethodBody%2A> method.\"\n  example:\n  - \"The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.  \\n  \\n The example uses the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects and then displays their types and index order. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of exception-handling clauses.  \\n  \\n> [!NOTE]\\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \\n  \\n [!code-cpp[MethodBody#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#1)]\\n [!code-csharp[MethodBody#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#1)]\\n [!code-vb[MethodBody#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class MethodBody\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBody.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBody.#ctor\n  commentId: M:System.Reflection.MethodBody.#ctor\n  id: '#ctor'\n  parent: System.Reflection.MethodBody\n  langs:\n  - csharp\n  name: MethodBody()\n  nameWithType: MethodBody.MethodBody()\n  fullName: MethodBody.MethodBody()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Initializes a new instance of the <xref href=\"System.Reflection.MethodBody\"></xref> class.\n  remarks: This constructor is invoked by derived classes during the construction of <xref:System.Reflection.MethodBody> objects.\n  syntax:\n    content: protected MethodBody ();\n    parameters: []\n  overload: System.Reflection.MethodBody.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBody.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBody.ExceptionHandlingClauses\n  commentId: P:System.Reflection.MethodBody.ExceptionHandlingClauses\n  id: ExceptionHandlingClauses\n  parent: System.Reflection.MethodBody\n  langs:\n  - csharp\n  name: ExceptionHandlingClauses\n  nameWithType: MethodBody.ExceptionHandlingClauses\n  fullName: MethodBody.ExceptionHandlingClauses\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a list that includes all the exception-handling clauses in the method body.\n  remarks: \"The list includes all clauses from all try blocks in the method body. Each <xref:System.Reflection.ExceptionHandlingClause> object contains information that identifies the try block with which it is associated.  \\n  \\n> [!NOTE]\\n>  Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\" and \\\"Partition III: CIL Instruction Set\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  example:\n  - \"The following code example defines a test method named `MethodBodyExample` and displays information about its exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects.  \\n  \\n> [!NOTE]\\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \\n  \\n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \\n  \\n [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]\\n [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]\\n [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  \\n[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]\\n[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]\\n[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  \\n[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]\\n[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]\\n[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  \\n[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]\\n[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]\\n[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]\"\n  syntax:\n    content: public virtual System.Collections.Generic.IList<System.Reflection.ExceptionHandlingClause> ExceptionHandlingClauses { get; }\n    return:\n      type: System.Collections.Generic.IList{System.Reflection.ExceptionHandlingClause}\n      description: An <xref href=\"System.Collections.Generic.IList`1\"></xref> of <xref href=\"System.Reflection.ExceptionHandlingClause\"></xref> objects representing the exception-handling clauses in the body of the method.\n  overload: System.Reflection.MethodBody.ExceptionHandlingClauses*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBody.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBody.GetILAsByteArray\n  commentId: M:System.Reflection.MethodBody.GetILAsByteArray\n  id: GetILAsByteArray\n  parent: System.Reflection.MethodBody\n  langs:\n  - csharp\n  name: GetILAsByteArray()\n  nameWithType: MethodBody.GetILAsByteArray()\n  fullName: MethodBody.GetILAsByteArray()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the MSIL for the method body, as an array of bytes.\n  remarks: \"You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveMember%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.  \\n  \\n> [!NOTE]\\n>  Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\" and \\\"Partition III: CIL Instruction Set\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: public virtual byte[] GetILAsByteArray ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: An array of type <xref href=\"System.Byte\"></xref> that contains the MSIL for the method body.\n  overload: System.Reflection.MethodBody.GetILAsByteArray*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBody.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBody.InitLocals\n  commentId: P:System.Reflection.MethodBody.InitLocals\n  id: InitLocals\n  parent: System.Reflection.MethodBody\n  langs:\n  - csharp\n  name: InitLocals\n  nameWithType: MethodBody.InitLocals\n  fullName: MethodBody.InitLocals\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether local variables in the method body are initialized to the default values for their types.\n  remarks: \"The <xref:System.Reflection.MethodBody.InitLocals%2A> property refers to variables that are not explicitly initialized; that is, variables that are declared with syntax such as `int x;` in C# or `Dim x As Integer` in Visual Basic.  \\n  \\n Reference variables are initialized to `null` by default. Numeric variables are initialized to zero.\"\n  example:\n  - \"The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.MaxStackSize%2A> and <xref:System.Reflection.MethodBody.InitLocals%2A> properties are displayed.  \\n  \\n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \\n  \\n [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]\\n [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]\\n [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  \\n[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]\\n[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]\\n[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]\"\n  syntax:\n    content: public virtual bool InitLocals { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the method body contains code to initialize local variables to `null` for reference types, or to the zero-initialized value for value types; otherwise, `false`.'\n  overload: System.Reflection.MethodBody.InitLocals*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBody.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken\n  commentId: P:System.Reflection.MethodBody.LocalSignatureMetadataToken\n  id: LocalSignatureMetadataToken\n  parent: System.Reflection.MethodBody\n  langs:\n  - csharp\n  name: LocalSignatureMetadataToken\n  nameWithType: MethodBody.LocalSignatureMetadataToken\n  fullName: MethodBody.LocalSignatureMetadataToken\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a metadata token for the signature that describes the local variables for the method in metadata.\n  remarks: \"Use the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain information about the method's local variables.  \\n  \\n> [!NOTE]\\n>  Information about local variable signatures can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: public virtual int LocalSignatureMetadataToken { get; }\n    return:\n      type: System.Int32\n      description: An integer that represents the metadata token.\n  overload: System.Reflection.MethodBody.LocalSignatureMetadataToken*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBody.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBody.LocalVariables\n  commentId: P:System.Reflection.MethodBody.LocalVariables\n  id: LocalVariables\n  parent: System.Reflection.MethodBody\n  langs:\n  - csharp\n  name: LocalVariables\n  nameWithType: MethodBody.LocalVariables\n  fullName: MethodBody.LocalVariables\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the list of local variables declared in the method body.\n  remarks: You do not need the metadata token for the local variable signature provided by the <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A> property.\n  example:\n  - \"The following code example defines a test method named `MethodBodyExample` and displays its local variable information. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.LocalVariables%2A> property is used to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects.  \\n  \\n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \\n  \\n [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]\\n [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]\\n [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  \\n[!code-cpp[MethodBody#3](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#3)]\\n[!code-csharp[MethodBody#3](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#3)]\\n[!code-vb[MethodBody#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#3)]  \\n[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]\\n[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]\\n[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  \\n[!code-cpp[MethodBody#6](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#6)]\\n[!code-csharp[MethodBody#6](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#6)]\\n[!code-vb[MethodBody#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#6)]\"\n  syntax:\n    content: public virtual System.Collections.Generic.IList<System.Reflection.LocalVariableInfo> LocalVariables { get; }\n    return:\n      type: System.Collections.Generic.IList{System.Reflection.LocalVariableInfo}\n      description: An <xref href=\"System.Collections.Generic.IList`1\"></xref> of <xref href=\"System.Reflection.LocalVariableInfo\"></xref> objects that describe the local variables declared in the method body.\n  overload: System.Reflection.MethodBody.LocalVariables*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBody.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.MethodBody.MaxStackSize\n  commentId: P:System.Reflection.MethodBody.MaxStackSize\n  id: MaxStackSize\n  parent: System.Reflection.MethodBody\n  langs:\n  - csharp\n  name: MaxStackSize\n  nameWithType: MethodBody.MaxStackSize\n  fullName: MethodBody.MaxStackSize\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the maximum number of items on the operand stack when the method is executing.\n  remarks: 'For more information, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.'\n  example:\n  - \"The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.MaxStackSize%2A> and <xref:System.Reflection.MethodBody.InitLocals%2A> properties are displayed.  \\n  \\n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \\n  \\n [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]\\n [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]\\n [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  \\n[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]\\n[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]\\n[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]\"\n  syntax:\n    content: public virtual int MaxStackSize { get; }\n    return:\n      type: System.Int32\n      description: The maximum number of items on the operand stack when the method is executing.\n  overload: System.Reflection.MethodBody.MaxStackSize*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBody.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Reflection.MethodBody.#ctor\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: MethodBody()\n  nameWithType: MethodBody.MethodBody()\n  fullName: MethodBody.MethodBody()\n- uid: System.Reflection.MethodBody.ExceptionHandlingClauses\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: ExceptionHandlingClauses\n  nameWithType: MethodBody.ExceptionHandlingClauses\n  fullName: MethodBody.ExceptionHandlingClauses\n- uid: System.Collections.Generic.IList`1\n  name: IList<T>\n  nameWithType: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n- uid: System.Reflection.ExceptionHandlingClause\n  name: ExceptionHandlingClause\n  nameWithType: ExceptionHandlingClause\n  fullName: System.Reflection.ExceptionHandlingClause\n- uid: System.Collections.Generic.IList{System.Reflection.ExceptionHandlingClause}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<ExceptionHandlingClause>\n  nameWithType: IList<ExceptionHandlingClause>\n  fullName: System.Collections.Generic.IList<System.Reflection.ExceptionHandlingClause>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Reflection.ExceptionHandlingClause\n    name: ExceptionHandlingClause\n    nameWithType: ExceptionHandlingClause\n    fullName: System.Reflection.ExceptionHandlingClause\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Reflection.MethodBody.GetILAsByteArray\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: GetILAsByteArray()\n  nameWithType: MethodBody.GetILAsByteArray()\n  fullName: MethodBody.GetILAsByteArray()\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.MethodBody.InitLocals\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: InitLocals\n  nameWithType: MethodBody.InitLocals\n  fullName: MethodBody.InitLocals\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: LocalSignatureMetadataToken\n  nameWithType: MethodBody.LocalSignatureMetadataToken\n  fullName: MethodBody.LocalSignatureMetadataToken\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.MethodBody.LocalVariables\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: LocalVariables\n  nameWithType: MethodBody.LocalVariables\n  fullName: MethodBody.LocalVariables\n- uid: System.Reflection.LocalVariableInfo\n  name: LocalVariableInfo\n  nameWithType: LocalVariableInfo\n  fullName: System.Reflection.LocalVariableInfo\n- uid: System.Collections.Generic.IList{System.Reflection.LocalVariableInfo}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<LocalVariableInfo>\n  nameWithType: IList<LocalVariableInfo>\n  fullName: System.Collections.Generic.IList<System.Reflection.LocalVariableInfo>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Reflection.LocalVariableInfo\n    name: LocalVariableInfo\n    nameWithType: LocalVariableInfo\n    fullName: System.Reflection.LocalVariableInfo\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Reflection.MethodBody.MaxStackSize\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: MaxStackSize\n  nameWithType: MethodBody.MaxStackSize\n  fullName: MethodBody.MaxStackSize\n- uid: System.Reflection.MethodBody.#ctor*\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: MethodBody\n  nameWithType: MethodBody.MethodBody\n  fullName: MethodBody.MethodBody\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBody.xml\n- uid: System.Reflection.MethodBody.ExceptionHandlingClauses*\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: ExceptionHandlingClauses\n  nameWithType: MethodBody.ExceptionHandlingClauses\n  fullName: MethodBody.ExceptionHandlingClauses\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBody.xml\n- uid: System.Reflection.MethodBody.GetILAsByteArray*\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: GetILAsByteArray\n  nameWithType: MethodBody.GetILAsByteArray\n  fullName: MethodBody.GetILAsByteArray\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBody.xml\n- uid: System.Reflection.MethodBody.InitLocals*\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: InitLocals\n  nameWithType: MethodBody.InitLocals\n  fullName: MethodBody.InitLocals\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBody.xml\n- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken*\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: LocalSignatureMetadataToken\n  nameWithType: MethodBody.LocalSignatureMetadataToken\n  fullName: MethodBody.LocalSignatureMetadataToken\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBody.xml\n- uid: System.Reflection.MethodBody.LocalVariables*\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: LocalVariables\n  nameWithType: MethodBody.LocalVariables\n  fullName: MethodBody.LocalVariables\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBody.xml\n- uid: System.Reflection.MethodBody.MaxStackSize*\n  parent: System.Reflection.MethodBody\n  isExternal: false\n  name: MaxStackSize\n  nameWithType: MethodBody.MaxStackSize\n  fullName: MethodBody.MaxStackSize\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/MethodBody.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}