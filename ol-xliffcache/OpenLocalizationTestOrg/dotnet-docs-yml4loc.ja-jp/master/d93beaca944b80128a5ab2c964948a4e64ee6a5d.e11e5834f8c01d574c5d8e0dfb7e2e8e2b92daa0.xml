{"nodes":[{"content":"Provides access to custom attribute data for assemblies, modules, types, members and parameters that are loaded into the reflection-only context.","nodes":[{"pos":[0,145],"content":"Provides access to custom attribute data for assemblies, modules, types, members and parameters that are loaded into the reflection-only context.","nodes":[{"content":"Provides access to custom attribute data for assemblies, modules, types, members and parameters that are loaded into the reflection-only context.","pos":[0,145]}]}],"pos":[1258,1404],"yaml":true},{"content":"Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName>, <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName>, and so on. If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed.  \n  \n The <xref:System.Reflection.CustomAttributeData> class allows examination of custom attributes in the reflection-only context by providing an abstraction for attributes. The members of this class can be used to obtain the positional arguments and named arguments of the attribute. Use the <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A> property to get a list of <xref:System.Reflection.CustomAttributeTypedArgument> structures that represent the positional arguments, and use the <xref:System.Reflection.CustomAttributeData.NamedArguments%2A> property to get a list of <xref:System.Reflection.CustomAttributeNamedArgument> structures that represent the named arguments.  \n  \n> [!NOTE]\n>  The <xref:System.Reflection.CustomAttributeNamedArgument> structure only provides information about the attribute property used to get and set the argument value. To obtain the type and value of the argument, use the <xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A?displayProperty=fullName> property to obtain a <xref:System.Reflection.CustomAttributeTypedArgument> structure.  \n  \n When you have a <xref:System.Reflection.CustomAttributeTypedArgument> structure for an argument, whether named or positional, use the <xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A?displayProperty=fullName> property to get the type and the <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=fullName> property to get the value.  \n  \n> [!NOTE]\n>  For an array argument, the <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=fullName> property returns a generic <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Reflection.CustomAttributeTypedArgument> objects. Each <xref:System.Reflection.CustomAttributeTypedArgument> object in the collection represents the corresponding element of the array.  \n  \n <xref:System.Reflection.CustomAttributeData> can be used in the execution context as well as in the reflection-only context. For example, you might want to avoid loading the assembly that contains the code for a custom attribute. Using the <xref:System.Reflection.CustomAttributeData> class is different from using methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName>:  \n  \n-   The properties and methods of <xref:System.Reflection.CustomAttributeData> only provide you with the values that were specified for the attribute instance, not the semantics of the constructor. For example, a string argument of an attribute might be converted internally to some other representation, and returned in a canonical form; or a property might have side effects when the actual attribute code is executed.  \n  \n-   The properties and methods of <xref:System.Reflection.CustomAttributeData> do not allow you to retrieve the custom attributes inherited from base classes.  \n  \n To create instances of the <xref:System.Reflection.CustomAttributeData> class, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> factory methods.","nodes":[{"pos":[0,500],"content":"Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName>, <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName>, and so on. If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed.","nodes":[{"content":"Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName>, <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName>, and so on. If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed.","pos":[0,500],"nodes":[{"content":"Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <ph id=\"ph1\">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName&gt;</ph>, and so on.","pos":[0,391],"source":"Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName>, <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName>, and so on."},{"content":"If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed.","pos":[392,500]}]}]},{"pos":[507,1198],"content":"The <xref:System.Reflection.CustomAttributeData> class allows examination of custom attributes in the reflection-only context by providing an abstraction for attributes. The members of this class can be used to obtain the positional arguments and named arguments of the attribute. Use the <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A> property to get a list of <xref:System.Reflection.CustomAttributeTypedArgument> structures that represent the positional arguments, and use the <xref:System.Reflection.CustomAttributeData.NamedArguments%2A> property to get a list of <xref:System.Reflection.CustomAttributeNamedArgument> structures that represent the named arguments.","nodes":[{"content":"The <xref:System.Reflection.CustomAttributeData> class allows examination of custom attributes in the reflection-only context by providing an abstraction for attributes. The members of this class can be used to obtain the positional arguments and named arguments of the attribute. Use the <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A> property to get a list of <xref:System.Reflection.CustomAttributeTypedArgument> structures that represent the positional arguments, and use the <xref:System.Reflection.CustomAttributeData.NamedArguments%2A> property to get a list of <xref:System.Reflection.CustomAttributeNamedArgument> structures that represent the named arguments.","pos":[0,691],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class allows examination of custom attributes in the reflection-only context by providing an abstraction for attributes.","pos":[0,169],"source":"The <xref:System.Reflection.CustomAttributeData> class allows examination of custom attributes in the reflection-only context by providing an abstraction for attributes."},{"content":"The members of this class can be used to obtain the positional arguments and named arguments of the attribute.","pos":[170,280]},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A&gt;</ph> property to get a list of <ph id=\"ph2\">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> structures that represent the positional arguments, and use the <ph id=\"ph3\">&lt;xref:System.Reflection.CustomAttributeData.NamedArguments%2A&gt;</ph> property to get a list of <ph id=\"ph4\">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph> structures that represent the named arguments.","pos":[281,691],"source":" Use the <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A> property to get a list of <xref:System.Reflection.CustomAttributeTypedArgument> structures that represent the positional arguments, and use the <xref:System.Reflection.CustomAttributeData.NamedArguments%2A> property to get a list of <xref:System.Reflection.CustomAttributeNamedArgument> structures that represent the named arguments."}]}]},{"pos":[1206,1612],"content":"[!NOTE]\n The <xref:System.Reflection.CustomAttributeNamedArgument> structure only provides information about the attribute property used to get and set the argument value. To obtain the type and value of the argument, use the <xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A?displayProperty=fullName> property to obtain a <xref:System.Reflection.CustomAttributeTypedArgument> structure.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Reflection.CustomAttributeNamedArgument> structure only provides information about the attribute property used to get and set the argument value. To obtain the type and value of the argument, use the <xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A?displayProperty=fullName> property to obtain a <xref:System.Reflection.CustomAttributeTypedArgument> structure.","pos":[8,404],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.CustomAttributeNamedArgument&gt;</ph> structure only provides information about the attribute property used to get and set the argument value.","pos":[1,163],"source":" The <xref:System.Reflection.CustomAttributeNamedArgument> structure only provides information about the attribute property used to get and set the argument value."},{"content":"To obtain the type and value of the argument, use the <ph id=\"ph1\">&lt;xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A?displayProperty=fullName&gt;</ph> property to obtain a <ph id=\"ph2\">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> structure.","pos":[164,396],"source":" To obtain the type and value of the argument, use the <xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A?displayProperty=fullName> property to obtain a <xref:System.Reflection.CustomAttributeTypedArgument> structure."}]}]},{"pos":[1619,1995],"content":"When you have a <xref:System.Reflection.CustomAttributeTypedArgument> structure for an argument, whether named or positional, use the <xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A?displayProperty=fullName> property to get the type and the <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=fullName> property to get the value.","nodes":[{"content":"When you have a <ph id=\"ph1\">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> structure for an argument, whether named or positional, use the <ph id=\"ph2\">&lt;xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A?displayProperty=fullName&gt;</ph> property to get the type and the <ph id=\"ph3\">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=fullName&gt;</ph> property to get the value.","pos":[0,376],"source":"When you have a <xref:System.Reflection.CustomAttributeTypedArgument> structure for an argument, whether named or positional, use the <xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A?displayProperty=fullName> property to get the type and the <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=fullName> property to get the value."}]},{"pos":[2003,2417],"content":"[!NOTE]\n For an array argument, the <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=fullName> property returns a generic <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Reflection.CustomAttributeTypedArgument> objects. Each <xref:System.Reflection.CustomAttributeTypedArgument> object in the collection represents the corresponding element of the array.","leadings":["","> "],"nodes":[{"content":" For an array argument, the <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=fullName> property returns a generic <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Reflection.CustomAttributeTypedArgument> objects. Each <xref:System.Reflection.CustomAttributeTypedArgument> object in the collection represents the corresponding element of the array.","pos":[8,412],"nodes":[{"content":"For an array argument, the <ph id=\"ph1\">&lt;xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=fullName&gt;</ph> property returns a generic <ph id=\"ph2\">&lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;</ph> of <ph id=\"ph3\">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> objects.","pos":[1,269],"source":" For an array argument, the <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=fullName> property returns a generic <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Reflection.CustomAttributeTypedArgument> objects."},{"content":"Each <ph id=\"ph1\">&lt;xref:System.Reflection.CustomAttributeTypedArgument&gt;</ph> object in the collection represents the corresponding element of the array.","pos":[270,404],"source":" Each <xref:System.Reflection.CustomAttributeTypedArgument> object in the collection represents the corresponding element of the array."}]}]},{"pos":[2424,2824],"content":"<xref:System.Reflection.CustomAttributeData> can be used in the execution context as well as in the reflection-only context. For example, you might want to avoid loading the assembly that contains the code for a custom attribute. Using the <xref:System.Reflection.CustomAttributeData> class is different from using methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName>:","nodes":[{"content":"<xref:System.Reflection.CustomAttributeData> can be used in the execution context as well as in the reflection-only context. For example, you might want to avoid loading the assembly that contains the code for a custom attribute. Using the <xref:System.Reflection.CustomAttributeData> class is different from using methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName>:","pos":[0,400],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> can be used in the execution context as well as in the reflection-only context.","pos":[0,124],"source":"<xref:System.Reflection.CustomAttributeData> can be used in the execution context as well as in the reflection-only context."},{"content":"For example, you might want to avoid loading the assembly that contains the code for a custom attribute.","pos":[125,229]},{"content":"Using the <ph id=\"ph1\">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class is different from using methods like <ph id=\"ph2\">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName&gt;</ph>:","pos":[230,400],"source":" Using the <xref:System.Reflection.CustomAttributeData> class is different from using methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName>:"}]}]},{"pos":[2834,3250],"content":"The properties and methods of <xref:System.Reflection.CustomAttributeData> only provide you with the values that were specified for the attribute instance, not the semantics of the constructor. For example, a string argument of an attribute might be converted internally to some other representation, and returned in a canonical form; or a property might have side effects when the actual attribute code is executed.","nodes":[{"content":"The properties and methods of <xref:System.Reflection.CustomAttributeData> only provide you with the values that were specified for the attribute instance, not the semantics of the constructor. For example, a string argument of an attribute might be converted internally to some other representation, and returned in a canonical form; or a property might have side effects when the actual attribute code is executed.","pos":[0,416],"nodes":[{"content":"The properties and methods of <ph id=\"ph1\">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> only provide you with the values that were specified for the attribute instance, not the semantics of the constructor.","pos":[0,193],"source":"The properties and methods of <xref:System.Reflection.CustomAttributeData> only provide you with the values that were specified for the attribute instance, not the semantics of the constructor."},{"content":"For example, a string argument of an attribute might be converted internally to some other representation, and returned in a canonical form; or a property might have side effects when the actual attribute code is executed.","pos":[194,416]}]}]},{"pos":[3260,3414],"content":"The properties and methods of <xref:System.Reflection.CustomAttributeData> do not allow you to retrieve the custom attributes inherited from base classes.","nodes":[{"content":"The properties and methods of <ph id=\"ph1\">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> do not allow you to retrieve the custom attributes inherited from base classes.","pos":[0,154],"source":"The properties and methods of <xref:System.Reflection.CustomAttributeData> do not allow you to retrieve the custom attributes inherited from base classes."}]},{"pos":[3421,3628],"content":"To create instances of the <ph id=\"ph1\">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class, use the <ph id=\"ph2\">`static`</ph> (<ph id=\"ph3\">`Shared`</ph> in Visual Basic) <ph id=\"ph4\">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph> factory methods.","source":"To create instances of the <xref:System.Reflection.CustomAttributeData> class, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> factory methods."}],"pos":[1415,5064],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Reflection.CustomAttributeData\"></xref> class.","nodes":[{"pos":[0,99],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.CustomAttributeData\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Reflection.CustomAttributeData\"></xref> class."}],"pos":[8308,8408],"yaml":true},{"content":"This constructor is invoked by derived classes during the construction of <xref:System.Reflection.CustomAttributeData> objects.","nodes":[{"pos":[0,127],"content":"This constructor is invoked by derived classes during the construction of <xref:System.Reflection.CustomAttributeData> objects.","nodes":[{"content":"This constructor is invoked by derived classes during the construction of <ph id=\"ph1\">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> objects.","pos":[0,127],"source":"This constructor is invoked by derived classes during the construction of <xref:System.Reflection.CustomAttributeData> objects."}]}],"pos":[8419,8547],"yaml":true,"extradata":"MT"},{"content":"Gets the type of the attribute.","nodes":[{"pos":[0,31],"content":"Gets the type of the attribute.","nodes":[{"content":"Gets the type of the attribute.","pos":[0,31]}]}],"pos":[9906,9938],"yaml":true},{"content":"The type of the attribute.","nodes":[{"pos":[0,26],"content":"The type of the attribute.","nodes":[{"content":"The type of the attribute.","pos":[0,26]}]}],"pos":[10051,10078],"yaml":true},{"content":"Gets a <xref href=\"System.Reflection.ConstructorInfo\"></xref> object that represents the constructor that would have initialized the custom attribute.","nodes":[{"pos":[0,150],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ConstructorInfo\"&gt;&lt;/xref&gt;</ph> object that represents the constructor that would have initialized the custom attribute.","source":"Gets a <xref href=\"System.Reflection.ConstructorInfo\"></xref> object that represents the constructor that would have initialized the custom attribute."}],"pos":[11701,11852],"yaml":true},{"content":"If an attribute type has multiple constructors, this property returns only the particular constructor that would have initialized the attribute instance represented by the current <xref:System.Reflection.CustomAttributeData> object.","nodes":[{"pos":[0,232],"content":"If an attribute type has multiple constructors, this property returns only the particular constructor that would have initialized the attribute instance represented by the current <xref:System.Reflection.CustomAttributeData> object.","nodes":[{"content":"If an attribute type has multiple constructors, this property returns only the particular constructor that would have initialized the attribute instance represented by the current <ph id=\"ph1\">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> object.","pos":[0,232],"source":"If an attribute type has multiple constructors, this property returns only the particular constructor that would have initialized the attribute instance represented by the current <xref:System.Reflection.CustomAttributeData> object."}]}],"pos":[11863,12096],"yaml":true,"extradata":"MT"},{"content":"An object that represents the constructor that would have initialized the custom attribute represented by the current instance of the <xref href=\"System.Reflection.CustomAttributeData\"></xref> class.","nodes":[{"pos":[0,199],"content":"An object that represents the constructor that would have initialized the custom attribute represented by the current instance of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.CustomAttributeData\"&gt;&lt;/xref&gt;</ph> class.","source":"An object that represents the constructor that would have initialized the custom attribute represented by the current instance of the <xref href=\"System.Reflection.CustomAttributeData\"></xref> class."}],"pos":[13925,14125],"yaml":true},{"content":"Gets the list of positional arguments specified for the attribute instance represented by the <xref href=\"System.Reflection.CustomAttributeData\"></xref> object.","nodes":[{"pos":[0,160],"content":"Gets the list of positional arguments specified for the attribute instance represented by the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.CustomAttributeData\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the list of positional arguments specified for the attribute instance represented by the <xref href=\"System.Reflection.CustomAttributeData\"></xref> object."}],"pos":[15675,15836],"yaml":true},{"content":"This method gets the positional arguments that were specified for the custom attribute instance without executing any of the custom attribute code. Thus, it can be used in the reflection-only context.  \n  \n Use the <xref:System.Reflection.CustomAttributeData.NamedArguments%2A> method to get the named arguments specified for the attribute instance.","nodes":[{"pos":[0,200],"content":"This method gets the positional arguments that were specified for the custom attribute instance without executing any of the custom attribute code. Thus, it can be used in the reflection-only context.","nodes":[{"content":"This method gets the positional arguments that were specified for the custom attribute instance without executing any of the custom attribute code. Thus, it can be used in the reflection-only context.","pos":[0,200],"nodes":[{"content":"This method gets the positional arguments that were specified for the custom attribute instance without executing any of the custom attribute code.","pos":[0,147]},{"content":"Thus, it can be used in the reflection-only context.","pos":[148,200]}]}]},{"pos":[207,349],"content":"Use the <xref:System.Reflection.CustomAttributeData.NamedArguments%2A> method to get the named arguments specified for the attribute instance.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.CustomAttributeData.NamedArguments%2A&gt;</ph> method to get the named arguments specified for the attribute instance.","pos":[0,142],"source":"Use the <xref:System.Reflection.CustomAttributeData.NamedArguments%2A> method to get the named arguments specified for the attribute instance."}]}],"pos":[15847,16201],"yaml":true,"extradata":"MT"},{"content":"A collection of structures that represent the positional arguments specified for the custom attribute instance.","nodes":[{"pos":[0,111],"content":"A collection of structures that represent the positional arguments specified for the custom attribute instance.","nodes":[{"content":"A collection of structures that represent the positional arguments specified for the custom attribute instance.","pos":[0,111]}]}],"pos":[18026,18138],"yaml":true},{"content":"Returns a value that indicates whether this instance is equal to a specified object.","nodes":[{"pos":[0,84],"content":"Returns a value that indicates whether this instance is equal to a specified object.","nodes":[{"content":"Returns a value that indicates whether this instance is equal to a specified object.","pos":[0,84]}]}],"pos":[19858,19943],"yaml":true},{"content":"An object to compare with this instance, or `null`.","nodes":[{"pos":[0,51],"content":"An object to compare with this instance, or <ph id=\"ph1\">`null`</ph>.","source":"An object to compare with this instance, or `null`."}],"pos":[20083,20135],"yaml":true},{"content":"`true` if <code>obj</code> is equal to the current instance; otherwise, `false`.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to the current instance; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>obj</code> is equal to the current instance; otherwise, `false`."}],"pos":[20193,20276],"yaml":true},{"content":"Returns a list of <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects representing data about the attributes that have been applied to the target assembly.","nodes":[{"pos":[0,170],"content":"Returns a list of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.CustomAttributeData\"&gt;&lt;/xref&gt;</ph> objects representing data about the attributes that have been applied to the target assembly.","source":"Returns a list of <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects representing data about the attributes that have been applied to the target assembly."}],"pos":[21708,21879],"yaml":true},{"content":"This method provides an alternative to the <xref:System.Reflection.Assembly.GetCustomAttributes%2A> method that can always be used in the Reflection-only context.","nodes":[{"pos":[0,162],"content":"This method provides an alternative to the <xref:System.Reflection.Assembly.GetCustomAttributes%2A> method that can always be used in the Reflection-only context.","nodes":[{"content":"This method provides an alternative to the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetCustomAttributes%2A&gt;</ph> method that can always be used in the Reflection-only context.","pos":[0,162],"source":"This method provides an alternative to the <xref:System.Reflection.Assembly.GetCustomAttributes%2A> method that can always be used in the Reflection-only context."}]}],"pos":[21890,22053],"yaml":true,"extradata":"MT"},{"content":"The assembly whose custom attribute data is to be retrieved.","nodes":[{"pos":[0,60],"content":"The assembly whose custom attribute data is to be retrieved.","nodes":[{"content":"The assembly whose custom attribute data is to be retrieved.","pos":[0,60]}]}],"pos":[23729,23790],"yaml":true},{"content":"A list of objects that represent data about the attributes that have been applied to the target assembly.","nodes":[{"pos":[0,105],"content":"A list of objects that represent data about the attributes that have been applied to the target assembly.","nodes":[{"content":"A list of objects that represent data about the attributes that have been applied to the target assembly.","pos":[0,105]}]}],"pos":[23905,24011],"yaml":true},{"content":"<code>target</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>target</code> is `null`."}],"pos":[24198,24229],"yaml":true},{"content":"Returns a list of <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects representing data about the attributes that have been applied to the target member.","nodes":[{"pos":[0,168],"content":"Returns a list of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.CustomAttributeData\"&gt;&lt;/xref&gt;</ph> objects representing data about the attributes that have been applied to the target member.","source":"Returns a list of <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects representing data about the attributes that have been applied to the target member."}],"pos":[25742,25911],"yaml":true},{"content":"This method overload gets custom attribute data for types, nested types, and type members, because the <xref:System.Type> class and the classes in the <xref:System.Reflection> namespace that represent type members all derive from <xref:System.Reflection.MemberInfo>.","nodes":[{"pos":[0,266],"content":"This method overload gets custom attribute data for types, nested types, and type members, because the <xref:System.Type> class and the classes in the <xref:System.Reflection> namespace that represent type members all derive from <xref:System.Reflection.MemberInfo>.","nodes":[{"content":"This method overload gets custom attribute data for types, nested types, and type members, because the <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> class and the classes in the <ph id=\"ph2\">&lt;xref:System.Reflection&gt;</ph> namespace that represent type members all derive from <ph id=\"ph3\">&lt;xref:System.Reflection.MemberInfo&gt;</ph>.","pos":[0,266],"source":"This method overload gets custom attribute data for types, nested types, and type members, because the <xref:System.Type> class and the classes in the <xref:System.Reflection> namespace that represent type members all derive from <xref:System.Reflection.MemberInfo>."}]}],"pos":[25922,26189],"yaml":true,"extradata":"MT"},{"content":"The member whose attribute data is to be retrieved.","nodes":[{"pos":[0,51],"content":"The member whose attribute data is to be retrieved.","nodes":[{"content":"The member whose attribute data is to be retrieved.","pos":[0,51]}]}],"pos":[28021,28073],"yaml":true},{"content":"A list of objects that represent data about the attributes that have been applied to the target member.","nodes":[{"pos":[0,103],"content":"A list of objects that represent data about the attributes that have been applied to the target member.","nodes":[{"content":"A list of objects that represent data about the attributes that have been applied to the target member.","pos":[0,103]}]}],"pos":[28188,28292],"yaml":true},{"content":"<code>target</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>target</code> is `null`."}],"pos":[28479,28510],"yaml":true},{"content":"Returns a list of <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects representing data about the attributes that have been applied to the target module.","nodes":[{"pos":[0,168],"content":"Returns a list of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.CustomAttributeData\"&gt;&lt;/xref&gt;</ph> objects representing data about the attributes that have been applied to the target module.","source":"Returns a list of <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects representing data about the attributes that have been applied to the target module."}],"pos":[30064,30233],"yaml":true},{"content":"The module whose custom attribute data is to be retrieved.","nodes":[{"pos":[0,58],"content":"The module whose custom attribute data is to be retrieved.","nodes":[{"content":"The module whose custom attribute data is to be retrieved.","pos":[0,58]}]}],"pos":[30486,30545],"yaml":true},{"content":"A list of objects that represent data about the attributes that have been applied to the target module.","nodes":[{"pos":[0,103],"content":"A list of objects that represent data about the attributes that have been applied to the target module.","nodes":[{"content":"A list of objects that represent data about the attributes that have been applied to the target module.","pos":[0,103]}]}],"pos":[30660,30764],"yaml":true},{"content":"<code>target</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>target</code> is `null`."}],"pos":[30951,30982],"yaml":true},{"content":"Returns a list of <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects representing data about the attributes that have been applied to the target parameter.","nodes":[{"pos":[0,171],"content":"Returns a list of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.CustomAttributeData\"&gt;&lt;/xref&gt;</ph> objects representing data about the attributes that have been applied to the target parameter.","source":"Returns a list of <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects representing data about the attributes that have been applied to the target parameter."}],"pos":[32513,32685],"yaml":true},{"content":"This method provides an alternative to the <xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A> method that can always be used in the Reflection-only context.","nodes":[{"pos":[0,167],"content":"This method provides an alternative to the <xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A> method that can always be used in the Reflection-only context.","nodes":[{"content":"This method provides an alternative to the <ph id=\"ph1\">&lt;xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A&gt;</ph> method that can always be used in the Reflection-only context.","pos":[0,167],"source":"This method provides an alternative to the <xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A> method that can always be used in the Reflection-only context."}]}],"pos":[32696,32864],"yaml":true,"extradata":"MT"},{"content":"The parameter whose attribute data is to be retrieved.","nodes":[{"pos":[0,54],"content":"The parameter whose attribute data is to be retrieved.","nodes":[{"content":"The parameter whose attribute data is to be retrieved.","pos":[0,54]}]}],"pos":[34628,34683],"yaml":true},{"content":"A list of objects that represent data about the attributes that have been applied to the target parameter.","nodes":[{"pos":[0,106],"content":"A list of objects that represent data about the attributes that have been applied to the target parameter.","nodes":[{"content":"A list of objects that represent data about the attributes that have been applied to the target parameter.","pos":[0,106]}]}],"pos":[34798,34905],"yaml":true},{"content":"<code>target</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>target</code> is `null`."}],"pos":[35092,35123],"yaml":true},{"content":"Serves as a hash function for a particular type.","nodes":[{"pos":[0,48],"content":"Serves as a hash function for a particular type.","nodes":[{"content":"Serves as a hash function for a particular type.","pos":[0,48]}]}],"pos":[36446,36495],"yaml":true},{"content":"A hash code for the current <xref href=\"System.Object\"></xref>.","nodes":[{"pos":[0,63],"content":"A hash code for the current <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph>.","source":"A hash code for the current <xref href=\"System.Object\"></xref>."}],"pos":[36629,36693],"yaml":true},{"content":"Gets the list of named arguments specified for the attribute instance represented by the <xref href=\"System.Reflection.CustomAttributeData\"></xref> object.","nodes":[{"pos":[0,155],"content":"Gets the list of named arguments specified for the attribute instance represented by the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.CustomAttributeData\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the list of named arguments specified for the attribute instance represented by the <xref href=\"System.Reflection.CustomAttributeData\"></xref> object."}],"pos":[37988,38144],"yaml":true},{"content":"This method gets the named arguments that were specified for the custom attribute instance without executing any of the custom attribute code. Thus, it can be used in the Reflection-only context.  \n  \n The list that is returned contains only the named arguments that were specified for the attribute instance.  \n  \n Use the <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A> method to get the positional arguments that were specified for the attribute instance.","nodes":[{"pos":[0,195],"content":"This method gets the named arguments that were specified for the custom attribute instance without executing any of the custom attribute code. Thus, it can be used in the Reflection-only context.","nodes":[{"content":"This method gets the named arguments that were specified for the custom attribute instance without executing any of the custom attribute code. Thus, it can be used in the Reflection-only context.","pos":[0,195],"nodes":[{"content":"This method gets the named arguments that were specified for the custom attribute instance without executing any of the custom attribute code.","pos":[0,142]},{"content":"Thus, it can be used in the Reflection-only context.","pos":[143,195]}]}]},{"pos":[202,309],"content":"The list that is returned contains only the named arguments that were specified for the attribute instance.","nodes":[{"content":"The list that is returned contains only the named arguments that were specified for the attribute instance.","pos":[0,107]}]},{"pos":[316,479],"content":"Use the <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A> method to get the positional arguments that were specified for the attribute instance.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A&gt;</ph> method to get the positional arguments that were specified for the attribute instance.","pos":[0,163],"source":"Use the <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A> method to get the positional arguments that were specified for the attribute instance."}]}],"pos":[38155,38641],"yaml":true,"extradata":"MT"},{"content":"A collection of structures that represent the named arguments specified for the custom attribute instance.","nodes":[{"pos":[0,106],"content":"A collection of structures that represent the named arguments specified for the custom attribute instance.","nodes":[{"content":"A collection of structures that represent the named arguments specified for the custom attribute instance.","pos":[0,106]}]}],"pos":[40365,40472],"yaml":true},{"content":"Returns a string representation of the custom attribute.","nodes":[{"pos":[0,56],"content":"Returns a string representation of the custom attribute.","nodes":[{"content":"Returns a string representation of the custom attribute.","pos":[0,56]}]}],"pos":[42060,42117],"yaml":true},{"content":"The string value includes the attribute type, the attribute parameters, and the named parameters.","nodes":[{"pos":[0,97],"content":"The string value includes the attribute type, the attribute parameters, and the named parameters.","nodes":[{"content":"The string value includes the attribute type, the attribute parameters, and the named parameters.","pos":[0,97]}]}],"pos":[42128,42226],"yaml":true,"extradata":"MT"},{"content":"A string value that represents the custom attribute.","nodes":[{"pos":[0,52],"content":"A string value that represents the custom attribute.","nodes":[{"content":"A string value that represents the custom attribute.","pos":[0,52]}]}],"pos":[43736,43789],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.CustomAttributeData\n  commentId: T:System.Reflection.CustomAttributeData\n  id: CustomAttributeData\n  children:\n  - System.Reflection.CustomAttributeData.#ctor\n  - System.Reflection.CustomAttributeData.AttributeType\n  - System.Reflection.CustomAttributeData.Constructor\n  - System.Reflection.CustomAttributeData.ConstructorArguments\n  - System.Reflection.CustomAttributeData.Equals(System.Object)\n  - System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)\n  - System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)\n  - System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)\n  - System.Reflection.CustomAttributeData.GetHashCode\n  - System.Reflection.CustomAttributeData.NamedArguments\n  - System.Reflection.CustomAttributeData.ToString\n  langs:\n  - csharp\n  name: CustomAttributeData\n  nameWithType: CustomAttributeData\n  fullName: System.Reflection.CustomAttributeData\n  type: Class\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Provides access to custom attribute data for assemblies, modules, types, members and parameters that are loaded into the reflection-only context.\n  remarks: \"Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName>, <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName>, and so on. If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed.  \\n  \\n The <xref:System.Reflection.CustomAttributeData> class allows examination of custom attributes in the reflection-only context by providing an abstraction for attributes. The members of this class can be used to obtain the positional arguments and named arguments of the attribute. Use the <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A> property to get a list of <xref:System.Reflection.CustomAttributeTypedArgument> structures that represent the positional arguments, and use the <xref:System.Reflection.CustomAttributeData.NamedArguments%2A> property to get a list of <xref:System.Reflection.CustomAttributeNamedArgument> structures that represent the named arguments.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Reflection.CustomAttributeNamedArgument> structure only provides information about the attribute property used to get and set the argument value. To obtain the type and value of the argument, use the <xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A?displayProperty=fullName> property to obtain a <xref:System.Reflection.CustomAttributeTypedArgument> structure.  \\n  \\n When you have a <xref:System.Reflection.CustomAttributeTypedArgument> structure for an argument, whether named or positional, use the <xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A?displayProperty=fullName> property to get the type and the <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=fullName> property to get the value.  \\n  \\n> [!NOTE]\\n>  For an array argument, the <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=fullName> property returns a generic <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Reflection.CustomAttributeTypedArgument> objects. Each <xref:System.Reflection.CustomAttributeTypedArgument> object in the collection represents the corresponding element of the array.  \\n  \\n <xref:System.Reflection.CustomAttributeData> can be used in the execution context as well as in the reflection-only context. For example, you might want to avoid loading the assembly that contains the code for a custom attribute. Using the <xref:System.Reflection.CustomAttributeData> class is different from using methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName>:  \\n  \\n-   The properties and methods of <xref:System.Reflection.CustomAttributeData> only provide you with the values that were specified for the attribute instance, not the semantics of the constructor. For example, a string argument of an attribute might be converted internally to some other representation, and returned in a canonical form; or a property might have side effects when the actual attribute code is executed.  \\n  \\n-   The properties and methods of <xref:System.Reflection.CustomAttributeData> do not allow you to retrieve the custom attributes inherited from base classes.  \\n  \\n To create instances of the <xref:System.Reflection.CustomAttributeData> class, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> factory methods.\"\n  example:\n  - \"The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  \\n  \\n The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays information about the custom attributes that were applied to it and to the type and members it contains.  \\n  \\n The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  \\n  \\n [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]\\n [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]\\n [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class CustomAttributeData\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CustomAttributeData.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.CustomAttributeData.#ctor\n  commentId: M:System.Reflection.CustomAttributeData.#ctor\n  id: '#ctor'\n  parent: System.Reflection.CustomAttributeData\n  langs:\n  - csharp\n  name: CustomAttributeData()\n  nameWithType: CustomAttributeData.CustomAttributeData()\n  fullName: CustomAttributeData.CustomAttributeData()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Initializes a new instance of the <xref href=\"System.Reflection.CustomAttributeData\"></xref> class.\n  remarks: This constructor is invoked by derived classes during the construction of <xref:System.Reflection.CustomAttributeData> objects.\n  syntax:\n    content: protected CustomAttributeData ();\n    parameters: []\n  overload: System.Reflection.CustomAttributeData.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CustomAttributeData.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.CustomAttributeData.AttributeType\n  commentId: P:System.Reflection.CustomAttributeData.AttributeType\n  id: AttributeType\n  parent: System.Reflection.CustomAttributeData\n  langs:\n  - csharp\n  name: AttributeType\n  nameWithType: CustomAttributeData.AttributeType\n  fullName: CustomAttributeData.AttributeType\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the type of the attribute.\n  syntax:\n    content: public Type AttributeType { get; }\n    return:\n      type: System.Type\n      description: The type of the attribute.\n  overload: System.Reflection.CustomAttributeData.AttributeType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CustomAttributeData.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.CustomAttributeData.Constructor\n  commentId: P:System.Reflection.CustomAttributeData.Constructor\n  id: Constructor\n  parent: System.Reflection.CustomAttributeData\n  langs:\n  - csharp\n  name: Constructor\n  nameWithType: CustomAttributeData.Constructor\n  fullName: CustomAttributeData.Constructor\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a <xref href=\"System.Reflection.ConstructorInfo\"></xref> object that represents the constructor that would have initialized the custom attribute.\n  remarks: If an attribute type has multiple constructors, this property returns only the particular constructor that would have initialized the attribute instance represented by the current <xref:System.Reflection.CustomAttributeData> object.\n  example:\n  - \"The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  \\n  \\n The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  \\n  \\n The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  \\n  \\n The <xref:System.Reflection.CustomAttributeData.Constructor%2A> property is used in the `ShowAttributeData` method that displays custom attribute data. In this code example, the <xref:System.Reflection.ConstructorInfo> returned by this property is used to display a text string that describes the constructor, demonstrating that the property returns the constructor that would initialize the attribute.  \\n  \\n [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]\\n [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]\\n [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public virtual System.Reflection.ConstructorInfo Constructor { get; }\n    return:\n      type: System.Reflection.ConstructorInfo\n      description: An object that represents the constructor that would have initialized the custom attribute represented by the current instance of the <xref href=\"System.Reflection.CustomAttributeData\"></xref> class.\n  overload: System.Reflection.CustomAttributeData.Constructor*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CustomAttributeData.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.CustomAttributeData.ConstructorArguments\n  commentId: P:System.Reflection.CustomAttributeData.ConstructorArguments\n  id: ConstructorArguments\n  parent: System.Reflection.CustomAttributeData\n  langs:\n  - csharp\n  name: ConstructorArguments\n  nameWithType: CustomAttributeData.ConstructorArguments\n  fullName: CustomAttributeData.ConstructorArguments\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the list of positional arguments specified for the attribute instance represented by the <xref href=\"System.Reflection.CustomAttributeData\"></xref> object.\n  remarks: \"This method gets the positional arguments that were specified for the custom attribute instance without executing any of the custom attribute code. Thus, it can be used in the reflection-only context.  \\n  \\n Use the <xref:System.Reflection.CustomAttributeData.NamedArguments%2A> method to get the named arguments specified for the attribute instance.\"\n  example:\n  - \"The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  \\n  \\n The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  \\n  \\n The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  \\n  \\n The <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A> property is used in the `ShowAttributeData` method that displays custom attribute data. In this code example, this property is used to display the list of arguments passed to the constructor that initialized the attribute.  \\n  \\n [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]\\n [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]\\n [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public virtual System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument> ConstructorArguments { get; }\n    return:\n      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeTypedArgument}\n      description: A collection of structures that represent the positional arguments specified for the custom attribute instance.\n  overload: System.Reflection.CustomAttributeData.ConstructorArguments*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CustomAttributeData.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.CustomAttributeData.Equals(System.Object)\n  commentId: M:System.Reflection.CustomAttributeData.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.CustomAttributeData\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: CustomAttributeData.Equals(Object)\n  fullName: CustomAttributeData.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a value that indicates whether this instance is equal to a specified object.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: An object to compare with this instance, or `null`.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>obj</code> is equal to the current instance; otherwise, `false`.'\n  overload: System.Reflection.CustomAttributeData.Equals*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CustomAttributeData.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)\n  commentId: M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)\n  id: GetCustomAttributes(System.Reflection.Assembly)\n  parent: System.Reflection.CustomAttributeData\n  langs:\n  - csharp\n  name: GetCustomAttributes(Assembly)\n  nameWithType: CustomAttributeData.GetCustomAttributes(Assembly)\n  fullName: CustomAttributeData.GetCustomAttributes(Assembly)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a list of <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects representing data about the attributes that have been applied to the target assembly.\n  remarks: This method provides an alternative to the <xref:System.Reflection.Assembly.GetCustomAttributes%2A> method that can always be used in the Reflection-only context.\n  example:\n  - \"The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  \\n  \\n The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  \\n  \\n The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  \\n  \\n The <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> method is used in `Main()` to get the custom attributes applied to the assembly. The return value of the method is passed to the `ShowAttributeData` method.  \\n  \\n [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]\\n [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]\\n [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]\"\n  syntax:\n    content: public static System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes (System.Reflection.Assembly target);\n    parameters:\n    - id: target\n      type: System.Reflection.Assembly\n      description: The assembly whose custom attribute data is to be retrieved.\n    return:\n      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}\n      description: A list of objects that represent data about the attributes that have been applied to the target assembly.\n  overload: System.Reflection.CustomAttributeData.GetCustomAttributes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>target</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CustomAttributeData.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)\n  commentId: M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)\n  id: GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeData\n  langs:\n  - csharp\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: CustomAttributeData.GetCustomAttributes(MemberInfo)\n  fullName: CustomAttributeData.GetCustomAttributes(MemberInfo)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a list of <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects representing data about the attributes that have been applied to the target member.\n  remarks: This method overload gets custom attribute data for types, nested types, and type members, because the <xref:System.Type> class and the classes in the <xref:System.Reflection> namespace that represent type members all derive from <xref:System.Reflection.MemberInfo>.\n  example:\n  - \"The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  \\n  \\n The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  \\n  \\n The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  \\n  \\n The <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> method is used in `Main()` to get the custom attributes that were applied to a type and to a test method (<xref:System.Type> derives from <xref:System.Reflection.MemberInfo>). The return value of <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> is passed to the `ShowAttributeData` method.  \\n  \\n [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]\\n [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]\\n [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]\"\n  syntax:\n    content: public static System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes (System.Reflection.MemberInfo target);\n    parameters:\n    - id: target\n      type: System.Reflection.MemberInfo\n      description: The member whose attribute data is to be retrieved.\n    return:\n      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}\n      description: A list of objects that represent data about the attributes that have been applied to the target member.\n  overload: System.Reflection.CustomAttributeData.GetCustomAttributes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>target</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  altCompliant: System.Reflection.MemberInfo.GetCustomAttributes\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CustomAttributeData.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)\n  commentId: M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)\n  id: GetCustomAttributes(System.Reflection.Module)\n  parent: System.Reflection.CustomAttributeData\n  langs:\n  - csharp\n  name: GetCustomAttributes(Module)\n  nameWithType: CustomAttributeData.GetCustomAttributes(Module)\n  fullName: CustomAttributeData.GetCustomAttributes(Module)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a list of <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects representing data about the attributes that have been applied to the target module.\n  syntax:\n    content: public static System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes (System.Reflection.Module target);\n    parameters:\n    - id: target\n      type: System.Reflection.Module\n      description: The module whose custom attribute data is to be retrieved.\n    return:\n      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}\n      description: A list of objects that represent data about the attributes that have been applied to the target module.\n  overload: System.Reflection.CustomAttributeData.GetCustomAttributes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>target</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CustomAttributeData.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)\n  commentId: M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)\n  id: GetCustomAttributes(System.Reflection.ParameterInfo)\n  parent: System.Reflection.CustomAttributeData\n  langs:\n  - csharp\n  name: GetCustomAttributes(ParameterInfo)\n  nameWithType: CustomAttributeData.GetCustomAttributes(ParameterInfo)\n  fullName: CustomAttributeData.GetCustomAttributes(ParameterInfo)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a list of <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects representing data about the attributes that have been applied to the target parameter.\n  remarks: This method provides an alternative to the <xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A> method that can always be used in the Reflection-only context.\n  example:\n  - \"The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  \\n  \\n The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  \\n  \\n The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  \\n  \\n The <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> method is used in `Main()` to retrieve the custom attributes applied to a parameter of a test method. The return value of <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> is passed to the `ShowAttributeData` method.  \\n  \\n [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]\\n [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]\\n [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]\"\n  syntax:\n    content: public static System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes (System.Reflection.ParameterInfo target);\n    parameters:\n    - id: target\n      type: System.Reflection.ParameterInfo\n      description: The parameter whose attribute data is to be retrieved.\n    return:\n      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}\n      description: A list of objects that represent data about the attributes that have been applied to the target parameter.\n  overload: System.Reflection.CustomAttributeData.GetCustomAttributes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>target</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CustomAttributeData.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.CustomAttributeData.GetHashCode\n  commentId: M:System.Reflection.CustomAttributeData.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.CustomAttributeData\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: CustomAttributeData.GetHashCode()\n  fullName: CustomAttributeData.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Serves as a hash function for a particular type.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the current <xref href=\"System.Object\"></xref>.\n  overload: System.Reflection.CustomAttributeData.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CustomAttributeData.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.CustomAttributeData.NamedArguments\n  commentId: P:System.Reflection.CustomAttributeData.NamedArguments\n  id: NamedArguments\n  parent: System.Reflection.CustomAttributeData\n  langs:\n  - csharp\n  name: NamedArguments\n  nameWithType: CustomAttributeData.NamedArguments\n  fullName: CustomAttributeData.NamedArguments\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the list of named arguments specified for the attribute instance represented by the <xref href=\"System.Reflection.CustomAttributeData\"></xref> object.\n  remarks: \"This method gets the named arguments that were specified for the custom attribute instance without executing any of the custom attribute code. Thus, it can be used in the Reflection-only context.  \\n  \\n The list that is returned contains only the named arguments that were specified for the attribute instance.  \\n  \\n Use the <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A> method to get the positional arguments that were specified for the attribute instance.\"\n  example:\n  - \"The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  \\n  \\n The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  \\n  \\n The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  \\n  \\n The <xref:System.Reflection.CustomAttributeData.NamedArguments%2A> property is used in the `ShowAttributeData` method that displays custom attribute data. In this code example, this property is used to display the list of named arguments specified for the attribute.  \\n  \\n [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]\\n [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]\\n [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument> NamedArguments { get; }\n    return:\n      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeNamedArgument}\n      description: A collection of structures that represent the named arguments specified for the custom attribute instance.\n  overload: System.Reflection.CustomAttributeData.NamedArguments*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CustomAttributeData.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.CustomAttributeData.ToString\n  commentId: M:System.Reflection.CustomAttributeData.ToString\n  id: ToString\n  parent: System.Reflection.CustomAttributeData\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: CustomAttributeData.ToString()\n  fullName: CustomAttributeData.ToString()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a string representation of the custom attribute.\n  remarks: The string value includes the attribute type, the attribute parameters, and the named parameters.\n  example:\n  - \"The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  \\n  \\n The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  \\n  \\n The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  \\n  \\n In this example, the <xref:System.Reflection.CustomAttributeData.ToString%2A> method is used in the `ShowAttributeData` method, to identify the attribute whose data is being displayed.  \\n  \\n [!code-cpp[CustomAttributeData#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]\\n [!code-csharp[CustomAttributeData#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]\\n [!code-vb[CustomAttributeData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string value that represents the custom attribute.\n  overload: System.Reflection.CustomAttributeData.ToString*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CustomAttributeData.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Reflection.CustomAttributeData.#ctor\n  parent: System.Reflection.CustomAttributeData\n  isExternal: false\n  name: CustomAttributeData()\n  nameWithType: CustomAttributeData.CustomAttributeData()\n  fullName: CustomAttributeData.CustomAttributeData()\n- uid: System.Reflection.CustomAttributeData.AttributeType\n  parent: System.Reflection.CustomAttributeData\n  isExternal: false\n  name: AttributeType\n  nameWithType: CustomAttributeData.AttributeType\n  fullName: CustomAttributeData.AttributeType\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Reflection.CustomAttributeData.Constructor\n  parent: System.Reflection.CustomAttributeData\n  isExternal: false\n  name: Constructor\n  nameWithType: CustomAttributeData.Constructor\n  fullName: CustomAttributeData.Constructor\n- uid: System.Reflection.ConstructorInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ConstructorInfo\n  nameWithType: ConstructorInfo\n  fullName: System.Reflection.ConstructorInfo\n- uid: System.Reflection.CustomAttributeData.ConstructorArguments\n  parent: System.Reflection.CustomAttributeData\n  isExternal: false\n  name: ConstructorArguments\n  nameWithType: CustomAttributeData.ConstructorArguments\n  fullName: CustomAttributeData.ConstructorArguments\n- uid: System.Collections.Generic.IList`1\n  name: IList<T>\n  nameWithType: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n- uid: System.Reflection.CustomAttributeTypedArgument\n  name: CustomAttributeTypedArgument\n  nameWithType: CustomAttributeTypedArgument\n  fullName: System.Reflection.CustomAttributeTypedArgument\n- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeTypedArgument}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<CustomAttributeTypedArgument>\n  nameWithType: IList<CustomAttributeTypedArgument>\n  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Reflection.CustomAttributeTypedArgument\n    name: CustomAttributeTypedArgument\n    nameWithType: CustomAttributeTypedArgument\n    fullName: System.Reflection.CustomAttributeTypedArgument\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Reflection.CustomAttributeData.Equals(System.Object)\n  parent: System.Reflection.CustomAttributeData\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: CustomAttributeData.Equals(Object)\n  fullName: CustomAttributeData.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)\n  parent: System.Reflection.CustomAttributeData\n  isExternal: false\n  name: GetCustomAttributes(Assembly)\n  nameWithType: CustomAttributeData.GetCustomAttributes(Assembly)\n  fullName: CustomAttributeData.GetCustomAttributes(Assembly)\n- uid: System.Reflection.CustomAttributeData\n  name: CustomAttributeData\n  nameWithType: CustomAttributeData\n  fullName: System.Reflection.CustomAttributeData\n- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<CustomAttributeData>\n  nameWithType: IList<CustomAttributeData>\n  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeData>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Reflection.CustomAttributeData\n    name: CustomAttributeData\n    nameWithType: CustomAttributeData\n    fullName: System.Reflection.CustomAttributeData\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Reflection.Assembly\n  parent: System.Reflection\n  isExternal: false\n  name: Assembly\n  nameWithType: Assembly\n  fullName: System.Reflection.Assembly\n- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeData\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: CustomAttributeData.GetCustomAttributes(MemberInfo)\n  fullName: CustomAttributeData.GetCustomAttributes(MemberInfo)\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo\n- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)\n  parent: System.Reflection.CustomAttributeData\n  isExternal: false\n  name: GetCustomAttributes(Module)\n  nameWithType: CustomAttributeData.GetCustomAttributes(Module)\n  fullName: CustomAttributeData.GetCustomAttributes(Module)\n- uid: System.Reflection.Module\n  parent: System.Reflection\n  isExternal: false\n  name: Module\n  nameWithType: Module\n  fullName: System.Reflection.Module\n- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)\n  parent: System.Reflection.CustomAttributeData\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo)\n  nameWithType: CustomAttributeData.GetCustomAttributes(ParameterInfo)\n  fullName: CustomAttributeData.GetCustomAttributes(ParameterInfo)\n- uid: System.Reflection.ParameterInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ParameterInfo\n  nameWithType: ParameterInfo\n  fullName: System.Reflection.ParameterInfo\n- uid: System.Reflection.CustomAttributeData.GetHashCode\n  parent: System.Reflection.CustomAttributeData\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: CustomAttributeData.GetHashCode()\n  fullName: CustomAttributeData.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.CustomAttributeData.NamedArguments\n  parent: System.Reflection.CustomAttributeData\n  isExternal: false\n  name: NamedArguments\n  nameWithType: CustomAttributeData.NamedArguments\n  fullName: CustomAttributeData.NamedArguments\n- uid: System.Reflection.CustomAttributeNamedArgument\n  name: CustomAttributeNamedArgument\n  nameWithType: CustomAttributeNamedArgument\n  fullName: System.Reflection.CustomAttributeNamedArgument\n- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeNamedArgument}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<CustomAttributeNamedArgument>\n  nameWithType: IList<CustomAttributeNamedArgument>\n  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Reflection.CustomAttributeNamedArgument\n    name: CustomAttributeNamedArgument\n    nameWithType: CustomAttributeNamedArgument\n    fullName: System.Reflection.CustomAttributeNamedArgument\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Reflection.CustomAttributeData.ToString\n  parent: System.Reflection.CustomAttributeData\n  isExternal: false\n  name: ToString()\n  nameWithType: CustomAttributeData.ToString()\n  fullName: CustomAttributeData.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Reflection.CustomAttributeData.#ctor*\n  parent: System.Reflection.CustomAttributeData\n  isExternal: false\n  name: CustomAttributeData\n  nameWithType: CustomAttributeData.CustomAttributeData\n  fullName: CustomAttributeData.CustomAttributeData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CustomAttributeData.xml\n- uid: System.Reflection.CustomAttributeData.AttributeType*\n  parent: System.Reflection.CustomAttributeData\n  isExternal: false\n  name: AttributeType\n  nameWithType: CustomAttributeData.AttributeType\n  fullName: CustomAttributeData.AttributeType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CustomAttributeData.xml\n- uid: System.Reflection.CustomAttributeData.Constructor*\n  parent: System.Reflection.CustomAttributeData\n  isExternal: false\n  name: Constructor\n  nameWithType: CustomAttributeData.Constructor\n  fullName: CustomAttributeData.Constructor\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CustomAttributeData.xml\n- uid: System.Reflection.CustomAttributeData.ConstructorArguments*\n  parent: System.Reflection.CustomAttributeData\n  isExternal: false\n  name: ConstructorArguments\n  nameWithType: CustomAttributeData.ConstructorArguments\n  fullName: CustomAttributeData.ConstructorArguments\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CustomAttributeData.xml\n- uid: System.Reflection.CustomAttributeData.Equals*\n  parent: System.Reflection.CustomAttributeData\n  isExternal: false\n  name: Equals\n  nameWithType: CustomAttributeData.Equals\n  fullName: CustomAttributeData.Equals\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CustomAttributeData.xml\n- uid: System.Reflection.CustomAttributeData.GetCustomAttributes*\n  parent: System.Reflection.CustomAttributeData\n  isExternal: false\n  name: GetCustomAttributes\n  nameWithType: CustomAttributeData.GetCustomAttributes\n  fullName: CustomAttributeData.GetCustomAttributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CustomAttributeData.xml\n- uid: System.Reflection.CustomAttributeData.GetHashCode*\n  parent: System.Reflection.CustomAttributeData\n  isExternal: false\n  name: GetHashCode\n  nameWithType: CustomAttributeData.GetHashCode\n  fullName: CustomAttributeData.GetHashCode\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CustomAttributeData.xml\n- uid: System.Reflection.CustomAttributeData.NamedArguments*\n  parent: System.Reflection.CustomAttributeData\n  isExternal: false\n  name: NamedArguments\n  nameWithType: CustomAttributeData.NamedArguments\n  fullName: CustomAttributeData.NamedArguments\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CustomAttributeData.xml\n- uid: System.Reflection.CustomAttributeData.ToString*\n  parent: System.Reflection.CustomAttributeData\n  isExternal: false\n  name: ToString\n  nameWithType: CustomAttributeData.ToString\n  fullName: CustomAttributeData.ToString\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CustomAttributeData.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n"}