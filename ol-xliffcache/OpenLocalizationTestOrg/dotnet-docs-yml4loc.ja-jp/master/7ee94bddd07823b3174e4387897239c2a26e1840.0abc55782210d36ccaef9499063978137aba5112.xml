{"nodes":[{"content":"Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.","nodes":[{"pos":[0,115],"content":"Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.","nodes":[{"content":"Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.","pos":[0,115]}]}],"pos":[1166,1282],"yaml":true},{"content":"You can apply this attribute to methods.  \n  \n The <xref:System.Runtime.InteropServices.DllImportAttribute> attribute provides the information needed to call a function exported from an unmanaged DLL. As a minimum requirement, you must supply the name of the DLL containing the entry point.  \n  \n You apply this attribute directly to C# and C++ method definitions; however, the Visual Basic compiler emits this attribute when you use the `Declare` statement. For complex method definitions that include <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>, <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>, <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>, <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>, <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>, or <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields, you apply this attribute directly to Visual Basic method definitions.  \n  \n **Note** JScript does not support this attribute. You can use C# or Visual Basic wrapper classes to access unmanaged API methods from JScript programs.  \n  \n For additional information about using the platform invoke service to access functions in unmanaged DLLs, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).  \n  \n> [!NOTE]\n>  The <xref:System.Runtime.InteropServices.DllImportAttribute> does not support marshaling of generic types.","nodes":[{"pos":[0,40],"content":"You can apply this attribute to methods.","nodes":[{"content":"You can apply this attribute to methods.","pos":[0,40]}]},{"pos":[47,290],"content":"The <xref:System.Runtime.InteropServices.DllImportAttribute> attribute provides the information needed to call a function exported from an unmanaged DLL. As a minimum requirement, you must supply the name of the DLL containing the entry point.","nodes":[{"content":"The <xref:System.Runtime.InteropServices.DllImportAttribute> attribute provides the information needed to call a function exported from an unmanaged DLL. As a minimum requirement, you must supply the name of the DLL containing the entry point.","pos":[0,243],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute provides the information needed to call a function exported from an unmanaged DLL.","pos":[0,153],"source":"The <xref:System.Runtime.InteropServices.DllImportAttribute> attribute provides the information needed to call a function exported from an unmanaged DLL."},{"content":"As a minimum requirement, you must supply the name of the DLL containing the entry point.","pos":[154,243]}]}]},{"pos":[297,1024],"content":"You apply this attribute directly to C# and C++ method definitions; however, the Visual Basic compiler emits this attribute when you use the `Declare` statement. For complex method definitions that include <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>, <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>, <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>, <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>, <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>, or <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields, you apply this attribute directly to Visual Basic method definitions.","nodes":[{"content":"You apply this attribute directly to C# and C++ method definitions; however, the Visual Basic compiler emits this attribute when you use the <ph id=\"ph1\">`Declare`</ph> statement.","pos":[0,161],"source":"You apply this attribute directly to C# and C++ method definitions; however, the Visual Basic compiler emits this attribute when you use the `Declare` statement."},{"content":"For complex method definitions that include <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph>, or <ph id=\"ph6\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> fields, you apply this attribute directly to Visual Basic method definitions.","pos":[162,727],"source":" For complex method definitions that include <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>, <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>, <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>, <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>, <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>, or <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields, you apply this attribute directly to Visual Basic method definitions."}]},{"pos":[1031,1182],"content":"**Note** JScript does not support this attribute. You can use C# or Visual Basic wrapper classes to access unmanaged API methods from JScript programs.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> JScript does not support this attribute.","pos":[0,49],"source":"**Note** JScript does not support this attribute."},{"content":"You can use C# or Visual Basic wrapper classes to access unmanaged API methods from JScript programs.","pos":[50,151]}]},{"pos":[1189,1398],"content":"For additional information about using the platform invoke service to access functions in unmanaged DLLs, see <bpt id=\"p1\">[</bpt>Consuming Unmanaged DLL Functions<ept id=\"p1\">](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)</ept>.","source":"For additional information about using the platform invoke service to access functions in unmanaged DLLs, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)."},{"pos":[1406,1523],"content":"[!NOTE]\n The <xref:System.Runtime.InteropServices.DllImportAttribute> does not support marshaling of generic types.","leadings":["","> "],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> does not support marshaling of generic types.","pos":[9,115],"source":" The <xref:System.Runtime.InteropServices.DllImportAttribute> does not support marshaling of generic types."}]}],"pos":[1293,2830],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.DllImportAttribute\"></xref> class with the name of the DLL containing the method to import.","nodes":[{"pos":[0,168],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.DllImportAttribute\"&gt;&lt;/xref&gt;</ph> class with the name of the DLL containing the method to import.","source":"Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.DllImportAttribute\"></xref> class with the name of the DLL containing the method to import."}],"pos":[9114,9283],"yaml":true},{"content":"If an unmanaged DLL file is included in an assembly, for example, by using the linker or the `/linkresource` compiler option, you can specify the assembly display name as part of `dllName`. For example, if an unmanaged DLL named `unmanaged.dll` is included in a managed assembly named `MyAssembly`, the attribute might be specified as shown in the following code.  \n  \n [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#2)]\n [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#2)]\n [!code-vb[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#2)]","nodes":[{"pos":[0,363],"content":"If an unmanaged DLL file is included in an assembly, for example, by using the linker or the `/linkresource` compiler option, you can specify the assembly display name as part of `dllName`. For example, if an unmanaged DLL named `unmanaged.dll` is included in a managed assembly named `MyAssembly`, the attribute might be specified as shown in the following code.","nodes":[{"content":"If an unmanaged DLL file is included in an assembly, for example, by using the linker or the <ph id=\"ph1\">`/linkresource`</ph> compiler option, you can specify the assembly display name as part of <ph id=\"ph2\">`dllName`</ph>.","pos":[0,189],"source":"If an unmanaged DLL file is included in an assembly, for example, by using the linker or the `/linkresource` compiler option, you can specify the assembly display name as part of `dllName`."},{"content":"For example, if an unmanaged DLL named <ph id=\"ph1\">`unmanaged.dll`</ph> is included in a managed assembly named <ph id=\"ph2\">`MyAssembly`</ph>, the attribute might be specified as shown in the following code.","pos":[190,363],"source":" For example, if an unmanaged DLL named `unmanaged.dll` is included in a managed assembly named `MyAssembly`, the attribute might be specified as shown in the following code."}]},{"pos":[370,917],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Runtime.InteropServices.DllImportAttribute#2<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.Runtime.InteropServices.DllImportAttribute#2<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#2)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Runtime.InteropServices.DllImportAttribute#2<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#2)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#2)]\n [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#2)]\n [!code-vb[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#2)]"}],"pos":[9294,10218],"yaml":true,"extradata":"MT"},{"content":"The name of the DLL that contains the unmanaged method. This can include an assembly display name, if the DLL is included in an assembly.","nodes":[{"pos":[0,137],"content":"The name of the DLL that contains the unmanaged method. This can include an assembly display name, if the DLL is included in an assembly.","nodes":[{"content":"The name of the DLL that contains the unmanaged method. This can include an assembly display name, if the DLL is included in an assembly.","pos":[0,137],"nodes":[{"content":"The name of the DLL that contains the unmanaged method.","pos":[0,55]},{"content":"This can include an assembly display name, if the DLL is included in an assembly.","pos":[56,137]}]}]}],"pos":[10970,11108],"yaml":true},{"content":"Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.","nodes":[{"pos":[0,100],"content":"Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.","nodes":[{"content":"Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.","pos":[0,100]}]}],"pos":[12763,12864],"yaml":true},{"content":"If `true`, best-fit mapping behavior is enabled; otherwise, best-fit mapping is disabled. The <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is `true` by default. Settings for this field override the any level settings for the <xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=fullName> attribute.  \n  \n The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me. Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists. For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters. Some characters lack a best-fit representation; these characters are called unmappable. Unmappable characters are usually converted to the default '?' ANSI character.  \n  \n> [!CAUTION]\n>  Certain Unicode characters are converted to dangerous characters, such as the backslash '\\\\' character, which can inadvertently change a path. By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.  \n  \n> [!CAUTION]\n>  You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array. Best-fit mapping is always enabled and no exception is thrown. Be aware that this combination can compromise your security model.","nodes":[{"pos":[0,355],"content":"If `true`, best-fit mapping behavior is enabled; otherwise, best-fit mapping is disabled. The <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is `true` by default. Settings for this field override the any level settings for the <xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=fullName> attribute.","nodes":[{"content":"If <ph id=\"ph1\">`true`</ph>, best-fit mapping behavior is enabled; otherwise, best-fit mapping is disabled.","pos":[0,89],"source":"If `true`, best-fit mapping behavior is enabled; otherwise, best-fit mapping is disabled."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> field is <ph id=\"ph2\">`true`</ph> by default.","pos":[90,193],"source":" The <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is `true` by default."},{"content":"Settings for this field override the any level settings for the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=fullName&gt;</ph> attribute.","pos":[194,355],"source":" Settings for this field override the any level settings for the <xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=fullName> attribute."}]},{"pos":[362,923],"content":"The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me. Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists. For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters. Some characters lack a best-fit representation; these characters are called unmappable. Unmappable characters are usually converted to the default '?' ANSI character.","nodes":[{"content":"The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me. Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists. For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters. Some characters lack a best-fit representation; these characters are called unmappable. Unmappable characters are usually converted to the default '?' ANSI character.","pos":[0,561],"nodes":[{"content":"The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.","pos":[0,155]},{"content":"Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.","pos":[156,268]},{"content":"For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.","pos":[269,394]},{"content":"Some characters lack a best-fit representation; these characters are called unmappable.","pos":[395,482]},{"content":"Unmappable characters are usually converted to the default '?' ANSI character.","pos":[483,561]}]}]},{"pos":[931,1293],"content":"[!CAUTION]\n Certain Unicode characters are converted to dangerous characters, such as the backslash '\\\\' character, which can inadvertently change a path. By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.","leadings":["","> "],"nodes":[{"content":" Certain Unicode characters are converted to dangerous characters, such as the backslash '\\\\' character, which can inadvertently change a path. By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.","pos":[11,360],"nodes":[{"content":"Certain Unicode characters are converted to dangerous characters, such as the backslash '<ph id=\"ph1\">\\\\</ph>' character, which can inadvertently change a path.","pos":[1,143],"source":" Certain Unicode characters are converted to dangerous characters, such as the backslash '\\\\' character, which can inadvertently change a path."},{"content":"By setting the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field to <ph id=\"ph2\">`true`</ph>, you can signal the presence of an unmappable character to the caller by throwing an exception.","pos":[144,349],"source":" By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception."}]}]},{"pos":[1301,1756],"content":"[!CAUTION]\n You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array. Best-fit mapping is always enabled and no exception is thrown. Be aware that this combination can compromise your security model.","leadings":["","> "],"nodes":[{"content":" You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array. Best-fit mapping is always enabled and no exception is thrown. Be aware that this combination can compromise your security model.","pos":[11,453],"nodes":[{"content":"You cannot change the default values provided by the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.","pos":[1,312],"source":" You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array."},{"content":"Best-fit mapping is always enabled and no exception is thrown.","pos":[313,375]},{"content":"Be aware that this combination can compromise your security model.","pos":[376,442]}]}]}],"pos":[12875,14644],"yaml":true,"extradata":"MT"},{"content":"Indicates the calling convention of an entry point.","nodes":[{"pos":[0,51],"content":"Indicates the calling convention of an entry point.","nodes":[{"content":"Indicates the calling convention of an entry point.","pos":[0,51]}]}],"pos":[17486,17538],"yaml":true},{"content":"You set this field to one of the <xref:System.Runtime.InteropServices.CallingConvention> enumeration members. The default value for the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is <xref:System.Runtime.InteropServices.CallingConvention.Winapi>, which in turn defaults to <xref:System.Runtime.InteropServices.CallingConvention.StdCall> convention.  \n  \n For more information, see Calling Convention in the MSDN library.","nodes":[{"pos":[0,385],"content":"You set this field to one of the <xref:System.Runtime.InteropServices.CallingConvention> enumeration members. The default value for the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is <xref:System.Runtime.InteropServices.CallingConvention.Winapi>, which in turn defaults to <xref:System.Runtime.InteropServices.CallingConvention.StdCall> convention.","nodes":[{"content":"You set this field to one of the <xref:System.Runtime.InteropServices.CallingConvention> enumeration members. The default value for the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is <xref:System.Runtime.InteropServices.CallingConvention.Winapi>, which in turn defaults to <xref:System.Runtime.InteropServices.CallingConvention.StdCall> convention.","pos":[0,385],"nodes":[{"content":"You set this field to one of the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.CallingConvention&gt;</ph> enumeration members.","pos":[0,109],"source":"You set this field to one of the <xref:System.Runtime.InteropServices.CallingConvention> enumeration members."},{"content":"The default value for the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph> field is <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.CallingConvention.Winapi&gt;</ph>, which in turn defaults to <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.CallingConvention.StdCall&gt;</ph> convention.","pos":[110,385],"source":" The default value for the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is <xref:System.Runtime.InteropServices.CallingConvention.Winapi>, which in turn defaults to <xref:System.Runtime.InteropServices.CallingConvention.StdCall> convention."}]}]},{"pos":[392,457],"content":"For more information, see Calling Convention in the MSDN library.","nodes":[{"content":"For more information, see Calling Convention in the MSDN library.","pos":[0,65]}]}],"pos":[17549,18011],"yaml":true,"extradata":"MT"},{"content":"Indicates how to marshal string parameters to the method and controls name mangling.","nodes":[{"pos":[0,84],"content":"Indicates how to marshal string parameters to the method and controls name mangling.","nodes":[{"content":"Indicates how to marshal string parameters to the method and controls name mangling.","pos":[0,84]}]}],"pos":[20124,20209],"yaml":true},{"content":"Use this field with a member of the <xref:System.Runtime.InteropServices.CharSet> enumeration to specify the marshaling behavior of string parameters and to specify which entry-point name to invoke (the exact name given or a name ending with \"A\" or \"W\"). The default enumeration member for C# and Visual Basic is `CharSet.Ansi` and the default enumeration member for C++ is `CharSet.None`, which is equivalent to `CharSet.Ansi`. In Visual Basic, you use the `Declare` statement to specify the `CharSet` field.  \n  \n The <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field influences the behavior of the `CharSet` field in determining which entry-point name to invoke. For a detailed description and examples of the string marshaling and name matching behavior associated with the `CharSet` field, see [Specifying a Character Set](~/docs/framework/interop/specifying-a-character-set.md).","nodes":[{"pos":[0,509],"content":"Use this field with a member of the <xref:System.Runtime.InteropServices.CharSet> enumeration to specify the marshaling behavior of string parameters and to specify which entry-point name to invoke (the exact name given or a name ending with \"A\" or \"W\"). The default enumeration member for C# and Visual Basic is `CharSet.Ansi` and the default enumeration member for C++ is `CharSet.None`, which is equivalent to `CharSet.Ansi`. In Visual Basic, you use the `Declare` statement to specify the `CharSet` field.","nodes":[{"content":"Use this field with a member of the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.CharSet&gt;</ph> enumeration to specify the marshaling behavior of string parameters and to specify which entry-point name to invoke (the exact name given or a name ending with \"A\" or \"W\").","pos":[0,254],"source":"Use this field with a member of the <xref:System.Runtime.InteropServices.CharSet> enumeration to specify the marshaling behavior of string parameters and to specify which entry-point name to invoke (the exact name given or a name ending with \"A\" or \"W\")."},{"content":"The default enumeration member for C# and Visual Basic is <ph id=\"ph1\">`CharSet.Ansi`</ph> and the default enumeration member for C++ is <ph id=\"ph2\">`CharSet.None`</ph>, which is equivalent to <ph id=\"ph3\">`CharSet.Ansi`</ph>.","pos":[255,428],"source":" The default enumeration member for C# and Visual Basic is `CharSet.Ansi` and the default enumeration member for C++ is `CharSet.None`, which is equivalent to `CharSet.Ansi`."},{"content":"In Visual Basic, you use the <ph id=\"ph1\">`Declare`</ph> statement to specify the <ph id=\"ph2\">`CharSet`</ph> field.","pos":[429,509],"source":" In Visual Basic, you use the `Declare` statement to specify the `CharSet` field."}]},{"pos":[516,911],"content":"The <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field influences the behavior of the `CharSet` field in determining which entry-point name to invoke. For a detailed description and examples of the string marshaling and name matching behavior associated with the `CharSet` field, see [Specifying a Character Set](~/docs/framework/interop/specifying-a-character-set.md).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> field influences the behavior of the <ph id=\"ph2\">`CharSet`</ph> field in determining which entry-point name to invoke.","pos":[0,176],"source":"The <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field influences the behavior of the `CharSet` field in determining which entry-point name to invoke."},{"content":"For a detailed description and examples of the string marshaling and name matching behavior associated with the <ph id=\"ph1\">`CharSet`</ph> field, see <bpt id=\"p1\">[</bpt>Specifying a Character Set<ept id=\"p1\">](~/docs/framework/interop/specifying-a-character-set.md)</ept>.","pos":[177,395],"source":" For a detailed description and examples of the string marshaling and name matching behavior associated with the `CharSet` field, see [Specifying a Character Set](~/docs/framework/interop/specifying-a-character-set.md)."}]}],"pos":[20220,21140],"yaml":true,"extradata":"MT"},{"content":"Indicates the name or ordinal of the DLL entry point to be called.","nodes":[{"pos":[0,66],"content":"Indicates the name or ordinal of the DLL entry point to be called.","nodes":[{"content":"Indicates the name or ordinal of the DLL entry point to be called.","pos":[0,66]}]}],"pos":[23471,23538],"yaml":true},{"content":"You can specify the entry-point name by supplying a string indicating the name of the DLL containing the entry point, or you can identify the entry point by its ordinal. Ordinals are prefixed with the # sign, for example, #1. If you omit this field, the common language runtime uses the name of the.NET method marked with the <xref:System.Runtime.InteropServices.DllImportAttribute>.  \n  \n For additional information, see [Identifying Functions in DLLs](~/docs/framework/interop/identifying-functions-in-dlls.md). For examples showing how to use the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> field, see [Specifying an Entry Point](~/docs/framework/interop/specifying-an-entry-point.md).","nodes":[{"pos":[0,383],"content":"You can specify the entry-point name by supplying a string indicating the name of the DLL containing the entry point, or you can identify the entry point by its ordinal. Ordinals are prefixed with the # sign, for example, #1. If you omit this field, the common language runtime uses the name of the.NET method marked with the <xref:System.Runtime.InteropServices.DllImportAttribute>.","nodes":[{"content":"You can specify the entry-point name by supplying a string indicating the name of the DLL containing the entry point, or you can identify the entry point by its ordinal. Ordinals are prefixed with the # sign, for example, #1. If you omit this field, the common language runtime uses the name of the.NET method marked with the <xref:System.Runtime.InteropServices.DllImportAttribute>.","pos":[0,383],"nodes":[{"content":"You can specify the entry-point name by supplying a string indicating the name of the DLL containing the entry point, or you can identify the entry point by its ordinal.","pos":[0,169]},{"content":"Ordinals are prefixed with the # sign, for example, #1.","pos":[170,225]},{"content":"If you omit this field, the common language runtime uses the name of the.NET method marked with the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>.","pos":[226,383],"source":" If you omit this field, the common language runtime uses the name of the.NET method marked with the <xref:System.Runtime.InteropServices.DllImportAttribute>."}]}]},{"pos":[390,712],"content":"For additional information, see [Identifying Functions in DLLs](~/docs/framework/interop/identifying-functions-in-dlls.md). For examples showing how to use the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> field, see [Specifying an Entry Point](~/docs/framework/interop/specifying-an-entry-point.md).","nodes":[{"content":"For additional information, see <bpt id=\"p1\">[</bpt>Identifying Functions in DLLs<ept id=\"p1\">](~/docs/framework/interop/identifying-functions-in-dlls.md)</ept>.","pos":[0,123],"source":"For additional information, see [Identifying Functions in DLLs](~/docs/framework/interop/identifying-functions-in-dlls.md)."},{"content":"For examples showing how to use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint&gt;</ph> field, see <bpt id=\"p1\">[</bpt>Specifying an Entry Point<ept id=\"p1\">](~/docs/framework/interop/specifying-an-entry-point.md)</ept>.","pos":[124,322],"source":" For examples showing how to use the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> field, see [Specifying an Entry Point](~/docs/framework/interop/specifying-an-entry-point.md)."}]}],"pos":[23549,24266],"yaml":true,"extradata":"MT"},{"content":"Controls whether the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.CharSet\"></xref> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.","nodes":[{"pos":[0,219],"content":"Controls whether the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.DllImportAttribute.CharSet\"&gt;&lt;/xref&gt;</ph> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.","source":"Controls whether the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.CharSet\"></xref> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified."}],"pos":[26707,26927],"yaml":true},{"content":"If `false`, the entry point name appended with the letter A is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=fullName> field is set to `CharSet.Ansi`, and the entry-point name appended with the letter W is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=fullName> field is set to the `CharSet.Unicode`. Typically, managed compilers set this field.  \n  \n The following table shows the relationship between the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet> and <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> fields, based on default values imposed by the programming language. You can override the default setting, but do so with caution.  \n  \n|Language|ANSI|Unicode|Auto|  \n|--------------|----------|-------------|----------|  \n|Visual Basic|ExactSpelling:=True|ExactSpelling:=True|ExactSpelling:=False|  \n|C#|ExactSpelling=false|ExactSpelling=false|ExactSpelling=false|  \n|C++|ExactSpelling=false|ExactSpelling=false|ExactSpelling=false|","nodes":[{"pos":[0,447],"content":"If `false`, the entry point name appended with the letter A is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=fullName> field is set to `CharSet.Ansi`, and the entry-point name appended with the letter W is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=fullName> field is set to the `CharSet.Unicode`. Typically, managed compilers set this field.","nodes":[{"content":"If <ph id=\"ph1\">`false`</ph>, the entry point name appended with the letter A is invoked when the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=fullName&gt;</ph> field is set to <ph id=\"ph3\">`CharSet.Ansi`</ph>, and the entry-point name appended with the letter W is invoked when the <ph id=\"ph4\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=fullName&gt;</ph> field is set to the <ph id=\"ph5\">`CharSet.Unicode`</ph>.","pos":[0,402],"source":"If `false`, the entry point name appended with the letter A is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=fullName> field is set to `CharSet.Ansi`, and the entry-point name appended with the letter W is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=fullName> field is set to the `CharSet.Unicode`."},{"content":"Typically, managed compilers set this field.","pos":[403,447]}]},{"pos":[454,779],"content":"The following table shows the relationship between the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet> and <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> fields, based on default values imposed by the programming language. You can override the default setting, but do so with caution.","nodes":[{"content":"The following table shows the relationship between the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet> and <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> fields, based on default values imposed by the programming language. You can override the default setting, but do so with caution.","pos":[0,325],"nodes":[{"content":"The following table shows the relationship between the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> fields, based on default values imposed by the programming language.","pos":[0,263],"source":"The following table shows the relationship between the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet> and <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> fields, based on default values imposed by the programming language."},{"content":"You can override the default setting, but do so with caution.","pos":[264,325]}]}]},{"pos":[786,794],"content":"Language","nodes":[{"content":"Language","pos":[0,8]}]},{"pos":[795,799],"content":"ANSI","nodes":[{"content":"ANSI","pos":[0,4]}]},{"pos":[800,807],"content":"Unicode","nodes":[{"content":"Unicode","pos":[0,7]}]},{"pos":[808,812],"content":"Auto","nodes":[{"content":"Auto","pos":[0,4]}]},{"pos":[872,884],"content":"Visual Basic","nodes":[{"content":"Visual Basic","pos":[0,12]}]},{"pos":[885,904],"content":"ExactSpelling:=True","nodes":[{"content":"ExactSpelling:=True","pos":[0,19]}]},{"pos":[905,924],"content":"ExactSpelling:=True","nodes":[{"content":"ExactSpelling:=True","pos":[0,19]}]},{"pos":[925,945],"content":"ExactSpelling:=False","nodes":[{"content":"ExactSpelling:=False","pos":[0,20]}]},{"pos":[950,952],"content":"C#","nodes":[{"content":"C#","pos":[0,2]}]},{"pos":[953,972],"content":"ExactSpelling=false","nodes":[{"content":"ExactSpelling=false","pos":[0,19]}]},{"pos":[973,992],"content":"ExactSpelling=false","nodes":[{"content":"ExactSpelling=false","pos":[0,19]}]},{"pos":[993,1012],"content":"ExactSpelling=false","nodes":[{"content":"ExactSpelling=false","pos":[0,19]}]},{"pos":[1017,1020],"content":"C++","nodes":[{"content":"C++","pos":[0,3]}]},{"pos":[1021,1040],"content":"ExactSpelling=false","nodes":[{"content":"ExactSpelling=false","pos":[0,19]}]},{"pos":[1041,1060],"content":"ExactSpelling=false","nodes":[{"content":"ExactSpelling=false","pos":[0,19]}]},{"pos":[1061,1080],"content":"ExactSpelling=false","nodes":[{"content":"ExactSpelling=false","pos":[0,19]}]}],"pos":[26938,28030],"yaml":true,"extradata":"MT"},{"content":"Indicates whether unmanaged methods that have `HRESULT` or `retval` return values are directly translated or whether `HRESULT` or `retval` return values are automatically converted to exceptions.","nodes":[{"pos":[0,195],"content":"Indicates whether unmanaged methods that have <ph id=\"ph1\">`HRESULT`</ph> or <ph id=\"ph2\">`retval`</ph> return values are directly translated or whether <ph id=\"ph3\">`HRESULT`</ph> or <ph id=\"ph4\">`retval`</ph> return values are automatically converted to exceptions.","source":"Indicates whether unmanaged methods that have `HRESULT` or `retval` return values are directly translated or whether `HRESULT` or `retval` return values are automatically converted to exceptions."}],"pos":[30585,30781],"yaml":true},{"content":"Set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `true` to directly translate unmanaged signatures with `HRESULT` or `retval` values; set it to `false` to automatically convert `HRESULT` or `retval` values to exceptions. By default, the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is `true`.  \n  \n When `true`, the resulting method signature returns an integer value that contains the `HRESULT` value.  In this case, you must manually inspect the return value and respond accordingly in your application.  \n  \n When you set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `false`, the resulting method signature contains a void return type instead of an integer (`HRESULT`) return type.  When the unmanaged method produces an `HRESULT`, the runtime automatically ignores a return value of `S_OK` (or 0) and does not throw an exception.  For `HRESULT`s other than `S_OK`, the runtime automatically throws an exception that corresponds to the `HRESULT`.  Note that the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute only performs this conversion to methods that return an `HRESULT`.  \n  \n You might decide to change the default error reporting behavior from `HRESULT`s to exceptions in cases where exceptions better fit the error reporting structure of your application.  \n  \n This field is similar to the <xref:System.Runtime.InteropServices.PreserveSigAttribute>; however, in contrast to the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field, the default value for the attribute is `false`.  \n  \n In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code. Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is one of those cases.","nodes":[{"pos":[0,359],"content":"Set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `true` to directly translate unmanaged signatures with `HRESULT` or `retval` values; set it to `false` to automatically convert `HRESULT` or `retval` values to exceptions. By default, the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is `true`.","nodes":[{"content":"Set the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field to <ph id=\"ph2\">`true`</ph> to directly translate unmanaged signatures with <ph id=\"ph3\">`HRESULT`</ph> or <ph id=\"ph4\">`retval`</ph> values; set it to <ph id=\"ph5\">`false`</ph> to automatically convert <ph id=\"ph6\">`HRESULT`</ph> or <ph id=\"ph7\">`retval`</ph> values to exceptions.","pos":[0,257],"source":"Set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `true` to directly translate unmanaged signatures with `HRESULT` or `retval` values; set it to `false` to automatically convert `HRESULT` or `retval` values to exceptions."},{"content":"By default, the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field is <ph id=\"ph2\">`true`</ph>.","pos":[258,359],"source":" By default, the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is `true`."}]},{"pos":[366,572],"content":"When `true`, the resulting method signature returns an integer value that contains the `HRESULT` value.  In this case, you must manually inspect the return value and respond accordingly in your application.","nodes":[{"content":"When <ph id=\"ph1\">`true`</ph>, the resulting method signature returns an integer value that contains the <ph id=\"ph2\">`HRESULT`</ph> value.","pos":[0,103],"source":"When `true`, the resulting method signature returns an integer value that contains the `HRESULT` value."},{"content":"In this case, you must manually inspect the return value and respond accordingly in your application.","pos":[105,206]}]},{"pos":[579,1202],"content":"When you set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `false`, the resulting method signature contains a void return type instead of an integer (`HRESULT`) return type.  When the unmanaged method produces an `HRESULT`, the runtime automatically ignores a return value of `S_OK` (or 0) and does not throw an exception.  For `HRESULT`s other than `S_OK`, the runtime automatically throws an exception that corresponds to the `HRESULT`.  Note that the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute only performs this conversion to methods that return an `HRESULT`.","nodes":[{"content":"When you set the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field to <ph id=\"ph2\">`false`</ph>, the resulting method signature contains a void return type instead of an integer (<ph id=\"ph3\">`HRESULT`</ph>) return type.","pos":[0,209],"source":"When you set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `false`, the resulting method signature contains a void return type instead of an integer (`HRESULT`) return type."},{"content":"When the unmanaged method produces an <ph id=\"ph1\">`HRESULT`</ph>, the runtime automatically ignores a return value of <ph id=\"ph2\">`S_OK`</ph> (or 0) and does not throw an exception.","pos":[211,358],"source":"  When the unmanaged method produces an `HRESULT`, the runtime automatically ignores a return value of `S_OK` (or 0) and does not throw an exception."},{"content":"For <ph id=\"ph1\">`HRESULT`</ph>s other than <ph id=\"ph2\">`S_OK`</ph>, the runtime automatically throws an exception that corresponds to the <ph id=\"ph3\">`HRESULT`</ph>.","pos":[360,474],"source":"  For `HRESULT`s other than `S_OK`, the runtime automatically throws an exception that corresponds to the `HRESULT`."},{"content":"Note that the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute only performs this conversion to methods that return an <ph id=\"ph2\">`HRESULT`</ph>.","pos":[476,623],"source":"  Note that the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute only performs this conversion to methods that return an `HRESULT`."}]},{"pos":[1209,1390],"content":"You might decide to change the default error reporting behavior from <ph id=\"ph1\">`HRESULT`</ph>s to exceptions in cases where exceptions better fit the error reporting structure of your application.","source":"You might decide to change the default error reporting behavior from `HRESULT`s to exceptions in cases where exceptions better fit the error reporting structure of your application."},{"pos":[1397,1637],"content":"This field is similar to the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.PreserveSigAttribute&gt;</ph>; however, in contrast to the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field, the default value for the attribute is <ph id=\"ph3\">`false`</ph>.","source":"This field is similar to the <xref:System.Runtime.InteropServices.PreserveSigAttribute>; however, in contrast to the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field, the default value for the attribute is `false`."},{"pos":[1644,1942],"content":"In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code. Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is one of those cases.","nodes":[{"content":"In some cases, Visual Basic developers use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of using the <ph id=\"ph2\">`Declare`</ph> statement, to define a DLL function in managed code.","pos":[0,188],"source":"In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code."},{"content":"Setting the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field is one of those cases.","pos":[189,298],"source":" Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is one of those cases."}]}],"pos":[30792,32747],"yaml":true,"extradata":"MT"},{"content":"Indicates whether the callee calls the `SetLastError` Win32 API function before returning from the attributed method.","nodes":[{"pos":[0,117],"content":"Indicates whether the callee calls the <ph id=\"ph1\">`SetLastError`</ph> Win32 API function before returning from the attributed method.","source":"Indicates whether the callee calls the `SetLastError` Win32 API function before returning from the attributed method."}],"pos":[35281,35399],"yaml":true},{"content":"`true` to indicate that the callee will call `SetLastError`; otherwise, `false`. The default is `false`.  \n  \n The runtime marshaler calls `GetLastError` and caches the value returned to prevent it from being overwritten by other API calls. You can retrieve the error code by calling <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>.","nodes":[{"pos":[0,104],"content":"`true` to indicate that the callee will call `SetLastError`; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> to indicate that the callee will call <ph id=\"ph2\">`SetLastError`</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,80],"source":"`true` to indicate that the callee will call `SetLastError`; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[81,104],"source":" The default is `false`."}]},{"pos":[111,351],"content":"The runtime marshaler calls `GetLastError` and caches the value returned to prevent it from being overwritten by other API calls. You can retrieve the error code by calling <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>.","nodes":[{"content":"The runtime marshaler calls <ph id=\"ph1\">`GetLastError`</ph> and caches the value returned to prevent it from being overwritten by other API calls.","pos":[0,129],"source":"The runtime marshaler calls `GetLastError` and caches the value returned to prevent it from being overwritten by other API calls."},{"content":"You can retrieve the error code by calling <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A&gt;</ph>.","pos":[130,240],"source":" You can retrieve the error code by calling <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>."}]}],"pos":[35410,35766],"yaml":true,"extradata":"MT"},{"content":"Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI \"?\" character.","nodes":[{"pos":[0,127],"content":"Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI \"?\" character.","nodes":[{"content":"Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI \"?\" character.","pos":[0,127]}]}],"pos":[38379,38507],"yaml":true},{"content":"`true` to indicate that an exception is thrown each time the interop marshaler converts an unmappable character; `false` to indicate that the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is disabled. This field is `false` by default.  \n  \n The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me. Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists. For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters. Some characters lack a best-fit representation; these characters are called unmappable. Unmappable characters are usually converted to the default '?' ANSI character.  \n  \n> [!CAUTION]\n>  Certain Unicode characters are converted to dangerous characters, such as the backslash '\\\\' character, which can inadvertently change a path. By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.  \n  \n> [!CAUTION]\n>  You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array. Best-fit mapping is always enabled and no exception is thrown. Be aware that this combination can compromise your security model.","nodes":[{"pos":[0,273],"content":"`true` to indicate that an exception is thrown each time the interop marshaler converts an unmappable character; `false` to indicate that the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is disabled. This field is `false` by default.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> to indicate that an exception is thrown each time the interop marshaler converts an unmappable character; <ph id=\"ph2\">`false`</ph> to indicate that the <ph id=\"ph3\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field is disabled.","pos":[0,239],"source":"`true` to indicate that an exception is thrown each time the interop marshaler converts an unmappable character; `false` to indicate that the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is disabled."},{"content":"This field is <ph id=\"ph1\">`false`</ph> by default.","pos":[240,273],"source":" This field is `false` by default."}]},{"pos":[280,841],"content":"The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me. Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists. For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters. Some characters lack a best-fit representation; these characters are called unmappable. Unmappable characters are usually converted to the default '?' ANSI character.","nodes":[{"content":"The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me. Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists. For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters. Some characters lack a best-fit representation; these characters are called unmappable. Unmappable characters are usually converted to the default '?' ANSI character.","pos":[0,561],"nodes":[{"content":"The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.","pos":[0,155]},{"content":"Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.","pos":[156,268]},{"content":"For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.","pos":[269,394]},{"content":"Some characters lack a best-fit representation; these characters are called unmappable.","pos":[395,482]},{"content":"Unmappable characters are usually converted to the default '?' ANSI character.","pos":[483,561]}]}]},{"pos":[849,1211],"content":"[!CAUTION]\n Certain Unicode characters are converted to dangerous characters, such as the backslash '\\\\' character, which can inadvertently change a path. By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.","leadings":["","> "],"nodes":[{"content":" Certain Unicode characters are converted to dangerous characters, such as the backslash '\\\\' character, which can inadvertently change a path. By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.","pos":[11,360],"nodes":[{"content":"Certain Unicode characters are converted to dangerous characters, such as the backslash '<ph id=\"ph1\">\\\\</ph>' character, which can inadvertently change a path.","pos":[1,143],"source":" Certain Unicode characters are converted to dangerous characters, such as the backslash '\\\\' character, which can inadvertently change a path."},{"content":"By setting the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field to <ph id=\"ph2\">`true`</ph>, you can signal the presence of an unmappable character to the caller by throwing an exception.","pos":[144,349],"source":" By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception."}]}]},{"pos":[1219,1674],"content":"[!CAUTION]\n You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array. Best-fit mapping is always enabled and no exception is thrown. Be aware that this combination can compromise your security model.","leadings":["","> "],"nodes":[{"content":" You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array. Best-fit mapping is always enabled and no exception is thrown. Be aware that this combination can compromise your security model.","pos":[11,453],"nodes":[{"content":"You cannot change the default values provided by the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.","pos":[1,312],"source":" You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array."},{"content":"Best-fit mapping is always enabled and no exception is thrown.","pos":[313,375]},{"content":"Be aware that this combination can compromise your security model.","pos":[376,442]}]}]}],"pos":[38518,40205],"yaml":true,"extradata":"MT"},{"content":"Gets the name of the DLL file that contains the entry point.","nodes":[{"pos":[0,60],"content":"Gets the name of the DLL file that contains the entry point.","nodes":[{"content":"Gets the name of the DLL file that contains the entry point.","pos":[0,60]}]}],"pos":[42997,43058],"yaml":true},{"content":"You can provide a full or relative path. If you provide no path, the DLL must be in the current path at run time, unless the DLL is loaded by some other means. Be aware, however, that using a fully qualified path can introduce inaccuracy if the DLL is moved.","nodes":[{"pos":[0,258],"content":"You can provide a full or relative path. If you provide no path, the DLL must be in the current path at run time, unless the DLL is loaded by some other means. Be aware, however, that using a fully qualified path can introduce inaccuracy if the DLL is moved.","nodes":[{"content":"You can provide a full or relative path. If you provide no path, the DLL must be in the current path at run time, unless the DLL is loaded by some other means. Be aware, however, that using a fully qualified path can introduce inaccuracy if the DLL is moved.","pos":[0,258],"nodes":[{"content":"You can provide a full or relative path.","pos":[0,40]},{"content":"If you provide no path, the DLL must be in the current path at run time, unless the DLL is loaded by some other means.","pos":[41,159]},{"content":"Be aware, however, that using a fully qualified path can introduce inaccuracy if the DLL is moved.","pos":[160,258]}]}]}],"pos":[43069,43328],"yaml":true,"extradata":"MT"},{"content":"The name of the DLL file that contains the entry point.","nodes":[{"pos":[0,55],"content":"The name of the DLL file that contains the entry point.","nodes":[{"content":"The name of the DLL file that contains the entry point.","pos":[0,55]}]}],"pos":[43437,43493],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.InteropServices.DllImportAttribute\n  commentId: T:System.Runtime.InteropServices.DllImportAttribute\n  id: DllImportAttribute\n  children:\n  - System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)\n  - System.Runtime.InteropServices.DllImportAttribute.BestFitMapping\n  - System.Runtime.InteropServices.DllImportAttribute.CallingConvention\n  - System.Runtime.InteropServices.DllImportAttribute.CharSet\n  - System.Runtime.InteropServices.DllImportAttribute.EntryPoint\n  - System.Runtime.InteropServices.DllImportAttribute.ExactSpelling\n  - System.Runtime.InteropServices.DllImportAttribute.PreserveSig\n  - System.Runtime.InteropServices.DllImportAttribute.SetLastError\n  - System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar\n  - System.Runtime.InteropServices.DllImportAttribute.Value\n  langs:\n  - csharp\n  name: DllImportAttribute\n  nameWithType: DllImportAttribute\n  fullName: System.Runtime.InteropServices.DllImportAttribute\n  type: Class\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.\n  remarks: \"You can apply this attribute to methods.  \\n  \\n The <xref:System.Runtime.InteropServices.DllImportAttribute> attribute provides the information needed to call a function exported from an unmanaged DLL. As a minimum requirement, you must supply the name of the DLL containing the entry point.  \\n  \\n You apply this attribute directly to C# and C++ method definitions; however, the Visual Basic compiler emits this attribute when you use the `Declare` statement. For complex method definitions that include <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>, <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>, <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>, <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>, <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>, or <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields, you apply this attribute directly to Visual Basic method definitions.  \\n  \\n **Note** JScript does not support this attribute. You can use C# or Visual Basic wrapper classes to access unmanaged API methods from JScript programs.  \\n  \\n For additional information about using the platform invoke service to access functions in unmanaged DLLs, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).  \\n  \\n> [!NOTE]\\n>  The <xref:System.Runtime.InteropServices.DllImportAttribute> does not support marshaling of generic types.\"\n  example:\n  - \"The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.  The code example then calls the imported method.  \\n  \\n [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]\\n [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Method, Inherited=false)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class DllImportAttribute : Attribute\n  inheritance:\n  - System.Object\n  - System.Attribute\n  implements: []\n  inheritedMembers:\n  - System.Attribute.Equals(System.Object)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetHashCode\n  - System.Attribute.IsDefaultAttribute\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.Match(System.Object)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Attribute.TypeId\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.AttributeUsageAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/DllImportAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)\n  commentId: M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Runtime.InteropServices.DllImportAttribute\n  langs:\n  - csharp\n  name: DllImportAttribute(String)\n  nameWithType: DllImportAttribute.DllImportAttribute(String)\n  fullName: DllImportAttribute.DllImportAttribute(String)\n  type: Constructor\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.DllImportAttribute\"></xref> class with the name of the DLL containing the method to import.\n  remarks: \"If an unmanaged DLL file is included in an assembly, for example, by using the linker or the `/linkresource` compiler option, you can specify the assembly display name as part of `dllName`. For example, if an unmanaged DLL named `unmanaged.dll` is included in a managed assembly named `MyAssembly`, the attribute might be specified as shown in the following code.  \\n  \\n [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#2)]\\n [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#2)]\\n [!code-vb[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#2)]\"\n  example:\n  - \"The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.  The code example then calls the imported method.  \\n  \\n [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]\\n [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]\"\n  syntax:\n    content: public DllImportAttribute (string dllName);\n    parameters:\n    - id: dllName\n      type: System.String\n      description: The name of the DLL that contains the unmanaged method. This can include an assembly display name, if the DLL is included in an assembly.\n  overload: System.Runtime.InteropServices.DllImportAttribute.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/DllImportAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.DllImportAttribute.BestFitMapping\n  commentId: F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping\n  id: BestFitMapping\n  parent: System.Runtime.InteropServices.DllImportAttribute\n  langs:\n  - csharp\n  name: BestFitMapping\n  nameWithType: DllImportAttribute.BestFitMapping\n  fullName: DllImportAttribute.BestFitMapping\n  type: Field\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.\n  remarks: \"If `true`, best-fit mapping behavior is enabled; otherwise, best-fit mapping is disabled. The <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is `true` by default. Settings for this field override the any level settings for the <xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=fullName> attribute.  \\n  \\n The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me. Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists. For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters. Some characters lack a best-fit representation; these characters are called unmappable. Unmappable characters are usually converted to the default '?' ANSI character.  \\n  \\n> [!CAUTION]\\n>  Certain Unicode characters are converted to dangerous characters, such as the backslash '\\\\\\\\' character, which can inadvertently change a path. By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.  \\n  \\n> [!CAUTION]\\n>  You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array. Best-fit mapping is always enabled and no exception is thrown. Be aware that this combination can compromise your security model.\"\n  example:\n  - \"In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of the `Declare` statement, to define a DLL function in managed code. Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is one of those cases. The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.  \\n  \\n [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]\\n [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]\\n [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]\"\n  syntax:\n    content: public bool BestFitMapping;\n    return:\n      type: System.Boolean\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/DllImportAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.DllImportAttribute.CallingConvention\n  commentId: F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention\n  id: CallingConvention\n  parent: System.Runtime.InteropServices.DllImportAttribute\n  langs:\n  - csharp\n  name: CallingConvention\n  nameWithType: DllImportAttribute.CallingConvention\n  fullName: DllImportAttribute.CallingConvention\n  type: Field\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Indicates the calling convention of an entry point.\n  remarks: \"You set this field to one of the <xref:System.Runtime.InteropServices.CallingConvention> enumeration members. The default value for the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is <xref:System.Runtime.InteropServices.CallingConvention.Winapi>, which in turn defaults to <xref:System.Runtime.InteropServices.CallingConvention.StdCall> convention.  \\n  \\n For more information, see Calling Convention in the MSDN library.\"\n  example:\n  - \"In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of the `Declare` statement, to define a DLL function in managed code. Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is one of those cases.  \\n  \\n System.Runtime.InteropServices.DllImportAttribute#1\"\n  syntax:\n    content: public System.Runtime.InteropServices.CallingConvention CallingConvention;\n    return:\n      type: System.Runtime.InteropServices.CallingConvention\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/DllImportAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.DllImportAttribute.CharSet\n  commentId: F:System.Runtime.InteropServices.DllImportAttribute.CharSet\n  id: CharSet\n  parent: System.Runtime.InteropServices.DllImportAttribute\n  langs:\n  - csharp\n  name: CharSet\n  nameWithType: DllImportAttribute.CharSet\n  fullName: DllImportAttribute.CharSet\n  type: Field\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Indicates how to marshal string parameters to the method and controls name mangling.\n  remarks: \"Use this field with a member of the <xref:System.Runtime.InteropServices.CharSet> enumeration to specify the marshaling behavior of string parameters and to specify which entry-point name to invoke (the exact name given or a name ending with \\\"A\\\" or \\\"W\\\"). The default enumeration member for C# and Visual Basic is `CharSet.Ansi` and the default enumeration member for C++ is `CharSet.None`, which is equivalent to `CharSet.Ansi`. In Visual Basic, you use the `Declare` statement to specify the `CharSet` field.  \\n  \\n The <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field influences the behavior of the `CharSet` field in determining which entry-point name to invoke. For a detailed description and examples of the string marshaling and name matching behavior associated with the `CharSet` field, see [Specifying a Character Set](~/docs/framework/interop/specifying-a-character-set.md).\"\n  example:\n  - \"The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.  The code example then calls the imported method.  \\n  \\n [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]\\n [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]\"\n  syntax:\n    content: public System.Runtime.InteropServices.CharSet CharSet;\n    return:\n      type: System.Runtime.InteropServices.CharSet\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/DllImportAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.DllImportAttribute.EntryPoint\n  commentId: F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint\n  id: EntryPoint\n  parent: System.Runtime.InteropServices.DllImportAttribute\n  langs:\n  - csharp\n  name: EntryPoint\n  nameWithType: DllImportAttribute.EntryPoint\n  fullName: DllImportAttribute.EntryPoint\n  type: Field\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Indicates the name or ordinal of the DLL entry point to be called.\n  remarks: \"You can specify the entry-point name by supplying a string indicating the name of the DLL containing the entry point, or you can identify the entry point by its ordinal. Ordinals are prefixed with the # sign, for example, #1. If you omit this field, the common language runtime uses the name of the.NET method marked with the <xref:System.Runtime.InteropServices.DllImportAttribute>.  \\n  \\n For additional information, see [Identifying Functions in DLLs](~/docs/framework/interop/identifying-functions-in-dlls.md). For examples showing how to use the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> field, see [Specifying an Entry Point](~/docs/framework/interop/specifying-an-entry-point.md).\"\n  example:\n  - \"The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.  The code example uses the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> property to specify the function to import and then changes the name to `MyNewMessageBoxMethod`.  \\n  \\n [!code-csharp[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/cs/sample.cs#1)]\\n [!code-vb[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/vb/sample.vb#1)]\"\n  syntax:\n    content: public string EntryPoint;\n    return:\n      type: System.String\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/DllImportAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.DllImportAttribute.ExactSpelling\n  commentId: F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling\n  id: ExactSpelling\n  parent: System.Runtime.InteropServices.DllImportAttribute\n  langs:\n  - csharp\n  name: ExactSpelling\n  nameWithType: DllImportAttribute.ExactSpelling\n  fullName: DllImportAttribute.ExactSpelling\n  type: Field\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Controls whether the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.CharSet\"></xref> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.\n  remarks: \"If `false`, the entry point name appended with the letter A is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=fullName> field is set to `CharSet.Ansi`, and the entry-point name appended with the letter W is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=fullName> field is set to the `CharSet.Unicode`. Typically, managed compilers set this field.  \\n  \\n The following table shows the relationship between the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet> and <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> fields, based on default values imposed by the programming language. You can override the default setting, but do so with caution.  \\n  \\n|Language|ANSI|Unicode|Auto|  \\n|--------------|----------|-------------|----------|  \\n|Visual Basic|ExactSpelling:=True|ExactSpelling:=True|ExactSpelling:=False|  \\n|C#|ExactSpelling=false|ExactSpelling=false|ExactSpelling=false|  \\n|C++|ExactSpelling=false|ExactSpelling=false|ExactSpelling=false|\"\n  example:\n  - \"In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code. Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field is one of those cases.  \\n  \\n [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#4)]\\n [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#4)]\\n [!code-vb[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#4)]\"\n  syntax:\n    content: public bool ExactSpelling;\n    return:\n      type: System.Boolean\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/DllImportAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.DllImportAttribute.PreserveSig\n  commentId: F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig\n  id: PreserveSig\n  parent: System.Runtime.InteropServices.DllImportAttribute\n  langs:\n  - csharp\n  name: PreserveSig\n  nameWithType: DllImportAttribute.PreserveSig\n  fullName: DllImportAttribute.PreserveSig\n  type: Field\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Indicates whether unmanaged methods that have `HRESULT` or `retval` return values are directly translated or whether `HRESULT` or `retval` return values are automatically converted to exceptions.\n  remarks: \"Set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `true` to directly translate unmanaged signatures with `HRESULT` or `retval` values; set it to `false` to automatically convert `HRESULT` or `retval` values to exceptions. By default, the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is `true`.  \\n  \\n When `true`, the resulting method signature returns an integer value that contains the `HRESULT` value.  In this case, you must manually inspect the return value and respond accordingly in your application.  \\n  \\n When you set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `false`, the resulting method signature contains a void return type instead of an integer (`HRESULT`) return type.  When the unmanaged method produces an `HRESULT`, the runtime automatically ignores a return value of `S_OK` (or 0) and does not throw an exception.  For `HRESULT`s other than `S_OK`, the runtime automatically throws an exception that corresponds to the `HRESULT`.  Note that the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute only performs this conversion to methods that return an `HRESULT`.  \\n  \\n You might decide to change the default error reporting behavior from `HRESULT`s to exceptions in cases where exceptions better fit the error reporting structure of your application.  \\n  \\n This field is similar to the <xref:System.Runtime.InteropServices.PreserveSigAttribute>; however, in contrast to the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field, the default value for the attribute is `false`.  \\n  \\n In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code. Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is one of those cases.\"\n  example:\n  - \"The following code example uses the <xref:System.Runtime.InteropServices.DllImportAttribute> to import the unmanaged `SHAutoComplete` function once with the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field set to `true` and again with the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field set to `false`.  This code example causes the `SHAutoComplete` function to generate any errors with an exception one time and an `HRESULT` the next.  \\n  \\n [!code-csharp[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/cs/example.cs#1)]\\n [!code-vb[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/vb/example.vb#1)]\"\n  syntax:\n    content: public bool PreserveSig;\n    return:\n      type: System.Boolean\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/DllImportAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.DllImportAttribute.SetLastError\n  commentId: F:System.Runtime.InteropServices.DllImportAttribute.SetLastError\n  id: SetLastError\n  parent: System.Runtime.InteropServices.DllImportAttribute\n  langs:\n  - csharp\n  name: SetLastError\n  nameWithType: DllImportAttribute.SetLastError\n  fullName: DllImportAttribute.SetLastError\n  type: Field\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Indicates whether the callee calls the `SetLastError` Win32 API function before returning from the attributed method.\n  remarks: \"`true` to indicate that the callee will call `SetLastError`; otherwise, `false`. The default is `false`.  \\n  \\n The runtime marshaler calls `GetLastError` and caches the value returned to prevent it from being overwritten by other API calls. You can retrieve the error code by calling <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>.\"\n  example:\n  - \"In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code. Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError> field is one of those cases.  \\n  \\n [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#5)]\\n [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#5)]\\n [!code-vb[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#5)]\"\n  syntax:\n    content: public bool SetLastError;\n    return:\n      type: System.Boolean\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/DllImportAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar\n  commentId: F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar\n  id: ThrowOnUnmappableChar\n  parent: System.Runtime.InteropServices.DllImportAttribute\n  langs:\n  - csharp\n  name: ThrowOnUnmappableChar\n  nameWithType: DllImportAttribute.ThrowOnUnmappableChar\n  fullName: DllImportAttribute.ThrowOnUnmappableChar\n  type: Field\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI \"?\" character.\n  remarks: \"`true` to indicate that an exception is thrown each time the interop marshaler converts an unmappable character; `false` to indicate that the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is disabled. This field is `false` by default.  \\n  \\n The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me. Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists. For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters. Some characters lack a best-fit representation; these characters are called unmappable. Unmappable characters are usually converted to the default '?' ANSI character.  \\n  \\n> [!CAUTION]\\n>  Certain Unicode characters are converted to dangerous characters, such as the backslash '\\\\\\\\' character, which can inadvertently change a path. By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.  \\n  \\n> [!CAUTION]\\n>  You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array. Best-fit mapping is always enabled and no exception is thrown. Be aware that this combination can compromise your security model.\"\n  example:\n  - \"In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute> to define a DLL function in managed code, instead of using the `Declare` statement. Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is one of those cases. The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.  \\n  \\n [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]\\n [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]\\n [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]\"\n  syntax:\n    content: public bool ThrowOnUnmappableChar;\n    return:\n      type: System.Boolean\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/DllImportAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.DllImportAttribute.Value\n  commentId: P:System.Runtime.InteropServices.DllImportAttribute.Value\n  id: Value\n  parent: System.Runtime.InteropServices.DllImportAttribute\n  langs:\n  - csharp\n  name: Value\n  nameWithType: DllImportAttribute.Value\n  fullName: DllImportAttribute.Value\n  type: Property\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Gets the name of the DLL file that contains the entry point.\n  remarks: You can provide a full or relative path. If you provide no path, the DLL must be in the current path at run time, unless the DLL is loaded by some other means. Be aware, however, that using a fully qualified path can introduce inaccuracy if the DLL is moved.\n  syntax:\n    content: public string Value { get; }\n    return:\n      type: System.String\n      description: The name of the DLL file that contains the entry point.\n  overload: System.Runtime.InteropServices.DllImportAttribute.Value*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/DllImportAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  nameWithType: Attribute\n  fullName: System.Attribute\n- uid: System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)\n  parent: System.Runtime.InteropServices.DllImportAttribute\n  isExternal: false\n  name: DllImportAttribute(String)\n  nameWithType: DllImportAttribute.DllImportAttribute(String)\n  fullName: DllImportAttribute.DllImportAttribute(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Runtime.InteropServices.DllImportAttribute.BestFitMapping\n  parent: System.Runtime.InteropServices.DllImportAttribute\n  isExternal: false\n  name: BestFitMapping\n  nameWithType: DllImportAttribute.BestFitMapping\n  fullName: DllImportAttribute.BestFitMapping\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.InteropServices.DllImportAttribute.CallingConvention\n  parent: System.Runtime.InteropServices.DllImportAttribute\n  isExternal: false\n  name: CallingConvention\n  nameWithType: DllImportAttribute.CallingConvention\n  fullName: DllImportAttribute.CallingConvention\n- uid: System.Runtime.InteropServices.CallingConvention\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: CallingConvention\n  nameWithType: CallingConvention\n  fullName: System.Runtime.InteropServices.CallingConvention\n- uid: System.Runtime.InteropServices.DllImportAttribute.CharSet\n  parent: System.Runtime.InteropServices.DllImportAttribute\n  isExternal: false\n  name: CharSet\n  nameWithType: DllImportAttribute.CharSet\n  fullName: DllImportAttribute.CharSet\n- uid: System.Runtime.InteropServices.CharSet\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: CharSet\n  nameWithType: CharSet\n  fullName: System.Runtime.InteropServices.CharSet\n- uid: System.Runtime.InteropServices.DllImportAttribute.EntryPoint\n  parent: System.Runtime.InteropServices.DllImportAttribute\n  isExternal: false\n  name: EntryPoint\n  nameWithType: DllImportAttribute.EntryPoint\n  fullName: DllImportAttribute.EntryPoint\n- uid: System.Runtime.InteropServices.DllImportAttribute.ExactSpelling\n  parent: System.Runtime.InteropServices.DllImportAttribute\n  isExternal: false\n  name: ExactSpelling\n  nameWithType: DllImportAttribute.ExactSpelling\n  fullName: DllImportAttribute.ExactSpelling\n- uid: System.Runtime.InteropServices.DllImportAttribute.PreserveSig\n  parent: System.Runtime.InteropServices.DllImportAttribute\n  isExternal: false\n  name: PreserveSig\n  nameWithType: DllImportAttribute.PreserveSig\n  fullName: DllImportAttribute.PreserveSig\n- uid: System.Runtime.InteropServices.DllImportAttribute.SetLastError\n  parent: System.Runtime.InteropServices.DllImportAttribute\n  isExternal: false\n  name: SetLastError\n  nameWithType: DllImportAttribute.SetLastError\n  fullName: DllImportAttribute.SetLastError\n- uid: System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar\n  parent: System.Runtime.InteropServices.DllImportAttribute\n  isExternal: false\n  name: ThrowOnUnmappableChar\n  nameWithType: DllImportAttribute.ThrowOnUnmappableChar\n  fullName: DllImportAttribute.ThrowOnUnmappableChar\n- uid: System.Runtime.InteropServices.DllImportAttribute.Value\n  parent: System.Runtime.InteropServices.DllImportAttribute\n  isExternal: false\n  name: Value\n  nameWithType: DllImportAttribute.Value\n  fullName: DllImportAttribute.Value\n- uid: System.Runtime.InteropServices.DllImportAttribute.#ctor*\n  parent: System.Runtime.InteropServices.DllImportAttribute\n  isExternal: false\n  name: DllImportAttribute\n  nameWithType: DllImportAttribute.DllImportAttribute\n  fullName: DllImportAttribute.DllImportAttribute\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/DllImportAttribute.xml\n- uid: System.Runtime.InteropServices.DllImportAttribute.Value*\n  parent: System.Runtime.InteropServices.DllImportAttribute\n  isExternal: false\n  name: Value\n  nameWithType: DllImportAttribute.Value\n  fullName: DllImportAttribute.Value\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/DllImportAttribute.xml\n- uid: System.Attribute.Equals(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Attribute.Equals(Object)\n  fullName: Attribute.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Attribute.GetHashCode\n  parent: System.Attribute\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Attribute.GetHashCode()\n  fullName: Attribute.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type)\n  fullName: Attribute.GetCustomAttribute(Module, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type)\n  fullName: Attribute.GetCustomAttributes(Module, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module)\n  nameWithType: Attribute.GetCustomAttributes(Module)\n  fullName: Attribute.GetCustomAttributes(Module)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo)\n  fullName: Attribute.GetCustomAttributes(MemberInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly)\n  nameWithType: Attribute.GetCustomAttributes(Assembly)\n  fullName: Attribute.GetCustomAttributes(Assembly)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Attribute.IsDefaultAttribute\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefaultAttribute()\n  nameWithType: Attribute.IsDefaultAttribute()\n  fullName: Attribute.IsDefaultAttribute()\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Module, Type, Boolean)\n  fullName: Attribute.IsDefined(Module, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Assembly, Type, Boolean)\n  fullName: Attribute.IsDefined(Assembly, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type)\n  fullName: Attribute.IsDefined(MemberInfo, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type)\n  nameWithType: Attribute.IsDefined(Module, Type)\n  fullName: Attribute.IsDefined(Module, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type)\n  nameWithType: Attribute.IsDefined(Assembly, Type)\n  fullName: Attribute.IsDefined(Assembly, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type)\n  fullName: Attribute.IsDefined(ParameterInfo, Type)\n- uid: System.Attribute.Match(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Match(Object)\n  nameWithType: Attribute.Match(Object)\n  fullName: Attribute.Match(Object)\n- uid: System.Attribute.TypeId\n  parent: System.Attribute\n  isExternal: false\n  name: TypeId\n  nameWithType: Attribute.TypeId\n  fullName: Attribute.TypeId\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfoCount(UInt32)\n  nameWithType: Attribute._Attribute.GetTypeInfoCount(UInt32)\n  fullName: Attribute._Attribute.GetTypeInfoCount(UInt32)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n"}