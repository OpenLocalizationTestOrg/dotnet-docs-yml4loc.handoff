{"nodes":[{"content":"Represents a binding between an <xref href=\"System.Windows.Input.InputGesture\"></xref> and a command. The command is potentially a <xref href=\"System.Windows.Input.RoutedCommand\"></xref>.","nodes":[{"pos":[0,187],"content":"Represents a binding between an <xref href=\"System.Windows.Input.InputGesture\"></xref> and a command. The command is potentially a <xref href=\"System.Windows.Input.RoutedCommand\"></xref>.","nodes":[{"content":"Represents a binding between an <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.InputGesture\"&gt;&lt;/xref&gt;</ph> and a command.","pos":[0,101],"source":"Represents a binding between an <xref href=\"System.Windows.Input.InputGesture\"></xref> and a command."},{"content":"The command is potentially a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;&lt;/xref&gt;</ph>.","pos":[102,187],"source":" The command is potentially a <xref href=\"System.Windows.Input.RoutedCommand\"></xref>."}]}],"pos":[1285,1473],"yaml":true},{"content":"You can specify that user input invokes a command by creating a <xref:System.Windows.Input.InputBinding>. When the user performs the specified input, the <xref:System.Windows.Input.ICommand> that is set to the <xref:System.Windows.Input.InputBinding.Command%2A> property is executed.  \n  \n You can specify that the <xref:System.Windows.Input.InputBinding> invokes a command that is defined on an object by creating a binding on the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties. This enables you to define a custom command and associate it with user input. For more information, see the second example in the Examples section.  \n  \n An <xref:System.Windows.Input.InputBinding> can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> with the <xref:System.Windows.Input.CommandManager>.  \n  \n The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (there is a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding>-derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>. The typical property in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] programming that is set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and takes one or more <xref:System.Windows.Input.InputBinding> objects as values is the <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=fullName> property.  \n  \n<a name=\"xamlObjectElementUsage_InputBinding\"></a>   \n## XAML Object Element Usage  \n \\<*inputBindingDerivedClassâ€¦/*>  \n  \n<a name=\"xamlValues_InputBinding\"></a>   \n## XAML Values  \n `inputBindingDerivedClass`  \n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.","nodes":[{"pos":[0,283],"content":"You can specify that user input invokes a command by creating a <xref:System.Windows.Input.InputBinding>. When the user performs the specified input, the <xref:System.Windows.Input.ICommand> that is set to the <xref:System.Windows.Input.InputBinding.Command%2A> property is executed.","nodes":[{"content":"You can specify that user input invokes a command by creating a <xref:System.Windows.Input.InputBinding>. When the user performs the specified input, the <xref:System.Windows.Input.ICommand> that is set to the <xref:System.Windows.Input.InputBinding.Command%2A> property is executed.","pos":[0,283],"nodes":[{"content":"You can specify that user input invokes a command by creating a <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.","pos":[0,105],"source":"You can specify that user input invokes a command by creating a <xref:System.Windows.Input.InputBinding>."},{"content":"When the user performs the specified input, the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommand&gt;</ph> that is set to the <ph id=\"ph2\">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph> property is executed.","pos":[106,283],"source":" When the user performs the specified input, the <xref:System.Windows.Input.ICommand> that is set to the <xref:System.Windows.Input.InputBinding.Command%2A> property is executed."}]}]},{"pos":[290,768],"content":"You can specify that the <xref:System.Windows.Input.InputBinding> invokes a command that is defined on an object by creating a binding on the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties. This enables you to define a custom command and associate it with user input. For more information, see the second example in the Examples section.","nodes":[{"content":"You can specify that the <xref:System.Windows.Input.InputBinding> invokes a command that is defined on an object by creating a binding on the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties. This enables you to define a custom command and associate it with user input. For more information, see the second example in the Examples section.","pos":[0,478],"nodes":[{"content":"You can specify that the <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> invokes a command that is defined on an object by creating a binding on the <ph id=\"ph2\">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> properties.","pos":[0,330],"source":"You can specify that the <xref:System.Windows.Input.InputBinding> invokes a command that is defined on an object by creating a binding on the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties."},{"content":"This enables you to define a custom command and associate it with user input.","pos":[331,408]},{"content":"For more information, see the second example in the Examples section.","pos":[409,478]}]}]},{"pos":[775,1018],"content":"An <xref:System.Windows.Input.InputBinding> can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> with the <xref:System.Windows.Input.CommandManager>.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> can be defined on a specific object or at the class level by registering a <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>.","pos":[0,243],"source":"An <xref:System.Windows.Input.InputBinding> can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> with the <xref:System.Windows.Input.CommandManager>."}]},{"pos":[1025,2224],"content":"The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (there is a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding>-derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>. The typical property in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] programming that is set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and takes one or more <xref:System.Windows.Input.InputBinding> objects as values is the <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=fullName> property.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class itself does not support <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage because it does not expose a public default constructor (there is a default constructor, but it is protected).","pos":[0,253],"source":"The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (there is a default constructor, but it is protected)."},{"content":"However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> with a <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage.","pos":[254,505],"source":" However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage."},{"content":"Two existing <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>-derived classes that can be instantiated in <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id=\"ph3\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> are <ph id=\"ph4\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.","pos":[506,842],"source":" Two existing <xref:System.Windows.Input.InputBinding>-derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>."},{"content":"The typical property in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> programming that is set in <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and takes one or more <ph id=\"ph3\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> objects as values is the <ph id=\"ph4\">&lt;xref:System.Windows.UIElement.InputBindings%2A?displayProperty=fullName&gt;</ph> property.","pos":[843,1199],"source":" The typical property in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] programming that is set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and takes one or more <xref:System.Windows.Input.InputBinding> objects as values is the <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=fullName> property."}]},{"pos":[2287,2312],"content":"XAML Object Element Usage","linkify":"XAML Object Element Usage","nodes":[{"content":"XAML Object Element Usage","pos":[0,25]}]},{"pos":[2316,2347],"content":"<ph id=\"ph1\">\\&lt;</ph><bpt id=\"p1\">*</bpt>inputBindingDerivedClassâ€¦/<ept id=\"p1\">*</ept><ph id=\"ph2\">&gt;</ph>","source":"\\<*inputBindingDerivedClassâ€¦/*>"},{"pos":[2398,2409],"content":"XAML Values","linkify":"XAML Values","nodes":[{"content":"XAML Values","pos":[0,11]}]},{"pos":[2413,2644],"content":"`inputBindingDerivedClass`  \n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.","nodes":[{"content":" A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.","pos":[29,231],"nodes":[{"content":"A derived class of <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.","pos":[1,189],"source":" A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>."},{"content":"See Remarks.","pos":[190,202]}]}]}],"pos":[1484,4151],"yaml":true,"extradata":"MT"},{"content":"Provides base initialization for classes derived from <xref href=\"System.Windows.Input.InputBinding\"></xref>.","nodes":[{"pos":[0,109],"content":"Provides base initialization for classes derived from <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.InputBinding\"&gt;&lt;/xref&gt;</ph>.","source":"Provides base initialization for classes derived from <xref href=\"System.Windows.Input.InputBinding\"></xref>."}],"pos":[11614,11724],"yaml":true},{"content":"<xref:System.Windows.Input.InputBinding> is not technically an abstract class, but the default constructor is deliberately protected access. This has the effect of making <xref:System.Windows.Input.InputBinding> an \"abstract\" class for [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. There are existing properties in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] that have [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usages that expect objects of type <xref:System.Windows.Input.InputBinding>, but you cannot specify an <xref:System.Windows.Input.InputBinding> instance in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. Instead, you can specify one of the device-specific <xref:System.Windows.Input.InputBinding> derived classes as values, for instance <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.","nodes":[{"pos":[0,911],"content":"<xref:System.Windows.Input.InputBinding> is not technically an abstract class, but the default constructor is deliberately protected access. This has the effect of making <xref:System.Windows.Input.InputBinding> an \"abstract\" class for [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. There are existing properties in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] that have [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usages that expect objects of type <xref:System.Windows.Input.InputBinding>, but you cannot specify an <xref:System.Windows.Input.InputBinding> instance in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. Instead, you can specify one of the device-specific <xref:System.Windows.Input.InputBinding> derived classes as values, for instance <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> is not technically an abstract class, but the default constructor is deliberately protected access.","pos":[0,140],"source":"<xref:System.Windows.Input.InputBinding> is not technically an abstract class, but the default constructor is deliberately protected access."},{"content":"This has the effect of making <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> an \"abstract\" class for <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[141,298],"source":" This has the effect of making <xref:System.Windows.Input.InputBinding> an \"abstract\" class for [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]."},{"content":"There are existing properties in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> that have <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usages that expect objects of type <ph id=\"ph3\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>, but you cannot specify an <ph id=\"ph4\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> instance in <ph id=\"ph5\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[299,694],"source":" There are existing properties in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] that have [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usages that expect objects of type <xref:System.Windows.Input.InputBinding>, but you cannot specify an <xref:System.Windows.Input.InputBinding> instance in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]."},{"content":"Instead, you can specify one of the device-specific <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes as values, for instance <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.","pos":[695,911],"source":" Instead, you can specify one of the device-specific <xref:System.Windows.Input.InputBinding> derived classes as values, for instance <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>."}]}],"pos":[11735,12647],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Input.InputBinding\"></xref> class with the specified command and input gesture.","nodes":[{"pos":[0,140],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.InputBinding\"&gt;&lt;/xref&gt;</ph> class with the specified command and input gesture.","source":"Initializes a new instance of the <xref href=\"System.Windows.Input.InputBinding\"></xref> class with the specified command and input gesture."}],"pos":[13962,14103],"yaml":true},{"content":"If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands. Instead, you will either use constructors of derived classes (<xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>), or you will use this constructor as the base instantiation of a custom class. Although the <xref:System.Windows.Input.InputBinding> class supports different input devices in principle, in practice you must choose which device the input binding will represent. You only can set only one <xref:System.Windows.Input.InputBinding.Gesture%2A> value on the input binding, and gestures are device-specific.","nodes":[{"pos":[0,704],"content":"If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands. Instead, you will either use constructors of derived classes (<xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>), or you will use this constructor as the base instantiation of a custom class. Although the <xref:System.Windows.Input.InputBinding> class supports different input devices in principle, in practice you must choose which device the input binding will represent. You only can set only one <xref:System.Windows.Input.InputBinding.Gesture%2A> value on the input binding, and gestures are device-specific.","nodes":[{"content":"If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands. Instead, you will either use constructors of derived classes (<xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>), or you will use this constructor as the base instantiation of a custom class. Although the <xref:System.Windows.Input.InputBinding> class supports different input devices in principle, in practice you must choose which device the input binding will represent. You only can set only one <xref:System.Windows.Input.InputBinding.Gesture%2A> value on the input binding, and gestures are device-specific.","pos":[0,704],"nodes":[{"content":"If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands.","pos":[0,156]},{"content":"Instead, you will either use constructors of derived classes (<ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>), or you will use this constructor as the base instantiation of a custom class.","pos":[157,382],"source":" Instead, you will either use constructors of derived classes (<xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>), or you will use this constructor as the base instantiation of a custom class."},{"content":"Although the <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class supports different input devices in principle, in practice you must choose which device the input binding will represent.","pos":[383,564],"source":" Although the <xref:System.Windows.Input.InputBinding> class supports different input devices in principle, in practice you must choose which device the input binding will represent."},{"content":"You only can set only one <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;</ph> value on the input binding, and gestures are device-specific.","pos":[565,704],"source":" You only can set only one <xref:System.Windows.Input.InputBinding.Gesture%2A> value on the input binding, and gestures are device-specific."}]}]}],"pos":[14114,14819],"yaml":true,"extradata":"MT"},{"content":"The command to associate with <code>gesture</code>.","nodes":[{"pos":[0,51],"content":"The command to associate with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">gesture</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The command to associate with <code>gesture</code>."}],"pos":[15641,15693],"yaml":true},{"content":"The input gesture to associate with <code>command</code>.","nodes":[{"pos":[0,57],"content":"The input gesture to associate with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">command</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The input gesture to associate with <code>command</code>."}],"pos":[15776,15834],"yaml":true},{"content":"<code>command</code> or <code>gesture</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;command&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;gesture&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>command</code> or <code>gesture</code> is `null`."}],"pos":[16003,16059],"yaml":true},{"content":"Copies the base (non-animated) values of the properties of the specified object.","nodes":[{"pos":[0,80],"content":"Copies the base (non-animated) values of the properties of the specified object.","nodes":[{"content":"Copies the base (non-animated) values of the properties of the specified object.","pos":[0,80]}]}],"pos":[17141,17222],"yaml":true},{"content":"The object to clone.","nodes":[{"pos":[0,20],"content":"The object to clone.","nodes":[{"content":"The object to clone.","pos":[0,20]}]}],"pos":[17421,17442],"yaml":true},{"content":"Copies the current values of the properties of the specified object.","nodes":[{"pos":[0,68],"content":"Copies the current values of the properties of the specified object.","nodes":[{"content":"Copies the current values of the properties of the specified object.","pos":[0,68]}]}],"pos":[18604,18673],"yaml":true},{"content":"The object to clone.","nodes":[{"pos":[0,20],"content":"The object to clone.","nodes":[{"content":"The object to clone.","pos":[0,20]}]}],"pos":[18884,18905],"yaml":true},{"content":"Gets or sets the <xref href=\"System.Windows.Input.ICommand\"></xref> associated with this input binding.","nodes":[{"pos":[0,103],"content":"Gets or sets the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.ICommand\"&gt;&lt;/xref&gt;</ph> associated with this input binding.","source":"Gets or sets the <xref href=\"System.Windows.Input.ICommand\"></xref> associated with this input binding."}],"pos":[19864,19968],"yaml":true},{"content":"The <xref:System.Windows.Input.InputBinding> class does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (it has a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore, can use properties that are inherited from <xref:System.Windows.Input.InputBinding>. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties with [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usages are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.  \n  \n <xref:System.Windows.Input.ICommand> references a type converter that enables certain preexisting <xref:System.Windows.Input.ICommand> implementations to specify values in the form of a string. This type conversion behavior sets the attribute value form of this property. You can also bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object. This enables you to define a custom command and associate it with user input. For more information, see the second example in <xref:System.Windows.Input.InputBinding>.  \n  \n<a name=\"xamlAttributeUsage_Command\"></a>   \n## XAML Attribute Usage  \n <`inputBindingDerivedClass` `Command`=\"<xref:System.Windows.Input.ICommand>\"/>  \n  \n<a name=\"xamlPropertyElementUsage_Command\"></a>   \n## XAML Property Element Usage  \n  \n```  \n<inputBindingDerivedClass>  \n  <inputBindingDerivedClass.Command>  \n    <iCommandImplementation/>  \n  </inputBindingDerivedClass.Command>  \n</inputBindingDerivedClass>  \n```  \n  \n<a name=\"xamlValues_Command\"></a>   \n## XAML Values  \n `inputBindingDerivedClass`  \n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.  \n  \n `iCommandImplementation`  \n An object implementation of <xref:System.Windows.Input.ICommand> that supports object element syntax (has a public default constructor).","nodes":[{"pos":[0,747],"content":"The <xref:System.Windows.Input.InputBinding> class does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (it has a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore, can use properties that are inherited from <xref:System.Windows.Input.InputBinding>. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties with [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usages are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class does not support <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage because it does not expose a public default constructor (it has a default constructor, but it is protected).","pos":[0,244],"source":"The <xref:System.Windows.Input.InputBinding> class does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (it has a default constructor, but it is protected)."},{"content":"However, derived classes can expose a public constructor and therefore, can use properties that are inherited from <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.","pos":[245,401],"source":" However, derived classes can expose a public constructor and therefore, can use properties that are inherited from <xref:System.Windows.Input.InputBinding>."},{"content":"Two existing <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes that can be instantiated in <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties with <ph id=\"ph3\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usages are <ph id=\"ph4\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.","pos":[402,747],"source":" Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties with [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usages are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>."}]},{"pos":[754,1476],"content":"<xref:System.Windows.Input.ICommand> references a type converter that enables certain preexisting <xref:System.Windows.Input.ICommand> implementations to specify values in the form of a string. This type conversion behavior sets the attribute value form of this property. You can also bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object. This enables you to define a custom command and associate it with user input. For more information, see the second example in <xref:System.Windows.Input.InputBinding>.","nodes":[{"content":"<xref:System.Windows.Input.ICommand> references a type converter that enables certain preexisting <xref:System.Windows.Input.ICommand> implementations to specify values in the form of a string. This type conversion behavior sets the attribute value form of this property. You can also bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object. This enables you to define a custom command and associate it with user input. For more information, see the second example in <xref:System.Windows.Input.InputBinding>.","pos":[0,722],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommand&gt;</ph> references a type converter that enables certain preexisting <ph id=\"ph2\">&lt;xref:System.Windows.Input.ICommand&gt;</ph> implementations to specify values in the form of a string.","pos":[0,193],"source":"<xref:System.Windows.Input.ICommand> references a type converter that enables certain preexisting <xref:System.Windows.Input.ICommand> implementations to specify values in the form of a string."},{"content":"This type conversion behavior sets the attribute value form of this property.","pos":[194,271]},{"content":"You can also bind the <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> properties to an <ph id=\"ph4\">&lt;xref:System.Windows.Input.ICommand&gt;</ph> that is defined on an object.","pos":[272,554],"source":" You can also bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object."},{"content":"This enables you to define a custom command and associate it with user input.","pos":[555,632]},{"content":"For more information, see the second example in <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.","pos":[633,722],"source":" For more information, see the second example in <xref:System.Windows.Input.InputBinding>."}]}]},{"pos":[1530,1550],"content":"XAML Attribute Usage","linkify":"XAML Attribute Usage","nodes":[{"content":"XAML Attribute Usage","pos":[0,20]}]},{"pos":[1554,1632],"content":"<ph id=\"ph1\">&lt;</ph><ph id=\"ph2\">`inputBindingDerivedClass`</ph> <ph id=\"ph3\">`Command`</ph>=\"<ph id=\"ph4\">&lt;xref:System.Windows.Input.ICommand&gt;</ph>\"/&gt;","source":"<`inputBindingDerivedClass` `Command`=\"<xref:System.Windows.Input.ICommand>\"/>"},{"pos":[1692,1719],"content":"XAML Property Element Usage","linkify":"XAML Property Element Usage","nodes":[{"content":"XAML Property Element Usage","pos":[0,27]}]},{"pos":[1950,1961],"content":"XAML Values","linkify":"XAML Values","nodes":[{"content":"XAML Values","pos":[0,11]}]},{"pos":[1965,2196],"content":"`inputBindingDerivedClass`  \n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.","nodes":[{"content":" A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.","pos":[29,231],"nodes":[{"content":"A derived class of <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.","pos":[1,189],"source":" A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>."},{"content":"See Remarks.","pos":[190,202]}]}]},{"pos":[2203,2367],"content":"`iCommandImplementation`  \n An object implementation of <xref:System.Windows.Input.ICommand> that supports object element syntax (has a public default constructor).","nodes":[{"content":"An object implementation of <ph id=\"ph1\">&lt;xref:System.Windows.Input.ICommand&gt;</ph> that supports object element syntax (has a public default constructor).","pos":[28,164],"source":" An object implementation of <xref:System.Windows.Input.ICommand> that supports object element syntax (has a public default constructor)."}]}],"pos":[19979,22382],"yaml":true,"extradata":"MT"},{"content":"The associated command.","nodes":[{"pos":[0,23],"content":"The associated command.","nodes":[{"content":"The associated command.","pos":[0,23]}]}],"pos":[23740,23764],"yaml":true},{"content":"The <xref href=\"System.Windows.Input.InputBinding.Command\"></xref> value is `null`.","nodes":[{"pos":[0,83],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.InputBinding.Command\"&gt;&lt;/xref&gt;</ph> value is <ph id=\"ph2\">`null`</ph>.","source":"The <xref href=\"System.Windows.Input.InputBinding.Command\"></xref> value is `null`."}],"pos":[23935,24019],"yaml":true},{"content":"Gets or sets the command-specific data for a particular command.","nodes":[{"pos":[0,64],"content":"Gets or sets the command-specific data for a particular command.","nodes":[{"content":"Gets or sets the command-specific data for a particular command.","pos":[0,64]}]}],"pos":[25086,25151],"yaml":true},{"content":"The <xref:System.Windows.Input.InputBinding.CommandParameter%2A> property is used to pass specific information to the command when it is executed. The type of the data is defined by the command. Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.  \n  \n If the command that an input binding is associated with is a <xref:System.Windows.Input.RoutedCommand>, the <xref:System.Windows.Input.InputBinding.CommandParameter%2A> of the input binding is passed to the <xref:System.Windows.Input.RoutedCommand> handlers through the <xref:System.Windows.Input.ExecutedRoutedEventArgs> and the <xref:System.Windows.Input.CanExecuteRoutedEventArgs> event data when the command is processed.  \n  \n The data type and purpose of the command parameter are defined differently for each command and can be `null`. You can bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object. This enables you to define a custom command and associate it with user input. For more information, see the second example in <xref:System.Windows.Input.InputBinding>.  \n  \n The <xref:System.Windows.Input.InputBinding> class does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (it has a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore, can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.  \n  \n<a name=\"xamlAttributeUsage_CommandParameter\"></a>   \n## XAML Attribute Usage  \n  \n```  \n<inputBindingDerivedClass CommandParameter=\"commandParameterString\"/>  \n```  \n  \n<a name=\"xamlPropertyElementUsage_CommandParameter\"></a>   \n## XAML Property Element Usage  \n  \n```  \n<inputBindingDerivedClass>  \n  <inputBindingDerivedClass.CommandParameter>  \n    <commandParameterObject/>  \n  </inputBindingDerivedClass.CommandParameter>  \n</inputBindingDerivedClass>  \n```  \n  \n<a name=\"xamlValues_CommandParameter\"></a>   \n## XAML Values  \n `inputBindingDerivedClass`  \n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.  \n  \n `commandParameterString`  \n A string that is processed by a particular command. Strings are the common type used for command parameters because they can be easily set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with. Many commands do not expect parameters.  \n  \n `commandParameterObject`  \n An object that is processed by a particular command. All existing [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] commands use strings. Therefore, this property element syntax is only relevant for custom command scenarios. In order to support this syntax, the `commandParameterObject` object must also support object element syntax (must have a public default constructor).","nodes":[{"pos":[0,309],"content":"The <xref:System.Windows.Input.InputBinding.CommandParameter%2A> property is used to pass specific information to the command when it is executed. The type of the data is defined by the command. Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.","nodes":[{"content":"The <xref:System.Windows.Input.InputBinding.CommandParameter%2A> property is used to pass specific information to the command when it is executed. The type of the data is defined by the command. Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.","pos":[0,309],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph> property is used to pass specific information to the command when it is executed.","pos":[0,146],"source":"The <xref:System.Windows.Input.InputBinding.CommandParameter%2A> property is used to pass specific information to the command when it is executed."},{"content":"The type of the data is defined by the command.","pos":[147,194]},{"content":"Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.","pos":[195,309]}]}]},{"pos":[316,741],"content":"If the command that an input binding is associated with is a <xref:System.Windows.Input.RoutedCommand>, the <xref:System.Windows.Input.InputBinding.CommandParameter%2A> of the input binding is passed to the <xref:System.Windows.Input.RoutedCommand> handlers through the <xref:System.Windows.Input.ExecutedRoutedEventArgs> and the <xref:System.Windows.Input.CanExecuteRoutedEventArgs> event data when the command is processed.","nodes":[{"content":"If the command that an input binding is associated with is a <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, the <ph id=\"ph2\">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph> of the input binding is passed to the <ph id=\"ph3\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> handlers through the <ph id=\"ph4\">&lt;xref:System.Windows.Input.ExecutedRoutedEventArgs&gt;</ph> and the <ph id=\"ph5\">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs&gt;</ph> event data when the command is processed.","pos":[0,425],"source":"If the command that an input binding is associated with is a <xref:System.Windows.Input.RoutedCommand>, the <xref:System.Windows.Input.InputBinding.CommandParameter%2A> of the input binding is passed to the <xref:System.Windows.Input.RoutedCommand> handlers through the <xref:System.Windows.Input.ExecutedRoutedEventArgs> and the <xref:System.Windows.Input.CanExecuteRoutedEventArgs> event data when the command is processed."}]},{"pos":[748,1304],"content":"The data type and purpose of the command parameter are defined differently for each command and can be `null`. You can bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object. This enables you to define a custom command and associate it with user input. For more information, see the second example in <xref:System.Windows.Input.InputBinding>.","nodes":[{"content":"The data type and purpose of the command parameter are defined differently for each command and can be <ph id=\"ph1\">`null`</ph>.","pos":[0,110],"source":"The data type and purpose of the command parameter are defined differently for each command and can be `null`."},{"content":"You can bind the <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> properties to an <ph id=\"ph4\">&lt;xref:System.Windows.Input.ICommand&gt;</ph> that is defined on an object.","pos":[111,388],"source":" You can bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object."},{"content":"This enables you to define a custom command and associate it with user input.","pos":[389,466]},{"content":"For more information, see the second example in <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.","pos":[467,556],"source":" For more information, see the second example in <xref:System.Windows.Input.InputBinding>."}]},{"pos":[1311,2122],"content":"The <xref:System.Windows.Input.InputBinding> class does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (it has a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore, can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class does not support <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage because it does not expose a public default constructor (it has a default constructor, but it is protected).","pos":[0,244],"source":"The <xref:System.Windows.Input.InputBinding> class does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (it has a default constructor, but it is protected)."},{"content":"However, derived classes can expose a public constructor and therefore, can set properties that are inherited from <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> with <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage.","pos":[245,474],"source":" However, derived classes can expose a public constructor and therefore, can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage."},{"content":"Two existing <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes that can be instantiated in <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id=\"ph3\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> are <ph id=\"ph4\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.","pos":[475,811],"source":" Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>."}]},{"pos":[2185,2205],"content":"XAML Attribute Usage","linkify":"XAML Attribute Usage","nodes":[{"content":"XAML Attribute Usage","pos":[0,20]}]},{"pos":[2361,2388],"content":"XAML Property Element Usage","linkify":"XAML Property Element Usage","nodes":[{"content":"XAML Property Element Usage","pos":[0,27]}]},{"pos":[2646,2657],"content":"XAML Values","linkify":"XAML Values","nodes":[{"content":"XAML Values","pos":[0,11]}]},{"pos":[2661,2892],"content":"`inputBindingDerivedClass`  \n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.","nodes":[{"content":" A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.","pos":[29,231],"nodes":[{"content":"A derived class of <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.","pos":[1,189],"source":" A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>."},{"content":"See Remarks.","pos":[190,202]}]}]},{"pos":[2899,3311],"content":"`commandParameterString`  \n A string that is processed by a particular command. Strings are the common type used for command parameters because they can be easily set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with. Many commands do not expect parameters.","nodes":[{"content":" A string that is processed by a particular command. Strings are the common type used for command parameters because they can be easily set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with. Many commands do not expect parameters.","pos":[27,412],"nodes":[{"content":"A string that is processed by a particular command.","pos":[1,52]},{"content":"Strings are the common type used for command parameters because they can be easily set in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.","pos":[53,205],"source":" Strings are the common type used for command parameters because they can be easily set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]."},{"content":"For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with.","pos":[206,345]},{"content":"Many commands do not expect parameters.","pos":[346,385]}]}]},{"pos":[3318,3743],"content":"`commandParameterObject`  \n An object that is processed by a particular command. All existing [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] commands use strings. Therefore, this property element syntax is only relevant for custom command scenarios. In order to support this syntax, the `commandParameterObject` object must also support object element syntax (must have a public default constructor).","nodes":[{"content":" An object that is processed by a particular command. All existing [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] commands use strings. Therefore, this property element syntax is only relevant for custom command scenarios. In order to support this syntax, the `commandParameterObject` object must also support object element syntax (must have a public default constructor).","pos":[27,425],"nodes":[{"content":"An object that is processed by a particular command.","pos":[1,53]},{"content":"All existing <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> commands use strings.","pos":[54,160],"source":" All existing [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] commands use strings."},{"content":"Therefore, this property element syntax is only relevant for custom command scenarios.","pos":[161,247]},{"content":"In order to support this syntax, the <ph id=\"ph1\">`commandParameterObject`</ph> object must also support object element syntax (must have a public default constructor).","pos":[248,398],"source":" In order to support this syntax, the `commandParameterObject` object must also support object element syntax (must have a public default constructor)."}]}]}],"pos":[25162,28951],"yaml":true,"extradata":"MT"},{"content":"The command-specific data. The default is `null`.","nodes":[{"pos":[0,49],"content":"The command-specific data. The default is `null`.","nodes":[{"content":"The command-specific data.","pos":[0,26]},{"content":"The default is <ph id=\"ph1\">`null`</ph>.","pos":[27,49],"source":" The default is `null`."}]}],"pos":[29076,29126],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.Input.InputBinding.CommandParameter\"></xref> dependency property.","nodes":[{"pos":[0,107],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.InputBinding.CommandParameter\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.Input.InputBinding.CommandParameter\"></xref> dependency property."}],"pos":[30201,30309],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.Input.InputBinding.Command\"></xref> dependency property.","nodes":[{"pos":[0,98],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.InputBinding.Command\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.Input.InputBinding.Command\"></xref> dependency property."}],"pos":[31452,31551],"yaml":true},{"content":"Gets or sets the target element of the command.","nodes":[{"pos":[0,47],"content":"Gets or sets the target element of the command.","nodes":[{"content":"Gets or sets the target element of the command.","pos":[0,47]}]}],"pos":[32676,32724],"yaml":true},{"content":"In the [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on an <xref:System.Windows.Input.ICommandSource> object is applicable only when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>. If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on an <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.  \n  \n When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised. If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property is not set, the element with keyboard focus is used as the target.  \n  \n The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage, because it does not expose a public default constructor (there is a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.  \n  \n<a name=\"xamlAttributeUsage_CommandTarget\"></a>   \n## XAML Attribute Usage  \n  \n```  \n<inputBindingDerivedClass CommandTarget=\"bindingToTarget\"/>  \n```  \n  \n<a name=\"xamlValues_CommandTarget\"></a>   \n## XAML Values  \n `inputBindingDerivedClass`  \n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.  \n  \n `bindingToTarget`  \n A string that uses a type of binding syntax that can return an object reference to an existing named element. See Remarks.","nodes":[{"pos":[0,557],"content":"In the [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on an <xref:System.Windows.Input.ICommandSource> object is applicable only when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>. If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on an <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.","nodes":[{"content":"In the <ph id=\"ph1\">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> commanding system, the <ph id=\"ph2\">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> property on an <ph id=\"ph3\">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> object is applicable only when the <ph id=\"ph4\">&lt;xref:System.Windows.Input.ICommand&gt;</ph> is a <ph id=\"ph5\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.","pos":[0,323],"source":"In the [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on an <xref:System.Windows.Input.ICommandSource> object is applicable only when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> is set on an <ph id=\"ph2\">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> and the corresponding command is not a <ph id=\"ph3\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, the command target is ignored.","pos":[324,557],"source":" If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on an <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored."}]},{"pos":[564,939],"content":"When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised. If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property is not set, the element with keyboard focus is used as the target.","nodes":[{"content":"When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised. If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property is not set, the element with keyboard focus is used as the target.","pos":[0,375],"nodes":[{"content":"When used with a <ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, the command target is the object on which the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> events are raised.","pos":[0,234],"source":"When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> property is not set, the element with keyboard focus is used as the target.","pos":[235,375],"source":" If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property is not set, the element with keyboard focus is used as the target."}]}]},{"pos":[946,1768],"content":"The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage, because it does not expose a public default constructor (there is a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class itself does not support <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).","pos":[0,254],"source":"The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage, because it does not expose a public default constructor (there is a default constructor, but it is protected)."},{"content":"However, derived classes can expose a public constructor and therefore can set properties that are inherited from <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> with a <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage.","pos":[255,485],"source":" However, derived classes can expose a public constructor and therefore can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage."},{"content":"Two existing <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes that can be instantiated in <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id=\"ph3\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> are <ph id=\"ph4\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.","pos":[486,822],"source":" Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>."}]},{"pos":[1828,1848],"content":"XAML Attribute Usage","linkify":"XAML Attribute Usage","nodes":[{"content":"XAML Attribute Usage","pos":[0,20]}]},{"pos":[1977,1988],"content":"XAML Values","linkify":"XAML Values","nodes":[{"content":"XAML Values","pos":[0,11]}]},{"pos":[1992,2223],"content":"`inputBindingDerivedClass`  \n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.","nodes":[{"content":" A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.","pos":[29,231],"nodes":[{"content":"A derived class of <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.","pos":[1,189],"source":" A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>."},{"content":"See Remarks.","pos":[190,202]}]}]},{"pos":[2230,2373],"content":"`bindingToTarget`  \n A string that uses a type of binding syntax that can return an object reference to an existing named element. See Remarks.","nodes":[{"content":" A string that uses a type of binding syntax that can return an object reference to an existing named element. See Remarks.","pos":[20,143],"nodes":[{"content":"A string that uses a type of binding syntax that can return an object reference to an existing named element.","pos":[1,110]},{"content":"See Remarks.","pos":[111,123]}]}]}],"pos":[32735,35136],"yaml":true,"extradata":"MT"},{"content":"The target of the command. The default is `null`.","nodes":[{"pos":[0,49],"content":"The target of the command. The default is `null`.","nodes":[{"content":"The target of the command.","pos":[0,26]},{"content":"The default is <ph id=\"ph1\">`null`</ph>.","pos":[27,49],"source":" The default is `null`."}]}],"pos":[35295,35345],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.Input.InputBinding.CommandTarget\"></xref> dependency property.","nodes":[{"pos":[0,104],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.InputBinding.CommandTarget\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.Input.InputBinding.CommandTarget\"></xref> dependency property."}],"pos":[36399,36504],"yaml":true},{"content":"Creates an instance of an <xref href=\"System.Windows.Input.InputBinding\"></xref>.","nodes":[{"pos":[0,81],"content":"Creates an instance of an <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.InputBinding\"&gt;&lt;/xref&gt;</ph>.","source":"Creates an instance of an <xref href=\"System.Windows.Input.InputBinding\"></xref>."}],"pos":[37669,37751],"yaml":true},{"content":"The new object.","nodes":[{"pos":[0,15],"content":"The new object.","nodes":[{"content":"The new object.","pos":[0,15]}]}],"pos":[37928,37944],"yaml":true},{"content":"Gets or sets the <xref href=\"System.Windows.Input.InputGesture\"></xref> associated with this input binding.","nodes":[{"pos":[0,107],"content":"Gets or sets the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.InputGesture\"&gt;&lt;/xref&gt;</ph> associated with this input binding.","source":"Gets or sets the <xref href=\"System.Windows.Input.InputGesture\"></xref> associated with this input binding."}],"pos":[38900,39008],"yaml":true},{"content":"The input gesture is the action that invokes the command. Examples of input gestures in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] are <xref:System.Windows.Input.KeyGesture> and <xref:System.Windows.Input.MouseGesture>. A <xref:System.Windows.Input.KeyGesture> is a combination of a <xref:System.Windows.Input.Key> and a set of <xref:System.Windows.Input.ModifierKeys>. A <xref:System.Windows.Input.MouseGesture> is a combination of a <xref:System.Windows.Input.MouseAction> and a set of <xref:System.Windows.Input.ModifierKeys>.  \n  \n The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage, because it does not expose a public default constructor (there is a default constructor, but it is protected). However, derived classes can expose a public constructor and thus can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.  \n  \n<a name=\"xamlAttributeUsage_gesture\"></a>   \n## XAML Attribute Usage  \n <<xref:System.Windows.Input.KeyBinding> `Gesture`=\"<xref:System.Windows.Input.KeyGesture>\"/>  \n  \n \\- or -  \n  \n <<xref:System.Windows.Input.MouseBinding> `Gesture`=\"<xref:System.Windows.Input.MouseGesture>\"/>  \n  \n \\- or -  \n  \n <`inputBindingDerivedClass` `Gesture`=\"<xref:System.Windows.Input.InputGesture>\"/>  \n  \n<a name=\"xamlPropertyElementUsage_gesture\"></a>   \n## XAML Property Element Usage  \n  \n```  \n<inputBindingDerivedClass>  \n  <inputBindingDerivedClass.Gesture>  \n    <inputGestureImplementation/>  \n  </inputBindingDerivedClass.Gesture>  \n</inputBindingDerivedClass>  \n```  \n  \n<a name=\"xamlValues_gesture\"></a>   \n## XAML Values  \n `inputBindingDerivedClass`  \n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.  \n  \n `inputGestureImplementation`  \n A custom derived class of <xref:System.Windows.Input.InputGesture> that supports object element syntax.","nodes":[{"pos":[0,558],"content":"The input gesture is the action that invokes the command. Examples of input gestures in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] are <xref:System.Windows.Input.KeyGesture> and <xref:System.Windows.Input.MouseGesture>. A <xref:System.Windows.Input.KeyGesture> is a combination of a <xref:System.Windows.Input.Key> and a set of <xref:System.Windows.Input.ModifierKeys>. A <xref:System.Windows.Input.MouseGesture> is a combination of a <xref:System.Windows.Input.MouseAction> and a set of <xref:System.Windows.Input.ModifierKeys>.","nodes":[{"content":"The input gesture is the action that invokes the command.","pos":[0,57]},{"content":"Examples of input gestures in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> are <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph>.","pos":[58,248],"source":" Examples of input gestures in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] are <xref:System.Windows.Input.KeyGesture> and <xref:System.Windows.Input.MouseGesture>."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> is a combination of a <ph id=\"ph2\">&lt;xref:System.Windows.Input.Key&gt;</ph> and a set of <ph id=\"ph3\">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.","pos":[249,398],"source":" A <xref:System.Windows.Input.KeyGesture> is a combination of a <xref:System.Windows.Input.Key> and a set of <xref:System.Windows.Input.ModifierKeys>."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph> is a combination of a <ph id=\"ph2\">&lt;xref:System.Windows.Input.MouseAction&gt;</ph> and a set of <ph id=\"ph3\">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.","pos":[399,558],"source":" A <xref:System.Windows.Input.MouseGesture> is a combination of a <xref:System.Windows.Input.MouseAction> and a set of <xref:System.Windows.Input.ModifierKeys>."}]},{"pos":[565,1382],"content":"The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage, because it does not expose a public default constructor (there is a default constructor, but it is protected). However, derived classes can expose a public constructor and thus can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class itself does not support <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).","pos":[0,254],"source":"The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage, because it does not expose a public default constructor (there is a default constructor, but it is protected)."},{"content":"However, derived classes can expose a public constructor and thus can set properties that are inherited from <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> with a <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage.","pos":[255,480],"source":" However, derived classes can expose a public constructor and thus can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage."},{"content":"Two existing <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes that can be instantiated in <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id=\"ph3\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> are <ph id=\"ph4\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.","pos":[481,817],"source":" Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>."}]},{"pos":[1436,1456],"content":"XAML Attribute Usage","linkify":"XAML Attribute Usage","nodes":[{"content":"XAML Attribute Usage","pos":[0,20]}]},{"pos":[1460,1552],"content":"<ph id=\"ph1\">&lt;</ph><ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> <ph id=\"ph3\">`Gesture`</ph>=\"<ph id=\"ph4\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>\"/&gt;","source":"<<xref:System.Windows.Input.KeyBinding> `Gesture`=\"<xref:System.Windows.Input.KeyGesture>\"/>"},{"pos":[1559,1566],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[1573,1669],"content":"<ph id=\"ph1\">&lt;</ph><ph id=\"ph2\">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> <ph id=\"ph3\">`Gesture`</ph>=\"<ph id=\"ph4\">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph>\"/&gt;","source":"<<xref:System.Windows.Input.MouseBinding> `Gesture`=\"<xref:System.Windows.Input.MouseGesture>\"/>"},{"pos":[1676,1683],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[1690,1772],"content":"<ph id=\"ph1\">&lt;</ph><ph id=\"ph2\">`inputBindingDerivedClass`</ph> <ph id=\"ph3\">`Gesture`</ph>=\"<ph id=\"ph4\">&lt;xref:System.Windows.Input.InputGesture&gt;</ph>\"/&gt;","source":"<`inputBindingDerivedClass` `Gesture`=\"<xref:System.Windows.Input.InputGesture>\"/>"},{"pos":[1832,1859],"content":"XAML Property Element Usage","linkify":"XAML Property Element Usage","nodes":[{"content":"XAML Property Element Usage","pos":[0,27]}]},{"pos":[2094,2105],"content":"XAML Values","linkify":"XAML Values","nodes":[{"content":"XAML Values","pos":[0,11]}]},{"pos":[2109,2340],"content":"`inputBindingDerivedClass`  \n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.","nodes":[{"content":" A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.","pos":[29,231],"nodes":[{"content":"A derived class of <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.","pos":[1,189],"source":" A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>."},{"content":"See Remarks.","pos":[190,202]}]}]},{"pos":[2347,2482],"content":"`inputGestureImplementation`  \n A custom derived class of <xref:System.Windows.Input.InputGesture> that supports object element syntax.","nodes":[{"content":"A custom derived class of <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputGesture&gt;</ph> that supports object element syntax.","pos":[32,135],"source":" A custom derived class of <xref:System.Windows.Input.InputGesture> that supports object element syntax."}]}],"pos":[39019,41551],"yaml":true,"extradata":"MT"},{"content":"The associated gesture. The default is `null`.","nodes":[{"pos":[0,46],"content":"The associated gesture. The default is `null`.","nodes":[{"content":"The associated gesture.","pos":[0,23]},{"content":"The default is <ph id=\"ph1\">`null`</ph>.","pos":[24,46],"source":" The default is `null`."}]}],"pos":[42709,42756],"yaml":true},{"content":"Makes the instance a frozen clone of the specified <xref href=\"System.Windows.Freezable\"></xref> by using base (non-animated) property values.","nodes":[{"pos":[0,142],"content":"Makes the instance a frozen clone of the specified <ph id=\"ph1\">&lt;xref href=\"System.Windows.Freezable\"&gt;&lt;/xref&gt;</ph> by using base (non-animated) property values.","source":"Makes the instance a frozen clone of the specified <xref href=\"System.Windows.Freezable\"></xref> by using base (non-animated) property values."}],"pos":[43944,44087],"yaml":true},{"content":"The object to clone.","nodes":[{"pos":[0,20],"content":"The object to clone.","nodes":[{"content":"The object to clone.","pos":[0,20]}]}],"pos":[44292,44313],"yaml":true},{"content":"Makes the current instance a frozen clone of the specified <xref href=\"System.Windows.Freezable\"></xref>. If the object has animated dependency properties, their current animated values are copied.","nodes":[{"pos":[0,197],"content":"Makes the current instance a frozen clone of the specified <xref href=\"System.Windows.Freezable\"></xref>. If the object has animated dependency properties, their current animated values are copied.","nodes":[{"content":"Makes the current instance a frozen clone of the specified <ph id=\"ph1\">&lt;xref href=\"System.Windows.Freezable\"&gt;&lt;/xref&gt;</ph>.","pos":[0,105],"source":"Makes the current instance a frozen clone of the specified <xref href=\"System.Windows.Freezable\"></xref>."},{"content":"If the object has animated dependency properties, their current animated values are copied.","pos":[106,197]}]}],"pos":[45517,45715],"yaml":true},{"content":"The object to clone.","nodes":[{"pos":[0,20],"content":"The object to clone.","nodes":[{"content":"The object to clone.","pos":[0,20]}]}],"pos":[45932,45953],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.InputBinding\n  commentId: T:System.Windows.Input.InputBinding\n  id: InputBinding\n  children:\n  - System.Windows.Input.InputBinding.#ctor\n  - System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)\n  - System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)\n  - System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)\n  - System.Windows.Input.InputBinding.Command\n  - System.Windows.Input.InputBinding.CommandParameter\n  - System.Windows.Input.InputBinding.CommandParameterProperty\n  - System.Windows.Input.InputBinding.CommandProperty\n  - System.Windows.Input.InputBinding.CommandTarget\n  - System.Windows.Input.InputBinding.CommandTargetProperty\n  - System.Windows.Input.InputBinding.CreateInstanceCore\n  - System.Windows.Input.InputBinding.Gesture\n  - System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)\n  - System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  langs:\n  - csharp\n  name: InputBinding\n  nameWithType: InputBinding\n  fullName: System.Windows.Input.InputBinding\n  type: Class\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Represents a binding between an <xref href=\"System.Windows.Input.InputGesture\"></xref> and a command. The command is potentially a <xref href=\"System.Windows.Input.RoutedCommand\"></xref>.\n  remarks: \"You can specify that user input invokes a command by creating a <xref:System.Windows.Input.InputBinding>. When the user performs the specified input, the <xref:System.Windows.Input.ICommand> that is set to the <xref:System.Windows.Input.InputBinding.Command%2A> property is executed.  \\n  \\n You can specify that the <xref:System.Windows.Input.InputBinding> invokes a command that is defined on an object by creating a binding on the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties. This enables you to define a custom command and associate it with user input. For more information, see the second example in the Examples section.  \\n  \\n An <xref:System.Windows.Input.InputBinding> can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> with the <xref:System.Windows.Input.CommandManager>.  \\n  \\n The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (there is a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding>-derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>. The typical property in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] programming that is set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and takes one or more <xref:System.Windows.Input.InputBinding> objects as values is the <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=fullName> property.  \\n  \\n<a name=\\\"xamlObjectElementUsage_InputBinding\\\"></a>   \\n## XAML Object Element Usage  \\n \\\\<*inputBindingDerivedClassâ€¦/*>  \\n  \\n<a name=\\\"xamlValues_InputBinding\\\"></a>   \\n## XAML Values  \\n `inputBindingDerivedClass`  \\n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.\"\n  example:\n  - \"The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command. When the key gesture is performed, the Open command is invoked.  \\n  \\n [!code-xml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  \\n  \\n The following examples show how to bind a custom command to <xref:System.Windows.Input.InputBinding> objects. These examples create an application that enables the user to change the background color by performing one of the following actions:  \\n  \\n-   Clicking a button.  \\n  \\n-   Pressing CTRL+C.  \\n  \\n-   Right-clicking a <xref:System.Windows.Controls.StackPanel> (outside the <xref:System.Windows.Controls.ListBox>).  \\n  \\n The first example creates a class named `SimpleDelegateCommand`. This class accepts a delegate so that the object creating the command can define the action that occurs when the command executes. `SimpleDelegateCommand` also defines properties that specify what key and mouse input invokes the command. `GestureKey` and `GestureModifier` specify the keyboard input; `MouseGesture` specifies the mouse input.  \\n  \\n [!code-csharp[InputCommandBinding#DelegateCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#delegatecommand)]\\n [!code-vb[InputCommandBinding#DelegateCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#delegatecommand)]  \\n  \\n The following example creates and initializes the `ColorChangeCommand`, which is a `SimpleDelegateCommand`. The example also defines the method that executes when the command is invoked and sets the `GestureKey`, `GestureModifier`, and `MouseGesture` properties. An application would call the `InitializeCommand` method when the program begins, such as in the constructor of a <xref:System.Windows.Window>.  \\n  \\n [!code-csharp[InputCommandBinding#InitializeCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#initializecommand)]\\n [!code-vb[InputCommandBinding#InitializeCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#initializecommand)]  \\n  \\n Finally, the following example creates the user interface. The example adds a <xref:System.Windows.Input.KeyBinding> and a <xref:System.Windows.Input.MouseBinding> to a <xref:System.Windows.Controls.StackPanel> that contains a <xref:System.Windows.Controls.Button> and a <xref:System.Windows.Controls.ListBox>. When the user selects an item in the <xref:System.Windows.Controls.ListBox>, he or she can change the color of the background to the selected color. In each case, the `CommandParameter` property is bound to the selected item in the <xref:System.Windows.Controls.ListBox>, and the `Command` property is bound to the `ColorChangeCommand`. The <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=fullName>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=fullName>, and <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=fullName> properties are bound to the corresponding properties on the `SimpleDelegateCommand` class.  \\n  \\n [!code-xml[InputCommandBinding#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml#ui)]\"\n  syntax:\n    content: 'public class InputBinding : System.Windows.Freezable, System.Windows.Input.ICommandSource'\n  inheritance:\n  - System.Object\n  - System.Windows.Threading.DispatcherObject\n  - System.Windows.DependencyObject\n  - System.Windows.Freezable\n  derivedClasses:\n  - System.Windows.Input.KeyBinding\n  - System.Windows.Input.MouseBinding\n  implements:\n  - System.Windows.Input.ICommandSource\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)\n  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.DependencyObjectType\n  - System.Windows.DependencyObject.Equals(System.Object)\n  - System.Windows.DependencyObject.GetHashCode\n  - System.Windows.DependencyObject.GetLocalValueEnumerator\n  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.IsSealed\n  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)\n  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)\n  - System.Windows.Freezable.CanFreeze\n  - System.Windows.Freezable.Changed\n  - System.Windows.Freezable.Clone\n  - System.Windows.Freezable.CloneCurrentValue\n  - System.Windows.Freezable.CreateInstance\n  - System.Windows.Freezable.Freeze\n  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)\n  - System.Windows.Freezable.FreezeCore(System.Boolean)\n  - System.Windows.Freezable.GetAsFrozen\n  - System.Windows.Freezable.GetCurrentValueAsFrozen\n  - System.Windows.Freezable.IsFrozen\n  - System.Windows.Freezable.OnChanged\n  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)\n  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)\n  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.Freezable.ReadPreamble\n  - System.Windows.Freezable.WritePostscript\n  - System.Windows.Freezable.WritePreamble\n  - System.Windows.Threading.DispatcherObject.CheckAccess\n  - System.Windows.Threading.DispatcherObject.Dispatcher\n  - System.Windows.Threading.DispatcherObject.VerifyAccess\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.InputBinding.#ctor\n  commentId: M:System.Windows.Input.InputBinding.#ctor\n  id: '#ctor'\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: InputBinding()\n  nameWithType: InputBinding.InputBinding()\n  fullName: InputBinding.InputBinding()\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Provides base initialization for classes derived from <xref href=\"System.Windows.Input.InputBinding\"></xref>.\n  remarks: <xref:System.Windows.Input.InputBinding> is not technically an abstract class, but the default constructor is deliberately protected access. This has the effect of making <xref:System.Windows.Input.InputBinding> an \"abstract\" class for [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. There are existing properties in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] that have [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usages that expect objects of type <xref:System.Windows.Input.InputBinding>, but you cannot specify an <xref:System.Windows.Input.InputBinding> instance in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. Instead, you can specify one of the device-specific <xref:System.Windows.Input.InputBinding> derived classes as values, for instance <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.\n  syntax:\n    content: protected InputBinding ();\n    parameters: []\n  overload: System.Windows.Input.InputBinding.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)\n  commentId: M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)\n  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)'\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: InputBinding(ICommand, InputGesture)\n  nameWithType: InputBinding.InputBinding(ICommand, InputGesture)\n  fullName: InputBinding.InputBinding(ICommand, InputGesture)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.InputBinding\"></xref> class with the specified command and input gesture.\n  remarks: If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands. Instead, you will either use constructors of derived classes (<xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>), or you will use this constructor as the base instantiation of a custom class. Although the <xref:System.Windows.Input.InputBinding> class supports different input devices in principle, in practice you must choose which device the input binding will represent. You only can set only one <xref:System.Windows.Input.InputBinding.Gesture%2A> value on the input binding, and gestures are device-specific.\n  example:\n  - \"The following example shows how to use this constructor to associate a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.RoutedCommand>.  \\n  \\n [!code-csharp[commandlibrarysnippets#InputBindingAddingComand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#inputbindingaddingcomand)]\\n [!code-vb[commandlibrarysnippets#InputBindingAddingComand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#inputbindingaddingcomand)]\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public InputBinding (System.Windows.Input.ICommand command, System.Windows.Input.InputGesture gesture);\n    parameters:\n    - id: command\n      type: System.Windows.Input.ICommand\n      description: The command to associate with <code>gesture</code>.\n    - id: gesture\n      type: System.Windows.Input.InputGesture\n      description: The input gesture to associate with <code>command</code>.\n  overload: System.Windows.Input.InputBinding.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>command</code> or <code>gesture</code> is `null`.\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)\n  commentId: M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)\n  id: CloneCore(System.Windows.Freezable)\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: CloneCore(Freezable)\n  nameWithType: InputBinding.CloneCore(Freezable)\n  fullName: InputBinding.CloneCore(Freezable)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Copies the base (non-animated) values of the properties of the specified object.\n  syntax:\n    content: protected override void CloneCore (System.Windows.Freezable sourceFreezable);\n    parameters:\n    - id: sourceFreezable\n      type: System.Windows.Freezable\n      description: The object to clone.\n  overload: System.Windows.Input.InputBinding.CloneCore*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)\n  commentId: M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)\n  id: CloneCurrentValueCore(System.Windows.Freezable)\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: CloneCurrentValueCore(Freezable)\n  nameWithType: InputBinding.CloneCurrentValueCore(Freezable)\n  fullName: InputBinding.CloneCurrentValueCore(Freezable)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Copies the current values of the properties of the specified object.\n  syntax:\n    content: protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);\n    parameters:\n    - id: sourceFreezable\n      type: System.Windows.Freezable\n      description: The object to clone.\n  overload: System.Windows.Input.InputBinding.CloneCurrentValueCore*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Input.InputBinding.Command\n  commentId: P:System.Windows.Input.InputBinding.Command\n  id: Command\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: Command\n  nameWithType: InputBinding.Command\n  fullName: InputBinding.Command\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets or sets the <xref href=\"System.Windows.Input.ICommand\"></xref> associated with this input binding.\n  remarks: \"The <xref:System.Windows.Input.InputBinding> class does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (it has a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore, can use properties that are inherited from <xref:System.Windows.Input.InputBinding>. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties with [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usages are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.  \\n  \\n <xref:System.Windows.Input.ICommand> references a type converter that enables certain preexisting <xref:System.Windows.Input.ICommand> implementations to specify values in the form of a string. This type conversion behavior sets the attribute value form of this property. You can also bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object. This enables you to define a custom command and associate it with user input. For more information, see the second example in <xref:System.Windows.Input.InputBinding>.  \\n  \\n<a name=\\\"xamlAttributeUsage_Command\\\"></a>   \\n## XAML Attribute Usage  \\n <`inputBindingDerivedClass` `Command`=\\\"<xref:System.Windows.Input.ICommand>\\\"/>  \\n  \\n<a name=\\\"xamlPropertyElementUsage_Command\\\"></a>   \\n## XAML Property Element Usage  \\n  \\n```  \\n<inputBindingDerivedClass>  \\n  <inputBindingDerivedClass.Command>  \\n    <iCommandImplementation/>  \\n  </inputBindingDerivedClass.Command>  \\n</inputBindingDerivedClass>  \\n```  \\n  \\n<a name=\\\"xamlValues_Command\\\"></a>   \\n## XAML Values  \\n `inputBindingDerivedClass`  \\n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.  \\n  \\n `iCommandImplementation`  \\n An object implementation of <xref:System.Windows.Input.ICommand> that supports object element syntax (has a public default constructor).\"\n  example:\n  - \"The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=fullName> command. When the key gesture is performed, the Open command is invoked.  \\n  \\n [!code-xml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  \\n  \\n [!code-csharp[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewkeybinding)]\\n [!code-vb[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewkeybinding)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(\"System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null\")]\n\n      [System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)]\n\n      public System.Windows.Input.ICommand Command { get; set; }\n    return:\n      type: System.Windows.Input.ICommand\n      description: The associated command.\n  overload: System.Windows.Input.InputBinding.Command*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <xref href=\"System.Windows.Input.InputBinding.Command\"></xref> value is `null`.\n  attributes:\n  - type: System.ComponentModel.TypeConverterAttribute\n  - type: System.Windows.LocalizabilityAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.InputBinding.CommandParameter\n  commentId: P:System.Windows.Input.InputBinding.CommandParameter\n  id: CommandParameter\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: CommandParameter\n  nameWithType: InputBinding.CommandParameter\n  fullName: InputBinding.CommandParameter\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets or sets the command-specific data for a particular command.\n  remarks: \"The <xref:System.Windows.Input.InputBinding.CommandParameter%2A> property is used to pass specific information to the command when it is executed. The type of the data is defined by the command. Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.  \\n  \\n If the command that an input binding is associated with is a <xref:System.Windows.Input.RoutedCommand>, the <xref:System.Windows.Input.InputBinding.CommandParameter%2A> of the input binding is passed to the <xref:System.Windows.Input.RoutedCommand> handlers through the <xref:System.Windows.Input.ExecutedRoutedEventArgs> and the <xref:System.Windows.Input.CanExecuteRoutedEventArgs> event data when the command is processed.  \\n  \\n The data type and purpose of the command parameter are defined differently for each command and can be `null`. You can bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object. This enables you to define a custom command and associate it with user input. For more information, see the second example in <xref:System.Windows.Input.InputBinding>.  \\n  \\n The <xref:System.Windows.Input.InputBinding> class does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (it has a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore, can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.  \\n  \\n<a name=\\\"xamlAttributeUsage_CommandParameter\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<inputBindingDerivedClassÂ CommandParameter=\\\"commandParameterString\\\"/>  \\n```  \\n  \\n<a name=\\\"xamlPropertyElementUsage_CommandParameter\\\"></a>   \\n## XAML Property Element Usage  \\n  \\n```  \\n<inputBindingDerivedClass>  \\n  <inputBindingDerivedClass.CommandParameter>  \\n    <commandParameterObject/>  \\n  </inputBindingDerivedClass.CommandParameter>  \\n</inputBindingDerivedClass>  \\n```  \\n  \\n<a name=\\\"xamlValues_CommandParameter\\\"></a>   \\n## XAML Values  \\n `inputBindingDerivedClass`  \\n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.  \\n  \\n `commandParameterString`  \\n A string that is processed by a particular command. Strings are the common type used for command parameters because they can be easily set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with. Many commands do not expect parameters.  \\n  \\n `commandParameterObject`  \\n An object that is processed by a particular command. All existing [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] commands use strings. Therefore, this property element syntax is only relevant for custom command scenarios. In order to support this syntax, the `commandParameterObject` object must also support object element syntax (must have a public default constructor).\"\n  syntax:\n    content: public object CommandParameter { get; set; }\n    return:\n      type: System.Object\n      description: The command-specific data. The default is `null`.\n  overload: System.Windows.Input.InputBinding.CommandParameter*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.InputBinding.CommandParameterProperty\n  commentId: F:System.Windows.Input.InputBinding.CommandParameterProperty\n  id: CommandParameterProperty\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: CommandParameterProperty\n  nameWithType: InputBinding.CommandParameterProperty\n  fullName: InputBinding.CommandParameterProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Identifies the <xref href=\"System.Windows.Input.InputBinding.CommandParameter\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty CommandParameterProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.InputBinding.CommandProperty\n  commentId: F:System.Windows.Input.InputBinding.CommandProperty\n  id: CommandProperty\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: CommandProperty\n  nameWithType: InputBinding.CommandProperty\n  fullName: InputBinding.CommandProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Identifies the <xref href=\"System.Windows.Input.InputBinding.Command\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty CommandProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.InputBinding.CommandTarget\n  commentId: P:System.Windows.Input.InputBinding.CommandTarget\n  id: CommandTarget\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: CommandTarget\n  nameWithType: InputBinding.CommandTarget\n  fullName: InputBinding.CommandTarget\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets or sets the target element of the command.\n  remarks: \"In the [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on an <xref:System.Windows.Input.ICommandSource> object is applicable only when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>. If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on an <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.  \\n  \\n When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised. If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property is not set, the element with keyboard focus is used as the target.  \\n  \\n The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage, because it does not expose a public default constructor (there is a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.  \\n  \\n<a name=\\\"xamlAttributeUsage_CommandTarget\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<inputBindingDerivedClassÂ CommandTarget=\\\"bindingToTarget\\\"/>  \\n```  \\n  \\n<a name=\\\"xamlValues_CommandTarget\\\"></a>   \\n## XAML Values  \\n `inputBindingDerivedClass`  \\n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.  \\n  \\n `bindingToTarget`  \\n A string that uses a type of binding syntax that can return an object reference to an existing named element. See Remarks.\"\n  syntax:\n    content: public System.Windows.IInputElement CommandTarget { get; set; }\n    return:\n      type: System.Windows.IInputElement\n      description: The target of the command. The default is `null`.\n  overload: System.Windows.Input.InputBinding.CommandTarget*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.InputBinding.CommandTargetProperty\n  commentId: F:System.Windows.Input.InputBinding.CommandTargetProperty\n  id: CommandTargetProperty\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: CommandTargetProperty\n  nameWithType: InputBinding.CommandTargetProperty\n  fullName: InputBinding.CommandTargetProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Identifies the <xref href=\"System.Windows.Input.InputBinding.CommandTarget\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty CommandTargetProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.InputBinding.CreateInstanceCore\n  commentId: M:System.Windows.Input.InputBinding.CreateInstanceCore\n  id: CreateInstanceCore\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: CreateInstanceCore()\n  nameWithType: InputBinding.CreateInstanceCore()\n  fullName: InputBinding.CreateInstanceCore()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Creates an instance of an <xref href=\"System.Windows.Input.InputBinding\"></xref>.\n  syntax:\n    content: protected override System.Windows.Freezable CreateInstanceCore ();\n    parameters: []\n    return:\n      type: System.Windows.Freezable\n      description: The new object.\n  overload: System.Windows.Input.InputBinding.CreateInstanceCore*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Input.InputBinding.Gesture\n  commentId: P:System.Windows.Input.InputBinding.Gesture\n  id: Gesture\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: Gesture\n  nameWithType: InputBinding.Gesture\n  fullName: InputBinding.Gesture\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets or sets the <xref href=\"System.Windows.Input.InputGesture\"></xref> associated with this input binding.\n  remarks: \"The input gesture is the action that invokes the command. Examples of input gestures in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] are <xref:System.Windows.Input.KeyGesture> and <xref:System.Windows.Input.MouseGesture>. A <xref:System.Windows.Input.KeyGesture> is a combination of a <xref:System.Windows.Input.Key> and a set of <xref:System.Windows.Input.ModifierKeys>. A <xref:System.Windows.Input.MouseGesture> is a combination of a <xref:System.Windows.Input.MouseAction> and a set of <xref:System.Windows.Input.ModifierKeys>.  \\n  \\n The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage, because it does not expose a public default constructor (there is a default constructor, but it is protected). However, derived classes can expose a public constructor and thus can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.  \\n  \\n<a name=\\\"xamlAttributeUsage_gesture\\\"></a>   \\n## XAML Attribute Usage  \\n <<xref:System.Windows.Input.KeyBinding> `Gesture`=\\\"<xref:System.Windows.Input.KeyGesture>\\\"/>  \\n  \\n \\\\- or -  \\n  \\n <<xref:System.Windows.Input.MouseBinding> `Gesture`=\\\"<xref:System.Windows.Input.MouseGesture>\\\"/>  \\n  \\n \\\\- or -  \\n  \\n <`inputBindingDerivedClass` `Gesture`=\\\"<xref:System.Windows.Input.InputGesture>\\\"/>  \\n  \\n<a name=\\\"xamlPropertyElementUsage_gesture\\\"></a>   \\n## XAML Property Element Usage  \\n  \\n```  \\n<inputBindingDerivedClass>  \\n  <inputBindingDerivedClass.Gesture>  \\n    <inputGestureImplementation/>  \\n  </inputBindingDerivedClass.Gesture>  \\n</inputBindingDerivedClass>  \\n```  \\n  \\n<a name=\\\"xamlValues_gesture\\\"></a>   \\n## XAML Values  \\n `inputBindingDerivedClass`  \\n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.  \\n  \\n `inputGestureImplementation`  \\n A custom derived class of <xref:System.Windows.Input.InputGesture> that supports object element syntax.\"\n  example:\n  - \"The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand>. When the <xref:System.Windows.Input.KeyGesture> ALT+L is pressed, the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command is invoked.  \\n  \\n [!code-xml[commandlibrarysnippets#KeyBindingWithKeyAndModifiersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml#keybindingwithkeyandmodifiersxaml)]  \\n  \\n [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]\"\n  syntax:\n    content: >-\n      [set: System.Security.SecurityCritical]\n\n      public virtual System.Windows.Input.InputGesture Gesture { get; set; }\n    return:\n      type: System.Windows.Input.InputGesture\n      description: The associated gesture. The default is `null`.\n  overload: System.Windows.Input.InputBinding.Gesture*\n  exceptions: []\n  attributes:\n  - type: 'set: System.Security.SecurityCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)\n  commentId: M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)\n  id: GetAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: GetAsFrozenCore(Freezable)\n  nameWithType: InputBinding.GetAsFrozenCore(Freezable)\n  fullName: InputBinding.GetAsFrozenCore(Freezable)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Makes the instance a frozen clone of the specified <xref href=\"System.Windows.Freezable\"></xref> by using base (non-animated) property values.\n  syntax:\n    content: protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);\n    parameters:\n    - id: sourceFreezable\n      type: System.Windows.Freezable\n      description: The object to clone.\n  overload: System.Windows.Input.InputBinding.GetAsFrozenCore*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  commentId: M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  id: GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.Input.InputBinding\n  langs:\n  - csharp\n  name: GetCurrentValueAsFrozenCore(Freezable)\n  nameWithType: InputBinding.GetCurrentValueAsFrozenCore(Freezable)\n  fullName: InputBinding.GetCurrentValueAsFrozenCore(Freezable)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Makes the current instance a frozen clone of the specified <xref href=\"System.Windows.Freezable\"></xref>. If the object has animated dependency properties, their current animated values are copied.\n  syntax:\n    content: protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);\n    parameters:\n    - id: sourceFreezable\n      type: System.Windows.Freezable\n      description: The object to clone.\n  overload: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Windows.Freezable\n  parent: System.Windows\n  isExternal: false\n  name: Freezable\n  nameWithType: Freezable\n  fullName: System.Windows.Freezable\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Windows.Input.InputBinding.#ctor\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: InputBinding()\n  nameWithType: InputBinding.InputBinding()\n  fullName: InputBinding.InputBinding()\n- uid: System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: InputBinding(ICommand, InputGesture)\n  nameWithType: InputBinding.InputBinding(ICommand, InputGesture)\n  fullName: InputBinding.InputBinding(ICommand, InputGesture)\n- uid: System.Windows.Input.ICommand\n  parent: System.Windows.Input\n  isExternal: false\n  name: ICommand\n  nameWithType: ICommand\n  fullName: System.Windows.Input.ICommand\n- uid: System.Windows.Input.InputGesture\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputGesture\n  nameWithType: InputGesture\n  fullName: System.Windows.Input.InputGesture\n- uid: System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CloneCore(Freezable)\n  nameWithType: InputBinding.CloneCore(Freezable)\n  fullName: InputBinding.CloneCore(Freezable)\n- uid: System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CloneCurrentValueCore(Freezable)\n  nameWithType: InputBinding.CloneCurrentValueCore(Freezable)\n  fullName: InputBinding.CloneCurrentValueCore(Freezable)\n- uid: System.Windows.Input.InputBinding.Command\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: Command\n  nameWithType: InputBinding.Command\n  fullName: InputBinding.Command\n- uid: System.Windows.Input.InputBinding.CommandParameter\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CommandParameter\n  nameWithType: InputBinding.CommandParameter\n  fullName: InputBinding.CommandParameter\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Input.InputBinding.CommandParameterProperty\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CommandParameterProperty\n  nameWithType: InputBinding.CommandParameterProperty\n  fullName: InputBinding.CommandParameterProperty\n- uid: System.Windows.DependencyProperty\n  parent: System.Windows\n  isExternal: false\n  name: DependencyProperty\n  nameWithType: DependencyProperty\n  fullName: System.Windows.DependencyProperty\n- uid: System.Windows.Input.InputBinding.CommandProperty\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CommandProperty\n  nameWithType: InputBinding.CommandProperty\n  fullName: InputBinding.CommandProperty\n- uid: System.Windows.Input.InputBinding.CommandTarget\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CommandTarget\n  nameWithType: InputBinding.CommandTarget\n  fullName: InputBinding.CommandTarget\n- uid: System.Windows.IInputElement\n  parent: System.Windows\n  isExternal: false\n  name: IInputElement\n  nameWithType: IInputElement\n  fullName: System.Windows.IInputElement\n- uid: System.Windows.Input.InputBinding.CommandTargetProperty\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CommandTargetProperty\n  nameWithType: InputBinding.CommandTargetProperty\n  fullName: InputBinding.CommandTargetProperty\n- uid: System.Windows.Input.InputBinding.CreateInstanceCore\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CreateInstanceCore()\n  nameWithType: InputBinding.CreateInstanceCore()\n  fullName: InputBinding.CreateInstanceCore()\n- uid: System.Windows.Input.InputBinding.Gesture\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: Gesture\n  nameWithType: InputBinding.Gesture\n  fullName: InputBinding.Gesture\n- uid: System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: GetAsFrozenCore(Freezable)\n  nameWithType: InputBinding.GetAsFrozenCore(Freezable)\n  fullName: InputBinding.GetAsFrozenCore(Freezable)\n- uid: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: GetCurrentValueAsFrozenCore(Freezable)\n  nameWithType: InputBinding.GetCurrentValueAsFrozenCore(Freezable)\n  fullName: InputBinding.GetCurrentValueAsFrozenCore(Freezable)\n- uid: System.Windows.Input.InputBinding.#ctor*\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: InputBinding\n  nameWithType: InputBinding.InputBinding\n  fullName: InputBinding.InputBinding\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n- uid: System.Windows.Input.InputBinding.CloneCore*\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CloneCore\n  nameWithType: InputBinding.CloneCore\n  fullName: InputBinding.CloneCore\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n- uid: System.Windows.Input.InputBinding.CloneCurrentValueCore*\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CloneCurrentValueCore\n  nameWithType: InputBinding.CloneCurrentValueCore\n  fullName: InputBinding.CloneCurrentValueCore\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n- uid: System.Windows.Input.InputBinding.Command*\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: Command\n  nameWithType: InputBinding.Command\n  fullName: InputBinding.Command\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n- uid: System.Windows.Input.InputBinding.CommandParameter*\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CommandParameter\n  nameWithType: InputBinding.CommandParameter\n  fullName: InputBinding.CommandParameter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n- uid: System.Windows.Input.InputBinding.CommandTarget*\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CommandTarget\n  nameWithType: InputBinding.CommandTarget\n  fullName: InputBinding.CommandTarget\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n- uid: System.Windows.Input.InputBinding.CreateInstanceCore*\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CreateInstanceCore\n  nameWithType: InputBinding.CreateInstanceCore\n  fullName: InputBinding.CreateInstanceCore\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n- uid: System.Windows.Input.InputBinding.Gesture*\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: Gesture\n  nameWithType: InputBinding.Gesture\n  fullName: InputBinding.Gesture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n- uid: System.Windows.Input.InputBinding.GetAsFrozenCore*\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: GetAsFrozenCore\n  nameWithType: InputBinding.GetAsFrozenCore\n  fullName: InputBinding.GetAsFrozenCore\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n- uid: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore*\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: GetCurrentValueAsFrozenCore\n  nameWithType: InputBinding.GetCurrentValueAsFrozenCore\n  fullName: InputBinding.GetCurrentValueAsFrozenCore\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/InputBinding.xml\n- uid: System.Windows.DependencyObject.Equals(System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: DependencyObject.Equals(Object)\n  fullName: DependencyObject.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Windows.DependencyObject.GetHashCode\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: DependencyObject.GetHashCode()\n  fullName: DependencyObject.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Windows.Threading.DispatcherObject.CheckAccess\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: CheckAccess()\n  nameWithType: DispatcherObject.CheckAccess()\n  fullName: DispatcherObject.CheckAccess()\n- uid: System.Windows.Threading.DispatcherObject.Dispatcher\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: Dispatcher\n  nameWithType: DispatcherObject.Dispatcher\n  fullName: DispatcherObject.Dispatcher\n- uid: System.Windows.Threading.DispatcherObject.VerifyAccess\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: VerifyAccess()\n  nameWithType: DispatcherObject.VerifyAccess()\n  fullName: DispatcherObject.VerifyAccess()\n- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ClearValue(DependencyProperty)\n  nameWithType: DependencyObject.ClearValue(DependencyProperty)\n  fullName: DependencyObject.ClearValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ClearValue(DependencyPropertyKey)\n  nameWithType: DependencyObject.ClearValue(DependencyPropertyKey)\n  fullName: DependencyObject.ClearValue(DependencyPropertyKey)\n- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: CoerceValue(DependencyProperty)\n  nameWithType: DependencyObject.CoerceValue(DependencyProperty)\n  fullName: DependencyObject.CoerceValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.DependencyObjectType\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: DependencyObjectType\n  nameWithType: DependencyObject.DependencyObjectType\n  fullName: DependencyObject.DependencyObjectType\n- uid: System.Windows.DependencyObject.GetLocalValueEnumerator\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: GetLocalValueEnumerator()\n  nameWithType: DependencyObject.GetLocalValueEnumerator()\n  fullName: DependencyObject.GetLocalValueEnumerator()\n- uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: GetValue(DependencyProperty)\n  nameWithType: DependencyObject.GetValue(DependencyProperty)\n  fullName: DependencyObject.GetValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: InvalidateProperty(DependencyProperty)\n  nameWithType: DependencyObject.InvalidateProperty(DependencyProperty)\n  fullName: DependencyObject.InvalidateProperty(DependencyProperty)\n- uid: System.Windows.DependencyObject.IsSealed\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: IsSealed\n  nameWithType: DependencyObject.IsSealed\n  fullName: DependencyObject.IsSealed\n- uid: System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: Freezable.OnPropertyChanged(DependencyPropertyChangedEventArgs)\n  fullName: Freezable.OnPropertyChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ReadLocalValue(DependencyProperty)\n  nameWithType: DependencyObject.ReadLocalValue(DependencyProperty)\n  fullName: DependencyObject.ReadLocalValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: SetCurrentValue(DependencyProperty, Object)\n  nameWithType: DependencyObject.SetCurrentValue(DependencyProperty, Object)\n  fullName: DependencyObject.SetCurrentValue(DependencyProperty, Object)\n- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: SetValue(DependencyProperty, Object)\n  nameWithType: DependencyObject.SetValue(DependencyProperty, Object)\n  fullName: DependencyObject.SetValue(DependencyProperty, Object)\n- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: SetValue(DependencyPropertyKey, Object)\n  nameWithType: DependencyObject.SetValue(DependencyPropertyKey, Object)\n  fullName: DependencyObject.SetValue(DependencyPropertyKey, Object)\n- uid: System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ShouldSerializeProperty(DependencyProperty)\n  nameWithType: DependencyObject.ShouldSerializeProperty(DependencyProperty)\n  fullName: DependencyObject.ShouldSerializeProperty(DependencyProperty)\n- uid: System.Windows.Freezable.CanFreeze\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: CanFreeze\n  nameWithType: Freezable.CanFreeze\n  fullName: Freezable.CanFreeze\n- uid: System.Windows.Freezable.Changed\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: Changed\n  nameWithType: Freezable.Changed\n  fullName: Freezable.Changed\n- uid: System.Windows.Freezable.Clone\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: Clone()\n  nameWithType: Freezable.Clone()\n  fullName: Freezable.Clone()\n- uid: System.Windows.Freezable.CloneCurrentValue\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: CloneCurrentValue()\n  nameWithType: Freezable.CloneCurrentValue()\n  fullName: Freezable.CloneCurrentValue()\n- uid: System.Windows.Freezable.CreateInstance\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: CreateInstance()\n  nameWithType: Freezable.CreateInstance()\n  fullName: Freezable.CreateInstance()\n- uid: System.Windows.Freezable.Freeze\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: Freeze()\n  nameWithType: Freezable.Freeze()\n  fullName: Freezable.Freeze()\n- uid: System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: Freeze(Freezable, Boolean)\n  nameWithType: Freezable.Freeze(Freezable, Boolean)\n  fullName: Freezable.Freeze(Freezable, Boolean)\n- uid: System.Windows.Freezable.FreezeCore(System.Boolean)\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: FreezeCore(Boolean)\n  nameWithType: Freezable.FreezeCore(Boolean)\n  fullName: Freezable.FreezeCore(Boolean)\n- uid: System.Windows.Freezable.GetAsFrozen\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: GetAsFrozen()\n  nameWithType: Freezable.GetAsFrozen()\n  fullName: Freezable.GetAsFrozen()\n- uid: System.Windows.Freezable.GetCurrentValueAsFrozen\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: GetCurrentValueAsFrozen()\n  nameWithType: Freezable.GetCurrentValueAsFrozen()\n  fullName: Freezable.GetCurrentValueAsFrozen()\n- uid: System.Windows.Freezable.IsFrozen\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: IsFrozen\n  nameWithType: Freezable.IsFrozen\n  fullName: Freezable.IsFrozen\n- uid: System.Windows.Freezable.OnChanged\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: OnChanged()\n  nameWithType: Freezable.OnChanged()\n  fullName: Freezable.OnChanged()\n- uid: System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: OnFreezablePropertyChanged(DependencyObject, DependencyObject)\n  nameWithType: Freezable.OnFreezablePropertyChanged(DependencyObject, DependencyObject)\n  fullName: Freezable.OnFreezablePropertyChanged(DependencyObject, DependencyObject)\n- uid: System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: OnFreezablePropertyChanged(DependencyObject, DependencyObject, DependencyProperty)\n  nameWithType: Freezable.OnFreezablePropertyChanged(DependencyObject, DependencyObject, DependencyProperty)\n  fullName: Freezable.OnFreezablePropertyChanged(DependencyObject, DependencyObject, DependencyProperty)\n- uid: System.Windows.Freezable.ReadPreamble\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: ReadPreamble()\n  nameWithType: Freezable.ReadPreamble()\n  fullName: Freezable.ReadPreamble()\n- uid: System.Windows.Freezable.WritePostscript\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: WritePostscript()\n  nameWithType: Freezable.WritePostscript()\n  fullName: Freezable.WritePostscript()\n- uid: System.Windows.Freezable.WritePreamble\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: WritePreamble()\n  nameWithType: Freezable.WritePreamble()\n  fullName: Freezable.WritePreamble()\n- uid: System.Windows.Input.ICommandSource\n  parent: System.Windows.Input\n  isExternal: false\n  name: ICommandSource\n  nameWithType: ICommandSource\n  fullName: System.Windows.Input.ICommandSource\n"}