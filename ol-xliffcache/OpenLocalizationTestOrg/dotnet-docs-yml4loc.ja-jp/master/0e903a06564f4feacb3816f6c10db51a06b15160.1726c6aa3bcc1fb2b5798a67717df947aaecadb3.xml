{"nodes":[{"content":"Computes the <xref href=\"System.Security.Cryptography.SHA1\"></xref> hash value for the input data using the implementation provided by the cryptographic service provider (CSP). This class cannot be inherited.","nodes":[{"pos":[0,208],"content":"Computes the <xref href=\"System.Security.Cryptography.SHA1\"></xref> hash value for the input data using the implementation provided by the cryptographic service provider (CSP). This class cannot be inherited.","nodes":[{"content":"Computes the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.SHA1\"&gt;&lt;/xref&gt;</ph> hash value for the input data using the implementation provided by the cryptographic service provider (CSP).","pos":[0,176],"source":"Computes the <xref href=\"System.Security.Cryptography.SHA1\"></xref> hash value for the input data using the implementation provided by the cryptographic service provider (CSP)."},{"content":"This class cannot be inherited.","pos":[177,208]}]}],"pos":[986,1195],"yaml":true},{"content":"The hash size for the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> class is 160 bits.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","nodes":[{"pos":[0,102],"content":"The hash size for the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> class is 160 bits.","nodes":[{"content":"The hash size for the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.SHA1CryptoServiceProvider&gt;</ph> class is 160 bits.","pos":[0,102],"source":"The hash size for the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> class is 160 bits."}]},{"pos":[110,636],"content":"[!IMPORTANT]\n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","leadings":["","> "],"nodes":[{"content":" This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","pos":[13,524],"nodes":[{"content":"This type implements the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[1,62],"source":" This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[63,157]},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[158,269],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[270,377],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[378,511],"source":" For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."}]}]}],"pos":[1206,1850],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"></xref> class.","nodes":[{"pos":[0,116],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"></xref> class."}],"pos":[5816,5933],"yaml":true},{"content":"Initializes an instance of <xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"></xref>.","nodes":[{"pos":[0,103],"content":"Initializes an instance of <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes an instance of <xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"></xref>."}],"pos":[12898,13002],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.SHA1CryptoServiceProvider\n  commentId: T:System.Security.Cryptography.SHA1CryptoServiceProvider\n  id: SHA1CryptoServiceProvider\n  children:\n  - System.Security.Cryptography.SHA1CryptoServiceProvider.#ctor\n  - System.Security.Cryptography.SHA1CryptoServiceProvider.Dispose(System.Boolean)\n  - System.Security.Cryptography.SHA1CryptoServiceProvider.Finalize\n  - System.Security.Cryptography.SHA1CryptoServiceProvider.HashCore(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.SHA1CryptoServiceProvider.HashFinal\n  - System.Security.Cryptography.SHA1CryptoServiceProvider.Initialize\n  langs:\n  - csharp\n  name: SHA1CryptoServiceProvider\n  nameWithType: SHA1CryptoServiceProvider\n  fullName: System.Security.Cryptography.SHA1CryptoServiceProvider\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Computes the <xref href=\"System.Security.Cryptography.SHA1\"></xref> hash value for the input data using the implementation provided by the cryptographic service provider (CSP). This class cannot be inherited.\n  remarks: \"The hash size for the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> class is 160 bits.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \\\"Using an Object that Implements IDisposable\\\" section in the <xref:System.IDisposable> interface topic.\"\n  example:\n  - \"The following code example computes the <xref:System.Security.Cryptography.SHA1> hash value for `data` and stores it in `result`. This example assumes that there is a predefined constant `DATA_SIZE`.  \\n  \\n [!code-cpp[Classic SHA1CryptoServiceProvider Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SHA1CryptoServiceProvider Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic SHA1CryptoServiceProvider Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SHA1CryptoServiceProvider Example/CS/source.cs#1)]\\n [!code-vb[Classic SHA1CryptoServiceProvider Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SHA1CryptoServiceProvider Example/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class SHA1CryptoServiceProvider : System.Security.Cryptography.SHA1\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.HashAlgorithm\n  - System.Security.Cryptography.SHA1\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  - System.Security.Cryptography.HashAlgorithm.Clear\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  - System.Security.Cryptography.HashAlgorithm.Dispose\n  - System.Security.Cryptography.HashAlgorithm.Hash\n  - System.Security.Cryptography.HashAlgorithm.HashSize\n  - System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  - System.Security.Cryptography.HashAlgorithm.HashValue\n  - System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.State\n  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.SHA1.Create\n  - System.Security.Cryptography.SHA1.Create(System.String)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA1CryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.SHA1CryptoServiceProvider.#ctor\n  commentId: M:System.Security.Cryptography.SHA1CryptoServiceProvider.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.SHA1CryptoServiceProvider\n  langs:\n  - csharp\n  name: SHA1CryptoServiceProvider()\n  nameWithType: SHA1CryptoServiceProvider.SHA1CryptoServiceProvider()\n  fullName: SHA1CryptoServiceProvider.SHA1CryptoServiceProvider()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"></xref> class.\n  syntax:\n    content: public SHA1CryptoServiceProvider ();\n    parameters: []\n  overload: System.Security.Cryptography.SHA1CryptoServiceProvider.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA1CryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.SHA1CryptoServiceProvider.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.SHA1CryptoServiceProvider.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.SHA1CryptoServiceProvider\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: SHA1CryptoServiceProvider.Dispose(Boolean)\n  fullName: SHA1CryptoServiceProvider.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: ''\n  overload: System.Security.Cryptography.SHA1CryptoServiceProvider.Dispose*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA1CryptoServiceProvider.xml\n- uid: System.Security.Cryptography.SHA1CryptoServiceProvider.Finalize\n  commentId: M:System.Security.Cryptography.SHA1CryptoServiceProvider.Finalize\n  id: Finalize\n  parent: System.Security.Cryptography.SHA1CryptoServiceProvider\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: SHA1CryptoServiceProvider.Finalize()\n  fullName: SHA1CryptoServiceProvider.Finalize()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Cryptography\n  syntax:\n    content: ~SHA1CryptoServiceProvider ();\n    parameters: []\n  overload: System.Security.Cryptography.SHA1CryptoServiceProvider.Finalize*\n  exceptions: []\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA1CryptoServiceProvider.xml\n- uid: System.Security.Cryptography.SHA1CryptoServiceProvider.HashCore(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Security.Cryptography.SHA1CryptoServiceProvider.HashCore(System.Byte[],System.Int32,System.Int32)\n  id: HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.SHA1CryptoServiceProvider\n  langs:\n  - csharp\n  name: HashCore(Byte[], Int32, Int32)\n  nameWithType: SHA1CryptoServiceProvider.HashCore(Byte[], Int32, Int32)\n  fullName: SHA1CryptoServiceProvider.HashCore(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void HashCore (byte[] rgb, int ibStart, int cbSize);\n    parameters:\n    - id: rgb\n      type: System.Byte[]\n      description: ''\n    - id: ibStart\n      type: System.Int32\n      description: ''\n    - id: cbSize\n      type: System.Int32\n      description: ''\n  overload: System.Security.Cryptography.SHA1CryptoServiceProvider.HashCore*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA1CryptoServiceProvider.xml\n- uid: System.Security.Cryptography.SHA1CryptoServiceProvider.HashFinal\n  commentId: M:System.Security.Cryptography.SHA1CryptoServiceProvider.HashFinal\n  id: HashFinal\n  parent: System.Security.Cryptography.SHA1CryptoServiceProvider\n  langs:\n  - csharp\n  name: HashFinal()\n  nameWithType: SHA1CryptoServiceProvider.HashFinal()\n  fullName: SHA1CryptoServiceProvider.HashFinal()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashFinal ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: ''\n  overload: System.Security.Cryptography.SHA1CryptoServiceProvider.HashFinal*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA1CryptoServiceProvider.xml\n- uid: System.Security.Cryptography.SHA1CryptoServiceProvider.Initialize\n  commentId: M:System.Security.Cryptography.SHA1CryptoServiceProvider.Initialize\n  id: Initialize\n  parent: System.Security.Cryptography.SHA1CryptoServiceProvider\n  langs:\n  - csharp\n  name: Initialize()\n  nameWithType: SHA1CryptoServiceProvider.Initialize()\n  fullName: SHA1CryptoServiceProvider.Initialize()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: Initializes an instance of <xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"></xref>.\n  syntax:\n    content: public override void Initialize ();\n    parameters: []\n  overload: System.Security.Cryptography.SHA1CryptoServiceProvider.Initialize*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA1CryptoServiceProvider.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.Cryptography.SHA1\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: SHA1\n  nameWithType: SHA1\n  fullName: System.Security.Cryptography.SHA1\n- uid: System.Security.Cryptography.SHA1CryptoServiceProvider.#ctor\n  parent: System.Security.Cryptography.SHA1CryptoServiceProvider\n  isExternal: false\n  name: SHA1CryptoServiceProvider()\n  nameWithType: SHA1CryptoServiceProvider.SHA1CryptoServiceProvider()\n  fullName: SHA1CryptoServiceProvider.SHA1CryptoServiceProvider()\n- uid: System.Security.Cryptography.SHA1CryptoServiceProvider.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.SHA1CryptoServiceProvider\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SHA1CryptoServiceProvider.Dispose(Boolean)\n  fullName: SHA1CryptoServiceProvider.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.SHA1CryptoServiceProvider.Finalize\n  parent: System.Security.Cryptography.SHA1CryptoServiceProvider\n  isExternal: false\n  name: Finalize()\n  nameWithType: SHA1CryptoServiceProvider.Finalize()\n  fullName: SHA1CryptoServiceProvider.Finalize()\n- uid: System.Security.Cryptography.SHA1CryptoServiceProvider.HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.SHA1CryptoServiceProvider\n  isExternal: false\n  name: HashCore(Byte[], Int32, Int32)\n  nameWithType: SHA1CryptoServiceProvider.HashCore(Byte[], Int32, Int32)\n  fullName: SHA1CryptoServiceProvider.HashCore(Byte[], Int32, Int32)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.SHA1CryptoServiceProvider.HashFinal\n  parent: System.Security.Cryptography.SHA1CryptoServiceProvider\n  isExternal: false\n  name: HashFinal()\n  nameWithType: SHA1CryptoServiceProvider.HashFinal()\n  fullName: SHA1CryptoServiceProvider.HashFinal()\n- uid: System.Security.Cryptography.SHA1CryptoServiceProvider.Initialize\n  parent: System.Security.Cryptography.SHA1CryptoServiceProvider\n  isExternal: false\n  name: Initialize()\n  nameWithType: SHA1CryptoServiceProvider.Initialize()\n  fullName: SHA1CryptoServiceProvider.Initialize()\n- uid: System.Security.Cryptography.SHA1CryptoServiceProvider.#ctor*\n  parent: System.Security.Cryptography.SHA1CryptoServiceProvider\n  isExternal: false\n  name: SHA1CryptoServiceProvider\n  nameWithType: SHA1CryptoServiceProvider.SHA1CryptoServiceProvider\n  fullName: SHA1CryptoServiceProvider.SHA1CryptoServiceProvider\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA1CryptoServiceProvider.xml\n- uid: System.Security.Cryptography.SHA1CryptoServiceProvider.Dispose*\n  parent: System.Security.Cryptography.SHA1CryptoServiceProvider\n  isExternal: false\n  name: Dispose\n  nameWithType: SHA1CryptoServiceProvider.Dispose\n  fullName: SHA1CryptoServiceProvider.Dispose\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA1CryptoServiceProvider.xml\n- uid: System.Security.Cryptography.SHA1CryptoServiceProvider.Finalize*\n  parent: System.Security.Cryptography.SHA1CryptoServiceProvider\n  isExternal: false\n  name: Finalize\n  nameWithType: SHA1CryptoServiceProvider.Finalize\n  fullName: SHA1CryptoServiceProvider.Finalize\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA1CryptoServiceProvider.xml\n- uid: System.Security.Cryptography.SHA1CryptoServiceProvider.HashCore*\n  parent: System.Security.Cryptography.SHA1CryptoServiceProvider\n  isExternal: false\n  name: HashCore\n  nameWithType: SHA1CryptoServiceProvider.HashCore\n  fullName: SHA1CryptoServiceProvider.HashCore\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA1CryptoServiceProvider.xml\n- uid: System.Security.Cryptography.SHA1CryptoServiceProvider.HashFinal*\n  parent: System.Security.Cryptography.SHA1CryptoServiceProvider\n  isExternal: false\n  name: HashFinal\n  nameWithType: SHA1CryptoServiceProvider.HashFinal\n  fullName: SHA1CryptoServiceProvider.HashFinal\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA1CryptoServiceProvider.xml\n- uid: System.Security.Cryptography.SHA1CryptoServiceProvider.Initialize*\n  parent: System.Security.Cryptography.SHA1CryptoServiceProvider\n  isExternal: false\n  name: Initialize\n  nameWithType: SHA1CryptoServiceProvider.Initialize\n  fullName: SHA1CryptoServiceProvider.Initialize\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/SHA1CryptoServiceProvider.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: HashAlgorithm.CanReuseTransform\n  fullName: HashAlgorithm.CanReuseTransform\n- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: HashAlgorithm.CanTransformMultipleBlocks\n  fullName: HashAlgorithm.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.HashAlgorithm.Clear\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Clear()\n  nameWithType: HashAlgorithm.Clear()\n  fullName: HashAlgorithm.Clear()\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Byte[])\n  nameWithType: HashAlgorithm.ComputeHash(Byte[])\n  fullName: HashAlgorithm.ComputeHash(Byte[])\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Stream)\n  nameWithType: HashAlgorithm.ComputeHash(Stream)\n  fullName: HashAlgorithm.ComputeHash(Stream)\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Byte[], Int32, Int32)\n  nameWithType: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)\n  fullName: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)\n- uid: System.Security.Cryptography.SHA1.Create\n  parent: System.Security.Cryptography.SHA1\n  isExternal: false\n  name: Create()\n  nameWithType: SHA1.Create()\n  fullName: SHA1.Create()\n- uid: System.Security.Cryptography.SHA1.Create(System.String)\n  parent: System.Security.Cryptography.SHA1\n  isExternal: false\n  name: Create(String)\n  nameWithType: SHA1.Create(String)\n  fullName: SHA1.Create(String)\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Dispose()\n  nameWithType: HashAlgorithm.Dispose()\n  fullName: HashAlgorithm.Dispose()\n- uid: System.Security.Cryptography.HashAlgorithm.Hash\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Hash\n  nameWithType: HashAlgorithm.Hash\n  fullName: HashAlgorithm.Hash\n- uid: System.Security.Cryptography.HashAlgorithm.HashSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashSize\n  nameWithType: HashAlgorithm.HashSize\n  fullName: HashAlgorithm.HashSize\n- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashSizeValue\n  nameWithType: HashAlgorithm.HashSizeValue\n  fullName: HashAlgorithm.HashSizeValue\n- uid: System.Security.Cryptography.HashAlgorithm.HashValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashValue\n  nameWithType: HashAlgorithm.HashValue\n  fullName: HashAlgorithm.HashValue\n- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: HashAlgorithm.InputBlockSize\n  fullName: HashAlgorithm.InputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: HashAlgorithm.OutputBlockSize\n  fullName: HashAlgorithm.OutputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.State\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: State\n  nameWithType: HashAlgorithm.State\n  fullName: HashAlgorithm.State\n- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  nameWithType: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  fullName: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: TransformFinalBlock(Byte[], Int32, Int32)\n  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)\n  fullName: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)\n"}