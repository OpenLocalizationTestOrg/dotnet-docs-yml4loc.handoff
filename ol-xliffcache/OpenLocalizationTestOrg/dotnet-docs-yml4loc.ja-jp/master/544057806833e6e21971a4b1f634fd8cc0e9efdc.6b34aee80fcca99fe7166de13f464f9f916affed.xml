{"nodes":[{"content":"Assists interoperation between Windows Presentation Foundation (WPF) and Win32 code.","nodes":[{"pos":[0,84],"content":"Assists interoperation between Windows Presentation Foundation (WPF) and Win32 code.","nodes":[{"content":"Assists interoperation between Windows Presentation Foundation (WPF) and Win32 code.","pos":[0,84]}]}],"pos":[665,750],"yaml":true},{"content":"Members of this class allows the caller to have internal access to the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] HWND and the parent HWND of a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>.  The proper security checks are performed by those members.  \n  \n Use this class whenever you need a more specific object based on its HWND.  \n  \n An example scenario is if you need to host a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application. Initialize the <xref:System.Windows.Interop.WindowInteropHelper> with a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window object for the dialog box. You can then get the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window's handle (HWND) from the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property and specify the owner for the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window with the <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> property. The following code example shows how to use <xref:System.Windows.Interop.WindowInteropHelper> when hosting a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application.  \n  \n [!code-csharp[CorePseudocode#WindowInteropHelper](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#windowinterophelper)]\n [!code-vb[CorePseudocode#WindowInteropHelper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#windowinterophelper)]  \n  \n Another scenario supported by this class is to obtain a <xref:System.Windows.Interop.HwndSource> object from a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> object. The <xref:System.Windows.Interop.HwndSource> enables direct processing of [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] messages through the <xref:System.Windows.Interop.HwndSource.AddHook%2A> method. By using <xref:System.Windows.Interop.HwndSource> and <xref:System.Windows.Interop.HwndSource.AddHook%2A> in place of a <xref:System.Windows.Window> you can still handle messages that have no equivalent or handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. Create a <xref:System.Windows.Interop.WindowInteropHelper> with the <xref:System.Windows.Window> source, then call <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> on the <xref:System.Windows.Interop.WindowInteropHelper> to get from HWND to <xref:System.Windows.Interop.HwndSource>.","nodes":[{"pos":[0,326],"content":"Members of this class allows the caller to have internal access to the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] HWND and the parent HWND of a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>.  The proper security checks are performed by those members.","nodes":[{"content":"Members of this class allows the caller to have internal access to the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> HWND and the parent HWND of a <ph id=\"ph2\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> <ph id=\"ph3\">&lt;xref:System.Windows.Window&gt;</ph>.","pos":[0,266],"source":"Members of this class allows the caller to have internal access to the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] HWND and the parent HWND of a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>."},{"content":"The proper security checks are performed by those members.","pos":[268,326]}]},{"pos":[333,407],"content":"Use this class whenever you need a more specific object based on its HWND.","nodes":[{"content":"Use this class whenever you need a more specific object based on its HWND.","pos":[0,74]}]},{"pos":[414,1456],"content":"An example scenario is if you need to host a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application. Initialize the <xref:System.Windows.Interop.WindowInteropHelper> with a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window object for the dialog box. You can then get the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window's handle (HWND) from the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property and specify the owner for the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window with the <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> property. The following code example shows how to use <xref:System.Windows.Interop.WindowInteropHelper> when hosting a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application.","nodes":[{"content":"An example scenario is if you need to host a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> dialog box in a <ph id=\"ph2\">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> application.","pos":[0,209],"source":"An example scenario is if you need to host a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application."},{"content":"Initialize the <ph id=\"ph1\">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph> with a <ph id=\"ph2\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> window object for the dialog box.","pos":[210,387],"source":" Initialize the <xref:System.Windows.Interop.WindowInteropHelper> with a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window object for the dialog box."},{"content":"You can then get the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> window's handle (HWND) from the <ph id=\"ph2\">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph> property and specify the owner for the <ph id=\"ph3\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> window with the <ph id=\"ph4\">&lt;xref:System.Windows.Interop.WindowInteropHelper.Owner%2A&gt;</ph> property.","pos":[388,768],"source":" You can then get the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window's handle (HWND) from the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property and specify the owner for the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window with the <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> property."},{"content":"The following code example shows how to use <ph id=\"ph1\">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph> when hosting a <ph id=\"ph2\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> dialog box in a <ph id=\"ph3\">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> application.","pos":[769,1042],"source":" The following code example shows how to use <xref:System.Windows.Interop.WindowInteropHelper> when hosting a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application."}]},{"pos":[1463,1777],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>CorePseudocode#WindowInteropHelper<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#windowinterophelper)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>CorePseudocode#WindowInteropHelper<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#windowinterophelper)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[CorePseudocode#WindowInteropHelper](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#windowinterophelper)]\n [!code-vb[CorePseudocode#WindowInteropHelper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#windowinterophelper)]"},{"pos":[1784,2807],"content":"Another scenario supported by this class is to obtain a <xref:System.Windows.Interop.HwndSource> object from a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> object. The <xref:System.Windows.Interop.HwndSource> enables direct processing of [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] messages through the <xref:System.Windows.Interop.HwndSource.AddHook%2A> method. By using <xref:System.Windows.Interop.HwndSource> and <xref:System.Windows.Interop.HwndSource.AddHook%2A> in place of a <xref:System.Windows.Window> you can still handle messages that have no equivalent or handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. Create a <xref:System.Windows.Interop.WindowInteropHelper> with the <xref:System.Windows.Window> source, then call <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> on the <xref:System.Windows.Interop.WindowInteropHelper> to get from HWND to <xref:System.Windows.Interop.HwndSource>.","nodes":[{"content":"Another scenario supported by this class is to obtain a <ph id=\"ph1\">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> object from a <ph id=\"ph2\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> <ph id=\"ph3\">&lt;xref:System.Windows.Window&gt;</ph> object.","pos":[0,219],"source":"Another scenario supported by this class is to obtain a <xref:System.Windows.Interop.HwndSource> object from a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> object."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> enables direct processing of <ph id=\"ph2\">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> messages through the <ph id=\"ph3\">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph> method.","pos":[220,438],"source":" The <xref:System.Windows.Interop.HwndSource> enables direct processing of [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] messages through the <xref:System.Windows.Interop.HwndSource.AddHook%2A> method."},{"content":"By using <ph id=\"ph1\">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph> in place of a <ph id=\"ph3\">&lt;xref:System.Windows.Window&gt;</ph> you can still handle messages that have no equivalent or handling in <ph id=\"ph4\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>.","pos":[439,729],"source":" By using <xref:System.Windows.Interop.HwndSource> and <xref:System.Windows.Interop.HwndSource.AddHook%2A> in place of a <xref:System.Windows.Window> you can still handle messages that have no equivalent or handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]."},{"content":"Create a <ph id=\"ph1\">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph> with the <ph id=\"ph2\">&lt;xref:System.Windows.Window&gt;</ph> source, then call <ph id=\"ph3\">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph> on the <ph id=\"ph4\">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph> to get from HWND to <ph id=\"ph5\">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>.","pos":[730,1023],"source":" Create a <xref:System.Windows.Interop.WindowInteropHelper> with the <xref:System.Windows.Window> source, then call <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> on the <xref:System.Windows.Interop.WindowInteropHelper> to get from HWND to <xref:System.Windows.Interop.HwndSource>."}]}],"pos":[761,3580],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Interop.WindowInteropHelper\"></xref> class for a specified [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window.","nodes":[{"pos":[0,197],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Interop.WindowInteropHelper\"&gt;&lt;/xref&gt;</ph> class for a specified <ph id=\"ph2\">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> window.","source":"Initializes a new instance of the <xref href=\"System.Windows.Interop.WindowInteropHelper\"></xref> class for a specified [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window."}],"pos":[5067,5265],"yaml":true},{"content":"The window can be a dialog box, or a window that is otherwise not suitable for being hosted within the bounds of a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application.","nodes":[{"pos":[0,191],"content":"The window can be a dialog box, or a window that is otherwise not suitable for being hosted within the bounds of a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> application.","source":"The window can be a dialog box, or a window that is otherwise not suitable for being hosted within the bounds of a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application."}],"pos":[5276,5468],"yaml":true,"extradata":"MT"},{"content":"A [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window object.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> window object.","source":"A [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window object."}],"pos":[5636,5725],"yaml":true},{"content":"Creates the HWND of the window if the HWND has not been created yet.","nodes":[{"pos":[0,68],"content":"Creates the HWND of the window if the HWND has not been created yet.","nodes":[{"content":"Creates the HWND of the window if the HWND has not been created yet.","pos":[0,68]}]}],"pos":[6790,6859],"yaml":true},{"content":"Use the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method when you want to separate window handle (HWND) creation from the actual showing of the managed <xref:System.Windows.Window>. This is useful when you have an automation client that can accomplish its tasks without the need for showing a window.  \n  \n If the native window has not yet been created, this method creates the native window, sets the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property, and returns the HWND. If the native window has been created already, the handle of the existing native window is returned.  \n  \n If the native window is created as a result of calling this method, the <xref:System.Windows.Window.SourceInitialized> event is raised.  \n  \n Querying the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property after the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called returns the existing window handle. The visual tree is not attached to the window until after the <xref:System.Windows.Window.Show%2A> method is called.  \n  \n Calling the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method more than one time does not create new window handles. Calling the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method when the handle has already been created by a call to the <xref:System.Windows.Window.Show%2A> method does not create a new window handle. A native window is only created when no handle exists when the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called.  \n  \n Window properties that are set by using native window APIs via p/invoke may not appear in the managed window APIs. For example, if you set the window to be topmost by using the native MS_EX_TOPMOST flag after the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called, the <xref:System.Windows.Window.Topmost%2A> property is not guaranteed to reflect the native setting.","nodes":[{"pos":[0,324],"content":"Use the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method when you want to separate window handle (HWND) creation from the actual showing of the managed <xref:System.Windows.Window>. This is useful when you have an automation client that can accomplish its tasks without the need for showing a window.","nodes":[{"content":"Use the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method when you want to separate window handle (HWND) creation from the actual showing of the managed <xref:System.Windows.Window>. This is useful when you have an automation client that can accomplish its tasks without the need for showing a window.","pos":[0,324],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph> method when you want to separate window handle (HWND) creation from the actual showing of the managed <ph id=\"ph2\">&lt;xref:System.Windows.Window&gt;</ph>.","pos":[0,205],"source":"Use the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method when you want to separate window handle (HWND) creation from the actual showing of the managed <xref:System.Windows.Window>."},{"content":"This is useful when you have an automation client that can accomplish its tasks without the need for showing a window.","pos":[206,324]}]}]},{"pos":[331,618],"content":"If the native window has not yet been created, this method creates the native window, sets the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property, and returns the HWND. If the native window has been created already, the handle of the existing native window is returned.","nodes":[{"content":"If the native window has not yet been created, this method creates the native window, sets the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property, and returns the HWND. If the native window has been created already, the handle of the existing native window is returned.","pos":[0,287],"nodes":[{"content":"If the native window has not yet been created, this method creates the native window, sets the <ph id=\"ph1\">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph> property, and returns the HWND.","pos":[0,186],"source":"If the native window has not yet been created, this method creates the native window, sets the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property, and returns the HWND."},{"content":"If the native window has been created already, the handle of the existing native window is returned.","pos":[187,287]}]}]},{"pos":[625,760],"content":"If the native window is created as a result of calling this method, the <xref:System.Windows.Window.SourceInitialized> event is raised.","nodes":[{"content":"If the native window is created as a result of calling this method, the <ph id=\"ph1\">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph> event is raised.","pos":[0,135],"source":"If the native window is created as a result of calling this method, the <xref:System.Windows.Window.SourceInitialized> event is raised."}]},{"pos":[767,1094],"content":"Querying the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property after the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called returns the existing window handle. The visual tree is not attached to the window until after the <xref:System.Windows.Window.Show%2A> method is called.","nodes":[{"content":"Querying the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property after the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called returns the existing window handle. The visual tree is not attached to the window until after the <xref:System.Windows.Window.Show%2A> method is called.","pos":[0,327],"nodes":[{"content":"Querying the <ph id=\"ph1\">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph> property after the <ph id=\"ph2\">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph> method is called returns the existing window handle.","pos":[0,210],"source":"Querying the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property after the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called returns the existing window handle."},{"content":"The visual tree is not attached to the window until after the <ph id=\"ph1\">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> method is called.","pos":[211,327],"source":" The visual tree is not attached to the window until after the <xref:System.Windows.Window.Show%2A> method is called."}]}]},{"pos":[1101,1611],"content":"Calling the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method more than one time does not create new window handles. Calling the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method when the handle has already been created by a call to the <xref:System.Windows.Window.Show%2A> method does not create a new window handle. A native window is only created when no handle exists when the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called.","nodes":[{"content":"Calling the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method more than one time does not create new window handles. Calling the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method when the handle has already been created by a call to the <xref:System.Windows.Window.Show%2A> method does not create a new window handle. A native window is only created when no handle exists when the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called.","pos":[0,510],"nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph> method more than one time does not create new window handles.","pos":[0,139],"source":"Calling the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method more than one time does not create new window handles."},{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph> method when the handle has already been created by a call to the <ph id=\"ph2\">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> method does not create a new window handle.","pos":[140,363],"source":" Calling the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method when the handle has already been created by a call to the <xref:System.Windows.Window.Show%2A> method does not create a new window handle."},{"content":"A native window is only created when no handle exists when the <ph id=\"ph1\">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph> method is called.","pos":[364,510],"source":" A native window is only created when no handle exists when the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called."}]}]},{"pos":[1618,2016],"content":"Window properties that are set by using native window APIs via p/invoke may not appear in the managed window APIs. For example, if you set the window to be topmost by using the native MS_EX_TOPMOST flag after the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called, the <xref:System.Windows.Window.Topmost%2A> property is not guaranteed to reflect the native setting.","nodes":[{"content":"Window properties that are set by using native window APIs via p/invoke may not appear in the managed window APIs. For example, if you set the window to be topmost by using the native MS_EX_TOPMOST flag after the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called, the <xref:System.Windows.Window.Topmost%2A> property is not guaranteed to reflect the native setting.","pos":[0,398],"nodes":[{"content":"Window properties that are set by using native window APIs via p/invoke may not appear in the managed window APIs.","pos":[0,114]},{"content":"For example, if you set the window to be topmost by using the native MS_EX_TOPMOST flag after the <ph id=\"ph1\">&lt;xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A&gt;</ph> method is called, the <ph id=\"ph2\">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property is not guaranteed to reflect the native setting.","pos":[115,398],"source":" For example, if you set the window to be topmost by using the native MS_EX_TOPMOST flag after the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called, the <xref:System.Windows.Window.Topmost%2A> property is not guaranteed to reflect the native setting."}]}]}],"pos":[6870,8899],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.IntPtr\"></xref> that represents the HWND.","nodes":[{"pos":[0,63],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IntPtr\"&gt;&lt;/xref&gt;</ph> that represents the HWND.","source":"An <xref href=\"System.IntPtr\"></xref> that represents the HWND."}],"pos":[9080,9144],"yaml":true},{"content":"Gets the window handle for a [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window that is used to create this <xref href=\"System.Windows.Interop.WindowInteropHelper\"></xref>.","nodes":[{"pos":[0,198],"content":"Gets the window handle for a <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> window that is used to create this <ph id=\"ph2\">&lt;xref href=\"System.Windows.Interop.WindowInteropHelper\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the window handle for a [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window that is used to create this <xref href=\"System.Windows.Interop.WindowInteropHelper\"></xref>."}],"pos":[10242,10441],"yaml":true},{"content":"The [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window handle (HWND).","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> window handle (HWND).","source":"The [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window handle (HWND)."}],"pos":[10607,10703],"yaml":true},{"content":"Gets or sets the handle of the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] owner window.","nodes":[{"pos":[0,114],"content":"Gets or sets the handle of the <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> owner window.","source":"Gets or sets the handle of the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] owner window."}],"pos":[11787,11902],"yaml":true},{"content":"You can reparent windows by setting this property. As is true for general [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] programming, do not reparent windows that are already in use.","nodes":[{"pos":[0,199],"content":"You can reparent windows by setting this property. As is true for general [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] programming, do not reparent windows that are already in use.","nodes":[{"content":"You can reparent windows by setting this property.","pos":[0,50]},{"content":"As is true for general <ph id=\"ph1\">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> programming, do not reparent windows that are already in use.","pos":[51,199],"source":" As is true for general [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] programming, do not reparent windows that are already in use."}]}],"pos":[11913,12113],"yaml":true,"extradata":"MT"},{"content":"The owner window handle (HWND).","nodes":[{"pos":[0,31],"content":"The owner window handle (HWND).","nodes":[{"content":"The owner window handle (HWND).","pos":[0,31]}]}],"pos":[12330,12362],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Interop.WindowInteropHelper\n  commentId: T:System.Windows.Interop.WindowInteropHelper\n  id: WindowInteropHelper\n  children:\n  - System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)\n  - System.Windows.Interop.WindowInteropHelper.EnsureHandle\n  - System.Windows.Interop.WindowInteropHelper.Handle\n  - System.Windows.Interop.WindowInteropHelper.Owner\n  langs:\n  - csharp\n  name: WindowInteropHelper\n  nameWithType: WindowInteropHelper\n  fullName: System.Windows.Interop.WindowInteropHelper\n  type: Class\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Interop\n  summary: Assists interoperation between Windows Presentation Foundation (WPF) and Win32 code.\n  remarks: \"Members of this class allows the caller to have internal access to the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] HWND and the parent HWND of a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>.  The proper security checks are performed by those members.  \\n  \\n Use this class whenever you need a more specific object based on its HWND.  \\n  \\n An example scenario is if you need to host a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application. Initialize the <xref:System.Windows.Interop.WindowInteropHelper> with a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window object for the dialog box. You can then get the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window's handle (HWND) from the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property and specify the owner for the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window with the <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> property. The following code example shows how to use <xref:System.Windows.Interop.WindowInteropHelper> when hosting a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] dialog box in a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application.  \\n  \\n [!code-csharp[CorePseudocode#WindowInteropHelper](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#windowinterophelper)]\\n [!code-vb[CorePseudocode#WindowInteropHelper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#windowinterophelper)]  \\n  \\n Another scenario supported by this class is to obtain a <xref:System.Windows.Interop.HwndSource> object from a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> object. The <xref:System.Windows.Interop.HwndSource> enables direct processing of [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] messages through the <xref:System.Windows.Interop.HwndSource.AddHook%2A> method. By using <xref:System.Windows.Interop.HwndSource> and <xref:System.Windows.Interop.HwndSource.AddHook%2A> in place of a <xref:System.Windows.Window> you can still handle messages that have no equivalent or handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. Create a <xref:System.Windows.Interop.WindowInteropHelper> with the <xref:System.Windows.Window> source, then call <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> on the <xref:System.Windows.Interop.WindowInteropHelper> to get from HWND to <xref:System.Windows.Interop.HwndSource>.\"\n  syntax:\n    content: public sealed class WindowInteropHelper\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/WindowInteropHelper.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)\n  commentId: M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)\n  id: '#ctor(System.Windows.Window)'\n  parent: System.Windows.Interop.WindowInteropHelper\n  langs:\n  - csharp\n  name: WindowInteropHelper(Window)\n  nameWithType: WindowInteropHelper.WindowInteropHelper(Window)\n  fullName: WindowInteropHelper.WindowInteropHelper(Window)\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Interop\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Interop.WindowInteropHelper\"></xref> class for a specified [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window.\n  remarks: The window can be a dialog box, or a window that is otherwise not suitable for being hosted within the bounds of a [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] application.\n  syntax:\n    content: public WindowInteropHelper (System.Windows.Window window);\n    parameters:\n    - id: window\n      type: System.Windows.Window\n      description: A [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] window object.\n  overload: System.Windows.Interop.WindowInteropHelper.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/WindowInteropHelper.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle\n  commentId: M:System.Windows.Interop.WindowInteropHelper.EnsureHandle\n  id: EnsureHandle\n  parent: System.Windows.Interop.WindowInteropHelper\n  langs:\n  - csharp\n  name: EnsureHandle()\n  nameWithType: WindowInteropHelper.EnsureHandle()\n  fullName: WindowInteropHelper.EnsureHandle()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Interop\n  summary: Creates the HWND of the window if the HWND has not been created yet.\n  remarks: \"Use the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method when you want to separate window handle (HWND) creation from the actual showing of the managed <xref:System.Windows.Window>. This is useful when you have an automation client that can accomplish its tasks without the need for showing a window.  \\n  \\n If the native window has not yet been created, this method creates the native window, sets the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property, and returns the HWND. If the native window has been created already, the handle of the existing native window is returned.  \\n  \\n If the native window is created as a result of calling this method, the <xref:System.Windows.Window.SourceInitialized> event is raised.  \\n  \\n Querying the <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> property after the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called returns the existing window handle. The visual tree is not attached to the window until after the <xref:System.Windows.Window.Show%2A> method is called.  \\n  \\n Calling the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method more than one time does not create new window handles. Calling the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method when the handle has already been created by a call to the <xref:System.Windows.Window.Show%2A> method does not create a new window handle. A native window is only created when no handle exists when the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called.  \\n  \\n Window properties that are set by using native window APIs via p/invoke may not appear in the managed window APIs. For example, if you set the window to be topmost by using the native MS_EX_TOPMOST flag after the <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> method is called, the <xref:System.Windows.Window.Topmost%2A> property is not guaranteed to reflect the native setting.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public IntPtr EnsureHandle ();\n    parameters: []\n    return:\n      type: System.IntPtr\n      description: An <xref href=\"System.IntPtr\"></xref> that represents the HWND.\n  overload: System.Windows.Interop.WindowInteropHelper.EnsureHandle*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/WindowInteropHelper.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Interop.WindowInteropHelper.Handle\n  commentId: P:System.Windows.Interop.WindowInteropHelper.Handle\n  id: Handle\n  parent: System.Windows.Interop.WindowInteropHelper\n  langs:\n  - csharp\n  name: Handle\n  nameWithType: WindowInteropHelper.Handle\n  fullName: WindowInteropHelper.Handle\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Interop\n  summary: Gets the window handle for a [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window that is used to create this <xref href=\"System.Windows.Interop.WindowInteropHelper\"></xref>.\n  syntax:\n    content: >-\n      [get: System.Security.SecurityCritical]\n\n      public IntPtr Handle { get; }\n    return:\n      type: System.IntPtr\n      description: The [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window handle (HWND).\n  overload: System.Windows.Interop.WindowInteropHelper.Handle*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecurityCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/WindowInteropHelper.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Interop.WindowInteropHelper.Owner\n  commentId: P:System.Windows.Interop.WindowInteropHelper.Owner\n  id: Owner\n  parent: System.Windows.Interop.WindowInteropHelper\n  langs:\n  - csharp\n  name: Owner\n  nameWithType: WindowInteropHelper.Owner\n  fullName: WindowInteropHelper.Owner\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Interop\n  summary: Gets or sets the handle of the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] owner window.\n  remarks: You can reparent windows by setting this property. As is true for general [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] programming, do not reparent windows that are already in use.\n  syntax:\n    content: >-\n      [get: System.Security.SecurityCritical]\n\n      [set: System.Security.SecurityCritical]\n\n      public IntPtr Owner { get; set; }\n    return:\n      type: System.IntPtr\n      description: The owner window handle (HWND).\n  overload: System.Windows.Interop.WindowInteropHelper.Owner*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecurityCritical'\n  - type: 'set: System.Security.SecurityCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/WindowInteropHelper.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)\n  parent: System.Windows.Interop.WindowInteropHelper\n  isExternal: false\n  name: WindowInteropHelper(Window)\n  nameWithType: WindowInteropHelper.WindowInteropHelper(Window)\n  fullName: WindowInteropHelper.WindowInteropHelper(Window)\n- uid: System.Windows.Window\n  parent: System.Windows\n  isExternal: false\n  name: Window\n  nameWithType: Window\n  fullName: System.Windows.Window\n- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle\n  parent: System.Windows.Interop.WindowInteropHelper\n  isExternal: false\n  name: EnsureHandle()\n  nameWithType: WindowInteropHelper.EnsureHandle()\n  fullName: WindowInteropHelper.EnsureHandle()\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Windows.Interop.WindowInteropHelper.Handle\n  parent: System.Windows.Interop.WindowInteropHelper\n  isExternal: false\n  name: Handle\n  nameWithType: WindowInteropHelper.Handle\n  fullName: WindowInteropHelper.Handle\n- uid: System.Windows.Interop.WindowInteropHelper.Owner\n  parent: System.Windows.Interop.WindowInteropHelper\n  isExternal: false\n  name: Owner\n  nameWithType: WindowInteropHelper.Owner\n  fullName: WindowInteropHelper.Owner\n- uid: System.Windows.Interop.WindowInteropHelper.#ctor*\n  parent: System.Windows.Interop.WindowInteropHelper\n  isExternal: false\n  name: WindowInteropHelper\n  nameWithType: WindowInteropHelper.WindowInteropHelper\n  fullName: WindowInteropHelper.WindowInteropHelper\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/WindowInteropHelper.xml\n- uid: System.Windows.Interop.WindowInteropHelper.EnsureHandle*\n  parent: System.Windows.Interop.WindowInteropHelper\n  isExternal: false\n  name: EnsureHandle\n  nameWithType: WindowInteropHelper.EnsureHandle\n  fullName: WindowInteropHelper.EnsureHandle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/WindowInteropHelper.xml\n- uid: System.Windows.Interop.WindowInteropHelper.Handle*\n  parent: System.Windows.Interop.WindowInteropHelper\n  isExternal: false\n  name: Handle\n  nameWithType: WindowInteropHelper.Handle\n  fullName: WindowInteropHelper.Handle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/WindowInteropHelper.xml\n- uid: System.Windows.Interop.WindowInteropHelper.Owner*\n  parent: System.Windows.Interop.WindowInteropHelper\n  isExternal: false\n  name: Owner\n  nameWithType: WindowInteropHelper.Owner\n  fullName: WindowInteropHelper.Owner\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/WindowInteropHelper.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}