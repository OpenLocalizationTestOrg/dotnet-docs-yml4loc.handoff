{"nodes":[{"content":"Specifies how mathematical rounding methods should process a number that is midway between two numbers.","nodes":[{"pos":[0,103],"content":"Specifies how mathematical rounding methods should process a number that is midway between two numbers.","nodes":[{"content":"Specifies how mathematical rounding methods should process a number that is midway between two numbers.","pos":[0,103]}]}],"pos":[467,571],"yaml":true},{"content":"Use <xref:System.MidpointRounding> with appropriate overloads of <xref:System.Math.Round%2A?displayProperty=fullName> to provide more control of the rounding process.  \n  \n A rounding operation takes an original number with an implicit or specified precision; examines the next digit, which is at that precision plus one; and returns the nearest number with the same precision as the original number. For positive numbers, if the next digit is from 0 through 4, the nearest number is toward negative infinity. If the next digit is from 6 through 9, the nearest number is toward positive infinity. For negative numbers, if the next digit is from 0 through 4, the nearest number is toward positive infinity. If the next digit is from 6 through 9, the nearest number is toward negative infinity.  \n  \n In the previous cases, the <xref:System.MidpointRounding> enumeration does not affect the result of the rounding operation. However, if the next digit is 5, which is the midpoint between two possible results, and all remaining digits are zero or there are no remaining digits, the nearest number is ambiguous. In this case, the <xref:System.MidpointRounding> enumeration enables you to specify whether the rounding operation returns the nearest number away from zero or the nearest even number.  \n  \n The following table demonstrates the results of rounding some negative and positive numbers in conjunction with the values of <xref:System.MidpointRounding>. The precision used to round the numbers is zero, which means the number after the decimal point affects the rounding operation. For example, for the number -2.5, the digit after the decimal point is 5. Because that digit is the midpoint, you can use a <xref:System.MidpointRounding> value to determine the result of rounding. If AwayFromZero is specified, -3 is returned because it is the nearest number away from zero with a precision of zero. If ToEven is specified, -2 is returned because it is the nearest even number with a precision of zero.  \n  \n|Original number|AwayFromZero|ToEven|  \n|---------------------|------------------|------------|  \n|3.5|4|4|  \n|2.8|3|3|  \n|2.5|3|2|  \n|2.1|2|2|  \n|-2.1|-2|-2|  \n|-2.5|-3|-2|  \n|-2.8|-3|-3|  \n|-3.5|-4|-4|","nodes":[{"pos":[0,166],"content":"Use <xref:System.MidpointRounding> with appropriate overloads of <xref:System.Math.Round%2A?displayProperty=fullName> to provide more control of the rounding process.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.MidpointRounding&gt;</ph> with appropriate overloads of <ph id=\"ph2\">&lt;xref:System.Math.Round%2A?displayProperty=fullName&gt;</ph> to provide more control of the rounding process.","pos":[0,166],"source":"Use <xref:System.MidpointRounding> with appropriate overloads of <xref:System.Math.Round%2A?displayProperty=fullName> to provide more control of the rounding process."}]},{"pos":[173,792],"content":"A rounding operation takes an original number with an implicit or specified precision; examines the next digit, which is at that precision plus one; and returns the nearest number with the same precision as the original number. For positive numbers, if the next digit is from 0 through 4, the nearest number is toward negative infinity. If the next digit is from 6 through 9, the nearest number is toward positive infinity. For negative numbers, if the next digit is from 0 through 4, the nearest number is toward positive infinity. If the next digit is from 6 through 9, the nearest number is toward negative infinity.","nodes":[{"content":"A rounding operation takes an original number with an implicit or specified precision; examines the next digit, which is at that precision plus one; and returns the nearest number with the same precision as the original number. For positive numbers, if the next digit is from 0 through 4, the nearest number is toward negative infinity. If the next digit is from 6 through 9, the nearest number is toward positive infinity. For negative numbers, if the next digit is from 0 through 4, the nearest number is toward positive infinity. If the next digit is from 6 through 9, the nearest number is toward negative infinity.","pos":[0,619],"nodes":[{"content":"A rounding operation takes an original number with an implicit or specified precision; examines the next digit, which is at that precision plus one; and returns the nearest number with the same precision as the original number.","pos":[0,227]},{"content":"For positive numbers, if the next digit is from 0 through 4, the nearest number is toward negative infinity.","pos":[228,336]},{"content":"If the next digit is from 6 through 9, the nearest number is toward positive infinity.","pos":[337,423]},{"content":"For negative numbers, if the next digit is from 0 through 4, the nearest number is toward positive infinity.","pos":[424,532]},{"content":"If the next digit is from 6 through 9, the nearest number is toward negative infinity.","pos":[533,619]}]}]},{"pos":[799,1293],"content":"In the previous cases, the <xref:System.MidpointRounding> enumeration does not affect the result of the rounding operation. However, if the next digit is 5, which is the midpoint between two possible results, and all remaining digits are zero or there are no remaining digits, the nearest number is ambiguous. In this case, the <xref:System.MidpointRounding> enumeration enables you to specify whether the rounding operation returns the nearest number away from zero or the nearest even number.","nodes":[{"content":"In the previous cases, the <xref:System.MidpointRounding> enumeration does not affect the result of the rounding operation. However, if the next digit is 5, which is the midpoint between two possible results, and all remaining digits are zero or there are no remaining digits, the nearest number is ambiguous. In this case, the <xref:System.MidpointRounding> enumeration enables you to specify whether the rounding operation returns the nearest number away from zero or the nearest even number.","pos":[0,494],"nodes":[{"content":"In the previous cases, the <ph id=\"ph1\">&lt;xref:System.MidpointRounding&gt;</ph> enumeration does not affect the result of the rounding operation.","pos":[0,123],"source":"In the previous cases, the <xref:System.MidpointRounding> enumeration does not affect the result of the rounding operation."},{"content":"However, if the next digit is 5, which is the midpoint between two possible results, and all remaining digits are zero or there are no remaining digits, the nearest number is ambiguous.","pos":[124,309]},{"content":"In this case, the <ph id=\"ph1\">&lt;xref:System.MidpointRounding&gt;</ph> enumeration enables you to specify whether the rounding operation returns the nearest number away from zero or the nearest even number.","pos":[310,494],"source":" In this case, the <xref:System.MidpointRounding> enumeration enables you to specify whether the rounding operation returns the nearest number away from zero or the nearest even number."}]}]},{"pos":[1300,2005],"content":"The following table demonstrates the results of rounding some negative and positive numbers in conjunction with the values of <xref:System.MidpointRounding>. The precision used to round the numbers is zero, which means the number after the decimal point affects the rounding operation. For example, for the number -2.5, the digit after the decimal point is 5. Because that digit is the midpoint, you can use a <xref:System.MidpointRounding> value to determine the result of rounding. If AwayFromZero is specified, -3 is returned because it is the nearest number away from zero with a precision of zero. If ToEven is specified, -2 is returned because it is the nearest even number with a precision of zero.","nodes":[{"content":"The following table demonstrates the results of rounding some negative and positive numbers in conjunction with the values of <xref:System.MidpointRounding>. The precision used to round the numbers is zero, which means the number after the decimal point affects the rounding operation. For example, for the number -2.5, the digit after the decimal point is 5. Because that digit is the midpoint, you can use a <xref:System.MidpointRounding> value to determine the result of rounding. If AwayFromZero is specified, -3 is returned because it is the nearest number away from zero with a precision of zero. If ToEven is specified, -2 is returned because it is the nearest even number with a precision of zero.","pos":[0,705],"nodes":[{"content":"The following table demonstrates the results of rounding some negative and positive numbers in conjunction with the values of <ph id=\"ph1\">&lt;xref:System.MidpointRounding&gt;</ph>.","pos":[0,157],"source":"The following table demonstrates the results of rounding some negative and positive numbers in conjunction with the values of <xref:System.MidpointRounding>."},{"content":"The precision used to round the numbers is zero, which means the number after the decimal point affects the rounding operation.","pos":[158,285]},{"content":"For example, for the number -2.5, the digit after the decimal point is 5.","pos":[286,359]},{"content":"Because that digit is the midpoint, you can use a <ph id=\"ph1\">&lt;xref:System.MidpointRounding&gt;</ph> value to determine the result of rounding.","pos":[360,483],"source":" Because that digit is the midpoint, you can use a <xref:System.MidpointRounding> value to determine the result of rounding."},{"content":"If AwayFromZero is specified, -3 is returned because it is the nearest number away from zero with a precision of zero.","pos":[484,602]},{"content":"If ToEven is specified, -2 is returned because it is the nearest even number with a precision of zero.","pos":[603,705]}]}]},{"pos":[2012,2027],"content":"Original number","nodes":[{"content":"Original number","pos":[0,15]}]},{"pos":[2028,2040],"content":"AwayFromZero","nodes":[{"content":"AwayFromZero","pos":[0,12]}]},{"pos":[2041,2047],"content":"ToEven","nodes":[{"content":"ToEven","pos":[0,6]}]},{"pos":[2110,2113],"content":"3.5","nodes":[{"content":"3.5","pos":[0,3]}]},{"pos":[2114,2115],"content":"4","nodes":[{"content":"4","pos":[0,1]}]},{"pos":[2116,2117],"content":"4","nodes":[{"content":"4","pos":[0,1]}]},{"pos":[2122,2125],"content":"2.8","nodes":[{"content":"2.8","pos":[0,3]}]},{"pos":[2126,2127],"content":"3","nodes":[{"content":"3","pos":[0,1]}]},{"pos":[2128,2129],"content":"3","nodes":[{"content":"3","pos":[0,1]}]},{"pos":[2134,2137],"content":"2.5","nodes":[{"content":"2.5","pos":[0,3]}]},{"pos":[2138,2139],"content":"3","nodes":[{"content":"3","pos":[0,1]}]},{"pos":[2140,2141],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[2146,2149],"content":"2.1","nodes":[{"content":"2.1","pos":[0,3]}]},{"pos":[2150,2151],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[2152,2153],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[2158,2162],"content":"-2.1","nodes":[{"content":"-2.1","pos":[0,4]}]},{"pos":[2163,2165],"content":"-2","nodes":[{"content":"-2","pos":[0,2]}]},{"pos":[2166,2168],"content":"-2","nodes":[{"content":"-2","pos":[0,2]}]},{"pos":[2173,2177],"content":"-2.5","nodes":[{"content":"-2.5","pos":[0,4]}]},{"pos":[2178,2180],"content":"-3","nodes":[{"content":"-3","pos":[0,2]}]},{"pos":[2181,2183],"content":"-2","nodes":[{"content":"-2","pos":[0,2]}]},{"pos":[2188,2192],"content":"-2.8","nodes":[{"content":"-2.8","pos":[0,4]}]},{"pos":[2193,2195],"content":"-3","nodes":[{"content":"-3","pos":[0,2]}]},{"pos":[2196,2198],"content":"-3","nodes":[{"content":"-3","pos":[0,2]}]},{"pos":[2203,2207],"content":"-3.5","nodes":[{"content":"-3.5","pos":[0,4]}]},{"pos":[2208,2210],"content":"-4","nodes":[{"content":"-4","pos":[0,2]}]},{"pos":[2211,2213],"content":"-4","nodes":[{"content":"-4","pos":[0,2]}]}],"pos":[582,2816],"yaml":true,"extradata":"MT"},{"content":"When a number is halfway between two others, it is rounded toward the nearest number that is away from zero.","nodes":[{"pos":[0,108],"content":"When a number is halfway between two others, it is rounded toward the nearest number that is away from zero.","nodes":[{"content":"When a number is halfway between two others, it is rounded toward the nearest number that is away from zero.","pos":[0,108]}]}],"pos":[5089,5198],"yaml":true},{"content":"When a number is halfway between two others, it is rounded toward the nearest even number.","nodes":[{"pos":[0,90],"content":"When a number is halfway between two others, it is rounded toward the nearest even number.","nodes":[{"content":"When a number is halfway between two others, it is rounded toward the nearest even number.","pos":[0,90]}]}],"pos":[6667,6758],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.MidpointRounding\n  commentId: T:System.MidpointRounding\n  id: MidpointRounding\n  children:\n  - System.MidpointRounding.AwayFromZero\n  - System.MidpointRounding.ToEven\n  langs:\n  - csharp\n  name: MidpointRounding\n  nameWithType: MidpointRounding\n  fullName: System.MidpointRounding\n  type: Enum\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Specifies how mathematical rounding methods should process a number that is midway between two numbers.\n  remarks: \"Use <xref:System.MidpointRounding> with appropriate overloads of <xref:System.Math.Round%2A?displayProperty=fullName> to provide more control of the rounding process.  \\n  \\n A rounding operation takes an original number with an implicit or specified precision; examines the next digit, which is at that precision plus one; and returns the nearest number with the same precision as the original number. For positive numbers, if the next digit is from 0 through 4, the nearest number is toward negative infinity. If the next digit is from 6 through 9, the nearest number is toward positive infinity. For negative numbers, if the next digit is from 0 through 4, the nearest number is toward positive infinity. If the next digit is from 6 through 9, the nearest number is toward negative infinity.  \\n  \\n In the previous cases, the <xref:System.MidpointRounding> enumeration does not affect the result of the rounding operation. However, if the next digit is 5, which is the midpoint between two possible results, and all remaining digits are zero or there are no remaining digits, the nearest number is ambiguous. In this case, the <xref:System.MidpointRounding> enumeration enables you to specify whether the rounding operation returns the nearest number away from zero or the nearest even number.  \\n  \\n The following table demonstrates the results of rounding some negative and positive numbers in conjunction with the values of <xref:System.MidpointRounding>. The precision used to round the numbers is zero, which means the number after the decimal point affects the rounding operation. For example, for the number -2.5, the digit after the decimal point is 5. Because that digit is the midpoint, you can use a <xref:System.MidpointRounding> value to determine the result of rounding. If AwayFromZero is specified, -3 is returned because it is the nearest number away from zero with a precision of zero. If ToEven is specified, -2 is returned because it is the nearest even number with a precision of zero.  \\n  \\n|Original number|AwayFromZero|ToEven|  \\n|---------------------|------------------|------------|  \\n|3.5|4|4|  \\n|2.8|3|3|  \\n|2.5|3|2|  \\n|2.1|2|2|  \\n|-2.1|-2|-2|  \\n|-2.5|-3|-2|  \\n|-2.8|-3|-3|  \\n|-3.5|-4|-4|\"\n  example:\n  - \"The following code example demonstrates the <xref:System.Math.Round%2A> method in conjunction with the <xref:System.MidpointRounding.ToEven> enumeration.  \\n  \\n [!code-cpp[math.midpointrounding#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.midpointrounding/cpp/mpr.cpp#1)]\\n [!code-csharp[math.midpointrounding#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.midpointrounding/CS/mpr.cs#1)]\\n [!code-vb[math.midpointrounding#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.midpointrounding/VB/mpr.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public enum MidpointRounding\n  inheritance:\n  - System.Object\n  - System.ValueType\n  - System.Enum\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/MidpointRounding.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.MidpointRounding.AwayFromZero\n  commentId: F:System.MidpointRounding.AwayFromZero\n  id: AwayFromZero\n  parent: System.MidpointRounding\n  langs:\n  - csharp\n  name: AwayFromZero\n  nameWithType: MidpointRounding.AwayFromZero\n  fullName: MidpointRounding.AwayFromZero\n  type: Field\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: When a number is halfway between two others, it is rounded toward the nearest number that is away from zero.\n  syntax:\n    content: AwayFromZero\n    return:\n      type: System.MidpointRounding\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/MidpointRounding.xml\n- uid: System.MidpointRounding.ToEven\n  commentId: F:System.MidpointRounding.ToEven\n  id: ToEven\n  parent: System.MidpointRounding\n  langs:\n  - csharp\n  name: ToEven\n  nameWithType: MidpointRounding.ToEven\n  fullName: MidpointRounding.ToEven\n  type: Field\n  assemblies:\n  - System.Runtime.Extensions\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: When a number is halfway between two others, it is rounded toward the nearest even number.\n  syntax:\n    content: ToEven\n    return:\n      type: System.MidpointRounding\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/MidpointRounding.xml\nreferences:\n- uid: System.Enum\n  parent: System\n  isExternal: false\n  name: Enum\n  nameWithType: Enum\n  fullName: System.Enum\n- uid: System.MidpointRounding.AwayFromZero\n  parent: System.MidpointRounding\n  isExternal: false\n  name: AwayFromZero\n  nameWithType: MidpointRounding.AwayFromZero\n  fullName: MidpointRounding.AwayFromZero\n- uid: System.MidpointRounding\n  parent: System\n  isExternal: false\n  name: MidpointRounding\n  nameWithType: MidpointRounding\n  fullName: System.MidpointRounding\n- uid: System.MidpointRounding.ToEven\n  parent: System.MidpointRounding\n  isExternal: false\n  name: ToEven\n  nameWithType: MidpointRounding.ToEven\n  fullName: MidpointRounding.ToEven\n"}