### YamlMime:ManagedReference
items:
- uid: System.Net.Sockets.TcpClient
  commentId: T:System.Net.Sockets.TcpClient
  id: TcpClient
  children:
  - System.Net.Sockets.TcpClient.#ctor
  - System.Net.Sockets.TcpClient.#ctor(System.Net.IPEndPoint)
  - System.Net.Sockets.TcpClient.#ctor(System.Net.Sockets.AddressFamily)
  - System.Net.Sockets.TcpClient.#ctor(System.String,System.Int32)
  - System.Net.Sockets.TcpClient.Active
  - System.Net.Sockets.TcpClient.Available
  - System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.TcpClient.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.TcpClient.Client
  - System.Net.Sockets.TcpClient.Close
  - System.Net.Sockets.TcpClient.Connect(System.Net.IPEndPoint)
  - System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress[],System.Int32)
  - System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)
  - System.Net.Sockets.TcpClient.ConnectAsync(System.String,System.Int32)
  - System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress[],System.Int32)
  - System.Net.Sockets.TcpClient.Connected
  - System.Net.Sockets.TcpClient.Dispose
  - System.Net.Sockets.TcpClient.Dispose(System.Boolean)
  - System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)
  - System.Net.Sockets.TcpClient.ExclusiveAddressUse
  - System.Net.Sockets.TcpClient.Finalize
  - System.Net.Sockets.TcpClient.GetStream
  - System.Net.Sockets.TcpClient.LingerState
  - System.Net.Sockets.TcpClient.NoDelay
  - System.Net.Sockets.TcpClient.ReceiveBufferSize
  - System.Net.Sockets.TcpClient.ReceiveTimeout
  - System.Net.Sockets.TcpClient.SendBufferSize
  - System.Net.Sockets.TcpClient.SendTimeout
  - System.Net.Sockets.TcpClient.System#IDisposable#Dispose
  langs:
  - csharp
  name: TcpClient
  nameWithType: TcpClient
  fullName: System.Net.Sockets.TcpClient
  type: Class
  assemblies:
  - System.Net.Sockets
  - System
  - netstandard
  namespace: System.Net.Sockets
  summary: Provides client connections for TCP network services.
  remarks: "The <xref:System.Net.Sockets.TcpClient> class provides simple methods for connecting, sending, and receiving stream data over a network in synchronous blocking mode.  \n  \n In order for <xref:System.Net.Sockets.TcpClient> to connect and exchange data, a <xref:System.Net.Sockets.TcpListener> or <xref:System.Net.Sockets.Socket> created with the TCP <xref:System.Net.Sockets.ProtocolType> must be listening for incoming connection requests. You can connect to this listener in one of the following two ways:  \n  \n-   Create a <xref:System.Net.Sockets.TcpClient> and call one of the three available <xref:System.Net.Sockets.TcpClient.Connect%2A> methods.  \n  \n-   Create a <xref:System.Net.Sockets.TcpClient> using the host name and port number of the remote host. This constructor will automatically attempt a connection.  \n  \n> [!NOTE]\n>  If you want to send connectionless datagrams in synchronous blocking mode, use the <xref:System.Net.Sockets.UdpClient> class."
  example:
  - "The following code example establishes a <xref:System.Net.Sockets.TcpClient> connection.  \n  \n [!code-cpp[System.Net.Sockets.TcpClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient/CPP/tcpclient.cpp#1)]\n [!code-csharp[System.Net.Sockets.TcpClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient/CS/tcpclient.cs#1)]\n [!code-vb[System.Net.Sockets.TcpClient#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpClient/VB/tcpclient.vb#1)]"
  syntax:
    content: 'public class TcpClient : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.#ctor
  commentId: M:System.Net.Sockets.TcpClient.#ctor
  id: '#ctor'
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: TcpClient()
  nameWithType: TcpClient.TcpClient()
  fullName: TcpClient.TcpClient()
  type: Constructor
  assemblies:
  - System.Net.Sockets
  - System
  - netstandard
  namespace: System.Net.Sockets
  summary: Initializes a new instance of the <xref href="System.Net.Sockets.TcpClient"></xref> class.
  remarks: "This constructor creates a new <xref:System.Net.Sockets.TcpClient> and allows the underlying service provider to assign the most appropriate local IP address and port number. You must first call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method before sending and receiving data.  \n  \n> [!NOTE]\n>  This constructor works only with IPv4 address types.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example demonstrates how to use the default constructor to create a new <xref:System.Net.Sockets.TcpClient>.  \n  \n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#4)]\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#4)]"
  syntax:
    content: public TcpClient ();
    parameters: []
  overload: System.Net.Sockets.TcpClient.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.#ctor(System.Net.IPEndPoint)
  commentId: M:System.Net.Sockets.TcpClient.#ctor(System.Net.IPEndPoint)
  id: '#ctor(System.Net.IPEndPoint)'
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: TcpClient(IPEndPoint)
  nameWithType: TcpClient.TcpClient(IPEndPoint)
  fullName: TcpClient.TcpClient(IPEndPoint)
  type: Constructor
  assemblies:
  - System
  - netstandard
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Initializes a new instance of the <xref href="System.Net.Sockets.TcpClient"></xref> class and binds it to the specified local endpoint.
  remarks: "This constructor creates a new <xref:System.Net.Sockets.TcpClient> and binds it to the <xref:System.Net.IPEndPoint> specified by the `localEP` parameter. Before you call this constructor, you must create an <xref:System.Net.IPEndPoint> using the IP address and port number from which you intend to send and receive data. You do not need to specify a local IP address and port number before connecting and communicating. If you create a <xref:System.Net.Sockets.TcpClient> using any other constructor, the underlying service provider will assign the most appropriate local IP address and port number.  \n  \n You must call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method before sending and receiving data.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.TcpClient> class using a local endpoint.  \n  \n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#2)]\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#2)]"
  syntax:
    content: public TcpClient (System.Net.IPEndPoint localEP);
    parameters:
    - id: localEP
      type: System.Net.IPEndPoint
      description: The <xref href="System.Net.IPEndPoint"></xref> to which you bind the TCP <xref href="System.Net.Sockets.Socket"></xref>.
  overload: System.Net.Sockets.TcpClient.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The  <code>localEP</code> parameter is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.#ctor(System.Net.Sockets.AddressFamily)
  commentId: M:System.Net.Sockets.TcpClient.#ctor(System.Net.Sockets.AddressFamily)
  id: '#ctor(System.Net.Sockets.AddressFamily)'
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: TcpClient(AddressFamily)
  nameWithType: TcpClient.TcpClient(AddressFamily)
  fullName: TcpClient.TcpClient(AddressFamily)
  type: Constructor
  assemblies:
  - System.Net.Sockets
  - System
  - netstandard
  namespace: System.Net.Sockets
  summary: Initializes a new instance of the <xref href="System.Net.Sockets.TcpClient"></xref> class with the specified family.
  remarks: >-
    > [!NOTE]

    >  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).
  example:
  - "The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.TcpClient> class.  \n  \n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#15)]\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#15)]\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#15)]"
  syntax:
    content: public TcpClient (System.Net.Sockets.AddressFamily family);
    parameters:
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: The <xref href="System.Net.IPAddress.AddressFamily"></xref> of the IP protocol.
  overload: System.Net.Sockets.TcpClient.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>family</code> parameter is not equal to AddressFamily.InterNetwork  \n  \n -or-  \n  \n The <code>family</code> parameter is not equal to AddressFamily.InterNetworkV6"
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.#ctor(System.String,System.Int32)
  commentId: M:System.Net.Sockets.TcpClient.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: TcpClient(String, Int32)
  nameWithType: TcpClient.TcpClient(String, Int32)
  fullName: TcpClient.TcpClient(String, Int32)
  type: Constructor
  assemblies:
  - System
  - netstandard
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Initializes a new instance of the <xref href="System.Net.Sockets.TcpClient"></xref> class and connects to the specified port on the specified host.
  remarks: "This constructor creates a new <xref:System.Net.Sockets.TcpClient> and makes a synchronous connection attempt to the provided host name and port number. The underlying service provider will assign the most appropriate local IP address and port number. <xref:System.Net.Sockets.TcpClient> will block until it either connects or fails. This constructor allows you to initialize, resolve the DNS host name, and connect in one convenient step.  \n  \n If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address. This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.TcpClient> class using a host name and port number.  \n  \n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#3)]\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#3)]"
  syntax:
    content: public TcpClient (string hostname, int port);
    parameters:
    - id: hostname
      type: System.String
      description: The DNS name of the remote host to which you intend to connect.
    - id: port
      type: System.Int32
      description: The port number of the remote host to which you intend to connect.
  overload: System.Net.Sockets.TcpClient.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>hostname</code> parameter is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>port</code> parameter is not between <xref href="System.Net.IPEndPoint.MinPort"></xref> and <xref href="System.Net.IPEndPoint.MaxPort"></xref>.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when accessing the socket.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.Active
  commentId: P:System.Net.Sockets.TcpClient.Active
  id: Active
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: Active
  nameWithType: TcpClient.Active
  fullName: TcpClient.Active
  type: Property
  assemblies:
  - System.Net.Sockets
  - System
  - netstandard
  namespace: System.Net.Sockets
  summary: Gets or set a value that indicates whether a connection has been made.
  remarks: Classes deriving from <xref:System.Net.Sockets.TcpClient> can use this property to determine if a connection attempt has succeeded. It does not monitor the ongoing connection state of <xref:System.Net.Sockets.TcpClient>. If the remote host closes the connection, <xref:System.Net.Sockets.TcpClient.Active%2A> will not be updated. If you are deriving from <xref:System.Net.Sockets.TcpClient> and require closer attention to the connection state, use the <xref:System.Net.Sockets.Socket.Connected%2A> property of the <xref:System.Net.Sockets.Socket> returned by the <xref:System.Net.Sockets.TcpClient.Client%2A> method.
  syntax:
    content: protected bool Active { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the connection has been made; otherwise, `false`.'
  overload: System.Net.Sockets.TcpClient.Active*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.Available
  commentId: P:System.Net.Sockets.TcpClient.Available
  id: Available
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: Available
  nameWithType: TcpClient.Available
  fullName: TcpClient.Available
  type: Property
  assemblies:
  - System.Net.Sockets
  - System
  - netstandard
  namespace: System.Net.Sockets
  summary: Gets the amount of data that has been received from the network and is available to be read.
  remarks: "<xref:System.Net.Sockets.TcpClient.Available%2A> is a way to determine whether data is queued for reading. If data is available, call <xref:System.Net.Sockets.NetworkStream.Read%2A> to get the data. The available data is the total amount of data queued in the network buffer for reading. If no data is queued in the network buffer, <xref:System.Net.Sockets.TcpClient.Available%2A> returns 0.  \n  \n If the remote host shuts down or closes the connection, <xref:System.Net.Sockets.TcpClient.Available%2A> may throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error."
  example:
  - "The following code example shows the use of the <xref:System.Net.Sockets.TcpClient.Available%2A> property.  \n  \n [!code-cpp[System.Net.Sockets.TcpClient1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#1)]\n [!code-csharp[System.Net.Sockets.TcpClient1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#1)]"
  syntax:
    content: public int Available { get; }
    return:
      type: System.Int32
      description: The number of bytes of data received from the network and available to be read.
  overload: System.Net.Sockets.TcpClient.Available*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)
  commentId: M:System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)
  id: BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: BeginConnect(IPAddress, Int32, AsyncCallback, Object)
  nameWithType: TcpClient.BeginConnect(IPAddress, Int32, AsyncCallback, Object)
  fullName: TcpClient.BeginConnect(IPAddress, Int32, AsyncCallback, Object)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request for a remote host connection. The remote host is specified by an <xref href="System.Net.IPAddress"></xref> and a port number (<xref href="System.Int32"></xref>).
  remarks: "The asynchronous <xref:System.Net.Sockets.TcpClient.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.  \n  \n This method does not block until the operation completes. To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)."
  example:
  - "The following code example creates a <xref:System.Net.Sockets.TcpClient> and connects to a remote host.  \n  \n [!code-cpp[System.Net.Sockets.TcpClient1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#4)]\n [!code-csharp[System.Net.Sockets.TcpClient1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#4)]"
  syntax:
    content: public IAsyncResult BeginConnect (System.Net.IPAddress address, int port, AsyncCallback requestCallback, object state);
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: The <xref href="System.Net.IPAddress"></xref> of the remote host.
    - id: port
      type: System.Int32
      description: The port number of the remote host.
    - id: requestCallback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback"></xref> delegate that references the method to invoke when the operation is complete.
    - id: state
      type: System.Object
      description: A user-defined object that contains information about the connect operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> object that references the asynchronous connection.
  overload: System.Net.Sockets.TcpClient.BeginConnect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller higher in the call stack does not have permission for the requested operation.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The port number is not valid.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)
  commentId: M:System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)
  id: BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: BeginConnect(IPAddress[], Int32, AsyncCallback, Object)
  nameWithType: TcpClient.BeginConnect(IPAddress[], Int32, AsyncCallback, Object)
  fullName: TcpClient.BeginConnect(IPAddress[], Int32, AsyncCallback, Object)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request for a remote host connection. The remote host is specified by an <xref href="System.Net.IPAddress"></xref> array and a port number (<xref href="System.Int32"></xref>).
  remarks: "The asynchronous <xref:System.Net.Sockets.TcpClient.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.  \n  \n This method does not block until the operation completes. To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  \n  \n This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host."
  example:
  - "The following code example creates a <xref:System.Net.Sockets.TcpClient> and connects to a remote host.  \n  \n [!code-cpp[System.Net.Sockets.TcpClient1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#5)]\n [!code-csharp[System.Net.Sockets.TcpClient1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#5)]"
  syntax:
    content: public IAsyncResult BeginConnect (System.Net.IPAddress[] addresses, int port, AsyncCallback requestCallback, object state);
    parameters:
    - id: addresses
      type: System.Net.IPAddress[]
      description: At least one <xref href="System.Net.IPAddress"></xref> that designates the remote hosts.
    - id: port
      type: System.Int32
      description: The port number of the remote hosts.
    - id: requestCallback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback"></xref> delegate that references the method to invoke when the operation is complete.
    - id: state
      type: System.Object
      description: A user-defined object that contains information about the connect operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> object that references the asynchronous connection.
  overload: System.Net.Sockets.TcpClient.BeginConnect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>addresses</code> parameter is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller higher in the call stack does not have permission for the requested operation.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The port number is not valid.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)
  commentId: M:System.Net.Sockets.TcpClient.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)
  id: BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: BeginConnect(String, Int32, AsyncCallback, Object)
  nameWithType: TcpClient.BeginConnect(String, Int32, AsyncCallback, Object)
  fullName: TcpClient.BeginConnect(String, Int32, AsyncCallback, Object)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request for a remote host connection. The remote host is specified by a host name (<xref href="System.String"></xref>) and a port number (<xref href="System.Int32"></xref>).
  remarks: "The asynchronous <xref:System.Net.Sockets.TcpClient.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpClient.EndConnect%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.  \n  \n This method does not block until the operation completes. To block until the operation completes, use one of the <xref:System.Net.Sockets.TcpClient.Connect%2A> method overloads.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)."
  example:
  - "The following code example creates a <xref:System.Net.Sockets.TcpClient> and connects to a remote host.  \n  \n [!code-cpp[System.Net.Sockets.TcpClient1#6](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#6)]\n [!code-csharp[System.Net.Sockets.TcpClient1#6](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#6)]"
  syntax:
    content: public IAsyncResult BeginConnect (string host, int port, AsyncCallback requestCallback, object state);
    parameters:
    - id: host
      type: System.String
      description: The name of the remote host.
    - id: port
      type: System.Int32
      description: The port number of the remote host.
    - id: requestCallback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback"></xref> delegate that references the method to invoke when the operation is complete.
    - id: state
      type: System.Object
      description: A user-defined object that contains information about the connect operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> object that references the asynchronous connection.
  overload: System.Net.Sockets.TcpClient.BeginConnect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>host</code> parameter is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller higher in the call stack does not have permission for the requested operation.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The port number is not valid.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.Client
  commentId: P:System.Net.Sockets.TcpClient.Client
  id: Client
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: Client
  nameWithType: TcpClient.Client
  fullName: TcpClient.Client
  type: Property
  assemblies:
  - System.Net.Sockets
  - System
  - netstandard
  namespace: System.Net.Sockets
  summary: Gets or sets the underlying <xref href="System.Net.Sockets.Socket"></xref>.
  remarks: <xref:System.Net.Sockets.TcpClient> creates a <xref:System.Net.Sockets.Socket> to send and receive data over a network. Classes deriving from <xref:System.Net.Sockets.TcpClient> can use this property to get or set this <xref:System.Net.Sockets.Socket>. Use the underlying <xref:System.Net.Sockets.Socket> returned from <xref:System.Net.Sockets.TcpClient.Client%2A> if you require access beyond that which <xref:System.Net.Sockets.TcpClient> provides. You can also use <xref:System.Net.Sockets.TcpClient.Client%2A> to set the underlying <xref:System.Net.Sockets.Socket> to an existing <xref:System.Net.Sockets.Socket>. This might be useful if you want to take advantage of the simplicity of <xref:System.Net.Sockets.TcpClient> using a pre-existing <xref:System.Net.Sockets.Socket>.
  example:
  - "The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpClient.Client%2A> property. In this example, the receive buffer size of the underlying <xref:System.Net.Sockets.Socket> is changed.  \n  \n [!code-csharp[TcpClientProtectedMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpClientProtectedMethodsAndPropertiesExample/CS/source.cs#1)]\n [!code-vb[TcpClientProtectedMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpClientProtectedMethodsAndPropertiesExample/VB/source.vb#1)]"
  syntax:
    content: public System.Net.Sockets.Socket Client { get; set; }
    return:
      type: System.Net.Sockets.Socket
      description: The underlying network <xref href="System.Net.Sockets.Socket"></xref>.
  overload: System.Net.Sockets.TcpClient.Client*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.Close
  commentId: M:System.Net.Sockets.TcpClient.Close
  id: Close
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: Close()
  nameWithType: TcpClient.Close()
  fullName: TcpClient.Close()
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Disposes this <xref href="System.Net.Sockets.TcpClient"></xref> instance and requests that the underlying TCP connection be closed.
  remarks: "The <xref:System.Net.Sockets.TcpClient.Close%2A> method marks the instance as disposed and requests that the associated <xref:System.Net.Sockets.Socket> close the TCP connection. Based on the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property, the TCP connection may stay open for some time after the <xref:System.Net.Sockets.TcpClient.Close%2A> method is called when data remains to be sent. There is no notification provided when the underlying connection has completed closing.  \n  \n Calling this method will eventually result in the close of the associated <xref:System.Net.Sockets.Socket> and will also close the associated <xref:System.Net.Sockets.NetworkStream> that is used to send and receive data if one was created.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example demonstrates closing a <xref:System.Net.Sockets.TcpClient> by calling the <xref:System.Net.Sockets.TcpClient.Close%2A> method.  \n  \n [!code-cpp[NCLTCPClientSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLTcpClientSync/CPP/tcpclient.cpp#1)]\n [!code-csharp[NCLTCPClientSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLTcpClientSync/CS/tcpclient.cs#1)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Net.Sockets.TcpClient.Close*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.Connect(System.Net.IPEndPoint)
  commentId: M:System.Net.Sockets.TcpClient.Connect(System.Net.IPEndPoint)
  id: Connect(System.Net.IPEndPoint)
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: Connect(IPEndPoint)
  nameWithType: TcpClient.Connect(IPEndPoint)
  fullName: TcpClient.Connect(IPEndPoint)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Connects the client to a remote TCP host using the specified remote network endpoint.
  remarks: "Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPEndPoint>. Before you call <xref:System.Net.Sockets.TcpClient.Connect%2A> you must create an instance of the <xref:System.Net.IPEndPoint> class using an IP address and a port number. Use this <xref:System.Net.IPEndPoint> as the `remoteEP` parameter. The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)"
  example:
  - "The following code example uses an <xref:System.Net.IPEndPoint> to connect with a remote host.  \n  \n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#7)]\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#7)]\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#7)]"
  syntax:
    content: public void Connect (System.Net.IPEndPoint remoteEP);
    parameters:
    - id: remoteEP
      type: System.Net.IPEndPoint
      description: The <xref href="System.Net.IPEndPoint"></xref> to which you intend to connect.
  overload: System.Net.Sockets.TcpClient.Connect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>remoteEp</code> parameter is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when accessing the socket.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.TcpClient"></xref> is closed.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress,System.Int32)
  commentId: M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress,System.Int32)
  id: Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: Connect(IPAddress, Int32)
  nameWithType: TcpClient.Connect(IPAddress, Int32)
  fullName: TcpClient.Connect(IPAddress, Int32)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Connects the client to a remote TCP host using the specified IP address and port number.
  remarks: "Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPAddress> and port number. The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example uses an IP Address and port number to connect with a remote host.  \n  \n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#6)]\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#6)]\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#6)]"
  syntax:
    content: public void Connect (System.Net.IPAddress address, int port);
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: The <xref href="System.Net.IPAddress"></xref> of the host to which you intend to connect.
    - id: port
      type: System.Int32
      description: The port number to which you intend to connect.
  overload: System.Net.Sockets.TcpClient.Connect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>port</code> is not between <xref href="System.Net.IPEndPoint.MinPort"></xref> and <xref href="System.Net.IPEndPoint.MaxPort"></xref>.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when accessing the socket.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: <xref href="System.Net.Sockets.TcpClient"></xref> is closed.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress[],System.Int32)
  commentId: M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress[],System.Int32)
  id: Connect(System.Net.IPAddress[],System.Int32)
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: Connect(IPAddress[], Int32)
  nameWithType: TcpClient.Connect(IPAddress[], Int32)
  fullName: TcpClient.Connect(IPAddress[], Int32)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Connects the client to a remote TCP host using the specified IP addresses and port number.
  remarks: "This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host. Call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method to establish a synchronous remote host connection to the host specified by the array of <xref:System.Net.IPAddress> elements and the port number. The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example uses an IP Address and port number to connect with a remote host.  \n  \n [!code-cpp[System.Net.Sockets.TcpClient1#8](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#8)]\n [!code-csharp[System.Net.Sockets.TcpClient1#8](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#8)]"
  syntax:
    content: public void Connect (System.Net.IPAddress[] ipAddresses, int port);
    parameters:
    - id: ipAddresses
      type: System.Net.IPAddress[]
      description: The <xref href="System.Net.IPAddress"></xref> array of the host to which you intend to connect.
    - id: port
      type: System.Int32
      description: The port number to which you intend to connect.
  overload: System.Net.Sockets.TcpClient.Connect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>ipAddresses</code> parameter is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The port number is not valid.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller higher in the call stack does not have permission for the requested operation.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: This method is valid for sockets that use the <xref href="System.Net.Sockets.AddressFamily.InterNetwork"></xref> flag or the <xref href="System.Net.Sockets.AddressFamily.InterNetworkV6"></xref> flag.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)
  commentId: M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)
  id: Connect(System.String,System.Int32)
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: Connect(String, Int32)
  nameWithType: TcpClient.Connect(String, Int32)
  fullName: TcpClient.Connect(String, Int32)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Connects the client to the specified port on the specified host.
  remarks: "Call this method to establish a synchronous remote host connection to the specified host name and port number. The <xref:System.Net.Sockets.TcpClient.Connect%2A> method will block until it either connects or fails. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.  \n  \n If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.Connect%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address. This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example uses the host name and port number to connect with a remote host.  \n  \n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#5)]\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#5)]\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#5)]"
  syntax:
    content: public void Connect (string hostname, int port);
    parameters:
    - id: hostname
      type: System.String
      description: The DNS name of the remote host to which you intend to connect.
    - id: port
      type: System.Int32
      description: The port number of the remote host to which you intend to connect.
  overload: System.Net.Sockets.TcpClient.Connect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>hostname</code> parameter is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>port</code> parameter is not between <xref href="System.Net.IPEndPoint.MinPort"></xref> and <xref href="System.Net.IPEndPoint.MaxPort"></xref>.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when accessing the socket.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: <xref href="System.Net.Sockets.TcpClient"></xref> is closed.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.ConnectAsync(System.String,System.Int32)
  commentId: M:System.Net.Sockets.TcpClient.ConnectAsync(System.String,System.Int32)
  id: ConnectAsync(System.String,System.Int32)
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: ConnectAsync(String, Int32)
  nameWithType: TcpClient.ConnectAsync(String, Int32)
  fullName: TcpClient.ConnectAsync(String, Int32)
  type: Method
  assemblies:
  - System.Net.Sockets
  - System
  - netstandard
  namespace: System.Net.Sockets
  summary: Connects the client to the specified TCP port on the specified host as an asynchronous operation.
  remarks: "This operation will not block. The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established. This method does not block the calling thread while the connection request is underway.  \n  \n Call this method to establish a synchronous remote host connection to the specified host name and port number as an asynchronous operation. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.  \n  \n If IPv6 is enabled and the <xref:System.Net.Sockets.TcpClient.ConnectAsync%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address. This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public System.Threading.Tasks.Task ConnectAsync (string host, int port);
    parameters:
    - id: host
      type: System.String
      description: The DNS name of the remote host to which you intend to connect.
    - id: port
      type: System.Int32
      description: The port number of the remote host to which you intend to connect.
    return:
      type: System.Threading.Tasks.Task
      description: "Returns <xref href=\"System.Threading.Tasks.Task\"></xref>  \n  \n The task object representing the asynchronous operation."
  overload: System.Net.Sockets.TcpClient.ConnectAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>hostname</code> parameter is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>port</code> parameter is not between <xref href="System.Net.IPEndPoint.MinPort"></xref> and <xref href="System.Net.IPEndPoint.MaxPort"></xref>.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when accessing the socket.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: <xref href="System.Net.Sockets.TcpClient"></xref> is closed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress,System.Int32)
  commentId: M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress,System.Int32)
  id: ConnectAsync(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: ConnectAsync(IPAddress, Int32)
  nameWithType: TcpClient.ConnectAsync(IPAddress, Int32)
  fullName: TcpClient.ConnectAsync(IPAddress, Int32)
  type: Method
  assemblies:
  - System.Net.Sockets
  - System
  - netstandard
  namespace: System.Net.Sockets
  summary: Connects the client to a remote TCP host using the specified IP address and port number as an asynchronous operation.
  remarks: "This operation will not block. The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established. This method does not block the calling thread while the connection request is underway.  \n  \n Call this method to establish a synchronous remote host connection to the specified <xref:System.Net.IPAddress> and port number as an asynchronous operation. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public System.Threading.Tasks.Task ConnectAsync (System.Net.IPAddress address, int port);
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: The <xref href="System.Net.IPAddress"></xref> of the host to which you intend to connect.
    - id: port
      type: System.Int32
      description: The port number to which you intend to connect.
    return:
      type: System.Threading.Tasks.Task
      description: "Returns <xref href=\"System.Threading.Tasks.Task\"></xref>  \n  \n The task object representing the asynchronous operation."
  overload: System.Net.Sockets.TcpClient.ConnectAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>address</code> parameter is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>port</code> is not between <xref href="System.Net.IPEndPoint.MinPort"></xref> and <xref href="System.Net.IPEndPoint.MaxPort"></xref>.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when accessing the socket.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: <xref href="System.Net.Sockets.TcpClient"></xref> is closed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress[],System.Int32)
  commentId: M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress[],System.Int32)
  id: ConnectAsync(System.Net.IPAddress[],System.Int32)
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: ConnectAsync(IPAddress[], Int32)
  nameWithType: TcpClient.ConnectAsync(IPAddress[], Int32)
  fullName: TcpClient.ConnectAsync(IPAddress[], Int32)
  type: Method
  assemblies:
  - System.Net.Sockets
  - System
  - netstandard
  namespace: System.Net.Sockets
  summary: Connects the client to a remote TCP host using the specified IP addresses and port number as an asynchronous operation.
  remarks: "This operation will not block. The returned Returns <xref:System.Threading.Tasks.Task> object will complete after the TCP connection has been established. This method does not block the calling thread while the connection request is underway.  \n  \n This method is typically used immediately after a call to the <xref:System.Net.Dns.BeginGetHostAddresses%2A> method, which can return multiple IP addresses for a single host. Call this method to establish a synchronous remote host connection to the host specified by the array of <xref:System.Net.IPAddress> elements and the port number as an asynchronous operation. After connecting with the remote host, use the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. Use this <xref:System.Net.Sockets.NetworkStream> to send and receive data.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: public System.Threading.Tasks.Task ConnectAsync (System.Net.IPAddress[] addresses, int port);
    parameters:
    - id: addresses
      type: System.Net.IPAddress[]
      description: The <xref href="System.Net.IPAddress"></xref> array of the host to which you intend to connect.
    - id: port
      type: System.Int32
      description: The port number to which you intend to connect.
    return:
      type: System.Threading.Tasks.Task
      description: "Returns <xref href=\"System.Threading.Tasks.Task\"></xref>  \n  \n The task object representing the asynchronous operation."
  overload: System.Net.Sockets.TcpClient.ConnectAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>ipAddresses</code> parameter is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The port number is not valid.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller higher in the call stack does not have permission for the requested operation.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: This method is valid for sockets that use the <xref href="System.Net.Sockets.AddressFamily.InterNetwork"></xref> flag or the <xref href="System.Net.Sockets.AddressFamily.InterNetworkV6"></xref> flag.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.Connected
  commentId: P:System.Net.Sockets.TcpClient.Connected
  id: Connected
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: Connected
  nameWithType: TcpClient.Connected
  fullName: TcpClient.Connected
  type: Property
  assemblies:
  - System.Net.Sockets
  - System
  - netstandard
  namespace: System.Net.Sockets
  summary: Gets a value indicating whether the underlying <xref href="System.Net.Sockets.Socket"></xref> for a <xref href="System.Net.Sockets.TcpClient"></xref> is connected to a remote host.
  remarks: "The <xref:System.Net.Sockets.TcpClient.Connected%2A> property gets the connection state of the <xref:System.Net.Sockets.TcpClient.Client%2A> socket as of the last I/O operation. When it returns `false`, the <xref:System.Net.Sockets.TcpClient.Client%2A> socket was either never connected, or is no longer connected.  \n  \n Because the <xref:System.Net.Sockets.TcpClient.Connected%2A> property only reflects the state of the connection as of the most recent operation, you should attempt to send or receive a message to determine the current state. After the message send fails, this property no longer returns `true`. Note that this behavior is by design. You cannot reliably test the state of the connection because, in the time between the test and a send/receive, the connection could have been lost. Your code should assume the socket is connected, and gracefully handle failed transmissions."
  example:
  - "The following code example connects to a remote endpoint and then verifies the connection.  \n  \n [!code-cpp[System.Net.Sockets.TcpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#2)]\n [!code-csharp[System.Net.Sockets.TcpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#2)]"
  syntax:
    content: public bool Connected { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Net.Sockets.TcpClient.Client"></xref> socket was connected to a remote resource as of the most recent operation; otherwise, `false`.'
  overload: System.Net.Sockets.TcpClient.Connected*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.Dispose
  commentId: M:System.Net.Sockets.TcpClient.Dispose
  id: Dispose
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: Dispose()
  nameWithType: TcpClient.Dispose()
  fullName: TcpClient.Dispose()
  type: Method
  assemblies:
  - System.Net.Sockets
  - System
  - netstandard
  namespace: System.Net.Sockets
  summary: Releases the managed and unmanaged resources used by the <xref href="System.Net.Sockets.TcpClient"></xref>.
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Sockets.TcpClient.Dispose*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.Dispose(System.Boolean)
  commentId: M:System.Net.Sockets.TcpClient.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: TcpClient.Dispose(Boolean)
  fullName: TcpClient.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Sockets
  - System
  - netstandard
  namespace: System.Net.Sockets
  summary: Releases the unmanaged resources used by the <xref href="System.Net.Sockets.TcpClient"></xref> and optionally releases the managed resources.
  remarks: "This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes this method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes this method with `disposing` set to `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.TcpClient> references. It does this by invoking the `Dispose()` method of each referenced object.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: Set to `true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.
  overload: System.Net.Sockets.TcpClient.Dispose*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)
  commentId: M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)
  id: EndConnect(System.IAsyncResult)
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: EndConnect(IAsyncResult)
  nameWithType: TcpClient.EndConnect(IAsyncResult)
  fullName: TcpClient.EndConnect(IAsyncResult)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Ends a pending asynchronous connection attempt.
  remarks: "This method blocks until the operation is complete. To perform this operation synchronously, use a <xref:System.Net.Sockets.TcpClient.Connect%2A> method.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library) for a detailed description of the error."
  example:
  - "The following code example ends the asynchronous connection attempt.  \n  \n [!code-cpp[System.Net.Sockets.TcpClient1#7](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#7)]\n [!code-csharp[System.Net.Sockets.TcpClient1#7](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#7)]"
  syntax:
    content: public void EndConnect (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> object returned by a call to <xref href="System.Net.Sockets.TcpClient.BeginConnect*"></xref>.
  overload: System.Net.Sockets.TcpClient.EndConnect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>asyncResult</code> parameter is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>asyncResult</code> parameter was not returned by a call to a <xref href="System.Net.Sockets.TcpClient.BeginConnect*"></xref> method.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)"></xref> method was previously called for the asynchronous connection.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the <xref href="System.Net.Sockets.Socket"></xref>.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The underlying <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.ExclusiveAddressUse
  commentId: P:System.Net.Sockets.TcpClient.ExclusiveAddressUse
  id: ExclusiveAddressUse
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: ExclusiveAddressUse
  nameWithType: TcpClient.ExclusiveAddressUse
  fullName: TcpClient.ExclusiveAddressUse
  type: Property
  assemblies:
  - System.Net.Sockets
  - System
  - netstandard
  namespace: System.Net.Sockets
  summary: Gets or sets a <xref href="System.Boolean"></xref> value that specifies whether the <xref href="System.Net.Sockets.TcpClient"></xref> allows only one client to use a port.
  remarks: "By default, multiple clients can use a specific port; however, only one of the clients can perform operations on the network traffic sent to the port. You can use the <xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A> property to prevent multiple clients from using a specific port.  \n  \n This property must be set before the underlying socket is bound to a client port. If you call <xref:System.Net.Sockets.TcpClient.Connect%2A>, <xref:System.Net.Sockets.TcpClient.BeginConnect%2A>, <xref:System.Net.Sockets.TcpClient.%23ctor%28System.Net.IPEndPoint%29>, or <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29>, the client port is bound as a side effect of the method, and you cannot subsequently set the <xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A> property"
  example:
  - "The following code example creates a <xref:System.Net.Sockets.TcpClient> and gets and sets the value of the <xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A> property.  \n  \n [!code-cpp[System.Net.Sockets.TcpClient1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#3)]\n [!code-csharp[System.Net.Sockets.TcpClient1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#3)]"
  syntax:
    content: public bool ExclusiveAddressUse { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Net.Sockets.TcpClient"></xref> allows only one client to use a specific port; otherwise, `false`. The default is `true` for Windows Server 2003 and Windows XP Service Pack 2 and later, and `false` for all other versions.'
  overload: System.Net.Sockets.TcpClient.ExclusiveAddressUse*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the underlying socket.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The underlying <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.Finalize
  commentId: M:System.Net.Sockets.TcpClient.Finalize
  id: Finalize
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: Finalize()
  nameWithType: TcpClient.Finalize()
  fullName: TcpClient.Finalize()
  type: Method
  assemblies:
  - System.Net.Sockets
  - System
  - netstandard
  namespace: System.Net.Sockets
  summary: Frees resources used by the <xref href="System.Net.Sockets.TcpClient"></xref> class.
  remarks: "This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>. Application code should not call this method; an object's <xref:System.Object.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method.  \n  \n The <xref:System.Net.Sockets.TcpClient> class finalizer closes the TCP connection and releases all managed resources associated with the <xref:System.Net.Sockets.TcpClient>. These resources include the underlying <xref:System.Net.Sockets.Socket> used for connecting with the remote host, and the <xref:System.Net.Sockets.NetworkStream> used to send and receive data. The finalizer does not release any unmanaged resources.  \n  \n For more information, see [Finalize Methods and Destructors](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)."
  syntax:
    content: ~TcpClient ();
    parameters: []
  overload: System.Net.Sockets.TcpClient.Finalize*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.GetStream
  commentId: M:System.Net.Sockets.TcpClient.GetStream
  id: GetStream
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: GetStream()
  nameWithType: TcpClient.GetStream()
  fullName: TcpClient.GetStream()
  type: Method
  assemblies:
  - System.Net.Sockets
  - System
  - netstandard
  namespace: System.Net.Sockets
  summary: Returns the <xref href="System.Net.Sockets.NetworkStream"></xref> used to send and receive data.
  remarks: "<xref:System.Net.Sockets.TcpClient.GetStream%2A> returns a <xref:System.Net.Sockets.NetworkStream> that you can use to send and receive data. The <xref:System.Net.Sockets.NetworkStream> class inherits from the <xref:System.IO.Stream> class, which provides a rich collection of methods and properties used to facilitate network communications.  \n  \n You must call the <xref:System.Net.Sockets.TcpClient.Connect%2A> method first, or the <xref:System.Net.Sockets.TcpClient.GetStream%2A> method will throw an <xref:System.InvalidOperationException>. After you have obtained the <xref:System.Net.Sockets.NetworkStream>, call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method to send data to the remote host. Call the <xref:System.Net.Sockets.NetworkStream.Read%2A> method to receive data arriving from the remote host. Both of these methods block until the specified operation is performed. You can avoid blocking on a read operation by checking the <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> property. A `true` value means that data has arrived from the remote host and is available for reading. In this case, <xref:System.Net.Sockets.NetworkStream.Read%2A> is guaranteed to complete immediately. If the remote host has shutdown its connection, <xref:System.Net.Sockets.NetworkStream.Read%2A> will immediately return with zero bytes.  \n  \n> [!NOTE]\n>  You must close the <xref:System.Net.Sockets.NetworkStream> when you are through sending and receiving data. Closing <xref:System.Net.Sockets.TcpClient> does not release the <xref:System.Net.Sockets.NetworkStream>.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."
  example:
  - "The following code example uses <xref:System.Net.Sockets.TcpClient.GetStream%2A> to obtain the underlying <xref:System.Net.Sockets.NetworkStream>. After obtaining the <xref:System.Net.Sockets.NetworkStream>, it sends and receives using its <xref:System.Net.Sockets.NetworkStream.Write%2A> and <xref:System.Net.Sockets.NetworkStream.Read%2A> methods.  \n  \n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#14](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#14)]\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#14](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#14)]\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#14](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#14)]"
  syntax:
    content: public System.Net.Sockets.NetworkStream GetStream ();
    parameters: []
    return:
      type: System.Net.Sockets.NetworkStream
      description: The underlying <xref href="System.Net.Sockets.NetworkStream"></xref>.
  overload: System.Net.Sockets.TcpClient.GetStream*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Net.Sockets.TcpClient"></xref> is not connected to a remote host.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.TcpClient"></xref> has been closed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.LingerState
  commentId: P:System.Net.Sockets.TcpClient.LingerState
  id: LingerState
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: LingerState
  nameWithType: TcpClient.LingerState
  fullName: TcpClient.LingerState
  type: Property
  assemblies:
  - System.Net.Sockets
  - System
  - netstandard
  namespace: System.Net.Sockets
  summary: Gets or sets information about the linger state of the associated socket.
  remarks: "The <xref:System.Net.Sockets.TcpClient.LingerState%2A> property changes the way <xref:System.Net.Sockets.Socket.Close%2A> method behaves. This property when set modifies the conditions under which the connection can be reset by Winsock. Connection resets can still occur based on the IP protocol behavior.  \n  \n This property controls the length of time that the TCP connection will remain open after a call to <xref:System.Net.Sockets.TcpClient.Close%2A> when data remains to be sent. When you call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, data is placed in the outgoing network buffer. This property can be used to ensure that this data is sent to the remote host before the <xref:System.Net.Sockets.TcpClient.Close%2A> method drops the connection.  \n  \n To enable lingering, create a <xref:System.Net.Sockets.LingerOption> instance containing the desired values, and set the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property to this instance.  \n  \n The following table describes the behavior of the <xref:System.Net.Sockets.TcpClient.Close%2A> method for the possible values of the <xref:System.Net.Sockets.LingerOption.Enabled%2A> property and the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property.  \n  \n|LingerState.Enabled|LingerState.LingerTime|Behavior|  \n|-------------------------|----------------------------|--------------|  \n|`false` (disabled), the default value|The time-out is not applicable, (default).|Attempts to send pending data until the default IP protocol time-out expires.|  \n|`true` (enabled)|A nonzero time-out|Attempts to send pending data until the specified time-out expires, and if the attempt fails, then Winsock resets the connection.|  \n|`true` (enabled)|A zero timeout.|Discards any pending data and Winsock resets the connection.|  \n  \n The IP stack computes the default IP protocol time-out period to use based on the round trip time of the connection. In most cases, the time-out computed by the stack is more relevant than one defined by an application. This is the default behavior for a socket when the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property is not set.  \n  \n When the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the <xref:System.Net.Sockets.TcpClient.LingerState%2A> property is set greater than the default IP protocol time-out, the default IP protocol time-out will still apply and override."
  example:
  - "The following code example sets and gets the sockets linger time.  \n  \n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#12](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#12)]\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#12](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#12)]\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#12](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#12)]"
  syntax:
    content: public System.Net.Sockets.LingerOption LingerState { get; set; }
    return:
      type: System.Net.Sockets.LingerOption
      description: A <xref href="System.Net.Sockets.LingerOption"></xref>. By default, lingering is disabled.
  overload: System.Net.Sockets.TcpClient.LingerState*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.NoDelay
  commentId: P:System.Net.Sockets.TcpClient.NoDelay
  id: NoDelay
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: NoDelay
  nameWithType: TcpClient.NoDelay
  fullName: TcpClient.NoDelay
  type: Property
  assemblies:
  - System.Net.Sockets
  - System
  - netstandard
  namespace: System.Net.Sockets
  summary: Gets or sets a value that disables a delay when send or receive buffers are not full.
  remarks: When <xref:System.Net.Sockets.TcpClient.NoDelay%2A> is `false`, a <xref:System.Net.Sockets.TcpClient> does not send a packet over the network until it has collected a significant amount of outgoing data. Because of the amount of overhead in a TCP segment, sending small amounts of data is inefficient. However, situations do exist where you need to send very small amounts of data or expect immediate responses from each packet you send. Your decision should weigh the relative importance of network efficiency versus application requirements.
  example:
  - "The following code example disables the delay. It then checks the value of <xref:System.Net.Sockets.TcpClient.NoDelay%2A> to verify that the property was successfully set.  \n  \n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#13)]\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#13)]\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#13)]"
  syntax:
    content: public bool NoDelay { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the delay is disabled, otherwise `false`. The default value is `false`.'
  overload: System.Net.Sockets.TcpClient.NoDelay*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.ReceiveBufferSize
  commentId: P:System.Net.Sockets.TcpClient.ReceiveBufferSize
  id: ReceiveBufferSize
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: ReceiveBufferSize
  nameWithType: TcpClient.ReceiveBufferSize
  fullName: TcpClient.ReceiveBufferSize
  type: Property
  assemblies:
  - System.Net.Sockets
  - System
  - netstandard
  namespace: System.Net.Sockets
  summary: Gets or sets the size of the receive buffer.
  remarks: "The <xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A> property gets or sets the number of bytes that you are expecting to store in the receive buffer for each read operation. This property actually manipulates the network buffer space allocated for receiving incoming data.  \n  \n Your network buffer should be at least as large as your application buffer to ensure that the desired data will be available when you call the <xref:System.Net.Sockets.NetworkStream.Read%2A?displayProperty=fullName> method. Use the <xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A> property to set this size. If your application will be receiving bulk data, you should pass the <xref:System.Net.Sockets.NetworkStream.Read%2A> method a very large application buffer.  \n  \n If the network buffer is smaller than the amount of data you request in the <xref:System.Net.Sockets.NetworkStream.Read%2A> method, you will not be able to retrieve the desired amount of data in one read operation. This incurs the overhead of additional calls to the <xref:System.Net.Sockets.NetworkStream.Read%2A> method."
  example:
  - "The following code example sets and gets the receive buffer size.  \n  \n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#8)]\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#8)]\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#8)]"
  syntax:
    content: public int ReceiveBufferSize { get; set; }
    return:
      type: System.Int32
      description: The size of the receive buffer, in bytes. The default value is 8192 bytes.
  overload: System.Net.Sockets.TcpClient.ReceiveBufferSize*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when setting the buffer size.  \n  \n -or-  \n  \n In .NET Compact Framework applications, you cannot set this property. For a workaround, see the Platform Note in Remarks."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.ReceiveTimeout
  commentId: P:System.Net.Sockets.TcpClient.ReceiveTimeout
  id: ReceiveTimeout
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: ReceiveTimeout
  nameWithType: TcpClient.ReceiveTimeout
  fullName: TcpClient.ReceiveTimeout
  type: Property
  assemblies:
  - System.Net.Sockets
  - System
  - netstandard
  namespace: System.Net.Sockets
  summary: Gets or sets the amount of time a <xref href="System.Net.Sockets.TcpClient"></xref> will wait to receive data once a read operation is initiated.
  remarks: The <xref:System.Net.Sockets.TcpClient.ReceiveTimeout%2A> property determines the amount of time that the <xref:System.Net.Sockets.NetworkStream.Read%2A> method will block until it is able to receive data. This time is measured in milliseconds. If the time-out expires before <xref:System.Net.Sockets.NetworkStream.Read%2A> successfully completes, <xref:System.Net.Sockets.TcpClient> throws a <xref:System.IO.IOException>. There is no time-out by default.
  example:
  - "The following code example sets and gets the receive time out.  \n  \n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#10)]\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#10)]\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#10)]"
  syntax:
    content: public int ReceiveTimeout { get; set; }
    return:
      type: System.Int32
      description: The time-out value of the connection in milliseconds. The default value is 0.
  overload: System.Net.Sockets.TcpClient.ReceiveTimeout*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.SendBufferSize
  commentId: P:System.Net.Sockets.TcpClient.SendBufferSize
  id: SendBufferSize
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: SendBufferSize
  nameWithType: TcpClient.SendBufferSize
  fullName: TcpClient.SendBufferSize
  type: Property
  assemblies:
  - System.Net.Sockets
  - System
  - netstandard
  namespace: System.Net.Sockets
  summary: Gets or sets the size of the send buffer.
  remarks: "The <xref:System.Net.Sockets.TcpClient.SendBufferSize%2A> property gets or sets the number of bytes that you are expecting to send in each call to the <xref:System.Net.Sockets.NetworkStream.Write%2A?displayProperty=fullName> method. This property actually manipulates the network buffer space allocated for send operation.  \n  \n Your network buffer should be at least as large as your application buffer to ensure that the desired data will be stored and sent in one operation. Use the <xref:System.Net.Sockets.TcpClient.SendBufferSize%2A> property to set this size. If your application will be sending bulk data, you should pass the <xref:System.Net.Sockets.NetworkStream.Write%2A> method a very large application buffer.  \n  \n If the network buffer is smaller than the amount of data you provide the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, several network send operations will be performed for every call you make to the <xref:System.Net.Sockets.NetworkStream.Write%2A> method. You can achieve greater data throughput by ensuring that your network buffer is at least as large as your application buffer."
  example:
  - "The following code example sets and gets the send buffer size.  \n  \n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#9)]\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#9)]\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#9)]"
  syntax:
    content: public int SendBufferSize { get; set; }
    return:
      type: System.Int32
      description: The size of the send buffer, in bytes. The default value is 8192 bytes.
  overload: System.Net.Sockets.TcpClient.SendBufferSize*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.SendTimeout
  commentId: P:System.Net.Sockets.TcpClient.SendTimeout
  id: SendTimeout
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: SendTimeout
  nameWithType: TcpClient.SendTimeout
  fullName: TcpClient.SendTimeout
  type: Property
  assemblies:
  - System.Net.Sockets
  - System
  - netstandard
  namespace: System.Net.Sockets
  summary: Gets or sets the amount of time a <xref href="System.Net.Sockets.TcpClient"></xref> will wait for a send operation to complete successfully.
  remarks: "The <xref:System.Net.Sockets.TcpClient.SendTimeout%2A> property determines the amount of time that the <xref:System.Net.Sockets.Socket.Send%2A> method will block until it is able to return successfully. This time is measured in milliseconds.  \n  \n After you call the <xref:System.Net.Sockets.NetworkStream.Write%2A> method, the underlying <xref:System.Net.Sockets.Socket> returns the number of bytes actually sent to the host. The <xref:System.Net.Sockets.TcpClient.SendTimeout%2A> property determines the amount of time a <xref:System.Net.Sockets.TcpClient> will wait before receiving the number of bytes returned. If the time-out expires before the <xref:System.Net.Sockets.Socket.Send%2A> method successfully completes, <xref:System.Net.Sockets.TcpClient> will throw a <xref:System.Net.Sockets.SocketException>. There is no time-out by default."
  example:
  - "The following code example sets and gets the <xref:System.Net.Sockets.TcpClient.SendTimeout%2A> value.  \n  \n [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#11)]\n [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#11)]\n [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#11)]"
  syntax:
    content: public int SendTimeout { get; set; }
    return:
      type: System.Int32
      description: The send time-out value, in milliseconds. The default is 0.
  overload: System.Net.Sockets.TcpClient.SendTimeout*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
  ms.author: bobdel
  manager: markl
- uid: System.Net.Sockets.TcpClient.System#IDisposable#Dispose
  commentId: M:System.Net.Sockets.TcpClient.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: System.Net.Sockets.TcpClient
  langs:
  - csharp
  name: IDisposable.Dispose()
  nameWithType: TcpClient.IDisposable.Dispose()
  fullName: TcpClient.IDisposable.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  syntax:
    content: void IDisposable.Dispose ();
    parameters: []
  overload: System.Net.Sockets.TcpClient.System#IDisposable#Dispose*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Net.Sockets.SocketException
  parent: System.Net.Sockets
  isExternal: false
  name: SocketException
  nameWithType: SocketException
  fullName: System.Net.Sockets.SocketException
- uid: System.ObjectDisposedException
  parent: System
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.Security.SecurityException
  parent: System.Security
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Net.Sockets.TcpClient.#ctor
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: TcpClient()
  nameWithType: TcpClient.TcpClient()
  fullName: TcpClient.TcpClient()
- uid: System.Net.Sockets.TcpClient.#ctor(System.Net.IPEndPoint)
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: TcpClient(IPEndPoint)
  nameWithType: TcpClient.TcpClient(IPEndPoint)
  fullName: TcpClient.TcpClient(IPEndPoint)
- uid: System.Net.IPEndPoint
  parent: System.Net
  isExternal: false
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Net.Sockets.TcpClient.#ctor(System.Net.Sockets.AddressFamily)
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: TcpClient(AddressFamily)
  nameWithType: TcpClient.TcpClient(AddressFamily)
  fullName: TcpClient.TcpClient(AddressFamily)
- uid: System.Net.Sockets.AddressFamily
  parent: System.Net.Sockets
  isExternal: false
  name: AddressFamily
  nameWithType: AddressFamily
  fullName: System.Net.Sockets.AddressFamily
- uid: System.Net.Sockets.TcpClient.#ctor(System.String,System.Int32)
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: TcpClient(String, Int32)
  nameWithType: TcpClient.TcpClient(String, Int32)
  fullName: TcpClient.TcpClient(String, Int32)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Sockets.TcpClient.Active
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: Active
  nameWithType: TcpClient.Active
  fullName: TcpClient.Active
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Sockets.TcpClient.Available
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: Available
  nameWithType: TcpClient.Available
  fullName: TcpClient.Available
- uid: System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: BeginConnect(IPAddress, Int32, AsyncCallback, Object)
  nameWithType: TcpClient.BeginConnect(IPAddress, Int32, AsyncCallback, Object)
  fullName: TcpClient.BeginConnect(IPAddress, Int32, AsyncCallback, Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.AsyncCallback
  parent: System
  isExternal: false
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: BeginConnect(IPAddress[], Int32, AsyncCallback, Object)
  nameWithType: TcpClient.BeginConnect(IPAddress[], Int32, AsyncCallback, Object)
  fullName: TcpClient.BeginConnect(IPAddress[], Int32, AsyncCallback, Object)
- uid: System.Net.IPAddress[]
  parent: System.Net
  isExternal: false
  name: IPAddress[]
  nameWithType: IPAddress[]
  fullName: System.Net.IPAddress[]
  spec.csharp:
  - uid: System.Net.IPAddress
    name: IPAddress
    nameWithType: IPAddress
    fullName: System.Net.IPAddress
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.Sockets.TcpClient.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: BeginConnect(String, Int32, AsyncCallback, Object)
  nameWithType: TcpClient.BeginConnect(String, Int32, AsyncCallback, Object)
  fullName: TcpClient.BeginConnect(String, Int32, AsyncCallback, Object)
- uid: System.Net.Sockets.TcpClient.Client
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: Client
  nameWithType: TcpClient.Client
  fullName: TcpClient.Client
- uid: System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: false
  name: Socket
  nameWithType: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Net.Sockets.TcpClient.Close
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: Close()
  nameWithType: TcpClient.Close()
  fullName: TcpClient.Close()
- uid: System.Net.Sockets.TcpClient.Connect(System.Net.IPEndPoint)
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: Connect(IPEndPoint)
  nameWithType: TcpClient.Connect(IPEndPoint)
  fullName: TcpClient.Connect(IPEndPoint)
- uid: System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: Connect(IPAddress, Int32)
  nameWithType: TcpClient.Connect(IPAddress, Int32)
  fullName: TcpClient.Connect(IPAddress, Int32)
- uid: System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress[],System.Int32)
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: Connect(IPAddress[], Int32)
  nameWithType: TcpClient.Connect(IPAddress[], Int32)
  fullName: TcpClient.Connect(IPAddress[], Int32)
- uid: System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: Connect(String, Int32)
  nameWithType: TcpClient.Connect(String, Int32)
  fullName: TcpClient.Connect(String, Int32)
- uid: System.Net.Sockets.TcpClient.ConnectAsync(System.String,System.Int32)
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: ConnectAsync(String, Int32)
  nameWithType: TcpClient.ConnectAsync(String, Int32)
  fullName: TcpClient.ConnectAsync(String, Int32)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: ConnectAsync(IPAddress, Int32)
  nameWithType: TcpClient.ConnectAsync(IPAddress, Int32)
  fullName: TcpClient.ConnectAsync(IPAddress, Int32)
- uid: System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress[],System.Int32)
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: ConnectAsync(IPAddress[], Int32)
  nameWithType: TcpClient.ConnectAsync(IPAddress[], Int32)
  fullName: TcpClient.ConnectAsync(IPAddress[], Int32)
- uid: System.Net.Sockets.TcpClient.Connected
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: Connected
  nameWithType: TcpClient.Connected
  fullName: TcpClient.Connected
- uid: System.Net.Sockets.TcpClient.Dispose
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: Dispose()
  nameWithType: TcpClient.Dispose()
  fullName: TcpClient.Dispose()
- uid: System.Net.Sockets.TcpClient.Dispose(System.Boolean)
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: TcpClient.Dispose(Boolean)
  fullName: TcpClient.Dispose(Boolean)
- uid: System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: EndConnect(IAsyncResult)
  nameWithType: TcpClient.EndConnect(IAsyncResult)
  fullName: TcpClient.EndConnect(IAsyncResult)
- uid: System.Net.Sockets.TcpClient.ExclusiveAddressUse
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: TcpClient.ExclusiveAddressUse
  fullName: TcpClient.ExclusiveAddressUse
- uid: System.Net.Sockets.TcpClient.Finalize
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: Finalize()
  nameWithType: TcpClient.Finalize()
  fullName: TcpClient.Finalize()
- uid: System.Net.Sockets.TcpClient.GetStream
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: GetStream()
  nameWithType: TcpClient.GetStream()
  fullName: TcpClient.GetStream()
- uid: System.Net.Sockets.NetworkStream
  parent: System.Net.Sockets
  isExternal: false
  name: NetworkStream
  nameWithType: NetworkStream
  fullName: System.Net.Sockets.NetworkStream
- uid: System.Net.Sockets.TcpClient.LingerState
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: LingerState
  nameWithType: TcpClient.LingerState
  fullName: TcpClient.LingerState
- uid: System.Net.Sockets.LingerOption
  parent: System.Net.Sockets
  isExternal: false
  name: LingerOption
  nameWithType: LingerOption
  fullName: System.Net.Sockets.LingerOption
- uid: System.Net.Sockets.TcpClient.NoDelay
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: NoDelay
  nameWithType: TcpClient.NoDelay
  fullName: TcpClient.NoDelay
- uid: System.Net.Sockets.TcpClient.ReceiveBufferSize
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: ReceiveBufferSize
  nameWithType: TcpClient.ReceiveBufferSize
  fullName: TcpClient.ReceiveBufferSize
- uid: System.Net.Sockets.TcpClient.ReceiveTimeout
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: ReceiveTimeout
  nameWithType: TcpClient.ReceiveTimeout
  fullName: TcpClient.ReceiveTimeout
- uid: System.Net.Sockets.TcpClient.SendBufferSize
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: SendBufferSize
  nameWithType: TcpClient.SendBufferSize
  fullName: TcpClient.SendBufferSize
- uid: System.Net.Sockets.TcpClient.SendTimeout
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: SendTimeout
  nameWithType: TcpClient.SendTimeout
  fullName: TcpClient.SendTimeout
- uid: System.Net.Sockets.TcpClient.System#IDisposable#Dispose
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: IDisposable.Dispose()
  nameWithType: TcpClient.IDisposable.Dispose()
  fullName: TcpClient.IDisposable.Dispose()
- uid: System.Net.Sockets.TcpClient.#ctor*
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: TcpClient
  nameWithType: TcpClient.TcpClient
  fullName: TcpClient.TcpClient
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
- uid: System.Net.Sockets.TcpClient.Active*
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: Active
  nameWithType: TcpClient.Active
  fullName: TcpClient.Active
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
- uid: System.Net.Sockets.TcpClient.Available*
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: Available
  nameWithType: TcpClient.Available
  fullName: TcpClient.Available
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
- uid: System.Net.Sockets.TcpClient.BeginConnect*
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: BeginConnect
  nameWithType: TcpClient.BeginConnect
  fullName: TcpClient.BeginConnect
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
- uid: System.Net.Sockets.TcpClient.Client*
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: Client
  nameWithType: TcpClient.Client
  fullName: TcpClient.Client
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
- uid: System.Net.Sockets.TcpClient.Close*
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: Close
  nameWithType: TcpClient.Close
  fullName: TcpClient.Close
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
- uid: System.Net.Sockets.TcpClient.Connect*
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: Connect
  nameWithType: TcpClient.Connect
  fullName: TcpClient.Connect
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
- uid: System.Net.Sockets.TcpClient.ConnectAsync*
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: ConnectAsync
  nameWithType: TcpClient.ConnectAsync
  fullName: TcpClient.ConnectAsync
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
- uid: System.Net.Sockets.TcpClient.Connected*
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: Connected
  nameWithType: TcpClient.Connected
  fullName: TcpClient.Connected
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
- uid: System.Net.Sockets.TcpClient.Dispose*
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: Dispose
  nameWithType: TcpClient.Dispose
  fullName: TcpClient.Dispose
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
- uid: System.Net.Sockets.TcpClient.EndConnect*
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: EndConnect
  nameWithType: TcpClient.EndConnect
  fullName: TcpClient.EndConnect
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
- uid: System.Net.Sockets.TcpClient.ExclusiveAddressUse*
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: TcpClient.ExclusiveAddressUse
  fullName: TcpClient.ExclusiveAddressUse
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
- uid: System.Net.Sockets.TcpClient.Finalize*
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: Finalize
  nameWithType: TcpClient.Finalize
  fullName: TcpClient.Finalize
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
- uid: System.Net.Sockets.TcpClient.GetStream*
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: GetStream
  nameWithType: TcpClient.GetStream
  fullName: TcpClient.GetStream
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
- uid: System.Net.Sockets.TcpClient.LingerState*
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: LingerState
  nameWithType: TcpClient.LingerState
  fullName: TcpClient.LingerState
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
- uid: System.Net.Sockets.TcpClient.NoDelay*
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: NoDelay
  nameWithType: TcpClient.NoDelay
  fullName: TcpClient.NoDelay
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
- uid: System.Net.Sockets.TcpClient.ReceiveBufferSize*
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: ReceiveBufferSize
  nameWithType: TcpClient.ReceiveBufferSize
  fullName: TcpClient.ReceiveBufferSize
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
- uid: System.Net.Sockets.TcpClient.ReceiveTimeout*
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: ReceiveTimeout
  nameWithType: TcpClient.ReceiveTimeout
  fullName: TcpClient.ReceiveTimeout
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
- uid: System.Net.Sockets.TcpClient.SendBufferSize*
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: SendBufferSize
  nameWithType: TcpClient.SendBufferSize
  fullName: TcpClient.SendBufferSize
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
- uid: System.Net.Sockets.TcpClient.SendTimeout*
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: SendTimeout
  nameWithType: TcpClient.SendTimeout
  fullName: TcpClient.SendTimeout
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
- uid: System.Net.Sockets.TcpClient.System#IDisposable#Dispose*
  parent: System.Net.Sockets.TcpClient
  isExternal: false
  name: System.IDisposable.Dispose
  nameWithType: TcpClient.System.IDisposable.Dispose
  fullName: TcpClient.System.IDisposable.Dispose
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Sockets/TcpClient.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
